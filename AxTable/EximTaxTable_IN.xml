<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximTaxTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximTaxTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays description of the <c>TaxComponentTable_IN</c> table record.
    /// </summary>
    /// <returns>
    /// The description.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Description displayDescription()
    {
        return TaxComponentTable_IN::find(this.TaxComponentTable).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(EximTaxTable_IN, TaxComponentTable):
                                                                if (this.TaxComponentTable)
                                                                {
                                                                    this.TaxCode = '';
                                                                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(EximTaxTable_IN, TaxComponentTable) :
                    if (!TaxComponentTable_IN::find(this.TaxComponentTable))
                    {
                       ret = checkFailed(strfmt("@GLS5073", this.TaxComponentTable, TaxTypeComponent_IN::Customs));
                    }
                    break;

                case fieldnum(EximTaxTable_IN, TaxCode) :
                    if (this.TaxCode && TaxTable::find(this.TaxCode).TaxComponentTable_IN != this.TaxComponentTable)
                    {
                        ret = checkFailed(strfmt("@GLS61652", this.TaxCode, this.TaxComponentTable));
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDEPBIncentiveTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates DEPB incentive tax amount.
    /// </summary>
    /// <param name="_purchLineRecId">
    /// The purch line RecId.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_setOffRules">
    /// The set off rules.
    /// </param>
    /// <param name="_taxDate">
    /// The tax date.
    /// </param>
    /// <param name="_dutyAvailed">
    /// The duty availed.
    /// </param>
    /// <param name="_taxAmount">
    /// The tax amount.
    /// </param>
    /// <param name="_authorizationType">
    /// The authorization type.
    /// </param>
    /// <returns>
    /// The DEPB incentive tax amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container calcDEPBIncentiveTaxAmount(
        RefRecId                 _purchLineRecId,
        TaxCode                  _taxCode,
        container                _setOffRules,
        TransDate                _taxDate,
        container                _dutyAvailed,
        AmountMST                _taxAmount,
        EximAuthorizationType_IN _authorizationType)
    {
        EximTaxTable_IN            eximTaxTable;
        EximPurchLine_IN           eximPurchLine;
        EximDEPBSchemesTable_IN    depbSchemesTable;
        EximDEPBDetailsTable_IN    depbDetailsTable;
        EximSetOffRulesTable_IN    setOffRulesTable;
        EximSetOffRulesLine_IN     setOffRulesLine;
        EximIncentiveSchemeData_IN incentiveSchemeData;
        AmountMST                  availed;
        AmountMST                  balanceAmt;
        AmountMST                  depbDetailsBalance;
        AmountMST                  incentiveTaxAmount;
        container                  dutyAvailed = _dutyAvailed;
        container                  setOffRules = _setOffRules;
        Counter                    purchLinePos;
        Counter                    depbDetailsTablePos;
        boolean                    canProceed;
        AmountMST                  zeroAmount = 0.0;

        if (EximParameters_IN::checkDEPBParameters())
        {
            // Query has been wriiten to get whether tax code has been written to validate whether tax code has been defined for DEPB or not
           select firstonly RecId, PurchLineRecId, EximIncentiveSchemeGroup, EximPorts, EximProductGroupTable
                from eximPurchLine
                        where eximPurchLine.PurchLineRecId                  == _purchLineRecId
                join RecId, EximIncentiveSchemeGroup, AuthorizationId, IncentiveScheme
                    from incentiveSchemeData
                       where incentiveSchemeData.EximIncentiveSchemeGroup   == eximPurchLine.EximIncentiveSchemeGroup
                           && incentiveSchemeData.IncentiveScheme           == _authorizationType
                    join  RecId, EximIncentiveSchemeGroup, TaxCode
                        from eximTaxTable
                           where eximTaxTable.EximIncentiveSchemeGroup      == eximPurchLine.EximIncentiveSchemeGroup
                               && eximTaxTable.TaxCode                      == _taxCode;
            if (eximPurchLine.RecId)
            {
                while select EximDEPBSchemesTable, Column, IncentiveSchemeDataRecId, RecId
                    from setOffRulesTable
                        order by Column
                    join EximProductGroupTable, Column, SetOffRulesRecId, RecId
                        from setOffRulesLine
                            order by Column
                                where setOffRulesTable.IncentiveSchemeDataRecId == incentiveSchemeData.RecId
                                   && setOffRulesLine.SetOffRulesRecId          == setOffRulesTable.RecId
                        join IssueDateTime, RecId
                            from depbSchemesTable
                                where depbSchemesTable.RecId == setOffRulesTable.EximDEPBSchemesTable
                                   && depbSchemesTable.Status   == EximAuthorizationStatus_IN::Approved
                                   && !depbSchemesTable.Closed
                {
                    // Checking attached scheme id is valid or not
                    if (depbSchemesTable.RecId
                        && _taxDate >= DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(depbSchemesTable.IssueDateTime, DateTimeUtil::getUserPreferredTimeZone()))
                        && _taxDate <= DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(EximDEPBSchemesLine_IN::latestExpiryDate(setOffRulesTable.EximDEPBSchemesTable), DateTimeUtil::getUserPreferredTimeZone())))
                    {
                        select DutyEntitlement, DutyAvailed, Sold, RecId
                            from  depbDetailsTable
                                where depbDetailsTable.SchemesTableRecId        == depbSchemesTable.RecId
                                   && depbDetailsTable.EximProductGroupTable    == setOffRulesLine.EximProductGroupTable;

                        if (depbDetailsTable.RecId)
                        {
                            canProceed          = true;
                            depbDetailsBalance  = depbDetailsTable.balanceLicenseAmount();
                            depbDetailsTablePos = confind(setOffRules,depbDetailsTable.RecId);
                            if (confind(dutyAvailed,depbDetailsTable.RecId))
                            {
                                availed = conpeek(dutyAvailed, confind(dutyAvailed,depbDetailsTable.RecId) + 1);
                            }
                            else
                            {
                                availed = zeroAmount;
                            }

                            if (confind(dutyAvailed,depbDetailsTable.RecId))
                            {
                                availed         = conpeek(dutyAvailed, confind(dutyAvailed,depbDetailsTable.RecId) + 1);
                            }
                            else
                            {
                                availed         = 0;
                            }

                            if (depbDetailsTablePos == 0
                                || (depbDetailsTablePos
                                && depbDetailsBalance > conpeek(setOffRules, depbDetailsTablePos + 1)))
                            {
                                // Checking whether can proceed further for calculating exim incentive scheme tax amount
                                if (conlen(setOffRules))
                                {
                                    for (purchLinePos = 4 ; purchLinePos <= conlen(setOffRules); purchLinePos = purchLinePos + 4)
                                    {
                                        if (eximPurchLine.PurchLineRecId == conpeek(setOffRules, purchLinePos)
                                            && (_taxCode == conpeek(setOffRules, purchLinePos - 1)))
                                        {
                                            canProceed = false;
                                            break;
                                        }
                                    }
                                }

                                if (canProceed)
                                {
                                    // This code will be execute when tax amount is less than or equal to DEPB license balance
                                    // Saving the required information to setOffRules container, the containers will be used to update the DEPB tables during the BOE posting
                                    // dutyAvailed container used to calculate the balance in run time with out updating the BOE
                                    if (_taxAmount <= (depbDetailsBalance - availed))
                                    {
                                        incentiveTaxAmount = _taxAmount;

                                        setOffRules = conpoke(setOffRules, conlen(setOffRules) + 1,
                                                              depbDetailsTable.RecId,
                                                              _taxAmount,
                                                              _taxCode,
                                                              eximPurchLine.PurchLineRecId);

                                        if (!confind(dutyAvailed, depbDetailsTable.RecId))
                                        {
                                            dutyAvailed  = conpoke(dutyAvailed,
                                                                   conlen(dutyAvailed)+1,
                                                                   depbDetailsTable.RecId,
                                                                   _taxAmount);
                                        }
                                        else
                                        {
                                            dutyAvailed = conpoke(dutyAvailed,
                                                                  confind(dutyAvailed,depbDetailsTable.RecId) + 1,
                                                                  (availed + _taxAmount));
                                        }
                                    }

                                    // This code will be execute when tax amount is greater than DEPB license balance
                                    // Saving the required information to setOffRules container, the containers will be used to update the DEPB tables during the BOE posting
                                    // dutyAvailed container used to calculate the balance in run time with out updating the BOE
                                    else
                                    {
                                        incentiveTaxAmount += (depbDetailsBalance - availed);
                                        balanceAmt          = _taxAmount - (depbDetailsBalance - availed);
                                        setOffRules         = conpoke(setOffRules,
                                                              conlen(setOffRules) + 1,
                                                              depbDetailsTable.RecId,
                                                              (depbDetailsBalance - availed),
                                                              _taxCode,
                                                              eximPurchLine.PurchLineRecId);

                                        if (!confind(dutyAvailed, depbDetailsTable.RecId))
                                        {
                                            dutyAvailed  = conpoke(dutyAvailed, conlen(dutyAvailed)+1, depbDetailsTable.RecId, depbDetailsBalance - availed);
                                        }
                                        else
                                        {
                                            dutyAvailed = conpoke(dutyAvailed, confind(dutyAvailed,depbDetailsTable.RecId) + 1,
                                                                conpeek(dutyAvailed,confind(dutyAvailed,depbDetailsTable.RecId) + 1) +
                                                                (depbDetailsBalance - availed));
                                        }
                                    }
                                }
                                // This code will be execute when tax amount is not fully utilized from one DEPB license ,
                                // This balace tax amount will be utilize the remaning DEPB license balances which are attched to set off rules
                                // Saving the required information to setOffRules container, the containers will be used to update the DEPB tables during the BOE posting
                                // dutyAvailed container used to calculate the balance in run time with out updating the BOE
                                else if (balanceAmt)
                                {
                                    // This code will be execute when balace tax amount is less than or equal to DEPB license balance
                                    // Saving the required information to setOffRules container, the containers will be used to update the DEPB tables during the BOE posting
                                    // dutyAvailed container used to calculate the balance in run time with out updating the BOE
                                    if (balanceAmt <= (depbDetailsBalance  - availed))
                                    {
                                        incentiveTaxAmount += balanceAmt;
                                        setOffRules = conpoke(setOffRules,conlen(setOffRules) + 1,depbDetailsTable.RecId,balanceAmt, _taxCode, eximPurchLine.PurchLineRecId);

                                        if (!confind(dutyAvailed,depbDetailsTable.RecId))
                                        {
                                            dutyAvailed  = conpoke(dutyAvailed, conlen(dutyAvailed)+1, depbDetailsTable.RecId, balanceAmt);
                                        }
                                        else
                                        {
                                            dutyAvailed = conpoke(dutyAvailed, confind(dutyAvailed,depbDetailsTable.RecId) + 1, (availed + balanceAmt));
                                        }

                                        balanceAmt = (balanceAmt - balanceAmt);
                                    }
                                    // This code will be execute when balance tax amount is greater than DEPB license balance
                                    // Saving the required information to setOffRules container, the containers will be used to update the DEPB tables during the BOE posting
                                    // dutyAvailed container used to calculate the balance in run time with out updating the BOE
                                    else
                                    {
                                        incentiveTaxAmount += (depbDetailsBalance - availed);
                                        balanceAmt          = (balanceAmt - (depbDetailsBalance - availed));
                                        setOffRules         = conpoke(setOffRules,
                                                                      conlen(setOffRules) + 1,
                                                                      depbDetailsTable.RecId,
                                                                      (depbDetailsBalance - availed),
                                                                      _taxCode,
                                                                      eximPurchLine.PurchLineRecId);

                                        if (!confind(dutyAvailed,depbDetailsTable.RecId))
                                        {
                                            dutyAvailed  = conpoke(dutyAvailed, conlen(dutyAvailed)+1, depbDetailsTable.RecId, (depbDetailsBalance - availed));
                                        }
                                        else
                                        {
                                            dutyAvailed = conpoke(dutyAvailed,
                                                            confind(dutyAvailed,
                                                            depbDetailsTable.RecId) + 1,
                                                                conpeek(dutyAvailed,
                                                                        confind(dutyAvailed, depbDetailsTable.RecId) + 1) + (depbDetailsBalance - availed));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return [incentiveTaxAmount, setOffRules, dutyAvailed];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEPCGIncentiveTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates EPCG incentive tax amount.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_taxDate">
    /// The tax date.
    /// </param>
    /// <param name="_incentiveTaxBaseAmount">
    /// The incentive tax base amount.
    /// </param>
    /// <param name="_balanceTaxAmount">
    /// The balance tax amount.
    /// </param>
    /// <param name="_formulaDesigner">
    /// The formula designer.
    /// </param>
    /// <param name="_epcgTaxPct">
    /// The epcg tax pct.
    /// </param>
    /// <param name="_sourceCurrencyCode">
    /// The source currency code.
    /// </param>
    /// <param name="_taxPercent">
    /// The tax percent.
    /// </param>
    /// <returns>
    /// The EPCG incentive tax amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container calcEPCGIncentiveTaxAmount(
        TaxCode                  _taxCode,
        TransDate                _taxDate,
        AmountMST                _incentiveTaxBaseAmount,
        AmountMST                _balanceTaxAmount,
        FormulaDesigner_IN       _formulaDesigner,
        Percent                  _epcgTaxPct,
        CurrencyCode             _sourceCurrencyCode,
        TaxValue                 _taxPercent)
    {
        AmountMST                           balanceTaxAmount;
        AmountMST                           incentiveTaxAmount;
        TaxAmountCur                        balanceTaxAmountCur;
        TaxAmountCur                        incentiveTaxAmountCur;
        TaxAmount                           taxMin;
        TaxAmount                           taxMax;

        incentiveTaxAmount = EximTaxTable_IN::epcgTaxAmount(_formulaDesigner.TaxableBasis,
                                                        _incentiveTaxBaseAmount,
                                                        _epcgTaxPct);

        incentiveTaxAmountCur = CurrencyHelper_IN::customsCurAmount_IN(incentiveTaxAmount,
                                                              _sourceCurrencyCode,
                                                              Direction_IN::Import,
                                                              _taxDate);

        balanceTaxAmount = EximTaxTable_IN::epcgTaxAmount(_formulaDesigner.TaxableBasis,
                                                      _balanceTaxAmount,
                                                      0,
                                                      _taxPercent);

        balanceTaxAmountCur = CurrencyHelper_IN::customsCurAmount_IN(balanceTaxAmount,
                                                            _sourceCurrencyCode,
                                                            Direction_IN::Import,
                                                            _taxDate);

        [taxMin, taxMax] = TaxCollectLimit::customsTaxLimits_IN(_taxCode, _taxDate, Direction_IN::Import);

        if (taxMin
            && balanceTaxAmount < taxMin)
        {
            balanceTaxAmount    = 0;
            balanceTaxAmountCur = 0;
        }
        else if (taxMax
                 && balanceTaxAmount > taxMax)
        {
            balanceTaxAmount = taxMax;
        }

        return [incentiveTaxAmount, incentiveTaxAmountCur, balanceTaxAmount, balanceTaxAmountCur];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncentiveTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates incentive tax amount.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The temporary tax work transaction.
    /// </param>
    /// <param name="_taxQty">
    /// The tax quantity.
    /// </param>
    /// <param name="_purchParmLine">
    /// The purch parm line.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmount</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxAmount calcIncentiveTaxAmount(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        TaxQty          _taxQty,
        PurchParmLine   _purchParmLine = null)
    {
        PurchLine                        purchLine;
        PurchLine_IN                     purchLine_IN;
        EximTaxTable_IN                  eximTaxTable;
        EximPurchLine_IN                 eximPurchLine;
        EximImportDetails_IN             importDetails;
        EximIncentiveSchemeData_IN       incentiveSchemeData;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        AmountMST                        amountOrigin;
        AmountMST                        assessbleValue;
        AmountMST                        balanceAmount;
        AmountMST                        netBalanceValue;
        Qty                              netBalanceQty;
        PurchOrderedQty                  purchQty;
        TaxAmount                        taxAmount;
        EximAuthorizationType_IN         currentIncentiveScheme;
        FormulaDesigner_IN               formulaDesigner;
        TaxOnItem                        taxOnItem;

        if (((EximParameters_IN::checkAAParameters()
                  && _tmpTaxWorkTrans.EximIncentiveScheme_IN == EximIncentiveScheme_IN::AA))
            || ((EximParameters_IN::checkDFIAParameters()
                  && _tmpTaxWorkTrans.EximIncentiveScheme_IN == EximIncentiveScheme_IN::DFIA)))
        {
           formulaDesigner         = FormulaDesigner_IN::findByTaxCode(_tmpTaxWorkTrans.TaxItemGroup, _tmpTaxWorkTrans.TaxCode);
           // To account for Enum difference.
           currentIncentiveScheme = str2enum(currentIncentiveScheme, enum2str(_tmpTaxWorkTrans.EximIncentiveScheme_IN));
           select firstonly RecId, PurchLineRecId, EximIncentiveSchemeGroup, EximPorts, EximProductGroupTable
                from eximPurchLine
                    where eximPurchLine.PurchLineRecId == _tmpTaxWorkTrans.SourceRecId
                join RecId, EximIncentiveSchemeGroup, AuthorizationId, IncentiveScheme
                    from incentiveSchemeData
                       where incentiveSchemeData.EximIncentiveSchemeGroup == eximPurchLine.EximIncentiveSchemeGroup
                           && incentiveSchemeData.IncentiveScheme         == currentIncentiveScheme
               join  RecId, EximIncentiveSchemeGroup, TaxCode
                    from eximTaxTable
                       where eximTaxTable.EximIncentiveSchemeGroup == eximPurchLine.EximIncentiveSchemeGroup
                           && eximTaxTable.TaxCode              == _tmpTaxWorkTrans.TaxCode
               join  RecId, AuthorizationId, AuthorizationType, EximPorts, EximProductGroupTable, Closed
                    from authorizationSchemesTable
                        where authorizationSchemesTable.AuthorizationId   == incentiveSchemeData.AuthorizationId
                           && authorizationSchemesTable.AuthorizationType == incentiveSchemeData.IncentiveScheme
                           && authorizationSchemesTable.EximPorts            == eximPurchLine.EximPorts
                           && authorizationSchemesTable.EximProductGroupTable      == eximPurchLine.EximProductGroupTable
                join purchLine
                    where purchLine.RecId  == eximPurchLine.PurchLineRecId
                join importDetails
                    where importDetails.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                        && importDetails.ItemId                         == purchLine.ItemId
                outer join AssessableValueTransactionCurrency, MaximumRetailPrice from purchLine_IN
                    where purchLine_IN.PurchLine == purchLine.RecId;

            if (importDetails.RecId && purchline.PurchQty)
            {
                if (formulaDesigner.TaxableBasis != TaxableBasis_IN::ExclAmount)
                {
                    if (formulaDesigner.TaxableBasis == TaxableBasis_IN::Assessable)
                    {
                        assessbleValue  = CurrencyExchangeHelper::amount(_purchParmLine ? _purchParmLine.purchParmLine_IN().AssessableValueTransactionCurrency : purchLine_IN.AssessableValueTransactionCurrency * _taxQty / purchline.PurchQty);
                    }
                    else if (formulaDesigner.TaxableBasis == TaxableBasis_IN::LineAmount)
                    {
                        assessbleValue  = CurrencyExchangeHelper::amount(_purchParmLine ? _purchParmLine.LineAmount : purchLine.LineAmount * _taxQty / purchline.PurchQty);
                    }
                    else if (formulaDesigner.TaxableBasis == TaxableBasis_IN::MRP)
                    {
                        assessbleValue  = CurrencyExchangeHelper::amount((_purchParmLine ? _purchParmLine.purchParmLine_IN().MaximumRetailPrice : purchLine_IN.MaximumRetailPrice) * _taxQty);
                    }
                    taxOnItem = TaxOnItem::find(purchLine.TaxItemGroup, formulaDesigner.TaxCode);
                    if (taxOnItem && taxOnItem.AbatementPercent_IN)
                    {
                        assessbleValue = assessbleValue * (100 - taxOnItem.AbatementPercent_IN) / 100;
                    }
                    assessbleValue  = CurrencyHelper_IN::customsMSTAmount_IN(assessbleValue,
                                                                    _tmpTaxWorkTrans.SourceCurrencyCode,
                                                                    Direction_IN::Import,
                                                                    _tmpTaxWorkTrans.TransDate);
                    balanceAmount   = EximImportDetails_IN::balanceAmount(authorizationSchemesTable.RecId);
                    netBalanceValue = importDetails.displayNetBalValue();

                    // Exim amount origin for 'Value'.
                    if (!netBalanceValue)
                    {
                        netBalanceQty = importDetails.displayNetBalQty();

                        if (netBalanceQty)
                        {
                            purchQty = _taxQty;

                            if (purchLine.PurchUnit != importDetails.Unit)
                            {
                                purchQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                                            purchLine.ItemId, 
                                                                            purchLine.InventDimId, 
                                                                            purchQty, 
                                                                            purchLine.PurchUnit, 
                                                                            importDetails.Unit,
                                                                            NoYes::Yes);
                            }
                            if (purchQty)
                            {
                                netBalanceValue = (netBalanceQty * assessbleValue) / purchQty;
                            }
                        }
                    }
                    amountOrigin = min(assessbleValue, netBalanceValue, balanceAmount);
                }
                taxAmount = EximTaxTable_IN::calcIncentiveTaxAmountExcl(_tmpTaxWorkTrans, formulaDesigner, purchLine, amountOrigin);
            }
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncentiveTaxAmountExcl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates incentive tax amount excl.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The temporary tax work transaction.
    /// </param>
    /// <param name="_formulaDesigner">
    /// The formula designer.
    /// </param>
    /// <param name="_purchLine">
    /// The purch line.
    /// </param>
    /// <param name="_amountOrigin">
    /// The origin amount.
    /// </param>
    /// <param name="_post">
    /// The post flag.
    /// </param>
    /// <param name="_customsVendBOEJour">
    /// The customs vend BOE journal.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmount</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxAmount calcIncentiveTaxAmountExcl(
        TmpTaxWorkTrans             _tmpTaxWorkTrans,
        FormulaDesigner_IN          _formulaDesigner,
        PurchLine                   _purchLine,
        AmountMST                   _amountOrigin,
        boolean                     _post = false,
        CustomsVendBOEJour_IN       _customsVendBOEJour = null)
    {
        AmountCur                   basemount = 0;
        TmpTaxWorkTrans             tmpTaxWorkTransCopy;
        TaxData                     taxData;
        TaxValue                    taxValue;
        ExecutePermission           perm;
        EximVendBOESubTrans_IN      eximVendBOESubTrans;
        CustomsVendBOESubTrans_IN   customsVendBOESubTrans;
        CustomsVendBOETrans_IN      customsVendBOETrans;

        real            codeNum;
        CalcExp_IN      code;
        CalcExp_IN      formula;
        char            operator;
        Counter         position = 1;
        Counter         leftPosition;
        Counter         rightPosition;
        str             delimiterVal;
        int             length;

        #define.MaxPercent(100)

        tmpTaxWorkTransCopy.setTmpData(_tmpTaxWorkTrans);
        taxValue  = taxData.percentForTax_IN(_tmpTaxWorkTrans.TaxCode,
                                             _tmpTaxWorkTrans.CalculationDate,
                                             _tmpTaxWorkTrans.TaxBaseAmount,
                                             _purchLine)/#MaxPercent;
        formula = num2expstr(_amountOrigin);
        length = strlen(_formulaDesigner.CalcExp1);
        perm = new ExecutePermission();
        perm.assert();
        while (position <= length)
        {
            codeNum = 0;
            operator = substr(_formulaDesigner.CalcExp1, position, 1);
            delimiterVal    = substr(_formulaDesigner.CalcExp1, position+1, 1);
            leftPosition    = position+1;
            rightPosition   = strfind(_formulaDesigner.CalcExp1, delimiterVal, position + 2, length - (position+1));
            code            = substr(_formulaDesigner.CalcExp1, leftPosition + 1, rightPosition - leftPosition - 1);

            if (delimiterVal == num2char(164))
            {
                if (!_post)
                {
                    select sum(EximTaxAmount_IN)
                        from tmpTaxWorkTransCopy
                        where tmpTaxWorkTransCopy.TaxCode == code &&
                                tmpTaxWorkTransCopy.SourceTableId == tablenum(PurchLine) &&
                                tmpTaxWorkTransCopy.SourceRecId == _purchLine.RecId;
                    codeNum = abs(tmpTaxWorkTransCopy.EximTaxAmount_IN);
                }
                else
                {
                    select sum(TaxAmount)
                        from eximVendBOESubTrans
                        exists join customsVendBOETrans
                        where customsVendBOETrans.PurchLineRecId                == _purchLine.RecId
                           && customsVendBOETrans.PurchInternalBOEId            == _customsVendBOEJour.PurchInternalBOEId
                           && customsVendBOETrans.BillOfEntryDate               == _customsVendBOEJour.BillOfEntryDate
                           && customsVendBOETrans.CustomsBillOfEntryNumberTable == _customsVendBOEJour.CustomsBillOfEntryNumberTable
                           && customsVendBOETrans.PurchId                       == _customsVendBOEJour.PurchId
                           && customsVendBOETrans.Status                        != CustomsVendBOEStatus_IN::Canceled
                        exists join customsVendBOESubTrans
                        where customsVendBOESubTrans.TaxCode    == code
                           && customsVendBOESubTrans.recid      == eximVendBOESubTrans.CustomsVendBOESubTransRecId
                           && customsVendBOESubTrans.BOETransRefRecId == customsVendBOETrans.RecId;
                    codeNum = abs(eximVendBOESubTrans.TaxAmount);
                }
            }

            code = num2expstr(codeNum);

            if (!(operator == '/' && str2num(code) == 0))
            {
                if (operator == '-' && str2num(code) < 0)
                {
                    code      = num2expstr(abs(codeNum));
                    operator  = '+';
                }

                formula    += operator + code;
            }
            position    = rightPosition + 1;
            formula     = Tax::evaluate_IN(formula);
        }
        CodeAccessPermission::revertAssert();
        basemount = str2num(formula);
        if (_formulaDesigner.PriceInclTax)
        {
            return CurrencyExchangeHelper::amount(basemount * taxValue / (1 + taxValue));
        }
        else
        {
            return CurrencyExchangeHelper::amount(basemount * taxValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>epcgTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets epcg tax amount.
    /// </summary>
    /// <param name="_taxableBasis">
    /// The taxable basis.
    /// </param>
    /// <param name="_baseAmount">
    /// The base amount.
    /// </param>
    /// <param name="_eximTaxPercent">
    /// The exim tax percent.
    /// </param>
    /// <param name="_taxValue">
    /// The tax value.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST epcgTaxAmount(
        TaxableBasis_IN   _taxableBasis,
        AmountMST         _baseAmount,
        EximPercentage_IN _eximTaxPercent = 0,
        TaxValue          _taxValue = 0)
    {
        AmountMST   taxAmount;

        if (_taxableBasis == TaxableBasis_IN::MRP)
        {
            taxAmount = (_baseAmount * (_taxValue ? _taxValue : _eximTaxPercent) / (100 + (_taxValue ? _taxValue : _eximTaxPercent)));
        }
        else
        {
            taxAmount = (_baseAmount * (_taxValue ? _taxValue : _eximTaxPercent) / 100);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the EximTaxTable_IN table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the EximTaxTable_IN record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _recId)
    {
        return (select firstonly RecId from eximTaxTable_IN
                       where eximTaxTable_IN.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximTaxTable_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximTaxTable_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximTaxTable_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximTaxTable_IN taxTable;

        taxTable.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxTable
            where taxTable.RecId == _recId;

        return taxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIncentiveSchemeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds exim tax table by incentive scheme group.
    /// </summary>
    /// <param name="_incentiveSchemeGroup">
    /// The incentive scheme group.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_forUpdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximTaxTable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximTaxTable_IN findByIncentiveSchemeGroup(
        RefRecId                  _incentiveSchemeGroup,
        TaxCode                   _taxCode,
        boolean                   _forUpdate = false)
    {
        EximTaxTable_IN taxTable;

        if (_incentiveSchemeGroup
            && _taxCode)
        {
            taxTable.selectForUpdate(_forUpdate);

            select firstonly taxTable
               where taxTable.EximIncentiveSchemeGroup  == _incentiveSchemeGroup
                  && taxTable.TaxCode                  == _taxCode;
        }

        return taxTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62480</DeveloperDocumentation>
	<Label>@GLS61615</Label>
	<TitleField1>TaxCode</TitleField1>
	<TitleField2>TaxComponentTable</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>IncentiveSchemeGroupCodeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncentiveScheme</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximIncentiveSchemeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IncentiveSchemeGroup</Name>
			<Label>@GLS61496</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximIncentiveSchemeGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncentiveScheme</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Text</Name>
			<Label>@SYS2595</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximIncentiveSchemeGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS61496</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncentiveScheme</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximAuthorizationType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Label>@SYS125973</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@GLS62240</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EximTxt_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IncentiveSchemeGroupCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EximIncentiveSchemeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EximIncentiveSchemeData</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximIncentiveSchemeData_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximIncentiveSchemeData_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximIncentiveSchemeData_IN_EximTaxTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximIncentiveSchemeGroup</Name>
					<Field>EximIncentiveSchemeGroup</Field>
					<RelatedField>EximIncentiveSchemeGroup</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IncentiveScheme</Name>
					<Field>IncentiveScheme</Field>
					<RelatedField>IncentiveScheme</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximIncentiveSchemeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximIncentiveSchemeGroup_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximIncentiveSchemeGroup_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximIncentiveSchemeGroup_IN_EximTaxTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximIncentiveSchemeGroup</Name>
					<Field>EximIncentiveSchemeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_EximTaxTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>