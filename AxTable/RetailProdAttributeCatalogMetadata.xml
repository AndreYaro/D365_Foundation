<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProdAttributeCatalogMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailProdAttributeCatalogMetadata extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>catalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Catalog record.
    /// </summary>
    /// <param name="_update">
    /// A boolean to update the Catalog table.
    /// </param>
    /// <returns>
    /// Catalog.
    /// </returns>
    public Catalog catalog(boolean  _update = false)
    {
        return Catalog::find(this.CatalogRefRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a product attribute metadata to a Catalog. if it does not exist
    /// Otherwise, update it
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// Catalog record id.
    /// </param>
    /// <param name="_attribute">
    /// Attribute Id
    /// </param>
    /// <param name="_isRequired">
    /// A boolean value indicating whether the attribute is required.
    /// </param>
    /// <param name="_relationType">
    /// Product attribute relation type
    /// </param>
    /// <param name="_metadata">
    /// Attribute metadata
    /// </param>
    /// <param name="_version">
    /// The version number of the metadata
    /// </param>
    public static void addUpdate(
        RefRecId _catalogRefRecId,
        RefRecId _attribute,
        boolean _isRequired,
        RetailProductAttributeRelationType _relationType,
        RetailAttributeChannelMetadata _metadata,
        RetailChannelMetadataVersion _version)
    {
        RetailProdAttributeCatalogMetadata metadata, foundMetadata;
        RetailProvisionedChannelProductAttribute provisionedChannelProductAttribute;
        Catalog catalog;
        EcoResAttribute attribute;
        RetailAttributeKeyName rawKeyName, keyName;
        int suffix = 2;
        int keyNameMaxLength;
        Dictionary dict = new Dictionary();
        DictType dictType;

        ttsBegin;

        catalog = Catalog::find(_catalogRefRecId);
        if (catalog.RecId > 0)
        {
            metadata = RetailProdAttributeCatalogMetadata::findByIds(_catalogRefRecId, _attribute, true);

            // Create the record if not exist
            if (metadata.RecId == 0)
            {
                // Get the attribute name
                attribute = EcoResAttribute::find(_attribute);

                if (attribute.RecId > 0 && strLen(attribute.Name) > 0)
                {
                    // Create an unique attribute key (inside the channel)
                    dictType = dict.typeObject(dict.typeName2Id(extendedTypeStr(RetailAttributeKeyName)));
                    keyNameMaxLength = dictType.stringLen();
                    rawKeyName = strRem(attribute.Name, ' .,;/-:\\+_');
                    keyName = subStr(rawKeyName, 0, keyNameMaxLength);
                    do
                    {
                        select firstOnly foundMetadata
                            where foundMetadata.CatalogRefRecId == _catalogRefRecId
                                && foundMetadata.KeyName == keyName;

                        // This key name has been used
                        if (foundMetadata.RecId > 0)
                        {
                            keyName = subStr(rawKeyName, 0, keyNameMaxLength-strLen(int2str(suffix))) + int2str(suffix);
                            suffix ++;
                        }
                    }
                    while (foundMetadata.RecId > 0);
                }

                // Insert record
                metadata.CatalogRefRecId = _catalogRefRecId;
                metadata.Attribute = _attribute;
                metadata.IsRequired = _isRequired;
                metadata.AttributeRelationType = _relationType;
                metadata.KeyName = keyName;
                metadata.Metadata = _metadata;
                metadata.MetadataVersion = _version;
                metadata.insert();
            }
            else
            {
                // Update record
                metadata.IsRequired = _isRequired;
                metadata.AttributeRelationType = _relationType;
                metadata.Metadata = _metadata;
                metadata.MetadataVersion = _version;
                metadata.update();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record by RecId
    /// </summary>
    /// <param name="_recId">
    /// Metadata Id
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailProdAttributeCatalogMetadata</c> table; otherwise, an empty buffer.
    /// </returns>
    public static RetailProdAttributeCatalogMetadata find(RefRecId _recId, boolean _forupdate = false)
    {
        RetailProdAttributeCatalogMetadata metadata;

        metadata.selectForUpdate(_forupdate);

        if (_recId != 0)
        {
            select firstOnly metadata
                where metadata.RecId == _recId;
        }

        return metadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a product attribute on a Catalog
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// Catalog
    /// </param>
    /// <param name="_attribute">
    /// Product attribute Id
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailProductAttributeCatalogMetadata</c> table; otherwise, an empty buffer.
    /// </returns>
    public static RetailProdAttributeCatalogMetadata findByIds(CatalogRefRecId _catalogRefRecId,
                                                                RefRecId _attribute,
                                                                boolean _forupdate = false)
    {
        RetailProdAttributeCatalogMetadata metadata;

        metadata.selectForUpdate(_forupdate);

        select firstOnly metadata
            where metadata.CatalogRefRecId == _catalogRefRecId
               && metadata.Attribute == _attribute;

        return metadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove a product attribute form a Catalog if it exists.
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// Catalog Record Id.
    /// </param>
    /// <param name="_attribute">
    /// Attribute Id
    /// </param>
    public static void remove(CatalogRefRecId _catalogRefRecId, RefRecId _attribute)
    {
        RetailProdAttributeCatalogMetadata metadata;

        metadata = RetailProdAttributeCatalogMetadata::findByIds(_catalogRefRecId, _attribute, true);

        // Delete the record if exist
        if (metadata.RecId > 0)
        {
            metadata.delete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1021</DeveloperDocumentation>
	<Label>@RET261229</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CatalogRefRecId</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Metadata</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductAttributeMetadata</Name>
			<Label>@RET261229</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Metadata</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MetadataVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailProductAttributeRelationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogRefRecId</Name>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeIsRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeKeyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Metadata</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeChannelMetadata</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MetadataVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelMetadataVersion</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductAttribute</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CatalogRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductAttributeKeyName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CatalogRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>KeyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogRefRecId</Name>
					<Field>CatalogRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>