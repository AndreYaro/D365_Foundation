<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryPolicyParameter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProcCategoryPolicyParameter extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.MatchingPolicyOption            = PurchMatchingPolicyWithNotSetOption::TwoWayMatch;
        this.VendorSelection                 = ProcCategoryVendorSelection::Any;
        this.HasReceivingRequirement         = false;
        this.HasDeductionRequirement         = false;
        this.RecordExpenditureOnGoodsReceipt = false;
        this.HasQuestionnaireRequirement     = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoryFilterForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds query ranges to the given query's given datasource to restrict categories to
    ///   those permitted for the given vendor.
    /// </summary>
    /// <param  name='_vendorCompany'>
    ///   An instance of the <c>RefRecId</c> class for the <c>CompanyInfo</c> table to denote
    ///   both the given vendor's data area and the legal entity to find the category policy in.
    /// </param>
    /// <param  name='_vendorAccount'>
    ///   The vendor account number.
    /// </param>
    /// <param  name='_ou'>
    ///   An instance of the <c>RefRecId</c> class to denote the operating unit to find the category policy in.
    /// </param>
    /// <param  name='_query'>
    ///   The query object to add the category query ranges to.
    /// </param>
    /// <param  name='_parentDataSource'>
    ///   The query build data source to add the category query ranges to.
    /// </param>
    /// <param  name='_procurementCategoryFieldIdOnParent'>
    ///   The field ID of the column on the given <paramref>_parentDataSource</paramref> representing the procurement category record ID.
    /// </param>
    /// <remarks>
    ///   Note: it is OK for the given vendor to be empty/non-existent.
    ///   However, in that case this method would be effectively a no-op - no filter range would be added.
    /// </remarks>
    public static void addCategoryFilterForVendor(
        RefRecId                _vendorCompany,
        AccountNum              _vendorAccount,
        RefRecId                _ou,
        Query                   _query,
        QueryBuildDataSource    _parentDataSource,
        fieldId                 _procurementCategoryFieldIdOnParent
    )
    {
        Set                     categoryRecIds = ProcCategoryPolicyParameter::getPermittedCategoriesForVendor(_vendorCompany, _vendorAccount, _ou);
        QueryBuildRange         qbr;
        SetIterator             stor = new SetIterator(categoryRecIds);

        while (stor.more())
        {
            qbr = CatDisplayHelper::addHiddenRange(_parentDataSource, _procurementCategoryFieldIdOnParent);
            qbr.value(queryValue(stor.value()));

            stor.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendorFilterForCategoryPolicyRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Conditionally adds joins to the given query build data sources.
    /// </summary>
    /// <param  name='_le'>
    ///   An instance of the <c>RefRecId</c> class for the <c>CompanyInfo</c> table to denote the legal entity.
    /// </param>
    /// <param  name='_ou'>
    ///   An instance of the <c>RefRecId</c> class to denote the operating unit.
    /// </param>
    /// <param  name='_query'>
    ///   The query object to add the vendor status filter to.
    /// </param>
    /// <param  name='_parentDStoJoinCategoryPolicyParameterTo'>
    ///   The query build data source to conditionally join the <c>ProcCategoryPolicyParameter</c> table to.
    /// </param>
    /// <param  name='_procurementCategoryFieldIdOnParent'>
    ///   The field ID of the column on the given <paramref>_parentDStoJoinCategoryPolicyParameterTo</paramref>
    ///   representing the procurement category record ID.
    /// </param>
    /// <param  name='_parentDStoJoinStatusTo'>
    ///   The query build data source to conditionally join the <c>VendProcurementCategoryStatus</c> table to.
    /// </param>
    /// <param  name='_vendorCategoryFieldIdOnParent'>
    ///   The field ID of the column on the given <paramref>_parentDStoJoinStatusTo</paramref> representing the vendor category record ID.
    /// </param>
    /// <remarks>
    ///   If category policy rule is found,
    ///   (1) An inner join to the <c>ProcCategoryPolicyParameter</c> table is added.
    ///       The inner join is between the <paramref>_parentDStoJoinCategoryPolicyParameterTo</paramref> data source
    ///       and the <c>ProcCategoryPolicyParameter</c> table on the procurement category record ID fields.
    ///   (2) An outer join to the <c>VendProcurementCategoryStatus</c> table is added.
    ///       The outer join is between the <paramref>_parentDStoJoinStatusTo</paramref> data source
    ///       and the <c>ProcCategoryPolicyParameter</c> table on the vendor category record ID fields.
    /// </remarks>
    public static void addVendorFilterForCategoryPolicyRule(
        RefRecId                _le,
        RefRecId                _ou,
        Query                   _query,
        QueryBuildDataSource    _parentDStoJoinCategoryPolicyParameterTo,
        fieldId                 _procurementCategoryFieldIdOnParent,
        QueryBuildDataSource    _parentDStoJoinStatusTo,
        fieldId                 _vendorCategoryFieldIdOnParent
    )
    {
        QueryBuildDataSource    qbdsProcCategoryPolicyParameter;
        QueryBuildDataSource    qbdsVendProcurementCategoryStatus;
        QueryFilter             qfVendorCategoryStatus;
        RefRecId                purchasingPolicyRuleRecId = SysPolicyRule::findPurchasingPolicyRule(
            SysPolicyRuleTypeEnum::CategoryPolicyRule,
            _le,
            _ou
        );

        // If there is no rule to apply, we do not want to restrict any categories
        // to display vendors with any particular status, so we just return here.
        if (!purchasingPolicyRuleRecId)
        {
            return;
        }
        // ELSE, we want to apply the desired status filtering on each category in the rule.
        // If a category IS NOT defined in the rule, we will NOT display vendors.
        // This might seem like a side effect of the inner join, but it is desired behavior.

        // ****************************************
        // ProcCategoryPolicyParameter
        // ****************************************
        qbdsProcCategoryPolicyParameter = _parentDStoJoinCategoryPolicyParameterTo.addDataSource(tablenum(ProcCategoryPolicyParameter));
        qbdsProcCategoryPolicyParameter.relations(false);
        qbdsProcCategoryPolicyParameter.addLink(
            _procurementCategoryFieldIdOnParent,
            fieldnum(ProcCategoryPolicyParameter, ProcurementCategory)
        );
        qbdsProcCategoryPolicyParameter.joinMode(JoinMode::InnerJoin);

        CatDisplayHelper::addHiddenRange(
            qbdsProcCategoryPolicyParameter,
            fieldnum(ProcCategoryPolicyParameter, ProcurementCategoryPolicyRule)
        ).value(queryValue(purchasingPolicyRuleRecId));

        // ****************************************
        // VendProcurementCategoryStatus
        // ****************************************
        qbdsVendProcurementCategoryStatus = _parentDStoJoinStatusTo.addDataSource(tablenum(VendProcurementCategoryStatus));
        qbdsVendProcurementCategoryStatus.relations(false);
        qbdsVendProcurementCategoryStatus.addLink(_vendorCategoryFieldIdOnParent, fieldnum(VendProcurementCategoryStatus, VendorCategory));
        qbdsVendProcurementCategoryStatus.joinMode(JoinMode::OuterJoin);

        // NOTE: if One2One isn't used, join may not be added at all unless _parentDStoJoinCategoryPolicyParameterTo
        //   is the last datasource of a query object.
        qbdsProcCategoryPolicyParameter.fetchMode  (QueryFetchMode::One2One);
        qbdsVendProcurementCategoryStatus.fetchMode(QueryFetchMode::One2One);

        qfVendorCategoryStatus = CatDisplayHelper::addHiddenFilter(
            _query,
            qbdsVendProcurementCategoryStatus,
            fieldStr(VendProcurementCategoryStatus, VendorCategoryStatus)
        );
        //********************************************************************************************************
        //         ProcCategoryPolicyParameter.VendorSelection            == ProcCategoryVendorSelection::Any
        //     ||
        //             ProcCategoryPolicyParameter.VendorSelection        == ProcCategoryVendorSelection::PreferredOnly
        //         &&  VendProcurementCategoryStatus.VendorCategoryStatus == VendCategoryStatus::Preferred
        //     ||
        //             ProcCategoryPolicyParameter.VendorSelection        == ProcCategoryVendorSelection::Approved
        //         &&  VendProcurementCategoryStatus.RecId                != 0
        // [&& ProcCategoryPolicyParameter.VendorSelection != ProcCategoryVendorSelection::SelectionNotAllowed]
        //********************************************************************************************************
        // NOTE: we skip the SelectionNotAllowed part above (inside []) since that's already implied by the rest of the query.
        // NOTE: we assume VendCategoryStatus num only has two possible values: Preferred, Approved
        //********************************************************************************************************

        // NOTE:
        //  QueryBuildDataSource.addRange always translates to predicates in SQL's ON part,
        //  Query.addQueryFilter  always translates to predicates in SQL's WHERE.
        // - and this must be in WHERE
        //  (for the case when an Vendor doesn't have VendProcurementCategoryStatus - must return the Category with Selection::Any)
        qfVendorCategoryStatus.value(
            strfmt('((%1 == %4) || ((%1 == %5) && (%2 == %6)) || ((%1 == %7) && (%3 != %8)))',
                // must NOT use tableStr:
                strfmt('%1.%2', qbdsProcCategoryPolicyParameter.name(  ), fieldStr(ProcCategoryPolicyParameter  , VendorSelection     )),
                strfmt('%1.%2', qbdsVendProcurementCategoryStatus.name(), fieldStr(VendProcurementCategoryStatus, VendorCategoryStatus)),
                strfmt('%1.%2', qbdsVendProcurementCategoryStatus.name(), fieldStr(VendProcurementCategoryStatus, RecId               )),
                // must NOT use queryValue for enum - results in label:
                enum2int(ProcCategoryVendorSelection::Any          ),
                enum2int(ProcCategoryVendorSelection::PreferredOnly),
                enum2int(VendCategoryStatus::Preferred             ),
                enum2int(ProcCategoryVendorSelection::Approved     ),
                queryValue(0                                       )
            )
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProcCategoryPolicyParameter find(ecoResCategoryId _ecoResCategoryId, RefRecId _sysPolicyRecId, boolean _forUpdate = false)
    {
        ProcCategoryPolicyParameter procCategoryPolicyParameter;

        if (_ecoResCategoryId && _sysPolicyRecId)
        {
            procCategoryPolicyParameter.selectForUpdate(_forUpdate);

            select procCategoryPolicyParameter
                where procCategoryPolicyParameter.ProcurementCategory == _ecoResCategoryId
                && procCategoryPolicyParameter.ProcurementCategoryPolicyRule == _sysPolicyRecId;
        }

        return procCategoryPolicyParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPermittedCategoriesForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets all those procurement categories that a user is allowed, by the category policy,
    ///   to buy in and from the given vendor.
    /// </summary>
    /// <param  name='_vendorCompany'>
    ///   An instance of the <c>RefRecId</c> class for the <c>CompanyInfo</c> table to denote
    ///   both the given vendor's data area and the legal entity to find the category policy in.
    /// </param>
    /// <param  name='_vendorAccount'>
    ///   The vendor account number.
    /// </param>
    /// <param  name='_ou'>
    ///   An instance of the <c>RefRecId</c> class to denote the operating unit to find the category policy in.
    /// </param>
    /// <returns>
    ///   A set of record IDs each for a procurement <c>EcoResCategory</c>.
    /// </returns>
    /// <remarks>
    ///   Gets all procurement categories that are permitted by the <c>ProcCategoryPolicyParameter</c>
    ///   to "allow" the given vendor.
    ///   In essence, each such category
    ///   - either does not exist in <c>ProcCategoryPolicyParameter</c>,
    ///   - or exists but with ProcCategoryVendorSelection::Any
    ///   - or exists but with ProcCategoryVendorSelection::Standard,
    ///       and the vendor is associated with the category with either Preferred or Standard status,
    ///   - or exists but with ProcCategoryVendorSelection::Preferred,
    ///       and the vendor is associated with the category with        Preferred status,
    ///
    ///   Note: we do check if the vendor is blocked or not first. If blocked, result will be an empty set.
    ///   Note: this method does work cross-company.
    ///     ie, given _vendorCompany does not have to match curext.
    /// </remarks>
    public static Set getPermittedCategoriesForVendor
    (
        RefRecId                _vendorCompany,
        AccountNum              _vendorAccount,
        RefRecId                _ou
    )
    {
        CompanyInfo             leCompany = CompanyInfo::findRecId(_vendorCompany);
        boolean                 vendorIsNotBlocked;
        RefRecId                purchasingPolicyRuleRecId = SysPolicyRule::findPurchasingPolicyRule(SysPolicyRuleTypeEnum::CategoryPolicyRule, _vendorCompany, _ou);
        Set                     result = new Set(Types::Int64);

        // check if vendor is not blocked
        boolean vendorIsNotBlocked()
        {
            Query               iq = new Query();
            QueryRun            iqrun;
            QueryBuildRange     iqbr;
            boolean             iresult = false;

            if (leCompany)
            {
                changeCompany(leCompany.DataArea)
                {
                    iq.addDataSource(tableNum(VendTable));

                    iqbr = CatDisplayHelper::addHiddenRange(iq.dataSourceTable(tableNum(VendTable)), fieldNum(VendTable, AccountNum));
                    iqbr.value(queryValue(_vendorAccount));
                    VendTable::addFilterToExcludeBlockedForPurchasing(iq);

                    iqrun = new QueryRun(iq);
                    while (iqrun.next())
                    {
                        iresult = true;
                        break;
                    }
                }
            }
            return iresult;
        }

        // Finds all active procurement category that's not in the category policy,
        // and add them all to the result set.
        void getCategoryNotInPolicy()
        {
            EcoResCategory                  icategory;
            EcoResCategoryHierarchy         ihierarchy;
            EcoResCategoryHierarchyRole     irole;
            ProcCategoryPolicyParameter     icategoryPolicyParameter;

            while select RecId from icategory
                where icategory.IsActive == NoYes::Yes
                join RecId from ihierarchy
                    where ihierarchy.RecId == icategory.CategoryHierarchy
                join RecId from irole
                    where  ihierarchy.RecId == irole.CategoryHierarchy
                        && irole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement
                notExists join RecId from icategoryPolicyParameter
                    where  icategoryPolicyParameter.ProcurementCategoryPolicyRule == purchasingPolicyRuleRecId
                        && icategoryPolicyParameter.ProcurementCategory == icategory.RecId
            {
                if (!result.in(icategory.RecId))
                {
                    result.add(icategory.RecId);
                }
            }
        }

        // Finds all active procurement category that
        // - is in the category policy,
        // - and the vendor's status in the category is permitted by the category policy,
        // and add them all to the result set.
        void getCategoryInPolicy()
        {
            Query                  iq = new Query(queryStr(ProcCategoryActive));
            QueryRun               iqrun;
            QueryBuildDatasource   iqbdsCategory, iqbdsVC;
            EcoResCategory         icategory;

            if (purchasingPolicyRuleRecId)
            {
                iqbdsCategory = iq.dataSourceTable(tableNum(EcoResCategory));

                iqbdsVC = iqbdsCategory.addDataSource(tableNum(VendCategory));
                iqbdsVC.joinMode(JoinMode::OuterJoin);
                iqbdsVC.relations(false);
                iqbdsVC.addLink(fieldNum(EcoResCategory, recId), fieldNum(VendCategory, Category));
                iqbdsVC.fetchMode(QueryFetchMode::One2One);
                CatDisplayHelper::addHiddenRange(iqbdsVC, fieldNum(VendCategory, VendorDataArea)).value(queryValue(
                                                                                                                   getCompany(tableNum(VendTable), leCompany.DataArea)
                                                                                                                   ));
                CatDisplayHelper::addHiddenRange(iqbdsVC, fieldNum(VendCategory, VendorAccount)).value(queryValue(_vendorAccount));

                ProcCategoryPolicyParameter::addVendorFilterForCategoryPolicyRule(
                    _vendorCompany,
                    _ou,
                    iq,
                    iqbdsCategory,
                    fieldNum(EcoResCategory, RecId),
                    iqbdsVC,
                    fieldNum(VendCategory, RecId)
                );

                iqrun = new QueryRun(iq);
                while (iqrun.next())
                {
                    icategory = iqrun.get(tableNum(EcoResCategory));
                    if (!result.in(icategory.RecId))
                    {
                        result.add(icategory.RecId);
                    }
                }
            }
        }

        if (leCompany)
        {
            vendorIsNotBlocked = vendorIsNotBlocked();

            if (vendorIsNotBlocked)
            {
                // those category in the ProcCategoryPolicyParameter
                getCategoryInPolicy();
                // those category not in the ProcCategoryPolicyParameter
                getCategoryNotInPolicy();
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCategory</ConfigurationKey>
	<DeveloperDocumentation>@SYS309795</DeveloperDocumentation>
	<Label>@SYS305135</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProcurementCategory</TitleField1>
	<TitleField2>ProcurementCategoryPolicyRule</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CategoryPolicyRule</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPolicyRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorSelection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasQuestionnaireRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicyOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReceivingRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasDeductionRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecordExpenditureOnGoodsReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPolicyRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS303404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecordExpenditureOnGoodsReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasDeductionRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReceivingRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicyOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasQuestionnaireRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorSelection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPolicyRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasDeductionRequirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS305141</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasQuestionnaireRequirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS305137</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasReceivingRequirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS113691</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingPolicyOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS305139</Label>
			<EnumType>PurchMatchingPolicyWithNotSetOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategoryPolicyRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecordExpenditureOnGoodsReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS305151</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorSelection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProcCategoryVendorSelection</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryPolicyRule</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcurementCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProcurementCategoryPolicyRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategory_ProcCategoryPolicyParameter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcCategoryPolicyRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SysPolicyRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SysPolicyRule</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SysPolicyRule_ProcCategoryPolicyParameter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategoryPolicyRule</Name>
					<Field>ProcurementCategoryPolicyRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>