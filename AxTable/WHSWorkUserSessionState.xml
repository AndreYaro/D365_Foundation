<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSessionState</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkUserSessionState extends common
{
    #WHSRF

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSWorkUserSessionState find(RefRecId _workUserSession, WHSWorkUserSessionType _sessionType = WHSWorkUserSessionType::Main, boolean _forUpdate = false)
    {
        WHSWorkUserSessionState sessionState;

        if (_workUserSession)
        {
            sessionState.selectForUpdate(_forUpdate);

            select firstonly sessionState
                where sessionState.WorkUserSession == _workUserSession
                    && sessionState.SessionType == _sessionType;
        }

        return sessionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrent</Name>
				<Source><![CDATA[
    public static WHSWorkUserSessionState findCurrent(RefRecId _workUserSession, boolean _forUpdate = false)
    {
        WHSWorkUserSessionState sessionState;

        if (_workUserSession)
        {
            if (WHSWorkUserSessionStateCacheFlight::instance().isEnabled())
            {
                WHSWorkUserSessionStateCache cache = WHSWorkUserSessionStateCache::current();
                
                if (cache && 
                    cache.isRecordCached(_workUserSession))
                {
                    if (_forUpdate)
                    {
                        // Reread forUpdate from the data base
                        sessionState = WHSWorkUserSessionState::find(_workUserSession, cache.record().SessionType, _forUpdate);
                    }
                    else
                    {
                        // reuse cache directly
                        sessionState = cache.record();
                    }
                }
                else
                {
                    sessionState = WHSWorkUserSessionState::findCurrentInternalForward(_workUserSession, _forUpdate);
                }
                if (cache)
                {
                    cache.add(sessionState);
                }
            }
            else
            {
                sessionState = WHSWorkUserSessionState::findCurrentInternalBackwards(_workUserSession, WHSWorkUserSessionState::lastDetourLevel(), _forUpdate);
            }
        }

        return sessionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentInternalForward</Name>
				<Source><![CDATA[
    private static WHSWorkUserSessionState findCurrentInternalForward(RefRecId _workUserSession, boolean _forUpdate = false)
    {
        WHSWorkUserSessionType currentDetourLevel = WHSWorkUserSessionType::Main;
        WHSWorkUserSessionType maxDetourLevel = WHSWorkUserSessionState::lastDetourLevel();

        WHSWorkUserSessionState sessionState;
        WHSWorkUserSessionState nextSessionState;
        
        do
        {
            nextSessionState = WHSWorkUserSessionState::find(_workUserSession, currentDetourLevel, _forUpdate);

            if (nextSessionState)
            {
                sessionState = nextSessionState;
            }

            if (currentDetourLevel == maxDetourLevel)
            {
                break;
            }
            else
            {
                currentDetourLevel = WHSWorkUserSessionState::nextDetourLevel(currentDetourLevel);
            }
        }
        while (nextSessionState && nextSessionState.canBeDetoured());

        return sessionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentInternalBackwards</Name>
				<Source><![CDATA[
    private static WHSWorkUserSessionState findCurrentInternalBackwards(RefRecId _workUserSession, WHSWorkUserSessionType _maxDetourLevel, boolean _forUpdate = false)
    {
        WHSWorkUserSessionState sessionState = WHSWorkUserSessionState::find(_workUserSession, _maxDetourLevel, _forUpdate);

        if (!sessionState && _maxDetourLevel != WHSWorkUserSessionType::Main)
        {
            sessionState = WHSWorkUserSessionState::findCurrentInternalBackwards(_workUserSession, WHSWorkUserSessionState::prevDetourLevel(_maxDetourLevel), _forUpdate);
        }

        return sessionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SessionType = WHSWorkUserSessionType::Main;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDetoured</Name>
				<Source><![CDATA[
    private boolean canBeDetoured()
    {
        return strContains(this.XML, #RFDetourButton);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDetourLevelInternal</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected static WHSWorkUserSessionType lastDetourLevelInternal()
    {
        return WHSWorkUserSessionType::Detour2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDetourLevel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSWorkUserSessionType lastDetourLevel()
    {
        return WHSWorkUserSessionState::lastDetourLevelInternal();            
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextDetourLevel</Name>
				<Source><![CDATA[
    public static WHSWorkUserSessionType nextDetourLevel(WHSWorkUserSessionType _sessionType)
    {
        WHSWorkUserSessionType ret;

        switch (_sessionType)
        {
            case WHSWorkUserSessionType::Main:
                ret = WHSWorkUserSessionType::Detour;
                break;

            case WHSWorkUserSessionType::Detour:
                ret = WHSWorkUserSessionType::Detour2;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDetourLevel</Name>
				<Source><![CDATA[
    public static WHSWorkUserSessionType prevDetourLevel(WHSWorkUserSessionType _sessionType)
    {
        WHSWorkUserSessionType ret;

        switch (_sessionType)
        {
            case WHSWorkUserSessionType::Detour2:
                ret = WHSWorkUserSessionType::Detour;
                break;

            case WHSWorkUserSessionType::Detour:
                ret = WHSWorkUserSessionType::Main;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDetourSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void initializeDetourSession(WHSWorkUserSession _workUserSession, WHSWorkUserSessionType _currentSessionType, XML _xmlInputToStore = '')
    {
        ttsbegin;

        WHSWorkUserSessionState sessionStateDetour;
        sessionStateDetour.SessionType = WHSWorkUserSessionState::nextDetourLevel(_currentSessionType);
        sessionStateDetour.WorkUserSession = _workUserSession.RecId;
        sessionStateDetour.WorkExecuteMode = WHSWorkExecuteMode::Menu;
        sessionStateDetour.XMLInput = _workUserSession.removeAuthorizationTokensFromXml(_xmlInputToStore);
        sessionStateDetour.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSWorkUserSessionStateCache cache = WHSWorkUserSessionStateCache::current();
        if (cache)
        {
            cache.reset();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        WHSWorkUserSessionStateCache cache = WHSWorkUserSessionStateCache::current();
        if (cache)
        {
            cache.add(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        WHSWorkUserSessionStateCache cache = WHSWorkUserSessionStateCache::current();
        if (cache)
        {
            cache.add(this);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WorkUserSessionState_DevDoc</DeveloperDocumentation>
	<Label>@WAX:WorkUserSessionState</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SessionType</TitleField1>
	<TitleField2>WorkExecuteMode</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkUserSessionTypeIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>WorkUserSessionTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SessionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkUserSession</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkExecuteMode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkExecuteMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PrevPass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPrevPass</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RFErrorLog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFErrorLog</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WorkExecutePassThrough</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExecutePassThrough</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkExecuteStep</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExecuteStep</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XML</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>XML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SessionStateCheck</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkUserSessionStateCheck</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkUserSession</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SessionType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>WHSWorkUserSessionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XMLInput</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>XML</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkUserSessionTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SessionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkUserSession</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkUserSessionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkUserSession</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWorkUserSession</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkUserSession</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkUserSession</Name>
					<Field>WorkUserSession</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>