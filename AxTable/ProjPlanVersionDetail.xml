<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPlanVersionDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPlanVersionDetail extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjectVersionHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets hierarchy if for specified version of the specified project.
    /// </summary>
    /// <param name = "_projId">Project Id.</param>
    /// <param name = "_projVersionId">Version Id.</param>
    /// <returns></returns>
    public static HierarchyIdBase getProjectVersionHierarchy(ProjId _projId, ProjVersionId _projVersionId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;
       if (_projId && _projVersionId)
        {
            select firstonly HierarchyId from projPlanVersionDetail
                where projPlanVersionDetail.VersionId == _projVersionId &&
                      projPlanVersionDetail.ProjId == _projId;
        }

        return projPlanVersionDetail.HierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTableByHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets project table buffer for the specified version hierarchy.
    /// </summary>
    /// <param name = "_hierarchyId"><c>ProjPlanVersion</c> table hierarchy Id.</param>
    /// <returns><c>ProjTable</c> table buffer.</returns>
    public static ProjTable getProjTableByHierarchyId(HierarchyIdBase _hierarchyId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;
        ProjTable projTable;

        if (_hierarchyId)
        {
            select firstonly projTable
                exists join projPlanVersionDetail
                    where projPlanVersionDetail.HierarchyId == _hierarchyId
                        && projPlanVersionDetail.ProjId == projTable.ProjId;
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootTaskId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encapsulates root task id fot any <c>ProjPlanVersion.</c>
    /// </summary>
    /// <returns>root task id.</returns>
    public static ProjHierarchyTaskId rootTaskId()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldDataModelPublishedHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets hierarchy id of the published hierarchy in the old data model.
    /// </summary>
    /// <param name = "_projPlanHierarchyId">Hierarchy id in the new data model.</param>
    /// <returns>Published hierarchy id.</returns>
    public static HierarchyIdBase getOldDataModelPublishedHierarchyId(HierarchyIdBase _projPlanHierarchyId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;
        select firstonly ProjId, VersionId from projPlanVersionDetail
            where projPlanVersionDetail.HierarchyId == _projPlanHierarchyId;

        if (projPlanVersionDetail.VersionId == 1)
        {
            return _projPlanHierarchyId;
        }

        var projId = projPlanVersionDetail.ProjId;
        select firstonly HierarchyId from projPlanVersionDetail
            where projPlanVersionDetail.ProjId == projId
                && projPlanVersionDetail.VersionId == 1;

        return projPlanVersionDetail.HierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewDataModelPublishedHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets hierarchy id of the published hierarchy in the new data model.
    /// </summary>
    /// <param name = "_projPlanHierarchyId">Hierarchy id in the new data model.</param>
    /// <returns>Published hierarchy id.</returns>
    public static HierarchyIdBase getNewDataModelPublishedHierarchyId(HierarchyIdBase _projPlanHierarchyId)
    {
        ProjPlanVersionDetail projPlanVersionDetail, publishedProjPlanVersionDetail;
        select firstonly ProjId from projPlanVersionDetail
            where projPlanVersionDetail.HierarchyId == _projPlanHierarchyId
        join HierarchyId from publishedProjPlanVersionDetail
            where publishedProjPlanVersionDetail.ProjId == projPlanVersionDetail.ProjId
                && publishedProjPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;

        return publishedProjPlanVersionDetail.HierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified hierarchy is for project.
    /// </summary>
    /// <param name = "_hierarchyId">
    /// <c>ProjPlanVersionDetail</c> hierarchy identifier.</param>
    /// <returns>
    /// true if this is hierarchy is for project; otherwise, false.
    ///</returns>
    public static boolean isProjectHierarchy(HierarchyIdBase _hierarchyId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_hierarchyId)
        {
            select firstonly ProjId from projPlanVersionDetail
                where projPlanVersionDetail.HierarchyId == _hierarchyId;
        }

        return projPlanVersionDetail.ProjId != '' ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuotationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified hierarchy is for quotation.
    /// </summary>
    /// <param name = "_hierarchyId">
    /// <c>ProjPlanVersionDetail</c> hierarchy identifier.</param>
    /// <returns>
    /// true if this is a hierarchy is for project; otherwise, false.
    ///</returns>
    public static boolean isQuotationHierarchy(HierarchyIdBase _hierarchyId)
    {
        boolean isQuotation;

        if (_hierarchyId)
        {
            if (!ProjPlanVersionDetail::isProjectHierarchy(_hierarchyId))
            {
                HierarchyLinkTable hierarchyLinkTable = HierarchyLinkTable::findByHierarchyId(_hierarchyId);
                if (hierarchyLinkTable && hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable))
                {
                    isQuotation = true;
                }
            }
        }

        return isQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemplateHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified hierarchy is for template.
    /// </summary>
    /// <param name = "_hierarchyId">
    /// <c>ProjPlanVersionDetail</c> hierarchy identifier.</param>
    /// <returns>
    /// true if this is a hierarchy is for template; otherwise, false.
    ///</returns>
    public static boolean isTemplateHierarchy(HierarchyIdBase _hierarchyId)
    {
        boolean isTemplate;

        if (_hierarchyId)
        {
            ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findByHierarchyId(_hierarchyId, true);
            if (projPlanVersionDetail.IsTemplate == NoYes::Yes)
            {
                isTemplate = true;
            }
            else if (!projPlanVersionDetail.ProjId)
            {
                Hierarchy hierarchy = Hierarchy::find(_hierarchyId);
                if (hierarchy && hierarchy.IsTemplate == NoYes::Yes)
                {
                    // ProjPlanVersionDetail.IsTemplate field value is not correct and update on the fly.
                    ttsbegin;
                    projPlanVersionDetail.IsTemplate = NoYes::Yes;
                    projPlanVersionDetail.update();
                    ttscommit;
                    isTemplate = true;
                }
            }
        }

        return isTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjectPublishedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>ProjPlanVersionDetail</c> record for published version for specified project.
    /// </summary>
    /// <param name = "_projId">Project id.</param>
    /// <returns><c>ProjPlanVersionDetail</c> record for published version. Empty if project is not published.</returns>
    public static ProjPlanVersionDetail findProjectPublishedVersion(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_projId)
        {
            projPlanVersionDetail = ProjPlanVersionDetail::findLatestByProjId(_projId, false, false, projplanVersionType::PublishedCurrent);
        }

        return projPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjectDraftVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>ProjPlanVersionDetail</c> record for draft version for specified project.
    /// </summary>
    /// <param name = "_projId">Project id.</param>
    /// <returns><c>ProjPlanVersionDetail</c> record for draft version. Empty if project is not in draft.</returns>
    public static ProjPlanVersionDetail findProjectDraftVersion(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_projId)
        {
            projPlanVersionDetail = ProjPlanVersionDetail::findLatestByProjId(_projId, false, false, projplanVersionType::Draft);
        }

        return projPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectHasPublishedHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is published version for specified project.
    /// </summary>
    /// <param name = "_projId">Project id.</param>
    /// <returns>true if the project with specified id has published hierarchy.</returns>
    public static boolean checkProjectHasPublishedHierarchy(ProjId _projId)
    {
        return (_projId && ProjPlanVersionDetail::findProjectPublishedVersion(_projId));   
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the latest <c>ProjPlanVersionDetail</c> table buffer according to the specified project ID.
    /// </summary>
    /// <param name = "_projId">Project ID.</param>
    /// <param name="_forUpdate">A Boolean value that determines whether the <c>ProjPlanVersionDetail</c> should be selected for update; optional.</param>
    /// <param name = "_anyVersionType">A Boolean value that determines whether to lookup the latest record regardless by any version type; optional.</param>
    /// <param name = "_versionType">If _anyVersionType is set to true, then it will look up the latest record by this specific version type value; optional.</param>
    /// <returns><c>ProjPlanVersionDetail</c> table buffer.</returns>
    public static ProjPlanVersionDetail findLatestByProjId(ProjId _projId, boolean _forUpdate = false, boolean _anyVersionType = true, ProjPlanVersionType _versionType = ProjPlanVersionType::Draft)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_projId)
        {
            projPlanVersionDetail.selectForUpdate(_forUpdate);

            select firstonly projPlanVersionDetail
                order by projPlanVersionDetail.VersionId desc
                    where projPlanVersionDetail.ProjId == _projId
                        && (_anyVersionType || projPlanVersionDetail.VersionType == _versionType);
        }

        return projPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectPublished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get if project is published.
    /// </summary>
    /// <param name = "_projId">Project ID.</param>
    /// <returns>true if project is currently published; otherwise, false.</returns>
    public static boolean isProjectPublished(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findLatestByProjId(_projId);
        return projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOldestByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the oldest <c>ProjPlanVersionDetail</c> table buffer according to the specified project ID.
    /// </summary>
    /// <param name = "_projId">The project Id for search for.</param>
    /// <param name = "_forUpdate">A Boolean value that determines whether <c>ProjPlanVersionDetail</c> should be selecte dfor update; optional.</param>
    /// <returns>The found <c>ProjPlanVersionDetail</c> table buffer.</returns>
    public static ProjPlanVersionDetail findOldestByProjId(ProjId _projId, boolean _forUpdate = false)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_projId)
        {
            ProjPlanVersionDetail.selectForUpdate(_forUpdate);

            select firstonly projPlanVersionDetail
            where
                projPlanVersionDetail.VersionId == 1
                && projPlanVersionDetail.ProjId == _projId;
        }

        return ProjPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestByHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the latest <c>ProjPlanVersionDetail</c> table buffer according to the specified Hierarchy ID.
    /// </summary>
    /// <param name="_hierarchyId">The specified hierarchy ID.</param>
    /// <param name="_forUpdate">A Boolean value that determines whether the <c>ProjPlanVersionDetail</c> should be selected for update; optional.</param>
    /// <param name = "_anyVersionType">A Boolean value that determines whether to lookup the latest record regardless by any version type; optional.</param>
    /// <param name = "_versionType">If _anyVersionType is set to true, then it will look up the latest record by this specific version type value; optional.</param>
    /// <returns><c>ProjPlanVersionDetail</c> table buffer.</returns>
    public static ProjPlanVersionDetail findLatestByHierarchyId(HierarchyIdBase _hierarchyId, boolean _forUpdate = false, boolean _anyVersionType = true, ProjPlanVersionType _versionType = ProjPlanVersionType::Draft)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_hierarchyId)
        {
            projPlanVersionDetail.selectForUpdate(_forUpdate);

            select firstonly projPlanVersionDetail
                where projPlanVersionDetail.HierarchyId == _hierarchyId;

            if (ProjPlanVersionDetail.ProjId)
            {
                projPlanVersionDetail = ProjPlanVersionDetail::findLatestByProjId(ProjPlanVersionDetail.ProjId, _forUpdate, _anyVersionType, _versionType);
            }
        }

        return projPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjPlanVersionDetail</c> record by the specificed hierarchy ID.
    /// </summary>
    /// <param name="_hierarchyId">
    /// The specified hierarchy ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the <c>ProjPlanVersionDetail</c> should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>ProjPlanVersionDetail</c> record buffer.
    /// </returns>
    public static ProjPlanVersionDetail findByHierarchyId(HierarchyIdBase _hierarchyId, boolean _forUpdate = false)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        projPlanVersionDetail.selectForUpdate(_forUpdate);

        if (_hierarchyId)
        {
            select firstonly projPlanVersionDetail 
                where projPlanVersionDetail.HierarchyId == _hierarchyId;
        }

        return projPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return true if the specified project exists.
    /// </summary>
    /// <param name = "_projId">Project id.</param>
    /// <returns>true if the specified project exists; otherwise false;</returns>
    public static boolean existsProject(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        if (_projId)
        {
            select firstonly RecId from projPlanVersionDetail
                where projPlanVersionDetail.ProjId == _projId;
        }

        return projPlanVersionDetail.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWBSType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines the type of WBS this record is for.
	/// </summary>
	/// <returns>The type of WBS.</returns>
    public ProjWBSType getWBSType()
    {
        if (this.ProjId)
        {
            return ProjWBSType::Project;
        }

		HierarchyLinkTable hierarchyLinkTable;
		select firstonly RecId from hierarchyLinkTable 
            where hierarchyLinkTable.HierarchyId == this.HierarchyId
			&& hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable);

		if (HierarchyLinkTable)
		{
			return ProjWBSType::ProjectQuotation;
		}
		else
		{
			return ProjWBSType::Template;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the calendar ID if this is a Project or Quotation hierarchy.
    /// </summary>
    public CalendarId getCalendarId()
    {
        CalendarId calendarId = '';

        if (this.ProjId)
        {
            calendarId = ProjTable::find(this.ProjId).PSASchedCalendarId;
        }
        else
        {
            HierarchyLinkTable hierarchyLinkTable;
            select firstonly RefRecId from hierarchyLinkTable
                where hierarchyLinkTable.HierarchyId == this.HierarchyId
                && hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable);

            if (hierarchyLinkTable.RefRecId)
            {
                calendarId = SalesQuotationTable::findRec(hierarchyLinkTable.RefRecId).PSASchedCalendarId;
            }
        }

        return calendarId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>Hierarchy</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>Hierarchy</PrimaryIndex>
	<ReplacementKey>Hierarchy</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HierarchyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@ProjPlan:VersionName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VersionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjPlanVersionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS25589</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBaseline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@ProjPlan:IsBaseline</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActiveBaseline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@ActiveBaseline</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HierarchyIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityIsTemplate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjVersionId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Hierarchy</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HierarchyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VersionId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HierarchyIdProjId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdVersionType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VersionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HierarchyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjPlanVersion</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjPlanVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HierarchyId</Name>
					<Field>HierarchyId</Field>
					<RelatedField>HierarchyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>ProjPlanVersion</EntityRelationshipRole>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Project</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>