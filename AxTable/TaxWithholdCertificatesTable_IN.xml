<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificatesTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdCertificatesTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr (TaxWithholdCertificatesTable_IN, Status):
                if (this.Status)
                {
                    if (this.Status == TaxWithholdStatus_IN::Issued)
                    {
                        ret = ret && checkFailed(strfmt("@GLS5446","@GLS5475"));
                    }
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the records of <c>TaxWithholdCertificatesTable_IN</c>.
    /// </summary>
    /// <param name="_certificateNumber">
    /// Certificate number value to allocate the new record.
    /// </param>
    /// <param name="_componentGroup">
    ///  Component group value to allocate the new record.
    /// </param>
    /// <param name="_prefix">
    ///  Prefix value to allocate the new record.
    /// </param>
    /// <param name="_startNum">
    ///  First certificate number to allocate the new record.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdCertificatesTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TaxWithholdCertificatesTable_IN createCertificate(
        TaxWithholdCertificateNumber_IN      _certificateNumber,
        TaxWithholdComponentGroupRecId_IN    _componentGroup,
        TaxWithholdPrefix_IN                 _prefix,
        TaxWithholdStartNum_IN               _startNum)
    {
        TaxWithholdCertificatesTable_IN  taxWithholdCertificatesTableLoc;

        taxWithholdCertificatesTableLoc.clear();
        taxWithholdCertificatesTableLoc.CertificateNumber         = _certificateNumber;
        taxWithholdCertificatesTableLoc.Status                    = TaxWithholdStatus_IN::Created;
        taxWithholdCertificatesTableLoc.TaxWithholdComponentGroup = _componentGroup;
        taxWithholdCertificatesTableLoc.Prefix                    = _prefix;
        taxWithholdCertificatesTableLoc.StartNum                  = _startNum;
        taxWithholdCertificatesTableLoc.insert();

        return taxWithholdCertificatesTableLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdCertificatesTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_componentGroup">
    /// Withhold tax component group to find the record.
    /// </param>
    /// <param name="_certificateNumber">
    /// Withhold certificate Number to find the record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        TaxWithholdComponentGroupRecId_IN   _componentGroup,
        TaxWithholdCertificateNumber_IN     _certificateNumber)
    {
        return (select firstonly RecId from taxWithholdCertificatesTable_IN
                    where taxWithholdCertificatesTable_IN.TaxWithholdComponentGroup == _componentGroup
                       && taxWithholdCertificatesTable_IN.CertificateNumber         == _certificateNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdCertificatesTable_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdCertificatesTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificatesTable_IN find(RefRecId            _recId,
                                                       boolean             _forupdate        = false,
                                                       ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdCertificatesTable_IN taxWithholdCertificatesTable;

        taxWithholdCertificatesTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdCertificatesTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdCertificatesTable
            where taxWithholdCertificatesTable.RecId == _recId;

        return taxWithholdCertificatesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByComponentGrpCertNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Reads the <c>TaxWithholdCertificatesTable_IN</c> table for the specified Tax type,component group, certificate number
    /// </summary>
    /// <param name="_componentGroup">
    ///  Component group, to find the record.
    /// </param>
    /// <param name="_certificateNumber">
    ///  Certificate number, to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdCertificatesTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TaxWithholdCertificatesTable_IN findByComponentGrpCertNumber(
        TaxWithholdComponentGroupRecId_IN _componentGroup,
        TaxWithholdCertificateNumber_IN   _certificateNumber,
        boolean                           _forUpdate = false)
    {
        TaxWithholdCertificatesTable_IN taxWithholdCertificatesTable;

        if (_componentGroup && _certificateNumber)
        {
            taxWithholdCertificatesTable.selectForUpdate(_forUpdate);
            select firstonly taxWithholdCertificatesTable
                where taxWithholdCertificatesTable.TaxWithholdComponentGroup == _componentGroup
                   && taxWithholdCertificatesTable.CertificateNumber         == _certificateNumber;
        }
        return taxWithholdCertificatesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///Creates and shows a lookup form for the <c>TaxWithholdCertificatesTable_IN</c> field.
    /// </summary>
    /// <param name="_formcontrol">
    /// Form control for which lookup will be  populated.
    /// </param>
    /// <param name="_componentGroup">
    ///  Component group to filter the query for given component group.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupCertificateNumber(
        FormStringControl                  _formcontrol,
        TaxWithholdComponentGroupRecId_IN  _componentGroup)
    {
        Query                   query          = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdCertificatesTable_IN), _formcontrol);

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdCertificatesTable_IN, CertificateNumber));
        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdCertificatesTable_IN));

        queryBuildDataSource.addRange(fieldnum(TaxWithholdCertificatesTable_IN, TaxWithholdComponentGroup)).value(queryValue(_componentGroup));

        queryBuildDataSource.addSortField(fieldnum(TaxWithholdCertificatesTable_IN, Prefix));
        queryBuildDataSource.addSortField(fieldnum(TaxWithholdCertificatesTable_IN, StartNum));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63813</DeveloperDocumentation>
	<FormRef>TaxWithholdCertificatesTable_IN</FormRef>
	<Label>@SYS32377</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CertificateNumber</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ComponentGroupCertificateNumberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateIssueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateInformation</Name>
			<Label>@GLS5472</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateIssueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertificateIssueDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS22898</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Prefix</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdPrefix_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>StartNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdStartNum_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>TaxWithholdStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponentGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdComponentGroupRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ComponentGroupCertificateNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CertificateNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdComponentGroupTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdComponentGroupTable_IN_TaxWithholdCertificatesTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponentGroup</Name>
					<Field>TaxWithholdComponentGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>