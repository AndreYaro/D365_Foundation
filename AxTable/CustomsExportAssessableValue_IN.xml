<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsExportAssessableValue_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsExportAssessableValue_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInvoiceCIFAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Invoice CIF Amount for specified CustomsExportAssessableValue_IN table record.
    /// </summary>
    /// <returns>Invoice CIF Amount for Export order.</returns>
    display CustomsAmount_IN getInvoiceCIFAmount()
    {
        CustomsAmount_IN cifAmount;
        SecurityRights              sr;
        SecurityTableRights         stRights;
        AccessRight                 arA;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(CustomsExportAssessableValue_IN));
        arA = stRights.fieldAccessRight(fieldStr(CustomsExportAssessableValue_IN,Amount));

        if (this.Basis == CustomsAssessableValueBasis_IN::CIF)
        {
            if (arA != AccessRight::NoAccess)
            {
                cifAmount = this.Amount + this.Value;
            }
        }
        else
        {
            cifAmount = 0;
        }
        return cifAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Currency for specified salesId.
    /// </summary>
    /// <returns>Currency for selected salesOrder.</returns>
    display CurrencyCode getInvoiceCurrency()
    {
        return SalesTable::find(this.SalesId).CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExportOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record to CustomsExportAssessableValue_IN and MarkupTrans tables from specified CustomsExportOrderLine_IN table record.
    /// </summary>
    /// <param name="_customsExportOrderLine">
    /// The CustomsExportOrderLine_IN table record to be copied.
    /// </param>
    public void initFromExportOrderLine(CustomsExportOrderLine_IN _customsExportOrderLine)
    {
        SalesLine                       salesLineLoc;
        CustomsExportAssessableValue_IN customsExportAssessableValue;
        boolean                         ret;
        MarkupTrans                     markupTrans, markUpTransLoc;

        void insertIntoMarkupTrans(tableId _tableId, RecId _recId)
        {
            delete_from markUpTransLoc
                where markUpTransLoc.TransTableId   == _tableId
                   && markUpTransLoc.TransRecId     == _recId;
            while select markUpTransLoc
                where markUpTransLoc.TransTableId == tablenum(CustInvoiceTrans)
                   && markUpTransLoc.TransRecId   == _customsExportOrderLine.CustInvoiceTransRecId
            {
                markupTrans = markUpTransLoc.data();
                markupTrans.TransTableId    = _tableId;
                markupTrans.TransRecId      = _recId;
                markupTrans.insert();
            }
        }

        salesLineLoc = SalesLine::findInventTransId(_customsExportOrderLine.InventTransId);
        if (_customsExportOrderLine.RecId)
        {
            this.SalesId            = _customsExportOrderLine.SalesId;
            this.Amount             = _customsExportOrderLine.LineAmount;
            this.Basis              = CustomsAssessableValueBasis_IN::CIF;
            this.InventTransId      = _customsExportOrderLine.InventTransId;
            this.Value              = CustomsExportAssessableValue_IN::getMarkupValue(salesLineLoc.TableId, salesLineLoc.RecId, _customsExportOrderLine.InventTransId);
            while select RecId from customsExportAssessableValue
                where customsExportAssessableValue.InventTransId  == _customsExportOrderLine.InventTransId
            {
                if (customsExportAssessableValue.RecId)
                {
                    ret = true;
                }
            }
            if (!ret && _customsExportOrderLine.SalesId)
            {
                ttsbegin;
                this.insert();
                insertIntoMarkupTrans(this.TableId, this.RecId);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record to CustomsExportAssessableValue_IN and MarkupTrans tables from specified SalesLine table record.
    /// </summary>
    /// <param name="_salesLine">
    /// The SalesLine table record to be copied.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine)
    {
        CustomsExportAssessableValue_IN customsExportAssessableValue;
        boolean                         ret;
        MarkupTrans                     markupTrans, markUpTransLoc;

        void insertIntoMarkupTrans(tableId _tableId, RecId _recId)
        {
            delete_from markUpTransLoc
                where markUpTransLoc.TransTableId == _tableId
                   && markUpTransLoc.TransRecId   == _recId;

            while select markUpTransLoc
                where markUpTransLoc.TransTableId == _salesLine.TableId
                   && markUpTransLoc.TransRecId   == _salesLine.RecId
            {
                markupTrans = markUpTransLoc.data();
                markupTrans.TransTableId    = _tableId;
                markupTrans.TransRecId      = _recId;
                markupTrans.insert();
            }
        }

        if (_salesLine.RecId)
        {
            this.SalesId            = _salesLine.SalesId;
            this.Amount             = _salesLine.LineAmount;
            this.Basis              = CustomsAssessableValueBasis_IN::CIF;
            this.InventTransId      = _salesLine.InventTransId;
            this.Value              = CustomsExportAssessableValue_IN::getMarkupValue(_salesLine.TableId, _salesLine.RecId, _salesLine.InventTransId);
            while select RecId from customsExportAssessableValue
                where customsExportAssessableValue.InventTransId  == _salesLine.InventTransId
            {
                if (customsExportAssessableValue.RecId)
                {
                    ret = true;
                }
            }
            if (!ret)
            {
                ttsbegin;
                this.insert();
                insertIntoMarkupTrans(this.TableId, this.RecId);
                ttscommit;
            }
            else
            {
                ttsbegin;
                select forupdate customsExportAssessableValue
                    where customsExportAssessableValue.InventTransId  == _salesLine.InventTransId;

                if (customsExportAssessableValue.Basis == CustomsAssessableValueBasis_IN::CIF)
                {
                    customsExportAssessableValue.Value  = this.Value;
                }
                else
                {
                    customsExportAssessableValue.Value  = 0;
                }
                customsExportAssessableValue.Amount = _salesLine.LineAmount;
                customsExportAssessableValue.update();
                insertIntoMarkupTrans(customsExportAssessableValue.TableId, customsExportAssessableValue.RecId);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record to CustomsExportAssessableValue_IN and MarkupTrans tables from specified SalesParmLine table record.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The SalesParmLine table record to be copied.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    public void initFromSalesParmLine(
        SalesParmLine _salesParmLine,
        TransDate     _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        SalesLine                       salesLineLoc;
        CustomsExportAssessableValue_IN customsExportAssessableValue;
        boolean                         ret;
        MarkupTrans                     markupTrans, markUpTransLoc;

        void insertIntoMarkupTrans(tableId _tableId, RecId _recId)
        {
            delete_from markUpTransLoc
            where markUpTransLoc.TransTableId == _tableId
               && markUpTransLoc.TransRecId   == _recId;
            while select markUpTransLoc
                where markUpTransLoc.TransTableId == salesLineLoc.TableId
                   && markUpTransLoc.TransRecId   == salesLineLoc.RecId
            {
                markupTrans = markUpTransLoc.data();
                markupTrans.TransTableId    = _tableId;
                markupTrans.TransRecId      = _recId;
                markupTrans.insert();
            }
        }

        salesLineLoc = SalesLine::findInventTransId(_salesParmLine.InventTransId);
        if (_salesParmLine.RecId)
        {
            this.SalesId            = _salesParmLine.OrigSalesId;
            this.Amount             = _salesParmLine.effectiveLineAmount();
            this.Basis              = CustomsAssessableValueBasis_IN::CIF;
            this.InventTransId      = _salesParmLine.InventTransId;
            this.Value              = CustomsExportAssessableValue_IN::getMarkupValue(salesLineLoc.TableId,
                                                                                      salesLineLoc.RecId,
                                                                                      _salesParmLine.InventTransId,
                                                                                      _transDate);

            while select RecId from customsExportAssessableValue
                where customsExportAssessableValue.InventTransId  == _salesParmLine.InventTransId
            {
                if (customsExportAssessableValue.RecId)
                {
                    ret = true;
                }
            }
            if (!ret && _salesParmLine.OrigSalesId)
            {
                ttsbegin;
                this.insert();
                insertIntoMarkupTrans(this.TableId, this.RecId);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Invoice assessable value Amount for specified CustomsExportAssessableValue_IN table record.
    /// </summary>
    /// <returns>
    /// Invoice assessable value Amount.
    /// </returns>
    display CustomsAmount_IN invoiceAssessableValue()
    {
        SalesLine salesLine = SalesLine::findInventTransId(this.InventTransId);

        return salesLine.salesLine_IN().AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceFOBAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Invoice FOB Amount for specified CustomsExportAssessableValue_IN table record.
    /// </summary>
    /// <returns>
    /// Invoice FOB Amount.
    /// </returns>
    display CustomsAmount_IN invoiceFOBAmount()
    {
        SecurityRights              sr;
        SecurityTableRights         stRights;
        AccessRight                 arA;
        AccessRight                 arV;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(CustomsExportAssessableValue_IN));
        arA = stRights.fieldAccessRight(fieldStr(CustomsExportAssessableValue_IN,Amount));
        arV = stRights.fieldAccessRight(fieldStr(CustomsExportAssessableValue_IN,Value));
        if (arA != AccessRight::NoAccess && arV != AccessRight::NoAccess)
        {
            return this.Amount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifys field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        SalesLine   salesLine;

        super(_fieldId);
        switch (_fieldId)
        {
            case fieldnum(CustomsExportAssessableValue_IN, Basis):
                if (this.Basis == CustomsAssessableValueBasis_IN::FOB)
                {
                    this.Value = 0;
                }
                else
                {
                    salesLine   = SalesLine::findInventTransId(this.InventTransId);
                    if (salesLine.RecId)
                    {
                        this.Value = CustomsExportAssessableValue_IN::getMarkupValue(salesLine.TableId, salesLine.RecId, salesLine.InventTransId);
                    }
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomsAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the salesLine table with the AssessableValue for specified CustomsExportAssessableValue_IN table record.
    /// </summary>
    public void updateCustomsAssessableValue()
    {
        SalesLine    salesLine;
        SalesLine_IN salesLine_IN;

        ttsbegin;
        select forupdate salesLine
            where salesLine.InventTransId == this.InventTransId;
        salesLine_IN = salesLine.salesLine_IN();
        salesLine_IN.AssessableValueTransactionCurrency = this.invoiceAssessableValue();
        salesLine.packSalesLine_IN(salesLine_IN);
        salesLine.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsExportAssessableValue_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsExportAssessableValue_IN table.
    /// </returns>
    public static CustomsExportAssessableValue_IN find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsExportAssessableValue_IN customsExportAssessableValue;

        customsExportAssessableValue.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsExportAssessableValue.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsExportAssessableValue
            where customsExportAssessableValue.RecId == _recId;

        return customsExportAssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsExportAssessableValue_IN table for the specified record inventTransId.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventTransId of transaction line.
    /// </param>
    /// <param name="_update">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected CustomsExportAssessableValue_IN table record.
    /// </returns>
    public static CustomsExportAssessableValue_IN findInventTransId(
        InventTransId   _inventTransId,
        boolean         _update = false)
    {
        CustomsExportAssessableValue_IN customsExportAssessableValue;

        if (_inventTransId)
        {
            customsExportAssessableValue.selectForUpdate(_update);

            select firstonly customsExportAssessableValue
                where customsExportAssessableValue.InventTransId == _inventTransId;
        }

        return customsExportAssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Misc charges for specified tableId, recId, and inventTransId.
    /// </summary>
    /// <param name="_tableId">
    /// TableId of the transaction table where Misc.Charges are attached.
    /// </param>
    /// <param name="_recId">
    /// RecId of the transaction table where Misc.Charges are attached.
    /// </param>
    /// <param name="_inventTransId">
    /// InventTransId of the transaction table where Misc.Charges are attached.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date
    /// </param>
    /// <returns>
    /// Misc. Charges attached for the transactionLine.
    /// </returns>
    public static MarkupValue getMarkupValue(
        tableId        _tableId,
        RecId          _recId,
        InventTransId  _inventTransId,
        TransDate      _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        MarkupTrans             markupTrans;
        MarkupValue             miscCharge;
        CurrencyCode            currencyCodeLoc;
        AmountMST               amountMSTLoc;
        CustomsExchangeRate_IN  exchRate;
        SalesLine               salesLine;
        #DEFINE.ExchangeRateMultiplier(100)

        salesLine = SalesLine::findInventTransId(_inventTransId);
        currencyCodeLoc = salesLine.CurrencyCode;

        exchRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                    currencyCodeLoc,
                                                    Direction_IN::Export,
                                                    _transDate);
        exchRate = exchRate / #ExchangeRateMultiplier;
        while select Value, CurrencyCode, MarkupCategory from markupTrans
            where markupTrans.TransTableId                == _tableId
               && markupTrans.TransRecId                  == _recId
               && markupTrans.CustomsAssessableValue_IN   == NoYes::Yes
               && markupTrans.Value                       >  0
        {
            if (markupTrans.MarkupCategory == MarkupCategory::Percent)
            {
                if (markupTrans.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                {
                    markupTrans.Value = salesLine.LineAmount * markupTrans.Value / 100;
                }
                if (markupTrans.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                {
                    markupTrans.Value = salesLine.SalesQty * markupTrans.Value / 100;
                }
                if (markupTrans.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                {
                    markupTrans.Value = 1 * markupTrans.Value / 100;
                }
            }

            if (markupTrans.MarkupCategory == MarkupCategory::Pcs)
            {
                markupTrans.Value = salesLine.SalesQty * markupTrans.Value;
            }

            if (exchRate)
            {
                if (markupTrans.CurrencyCode
                    && currencyCodeLoc
                    && markupTrans.CurrencyCode != currencyCodeLoc)
                {
                    amountMSTLoc = CurrencyExchangeHelper::mstAmount(markupTrans.Value, markupTrans.CurrencyCode, _transDate, UnknownNoYes::Unknown, 0, 0, false);

                    miscCharge += (amountMSTLoc / exchRate);
                }
                else
                {
                    miscCharge += markupTrans.Value;
                }
            }
            else
            {
                miscCharge += CurrencyExchangeHelper::curAmount2CurAmount(markupTrans.Value, markupTrans.CurrencyCode, salesLine.CurrencyCode);
            }
        }
        return miscCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupValueByBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Misc charges for related salesLine.
    /// </summary>
    /// <param name="_buffer">
    /// The buffer of sales line record where Misc.Charges are attached.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Misc. Charges attached for the salesLine.
    /// </returns>
    public static MarkupValue getMarkupValueByBuffer(
        SalesLine   _buffer,
        TransDate   _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        MarkupTrans             markupTrans;
        MarkupValue             miscCharge;
        AmountMST               amountMSTLoc;
        CustomsExchangeRate_IN  exchRate;
        SalesLine               salesLine;
        #DEFINE.ExchangeRateMultiplier(100)

        if (_buffer.TableId == tableNum(SalesLine))
        {
            salesLine = _buffer;

            exchRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                        salesLine.CurrencyCode,
                                                        Direction_IN::Export,
                                                        _transDate);
            exchRate = exchRate / #ExchangeRateMultiplier;
            while select Value, CurrencyCode, MarkupCategory from markupTrans
                where markupTrans.TransTableId                == salesLine.TableId
                   && markupTrans.TransRecId                  == salesLine.RecId
                   && markupTrans.CustomsAssessableValue_IN   == NoYes::Yes
                   && markupTrans.Value                       >  0
            {
                if (markupTrans.MarkupCategory == MarkupCategory::Percent)
                {
                    if (markupTrans.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                    {
                        markupTrans.Value = salesLine.LineAmount * markupTrans.Value / 100;
                    }
                    if (markupTrans.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                    {
                        markupTrans.Value = salesLine.SalesQty * markupTrans.Value / 100;
                    }
                    if (markupTrans.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                    {
                        markupTrans.Value = 1 * markupTrans.Value / 100;
                    }
                }

                if (markupTrans.MarkupCategory == MarkupCategory::Pcs)
                {
                    markupTrans.Value = salesLine.SalesQty * markupTrans.Value;
                }

                if (exchRate)
                {
                    if (markupTrans.CurrencyCode
                        && salesLine.CurrencyCode
                        && markupTrans.CurrencyCode != salesLine.CurrencyCode)
                    {
                        amountMSTLoc = CurrencyExchangeHelper::mstAmount(markupTrans.Value, markupTrans.CurrencyCode, _transDate, UnknownNoYes::Unknown, 0, 0, false);

                        miscCharge += (amountMSTLoc / exchRate);
                    }
                    else
                    {
                        miscCharge += markupTrans.Value;
                    }
                }
                else
                {
                    miscCharge += CurrencyExchangeHelper::curAmount2CurAmount(markupTrans.Value, markupTrans.CurrencyCode, salesLine.CurrencyCode);
                }
            }
        }
        return miscCharge;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64154</DeveloperDocumentation>
	<Label>@GLS5298</Label>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>Basis</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TransIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsAmount_IN</ExtendedDataType>
			<Label>@SYS6901</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Basis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustomsAssessableValueBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
			<Label>@SYS8371</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustomsExportOrderLine</Name>
			<RelatedTable>CustomsExportOrderLine_IN</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>