<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNetAgreementRelationship</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNetAgreementRelationship extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        switch (this.Type)
        {
            case CustVendACType::Cust:
                if (!this.existCustTableRecIdByPartyAndCompany())
                {
                    isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementCustomerPartyError", this.AccountNum, DirPartyTable::getName(this.Party)));
                }
                break;

            case CustVendACType::Vend:
                if (!this.existVendTableRecIdByPartyAndCompany())
                {
                    isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementVendorPartyError", this.AccountNum, DirPartyTable::getName(this.Party)));
                }
                break;
        }

        if (isValid)
        {
            isValid = this.validateDuplicate() && this.validateWithholdingTaxIsNotUsed();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustTableRecIdByPartyAndCompany</Name>
				<Source><![CDATA[
    private boolean existCustTableRecIdByPartyAndCompany()
    {
        CustTable custTable;
        boolean doesExist;

        select firstonly crosscompany RecId
            from custTable
            where custTable.Party == this.Party
                && custTable.DataAreaId == this.Company;

        if (custTable)
        {
            doesExist = true;
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVendTableRecIdByPartyAndCompany</Name>
				<Source><![CDATA[
    private boolean existVendTableRecIdByPartyAndCompany()
    {
        VendTable vendTable;
        boolean doesExist;

        select firstonly crosscompany RecId
            from vendTable
            where vendTable.Party == this.Party
                && vendTable.DataAreaId == this.Company;

        if (vendTable)
        {
            doesExist = true;
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicate</Name>
				<Source><![CDATA[
    private boolean validateDuplicate()
    {
        CustVendNetAgreementRelationship custVendNetAgreementRelationshipLocal;
        boolean isValid = true;

        select firstonly custVendNetAgreementRelationshipLocal
            where custVendNetAgreementRelationshipLocal.Party == this.Party
                && custVendNetAgreementRelationshipLocal.Company == this.Company
                && custVendNetAgreementRelationshipLocal.Type == this.Type;

        if (custVendNetAgreementRelationshipLocal)
        {
            isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementRelationshipDuplicateType", this.Type));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWithholdingTaxIsNotUsed</Name>
				<Source><![CDATA[
    private boolean validateWithholdingTaxIsNotUsed()
    {
        VendTable vendTable;
        CustTable custTable;
        boolean isValid = true;

        switch (this.Type)
        {
            case CustVendACType::Cust:
                select firstonly crosscompany TaxWithholdCalculate_TH, TaxWithholdCalculate_IN
                    from custTable
                    where custTable.Party == this.Party
                        && custTable.AccountNum == this.AccountNum
                        && custTable.DataAreaId == this.Company;

                if (custTable.TaxWithholdCalculate_IN || custTable.TaxWithholdCalculate_TH)
                {
                    isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementAddPartnerUsingWithholdingTaxError", custTable.AccountNum));
                }
                break;

            case CustVendACType::Vend:
                select firstonly crosscompany TaxWithholdCalculate
                    from vendTable
                    where vendTable.Party == this.Party
                        && vendTable.AccountNum == this.AccountNum
                        && vendTable.DataAreaId == this.Company;

                if (vendTable.TaxWithholdCalculate)
                {
                    isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementAddPartnerUsingWithholdingTaxError", vendTable.AccountNum));
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendNetAgreementRelationship</c> table.
    /// </summary>
    /// <param name = "_party">The party ID of the record.</param>
    /// <param name = "_company">The company of the record.</param>
    /// <param name = "_type">The <c>CustVendACType</c> type of the record.</param>
    /// <param name = "_account">The account ID of the record.</param>
    /// <param name = "_forupdate">A boolean value that indicates whether to read the record for update.</param>
    /// <returns>The <c>CustVendNetAgreementRelationship</c> record found, if any.</returns>
    public static CustVendNetAgreementRelationship find(
        DirPartyRecId _party,
        DataAreaId _company,
        CustVendACType _type,
        AccountNum _account,
        boolean _forupdate = false)
    {
        CustVendNetAgreementRelationship custVendNetAgreementRelationship;

        custVendNetAgreementRelationship.selectForUpdate(_forupdate);

        select firstonly custVendNetAgreementRelationship
            where custVendNetAgreementRelationship.Party == _party
                && custVendNetAgreementRelationship.Company == _company
                && custVendNetAgreementRelationship.Type == _type
                && custVendNetAgreementRelationship.AccountNum == _account;

        return custVendNetAgreementRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationByAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendNetAgreementRelationship</c> table.
    /// </summary>
    /// <param name = "_party">The party ID of the record.</param>
    /// <param name = "_company">The company of the record.</param>
    /// <param name = "_type">The <c>CustVendACType</c> type of the record.</param>
    /// <param name = "_forupdate">A boolean value that indicates whether to read the record for update.</param>
    /// <returns>The <c>CustVendNetAgreementRelationship</c> record found, if any.</returns>
    public static CustVendNetAgreementRelationship findRelationByAccountType(
        DirPartyRecId _party,
        DataAreaId _company,
        CustVendACType _type,
        boolean _forupdate = false)
    {
        CustVendNetAgreementRelationship custVendNetAgreementRelationship;

        custVendNetAgreementRelationship.selectForUpdate(_forupdate);

        select firstonly custVendNetAgreementRelationship
            where custVendNetAgreementRelationship.Party == _party
                && custVendNetAgreementRelationship.Company == _company
                && custVendNetAgreementRelationship.Type == _type;

        return custVendNetAgreementRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEachCompanyHasCustomerAndVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that each company in the party for the netting agreement has a customer and a vendor.
    /// </summary>
    /// <param name = "_party">The party ID of the record.</param>
    /// <returns>false if a netting agreement lacks a customer or a vendor; otherwise, true.</returns>
    public static boolean validateEachCompanyHasCustomerAndVendor(DirPartyRecId _party)
    {
        boolean isValid = true;

        Query query = new Query(queryStr(CustVendNetAgreementRelationshipCompanyMissingCustVend));
        QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(CustVendNetAgreementRelationship));
        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CustVendNetAgreementRelationship, Party));

        queryBuildRange.value(queryValue(_party));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePartyAssociationNotInCustVendNetAgreementRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the record does not exist in a netting agreement relationship for a change in party association.
    /// </summary>
    /// <param name = "_custVendTable">The record to check for a netting agreement.</param>
    /// <returns>true if a netting agreement relationship does not exist; otherwise, false.</returns>
    public static boolean validatePartyAssociationNotInCustVendNetAgreementRelationship(CustVendTable _custVendTable)
    {
        DirPartyTable dirPartyTable;
        boolean isValid = true;

        if (!CustVendNetAgreementRelationship::checkNotInCustVendNetAgreementRelationship(_custVendTable))
        {
            dirPartyTable = dirPartyTable::findRec(_custVendTable.Party);

            isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementChangePartyAssociationError", _custVendTable.AccountNum, dirPartyTable.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanEnableWithholdingTaxNotInCustVendNetAgreementRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the record does not exist in a netting agreement relationship for a change in withholding tax.
    /// </summary>
    /// <param name = "_custVendTable">The record to check for a netting agreement.</param>
    /// <returns>true if a netting agreement relationship does not exist; otherwise, false.</returns>
    public static boolean validateCanEnableWithholdingTaxNotInCustVendNetAgreementRelationship(CustVendTable _custVendTable)
    {
        DirPartyTable dirPartyTable;
        boolean isValid = true;

        if (!CustVendNetAgreementRelationship::checkNotInCustVendNetAgreementRelationship(_custVendTable))
        {
            dirPartyTable = dirPartyTable::findRec(_custVendTable.Party);

            isValid = checkFailed(strFmt("@CashManagement:CustVendNetAgreementActivateWithholdingTaxError", _custVendTable.AccountNum, dirPartyTable.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotInCustVendNetAgreementRelationship</Name>
				<Source><![CDATA[
    private static boolean checkNotInCustVendNetAgreementRelationship(CustVendTable _custVendTable)
    {
        CustVendACType type;
        boolean isValid = true;

        switch (_custVendTable.TableId)
        {
            case tableNum(CustTable):
                type = CustVendACType::Cust;
                break;

            case tableNum(VendTable):
                type = CustVendACType::Vend;
                break;
        }

        if (CustVendNetAgreementRelationship::find(
            _custVendTable.Party,
            _custVendTable.DataAreaId,
            type,
            _custVendTable.AccountNum))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCompanyToNettingAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds accounts from the given company to the netting agreement.
    /// </summary>
    /// <param name = "_custVendNetAgreementAvailable">
    /// A <c>CustVendNetAgreementAvailable</c> view record containing the party of the netting agreement
    /// and the company to add.
    /// </param>
    public static void addCompanyToNettingAgreement(CustVendNetAgreementAvailable _custVendNetAgreementAvailable)
    {
        CustVendNetAgreementAvailable nettingPairAvailable;
        CustVendNetAgreementRelationship nettingRelationshipCustomer;
        CustVendNetAgreementRelationship nettingRelationshipVendor;
        CustAccount customerAccount;
        VendAccount vendorAccount;

        boolean isValid = true;

        switch (_custVendNetAgreementAvailable.RoleType)
        {
            case (DirPartyRoleType::Customer):
                nettingPairAvailable = CustVendNetAgreementAvailable::find(
                    _custVendNetAgreementAvailable.Party,
                    _custVendNetAgreementAvailable.Company,
                    DirPartyRoleType::Vendor);

                customerAccount = _custVendNetAgreementAvailable.AccountNum;
                vendorAccount = nettingPairAvailable.AccountNum;
                break;

            case (DirPartyRoleType::Vendor):
                nettingPairAvailable = CustVendNetAgreementAvailable::find(
                    _custVendNetAgreementAvailable.Party,
                    _custVendNetAgreementAvailable.Company,
                    DirPartyRoleType::Customer);

                customerAccount = nettingPairAvailable.AccountNum;
                vendorAccount = _custVendNetAgreementAvailable.AccountNum;
                break;

            default:
                throw error(strFmt(
                    "@CashManagement:CustVendNetAgreementCannotCreateRelationshipInvalidType",
                    _custVendNetAgreementAvailable.AccountNum,
                    _custVendNetAgreementAvailable.RoleType));
        }

        if (customerAccount != '' && vendorAccount != '')
        {
            nettingRelationshipCustomer.Party = _custVendNetAgreementAvailable.Party;
            nettingRelationshipCustomer.Company = _custVendNetAgreementAvailable.Company;
            nettingRelationshipCustomer.AccountNum = customerAccount;
            nettingRelationshipCustomer.Type = CustVendACType::Cust;

            isValid = isValid && nettingRelationshipCustomer.validateWrite();

            nettingRelationshipVendor.Party = _custVendNetAgreementAvailable.Party;
            nettingRelationshipVendor.Company = _custVendNetAgreementAvailable.Company;
            nettingRelationshipVendor.AccountNum = vendorAccount;
            nettingRelationshipVendor.Type = CustVendACType::Vend;

            isValid = isValid && nettingRelationshipVendor.validateWrite();

            if (isValid)
            {
                nettingRelationshipCustomer.insert();
                nettingRelationshipVendor.insert();
            }
        }
        else
        {
            DirPartyRoleType missingRoleType;

            if (_custVendNetAgreementAvailable.RoleType == DirPartyRoleType::Customer)
            {
                missingRoleType = DirPartyRoleType::Vendor;
            }
            else
            {
                missingRoleType = DirPartyRoleType::Customer;
            }

            warning(strFmt(
                "@CashManagement:CustVendNetAgreementMissingCustVend",
                _custVendNetAgreementAvailable.AccountNum,
                missingRoleType,
                _custVendNetAgreementAvailable.Company));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCompanyFromNettingAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes accounts from the given company from the netting agreement.
    /// </summary>
    /// <param name = "_party">The party on the netting agreement.</param>
    /// <param name = "_company">The company to remove.</param>
    public static void removeCompanyFromNettingAgreement(DirPartyRecId _party, DataAreaId _company)
    {
        CustVendNetAgreementRelationship custVendNetAgreementRelationshipLocal;

        ttsbegin;

        delete_from custVendNetAgreementRelationshipLocal
            where custVendNetAgreementRelationshipLocal.Party == _party
                && custVendNetAgreementRelationshipLocal.Company == _company;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@CashManagement:CustVendNetAgreementRelationshipDeveloperDoc</DeveloperDocumentation>
	<IsObsolete>Yes</IsObsolete>
	<Label>@CashManagement:CustVendNetAgreementRelationship</Label>
	<TableGroup>Main</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@GeneralLedger:Company</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PartyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustVendNetAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendNetAgreement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PartyIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>