<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetShiftDepreciationProfile_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetShiftDepreciationProfile_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a valid interval exists.
    /// </summary>
    /// <returns>
    /// Returns true if an interval exists.
    /// </returns>
    public boolean checkInterval()
    {
        if ((this.FromDate && ! this.ToDate) || (! this.FromDate && this.ToDate))
        {
            return checkFailed("@SYS22087");
        }

        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS16982");
        }

        if (this.FromDate && AssetShiftDepreciationProfile_IN::existDataWithoutDate(this.Profile, this.RecId))
        {
            return checkFailed("@SYS22088");
        }
        if (AssetShiftDepreciationProfile_IN::existSamePeriod(this.Profile,
                                                              this.FromDate,
                                                              this.ToDate,
                                                              this.RecId))
        {
            return checkFailed("@SYS22089");
        }
        else
        {
            if (AssetShiftDepreciationProfile_IN::existPeriodOverlap(this.Profile,
                                                                     this.FromDate,
                                                                     this.ToDate,
                                                                     this.RecId))
            {
                return checkFailed("@SYS94867");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationprofile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the AssetDepreciationProfile based on current record AssetDepreciationProfileId.
    /// </summary>
    /// <returns>
    /// Returns AssetDepreciationProfile table buffer.
    /// </returns>
    public AssetDepreciationProfile depreciationprofile()
    {
        ;
        return AssetDepreciationProfile::find(this.Profile);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getShiftPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds shift percentage as per TypeOFShift for the AssetShiftDepreciationProfile_IN.
    /// </summary>
    /// <param name="_typeOfShift">
    /// The TypeOfShift
    /// </param>
    /// <returns>
    /// Returns shift percentage as per TypeOFShift for the AssetShiftDepreciationProfile_IN.
    /// </returns>
    public AssetDepreciationPercentage getShiftPercentage(TypeOfShift_IN    _typeOfShift)
    {
        AssetDepreciationPercentage shiftPercentage;
        boolean                     isStraightLine;
        #AssetDepreciationPercent_IN

        if (this.depreciationprofile().isNewShiftDepreciationMethod_IN())
        {
            isStraightLine = true;
        }
        switch (_typeOfShift)
        {
            case TypeOfShift_IN::None :
            case TypeOfShift_IN::SingleShift :
                shiftPercentage = (this.SingleShiftPercentage ? this.SingleShiftPercentage :
                                        (isStraightLine ? #SingleShiftPercentage : #ZeroValue));
                break;

            case TypeOfShift_IN::DoubleShift :
                shiftPercentage = (this.DoubleShiftPercentage ? this.DoubleShiftPercentage :
                                        (isStraightLine ? #DoubleShiftPercentage : #ZeroValue));
                break;

            case TypeOfShift_IN::TripleShift :
                shiftPercentage = (this.TripleShiftPercentage ? this.TripleShiftPercentage :
                                        (isStraightLine ? #TripleShiftPercentage : #ZeroValue));
                break;

            default :
                break;
        }

        return shiftPercentage;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return end date of a period.
    /// </summary>
    /// <param name="_valueModel">
    /// Value model of the asset.
    /// </param>
    /// <param name="_depreciationProfile">
    /// Depreciation profile to search for.
    /// </param>
    /// <param name="_period">
    /// The period in which the industry was operational.
    /// </param>
    /// <returns>
    /// Return end date of a period.
    /// </returns>
    public date getToDate(AssetBookShiftDepreciation_IN         _valueModel,
                          AssetShiftDepreciationProfile_IN      _depreciationProfile,
                          FiscalCalendarPeriod                  _period)
    {
        date                   toDate;

        if (_valueModel.ToDate < _depreciationProfile.ToDate)
        {
            if (_valueModel.ToDate < _period.EndDate)
            {
                toDate =  _valueModel.ToDate;
            }
            else
            {
                toDate =  _period.EndDate;
            }
        }
        else
        {
            if (_depreciationProfile.ToDate < _period.EndDate)
            {
                toDate = _depreciationProfile.ToDate;
            }
            else
            {
                toDate = _period.EndDate;
            }
        }
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidShiftPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to default the ShiftPercentage to based on the selected shift and method.
    /// </summary>
    /// <param name="_percentage">
    /// The ShiftDepreciation percentage.
    /// </param>
    /// <param name="_minPercentageForSLMethods">
    /// The default percentage.
    /// </param>
    /// <returns>
    /// Returns the ShiftPercentage to based on the selected shift and method.
    /// </returns>
    public AssetDepreciationPercentage getValidShiftPercentage(AssetDepreciationPercentage _percentage,
                                                               AssetDepreciationPercentage _minPercentageForSLMethods)
    {
        AssetDepreciationPercentage ret;
        AssetDepreciationProfile    assetDepreciationProfile = this.depreciationprofile();
        #AssetDepreciationPercent_IN

        if (assetDepreciationProfile.isNewShiftDepreciationMethod_IN())
        {
            ret = max(_minPercentageForSLMethods, _percentage);
        }
        else
        {
            ret = min(#SingleShiftPercentage, max(0, _percentage));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        #AssetDepreciationPercent_IN
        AssetDepreciationProfile assetDepreciationProfile;

        super();

        assetDepreciationProfile = AssetDepreciationProfile::find(this.Profile);

        if (assetDepreciationProfile.isNewShiftDepreciationMethod_IN())
        {
            this.SingleShiftPercentage = #SingleShiftPercentage;
            this.DoubleShiftPercentage = #DoubleShiftPercentage;
            this.TripleShiftPercentage = #TripleShiftPercentage;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets modified fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        #AssetDepreciationPercent_IN

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AssetShiftDepreciationProfile_IN, SingleShiftPercentage):
                this.SingleShiftPercentage = this.getValidShiftPercentage(this.SingleShiftPercentage, #SingleShiftPercentage);
                break;

            case fieldNum(AssetShiftDepreciationProfile_IN, DoubleShiftPercentage):
                this.DoubleShiftPercentage = this.getValidShiftPercentage(this.DoubleShiftPercentage, #DoubleShiftPercentage);
                break;

            case fieldNum(AssetShiftDepreciationProfile_IN, TripleShiftPercentage):
                this.TripleShiftPercentage = this.getValidShiftPercentage(this.TripleShiftPercentage, #TripleShiftPercentage);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean     ret;
        #AssetDepreciationPercent_IN
        AssetDepreciationProfile assetDepreciationProfile;

        ret = super();

        if (ret)
        {
            assetDepreciationProfile = AssetDepreciationProfile::find(this.Profile);

            if (assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLinePercentage_IN
                || assetDepreciationProfile.Method == AssetDepreciationMethod::ReducingBalance)
            {
                this.SingleShiftPercentage = min(#SingleShiftPercentage,max(0,this.SingleShiftPercentage));
                if (this.SingleShiftPercentage <= 0
                    || this.SingleShiftPercentage > #SingleShiftPercentage)
                {
                    ret = checkFailed("@SYS67342");
                }
            }
            ret = this.checkInterval() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the asset shift depreciation profile exists.
    /// </summary>
    /// <param name="_profile">
    /// The profile.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// Returns true if the asset depreciation profile exists.
    /// </returns>
    public static boolean exist(AssetDepreciationProfileId  _profile,
                                FromDate                    _fromDate,
                                ToDate                      _toDate)
    {
        return (select firstonly RecId from assetShiftDepreciationProfile_IN
                    where assetShiftDepreciationProfile_IN.Profile  == _profile
                       && assetShiftDepreciationProfile_IN.FromDate == _fromDate
                       && assetShiftDepreciationProfile_IN.ToDate   == _toDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record of asset shift depreciation profile exists.
    /// </summary>
    /// <param name="_profileId">
    /// The asset depreciation profile id.
    /// </param>
    /// <returns>
    /// Returns true if record exists.
    /// </returns>
    public static boolean existByProfileId(AssetDepreciationProfileId _profileId)
    {
        return _profileId
            && (select firstonly RecId from assetShiftDepreciationProfile_IN
                    where assetShiftDepreciationProfile_IN.Profile == _profileId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if another record exists without dates.
    /// </summary>
    /// <param name="_profile">
    /// The asset depreciation profile id.
    /// </param>
    /// <param name="_recId">
    /// Record id of another record which we dont want to search for.
    /// </param>
    /// <returns>
    /// Returns true if record exists.
    /// </returns>
    private static boolean existDataWithoutDate(AssetDepreciationProfileId  _profile,
                                                RecId                       _recId)
    {
        if (_profile)
        {
            return (select firstOnly RecId from assetShiftDepreciationProfile_IN
                        where assetShiftDepreciationProfile_IN.Profile          == _profile
                            && assetShiftDepreciationProfile_IN.RecId           != _recId
                            && ! assetShiftDepreciationProfile_IN.FromDate
                            && ! assetShiftDepreciationProfile_IN.ToDate).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if overlap in period period.
    /// </summary>
    /// <param name="_profile">
    /// Depreciation profile to search for.
    /// </param>
    /// <param name="_fromDate">
    /// Fromdate of the period.
    /// </param>
    /// <param name="_toDate">
    /// Todate of the period.
    /// </param>
    /// <param name="_recId">
    /// Record id of another record which we dont want to search for.
    /// </param>
    /// <returns>
    /// True if overlap in period.
    /// </returns>
    private static boolean existPeriodOverlap(AssetDepreciationProfileId     _profile,
                                              FromDate                       _fromDate,
                                              ToDate                         _toDate,
                                              RecId                          _recId)
    {
        AssetShiftDepreciationProfile_IN    assetShiftDepreciation;
        boolean                             ret = false;

        if (_profile)
        {
            while select FromDate, ToDate
                  from assetShiftDepreciation
                    where assetShiftDepreciation.Profile    == _profile
                       && assetShiftDepreciation.RecId      != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }
                if (_fromDate   >= assetShiftDepreciation.FromDate  &&
                    _fromDate   <= assetShiftDepreciation.ToDate    ||
                    _toDate     >= assetShiftDepreciation.FromDate  &&
                    _toDate     <= assetShiftDepreciation.ToDate)
                {
                    ret = true;
                }
                if (assetShiftDepreciation.FromDate >= _fromDate    &&
                    assetShiftDepreciation.FromDate <= _toDate      ||
                    assetShiftDepreciation.ToDate   >= _fromDate    &&
                    assetShiftDepreciation.ToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSamePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if another record exists with the same period.
    /// </summary>
    /// <param name="_profile">
    /// Depreciation profile to search for.
    /// </param>
    /// <param name="_fromDate">
    /// Fromdate of the period.
    /// </param>
    /// <param name="_toDate">
    /// Todate of the period.
    /// </param>
    /// <param name="_recId">
    /// Record id of another record which we dont want to search for.
    /// </param>
    /// <returns>
    /// True if another record exists.
    /// </returns>
    private static boolean existSamePeriod(AssetDepreciationProfileId    _profile,
                                           FromDate                      _fromDate,
                                           ToDate                        _toDate,
                                           RecId                         _recId)
    {
        if (_profile)
        {
            return (select firstOnly RecId from assetShiftDepreciationProfile_IN
                        where assetShiftDepreciationProfile_IN.Profile     == _profile
                            && assetShiftDepreciationProfile_IN.FromDate   == _fromDate
                            && assetShiftDepreciationProfile_IN.ToDate     == _toDate
                            && assetShiftDepreciationProfile_IN.RecId      != _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset shift depreciation profile by id.
    /// </summary>
    /// <param name="_profile">
    /// The profile id.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_forUpdate">
    /// The forupdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetShiftDepreciationProfile_IN</c> class.
    /// </returns>
    public static AssetShiftDepreciationProfile_IN find(AssetDepreciationProfileId  _profile,
                                                        FromDate                    _fromDate,
                                                        ToDate                      _toDate,
                                                        boolean                     _forUpdate = false)
    {
        AssetShiftDepreciationProfile_IN  shiftDepreciation;

        if (_profile && _fromDate)
        {
            shiftDepreciation.selectForUpdate(_forUpdate);

            select firstonly shiftDepreciation
                where shiftDepreciation.Profile     == _profile
                    && shiftDepreciation.FromDate    == _fromDate
                    && shiftDepreciation.ToDate      == _toDate;
        }
        return shiftDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDepProfileTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset shift depreciation profile by id and TransDate.
    /// </summary>
    /// <param name="_profile">
    /// The profile id.
    /// </param>
    /// <param name="_date">
    /// TransDate
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetShiftDepreciationProfile_IN</c> class.
    /// </returns>
    public static AssetShiftDepreciationProfile_IN findByDepProfileTransDate(
            AssetDepreciationProfileId  _profile,
            TransDate                   _date)

    {
        AssetShiftDepreciationProfile_IN  shiftDepreciation;

        if (_profile)
        {
            select firstonly shiftDepreciation
                order by FromDate
                where shiftDepreciation.Profile     == _profile
                    && ((!shiftDepreciation.FromDate
                            && !shiftDepreciation.ToDate)
                        || (shiftDepreciation.FromDate <= _date
                            && shiftDepreciation.ToDate >= _date));
        }

        return shiftDepreciation;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetShiftDepreciationProfile_IN</DeveloperDocumentation>
	<FormRef>AssetShiftDepreciationProfile_IN</FormRef>
	<Label>@GLS5960</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Profile</TitleField1>
	<TitleField2>FromDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AssetShiftDepreciationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SingleShiftPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoubleShiftPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TripleShiftPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Percentage</Name>
			<Label>@SYS71272</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SingleShiftPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoubleShiftPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TripleShiftPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DoubleShiftPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationPercentage</ExtendedDataType>
			<Label>@GLS5962</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Profile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SingleShiftPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationPercentage</ExtendedDataType>
			<Label>@GLS5961</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TripleShiftPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationPercentage</ExtendedDataType>
			<Label>@GLS5963</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetShiftDepreciationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Profile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetDepreciationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Profile</Name>
					<SourceEDT>AssetDepreciationProfileId</SourceEDT>
					<Field>Profile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>