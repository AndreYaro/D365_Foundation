<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReplenWorkLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSReplenWorkLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>demandHasReplenishmentLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the demand work has replenishment work linked to it.
    /// </summary>
    /// <param name="_demandWorkId">
    /// The demand work Id.
    /// </param>
    /// <returns>
    /// true if the replenishment link record is found for the demand work; otherwise, false.
    /// </returns>
    public static boolean demandHasReplenishmentLink(WHSWorkId _demandWorkId)
    {
        return (_demandWorkId)
        && (select firstOnly RecId from WHSReplenWorkLink
            where WHSReplenWorkLink.DemandWorkId == _demandWorkId).Recid != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>demandLineHasReplenishmentLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the demand workline has replenishment work linked to it.
    /// </summary>
    /// <param name="_demandWorkId">
    /// The demand work Id.
    /// </param>
    /// <param name="_demandLineNum">
    /// The demand work lineNum.
    /// </param>
    /// <returns>
    /// true if the replenishment link record is found for the demand work line; otherwise, false.
    /// </returns>
    public static boolean demandLineHasReplenishmentLink(
        WHSWorkId          _demandWorkId,
        LineNum            _demandLineNum)
    {
        return (_demandLineNum && _demandWorkId)
        && (select firstOnly RecId from WHSReplenWorkLink
            where WHSReplenWorkLink.DemandWorkId    == _demandWorkId
            &&    WHSReplenWorkLink.DemandLineNum   == _demandLineNum).Recid != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsReplenWorkLink</c> record exists.
    /// </summary>
    /// <param name="_demandWorkId">
    /// Demand work id of the record.
    /// </param>
    /// <param name="_demandLineNum">
    /// Demand line number of the record.
    /// </param>
    /// <param name="_replenWorkId">
    /// Replenishment work id of the record.
    /// </param>
    /// <param name="_replenLineNum">
    /// Replenishment line number of the record.
    /// </param>
    /// <param name="_workBuildId">
    /// Work creation Id for the replenishment link record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    /// <remarks>
    /// Method exist is obsolete, and we advise the usage of this one instead.
    /// Purposefully marking this method as internal.
    /// We want implementers to reach out so that we can understand the use case.
    /// </remarks>
    [Hookable(false)]
    internal static boolean existInternal(
        WHSWorkId       _demandWorkId,
        LineNum         _demandLineNum,
        WHSWorkId       _replenWorkId,
        LineNum         _replenLineNum,
        WHSWorkBuildId  _workBuildId)
    {
        return (_demandWorkId && _demandLineNum && _replenWorkId && _replenLineNum && _workBuildId) &&
               (select firstonly WHSReplenWorkLink
                    where WHSReplenWorkLink.DemandWorkId    == _demandWorkId    &&
                          WHSReplenWorkLink.DemandLineNum   == _demandLineNum   &&
                          WHSReplenWorkLink.ReplenWorkId    == _replenWorkId    &&
                          WHSReplenWorkLink.ReplenLineNum   == _replenLineNum   &&
                          WHSReplenWorkLink.WorkBuildId     == _workBuildId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds a specific <c>WHSReplenWorkLink</c> record with given parameters.
	/// </summary>
	/// <param name="_demandWorkId">
	/// Demand work id of the record.
	/// </param>
	/// <param name="_demandLineNum">
	/// Demand line number of the record.
	/// </param>
	/// <param name="_replenWorkId">
	/// Replenishment work id of the record.
	/// </param>
	/// <param name="_replenLineNum">
	/// Replenishment line number of the record.
	/// </param>
	/// <param name="_forUpdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    [SysObsolete("The method is not used. If necessary use method findInternal.", false, 30\06\2020)]
    public static WHSReplenWorkLink find(WHSWorkId          _demandWorkId,
                                        LineNum            _demandLineNum,
                                        WHSWorkId          _replenWorkId,
                                        LineNum            _replenLineNum,
                                        boolean            _forUpdate = false)
    {
        WHSReplenWorkLink   replenWorkLink;

        if (_demandWorkId && _demandLineNum && _replenWorkId && _replenLineNum)
        {
            replenWorkLink.selectForUpdate(_forUpdate);

            select firstonly replenWorkLink
                where replenWorkLink.DemandWorkId           == _demandWorkId    &&
                      replenWorkLink.DemandLineNum          == _demandLineNum   &&
                      replenWorkLink.ReplenWorkId           == _replenWorkId    &&
                      replenWorkLink.ReplenLineNum          == _replenLineNum;
        }

        return replenWorkLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSReplenWorkLink</c> record with given parameters.
    /// </summary>
    /// <param name="_demandWorkId">
    /// Demand work id of the record.
    /// </param>
    /// <param name="_demandLineNum">
    /// Demand line number of the record.
    /// </param>
    /// <param name="_replenWorkId">
    /// Replenishment work id of the record.
    /// </param>
    /// <param name="_replenLineNum">
    /// Replenishment line number of the record.
    /// </param>
    /// <param name="_workBuildId">
    /// Work creation Id for the replenishment link record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    /// <remarks>
    /// Method find is obsolete, and we advise the usage of this one instead.
    /// Purposefully marking this method as internal.
    /// We want implementers to reach out so that we can understand the use case.
    /// </remarks>
    [Hookable(false)]
    internal static WHSReplenWorkLink findInternal(
        WHSWorkId       _demandWorkId,
        LineNum         _demandLineNum,
        WHSWorkId       _replenWorkId,
        LineNum         _replenLineNum,
        WHSWorkBuildId  _workBuildId,
        boolean         _forUpdate = false)
    {
        WHSReplenWorkLink   replenWorkLink;

        if (_demandWorkId && _demandLineNum && _replenWorkId && _replenLineNum && _workBuildId)
        {
            replenWorkLink.selectForUpdate(_forUpdate);

            select firstonly replenWorkLink
                where replenWorkLink.DemandWorkId           == _demandWorkId    &&
                      replenWorkLink.DemandLineNum          == _demandLineNum   &&
                      replenWorkLink.ReplenWorkId           == _replenWorkId    &&
                      replenWorkLink.ReplenLineNum          == _replenLineNum   &&
                      replenWorkLink.WorkBuildId            == _workBuildId;
        }

        return replenWorkLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsActiveForReplenWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a record with quantity exists for the replenishment work provided.
    /// </summary>
    /// <param name = "_workId">Work to search for as replenishment work.</param>
    /// <returns>true if record is found; otherwise, false</returns>
    public static boolean existsActiveForReplenWorkId(WHSWorkId _workId)
    {
        return (_workId)
            && (select firstonly WHSReplenWorkLink
                    where WHSReplenWorkLink.ReplenWorkId == _workId
                    &&    WHSReplenWorkLink.InventQty     > 0).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDemandReplenishmentInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the replenishment inventory quantity from all the work related to the current replenishment work line.
    /// </summary>
    /// <param name = "_replenishmentWorkLine">The replenishment work line for which the related demand replenishment inventory quantity needs to be retrieved</param>
    /// <returns>The demand replenishment inventory quantity</returns>
    public static InventQty getDemandReplenishmentInventQty(WHSWorkLine _replenishmentWorkLine)
    {
        WHSReplenWorkLink   replenWorkLink;
        WHSWorkLine         workLine;

        select sum(InventQty) from replenWorkLink
            where replenWorkLink.ReplenWorkId   == _replenishmentWorkLine.WorkId
                && replenWorkLink.ReplenLineNum == _replenishmentWorkLine.LineNum
            exists join WorkId, LineNum, ItemId from workLine
            where workLine.WorkId       == replenWorkLink.DemandWorkId
                && workLine.LineNum     == replenWorkLink.DemandLineNum
                && workLine.WorkStatus  != WHSWorkStatus::Cancelled;

        return replenWorkLink.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseReplenWorkLinkInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases the inventory quantity of the <c>WHSReplenWorkLink</c> records related to the specified demand work line.
    /// </summary>
    /// <param name = "_demandWorkLine">The demand work line</param>
    /// <param name = "_qtyToDecrease">The inventory quantity to decrease</param>
    public static void decreaseReplenWorkLinkInventQty(
                                            WHSWorkLine _demandWorkLine,
                                            Qty         _qtyToDecrease,
                                            WHSWorkLine _replenWorkLine = null)
    {
        WHSReplenWorkLink replenWorkLink;

        if (_qtyToDecrease > 0)
        {
            Qty runningQty = _qtyToDecrease;

            WHSWorkId replenWorkId = _replenWorkLine.RecId ? _replenWorkLine.WorkId : (WHSDeleteExactReplenLinkOnCancelWorkContext::canUseContext() ? WHSDeleteExactReplenLinkOnCancelWorkContext::instance().parmWorkId() : '');
            LineNum replenLineNum = _replenWorkLine.RecId ? _replenWorkLine.LineNum : (WHSDeleteExactReplenLinkOnCancelWorkContext::canUseContext() ? WHSDeleteExactReplenLinkOnCancelWorkContext::instance().parmLineNum() : 0);

            while select forUpdate replenWorkLink
                where replenWorkLink.DemandWorkId    == _demandWorkLine.WorkId
                    && replenWorkLink.DemandLineNum   == _demandWorkLine.LineNum
                    && (!replenWorkId || replenWorkLink.ReplenWorkId == replenWorkId)
                    && (!replenLineNum || replenWorkLink.ReplenLineNum == replenLineNum)
            {
                Qty replenWorkLineQtyToAdjust = min(runningQty, replenWorkLink.InventQty);
                runningQty -= replenWorkLineQtyToAdjust;
                replenWorkLink.InventQty -= replenWorkLineQtyToAdjust;

                if (replenWorkLink.InventQty <= 0)
                {
                    replenWorkLink.delete();
                }
                else
                {
                    replenWorkLink.update();
                }

                if (runningQty <= 0)
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReplenWorkLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a replen/demand link record.
    /// </summary>
    /// <param name="_qty">
    /// The quantity from the demand work that is tied to the replenishment work.
    /// </param>
    /// <param name="_replenWorkId">
    /// The replenishment work header.
    /// </param>
    /// <param name="_replenLineNum">
    /// The replenishment line number.
    /// </param>
    /// <param name="_demandWorkId">
    /// The demand work header.
    /// </param>
    /// <param name="_demandLineNum">
    /// The demand line number.
    /// </param>
    public static void insertReplenWorkLink(
        Qty         _qty,
        WHSWorkId   _replenWorkId,
        LineNum     _replenLineNum,
        WHSWorkId   _demandWorkId,
        LineNum     _demandLineNum)
    {
        WHSReplenWorkLink replenWorkLinkLocal;

        replenWorkLinkLocal.InventQty        = _qty;
        replenWorkLinkLocal.ReplenWorkId     = _replenWorkId;
        replenWorkLinkLocal.ReplenLineNum    = _replenLineNum;
        replenWorkLinkLocal.DemandWorkId     = _demandWorkId;
        replenWorkLinkLocal.DemandLineNum    = _demandLineNum;
        replenWorkLinkLocal.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesReplenishmentHaveLockedReplenWorkLinkRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the replenishment work has replenishment links records that are currently locked.
    /// </summary>
    /// <param name="_replenWorkId">
    /// The <c>workId</c> of the replenishment work being evaluated.
    /// </param>
    /// <returns>
    /// true if there are some locked replenishment work links for the replenishment work; otherwise, false.
    /// </returns>
    public static boolean doesReplenishmentHaveLockedReplenWorkLinkRecords(WHSWorkId _replenWorkId)
    {
        WHSReplenWorkLink   replenWorkLinkAll;
        WHSReplenWorkLink   replenWorkLinkUnlocked;
        Counter             numOfUnlockRecords;

        ttsBegin;

        select count(RecId) from replenWorkLinkAll
            where replenWorkLinkAll.ReplenWorkId == _replenWorkId;

        replenWorkLinkUnlocked.readPast(true);

        while select pessimisticLock RecId from replenWorkLinkUnlocked
            where replenWorkLinkUnlocked.ReplenWorkId == _replenWorkId
        {
            numOfUnlockRecords++;
        }

        ttsCommit;

        return numOfUnlockRecords < replenWorkLinkAll.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>satisfyDemandWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Satisfies demand work line by a replenishment quantity promissed by current replenishment link.
    /// </summary>
    [Hookable(false)]
    internal void satisfyDemandWorkLine()
    {
        WHSWorkLine demandWorkLine = WHSWorkLine::find(this.DemandWorkId, this.DemandLineNum, true);

        InventDim fromDim = demandWorkLine.inventDimWithLocation();
        boolean isCWItem = PdsGlobal::pdsIsCWItem(demandWorkLine.ItemId);

        WHSWorkInventTrans  workInventTrans;

        if (WHSWorkInventTrans::exist(demandWorkLine.WorkId, demandWorkLine.LineNum, demandWorkLine.ItemId, demandWorkLine.InventTransId, fromDim.InventDimId))
        {
            workInventTrans = WHSWorkInventTrans::find(demandWorkLine.WorkId, demandWorkLine.LineNum, demandWorkLine.ItemId, demandWorkLine.InventTransId, fromDim.InventDimId, true);
            this.incrementReplenishmentQtyDemand(workInventTrans);
            
            if (isCWItem)
            {
                // Initial pick WITs should be for minimum weight.
                // Don't need to increment, we can just recalculate.
                workInventTrans.TransactionWeight = WhsInvent::defaultCatchWeightReserveQuantity(demandWorkLine.ItemId, workInventTrans.Qty);
                workInventTrans.RemainingTransactionWeight = workInventTrans.TransactionWeight;
            }
            workInventTrans.update();
        }
        else
        {
            workInventTrans.clear();
            workInventTrans.initFromWorkLine(demandWorkLine);
            workInventTrans.setReplenishmentQtyDemand(this.InventQty);
            workInventTrans.InventQtyRemain = workInventTrans.Qty;
            if (isCWItem)
            {
                // Initial pick WITs should be for minimum weight.
                workInventTrans.TransactionWeight = WhsInvent::defaultCatchWeightReserveQuantity(demandWorkLine.ItemId, workInventTrans.Qty);
                workInventTrans.RemainingTransactionWeight = workInventTrans.TransactionWeight;
            }
            workInventTrans.WorkHasReservation = NoYes::Yes;

            InventDim toInventDim;
            toInventDim.data(fromDim);
            toInventDim.wmsLocationId = '';
            toInventDim = InventDim::findOrCreate(toInventDim);
            workInventTrans.InventDimIdTo = toInventDim.InventDimId;
            workInventTrans.insert();
        }

        // Mark replenishment link as Closed.
        this.Status = WHSReplenWorkLinkStatus::Closed;
        this.update();

        // If the work line is marked as needing replenishment, but there are no more open replenishment work orders for this line, reset the flag.
        if (demandWorkLine.ReplenDemand == NoYes::Yes && !demandWorkLine.hasUnFinishedReplenWork())
        {
            demandWorkLine.ReplenDemand = NoYes::No;
            demandWorkLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementReplenishmentQtyDemand</Name>
				<Source><![CDATA[
    protected void incrementReplenishmentQtyDemand(WHSWorkInventTrans _workInventTrans)
    {
        _workInventTrans.Qty += this.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSWorkBeingSplitValidator::validateWorkTableIsNotBeingSplit(this.DemandWorkId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSWorkBeingSplitValidator::validateWorkTableIsNotBeingSplit(this.DemandWorkId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNewWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves all <c>WHSReplenWorkLink</c> records associated with a work line to a new work line.
    /// </summary>
    /// <param name="_origWorkId">
    ///    The Work ID the <c>WHSReplenWorkLink</c> records are currently associated with.
    /// </param>
    /// <param name="_origLineNum">
    ///    The line number the <c>WHSReplenWorkLink</c> records are currently associated with.
    /// </param>
    /// <param name="_newWorkId">
    ///    The Work ID the <c>WHSReplenWorkLink</c> records must be associated with.
    /// </param>
    /// <param name="_newLineNum">
    ///    The new line number the <c>WHSReplenWorkLink</c> records must be associated with.
    /// </param>
    internal static void moveToNewWorkLine(WHSWorkId  _origWorkId,
                                           LineNum    _origLineNum,
                                           WHSWorkId  _newWorkId,
                                           LineNum    _newLineNum)
    {
        if (!_origWorkId || !_newWorkId)
        {
            return;
        }

        WHSReplenWorkLink replenWorkLinkDemand;
        WHSReplenWorkLink replenWorkLinkReplen;

        ttsbegin;

        update_recordset replenWorkLinkDemand
            setting DemandWorkId  = _newWorkId,
                    DemandLineNum = _newLineNum
            where replenWorkLinkDemand.DemandWorkId   == _origWorkId
                && replenWorkLinkDemand.DemandLineNum == _origLineNum;
        
        update_recordset replenWorkLinkReplen
            setting ReplenWorkId  = _newWorkId,
                    ReplenLineNum = _newLineNum
            where replenWorkLinkReplen.ReplenWorkId   == _origWorkId
                && replenWorkLinkReplen.ReplenLineNum == _origLineNum;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4429</DeveloperDocumentation>
	<Label>@WAX3982</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ReplenWorkId</TitleField1>
	<TitleField2>DemandWorkId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ReplenWorkLineDemandWorkLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ReplenWorkLineDemandWorkLineIdx</PrimaryIndex>
	<ReplacementKey>ReplenWorkLineDemandWorkLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReplenWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplenLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DemandWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DemandLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReplenWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplenLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DemandWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DemandLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkBuildId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReplenWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DemandLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplenLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DemandWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkBuildId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DemandLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DemandWorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReplenLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplenWorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkBuildId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkBuildId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSReplenWorkLinkStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReplenWorkLineDemandWorkLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReplenWorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReplenLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DemandWorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DemandLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkBuildId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DemandWorkIdDemandLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DemandWorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DemandLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkBuildIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkBuildId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSWorkLineDemand</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DemandWorkLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DemandLineNum</Name>
					<Field>DemandLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DemandWorkId</Name>
					<Field>DemandWorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkLineReplenishment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReplenishmentWorkLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReplenWorkId</Name>
					<Field>ReplenWorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReplenLineNum</Name>
					<Field>ReplenLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>