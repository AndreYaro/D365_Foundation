<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDerivedFinHierarchyFilterResults</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerDerivedFinHierarchyFilterResults extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>LedgerDerivedFinHierarchyFilterResults</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerDerivedFinHierarchyFilterResults</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!LedgerDerivedFinHierarchyFilterResults::exist(_recId))
        {
            isExisting = checkFailed(strFmt(LedgerDerivedFinHierarchyFilterResults::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResultsForDerivedFinHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the records from the <c>LedgerDerivedFinHierarchyFilterResults</c> table that are associated with the specified derived financial hierarchy and the legal entity.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    /// The record ID of the <c>EcoResCategoryHierarchy</c> table record that is associated with a legal entity in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// The record ID of the <c>CompanyInfo</c> table record that is associated with a derived financial hierarchy in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table.
    /// </param>
    public static void deleteResultsForDerivedFinHierarchy(
        RecId _derivedFinHierarchyRecId,
        RecId _companyInfoRecId)
    {
        dataAreaId                              dataAreaId;
        EcoResCategory                          ecoResCategory;
        LedgerDerivedFinHierarchyFilterResults  ledgerDerivedFinHierarchyFilterResults;

        dataAreaId = CompanyInfo::findRecId(_companyInfoRecId).DataArea;

        changecompany(dataAreaId)
        {
            ttsBegin;
            delete_from ledgerDerivedFinHierarchyFilterResults
            exists join ecoResCategory
                where ecoResCategory.RecId == ledgerDerivedFinHierarchyFilterResults.EcoResCategory &&
                    ecoResCategory.CategoryHierarchy == _derivedFinHierarchyRecId;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResultsForDerivedFinHierarchyNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the records from the <c>LedgerDerivedFinHierarchyFilterResults</c> table that are associated with the specified derived financial hierarchy from all the legal entity.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    /// The record ID of the <c>EcoResCategoryHierarchy</c> table record that is associated with a legal entity in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table.
    /// </param>
    public static void deleteResultsForDerivedFinHierarchyNode(RecId _derivedFinHierarchyRecId)
    {
        LedgerDerivedFinHierarchyLegalEntities  ledgerDerivedFinHierarchyLegalEntities;
        ledgerDerivedFinHierarchyLegalEntities = LedgerDerivedFinHierarchyLegalEntities::findByDerivedFinHierarchy(_derivedFinHierarchyRecId);

        while (ledgerDerivedFinHierarchyLegalEntities)
        {
            LedgerDerivedFinHierarchyFilterResults::deleteResultsForDerivedFinHierarchy(_derivedFinHierarchyRecId, ledgerDerivedFinHierarchyLegalEntities.CompanyInfo);
            next ledgerDerivedFinHierarchyLegalEntities;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerDerivedFinHierarchyFilterResults</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

        select firstOnly
            RecId
        from
            ledgerDerivedFinHierarchyFilterResults
        where
            ledgerDerivedFinHierarchyFilterResults.RecId == _recId;

        return ledgerDerivedFinHierarchyFilterResults != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerDerivedFinHierarchyFilterResults</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerDerivedFinHierarchyFilterResults find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

        ledgerDerivedFinHierarchyFilterResults.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerDerivedFinHierarchyFilterResults.concurrencyModel(_concurrencyModel);
        }

        select firstOnly
                ledgerDerivedFinHierarchyFilterResults
            where
                ledgerDerivedFinHierarchyFilterResults.RecId == _recId;

        return ledgerDerivedFinHierarchyFilterResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerDerivedFinHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table.
    /// </summary>
    /// <param name="_ledgerDerivedFinHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerDerivedFinHierarchyFilterResults findByLedgerDerivedFinHierarchy(RecId _ledgerDerivedFinHierarchyId)
    {
        LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

        select firstOnly
                ledgerDerivedFinHierarchyFilterResults
            where
                ledgerDerivedFinHierarchyFilterResults.EcoResCategory == _ledgerDerivedFinHierarchyId;

        return ledgerDerivedFinHierarchyFilterResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFilterResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table specified by derived financial hierarchy ID and dimension attribute value combination ID.
    /// </summary>
    /// <param name="_ledgerDerivedFinHierarchyId">
    /// The name of the <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_dimensionAttributeValueCombinationId">
    /// The record ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerDerivedFinHierarchyFilterResults</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerDerivedFinHierarchyFilterResults findFilterResult(
        RecId _ledgerDerivedFinHierarchyId,
        RecId _dimensionAttributeValueCombinationId)
    {
        LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

        select firstOnly
                ledgerDerivedFinHierarchyFilterResults
            where
                ledgerDerivedFinHierarchyFilterResults.EcoResCategory == _ledgerDerivedFinHierarchyId &&
                ledgerDerivedFinHierarchyFilterResults.DimensionAttributeValueCombination == _dimensionAttributeValueCombinationId;

        return ledgerDerivedFinHierarchyFilterResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>LedgerDerivedFinHierarchyMapping</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS845</DeveloperDocumentation>
	<FormRef>LedgerDerivedFinHierarchyFilterResults</FormRef>
	<Label>@SPS820</Label>
	<CacheLookup>Found</CacheLookup>
	<Modules>Ledger</Modules>
	<ReplacementKey>CategoryDimensionIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EcoResCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeValueCombination</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionAttributeValueCombination</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionAttributeValueCombination</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CategoryDimensionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EcoResCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionAttributeValueCombination</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_LedgerDerivedFinHierarchyMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionAttributeValueCombination</Name>
					<Field>DimensionAttributeValueCombination</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_LedgerDerivedFinHierarchyMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResCategory</Name>
					<Field>EcoResCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>