<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransReportingCurrencyAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetTransReportingCurrencyAmounts extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertRecordsFromAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>AssetTransReportingCurrencyAmounts</c> table with values from the <c>AssetTrans</c> table.
    /// </summary>
    /// <param name = "_getParameters">
    /// Container that has the boolean value to delete all records before populating the <c>FixedAssetTransReportingCurrencyAmountsTable</c> table and selected reporting exchange rate type recid.
    /// </param> 
    public static void insertRecordsFromAssetTrans(container _getParameters)
    {                               
        AssetTransReportingCurrencyAmounts assetTransReportingCurrencyAmounts;
        container paramValues = conPeek(_getParameters, 1);
        NoYes deleteRecords = conPeek(paramValues, 1);
        ExchangeRateTypeId selectedReportingExchRateType = conPeek(paramValues, 2);

        if (deleteRecords)
        {            
            ttsbegin;
            delete_from assetTransReportingCurrencyAmounts;
            ttscommit;
        }

        select firstonly RecId from assetTransReportingCurrencyAmounts;

        if (assetTransReportingCurrencyAmounts == null)
        {                                                                                                                                                                                                                                                                       
            ExchangeRateHelper     exchangeRateHelper;
            CurrencyExchangeHelper currencyExchangeHelper;            

            RecordInsertList insertRecordList = new RecordInsertList(tableNum(AssetTransReportingCurrencyAmounts));
            boolean setReportingAmounts = Ledger::reportingCurrency() != Ledger::accountingCurrency();

            if (setReportingAmounts)
            {
                exchangeRateHelper = ExchangeRateHelper::construct();
                exchangeRateHelper.parmLedgerRecId(Ledger::current());
                exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());

                currencyExchangeHelper = CurrencyExchangeHelper::newLedger(Ledger::current());

                if (selectedReportingExchRateType)
                {
                    exchangeRateHelper.parmExchangeRateTypeRecId(selectedReportingExchRateType);
                    currencyExchangeHelper.parmExchangeRateTypeRecId(selectedReportingExchRateType);
                }
                else
                {
                    exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                }                               
            }

            AssetTrans  assetTrans;

            while select BookId, 
                         TransDate, 
                         TransType, 
                         AmountMST,                        
                         CurrencyCode, 
                         AssetId, 
                         AmountCur from assetTrans
                    where assetTrans.ReportingCurrencyAmount == 0
                       || assetTrans.IsReportingCurrencyAmountUpdated == true
            {               
                assetTransReportingCurrencyAmounts.clear();
                
                assetTransReportingCurrencyAmounts.BookId     = assetTrans.BookId;
                assetTransReportingCurrencyAmounts.TransDate  = assetTrans.TransDate;
                assetTransReportingCurrencyAmounts.TransType  = assetTrans.TransType;
                assetTransReportingCurrencyAmounts.AmountMST  = assetTrans.AmountMST;
                assetTransReportingCurrencyAmounts.AssetTrans = assetTrans.RecId;
                assetTransReportingCurrencyAmounts.AssetId    = assetTrans.AssetId;
                assetTransReportingCurrencyAmounts.AmountCur  = assetTrans.AmountCur;
                assetTransReportingCurrencyAmounts.AmountReportingCurrency = assetTrans.ReportingCurrencyAmount;
                assetTransReportingCurrencyAmounts.CurrencyCode = assetTrans.CurrencyCode;
                                
                if (setReportingAmounts)
                {
                    AssetAcquisitionDate assetAcquisitionDate = AssetBook::find(assetTrans.AssetId, assetTrans.BookId).AcquisitionDate;

                    exchangeRateHelper.parmFromCurrency(assetTrans.CurrencyCode);
                    exchangeRateHelper.parmExchangeDate(assetAcquisitionDate);
                    currencyExchangeHelper.parmExchangeDate(assetAcquisitionDate);                    

                    assetTransReportingCurrencyAmounts.ReportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();                   
                    assetTransReportingCurrencyAmounts.AmountReportingCurrency = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(assetTrans.CurrencyCode,
                                                                                                                                                        assetTrans.AmountCur);               
                }
                else
                {                                                 
                    assetTransReportingCurrencyAmounts.AmountReportingCurrency = assetTrans.AmountMST;
                    assetTransReportingCurrencyAmounts.ReportingCurrencyExchRate = 100.0;
                }

                insertRecordList.add(assetTransReportingCurrencyAmounts);
            }  
            ttsbegin;                      
            insertRecordList.insertDatabase();
            ttscommit;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {               
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AssetTransReportingCurrencyAmounts, ReportingCurrencyExchRate):
                                  
                AssetAcquisitionDate assetAcquisitionDate = AssetBook::find(this.AssetId, this.BookId).AcquisitionDate;

                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), 
                                                                                assetAcquisitionDate);                                                                                                
                currencyExchangeHelper.parmReportingExchangeRate1(this.ReportingCurrencyExchRate);

                this.AmountReportingCurrency = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(this.CurrencyCode,
                                                                                                                    this.AmountCur);
                break;

            case fieldNum(AssetTransReportingCurrencyAmounts, AmountReportingCurrency):

                // When the field AmountReportingCurrency is modified setting the exchange rate 0.0.
                this.ReportingCurrencyExchRate = 0.0;

                break;
            
            default:
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_Table_DevDocumentation_AssetTransReportingCurrencyAmounts</DeveloperDocumentation>
	<Label>@FixedAssets:FA_TableTitle_AssetTransactionReportingCurrencyAmounts</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>BookId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FixedAssets</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountReportingCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetTrans</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>AssetTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>