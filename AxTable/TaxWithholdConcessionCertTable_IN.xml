<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdConcessionCertTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdConcessionCertTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the date interval.
    /// </summary>
    /// <returns>
    /// Returns false if any validation fails.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDateInterval()
    {
        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS6631");
        }

        if (TaxWithholdConcessionCertTable_IN::existDateInterval(this.FromDate,
                                                                 this.ToDate,
                                                                 this.TaxWithholdConcessionTable,
                                                                 this.RecId,
                                                                 this.VendAccount,
                                                                 this.CustAccount))
        {
            return checkFailed("@SYS22089");
        }

        if (this.FromDate && TaxWithholdConcessionCertTable_IN::existDataWithoutDate(this.TaxWithholdConcessionTable,
                                                                                     this.VendAccount,
                                                                                     this.CustAccount,
                                                                                     this.RecId))
        {
            return checkFailed("@SYS94867");
        }

        if (TaxWithholdConcessionCertTable_IN::existDateInInterval(this.FromDate,
                                                                   this.ToDate,
                                                                   this.TaxWithholdConcessionTable,
                                                                   this.RecId,
                                                                   this.VendAccount,
                                                                   this.CustAccount))
        {
            return checkFailed("@SYS94867");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = ret && TaxWithholdParameters_IN::checkParameter(TaxWithholdConcessionTable_IN::find(this.TaxWithholdConcessionTable).TaxType);
            ret = ret && this.checkDateInterval();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionCertTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_refRecId">
    /// RecId of TaxWithholdConcessionTable_IN used to find the record.
    /// </param>
    /// <param name="_fromDate">
    /// From date to check the records in given range.
    /// </param>
    /// <param name="_toDate">
    /// To date to check the records in given range.
    /// </param>
    /// <param name="_vendAccount">
    /// Vendor account used to find the record.
    /// </param>
    /// <param name="_custAccount">
    /// Customer account used to find the record.
    /// </param>
    /// <returns>
    ///  Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId           _refRecId,
                                date               _fromDate,
                                date               _toDate,
                                VendAccount        _vendAccount,
                                CustAccount        _custAccount)
    {
        return (select firstonly RecId from taxWithholdConcessionCertTable_IN
                    where taxWithholdConcessionCertTable_IN.TaxWithholdConcessionTable  == _refRecId
                       && taxWithholdConcessionCertTable_IN.FromDate                    == _fromDate
                       && taxWithholdConcessionCertTable_IN.ToDate                      == _toDate
                       && taxWithholdConcessionCertTable_IN.VendAccount                 == _vendAccount
                       && taxWithholdConcessionCertTable_IN.CustAccount                 == _custAccount).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionCertTable_IN</c> record exists or not for specified parameters.
    /// </summary>
    /// <param name="_refRecId">
    /// RecId of TaxWithholdConcessionTable_IN used to find the record.
    /// </param>
    /// <param name="_vendAccount">
    /// Vendor account used to find the record.
    /// </param>
    /// <param name="_custAccount">
    /// Customer account used to find the record.
    /// </param>
    /// <param name="_recId">
    /// RecId used to find the record.
    /// </param>
    /// <returns>
    /// True if record exists otherwise false.
    /// </returns>
    private static boolean existDataWithoutDate(RefRecId         _refRecId,
                                                       VendAccount      _vendAccount,
                                                       CustAccount      _custAccount,
                                                       recId            _recId)
    {
        return (select firstonly RecId from taxWithholdConcessionCertTable_IN
                    where taxWithholdConcessionCertTable_IN.TaxWithholdConcessionTable  == _refRecId
                       && taxWithholdConcessionCertTable_IN.VendAccount                 == _vendAccount
                       && taxWithholdConcessionCertTable_IN.CustAccount                 == _custAccount
                       && taxWithholdConcessionCertTable_IN.RecId                       != _recId
                       && !taxWithholdConcessionCertTable_IN.FromDate
                       && !taxWithholdConcessionCertTable_IN.ToDate).RecId              != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionCertTable_IN</c> record exists or not for specified parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// From Date used  to check  the record.
    /// </param>
    /// <param name="_toDate">
    /// To Date used to check  the record.
    /// </param>
    /// <param name="_refRecId">
    /// RecId of TaxWithholdConcessionTable_IN used to check  the record.
    /// </param>
    /// <param name="_recId">
    /// RecId used to check  the record.
    /// </param>
    /// <param name="_vendAccount">
    /// Vendor account used to check the record.
    /// </param>
    /// <param name="_custAccount">
    /// Customer account used to check the record.
    /// </param>
    /// <returns>
    /// True if record exists otherwise false.
    /// </returns>
    private static boolean existDateInInterval(TransDate         _fromDate,
                                                      TransDate         _toDate,
                                                      RefRecId          _refRecId,
                                                      RecId             _recId,
                                                      VendAccount       _vendAccount,
                                                      CustAccount       _custAccount)
    {
        TaxWithholdConcessionCertTable_IN   taxWithholdConcessionCertificateTable;
        boolean                             ret = false;

        if (_refRecId)
        {
            while select FromDate, ToDate from taxWithholdConcessionCertificateTable
                where taxWithholdConcessionCertificateTable.TaxWithholdConcessionTable == _refRecId
                   && taxWithholdConcessionCertificateTable.VendAccount                == _vendAccount
                   && taxWithholdConcessionCertificateTable.CustAccount                == _custAccount
                   && taxWithholdConcessionCertificateTable.RecId                      != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }

                if (_fromDate  >= taxWithholdConcessionCertificateTable.FromDate  &&
                    _fromDate  <= taxWithholdConcessionCertificateTable.ToDate    ||
                    _toDate    >= taxWithholdConcessionCertificateTable.FromDate  &&
                    _toDate    <= taxWithholdConcessionCertificateTable.ToDate)
                {
                    ret = true;
                }

                if (taxWithholdConcessionCertificateTable.FromDate >= _fromDate    &&
                    taxWithholdConcessionCertificateTable.FromDate <= _toDate      ||
                    taxWithholdConcessionCertificateTable.ToDate   >= _fromDate    &&
                    taxWithholdConcessionCertificateTable.ToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionCertTable_IN</c> record exists or not for specified parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// From Date used to find the record.
    /// </param>
    /// <param name="_toDate">
    /// To Date used to find the record.
    /// </param>
    /// <param name="_refRecId">
    /// RecId of TaxWithholdConcessionTable_IN used to find the record.
    /// </param>
    /// <param name="_recId">
    /// RecId used to find the record.
    /// </param>
    /// <param name="_vendAccount">
    /// Vendor account used to find the record.
    /// </param>
    /// <param name="_custAccount">
    /// Customer account used to find the record.
    /// </param>
    /// <returns>
    /// True if record exists otherwise false.
    /// </returns>
    private static boolean existDateInterval(TransDate       _fromDate,
                                                    TransDate       _toDate,
                                                    RefRecId        _refRecId,
                                                    RecId           _recId,
                                                    VendAccount     _vendAccount,
                                                    CustAccount     _custAccount)
    {
        return (select firstonly RecId from taxWithholdConcessionCertTable_IN
                    where taxWithholdConcessionCertTable_IN.FromDate                    == _fromDate
                       && taxWithholdConcessionCertTable_IN.ToDate                      == _toDate
                       && taxWithholdConcessionCertTable_IN.TaxWithholdConcessionTable  == _refRecId
                       && taxWithholdConcessionCertTable_IN.VendAccount                 == _vendAccount
                       && taxWithholdConcessionCertTable_IN.CustAccount                 == _custAccount
                       && taxWithholdConcessionCertTable_IN.RecId                       != _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdConcessionCertTable_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdConcessionCertTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdConcessionCertTable_IN find(RefRecId            _recId,
                                                         boolean             _forupdate        = false,
                                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdConcessionCertTable_IN   taxWithholdConcessionCertTable;

        taxWithholdConcessionCertTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdConcessionCertTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdConcessionCertTable
            where taxWithholdConcessionCertTable.RecId == _recId;

        return taxWithholdConcessionCertTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdConcessionCertTable_IN</c> table for the specified parameters
    /// </summary>
    /// <param name="_refRecId">
    /// RecId of TaxWithholdConcessionTable_IN used to find the record.
    /// </param>
    /// <param name="_fromDate">
    /// From date used to find the record.
    /// </param>
    /// <param name="_toDate">
    /// To date used to find the record.
    /// </param>
    /// <param name="_vendAccount">
    /// Vendor Account used to find the record.
    /// </param>
    /// <param name="_custAccount">
    /// Customer account used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdConcessionCertTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TaxWithholdConcessionCertTable_IN findByCustVendAccount(RefRecId          _refRecId,
                                                                          date              _fromDate,
                                                                          date              _toDate,
                                                                          VendAccount       _vendAccount = '',
                                                                          CustAccount       _custAccount = '',
                                                                          boolean           _forUpdate   = false)
    {
        TaxWithholdConcessionCertTable_IN   taxWithholdConcessionCertificateTable;

        if (_refRecId)
        {
            if (_forUpdate)
            {
                taxWithholdConcessionCertificateTable.selectForUpdate(_forUpdate);
            }
            select firstonly taxWithholdConcessionCertificateTable
                where taxWithholdConcessionCertificateTable.TaxWithholdConcessionTable  == _refRecId
                   && taxWithholdConcessionCertificateTable.FromDate                    == _fromDate
                   && taxWithholdConcessionCertificateTable.ToDate                      == _toDate
                   && taxWithholdConcessionCertificateTable.VendAccount                 == _vendAccount
                   && taxWithholdConcessionCertificateTable.CustAccount                 == _custAccount;
        }
        return taxWithholdConcessionCertificateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LineID = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the field of Certificate Number, if the Section Code is 197, it must start with G or H and follow with 9 numbers
    /// If Section Code is 197A, it must be alpha or numbers combined with 10 lengths.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///     The field to be validated.
    /// </param>
    /// <returns>
    ///     Returns true when all fields are correct.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        str                  head;
        str                  tail;
        str                  alphaNumeric;
        str                  isAlphabets;
        str                  isNumbers;
        CertificateNumber_IN certificate;
        boolean ret;
        TaxWithholdConcessionTable_IN   taxWithholdConcessionTable;

        #define.10(10)
        #define.9(9)
        #define.G('G')
        #define.H('H')
        #define.alphabets('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        #define.numbers('0123456789')

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            taxWithholdConcessionTable = TaxWithholdConcessionTable_IN::find(this.TaxWithholdConcessionTable);

            switch(_fieldIdToCheck)
            {
                case fieldnum (TaxWithholdConcessionCertTable_IN, CertificateNumber):
                    certificate = this.CertificateNumber;

                    if (taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TDS
                    && taxWithholdConcessionTable.Section == '197A')
                    {
                        if(strLen(certificate) != 10 || !certificate)
                        {
                            ret = ret && checkFailed("@TaxLocalization:ValidateTheFirstDigitOfCertificate");
                            // not meet the condition, we return in case cause below code error.
                            return ret;
                        }

                        head = subStr(certificate, 0 ,1);
                        tail = subStr(certificate, 2, 9);

                        if (!((strLen(strKeep(#G, head)) == 1) || (strLen(strKeep(#H, head)) == 1)))
                        {
                            ret = checkFailed("@TaxLocalization:ValidateTheFirstDigitOfCertificate");
                            return ret;
                        }

                        isNumbers    = strkeep(#numbers, tail);
                        if(strKeep(subStr(this.CertificateNumber, 2, 9), #numbers) != subStr(this.CertificateNumber, 2, 9))
                        {
                            ret = checkFailed("@TaxLocalization:ValidateTheFirstDigitOfCertificate");
                        }
                    }

                    if ((taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TDS
                         && taxWithholdConcessionTable.Section == '197')
                         || (taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TCS
                         && taxWithholdConcessionTable.Section == "@GLS6380"))
                    {

                        alphaNumeric = stralpha(this.CertificateNumber);
                        isAlphabets  = strkeep(#alphabets, alphaNumeric);
                        isNumbers    = strkeep(#numbers, alphaNumeric);

                        if (!isAlphabets || !isNumbers || strlen(alphaNumeric) != 10)
                        {
                            ret = ret && checkFailed("@TaxLocalization:ValidateCertificateField");
                        }
                    }
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63816</DeveloperDocumentation>
	<FormRef>TaxWithholdConcessionTable_IN</FormRef>
	<Label>@GLS5484</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CertificateNumber</TitleField1>
	<TitleField2>TaxWithholdConcessionTable</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Certificate</Name>
			<Label>@SYS32306</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
			<Label>@SYS32306</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS24050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdConcessionTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS35904</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdConcessionTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdConcessionTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdConcessionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdConcessionTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdConcessionTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdConcessionTable_IN_TaxWithholdConcessionCertTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdConcessionTable</Name>
					<Field>TaxWithholdConcessionTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>