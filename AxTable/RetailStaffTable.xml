<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStaffTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStaffTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes the field <c>StoreId</c> with the value in the field <c>LocalStoreId</c> of the parameter table <c>RetailSharedParameters</c>.
    /// The field <c>Password</c> is initialized with the masked password.
    /// </summary>
    public void initValue()
    {
        super();

        this.continueOnTSErrors = NoYes::Yes;
        this.Password = RetailStaffTable::maskedPasswordValue();
        this.ChangePassword = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailStaffTable</c> table.
    /// If the current record password is not equal to the masked password then the field <c>PasswordData</c> is updated with the encoded text.
    /// </summary>
    public void insert()
    {
        str password = this.Password;
        this.Password = RetailStaffTable::maskedPasswordValue(); 

        if (password != this.Password)
        {
            this.PasswordHashAlgorithm = RetailSharedParameters::find().StaffPasswordHash; // Set to the configured algorithm

            if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)))
            {
                // Compute the hash for N-1 2012 clients
                this.LegacyPasswordData = RetailData::HashLegacy2012(password, this.PasswordHashAlgorithm, this.StaffId, RetailStaffTable::localContext());
            }
            
            this.passwordSalt = RetailData::GenerateRandomSalt();
            this.passwordData = RetailData::HashUnified(password, this.PasswordHashAlgorithm, this.staffId, this.passwordSalt, this.LegacyLocalContext, this.LegacyRegKeyData2Value);
            this.PasswordLastChangedDateTime = DateTimeUtil::utcNow();

            if (this.PasswordLastUpdatedOperation == RetailAuthenticationOperation::CreateToken)
            {
                this.passwordLastUpdatedOperation = RetailAuthenticationOperation::ResetPassword;
            }

            this.insertToPasswordHistoryTable();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfVoidedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of transactions that are voided.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date of a transaction date in the <c>RetailTransactionTable</c> table.
    /// </param>
    /// <param name="_fromTime">
    /// The start time of a transaction time in the <c>RetailTransactionTable</c> table.
    /// </param>
    /// <param name="_toDate">
    /// The end date of a transaction date in the <c>RetailTransactionTable</c> table.
    /// </param>
    /// <param name="_toTime">
    /// The end time of a transaction time in the <c>RetailTransactionTable</c> table.
    /// </param>
    /// <returns>
    /// The number of transactions that are voided.
    /// </returns>
    public int numberOfVoidedTransactions(FromDate _fromDate, RetailFromTime _fromTime, ToDate _toDate, RetailToTime _toTime)
    {
        RetailTransactionTable transactionTable;
        int                 ret;

        select count(RecId) from transactionTable
            where  transactionTable.Type == RetailTransactionType::Sales
               && (transactionTable.TransDate >= _fromDate || !_fromDate)
               && (transactionTable.TransDate <= _toDate || !_toDate)
               && (transactionTable.TransTime >= _fromTime || !_fromTime)
               && (transactionTable.TransTime <= _toTime || !_toTime)
               && transactionTable.EntryStatus == RetailEntryStatus::Voided;

        ret = any2int(transactionTable.RecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when a record is loaded.
    /// </summary>
    public void postLoad()
    {
        super();

        this.Password = RetailStaffTable::maskedPasswordValue();

        if (!this.tmpExternalIdentityAlias && this.ExternalIdentityAlias)
        {
            this.tmpExternalIdentityAlias = this.ExternalIdentityAlias;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFirstName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>FirstName</c> field of the <c>RetailStaffTable</c> table.
    /// </summary>
    private void setFirstName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LastName</c> field of the <c>RetailStaffTable</c> table.
    /// </summary>
    private void setLastName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MiddleName</c> field of the <c>RetailStaffTable</c> table.
    /// </summary>
    private void setMiddleName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of a store ID.
    /// </summary>
    /// <returns>
    /// The name of the store ID.
    /// </returns>
    display RetailStoreName storeName()
    {
        return ''; // Deprecated
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>RetailStaffTable</c> table. If the current record password is not equal to the masked password then the field <c>PasswordData</c>
    /// is initialized with the encoded text.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// RetailData::Compress method encodes the data for security purposes.
    /// </remarks>
    public void update()
    {
        str password;
        
        password = this.Password;
        this.Password = RetailStaffTable::maskedPasswordValue();

        if (password != this.Password)
        {
            this.PasswordHashAlgorithm = RetailSharedParameters::find(false).StaffPasswordHash; // Change to the configured algorithm
 
            if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)))
            {   // Compute the hash for N-1 2012 clients
                this.LegacyPasswordData = RetailData::HashLegacy2012(password, this.PasswordHashAlgorithm, this.StaffId, RetailStaffTable::localContext());
            }
            
            this.LegacyLocalContext     = ''; // Reset value so password reverts to original behavior. 
            this.LegacyRegKeyData2Value = ''; // Reset value so password reverts to original behavior.
            this.passwordSalt = RetailData::GenerateRandomSalt();

            this.PasswordData = RetailData::HashUnified(password, this.PasswordHashAlgorithm, this.StaffId, this.passwordSalt, this.LegacyLocalContext, this.LegacyRegKeyData2Value);
            this.PasswordLastChangedDateTime = DateTimeUtil::utcNow();

            if (this.PasswordLastUpdatedOperation == RetailAuthenticationOperation::CreateToken)
            {
                this.passwordLastUpdatedOperation = RetailAuthenticationOperation::ResetPassword;
            }

            this.insertToPasswordHistoryTable();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field with the specified identifier in <c>RetailStaffTable</c> table.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The identifier of the field to be validated.
    /// </param>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret=true;
        container passwordValidationResult;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldNum(RetailStaffTable, Password)):
                passwordValidationResult = RetailStaffTable::validatePasswordComplexity(this.Password);

                if (!conPeek(passwordValidationResult, 1))
                {
                    ret = checkFailed("@SYS4006632" + "\n" + conPeek(passwordValidationResult, 2));
                    break;
                }

                passwordValidationResult = RetailStaffTable::validatePasswordHistory(this.staffId, this.password);

                if (!conPeek(passwordValidationResult, 1))
                {
                    ret = checkFailed("@SYS4006632" + "\n" + conPeek(passwordValidationResult, 2));
                }

                break;
            default:
                ret=true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePasswordComplexity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the password meets the complexity requirements defined.
    /// </summary>
    /// <param name="_password">
    /// The password to be validated.
    /// </param>
    public static container validatePasswordComplexity(str _password)
    {
        boolean ret=true;
        boolean isNumeric = true;
        boolean isAlphabetic = true;
        boolean isSpecialChar = true;
        str returnError = "";
        RetailParameters retailParameters = RetailParameters::find();

        if (retailParameters.MinimumPasswordLength > 0)
        {
            if (strLen(_password) < retailParameters.MinimumPasswordLength)
            {
                ret = false;
                returnError = strFmt("@SYS4006636", int2str(retailParameters.MinimumPasswordLength)) + ".\n";
            }
        }

        if (retailParameters.RequireNumericChar)
        {
            isNumeric = retailParameters.validatePasswordStrengthbyType(_password,0);
        }

        if (retailParameters.RequireUppercase)
        {
            isAlphabetic  = retailParameters.validatePasswordStrengthbyType(_password,1);
        }

        if (retailParameters.RequireSpecialChar)
        {
            isSpecialChar = retailParameters.validatePasswordStrengthbyType(_password,2);
        }

        if (!isNumeric || !isAlphabetic || !isSpecialChar)
        {
            ret = false;
            if (!isNumeric)
            {
                returnError += "@SYS4006633" + ".\n";
            }
            if (!isAlphabetic)
            {
                returnError += "@SYS4006634" + ".\n";
            }
            if (!isSpecialChar)
            {
                returnError += "@SYS4006635" + ".\n";
            }
        }

        return [ret, returnError];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePasswordHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the password meets the history requirements defined.
    /// </summary>
    /// <param name="_staffId">
    /// The staff Id.
    /// </param>
    /// <param name="_password">
    /// The password to be validated.
    /// </param>
    public static container validatePasswordHistory(str _staffId, str _password)
    {
        container ret = [true, ""];
        int numberOfRecordsProcessed = 0;
        RetailPasswordHistoryTable passwordHistoryTable;
        RetailParameters retailParameters = RetailParameters::find();

        if (retailParameters.NumberOfPasswordsRemembered > 0)
        {
            while select StaffId, PasswordData, PasswordSalt, PasswordHashAlgorithm from passwordHistoryTable
                order by CreatedDateTime desc, RecId desc
                where passwordHistoryTable.StaffId == _staffId
            {
                if (numberOfRecordsProcessed >= retailParameters.NumberOfPasswordsRemembered)
                {
                    break;
                }

                if (RetailData::HashData2(_password, passwordHistoryTable.PasswordHashAlgorithm, passwordHistoryTable.StaffId, passwordHistoryTable.PasswordSalt) == passwordHistoryTable.PasswordData)
                {
                    ret = [false, "@Retail:PasswordHistoryRequirementsNotMetError"];
                    return ret;
                }

                numberOfRecordsProcessed++;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>NameOnReceipt</c> field if it is blank.
    /// </summary>
    /// <param name="_lastName">
    /// The string value initialized to the <c>NameOnReceipt</c> field.
    /// </param>
    public void validateLastName(RetailLastName _lastName = "")
    {
        if (this.NameOnReceipt == "")
        {
            if (_lastName == "")
            {
                this.NameOnReceipt = "";
            }
            else
            {
                this.NameOnReceipt = subStr(_lastName,1,15);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the first, middle and last names to the fields of the <c>RetailStaffTable</c> table.
    /// </summary>
    public void validateName()
    {
        this.setFirstName();
        this.setMiddleName();
        this.setLastName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePermissionGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the permission group.
    /// </summary>
    /// <returns>
    /// false if the box validation selected is the <c>DialogButton::No</c> enumeration value; otherwise
    /// true.
    /// </returns>
    boolean validatePermissionGroupId()
    {
        boolean ret = true;
        #Retail

        if (Box::yesNo("@RET4285" + #CharNewLine
                     + "@RET4286",DialogButton::Yes ,"@RET3951") == DialogButton::No)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RetailStaffTable</c> table exists.
    /// </summary>
    /// <param name="_staffId">
    /// The staff ID of the staff field to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RetailStaffId _staffId)
    {
        return _staffId && (select firstonly RecId from retailStaffTable
                                    index hint staffIdx
                                    where retailStaffTable.StaffId == _staffId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailStaffTable</c> table.
    /// </summary>
    /// <param name="_staffId">
    /// The staff ID of the staff record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStaffTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStaffTable find(RetailStaffId _staffId, boolean _forUpdate = false)
    {
        RetailStaffTable   staffTable;

        if (_staffId)
        {
            staffTable.selectForUpdate(_forUpdate);

            select firstonly staffTable
                index hint staffIdx
                where staffTable.StaffId == _staffId;
        }

        return staffTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAxaptaUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailStaffTable</c> table.
    /// </summary>
    /// <param name="_userId">
    /// The user ID of the personal number in the <c>HCMWorker</c> table of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStaffTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStaffTable findAxaptaUser(UserId _userId, boolean _forUpdate = false)
    {
        RetailStaffTable   staffTable;
        HcmWorker          hcmWorker;

        if (_userId)
        {
            select firstonly hcmWorker
            where hcmWorker.PersonnelNumber == _userId;

            if (hcmWorker.PersonnelNumber)
            {
                staffTable.selectForUpdate(_forUpdate);

                select firstonly staffTable
                    where staffTable.StaffId == hcmWorker.PersonnelNumber;
            }
        }

        return staffTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByExternalIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailStaffTable</c> table.
    /// </summary>
    /// <param name="_externalIdentityId">
    /// The External ID of the staff record to find.
    /// </param>
    /// <param name="_externalIdentitySubId">
    /// The External Sub-ID of the staff record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStaffTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStaffTable findByExternalIdentity(RetailExternalIdentityId _externalIdentityId, RetailExternalIdentityId _externalIdentitySubId, boolean _forUpdate = false)
    {
        RetailStaffTable   staffTable;

        // If at least one of the id fields was non-empty, then peform the look-up.
        if (_externalIdentityId || _externalIdentitySubId)
        {
            staffTable.selectForUpdate(_forUpdate);

            select firstonly staffTable
                where staffTable.ExternalIdentityId == _externalIdentityId && staffTable.ExternalIdentitySubId == _externalIdentitySubId;
        }

        return staffTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>localContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a series of string value.  
    /// </summary>
    /// <returns>
    /// The string value.
    /// </returns>
    /// <remarks>
    /// In AX2012 DataProtection API this is actually the "context" which should not be confused with the "localContext."
    /// </remarks>
    public static str localContext()
    {
        return 'F3252730538F430c98ED738E60C16A3DEB9919639E8D43318A018EC407815D3A';
    }

]]></Source>
			</Method>
			<Method>
				<Name>maskedPasswordValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the masked password.
    /// </summary>
    /// <returns>
    /// The masked password.
    /// </returns>
    private static str maskedPasswordValue()
    {
        // part of a GUID, hopefully that is no one's password!
        return '0758441cBD8C3CE1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateExternalIdentity();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExternalIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the external identity fields.
    /// </summary>
    /// <returns>True if external identity fields are valid, false otherwise.</returns>
    public boolean validateExternalIdentity()
    {
        boolean ret = true;
        RetailStaffTable duplicateStaff;

        // If external identity values are set...
        if (this.ExternalIdentityId && this.ExternalIdentitySubId)
        {
            // Try to find a duplicate on another RetailStaff record.
            select firstonly RecId, staffId from duplicateStaff where
                duplicateStaff.ExternalIdentityId == this.ExternalIdentityId
                && duplicateStaff.ExternalIdentitySubId == this.ExternalIdentitySubId
                && duplicateStaff.RecId != this.RecId;

            // If we found a match, warn that the external identity is already in use.
            if (duplicateStaff)
            {
                //"This worker's External Identity (personnel number %1) is already in use by another worker (personnel number %2)."
                ret = checkFailed(strFmt("@Retail:RetailStaffTableValidateExternalIdentityWarning", this.staffId, duplicateStaff.staffId));
            }
        }

        //validate External Identity permissions, but do not enforce it by returning the result.
        this.validateExternalIdentityPermissions();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExternalIdentityPermissions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether or not external identity is required based on the worker's assigned permissions.
    /// </summary>
    /// <returns>True if the external identity is valid for the current worker's permissions, false otherwise.</returns>
    public boolean validateExternalIdentityPermissions()
    {
        boolean ret = true;
        HcmWorker worker;
        HcmPositionWorkerAssignment assignment;
        RetailPositionPosPermission permission;

        // Get the worker.
        worker = HcmWorker::findByPersonnelNumber(this.staffId);

        if (worker)
        {
            // Get assignment for the worker.
            assignment = HcmWorkerHelper::getWorkerPrimaryPositionAssignment(worker.RecId);

            if (assignment)
            {
                // Get permissions for the assignment's position.
                permission = RetailPositionPosPermission::find(assignment.Position);

                // If the worker has Manage Device permission but is missing External Identity, throw warning.
                if (permission && permission.manageDevice && !(this.ExternalIdentityId || this.ExternalIdentitySubId))
                {
                    //"Worker %1, has the Manage Devices POS Permission, but the External identity field is blank.  This may prevent device activation."
                    ret = checkFailed(strFmt("@Retail:RetailStaffTableValidateExternalIdentityBlankWarning", this.staffId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToPasswordHistoryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the password history table.
    /// </summary>
    private void insertToPasswordHistoryTable()
    {
        RetailPasswordHistoryTable passwordHistoryTable;

        passwordHistoryTable.StaffId = this.staffId;
        passwordHistoryTable.PasswordData = this.passwordData;
        passwordHistoryTable.PasswordSalt = this.passwordSalt;
        passwordHistoryTable.PasswordHashAlgorithm = this.PasswordHashAlgorithm;

        passwordHistoryTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateDefaultExternalIdentityAlias</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a default alias for the worker.
    /// </summary>
    public void GenerateDefaultExternalIdentityAlias()
    {
        HcmWorker hcmWorkerLoc;
        DirPerson personTable;

        str aliasMask = "@Retail:RetailExternalIdentityCreateJob_AliasMask"; //'%1.%2', eg 'first.last'

        select firstonly PersonnelNumber from hcmWorkerLoc
            where hcmWorkerLoc.PersonnelNumber == this.staffId
        join Name from personTable
            where personTable.RecId == hcmWorkerLoc.Person;

        str displayName = personTable.Name;

        //Get name parts
        str nameFirst, nameMiddle, nameLast;
        [nameFirst, nameMiddle, nameLast] = DirPerson::splitNameParts(displayName);
        str alias = strFmt(aliasMask, nameFirst, nameLast);

        this.tmpExternalIdentityAlias = alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DefaultCommissionSalesGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds default commission sales group for a staff
    /// </summary>
    /// <returns>
    /// commission sales group id.
    /// </returns>
    display public CommissSalesGroup DefaultCommissionSalesGroup()
    {
        RetailStaffDefaultCommissionSalesGroup staffSalesGroup;

		CommissSalesGroup defaultSalesGroup;

        select DefaultCommissionSalesGroup from staffSalesGroup
            where staffSalesGroup.StaffId == this.staffId;

        defaultSalesGroup = staffSalesGroup.DefaultCommissionSalesGroup;

        return defaultSalesGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4160372</DeveloperDocumentation>
	<Label>@RET3006</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>staffId</TitleField1>
	<TitleField2>employmentType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>CommerceEmployees</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>passwordData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>passwordData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>changePassword</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Authentication</Name>
			<Label>@RET5795</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>password</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>changePassword</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Blocking</Name>
			<Label>@RET3149</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Culture</Name>
			<Label>@RET2366</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>cultureName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Group1</Name>
			<Label>@RET4827</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>employmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>continueOnTSErrors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Image</Name>
			<Label>@SYS58650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Image</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Modified</Name>
			<Label>@RET3073</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Receipt</Name>
			<Label>@RET3183</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>nameOnReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalIdentity</Name>
			<Label>@RET:RetailStaffTableExternalIdentity</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalIdentityAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalIdentityName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalIdentitySubId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBlocked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>changePassword</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPOSchangepassword</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>continueOnTSErrors</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailContinueOnTSErrors</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>cultureName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>employmentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEmploymentType</ExtendedDataType>
			<EnumType>RetailCashierSalesPersonOther</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Image</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailImageAttributeValueText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>nameOnReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNameOnReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>password</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffPassword</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>passwordData</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>staffId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalIdentityName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExternalIdentityName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalIdentityId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExternalIdentityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalIdentitySubId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExternalIdentityId</ExtendedDataType>
			<Label>@RET:RetailStaffTableExternalIdentitySubId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>passwordSalt</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<StringSize>128</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PasswordHashAlgorithm</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffPasswordHashName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PasswordLastChangedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalIdentityAlias</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExternalIdentityAlias</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>tmpExternalIdentityPassword</Name>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>RetailStaffPassword</ExtendedDataType>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>tmpExternalIdentityAlias</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExternalIdentityAlias</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PasswordLastUpdatedOperation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAuthenticationOperation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>layoutId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegacyLocalContext</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStaffData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegacyRegKeyData2Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStaffData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegacyPasswordData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
			<ExtendedDataType>RetailStaffData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>staffIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>staffId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RetailAddressMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Address</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Attention</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ZipCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>County</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountryRegionId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>State</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>City</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Street</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>cultureName</Name>
					<SourceEDT>LanguageId</SourceEDT>
					<Field>cultureName</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>LanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailHCMWorker</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PersonnelNumber</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>staffId</Name>
					<Field>staffId</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTillLayout</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailTillLayout</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>layoutId</Name>
					<Field>layoutId</Field>
					<RelatedField>layoutId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>