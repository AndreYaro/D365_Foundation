<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRHoldCodeTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRHoldCodeTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllHoldsPerOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the user and clears all hold codes for an order.
    /// </summary>
    /// <param name="_inventRefId">
    /// Order reference ID such as sales or purchase order ID.
    /// </param>
    public void clearAllHoldsPerOrder(InventRefId _inventRefId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;

        while select mcrCheckedOut, mcrCheckedOutTo, mcrHoldCode from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId == _inventRefId && mcrHoldCodeTrans.mcrCleared == NoYes::No
        {
            try
            {
                if (mcrHoldCodeTrans.mcrCheckedOut == NoYes::No || mcrHoldCodeTrans.mcrCheckedOutTo == curUserId())
                {
                    ttsbegin;
                    select forupdate this
                        where mcrHoldCodeTrans.RecId == this.RecId;

                        this.mcrCleared = NoYes::Yes;
                        this.setClearFlag();
                        if (this.validateWrite())
                        {
                            this.update();
                        }
                    ttscommit;
                }
                else
                {
                    error(strFmt("@MCR24324", mcrHoldCodeTrans.mcrHoldCode, mcrHoldCodeTrans.mcrCheckedOutTo ));
                }
            }
            catch
            {
                Global::exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears order hold transaction to allow the order to be processed further.
    /// </summary>
    public void clearHold()
    {
        if (this.MCRCheckedOut == NoYes::No || this.MCRCheckedOutTo == CurUserId())
        {
            this.MCRCleared = NoYes::Yes;
            this.setClearFlag();
            this.update();
        }
        else
        {
            error(strfmt("@MCR24324", this.MCRHoldCode, this.MCRCheckedOutTo));
        }

        if (ASOHFeatureVisibilityManager::isEnabled())
        {
            ASOHOrderManagement::clearHoldCode(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOutHold</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks out the order hold.
    /// </summary>
    /// <param name="_userId">
    ///     An user ID who checks out order hold.
    /// </param>
    public void checkOutHold(UserId _userId = curuserid())
    {
        this.MCRCheckedOut = NoYes::Yes;
        this.MCRCheckedOutTo = _userId;
        this.MCRCheckedOutDateTime = DateTimeUtil::getSystemDateTime();
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCheckOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears check out data.
    /// </summary>
    public void clearCheckOut()
    {
        this.MCRCheckedOut = NoYes::No;
        this.MCRCheckedOutTo = "";
        this.MCRCheckedOutDateTime = utcDateTimeNull();
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearHoldsForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all hold codes, without validating the user.
    /// </summary>
    /// <param name="_inventRefId">
    /// Order reference ID such as sales or purchase order ID.
    /// </param>
    public void clearHoldsForOrder(InventRefId _inventRefId)
    {
        MCRHoldCodeTrans    mcrHoldCodeTrans;

        update_recordset mcrHoldCodeTrans
                setting mcrCleared = NoYes::Yes, mcrClearedUser = curUserId(), mcrHoldClearDateTime = DateTimeUtil::getSystemDateTime()
                where mcrHoldCodeTrans.InventRefId == _inventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDaysOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns the number of days an order was on hold.
    /// </summary>
    /// <returns>
    /// Number of days on hold was on hold.
    /// </returns>
    public display Integer displayDaysOnHold()
    {
        Integer daysOnHold;
        date    systemDate;
        utcdatetime    holdDateTime;
        date holdDate;

        systemDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
        holdDateTime = this.mcrHoldDateTime;

        if (!this.mcrCleared)
        {
            if (holdDateTime != utcDateTimeNull())
            {
                holdDate = DateTimeUtil::date(holdDateTime);
                if (systemDate > holdDate)
                {
                    daysOnHold = systemDate - holdDate;
                }
                else if (systemDate == holdDate)
                {
                    daysOnHold = 0;
                }
                else
                {
                    daysOnHold = 0;
                }
            }
        }
        else
        {
            daysOnHold = DateTimeUtil::date(this.mcrHoldClearDateTime) - DateTimeUtil::date(this.mcrHoldDateTime);
        }

        return daysOnHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExchangeHoldsForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes exchange holds for an order.
    /// </summary>
    /// <param name="_inventRefId">
    /// The reference to an order in which exchange holds should be deleted.
    /// </param>
    public void deleteExchangeHoldsForOrder(InventRefId _inventRefId)
    {
        MCRHoldCodeTrans    mcrHoldCodeTrans;

        delete_from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId == _inventRefId
                && (mcrHoldCodeTrans.mcrHoldCode == MCROrderParameters::find().mcrReturnCreditHold
                    || mcrHoldCodeTrans.mcrHoldCode == MCROrderParameters::find().mcrExchangePaymBalanceHold);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the remaining order amount for a sales order.
    /// </summary>
    /// <returns>
    /// The reamining order amount for a sales order excluding tax.
    /// </returns>
    public display AmountCur displayAmt()
    {
        AmountCur       orderAmt;
        SalesLine       salesLine;

        while select salesLine
            where salesLine.SalesId == this.InventRefId
        {
            orderAmt += salesLine.calcLineAmountExclTax(salesLine.RemainSalesPhysical+salesLine.RemainSalesFinancial);
        }

        return orderAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the user name of the user who created the hold code.
    /// </summary>
    /// <returns>
    /// The user name of the user who created the hold code.
    /// </returns>
    public display UserName displayUserName()
    {
        UserInfo userInfo;

        select firstonly Id, Name from userInfo
            where userInfo.Id == this.CreatedBy;

        return userInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoldCode</Name>
				<Source><![CDATA[
    private MCRHoldCode getHoldCode(MCRHoldCodeTrans _mcrHoldCodeTrans)
    {
        MCRHoldCode             code = _mcrHoldCodeTrans.mcrHoldCode;
        MCRGetHoldCodeDialog    dialog;
        MCRHoldCode             newCode;

        if (code)
        {
            return code;
        }
        else
        {
            dialog = new MCRGetHoldCodeDialog();

            if (_mcrHoldCodeTrans.mcrHoldCode == MCROrderParameters::find().mcrExchangePaymBalanceHold)
            {
                newCode = dialog.promptForHoldCode("@MCR23260");
            }
            else if (_mcrHoldCodeTrans.mcrHoldCode == MCROrderParameters::find().mcrReturnCreditHold)
            {
                newCode = dialog.promptForHoldCode("@MCR23261");
            }
            if (newCode)
            {
                return newCode;
            }
            else
            {
                error("@MCR35449");
                return "";
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoldCodeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the hold code.
    /// </summary>
    /// <param name="_mcrtHoldCodeTrans">
    /// A <c>MCRHoldCodeTrans</c> buffer of the hold code to be used in looking up the description of the hold code.
    /// </param>
    /// <returns>
    /// The description of the hold code.
    /// </returns>
    public display Description getHoldCodeDescription(MCRHoldCodeTrans _mcrtHoldCodeTrans)
    {
        return MCRHoldCodeTable::find(_mcrtHoldCodeTrans.mcrHoldCode).mcrHoldCodeDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMissingHoldCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains hold codes for holds that have no code attached.
    /// </summary>
    /// <param name="_salesTableExchange">
    /// The <c>SalesTable</c> buffer in which updating hold codes.
    /// </param>
    /// <returns>
    /// true if all holds for the order contain a hold code; otherwise, false.
    /// </returns>
    public boolean getMissingHoldCodes(SalesTable _salesTableExchange)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        MCRHoldCode mcrHoldCode;

        while select forupdate mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId == _salesTableExchange.SalesId
        {
            mcrHoldCode = mcrHoldCodeTrans.getHoldCode(mcrHoldCodeTrans);
            if (!mcrHoldCode)
            {
                return false;
            }
            else
            {
                ttsbegin;
                mcrHoldCodeTrans.mcrHoldCode = mcrHoldCode;
                if (mcrHoldCodeTrans.validateWrite())
                {
                    mcrHoldCodeTrans.update();
                }
                ttscommit;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the reason code on an order hold.
    /// </summary>
    /// <param name="_mcrHoldCodeTrans">
    /// A <c>MCRHoldCodeTrans</c> buffer for the hold code.
    /// </param>
    /// <returns>
    /// The description fo the reason code on an order hold.
    /// </returns>
    public display Description getReasonCodeDescription(MCRHoldCodeTrans _mcrHoldCodeTrans)
    {
        return RetailInformationSubcodeTable::find(_mcrHoldCodeTrans.RetailInfocodeId,
                                                    _mcrHoldCodeTrans.mcrReasonCode).displaySubcodeDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.insertOrderEvent();
        this.mcrHoldDateTime = DateTimeUtil::getSystemDateTime();
        this.mcrHoldUser = curUserId();
        super();
        
        this.setOrderStoppedFlag();

        if (this.mustUnreserve())
        {
            this.unreserve();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetOrderStoppedFlag</Name>
				<Source><![CDATA[
    protected boolean mustSetOrderStoppedFlag()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUnreserve</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether sales order items must be unreserved.
    /// </summary>
    /// <returns>
    ///		true if sales order items must be unreserved; otherwise, false.
    /// </returns>
    protected boolean mustUnreserve()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExchangePaymBalanceHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Puts the exchange sales order on hold because the payments do not cover the order total.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the <c>Salestable</c> record to put on hold.
    /// </param>
    public void insertExchangePaymBalanceHold(SalesId _salesId)
    {
        this.mcrHoldCode = MCROrderParameters::find().mcrExchangePaymBalanceHold;
        this.InventRefId = _salesId;
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExchangePendingCreditHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Puts the exchange sales order on hold because the customer is
    /// using credit for the return to pay for the exchange and
    /// the return product has not yet been received.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the <c>Salestable</c> record to put on hold.
    /// </param>
    public void insertExchangePendingCreditHold(SalesId _salesId)
    {
        this.mcrHoldCode = MCROrderParameters::find().mcrReturnCreditHold;
        this.InventRefId = _salesId;
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a fraud hold recrod.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order ID of the <c>Salestable</c> record to put on hold.
    /// </param>
    public void insertFraudHold(SalesTable _salesTable)
    {
        this.InventRefId = _salesTable.SalesId;
        this.mcrHoldCode = MCROrderParameters::find().mcrFraudHoldCode;

        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the order event type and calls the method to insert an order event.
    /// </summary>
    /// <param name="_origCleared">
    /// A <c>boolean</c> value that passes the original value of the cleared field; optional.
    /// </param>
    private void insertOrderEvent(boolean _origCleared = true)
    {
        MCROrderEventTable   mcrOrderEventTable;
        MCROrderEventType    mcrOrderEventType;

        if (this.mcrCleared == _origCleared)
        {
            mcrOrderEventType = MCROrderEventType::ModifySOOrderHold;
        }
        else
        {
            if (this.mcrCleared)
            {
                if (this.mcrHoldCode == MCROrderParameters::find().mcrFraudHoldCode || this.mcrHoldCode == MCROrderParameters::find().mcrFraudManualHoldCode)
                {
                    mcrOrderEventType = MCROrderEventType::RemoveSOFraudHold;
                }
                else
                {
                    mcrOrderEventType = MCROrderEventType::RemoveSOOrderHold;
                }
            }
            else
            {
                if (this.mcrHoldCode == MCROrderParameters::find().mcrFraudHoldCode || this.mcrHoldCode == MCROrderParameters::find().mcrFraudManualHoldCode)
                {
                    mcrOrderEventType = MCROrderEventType::AddSOFraudHold;
                }
                else
                {
                    mcrOrderEventType = MCROrderEventType::AddSOOrderHold;
                }
            }
        }

        mcrOrderEventTable.insertFromHoldCodeTrans(this, mcrOrderEventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the status of the sales order, given the inventory reference ID from the <c>MCRHoldCodeTrans</c> record.
    /// </summary>
    /// <param name="_mcrHoldCodeTrans">
    /// A record in the <c>MCRHoldCodeTrans</c> table.
    /// </param>
    /// <returns>
    /// The current sales order status.
    /// </returns>
    public display SalesStatus mcrDisplayStatus(MCRHoldCodeTrans _mcrHoldCodeTrans)
    {
        return SalesTable::find(_mcrHoldCodeTrans.InventRefId).SalesStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsHoldCodeSecurityRoleMatch</Name>
				<Source><![CDATA[
    private boolean existsHoldCodeSecurityRoleMatch(UserId _userId, SysSecurityRoleRecId _holdCodeSecurityRoleRecId)
    {
        if (this.hasUserSecurityRole(_userId, _holdCodeSecurityRoleRecId))
        {
            return true;
        }
        else
        {
            SecuritySubRole holdCodeParentSecurityRole;

            while select SecurityRole from holdCodeParentSecurityRole
                where holdCodeParentSecurityRole.SecuritySubRole == _holdCodeSecurityRoleRecId
            {
                if (this.existsHoldCodeSecurityRoleMatch(_userId, holdCodeParentSecurityRole.SecurityRole))
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUserSecurityRole</Name>
				<Source><![CDATA[
    private boolean hasUserSecurityRole(UserId _userId, SysSecurityRoleRecId _securityRoleRecId)
    {
        SecurityUserRole securityUserRole;

        select firstonly RecId from securityUserRole
                where securityUserRole.User == _userId
                    && securityUserRole.SecurityRole == _securityRoleRecId;

        return securityUserRole.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClearFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the user is authorized to clear this hold and if yes,
    /// sets the appropriate flags to clear the hold.
    /// </summary>
    public void setClearFlag()
    {
        UserId userId = curUserId();

        SysSecurityRoleRecId holdCodeSecurityRoleRecId = MCRHoldCodeTable::find(this.MCRHoldCode).RoleRefRecID;

        // Check if the user is authorized the clear the hold and throw an error if the security role doesn't match
        if (holdCodeSecurityRoleRecId 
            && !this.existsHoldCodeSecurityRoleMatch(userId, holdCodeSecurityRoleRecId))
        {
            this.MCRCleared = this.orig().MCRCleared;
            throw error(strFmt("@MCR10292", this.MCRHoldCode)); // User is not authorized to clear hold code
        }

        // Populate Audit Info
        if (this.mcrCleared)
        {
            this.mcrClearedUser = userId;
            this.mcrHoldClearDateTime = DateTimeUtil::getSystemDateTime();
            this.mcrCleared = 1;
        }
        else
        {
            this.mcrClearedUser = "";
            this.mcrHoldClearDateTime = utcDateTimeNull();
            this.mcrCleared = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderStoppedFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the order stopped flag.
    /// </summary>
    /// <param name="_inventRefId">
    /// The reference ID of the <c>SalesTable</c> record to set the order stopped falg.
    /// </param>
    public void setOrderStoppedFlag(InventRefId _inventRefId = this.InventRefId)
    {
        if (!this.mustSetOrderStoppedFlag())
        {
            return;
        }

        SalesTable salesTable;
        MCROrderEventTable   mcrOrderEventTable;
        MCRCustPaymTotals    mcrCustPaymTotals;

        ttsbegin;

        select forupdate * from salesTable
            where salesTable.SalesId == this.InventRefId;

        mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);

        // If the Sales Order has an active Hold Code - Set the Sales Order to stopped
        if (MCRHoldCodeTrans::findActiveOrderHolds(this.InventRefId))
        {
            // When an order goes on hold, post cash and check
            mcrCustPaymTotals.preProcessCashCheck();
            // When preProcessCashCheck executes it updates the SalesTable, have to
            //  reread.  Otherwise an error is thrown.
            salesTable.reread();

            // Sales order is stopped
            salesTable.mcrOrderStopped = NoYes::Yes;

            // If the order went on hold write the FTC event clock
            // stopped if the most recent event was not clock stopped and if
            // the clock was started
            if (MCROrderEventTable::shouldClockStop(salesTable.SalesId))
            {
                mcrOrderEventTable.insertFTCEvent(salesTable.SalesId, MCROrderEventType::FTCClockStopped);
            }
        }
        // Omni payments orders should not get updated to disable the Complete button while clearing the hold on order.
        else if (!RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable) && !RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(salesTable, funcName()))
        {
            salesTable.mcrOrderStopped = NoYes::No;
        }

        if (ASOHFeatureVisibilityManager::isEnabled())
        {
            ASOHOrderManagement::mcrHoldTransDeletedWithHoldRemoveHoldCode(this);

            // Check if we have document blocking in which case override the standard hold function to stop the order
            if (!ASOHHoldRelatedDocument::firstDocByHoldCodeAndRelatedDoc(this.MCRHoldCode, ASOHRelatedDocuments::SalesOrderConfirmation).EnableDocument
                && !RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
            {
                salesTable.mcrOrderStopped = NoYes::No;
            }

            // Check if the planning hold is on.
            if (ASOHHoldRelatedDocument::firstDocByHoldCodeAndRelatedDoc(this.MCRHoldCode, ASOHRelatedDocuments::WHSPlanning).EnableDocument)
            {
                salesTable.mcrOrderStopped = NoYes::Yes;
            }
        }

        if (salesTable.validateWrite())
        {
            this.updateSalesTable(salesTable);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTable</Name>
				<Source><![CDATA[
    protected void updateSalesTable(SalesTable _salesTable) 
    { 
        _salesTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the hold code.
    /// </summary>
    /// <returns>
    /// The hold code of the record.
    /// </returns>
    public display String30 setr()
    {
        return this.mcrHoldCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unreserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unreserves the items if the hold code requires the sales order items to be unreserved.
    /// </summary>
	final protected void unreserve()
    {
        SalesTable       salesTable;
        MCRHoldCodeTable mcrHoldCodeTable;

        mcrHoldCodeTable = MCRHoldCodeTable::find(this.mcrHoldCode, false);
        if (mcrHoldCodeTable.mcrUnReserve)
        {
            salesTable = SalesTable::find(this.InventRefId, false);
            if (salesTable)
            {
                SalesTable::mcrUnReserveOrderLines(salesTable.SalesId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        MCRHoldCodeTrans mcrHoldCodeTrans_Orig;

        mcrHoldCodeTrans_Orig = this.orig();

        super();

        if (this.RecVersion != mcrHoldCodeTrans_Orig.RecVersion)
        {
            this.insertOrderEvent(mcrHoldCodeTrans_Orig.mcrCleared);
        }

        this.setOrderStoppedFlag();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && RetailInformationSubcodeTable::mcrValidate(this.RetailInfocodeId,this.mcrReasonCode);

        SalesTable salesTableRef = SalesTable::find(this.InventRefId);

        if (ret && salesTableRef.RecId)
        {
            ret = salesTableRef.checkAccount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPendingReturnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears a pending return hold.
    /// </summary>
    /// <param name="_refId">
    /// The order reference in which clearing return hold.
    /// </param>
    public static void clearPendingReturnHold(InventRefId _refId)
    {
        MCRHoldCodeTrans     mcrHoldCodeTrans;
        MCRHoldCode pendingReturnHoldCode;
        MCROrderParameters mcrOrderParameters;

        // Get pending return hold code.
        mcrOrderParameters = MCROrderParameters::find();
        pendingReturnHoldCode = mcrOrderParameters.mcrReturnCreditHold;

        ttsbegin;

        while select forupdate mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId  == _refId
                && mcrHoldCodeTrans.mcrCleared  == NoYes::No
                && mcrHoldCodeTrans.mcrHoldCode == pendingReturnHoldCode
        {
            mcrHoldCodeTrans.mcrCleared = NoYes::Yes;
            mcrHoldCodeTrans.setClearFlag();
            if (mcrHoldCodeTrans.validateWrite())
            {
                mcrHoldCodeTrans.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveOrderHolds</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds whether an order has an active hold code record or not.
    /// </summary>
    /// <param name="_inventRefId">
    /// Order reference ID such as sales or purchase order ID.
    /// </param>
    /// <returns>
    /// true if an active hold was found for the given order ID.
    /// </returns>
    public static boolean findActiveOrderHolds(InventRefId    _inventRefId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        boolean activeHolds = false;

        select firstonly RecId from mcrHoldCodeTrans
            where   mcrHoldCodeTrans.InventRefId == _inventRefId
                && mcrHoldCodeTrans.mcrCleared   == NoYes::No;

        if (mcrHoldCodeTrans)
        {
            activeHolds = true;
        }

        return activeHolds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveReasonCodeHolds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds whether a reason code has an active hold code record or not.
    /// </summary>
    /// <param name="_mcrReasonCode">
    /// Hold code reason code identifier or the <c>MCRHoldCodeTrans</c> record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>MCRHoldCodeTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static boolean findActiveReasonCodeHolds(RetailInformationSubcodeId    _mcrReasonCode)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        boolean activeHolds = false;

        select firstonly RecId from mcrHoldCodeTrans
            where   mcrHoldCodeTrans.mcrReasonCode  == _mcrReasonCode
            && mcrHoldCodeTrans.mcrCleared          == NoYes::No;
        if (mcrHoldCodeTrans)
        {
            activeHolds = true;
        }

        return activeHolds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRHoldCodeTrans</c> table based on the record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>MCRHoldCodeTrans</c> table record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>MCRHoldCodeTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static MCRHoldCodeTrans findByRecId(    RecId    _recId, boolean  _forupdate = false)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;

        mcrHoldCodeTrans.selectForUpdate(_forupdate);

        select firstonly mcrHoldCodeTrans
            where   mcrHoldCodeTrans.RecId == _recId;

        return mcrHoldCodeTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumActiveHolds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of active holds for a given sales order.
    /// </summary>
    /// <param name="_inventRefId">
    /// The Sales ID of the <c>MCRHoldCodeTrans</c> record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>MCRHoldCodeTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static int getNumActiveHolds(InventRefId _inventRefId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;

        select count(RecId) from mcrHoldCodeTrans
            where  mcrHoldCodeTrans.InventRefId == _inventRefId
                && mcrHoldCodeTrans.mcrCleared  == NoYes::No;

        return any2int(mcrHoldCodeTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHoldCodeActiveInSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds whether a hold code is active in the system.
    /// </summary>
    /// <param name="_holdCode">
    /// Unique order hold code.
    /// </param>
    /// <returns>
    /// true when hold code is currently active on an order; otherwise, false.
    /// </returns>
    public static boolean isHoldCodeActiveInSystem(MCRHoldCode    _holdCode)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        boolean activeHolds = false;

        select firstonly RecId from mcrHoldCodeTrans
            where   mcrHoldCodeTrans.mcrHoldCode    == _holdCode
                && mcrHoldCodeTrans.mcrCleared      == NoYes::No;
        if (mcrHoldCodeTrans)
        {
            activeHolds = true;
        }

        return activeHolds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderOnExchBalanceHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the order is on an exchange balance hold or not.
    /// </summary>
    /// <param name="_refId">
    /// The reference ID of the <c>MCRHoldCodeTrans</c> record to find.
    /// </param>
    /// <returns>
    /// true if the order is on an exchange balance hold; Otherwise, false.
    /// </returns>
    public static boolean isOrderOnExchBalanceHold(InventRefId _refId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        MCRHoldCode exchBalanceCode;
        MCROrderParameters mcrOrderParameters;

        mcrOrderParameters = MCROrderParameters::find();
        exchBalanceCode = mcrOrderParameters.mcrExchangePaymBalanceHold;

        select firstonly RecId from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId  == _refId
                && mcrHoldCodeTrans.mcrCleared      == NoYes::No
                && mcrHoldCodeTrans.mcrHoldCode     == exchBalanceCode;

        if (mcrHoldCodeTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderOnFraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not an order is on fraud hold.
    /// </summary>
    /// <param name="_refId">
    /// The reference ID of the <c>MCRHoldCodeTrans</c> record to find.
    /// </param>
    /// <returns>
    /// If the order is not on hold at all, returns false.
    /// If the order is on hold, but the hold code is not marked as a fraud hold code, return false.
    /// </returns>
    public static boolean isOrderOnFraudHold(InventRefId _refId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        MCRHoldCode fraudCode, manualFraudCode;
        MCROrderParameters mcrOrderParameters;

        mcrOrderParameters = MCROrderParameters::find();
        fraudCode = mcrOrderParameters.mcrFraudHoldCode;
        manualFraudCode = mcrOrderParameters.mcrFraudManualHoldCode;

        select firstonly RecId from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId      == _refId
                && mcrHoldCodeTrans.mcrCleared      == NoYes::No
                && (   mcrHoldCodeTrans.mcrHoldCode == fraudCode
                || mcrHoldCodeTrans.mcrHoldCode     == manualFraudCode);

        if (mcrHoldCodeTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderOnPendingReturnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the order is on Pending Return (aka return credit hold) hold or not.
    /// </summary>
    /// <param name="_refId">
    /// The reference ID of the <c>MCRHoldCodeTrans</c> record to find.
    /// </param>
    /// <returns>
    /// If the order is not on return credit hold, this methods returns false.
    /// </returns>
    public static boolean isOrderOnPendingReturnHold(InventRefId _refId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;
        MCRHoldCode pendingReturnHoldCode;
        MCROrderParameters mcrOrderParameters;

        mcrOrderParameters = MCROrderParameters::find();
        pendingReturnHoldCode = mcrOrderParameters.mcrReturnCreditHold;

        select firstonly RecId from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId  == _refId
                && mcrHoldCodeTrans.mcrCleared      == NoYes::Yes
                && mcrHoldCodeTrans.mcrHoldCode     == pendingReturnHoldCode;

        if (mcrHoldCodeTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePendingReturnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete a pending return hold.
    /// </summary>
    /// <param name = "_refId">The order reference in which deleting return hold.</param>
    public static void deletePendingReturnHold(InventRefId _refId)
    {
        MCRHoldCodeTrans    mcrHoldCodeTrans;

        delete_from mcrHoldCodeTrans
                where mcrHoldCodeTrans.InventRefId == _refId
                && mcrHoldCodeTrans.mcrHoldCode == MCROrderParameters::find().mcrReturnCreditHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPriceOverrideHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a price override hold record. The creation will be skipped if there is an active one for the given order.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the <c>Salestable</c> record to put on hold.
    /// </param>
    public void insertPriceOverrideHold(SalesId _salesId)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;

        this.InventRefId = _salesId;
        this.mcrHoldCode = MCROrderParameters::find().MCRPriceOverrideHoldCode;

        if (this.mcrHoldCode != '')
        {
            // check if there is active price override hold transaction
            select firstonly mcrHoldCodeTrans
                where  mcrHoldCodeTrans.InventRefId == this.InventRefId
                   &&  mcrHoldCodeTrans.mcrHoldCode == this.mcrHoldCode;

            if (!mcrHoldCodeTrans)
            {
                if (this.validateWrite())
                {
                    this.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryInsertPriceOverrideHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a price override hold record. The creation will be skipped if there is an active one for the given order.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the <c>Salestable</c> record to put on hold.
    /// </param>
    internal static void tryInsertPriceOverrideHold(SalesId _salesId)
    {
        MCRHoldCode mcrHoldCode = MCROrderParameters::find().MCRPriceOverrideHoldCode;

        if (_salesId != '' && mcrHoldCode != '')
        {
            MCRHoldCodeTrans mcrHoldCodeTrans;

            // check if there is active price override hold transaction
            select firstonly mcrHoldCodeTrans
                where mcrHoldCodeTrans.InventRefId == _salesId
                   && mcrHoldCodeTrans.mcrHoldCode == mcrHoldCode
                   && mcrHoldCodeTrans.MCRCleared  == NoYes::No;

            if (!mcrHoldCodeTrans)
            {
                mcrHoldCodeTrans.clear();
                mcrHoldCodeTrans.InventRefId = _salesId;
                mcrHoldCodeTrans.MCRHoldCode = mcrHoldCode;

                if (mcrHoldCodeTrans.validateWrite())
                {
                    mcrHoldCodeTrans.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHoldCodeTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new record for table <c>MCRHoldCodeTrans</c>.
    /// </summary>
    /// <param name = "_custConfirmJour">The record of table <c>CustConfirmJour</c>.</param>
    [Hookable(false)]
    public static void insertHoldCodeTrans(CustConfirmJour _custConfirmJour)
    {
        if (ASOHFeatureVisibilityManager::isEnabled())
        {
            RecordInsertList recordList = new RecordInsertList(tableNum(MCRHoldCodeTrans));

            ASOHHoldEvent holdEvent;
            while select holdEvent
                where holdEvent.MCROrderEventType == MCROrderEventType::ASOHSalesConfirm
            {
                recordList = ASOHOrderManagement::initMCRHoldCodeTrans(recordList, holdEvent.MCRHoldCode, _custConfirmJour.SalesId);
            }

            recordList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPriceOverrideHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use hold code in the call center setup page, and only clear the code when there is an active hold code
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the <c>Salestable</c> record to clear hold.
    /// </param>
    public void clearPriceOverrideHold(SalesId _salesId)
    {
        MCRHoldCodeTrans        mcrHoldCodeTrans;
        MCROrderParameters      mcrOrderParameters;

        mcrOrderParameters = MCROrderParameters::find();

        if (mcrOrderParameters.MCRPriceOverrideHoldCode != "")
        {
            ttsbegin;
            // get first active price override hold transaction
            select firstonly forupdate mcrHoldCodeTrans
                where mcrHoldCodeTrans.InventRefId == _salesId
                   && mcrHoldCodeTrans.mcrHoldCode == mcrOrderParameters.MCRPriceOverrideHoldCode
                   && mcrHoldCodeTrans.MCRCleared == NoYes::No;
       
            if (mcrHoldCodeTrans)
            {
                mcrHoldCodeTrans.clearHold();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPriceOverrideHoldV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use hold code in the call center setup page, and clear all holds when there is an active hold code.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the <c>Salestable</c> record to clear hold.
    /// </param>
    internal static void clearPriceOverrideHoldV2(SalesId _salesId)
    {
        MCRHoldCode holdCode = MCROrderParameters::find().MCRPriceOverrideHoldCode;

        if (holdCode != "")
        {
            MCRHoldCodeTrans mcrHoldCodeTrans;
            // get first active price override hold transaction
            while select forupdate mcrHoldCodeTrans
                where mcrHoldCodeTrans.InventRefId == _salesId
                   && mcrHoldCodeTrans.mcrHoldCode == holdCode
                   && mcrHoldCodeTrans.MCRCleared == NoYes::No
            {
                mcrHoldCodeTrans.clearHold();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsManualHolds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the manual hold codes if exists for the sales order.
    /// </summary>
    /// <param name = "_salesId">Sales order number</param>
    /// <returns>The boolean value; true if manual hold exists otherwise false.</returns>
    internal static boolean existsManualHolds(SalesId _salesId)
    {
        boolean existsManualHolds;

        MCROrderParameters mcrOrderParameters = MCROrderParameters::find();

        MCRHoldCodeTrans mcrHoldCodeTrans;

        select firstonly RecId from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId == _salesId
            && mcrHoldCodeTrans.MCRCleared == NoYes::No
            && (mcrHoldCodeTrans.mcrHoldCode != mcrOrderParameters.mcrFraudHoldCode
            && mcrHoldCodeTrans.mcrHoldCode != mcrOrderParameters.mcrFraudManualHoldCode
            && mcrHoldCodeTrans.mcrHoldCode != mcrOrderParameters.MCRPriceOverrideHoldCode
            && mcrHoldCodeTrans.mcrHoldCode != mcrOrderParameters.MCRReturnCreditHold
            && mcrHoldCodeTrans.mcrHoldCode != mcrOrderParameters.MCRExchangePaymBalanceHold);

        existsManualHolds = mcrHoldCodeTrans.RecId ? true: false;

        return existsManualHolds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@MCR11401</DeveloperDocumentation>
	<FormRef>MCRHoldCodeTrans</FormRef>
	<Label>@MCR11401</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventRefId</TitleField1>
	<TitleField2>MCRHoldCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>MCRSalesOrderHoldCodeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCheckedOut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCheckedOutDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCheckedOutTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCleared</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRClearedUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldClearDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCodeComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRUser</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS40133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRClearedUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCleared</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCodeComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCheckedOut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCheckedOutTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldClearDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRCheckedOutDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRCheckedOut</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR23100</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MCRCheckedOutDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCheckedOutDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRCheckedOutTo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@MCR23099</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRCleared</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS50993</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRClearedUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@MCR11238</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS53151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MCRHoldClearDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRHoldClearDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRHoldCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRHoldCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRHoldCodeComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRHoldCodeComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MCRHoldDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRHoldDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRHoldUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@MCR11241</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<ExtendedDataType>RetailInformationSubcodeId</ExtendedDataType>
			<Label>@MCR10280</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ASOHFollowingHold</Name>
			<ExtendedDataType>MCRHoldCode</ExtendedDataType>
			<FeatureClass>AdvancedOrderHoldStatusFeature</FeatureClass>
			<Label>@SCM:FollowingHold</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MCRSalesOrderHoldCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MCRHoldCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClearedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRHoldCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MCRCleared</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DateClearedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRCleared</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MCRHoldDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventRefId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MCRHoldCode</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Docuref</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocuRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>RefTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRHoldCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRHoldCodeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRHoldCode</Name>
					<SourceEDT>MCRHoldCode</SourceEDT>
					<Field>MCRHoldCode</Field>
					<RelatedField>MCRHoldCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInformationSubcodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailInfocodeId</Name>
					<SourceEDT>RetailInfocodeId</SourceEDT>
					<Field>RetailInfocodeId</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRReasonCode</Name>
					<SourceEDT>RetailInformationSubcodeId</SourceEDT>
					<Field>MCRReasonCode</Field>
					<RelatedField>subcodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ASOHFollowingHold</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ASOHFollowingHold</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ASOHFollowingHold</Name>
					<SourceEDT>FollowingHold</SourceEDT>
					<Field>ASOHFollowingHold</Field>
					<RelatedField>FollowingHold</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRHoldCode</Name>
					<Field>MCRHoldCode</Field>
					<RelatedField>MCRHoldCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>