<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>WarehouseIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warehouse identity of the current <c>InventItemLocation</c> record.
    /// </summary>
    /// <returns>
    /// A string containsa warehouse identity.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display str WarehouseIdentity()
    {
        InventLocationId    inventLocationId = this.inventLocationID();
        str                 identityFormat = "@SCM:WarehouseWithIdentifier";

        if (!inventLocationId)
        {
            inventLocationId = "@SCM:WarehouseLocationRulesAll";
        }

        return strfmt(identityFormat, inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CountingGroupIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a counting group identity of the current <c>InventItemLocation</c> record.
    /// </summary>
    /// <returns>
    /// A string contains a counting group identity.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display str CountingGroupIdentity()
    {
        CountGroupId        countGroupId = this.CountGroupId;
        str                 identityFormat = "@SCM:CountingGroupIdentifier";

        if (!this.CountGroupId)
        {
            countGroupId = "@SCM:WarehouseLocationRulesAll";
        }

        return strfmt(identityFormat, countGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProductDimensionsIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a product dimensions identity of the current <c>InventItemLocation</c> record.
    /// </summary>
    /// <returns>
    /// A string contains a product dimensions identity.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display str ProductDimensionsIdentity()
    {
        str         result;
        InventDim   dimensions = this.inventDim();

        if (!dimensions.anyProductDimensionSpecified())
        {
            result = "@SCM:AnyInventoryDimensions";
        }
        else
        {
            FieldId         inventProductDimFieldId;
            ListEnumerator  listEnum = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

            while (listEnum.moveNext())
            {
                inventProductDimFieldId = listEnum.current();

                if (dimensions.(inventProductDimFieldId))
                {
                    str tempResult = strfmt("@SCM:PlaceholderStringOneSpaceTwo", new SysDictField(tableNum(InventDim), inventProductDimFieldId).label(), dimensions.(inventProductDimFieldId));

                    if (result)
                    {
                        result = strfmt("@SCM:PlaceholderStringOneCommaTwo", result, tempResult);
                    }
                    else
                    {
                        result = tempResult;
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductDimensions</Name>
				<Source><![CDATA[
    private boolean checkProductDimensions(InventDim _inventDim, boolean _errorIfNotValid = true)
    {
        boolean                                 ret                         = true;
        ListEnumerator                          enumerator                  = InventDim::dimFieldListEnumerator();
        EcoResProductDimGroupSetup              ecoResProductDimGroupSetup  = EcoResProductDimGroupSetup::newItemId(this.ItemId);
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;
        InventDim                               inventDimTemp;
        Integer                                 activeProductDimensionsCount;
        Integer                                 productDimensionsFilledCount;

        inventDimTemp.data(_inventDim.data());
        inventDimTemp.InventLocationId = '';

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (InventDim::isFieldIdProductDimension(inventDimFieldId))
            {
                inventDimGroupFieldSetup = ecoResProductDimGroupSetup.getFieldSetup(inventDimFieldId);
                if (inventDimGroupFieldSetup.isActive())
                {
                    activeProductDimensionsCount++;

                    if (_inventDim.(inventDimFieldId))
                    {
                        productDimensionsFilledCount++;
                    }
                }
            }
            else
            {
                if (inventDimTemp.(inventDimFieldId))
                {
                    ret = false;
                    if (_errorIfNotValid)
                    {
                        checkFailed(strFmt("@SYS71543",fieldId2pname(tableNum(InventDim), inventDimFieldId)));
                    }
                }
            }
        }

        if (activeProductDimensionsCount != productDimensionsFilledCount && productDimensionsFilledCount > 0)
        {
            if (_errorIfNotValid)
            {
                ret = checkFailed("@SYS74585");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    private void initFromInventTable( InventTable inventTable)
    {
        InventItemLocation  existingDefault;

        this.ItemId             = inventTable.ItemId;
        existingDefault = InventItemLocation::findDefault(this.ItemId);
        if (existingDefault)
        {
            this.CountGroupId       = existingDefault.CountGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        if (this.ItemId)
        {
            this.initFromInventTable(InventTable::find(this.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationID</Name>
				<Source><![CDATA[
    public InventLocationId inventLocationID()
    {
        return this.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forupdate = false)
    {
        return InventTable::find(this.ItemId,_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useWMSOrder</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public NoYes useWMSOrder(InventDim inventDim)
    {
        switch (this.UseWMSOrder)
        {
            case InventInventLocationNoYes::InventLocation:
                if (inventDim.InventLocationId)
                {
                    return inventDim.inventLocation().useWMSOrder(this.ItemId);
                }
                break;
            case InventInventLocationNoYes::No:
                return NoYes::No;
            case InventInventLocationNoYes::Yes:
                return NoYes::Yes;
        }
        return this.inventTable().modelGroup().MandatoryWMSOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        InventDim   inventDimBlank = InventDim::find(InventDim::inventDimIdBlank());

        ret = super();

        if (this.RecId && InventDim::isInventDimEqual(this.inventDim(),  inventDimBlank))
        {
            ret = ret && checkFailed("@SYS55206");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                                 ret                                 = true;
        InventDim                               inventDim                           = this.inventDim();
        InventTable                             inventTable;
        WMSLocation                             wmsLocation;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;

        boolean checkLocationExists(WMSLocationId _wmsLocationId)
        {
            if (!WMSLocation::exist(_wmsLocationId, inventDim.InventLocationId))
            {
                return checkFailed(strFmt("@SYS53781", _wmsLocationId, inventDim.InventLocationId));
            }
            return true;
        }

        ret = this.checkProductDimensions(inventDim);

        ret = InventTable::checkProductDimensions(this.ItemId, inventDim, true) && ret;

        if (this.wmsPickingLocation)
        {
            wmsLocation = WMSLocation::find(this.wmsPickingLocation, inventDim.InventLocationId);
            if (!wmsLocation || wmsLocation.LocationType != WMSLocationType::Pick)
            {
                ret = checkFailed(strFmt("@SYS50638", this.wmsPickingLocation));
            }
        }

        if (this.InventDimId != InventDim::inventDimIdBlank())
        {
            inventTable = this.inventTable();

            if (!InventModelGroupItem::modelGroupId(inventTable.ItemId, inventTable.DataAreaId) || !inventTable.isStocked())
            {
                ret = checkFailed(strFmt("@SYS342072", this.ItemId));
            }
        }

        if (this.wmsLocationIdDefaultReceipt || this.wmsLocationIdDefaultIssue || this.wmsPickingLocation)
        {
            inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.ItemId, fieldNum(InventDim, wmsLocationId));

            if (this.wmsLocationIdDefaultReceipt)
            {
                ret = checkLocationExists(this.wmsLocationIdDefaultReceipt) && ret;

                if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isAllowBlankReceiptEnabled())
                {
                    info("@SYS63216");
                }
                else if (!inventDimGroupFieldSetup.isActive())
                {
                    ret = checkFailed("@SYS344660");
                }
            }

            if (this.wmsLocationIdDefaultIssue)
            {
                ret = checkLocationExists(this.wmsLocationIdDefaultIssue) && ret;

                if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isAllowBlankIssueEnabled())
                {
                    info("@SYS63217");
                }
                else if (!inventDimGroupFieldSetup.isActive())
                {
                    ret = checkFailed("@SYS344661");
                }
            }

            if (this.wmsPickingLocation)
            {
                ret = checkLocationExists(this.wmsPickingLocation) && ret;

                if (!inventDimGroupFieldSetup.isActive())
                {
                    ret = checkFailed("@SYS344755");
                }
            }
        }

        ret = super() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventDimId inventDimIdBlank = inventDim::InventDimIdBlank();

        if (this.orig().InventDimId == inventDimIdBlank && this.InventDimId != inventDimIdBlank)
        {
            throw error ("@SCM:BlankInventDimNotAllowedChangeOrDelete");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.inventTable() && !this.validateDelete())
        {
            throw error ("@SCM:BlankInventDimNotAllowedChangeOrDelete");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsPickingLocation</Name>
				<Source><![CDATA[
    public WMSLocation wmsPickingLocation(boolean _update = false)
    {
        return WMSLocation::find(this.wmsPickingLocation, this.inventDim().InventLocationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default <c>InventItemLocation</c> record that is new.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the default <c>InventItemLocation</c> record.
    /// </param>
    /// <returns>
    /// The default <c>InventItemLocation</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The <c>InventItemLocation</c> record is not created.
    /// </exception>
    public static InventItemLocation createDefault(ItemId _itemId)
    {
        InventItemLocation  inventItemLocation;

        ttsbegin;
        inventItemLocation.initValue();
        inventItemLocation.ItemId       = _itemId;
        inventItemLocation.InventDimId  = InventDim::inventDimIdBlank();
        if (!inventItemLocation.validateWrite())
        {
            throw error("@SYS134983");
        }
        inventItemLocation.insert();
        ttscommit;

        return inventItemLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(
        ItemId              _itemId,
        InventDimId         _inventDimId)
    {
        return _itemId && (select firstonly RecId from inventItemLocation
                    where inventItemLocation.ItemId              == _itemId
                       && inventItemLocation.InventDimId         == _inventDimId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventItemLocation find(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        CountGroupId        _countGroupId = '',//if specified selection will be constrained based on this,but if blank it will not be taken into consideration
        boolean             _forUpdate = false)
    {
        InventItemLocation              inventItemLocation;
        InventItemLocation              inventItemLocationNull;
        InventDimId                     inventDimId = _inventDimId;
        InventDim                       inventDim;
        InventDim                       inventDimFind;

        void findInventItemLocation()
        {
            //statement is split in two versions to allow the table cache to be used
            if (_countGroupId)
            {
                select firstonly inventItemLocation
                    where inventItemLocation.ItemId         == _itemId
                       && inventItemLocation.InventDimId    == inventDimId
                       && inventItemLocation.CountGroupId   == _countGroupId;
            }
            else
            {
                select firstonly inventItemLocation
                    where inventItemLocation.ItemId      == _itemId
                    && inventItemLocation.InventDimId    == inventDimId;
            }
        }

        if (!_inventDimId)
        {
            throw(error(strFmt("@SYS23264", funcName())));
        }

        inventItemLocation.selectForUpdate(_forUpdate);

        if (!_itemId)
        {
            return inventItemLocationNull;
        }

        inventDimId = _inventDimId;

        findInventItemLocation();       // Try to find record with passed InventDimId

        if (inventItemLocation.RecId)
        {
            return inventItemLocation;
        }

        inventDim = InventDim::find(inventDimId);

        if (EcoResProductMaster::exist(InventTable::itemProduct(_itemId))) // being a product master means that product dimensions are active.
        {
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(_itemId, inventDim, inventDimFind);
            inventDimFind.InventLocationId = inventDim.InventLocationId;

            if (inventDimFind.InventLocationId)
            {
                inventDimId = InventDim::findDim(inventDimFind).InventDimId;

                if (inventDimId && _inventDimId != inventDimId)
                {
                    findInventItemLocation();   // Try to find record with InventDimId with only product Dimensions and InventLocationId
                    if (inventItemLocation.RecId)
                    {
                        return inventItemLocation;
                    }
                }
            }

            inventDimFind.InventLocationId = '';
            inventDimId = InventDim::findDim(inventDimFind).InventDimId;
            if (inventDimId && _inventDimId != inventDimId)
            {
                findInventItemLocation();   // Try to find record with InventDimId with only product Dimensions
                if (inventItemLocation.RecId)
                {
                    return inventItemLocation;
                }
            }
        }
        if (inventDim.InventLocationId)
        {
            inventDimFind.clear();
            inventDimFind.InventLocationId = inventDim.InventLocationId;
            inventDimId = InventDim::findDim(inventDimFind).InventDimId;
            if (inventDimId && _inventDimId != inventDimId)
            {
                findInventItemLocation();   // Try to find record with InventDimId with only InventLocationId
                if (inventItemLocation.RecId)
                {
                    return inventItemLocation;
                }
            }
        }

        inventDimId = InventDim::inventDimIdBlank();
        if (inventDimId && _inventDimId != inventDimId)
        {
            findInventItemLocation();       // Try to find record with InventDimId with no Dimensions
            if (inventItemLocation.RecId)
            {
                return inventItemLocation;
            }
        }
        return inventItemLocationNull;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    static public InventItemLocation findDefault(
        ItemId          _itemId,
        boolean         _forUpdate = false)
    {
        return InventItemLocation::find(_itemId, InventDim::inventDimIdBlank(),'', _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFixedWarehouse</Name>
				<Source><![CDATA[
    static public InventItemLocation findFixedWarehouse(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        boolean             _forUpdate = false)
    {
        InventItemLocation              inventItemLocation;
        InventItemLocation              inventItemLocationNull;
        InventDimId                     inventDimId = _inventDimId;
        InventDimId                     inventDimIdProductDimensions;
        InventDim                       inventDim;
        InventDim                       inventDimFind;
        InventTable                     inventTable;

        void findInventItemLocation()
        {
            select firstonly inventItemLocation
                where inventItemLocation.ItemId              == _itemId    &&
                      inventItemLocation.InventDimId         == inventDimId;
        }

        if (!_inventDimId)
        {
            throw(error(strFmt("@SYS23264", funcName())));
        }

        inventItemLocation.selectForUpdate(_forUpdate);

        if (!_itemId)
        {
            return inventItemLocationNull;
        }

        inventDimId = _inventDimId;

        findInventItemLocation();       // Try to find record with passed InventDimId

        if (inventItemLocation.RecId)
        {
            return inventItemLocation;
        }

        inventDim           = InventDim::find(inventDimId);
        if (!inventDim.InventLocationId)
        {
            return inventItemLocationNull; // If inventLocationId hasn't been specified this method is used incorrectly and no record should be returned.
        }

        if (inventDim.InventSiteId)
        {
            inventDim.InventSiteId = ''; // Site is not used for finding inventItemLocation, so do not search with site
            inventDimId = InventDim::findDim(inventDim).InventDimId;

            findInventItemLocation();   // Try to find record with InventDimId with only Item Dimensions and InventLocationId
            if (inventItemLocation.RecId)
            {
                return inventItemLocation;
            }
        }

        inventTable = InventTable::find(_itemId);

        if (EcoResProductMaster::exist(InventTable::itemProduct(_itemId))) // being a product master means that product dimensions are active.
        {
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(_itemId, inventDim, inventDimFind);
            inventDimFind.InventLocationId = inventDim.InventLocationId;

            inventDimId = InventDim::findDim(inventDimFind).InventDimId;

            if (inventDimId && _inventDimId != inventDimId)
            {
                inventDimIdProductDimensions = inventDimId;
                findInventItemLocation();   // Try to find record with InventDimId with only Item Dimensions and InventLocationId
                if (inventItemLocation.RecId)
                {
                    return inventItemLocation;
                }
            }
        }

        inventDimFind.clear();
        inventDimFind.InventLocationId = inventDim.InventLocationId;
        inventDimId = InventDim::findDim(inventDimFind).InventDimId;
        if (inventDimId && _inventDimId != inventDimId && inventDimId != inventDimIdProductDimensions)
        {
            findInventItemLocation();   // Try to find record with InventDimId with only InventLocationId
            if (inventItemLocation.RecId)
            {
                return inventItemLocation;
            }
        }

        return inventItemLocationNull;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountingStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the counting is marked as started for the specified item and dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being counted.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions for which counting is performed.
    /// </param>
    /// <param name="_inventJournalId">
    /// A Boolean value that specifies whether it is started by a an other journal; optional.
    /// </param>
    /// <returns>
    /// true if counting is started; otherwise, false.
    /// </returns>
    static public boolean isCountingStarted(
        ItemId                  _itemId,
        InventDim               _inventDim,
        InventJournalId         _inventJournalId = '')
    {
        InventItemLocation                  inventItemLocation;

        if (!_inventDim.InventDimId)
        {
            _inventDim = InventDim::findOrCreate(_inventDim);
        }

        inventItemLocation = InventItemLocation::find(_itemId, _inventDim.InventDimId);
        if (!inventItemLocation.RecId)
        {
            return false;
        }

        if (prmisDefault(_inventJournalId))
        {   // don't pass blank journalId, but use default value
            return InventItemLocationCountingStatus::isCountingStarted(_itemId, inventItemLocation.InventDimId);
        }

        return InventItemLocationCountingStatus::isCountingStarted(_itemId, inventItemLocation.InventDimId, _inventJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStartCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the counting as started with the specified journal for the specified combination of item and
    /// dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being counted.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions for which counting is performed.
    /// </param>
    /// <param name="_inventJournalId">
    /// The ID of the counting journal that is used for the counting.
    /// </param>
    static public void updateStartCounting(
        ItemId                  _itemId,
        InventDim               _inventDim,
        InventJournalId         _inventJournalId)
    {
        InventItemLocation  inventItemLocation;

        if (!_inventDim.InventDimId)
        {
            _inventDim = InventDim::findOrCreate(_inventDim);
        }

        // Find the dimensions on which counting is tracked.
        inventItemLocation = InventItemLocation::find(_itemId, _inventDim.InventDimId);

        if (inventItemLocation.RecId)
        {
            InventItemLocationCountingStatus::updateStartCounting(_itemId, inventItemLocation.InventDimId, _inventJournalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStopCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark the counting as stopped for the specified combination of item and dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being counted.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions for which counting is performed.
    /// </param>
    static public void updateStopCounting(
        ItemId              _itemId,
        InventDim           _inventDim)
    {
        InventItemLocation  inventItemLocation;

        if (!_inventDim.InventDimId)
        {
            _inventDim = InventDim::findOrCreate(_inventDim);
        }

        inventItemLocation = InventItemLocation::find(_itemId, _inventDim.InventDimId);

        if (inventItemLocation.RecId)
        {
            InventItemLocationCountingStatus::updateStopCounting(_itemId, inventItemLocation.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStopCountingJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the counting as stopped for the combination of item and dimensions that are specified by the
    /// counting journal line.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// The counting journal line that is being counted.
    /// </param>
    /// <param name="_always">
    /// false to check whether other journal lines exist for the same journal before marking the counting
    /// as stopped; optional.
    /// </param>
    static public void updateStopCountingJournal(
        InventJournalTrans      _inventJournalTrans,
        boolean                 _always = false)
    {
        InventItemLocationCountingStatus::updateStopCountingJournal(_inventJournalTrans, _always);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123891</DeveloperDocumentation>
	<Label>@SYS53618</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>inventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemDimIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemDimIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSPickingLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdDefaultReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdDefaultIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Counting</Name>
			<Label>@SYS2828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventCounting</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsPickingLocation</Name>
			<Label>@SYS110125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>wMSPickingLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickingLocation</Name>
			<Label>@SYS110125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>wMSPickingLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseManagement</Name>
			<Label>@SYS50169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdDefaultReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdDefaultIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CountGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>pdsCWPickingLocationMaxQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWMaxStorageQuantity</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>pdsCWPickingLocationRefillMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWPickingLocationRefillMin</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PickingLocationMaxQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMaxStorageQuantity</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>pickingLocationRefillMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<ExtendedDataType>WMSPickingLocationRefillMin</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useEmptyPalletLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>InventInventLocationNo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useWMSOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>InventInventLocationNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationIdDefaultIssue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdDefaultIssue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationIdDefaultReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdDefaultReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSPickingLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPickingLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSStoreZoneId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSStoreZoneId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>wmsPickIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WMSBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>wMSPickingLocation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CountGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CountGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventCountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventCountGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountGroupId</Name>
					<Field>CountGroupId</Field>
					<RelatedField>CountGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemLocation</Name>
			<EntityRelationshipRole>@SYS123892</EntityRelationshipRole>
			<RelatedTable>InventItemLocation</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123828</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocationIdDefaultIssue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123832</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationIdDefaultIssue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationIdDefaultIssue</Name>
					<Field>WMSLocationIdDefaultIssue</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocationIdDefaultReceipt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123833</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationIdDefaultReceipt</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationIdDefaultReceipt</Name>
					<Field>WMSLocationIdDefaultReceipt</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSPickingLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123893</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSPickingLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>locationType_Extern</Name>
					<RelatedField>locationType</RelatedField>
					<ValueStr>WMSLocationType::Pick</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>wMSPickingLocation</Name>
					<Field>wMSPickingLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSStoreZone</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSStoreZone</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>wMSStoreZoneId</Name>
					<Field>wMSStoreZoneId</Field>
					<RelatedField>storeZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ZoneIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>