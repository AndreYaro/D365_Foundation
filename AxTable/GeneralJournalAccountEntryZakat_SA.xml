<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralJournalAccountEntryZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GeneralJournalAccountEntryZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(GeneralJournalAccountEntryZakat_SA, Subcontractor):
                this.ContractNum = '';
                break;

            case fieldNum(GeneralJournalAccountEntryZakat_SA, SalesType):
                this.SalesId = '';
                this.ProjId  = '';
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                     ret;
        ProjTable                   projTable;
        DimensionLedgerAccountType  accountType;
        LedgerInfoZakat_SA          ledgerInfoZakat;
        LedgerDimensionAccount      ledgerDimensionAccount;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(GeneralJournalAccountEntryZakat_SA, ItemCode):
                    if (this.ItemCode)
                    {
                        ledgerDimensionAccount = GeneralJournalAccountEntryZakat_SA::getAttributeValueRecId(
                                                                GeneralJournalEntry::findByGeneralJournalAccountEntry(this.GeneralJournalAccountEntry).RecId,
                                                                GeneralJournalAccountEntry::find(this.GeneralJournalAccountEntry).LedgerDimension);
                        accountType     = LedgerInfoZakat_SA::findMainAccountFromDimnAttrVal(ledgerDimensionAccount).Type;
                        ledgerInfoZakat = LedgerInfoZakat_SA::findByDimAttrValueRecId(ledgerDimensionAccount);

                        ret = ledgerInfoZakat.checkZakatItemType(this.ItemCode, accountType);

                        if (ret &&
                            LedgerItemCodeZakat_SA::findByItemCode(this.ItemCode).ItemType == LedgerItemTypeZakat_SA::ReservationsAndProvisions)
                        {
                            if (accountType == DimensionLedgerAccountType::BalanceSheet
                                && (LedgerItemCodeZakat_SA::findByItemCode(ledgerInfoZakat.OpeningBalanceItemCode).ItemType != LedgerItemTypeZakat_SA::ReservationsAndProvisions
                                || LedgerItemCodeZakat_SA::findByItemCode(ledgerInfoZakat.ClosingBalanceItemCode).ItemType  != LedgerItemTypeZakat_SA::ReservationsAndProvisions))
                            {
                                ret = checkFailed(strFmt("@SYS322394",
                                                  LedgerItemTypeZakat_SA::ReservationsAndProvisions,
                                                  LedgerItemTypeZakat_SA::ReservationsAndProvisions));
                            }
                        }
                    }
                    break;

                case fieldNum(GeneralJournalAccountEntryZakat_SA, ProjId):
                    if (this.ProjId)
                    {
                        projTable = ProjTable::find(this.ProjId);

                        boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

                        if ((!enableProjMultipleContractLinesForProjectFeature && projTable.Type != ProjType::TimeMaterial &&  projTable.Type != ProjType::FixedPrice)
                            || (enableProjMultipleContractLinesForProjectFeature
                            && !ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Cost, ProjContractBillingMethod::TimeMaterial)
                            && !ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Cost, ProjContractBillingMethod::FixedPrice)))
                        {
                            ret = checkFailed(strFmt("@SYS112224", this.ProjId, fieldPName(LedgerJournalTransZakat_SA, ProjId), tablePName(ProjTable)));
                        }
                    }
                    break;

                case fieldNum(GeneralJournalAccountEntryZakat_SA, ContractNum):
                    ret = VendContractZakat_SA::checkExist(VendInfoZakat_SA::find(this.Subcontractor).VendAccount, this.ContractNum);
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.SalesType  == SalesTypeZakat_SA::Sales
                && this.SalesId == '')
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(GeneralJournalAccountEntryZakat_SA, SalesId)));
            }
            if (this.SalesType == SalesTypeZakat_SA::Projects
                && this.ProjId == '')
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(GeneralJournalAccountEntryZakat_SA, ProjId)));
            }
            if (this.Subcontractor
                && this.ContractNum == '')
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(GeneralJournalAccountEntryZakat_SA, ContractNum)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (! GeneralJournalAccountEntryZakat_SA::exist(_recId))
        {
            ret = checkFailed(strFmt(GeneralJournalAccountEntryZakat_SA::txtNotExist(_recId), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_recId">
    /// The record id of the <c>GeneralJournalAccountEntryZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return ((select firstonly RecId
                 from generalJournalAccountEntryZakat_SA
                      where generalJournalAccountEntryZakat_SA.RecId == _recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>GeneralJournalAccountEntryZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>GeneralJournalAccountEntryZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>GeneralJournalAccountEntryZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static GeneralJournalAccountEntryZakat_SA find(
        RecId               _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;

        generalJournalAccountEntryZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            generalJournalAccountEntryZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly generalJournalAccountEntryZakat
            where generalJournalAccountEntryZakat.RecId == _recId;

        return generalJournalAccountEntryZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>GeneralJournalAccountEntryZakat_SA</c> table.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of the <c>GeneralJournalAccountEntry</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>GeneralJournalAccountEntryZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static GeneralJournalAccountEntryZakat_SA findByGeneralJournalAccountEntry(
        RefRecId            _generalJournalAccountEntryRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        GeneralJournalAccountEntryZakat_SA generalJournalAccountEntryZakat;

        generalJournalAccountEntryZakat.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            generalJournalAccountEntryZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly generalJournalAccountEntryZakat
            where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == _generalJournalAccountEntryRecId;

        return generalJournalAccountEntryZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets opening balance amount.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </param>
    /// <param name="_fiscalYr">
    /// The fiscal year.
    /// </param>
    /// <param name="_itemCode">
    /// The zakat item code.
    /// </param>
    /// <returns>
    /// The opening balance amount.
    /// </returns>
    public static AmountCur findOpeningBalance(
        GeneralJournalAccountEntryRecId     _generalJournalAccountEntryRecId,
        LedgerFiscalYearZakat_SA            _fiscalYr,
        LedgerItemNumZakat_SA               _itemCode)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntryLoc;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        LedgerInfoZakat_SA                      ledgerInfoZakat;
        LedgerDimensionAccount                  ledgerDimensionAccount;

        generalJournalAccountEntryLoc = GeneralJournalAccountEntry::find(_generalJournalAccountEntryRecId);
        ledgerDimensionAccount        = GeneralJournalAccountEntryZakat_SA::getAttributeValueRecId(generalJournalAccountEntryLoc.GeneralJournalEntry,
                                                                                                   generalJournalAccountEntryLoc.LedgerDimension);

        select TransactionCurrencyAmount
            from generalJournalAccountEntryLoc
            join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId
                   && generalJournalAccountEntryZakat.PeriodCode    == FiscalPeriodType::Operating
                   && generalJournalAccountEntryZakat.FiscalYr      == _fiscalYr
            join DimensionAttributeValue from ledgerInfoZakat
                where ledgerInfoZakat.DimensionAttributeValue   == ledgerDimensionAccount
                   && ledgerInfoZakat.OpeningBalanceItemCode    == _itemCode;

        return generalJournalAccountEntryLoc.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeValueRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension attribute value record id with specified record id of the <c>GeneralJournalEntry</c>
    /// table record and ledger diemnsion.
    /// </summary>
    /// <param name="_generalJournalEntryRecId">
    /// The record id of the <c>GeneralJournalEntry</c> table record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledeger dimension.
    /// </param>
    /// <returns>
    /// The dimension attribute value record id.
    /// </returns>
    public static RefRecId getAttributeValueRecId(
        GeneralJournalEntryRecId        _generalJournalEntryRecId,
        LedgerDimensionAccount          _ledgerDimension)
    {
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;
        GeneralJournalEntry                 generalJournalEntry;

        select AttributeValueRecId from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.ValueCombinationRecId == _ledgerDimension
               && dimensionAttributeLevelValueView.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
        join RecId from generalJournalEntry
            where generalJournalEntry.RecId    == _generalJournalEntryRecId
               && generalJournalEntry.Ledger   == Ledger::current();

        return dimensionAttributeLevelValueView.AttributeValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClosingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets closing balance amount in specified fiscal year.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <returns>
    /// The closing balance amount.
    /// </returns>
    public static AmountCur getClosingBalance(LedgerFiscalYearZakat_SA _fiscalYear)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        LedgerInfoZakat_SA                      ledgerInfoZakat;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        AmountCur                               closingBalance;

        while select TransactionCurrencyAmount, RecId from generalJournalAccountEntry
            join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry    == generalJournalAccountEntry.RecId
                   && generalJournalAccountEntryZakat.FiscalYr                      == _fiscalYear
                   && generalJournalAccountEntryZakat.PeriodCode                    == FiscalPeriodType::Operating
            join AttributeValueRecId from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
            exists join DimensionAttributeValue from ledgerInfoZakat
                where ledgerInfoZakat.DimensionAttributeValue == dimensionAttributeLevelValueView.AttributeValueRecId
                   && ledgerInfoZakat.ClosingBalanceItemCode == LedgerItemCodeZakat_SA::findItemCodeFromType(LedgerItemTypeZakat_SA::InventoryClosing)
        {
            closingBalance += generalJournalAccountEntry.TransactionCurrencyAmount
                                + GeneralJournalAccountEntryZakat_SA::getClosingBalFromFiscalYr(_fiscalYear, generalJournalAccountEntry.RecId);
        }
        if (! closingBalance)
        {
            while select LedgerDimension, RecId from generalJournalAccountEntry
                join AttributeValueRecId from dimensionAttributeLevelValueView
                    where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
                join DimensionAttributeValue from ledgerInfoZakat
                    where ledgerInfoZakat.DimensionAttributeValue   == dimensionAttributeLevelValueView.AttributeValueRecId
                       && ledgerInfoZakat.ClosingBalanceItemCode    == LedgerItemCodeZakat_SA::findItemCodeFromType(LedgerItemTypeZakat_SA::InventoryClosing)
                exists join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                    where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                       && generalJournalAccountEntryZakat.FiscalYr                   == _fiscalYear
                       && generalJournalAccountEntryZakat.PeriodCode                 == FiscalPeriodType::Operating
            {
                closingBalance += GeneralJournalAccountEntryZakat_SA::getClosingBalFromFiscalYr(_fiscalYear, generalJournalAccountEntry.RecId);
            }
        }

        return closingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClosingBalFromFiscalYr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets closing balance amount in specified fiscal year and ledger dimension account.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger dimension account.
    /// </param>
    /// <returns>
    /// The closing balance amount.
    /// </returns>
    public static AmountCur getClosingBalFromFiscalYr(
        LedgerFiscalYearZakat_SA    _fiscalYear,
        LedgerDimensionAccount      _ledgerDimensionAccount)
    {
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        GeneralJournalAccountEntry              generalJournalAccountEntryDr;
        GeneralJournalAccountEntry              generalJournalAccountEntryCr;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntryDr
                where generalJournalAccountEntryDr.TransactionCurrencyAmount > 0
                   && generalJournalAccountEntryDr.LedgerDimension == _ledgerDimensionAccount
            join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntryDr.RecId
                   && generalJournalAccountEntryZakat.FiscalYr                   == _fiscalYear
                   && generalJournalAccountEntryZakat.PeriodCode                 == FiscalPeriodType::Operating;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntryCr
                where generalJournalAccountEntryCr.TransactionCurrencyAmount < 0
                   && generalJournalAccountEntryCr.LedgerDimension       == _ledgerDimensionAccount
            join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntryCr.RecId
                   && generalJournalAccountEntryZakat.FiscalYr                   == _fiscalYear
                   && generalJournalAccountEntryZakat.PeriodCode                 == FiscalPeriodType::Operating;

        return generalJournalAccountEntryDr.TransactionCurrencyAmount - abs(generalJournalAccountEntryCr.TransactionCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCrAmountFromAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets credit amount in transaction currency and specified zakat type, fiscal year and
    /// record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </summary>
    /// <param name="_zakatType">
    /// The zakat type.
    /// </param>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_mainAccountRecId">
    /// The record id of the <c>MainAccount</c> table record.
    /// </param>
    /// <returns>
    /// The credit amount in transaction currency.
    /// </returns>
    public static AmountCur getCrAmountFromAccountNum(
        LedgerItemTypeZakat_SA              _zakatType,
        LedgerFiscalYearZakat_SA            _fiscalYear,
        MainAccountRecId                    _mainAccountRecId)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntryLoc;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        LedgerItemCodeZakat_SA                  ledgerItemCodesZakat;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntryLoc
            where generalJournalAccountEntryLoc.TransactionCurrencyAmount < 0
                && generalJournalAccountEntryLoc.MainAccount == _mainAccountRecId
            join GeneralJournalAccountEntry, PeriodCode, FiscalYr, ItemCode from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId
                   && generalJournalAccountEntryZakat.PeriodCode    == FiscalPeriodType::Operating
                   && generalJournalAccountEntryZakat.FiscalYr      == _fiscalYear
                   && generalJournalAccountEntryZakat.ItemCode      != ''
            join ItemType from ledgerItemCodesZakat
                where ledgerItemCodesZakat.ItemCode == generalJournalAccountEntryZakat.ItemCode
                   && ledgerItemCodesZakat.ItemType == _zakatType;

        return generalJournalAccountEntryLoc.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets debit or credit amount in specified zakat type and fiscal year.
    /// </summary>
    /// <param name="_zakatType">
    /// The zakat type.
    /// </param>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_sign">
    /// A integer value that indicates get debit amount or credit amount.
    /// </param>
    /// <returns>
    /// The debit or credit amount.
    /// </returns>
    public static AmountCur getCreditDebitAmount(
        LedgerItemTypeZakat_SA    _zakatType,
        LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        LedgerItemCodeZakat_SA                  ledgerItemCodesZakat;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntry
            join ItemCode from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntryZakat.FiscalYr                   == _fiscalYear
                    && generalJournalAccountEntryZakat.PeriodCode                 == FiscalPeriodType::Operating
                    && generalJournalAccountEntryZakat.ItemCode                   != ''
            join ItemType from ledgerItemCodesZakat
                where ledgerItemCodesZakat.ItemCode == generalJournalAccountEntryZakat.ItemCode
                    && ledgerItemCodesZakat.ItemType == _zakatType;

        return generalJournalAccountEntry.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDrAmountFromAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets debit amount in transaction currency and specified zakat type, fiscal year and
    /// record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </summary>
    /// <param name="_zakatType">
    /// The zakat type.
    /// </param>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </param>
    /// <returns>
    /// The debit amount in transaction currency.
    /// </returns>
    public static AmountCur getDrAmountFromAccountNum(
        LedgerItemTypeZakat_SA              _zakatType,
        LedgerFiscalYearZakat_SA            _fiscalYear,
        MainAccountRecId                    _mainAccountRecId)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntryLoc;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        LedgerItemCodeZakat_SA                  ledgerItemCodesZakat;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntryLoc
            where generalJournalAccountEntryLoc.TransactionCurrencyAmount > 0
                && generalJournalAccountEntryLoc.MainAccount == _mainAccountRecId
            join GeneralJournalAccountEntry, PeriodCode, FiscalYr, ItemCode from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId
                   && generalJournalAccountEntryZakat.PeriodCode    == FiscalPeriodType::Operating
                   && generalJournalAccountEntryZakat.FiscalYr      == _fiscalYear
                   && generalJournalAccountEntryZakat.ItemCode      != ''
            join ItemCode, ItemType from ledgerItemCodesZakat
                where ledgerItemCodesZakat.ItemCode == generalJournalAccountEntryZakat.ItemCode
                   && ledgerItemCodesZakat.ItemType == _zakatType;

        return generalJournalAccountEntryLoc.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets opening balance amount in specified zakat type and fiscal year.
    /// </summary>
    /// <param name="_zakatType">
    /// The zakat type.
    /// </param>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <returns>
    /// The opening balance amount.
    /// </returns>
    public static AmountCur getOpeningBalance(
        LedgerItemTypeZakat_SA    _zakatType,
        LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        LedgerInfoZakat_SA                      ledgerInfoZakat;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        AmountCur                               amountCur;

        while select TransactionCurrencyAmount, RecId from generalJournalAccountEntry
            join GeneralJournalAccountEntry from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry    == generalJournalAccountEntry.RecId
                   && generalJournalAccountEntryZakat.FiscalYr                      == _fiscalYear
                   && generalJournalAccountEntryZakat.PeriodCode                    == FiscalPeriodType::Operating
            join AttributeValueRecId from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
            join DimensionAttributeValue from ledgerInfoZakat
                where ledgerInfoZakat.DimensionAttributeValue == dimensionAttributeLevelValueView.AttributeValueRecId
                   && ledgerInfoZakat.OpeningBalanceItemCode == LedgerItemCodeZakat_SA::findItemCodeFromType(_zakatType)
        {
            amountCur += generalJournalAccountEntry.TransactionCurrencyAmount;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total balance amount in specified zakat type and fiscal year.
    /// </summary>
    /// <param name="_zakatType">
    /// The zakat type.
    /// </param>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <returns>
    /// The total balance amount.
    /// </returns>
    public static AmountCur getTotalAmount(
        LedgerItemTypeZakat_SA    _zakatType,
        LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        LedgerItemCodeZakat_SA                  ledgerItemCodesZakat;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntry
            join GeneralJournalAccountEntry, FiscalYr, PeriodCode, ItemCode from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                   && generalJournalAccountEntryZakat.FiscalYr                   == _fiscalYear
                   && generalJournalAccountEntryZakat.PeriodCode                 == FiscalPeriodType::Operating
                   && generalJournalAccountEntryZakat.ItemCode                   != ''
            join ItemCode, ItemType from ledgerItemCodesZakat
                where ledgerItemCodesZakat.ItemCode == generalJournalAccountEntryZakat.ItemCode
                   && ledgerItemCodesZakat.ItemType == _zakatType;

        return generalJournalAccountEntry.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountFromAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total balance amount in transaction currency and specified zakat type, fiscal year and
    /// record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </summary>
    /// <param name="_zakatType">
    /// The zakat type.
    /// </param>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </param>
    /// <returns>
    /// The total balance amount.
    /// </returns>
    public static AmountCur getTotalAmountFromAccountNum(
        LedgerItemTypeZakat_SA              _zakatType,
        LedgerFiscalYearZakat_SA            _fiscalYear,
        GeneralJournalAccountEntryRecId     _generalJournalAccountEntryRecId)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntryLoc;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        LedgerItemCodeZakat_SA                  ledgerItemCodesZakat;
        LedgerDimensionAccount                  ledgerDimensionAccount;

        generalJournalAccountEntryLoc = GeneralJournalAccountEntry::find(_generalJournalAccountEntryRecId);
        ledgerDimensionAccount        = generalJournalAccountEntryLoc.LedgerDimension;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntryLoc
                where generalJournalAccountEntryLoc.LedgerDimension == ledgerDimensionAccount
            join GeneralJournalAccountEntry, PeriodCode, FiscalYr, ItemCode  from generalJournalAccountEntryZakat
                where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId
                   && generalJournalAccountEntryZakat.PeriodCode    == FiscalPeriodType::Operating
                   && generalJournalAccountEntryZakat.FiscalYr      == _fiscalYear
                   && generalJournalAccountEntryZakat.ItemCode      != ''
            join ItemCode, ItemType from ledgerItemCodesZakat
                where ledgerItemCodesZakat.ItemCode == generalJournalAccountEntryZakat.ItemCode
                   && ledgerItemCodesZakat.ItemType == _zakatType;

        return generalJournalAccountEntryLoc.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a Zakat record into the <c>GeneralJournalAccountEntry_SA</c> table for corresponding to a
    /// record in <c>GeneralJournalAccountEntry</c> table.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of the <c>GeneralJournalAccountEntry</c> record.
    /// </param>
    public static void insertInformation(GeneralJournalAccountEntryRecId _generalJournalAccountEntryRecId)
    {
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;

        select firstonly RecId, IsCredit, LedgerDimension from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == _generalJournalAccountEntryRecId
        join AccountingDate, RecId from generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
        join Type from fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod;

        if (generalJournalAccountEntry.RecId != 0)
        {
            generalJournalAccountEntryZakat.ItemCode =
                GeneralJournalAccountEntryZakat_SA::itemCode(generalJournalEntry.RecId, generalJournalAccountEntry.LedgerDimension, generalJournalAccountEntry.IsCredit);

            generalJournalAccountEntryZakat.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            generalJournalAccountEntryZakat.PeriodCode = fiscalCalendarPeriod.Type;
            generalJournalAccountEntryZakat.FiscalYr = year(LedgerFiscalCalendar::findClosingPeriodEndDateByDate(CompanyInfoHelper::fiscalCalendarRecId(),  generalJournalEntry.AccountingDate));
            generalJournalAccountEntryZakat.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts opening balance zakat journal line.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    public static void insertOpeningBalance(LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        AmountCur                               openingBalance;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntryCr;
        GeneralJournalAccountEntry              generalJournalAccountEntryDr;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryzakat;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryzakatLoc;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryzakatOpening;
        LedgerInfoZakat_SA                      ledgerInfoZakat;
        LedgerItemCodeZakat_SA                  ledgerItemCodeZakat;
        MainAccount                             mainAccount;
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;

        while select ItemCode, ItemType from ledgerItemCodeZakat
            where ledgerItemCodeZakat.IsBalance == NoYes::Yes
            join RecId from mainAccount
                where mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
            join RecId from dimensionAttributeValue
                where dimensionAttributeValue.EntityInstance == mainAccount.RecId
            join OpeningBalanceItemCode from ledgerInfoZakat
                where ledgerInfoZakat.DimensionAttributeValue == dimensionAttributeValue.RecId
                   && ledgerInfoZakat.OpeningBalanceItemCode  == ledgerItemCodeZakat.ItemCode
            join ValueCombinationRecId from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.AttributeValueRecId == ledgerInfoZakat.DimensionAttributeValue
            join RecId, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.LedgerDimension == dimensionAttributeLevelValueView.ValueCombinationRecId
            exists join GeneralJournalAccountEntry from generalJournalAccountEntryzakat
                where generalJournalAccountEntryzakat.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                   && generalJournalAccountEntryzakat.FiscalYr                   == _fiscalYear
        {
            if (ledgerInfoZakat.OpeningBalanceItemCode != LedgerItemCodeZakat_SA::findItemCodeFromType(LedgerItemTypeZakat_SA::InventoryOpening))
            {
                select sum(TransactionCurrencyAmount)
                    from generalJournalAccountEntryCr
                        where generalJournalAccountEntryCr.TransactionCurrencyAmount < 0
                           && generalJournalAccountEntryCr.LedgerDimension == generalJournalAccountEntry.LedgerDimension
                    join GeneralJournalAccountEntry from generalJournalAccountEntryzakatLoc
                        where generalJournalAccountEntryzakatLoc.GeneralJournalAccountEntry == generalJournalAccountEntryCr.RecId
                           && generalJournalAccountEntryzakatLoc.FiscalYr                   == _fiscalYear
                           && generalJournalAccountEntryzakatLoc.PeriodCode                 == FiscalPeriodType::Operating
                           && generalJournalAccountEntryzakatLoc.ItemCode                   == ledgerItemCodeZakat.ItemCode;

                select sum(TransactionCurrencyAmount)
                    from generalJournalAccountEntryDr
                        where generalJournalAccountEntryDr.TransactionCurrencyAmount > 0
                           && generalJournalAccountEntryDr.LedgerDimension == generalJournalAccountEntry.LedgerDimension
                    join GeneralJournalAccountEntry from generalJournalAccountEntryzakatLoc
                        where generalJournalAccountEntryzakatLoc.GeneralJournalAccountEntry == generalJournalAccountEntryDr.RecId
                           && generalJournalAccountEntryzakatLoc.FiscalYr                   == _fiscalYear
                           && generalJournalAccountEntryzakatLoc.PeriodCode                 == FiscalPeriodType::Operating
                           && generalJournalAccountEntryzakatLoc.ItemCode                   == ledgerItemCodeZakat.ItemCode;
            }
            switch (ledgerItemCodeZakat.ItemType)
            {
                case LedgerItemTypeZakat_SA::Capital                   :
                case LedgerItemTypeZakat_SA::CarriedOverProfits        :
                case LedgerItemTypeZakat_SA::Reservations              :
                case LedgerItemTypeZakat_SA::Provisions                :
                case LedgerItemTypeZakat_SA::Loans                     :
                case LedgerItemTypeZakat_SA::OwnersPartnersAccount     :
                case LedgerItemTypeZakat_SA::OtherAddedItems           :
                case LedgerItemTypeZakat_SA::ReservationsAndProvisions :
                    openingBalance  = GeneralJournalAccountEntryZakat_SA::findOpeningBalance(generalJournalAccountEntry.RecId, _fiscalYear, ledgerItemCodeZakat.ItemCode)
                                        + abs(generalJournalAccountEntryCr.TransactionCurrencyAmount) - generalJournalAccountEntryDr.TransactionCurrencyAmount;
                    break;
                case LedgerItemTypeZakat_SA::FixedAssetsNetValue       :
                case LedgerItemTypeZakat_SA::Investments               :
                case LedgerItemTypeZakat_SA::CarriedOverLosses         :
                case LedgerItemTypeZakat_SA::PresettingExpenses        :
                case LedgerItemTypeZakat_SA::OtherChargedItems         :
                    openingBalance = GeneralJournalAccountEntryZakat_SA::findOpeningBalance(generalJournalAccountEntry.RecId, _fiscalYear, ledgerItemCodeZakat.ItemCode)
                                        + generalJournalAccountEntryDr.TransactionCurrencyAmount - abs(generalJournalAccountEntryCr.TransactionCurrencyAmount);
                    break;
                case LedgerItemTypeZakat_SA::InventoryOpening          :
                        openingBalance = GeneralJournalAccountEntryZakat_SA::findOpeningBalance(generalJournalAccountEntry.RecId, _fiscalYear, ledgerItemCodeZakat.ItemCode)
                                            + GeneralJournalAccountEntryZakat_SA::getClosingBalFromFiscalYr(_fiscalYear, generalJournalAccountEntry.RecId);
                    break;
                default :
                    break;
            }
            if (openingBalance)
            {
                generalJournalAccountEntryzakatOpening.FiscalYr   = _fiscalYear + 1;
                generalJournalAccountEntryzakatOpening.PeriodCode = FiscalPeriodType::Operating;
                generalJournalAccountEntryzakatOpening.ItemCode   = ledgerItemCodeZakat.ItemCode;
                generalJournalAccountEntryzakatOpening.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReversalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts reversal journal line.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecIdPrev">
    /// The previouse record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </param>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record id of the <c>GeneralJournalAccountEntry</c> table record.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    public static void insertReversalTrans(
        GeneralJournalAccountEntryRecId     _generalJournalAccountEntryRecIdPrev,
        GeneralJournalAccountEntryRecId     _generalJournalAccountEntryRecId,
        TransDate                           _transDate)
    {
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakatLoc;
        FiscalCalendarRecId                 calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        select firstonly generalJournalAccountEntryZakat
            where generalJournalAccountEntryZakat.GeneralJournalAccountEntry == _generalJournalAccountEntryRecIdPrev;

        if (generalJournalAccountEntryZakat)
        {
            generalJournalAccountEntryZakatLoc.ItemCode                       = generalJournalAccountEntryZakat.ItemCode;
            generalJournalAccountEntryZakatLoc.SalesType                      = generalJournalAccountEntryZakat.SalesType;
            generalJournalAccountEntryZakatLoc.SalesId                        = generalJournalAccountEntryZakat.SalesId;
            generalJournalAccountEntryZakatLoc.ProjId                         = generalJournalAccountEntryZakat.ProjId;
            generalJournalAccountEntryZakatLoc.AssetGroup                     = generalJournalAccountEntryZakat.AssetGroup;
            generalJournalAccountEntryZakatLoc.Subcontractor                  = generalJournalAccountEntryZakat.Subcontractor;
            generalJournalAccountEntryZakatLoc.ContractNum                    = generalJournalAccountEntryZakat.ContractNum;
            generalJournalAccountEntryZakatLoc.GeneralJournalAccountEntry     = _generalJournalAccountEntryRecId;
            generalJournalAccountEntryZakatLoc.PeriodCode                     = generalJournalAccountEntryZakat.PeriodCode;
            generalJournalAccountEntryZakatLoc.FiscalYr                       = year(LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId,  _transDate));
            generalJournalAccountEntryZakatLoc.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertZakatInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts zakat journal line by fixed-price or time and material project type.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The record of the <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    public static void insertZakatInformation(
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        Voucher                     _voucher,
        TransDate                   _accountingDate)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTransProj;
        ProjTable                   projTable;

        if (_generalJournalAccountEntry.ProjId_SA )
        {
            projTable = ProjTable::find(_generalJournalAccountEntry.ProjId_SA);
        }
        else
        {
            select RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher == _voucher
                   && ledgerJournalTrans.TransDate == _accountingDate
            join ProjId from ledgerJournalTransProj
                where ledgerJournalTransProj.RefRecId == ledgerJournalTrans.RecId
            join Type from projTable
                where projTable.ProjId == ledgerJournalTransProj.ProjId;
        }

        if ((projTable.Type == ProjType::FixedPrice || projTable.Type == ProjType::TimeMaterial)
            || (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
            && (ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Cost, ProjContractBillingMethod::FixedPrice)
            ||  ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Cost, ProjContractBillingMethod::TimeMaterial))))
        {
            GeneralJournalAccountEntryZakat_SA::insertZakatTrans(_generalJournalAccountEntry, _voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertZakatTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts zakat journal line.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The record of the <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    public static void insertZakatTrans(
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        Voucher                     _voucher)
    {
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;
        LedgerJournalTransZakat_SA          ledgerJournalTransZakat;
        CustTrans                           custTrans;
        ProjTransPosting                    projTransPosting;
        FiscalCalendarRecId                 calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        InventTrans                         inventTrans;
        VendInvoiceJour                     vendInvoiceJour;
        VendInfoZakat_SA                    vendInfoZakat;

        select firstonly AccountingDate, JournalCategory, RecId from generalJournalEntry
            where generalJournalEntry.RecId == _generalJournalAccountEntry.GeneralJournalEntry
        join Type from fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod;

        generalJournalAccountEntryZakat.ItemCode =
            GeneralJournalAccountEntryZakat_SA::itemCode(generalJournalEntry.RecId, _generalJournalAccountEntry.LedgerDimension, _generalJournalAccountEntry.IsCredit);

        generalJournalAccountEntryZakat.GeneralJournalAccountEntry = _generalJournalAccountEntry.RecId;
        generalJournalAccountEntryZakat.PeriodCode = fiscalCalendarPeriod.Type;
        generalJournalAccountEntryZakat.FiscalYr = year(LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId,  generalJournalEntry.AccountingDate));

        ledgerJournalTransZakat = LedgerJournalTransZakat_SA::findRefRecId(LedgerJournalTrans::findJournalForVoucher(_voucher, generalJournalEntry.AccountingDate).RecId);

        if (ledgerJournalTransZakat)
        {
            generalJournalAccountEntryZakat.SalesType          = ledgerJournalTransZakat.SalesType;
            generalJournalAccountEntryZakat.SalesId            = ledgerJournalTransZakat.SalesId;
            generalJournalAccountEntryZakat.ProjId             = ledgerJournalTransZakat.ProjId;
            generalJournalAccountEntryZakat.Subcontractor      = ledgerJournalTransZakat.Subcontractor;
            generalJournalAccountEntryZakat.ContractNum        = ledgerJournalTransZakat.ContractNum;
            generalJournalAccountEntryZakat.AssetGroup         = ledgerJournalTransZakat.AssetGroup;
        }

        if (generalJournalEntry.JournalCategory == LedgerTransType::Purch)
        {
            select firstonly InventTransOrigin from inventTrans
                where inventTrans.Voucher == _voucher;

            vendInvoiceJour = VendInvoiceTrans::findInventTransId(InventTransOrigin::find(inventTrans.InventTransOrigin).InventTransId).vendInvoiceJour();
            vendInfoZakat   = VendInfoZakat_SA::findByVendAccount(vendInvoiceJour.OrderAccount);

            if (vendInfoZakat.IsSubcontractor)
            {
                generalJournalAccountEntryZakat.Subcontractor      = vendInfoZakat.RecId;
                generalJournalAccountEntryZakat.ContractNum        = vendInvoiceJour.ContractNum_SA;
            }
        }
        if (generalJournalEntry.JournalCategory == LedgerTransType::Sales)
        {
            custTrans = CustTrans::findVoucherDate(_voucher, generalJournalEntry.AccountingDate);

            generalJournalAccountEntryZakat.SalesType  = SalesTypeZakat_SA::Sales;
            generalJournalAccountEntryZakat.SalesId    = CustInvoiceJour::findFromCustTrans(custTrans.Invoice,
                                                                     custTrans.TransDate,
                                                                     custTrans.AccountNum).SalesId;
        }
        if (generalJournalEntry.JournalCategory == LedgerTransType::Project)
        {
            select ProjId
                from projTransPosting
                    where projTransPosting.Voucher          == _voucher
                       && projTransPosting.LedgerTransDate  == generalJournalEntry.AccountingDate;

            generalJournalAccountEntryZakat.ProjId     = projTransPosting.ProjId;
            generalJournalAccountEntryZakat.SalesType  = generalJournalAccountEntryZakat.ProjId ? SalesTypeZakat_SA::Projects : SalesTypeZakat_SA::Other;
        }
        if (generalJournalEntry.JournalCategory == LedgerTransType::Invent)
        {
            generalJournalAccountEntryZakat.SalesType = generalJournalAccountEntryZakat.ProjId ? SalesTypeZakat_SA::Projects :SalesTypeZakat_SA::Other;
        }
        if (! generalJournalAccountEntryZakat.ProjId && ! generalJournalAccountEntryZakat.SalesId)
        {
            select ProjId
                from projTransPosting
                    where projTransPosting.Voucher          == _voucher
                       && projTransPosting.LedgerTransDate  == generalJournalEntry.AccountingDate;

            if (projTransPosting.ProjId)
            {
                generalJournalAccountEntryZakat.ProjId     = projTransPosting.ProjId;
                generalJournalAccountEntryZakat.SalesType  = SalesTypeZakat_SA::Projects;
            }
        }

        generalJournalAccountEntryZakat.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets debit or credit transaction Zakat item.
    /// </summary>
    /// <param name="_generalJournalEntryRecId">
    /// The record id of the <c>GeneralJournalEntry</c> table record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledger dimension account.
    /// </param>
    /// <param name="_crediting">
    /// An enumeration that indicates get debit or credit item code
    /// </param>
    /// <returns>
    /// The Zakat item code.
    /// </returns>
    public static LedgerItemNumZakat_SA itemCode(
        GeneralJournalEntryRecId    _generalJournalEntryRecId,
        LedgerDimensionAccount      _ledgerDimension,
        NoYes                       _crediting)
    {
        LedgerItemNumZakat_SA   itemCode;
        MainAccount             mainAccount;
        LedgerInfoZakat_SA      zakatLedgerInfo;
        LedgerDimensionAccount  ledgerDimensionAccount;

        ledgerDimensionAccount = GeneralJournalAccountEntryZakat_SA::getAttributeValueRecId(_generalJournalEntryRecId, _ledgerDimension);

        mainAccount     = LedgerInfoZakat_SA::findMainAccountFromDimnAttrVal(ledgerDimensionAccount);
        zakatLedgerInfo = LedgerInfoZakat_SA::findByDimAttrValueRecId(ledgerDimensionAccount);

        switch (mainAccount.Type)
        {
            case DimensionLedgerAccountType::ProfitAndLoss,
                 DimensionLedgerAccountType::Revenue,
                 DimensionLedgerAccountType::Expense:

                itemCode =  _crediting ? zakatLedgerInfo.ProfitLossCreditItemCode :zakatLedgerInfo.ProfitLossDebitItemCode;
                break;

            case DimensionLedgerAccountType::Asset,
                 DimensionLedgerAccountType::BalanceSheet,
                 DimensionLedgerAccountType::Liability:

                itemCode = _crediting ? zakatLedgerInfo.CreditItemCode : zakatLedgerInfo.DebitItemCode;
                break;

            default:
                break;
        }

        return itemCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets message if the record is not existed.
    /// </summary>
    /// <param name="_recId">
    /// The record id of the <c>GeneralJournalAccountEntryZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// The message.
    /// </returns>
    public static TxtNotExist txtNotExist(RecId _recId)
    {
        return strFmt("@SYS102169", _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubLedgerInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>GeneralJournalAccountEntryZakat_SA</c> records.
    /// </summary>
    /// <param name="_subLedgerVoucher">
    /// The value of the subledger voucher.
    /// </param>
    /// <param name="_accountingDate">
    /// The value of the trans date.
    /// </param>
    /// <param name="_dataAreaId">
    /// The value of the data area ID.
    /// </param>
    /// <remarks>
    /// This method updates the subledger information for Zakat records.
    /// </remarks>
    public static void updateSubLedgerInformation(
        Voucher         _subLedgerVoucher,
        TransDate       _accountingDate,
        DataAreaId      _dataAreaId)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;
        VendTrans                           vendTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        VendInfoZakat_SA                    vendInfoZakat;

        ttsbegin;
        while select forupdate generalJournalAccountEntryZakat
        join generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == generalJournalAccountEntryZakat.GeneralJournalAccountEntry
        join RecId from subledgerVoucherLink
            where subledgerVoucherLink.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                && subledgerVoucherLink.Voucher == _subLedgerVoucher
                && subledgerVoucherLink.VoucherDataAreaId  == _dataAreaId
                && subledgerVoucherLink.AccountingDate == _accountingDate
        join AccountNum, Invoice, TransDate from vendTrans
            where vendTrans.Voucher == subledgerVoucherLink.Voucher
                && vendTrans.TransDate == subledgerVoucherLink.AccountingDate
        join RecId from vendInfoZakat
            where vendInfoZakat.VendAccount == vendTrans.AccountNum
                && vendInfoZakat.IsSubcontractor
        {
            generalJournalAccountEntryZakat.Subcontractor = vendInfoZakat.RecId;
            generalJournalAccountEntryZakat.ContractNum   = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice,
                                                                                                vendTrans.TransDate,
                                                                                                vendTrans.AccountNum).ContractNum_SA;
            generalJournalAccountEntryZakat.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322156</DeveloperDocumentation>
	<Label>@SYS23470</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemCode</TitleField1>
	<TitleField2>AssetGroup</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subcontractor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalYr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MaintenanceExpense</Name>
			<Label>@SYS73307</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revenue</Name>
			<Label>@SYS10074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subcontractor</Name>
			<Label>@SYS22167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Subcontractor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ZakatItem</Name>
			<Label>@SYS322146</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS136007</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendContractNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FiscalYr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerFiscalYearZakat_SA</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralJournalAccountEntry</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerItemNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>FiscalPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesTypeZakat_SA</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Subcontractor</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS321589</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GeneralJournalAccountEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>YrPeriodCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalYr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetGroupZakatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInfoZakatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Subcontractor</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroupZakat</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroupZakat_SA</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroupZakat_SA</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>GeneralJournalAccountEntryZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<Field>AssetGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalAccountEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalAccountEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>GeneralJournalAccountEntry</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>GeneralJournalAccountEntryZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralJournalAccountEntry</Name>
					<Field>GeneralJournalAccountEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInfoZakat</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInfoZakat_SA</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInfoZakat_SA</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>GeneralJournalAccountEntryZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Subcontractor</Name>
					<Field>Subcontractor</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>