<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSourceIntegratorEnabled</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlSourceIntegratorEnabled extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetControlSourceIntegratorEnabled</c>
    /// table exists and displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetControlSourceIntegratorEnabled</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetControlSourceIntegratorEnabled::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetControlSourceIntegratorEnabled::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetControlSourceIntegratorEnabled</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetControlSourceIntegratorEnabled</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetControlSourceIntegratorEnabled
                    where budgetControlSourceIntegratorEnabled.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByConfigurationSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetControlSourceIntegratorEnabled</c> table exists.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_integrator">
    /// The budget control source integrator of the <c>BudgetControlSourceIntegratorEnabled</c> table to
    /// check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByConfigurationSourceIntegrator(
        BudgetControlConfigurationRecId _controlConfigurationRecId,
        BudgetControlSourceIntegrator _integrator)
    {
        boolean found;

        found = (select firstonly RecId from budgetControlSourceIntegratorEnabled
                    where budgetControlSourceIntegratorEnabled.BudgetControlConfiguration == _controlConfigurationRecId
                        && budgetControlSourceIntegratorEnabled.BudgetControlSourceIntegrator == _integrator).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetControlSourceIntegratorEnabled</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlSourceIntegratorEnabled</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlSourceIntegratorEnabled find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlSourceIntegratorEnabled budgetControlSourceIntegratorEnabled;

        budgetControlSourceIntegratorEnabled.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlSourceIntegratorEnabled.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetControlSourceIntegratorEnabled
            where budgetControlSourceIntegratorEnabled.RecId == _recId;

        return budgetControlSourceIntegratorEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConfigurationSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetControlSourceIntegratorEnabled</c> table.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_integrator">
    /// The budget control source integrator of the <c>BudgetControlSourceIntegratorEnabled</c> table record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlSourceIntegratorEnabled</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlSourceIntegratorEnabled findByConfigurationSourceIntegrator(
        BudgetControlConfigurationRecId _controlConfigurationRecId,
        BudgetControlSourceIntegrator _integrator,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlSourceIntegratorEnabled budgetControlSourceIntegratorEnabled;

        budgetControlSourceIntegratorEnabled.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlSourceIntegratorEnabled.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetControlSourceIntegratorEnabled
            where budgetControlSourceIntegratorEnabled.BudgetControlConfiguration == _controlConfigurationRecId
                && budgetControlSourceIntegratorEnabled.BudgetControlSourceIntegrator == _integrator;

        return budgetControlSourceIntegratorEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDoBudgetCheckOnEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default value for whether to check budget at line entry for the specified source integrator.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Set</c> class that contains the source integrators that are always enabled for budget control.
    /// </returns>
    public static BudgetControlSourceIntegratorDoCheckOnEntry getDefaultDoBudgetCheckOnEntry(BudgetControlSourceIntegrator _integrator)
    {
        BudgetControlSourceIntegratorDoCheckOnEntry defaultDoBudgetCheckOnEntry = false;

        switch (_integrator)
        {
            case BudgetControlSourceIntegrator::PurchCommitment_PSN:
                defaultDoBudgetCheckOnEntry = true;
                break;
        }

        return defaultDoBudgetCheckOnEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceIntegratorsAlwaysEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source integrators that are always enabled for budget control.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Set</c> class that contains the source integrators that are always enabled for budget control.
    /// </returns>
    public static Set getSourceIntegratorsAlwaysEnabled()
    {
        Set sourceIntegratorsAlwaysEnabled = new Set(Types::Enum);

        // Changes to this set should also be applied to the range on the BudgetControlDocumentsAndJournalsEntity entity.
        sourceIntegratorsAlwaysEnabled.add(BudgetControlSourceIntegrator::BudgetTransaction);
        sourceIntegratorsAlwaysEnabled.add(BudgetControlSourceIntegrator::LedgerEntry);

        return sourceIntegratorsAlwaysEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequiredSourceIntegrators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source integrators that are required to be when the specified source integrator is enabled.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Map</c> class that contains the source integrators that are always enabled for budget control
    /// and whether the integrator should have the check at line item entry enabled by default.
    /// </returns>
    public static Map getRequiredSourceIntegrators(BudgetControlSourceIntegrator _integrator)
    {
        Map sourceIntegratorsRequired = new Map(Types::Enum, Types::Enum);

        switch (_integrator)
        {
            case BudgetControlSourceIntegrator::PurchaseOrder:
                sourceIntegratorsRequired.insert(BudgetControlSourceIntegrator::VendorInvoice, NoYes::No);
                break;

            case BudgetControlSourceIntegrator::PurchaseRequisition:
                sourceIntegratorsRequired.insert(BudgetControlSourceIntegrator::PurchaseOrder, NoYes::No);
                sourceIntegratorsRequired.insert(BudgetControlSourceIntegrator::VendorInvoice, NoYes::No);
                break;

            case BudgetControlSourceIntegrator::PurchCommitment_PSN:
                sourceIntegratorsRequired.insert(BudgetControlSourceIntegrator::PurchaseOrder, NoYes::Yes);
                sourceIntegratorsRequired.insert(BudgetControlSourceIntegrator::VendorInvoice, NoYes::Yes);
                break;
        }

        return sourceIntegratorsRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModifyEnabledAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified source integrator enablement is allowed to be modified.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_integrator">
    /// The budget control source integrator for which to check.
    /// </param>
    /// <returns>
    /// true if the specified source integrator enablement is allowed to be modified; otherwise, false.
    /// </returns>
    public static boolean isModifyEnabledAllowed(BudgetControlConfigurationRecId _controlConfigurationRecId, BudgetControlSourceIntegrator _integrator)
    {
        boolean isModifyEnabledAllowed;

        Set integratorsAlwaysEnabled = BudgetControlSourceIntegratorEnabled::getSourceIntegratorsAlwaysEnabled();

        if (integratorsAlwaysEnabled.in(_integrator))
        {
            isModifyEnabledAllowed = false;
        }
        else
        {
            switch (_integrator)
            {
                case BudgetControlSourceIntegrator::VendorInvoice:
                    boolean isPurchaseOrderEnabled = BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(
                        _controlConfigurationRecId,
                        BudgetControlSourceIntegrator::PurchaseOrder);
                    
                    boolean isGeneralBudgetReservationsEnabled = BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(
                        _controlConfigurationRecId,
                        BudgetControlSourceIntegrator::BudgetReservation_PSN);
                    
                    if (isPurchaseOrderEnabled || isGeneralBudgetReservationsEnabled) 
                    {
                        // Invoice enablement is required and is not allowed to be turned off as it has to relieve the encumbrance category.
                        isModifyEnabledAllowed = false;
                    }
                    else
                    {
                        isModifyEnabledAllowed = true;
                    }
                    break;

                case BudgetControlSourceIntegrator::PurchaseOrder:
                    boolean isPurchaseRequisitionEnabled = BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(
                        _controlConfigurationRecId,
                        BudgetControlSourceIntegrator::PurchaseRequisition);

                    boolean isPurchCommitmentEnabled = BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(
                        _controlConfigurationRecId,
                        BudgetControlSourceIntegrator::PurchCommitment_PSN);

                    boolean isGeneralBudgetReservationPOEnabled = BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(
                        _controlConfigurationRecId,
                        BudgetControlSourceIntegrator::BudgetReservation_PSN);
                    
                    if (isPurchaseRequisitionEnabled || isPurchCommitmentEnabled || isGeneralBudgetReservationPOEnabled)
                    {
                        // Purchase order enablement is required and is not allowed to be turned off as it has to relieve the pre-encumbrance category.
                        isModifyEnabledAllowed = false;
                    }
                    else
                    {
                        isModifyEnabledAllowed = true;
                    }
                    break;

                case BudgetControlSourceIntegrator::PurchaseRequisition:
                    if (PublicSectorUtils::isFrenchRegulatoryEnabled())
                    {
                        // Purchase requisition enablement is not allowed to be modified if the French Regulatory features are enabled.
                        isModifyEnabledAllowed = false;
                    }
                    else
                    {
                        isModifyEnabledAllowed = true;
                    }
                    break;
                
                case BudgetControlSourceIntegrator::BudgetReservation_PSN:
                    if (PublicSectorUtils::isBudgetReservationEnabled())
                    {
                        isModifyEnabledAllowed = true;
                    }
                    else
                    {
                        isModifyEnabledAllowed = false;
                    }
                    break;
                
                default:
                    // By default all integrators enablement is allowed to be modified.
                    isModifyEnabledAllowed = true;
                    break;
            }
        }

        return isModifyEnabledAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModifyDoBudgetCheckOnEntryAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified source integrator allows the option to check budget on entry.
    /// </summary>
    /// <param name="_integrator">
    /// The budget control source integrator for which to check.
    /// </param>
    /// <returns>
    /// true if the specified source integrator allows the option to check budget on entry; otherwise, false.
    /// </returns>
    public static boolean isModifyDoBudgetCheckOnEntryAllowed(BudgetControlSourceIntegrator _integrator)
    {
        boolean isModifyDoBudgetCheckOnEntryAllowed;

        switch (_integrator)
        {
            case BudgetControlSourceIntegrator::Payroll:
                isModifyDoBudgetCheckOnEntryAllowed = false;
                break;

            case BudgetControlSourceIntegrator::PurchCommitment_PSN:
                isModifyDoBudgetCheckOnEntryAllowed = false;
                break;
           
            default:
                // By default all integrators allow for the option to check budget on entry.
                isModifyDoBudgetCheckOnEntryAllowed = true;
                break;
        }

        return isModifyDoBudgetCheckOnEntryAllowed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS327690</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@SYS327691</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetControlSourceIntegrator</TitleField1>
	<TitleField2>DoBudgetCheckOnEntry</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>ConfigurationSourceIntegratorIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlSourceIntegrator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoBudgetCheckOnEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlSourceIntegrator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DoBudgetCheckOnEntry</Name>
			<Label>@SYS309236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DoBudgetCheckOnEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlSourceIntegrator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetControlConfiguration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetControlConfigurationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetControlSourceIntegrator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetControlSourceIntegrator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DoBudgetCheckOnEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS309236</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>BudgetControlSourceIntegratorQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetControlSourceIntegratorQuery</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConfigurationSourceIntegratorIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetControlSourceIntegrator</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetControlConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetControlConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetControlConfiguration</Name>
					<Field>BudgetControlConfiguration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>