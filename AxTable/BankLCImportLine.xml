<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankLCImportLine extends BankLCLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Letter of Credit record related to this <c>BankLCImportLine</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCImport</c> table.
    /// </returns>
    public BankLCImport getBankLCImport(boolean _forUpdate = false)
    {
        return BankLCImport::find(this.BankLC, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit line is updated with packing slip.
    /// </summary>
    /// <returns>
    /// true if it is updated with packing slip; otherwise, false.
    /// </returns>
    public boolean hasPackingSlip()
    {
        return this.ImportShipmentStatus == BankLCImportShipmentStatusType::PackingSlipUpdated
            || this.ImportShipmentStatus == BankLCImportShipmentStatusType::InvoiceUpdated
            || this.ImportShipmentStatus == BankLCImportShipmentStatusType::Paid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record in the <c>BankLCImportLine</c> table.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    /// The letter of credit record.
    /// </param>
    /// <param name="_defaultDeliveryDate">
    /// The default delivery date.
    /// </param>
    /// <param name="_amount">
    /// The default shipment amount.
    /// </param>
    public void initShipmentLine(
        BankLCRefRecId  _bankLCRefRecId,
        TransDate       _defaultDeliveryDate,
        AmountCur       _amount)
    {
        TransDateTime expectedDeliveryDateTime;

        super(_bankLCRefRecId, _defaultDeliveryDate, _amount);

        expectedDeliveryDateTime        = this.ActualMaturityDateTime;
        this.ExpectedMaturityDateTime   = expectedDeliveryDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.ImportShipmentStatus = BankLCImportShipmentStatusType::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the letter of credit line is updated with invoiced.
    /// </summary>
    /// <returns>
    /// true if it is updated with invoiced; otherwise, false.
    /// </returns>
    public boolean isInvoiced()
    {
        return this.ImportShipmentStatus == BankLCImportShipmentStatusType::InvoiceUpdated
            || this.ImportShipmentStatus == BankLCImportShipmentStatusType::Paid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateInvoiceAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BankLCLine</c> record is allowed for updating an invoice.
    /// </summary>
    /// <returns>
    /// true if the <c>BankLCLine</c> is allowed for updating invoice; otherwise, false.
    /// </returns>
    public boolean isUpdateInvoiceAllowed()
    {
        return this.ImportShipmentStatus == BankLCImportShipmentStatusType::PackingSlipUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdatePackingslipAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BankLCLine</c> record is allowed for updating a packing slip.
    /// </summary>
    /// <returns>
    /// true if the <c>BankLCLine</c> is allowed for updating packing slip; otherwise, false.
    /// </returns>
    public boolean isUpdatePackingslipAllowed()
    {
        return this.ImportShipmentStatus == BankLCImportShipmentStatusType::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.ImportShipmentStatus != BankLCImportShipmentStatusType::Created)
            {
                // Shipment line could only be deleted when its status is "Created".
                ret = checkFailed("@SYS316276");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentAmountCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the shipment amount of letter of credit depending on currency.
    /// </summary>
    /// <returns>
    ///    The shipment amount depends on currency.
    /// </returns>
    public BankLCShipmentAmountCur getShipmentAmountCurrency()
    {
        BankLCImport bankLCImport = this.getBankLCImport();

        return CurrencyExchangeHelper::curAmount2CurAmount(
            this.ShipmentAmountCur,
            bankLCImport.getCurrencyCode(),
            bankLCImport.getBankDocumentFacilityAgreement().getBankAccountTable().CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countUnInvoicedBankLCImportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of unprocessed invoice shipment lines of the letter of credit.
    /// </summary>
    /// <param name="_bankLCImportTabelRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// The number of unprocessed invoice shipment lines of the letter of credit
    /// </returns>
    public static BankLCNumberOfShipmentLines countUnInvoicedBankLCImportLines(
        BankLCRefRecId _bankLCImportTabelRefRecId)
    {
        BankLCImportLine bankLCImportLineLocal;

        select count(LineNum) from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC == _bankLCImportTabelRefRecId
                && (bankLCImportLineLocal.ImportShipmentStatus    == BankLCImportShipmentStatusType::Open
                    || bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::PackingSlipUpdated);

        return bankLCImportLineLocal.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countUnPackingSlipedBankLCImportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of shipment lines that do not have updated packing slips.
    /// </summary>
    /// <param name="_bankLCImportTabelRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// The number of the lines.
    /// </returns>
    public static BankLCNumberOfShipmentLines countUnPackingSlipedBankLCImportLines(
        BankLCRefRecId _bankLCImportTabelRefRecId)
    {
        BankLCImportLine bankLCImportLineLocal;

        select count(LineNum) from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC                == _bankLCImportTabelRefRecId
                && bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Open;

        return bankLCImportLineLocal.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonPackingSlipBankLCImportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a shipment line exists that does not have an updated packing slips.
    /// </summary>
    /// <param name="_bankLCImportTabelRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// <c>true</c> if there exists shipment lines which have not been updated packing slips, else
    /// <c>false</c>.
    /// </returns>
    public static boolean existNonPackingSlipBankLCImportLines(
        BankLCRefRecId _bankLCImportTabelRefRecId)
    {
        BankLCImportLine bankLCImportLineLocal;

        select firstonly LineNum from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC                == _bankLCImportTabelRefRecId
                && bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Open;

        return bankLCImportLineLocal.LineNum != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnInvoicedBankLCImportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there exists un-invoiced shipment lines of the letter of credit.
    /// </summary>
    /// <param name="_bankLCImportTabelRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// <c>true</c> if there exists un-invoiced shipment lines of the Letter of Credit, else <c>false</c>
    /// </returns>
    public static boolean existUnInvoicedBankLCImportLines(
        BankLCRefRecId _bankLCImportTabelRefRecId)
    {
        BankLCImportLine bankLCImportLineLocal;

        select firstonly LineNum from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC == _bankLCImportTabelRefRecId
                && (bankLCImportLineLocal.ImportShipmentStatus    == BankLCImportShipmentStatusType::Open
                    || bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::PackingSlipUpdated);

        return bankLCImportLineLocal.LineNum != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the <c>BankLCImportLine</c> record based on the given record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankLCImportLine</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCImportLine</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImportLine find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        BankLCImportLine bankLCImportLocal;

        if (_recId)
        {
            bankLCImportLocal.selectForUpdate(_forUpdate);

            select firstonly bankLCImportLocal
                where bankLCImportLocal.RecId == _recId;
        }

        return bankLCImportLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByImportTableAndLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the <c>BankLCImportLine</c> record that is based on the given letter of credit
    /// record ID and line number
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The given letter of credit record ID.
    /// </param>
    /// <param name="_bankLCShipmentLineNum">
    /// The shipment line number.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCImportLine</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImportLine findByImportTableAndLineNum(
        BankLCRefRecId        _bankLCImportRefRecId,
        BankLCShipmentLineNum _bankLCShipmentLineNum,
        boolean               _forUpdate = false)
    {
        return BankLCImportLine::find(
            BankLCLine::findByTableAndLineNum(_bankLCImportRefRecId, _bankLCShipmentLineNum).RecId, _forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS316181</DeveloperDocumentation>
	<FormRef>BankLCImport</FormRef>
	<Label>@SYS316153</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ImportShipmentStatus</TitleField1>
	<TitleField2>DocumentStatus</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>BankLCLine</Extends>
	<Modules>Bank</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectedMaturityDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportShipmentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectedMaturityDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportShipmentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportShipmentDocumentStatus</ExtendedDataType>
			<EnumType>BankLCImportShipmentDocumentStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedMaturityDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportExpectedMaturityDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ImportShipmentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportShipmentStatus</ExtendedDataType>
			<EnumType>BankLCImportShipmentStatusType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ImportShipmentStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ImportShipmentStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankLCLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>