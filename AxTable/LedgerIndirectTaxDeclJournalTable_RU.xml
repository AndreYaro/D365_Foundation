<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerIndirectTaxDeclJournalTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerIndirectTaxDeclJournalTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the journal table is approved based on the approval of all <c>LedgerIndirectTaxDeclJournalTrans_RU</c> records.
    /// </summary>
    /// <returns>
    ///    true if the journal is approved; false otherwise.
    /// </returns>
    display Approved approved()
    {
        return ((select firstonly LedgerIndirectTaxDeclJournalTrans_RU
                    where LedgerIndirectTaxDeclJournalTrans_RU.JournalId  == this.JournalId).RecId &&
              ! (select firstonly LedgerIndirectTaxDeclJournalTrans_RU
                    where LedgerIndirectTaxDeclJournalTrans_RU.JournalId  == this.JournalId
                        && (   LedgerIndirectTaxDeclJournalTrans_RU.Approved == NoYes::No
                            || LedgerIndirectTaxDeclJournalTrans_RU.Status   == LedgerIndirectTaxDeclStatus_RU::NotCalculated)).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the start date of the period stored in the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> record.
    /// </summary>
    /// <returns>
    ///    The start date of the period stored in the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> record.
    /// </returns>
    display public FromDate fromDate()
    {
        return mkdate(1, (this.PeriodNum - 1) * LedgerIndirectTaxDeclJournalTable_RU::periodMthLength(this.PeriodType) + 1, this.FiscalYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this table buffer with default values.
    /// </summary>
    public void initValue()
    {
        super();

        this.PeriodType = LedgerIndirectTaxDeclPeriodType_RU::Month;
        this.initYearPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initYearPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes some period-related fields of the <c>LedgerIndirectTaxDeclJournalTable_RU</c> record.
    /// </summary>
    #TimeConstants
    public void initYearPeriod()
    {
        LedgerIndirectTaxDeclJournalTable_RU    journalTable;
        LedgerIndirectTaxDeclPeriodNum_RU       periodNum;
        Yr                                      fiscalYear;
        int                                     periodLag = LedgerIndirectTaxDeclJournalTable_RU::periodMthLength(this.PeriodType);

        select firstonly journalTable
            order by FiscalYear desc, PeriodNum desc
            where journalTable.PeriodType == this.PeriodType;

        if (journalTable)
        {
            fiscalYear = journalTable.FiscalYear;
            periodNum  = journalTable.PeriodNum + 1;
            if (periodNum div (#monthsPerYear / periodLag) && periodNum != (#monthsPerYear / periodLag))
            {
                fiscalYear++;
                periodNum = periodNum mod (#monthsPerYear / periodLag);
                periodNum = periodNum ? periodNum : 1;
            }
        }
        else
        {
            fiscalYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            if (this.PeriodType == LedgerIndirectTaxDeclPeriodType_RU::NineMonths)
                periodNum = 0;
            else
                periodNum  = mthofyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) div periodLag;

            if (periodNum * periodLag < mthofyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
            {
                periodNum++;
            }
        }

        this.FiscalYear = fiscalYear;
        this.PeriodNum  = periodNum;
        this.EndDate    = this.makeEndDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forms the end date of the period of the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> record
    ///    based on the type of period, the number of period and the year.
    /// </summary>
    /// <returns>
    ///    The end date of the period of the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> record.
    /// </returns>
    public TransDate makeEndDate()
    {
        return endmth(mkdate(1,
                             this.PeriodNum * LedgerIndirectTaxDeclJournalTable_RU::periodMthLength(this.PeriodType),
                             this.FiscalYear));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the end date of the period of the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> record.
    /// </summary>
    /// <returns>
    ///    The end date of the period of the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> record.
    /// </returns>
    display public ToDate toDate()
    {
        return this.EndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that deletion is possible.
    /// </summary>
    /// <returns>
    ///    true if deletion is possible; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = LedgerIndirectTaxDeclJournalTable_RU::nextJournalNotExists(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    #TimeConstants
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(LedgerIndirectTaxDeclJournalTable_RU, PeriodNum) :
                if (this.PeriodNum > #monthsPerYear / LedgerIndirectTaxDeclJournalTable_RU::periodMthLength(this.PeriodType) ||
                    this.PeriodNum < 0)
                {
                    ret = checkFailed(strfmt("@SYS21589", mkdate(1,1,this.FiscalYear),mkdate(31,#monthsPerYear,this.FiscalYear)));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current <c>LedgerIndirectTaxDeclJournalTable_RU</c>table buffer.
    /// </summary>
    /// <returns>
    ///    true if table buffer is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            this.EndDate = this.makeEndDate();
            ret = LedgerIndirectTaxDeclJournalTable_RU::canCreateJournal(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the indirect taxes declaration journal can be created.
    /// </summary>
    /// <param name="_journalTable">
    ///    Indirect taxes declaration journal table to check.
    /// </param>
    /// <returns>
    ///   true if the journal can be created; otherwise, false.
    /// </returns>
    public static boolean canCreateJournal(LedgerIndirectTaxDeclJournalTable_RU _journalTable)
    {
        LedgerIndirectTaxDeclJournalTable_RU    journalTable;
        boolean                                 ret;

        ret = LedgerIndirectTaxDeclJournalTable_RU::nextJournalNotExists(_journalTable);

        if (ret)
        {
            select firstonly journalTable
                order by PeriodType desc
                where journalTable.EndDate      == _journalTable.EndDate
                   && journalTable.PeriodType   <  _journalTable.PeriodType;

            if (journalTable.RecId)
            {
                if (! journalTable.approved())
                {
                    return checkFailed("@SYP4860039");
                }
            }

            select firstonly journalTable
                order by EndDate desc
                where journalTable.EndDate < _journalTable.EndDate;

            if (journalTable.RecId)
            {
                if (! journalTable.approved())
                {
                    return checkFailed("@SYP4860039");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_journalId">
    ///    The journal ID of the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table record to be checked.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(LedgerIndirectTaxDeclJournalId_RU  _journalId)
    {
        if (_journalId && ! LedgerIndirectTaxDeclJournalTable_RU::exist(_journalId))
            return checkFailed(strfmt(LedgerIndirectTaxDeclJournalTable_RU::txtNotExist(), _journalId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in the <c>LedgerIndirectTaxDeclJournalTrans_RU</c> table if there
    ///    were no records for the current <c>LedgerIndirectTaxDeclJournalTable_RU</c> table.
    /// </summary>
    /// <param name="_journalTable">
    ///    The record in the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table for which new lines are to be created.
    /// </param>
    /// <returns>
    ///    true if the records already exist or were created; otherwise, false.
    /// </returns>
    public static boolean createJournalTrans(LedgerIndirectTaxDeclJournalTable_RU   _journalTable)
    {
        LedgerIndirectTaxDeclJournalTrans_RU   journalTransLocal;
        Branches_RU                            branches;

        select firstonly RecId from journalTransLocal
            where journalTransLocal.JournalId == _journalTable.JournalId;

        if (journalTransLocal.RecId != 0)
        {
            return true;
        }

        if (Box::yesNo("@SYS4002848", DialogButton::Yes, "@SYS4002849", "@GLS104006") == DialogButton::No)
        {
            return false;
        }

        while select BranchId from branches
        {
            journalTransLocal.clear();
            journalTransLocal.initValue();
            journalTransLocal.initFromJournalTable(_journalTable);
            journalTransLocal.BranchId = branches.BranchId;
            journalTransLocal.OKATO    = journalTransLocal.getOkato();

            if (journalTransLocal.validateWrite())
            {
                journalTransLocal.insert();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table.
    /// </summary>
    /// <param name="_journalId">
    ///    The journal ID of the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table record to be checked.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(LedgerIndirectTaxDeclJournalId_RU  _journalId)
    {
        return _journalId &&
            (select firstonly RecId from LedgerIndirectTaxDeclJournalTable_RU
                 index JournalIdx
                 where LedgerIndirectTaxDeclJournalTable_RU.JournalId == _journalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    ///    The record found in the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table.
    /// </returns>
    public static LedgerIndirectTaxDeclJournalTable_RU find(LedgerIndirectTaxDeclJournalId_RU   _journalId,
                                                            boolean                             _forUpdate = false)
    {
        LedgerIndirectTaxDeclJournalTable_RU declarationJournalTable;

        if (_journalId)
        {
            declarationJournalTable.selectForUpdate(_forUpdate);

            select firstonly declarationJournalTable
                index hint JournalIdx
                where declarationJournalTable.JournalId == _journalId;
        }
        return declarationJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Static method which checks if there are journals fot later period exist.
    /// </summary>
    /// <param name="_journalTable">
    ///    Indirect taxes declaration journal table to check.
    /// </param>
    /// <param name="_showMessage">
    ///    Points if to show warning or not.
    /// </param>
    /// <returns>
    ///    true if there are no journals for the later period; otherwise, false.
    /// </returns>
    public static boolean nextJournalNotExists(LedgerIndirectTaxDeclJournalTable_RU    _journalTable,
                                                      boolean                                 _showMessage = true)
    {
        if ((select firstonly LedgerIndirectTaxDeclJournalTable_RU
                 where LedgerIndirectTaxDeclJournalTable_RU.EndDate > _journalTable.EndDate).RecId)
        {
            if (_showMessage)
            {
                return checkFailed("@SYP4860040");
            }
            else
            {
                return false;
            }
        }

        if ((select firstonly LedgerIndirectTaxDeclJournalTable_RU
                 where LedgerIndirectTaxDeclJournalTable_RU.EndDate     == _journalTable.EndDate &&
                       LedgerIndirectTaxDeclJournalTable_RU.PeriodType  >  _journalTable.PeriodType).RecId)
        {
            if (_showMessage)
            {
                return checkFailed("@SYP4860041");
            }
            else
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodMthLength</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the period length in monthes.
    /// </summary>
    /// <param name="_periodType">
    ///    The type of the period.
    /// </param>
    /// <returns>
    ///    The period length in monthes.
    /// </returns>
    #TimeConstants
    #define.monthsNine(9)
    static public int periodMthLength(LedgerIndirectTaxDeclPeriodType_RU _periodType)
    {
        int ret;

        switch (_periodType)
        {
            case LedgerIndirectTaxDeclPeriodType_RU::Month:
                ret = 1;
                break;
            case LedgerIndirectTaxDeclPeriodType_RU::Quarter:
                ret = #monthsPerQuarter;
                break;
            case LedgerIndirectTaxDeclPeriodType_RU::HalfYear:
                ret = #monthsPerHalfYear;
                break;
            case LedgerIndirectTaxDeclPeriodType_RU::Year:
                ret = #monthsPerYear;
                break;
            case LedgerIndirectTaxDeclPeriodType_RU::NineMonths:
                ret = #monthsNine;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>LedgerIndirectTaxDeclJournalTable_RU</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS17145";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4860019</DeveloperDocumentation>
	<FormRef>LedgerIndirectTaxDeclJournalTable_RU</FormRef>
	<Label>@SYP4860018</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>JournalId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>JournalIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>JournalIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerIndirectTaxDeclJournalTrans_RU</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerIndirectTaxDeclJournalTrans_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportingPeriod</Name>
			<Label>@SYS59333</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>toDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FiscalYear</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Yr</ExtendedDataType>
			<Label>@SYS32606</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerIndirectTaxDeclJournalId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS6303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PeriodNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerIndirectTaxDeclPeriodNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerIndirectTaxDeclPeriodType_RU</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>