<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocumentCity_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EFDocumentCity_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getThirdPartyPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's Third Party's address buffer.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsPostalAddress</c> buffer.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public LogisticsPostalAddress getThirdPartyPostalAddress()
    {
        FiscalDocument_BR       fiscalDocument;
        LogisticsPostalAddress  postalAddress;

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        fiscalDocument  = FiscalDocument_BR::find(this.FiscalDocument_BR);
        postalAddress   = LogisticsPostalAddress::findRecId(fiscalDocument.ThirdPartyPostalAddress);

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientAddressCompliment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address compliment.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressBuildingCompliment</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressBuildingCompliment recipientAddressCompliment()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address city.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressCity</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressCityName recipientCity()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientDistrict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address district.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressDistrictName</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressDistrictName recipientDistrict()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's email.
    /// </summary>
    /// <returns>
    /// A <c>Email</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display Email recipientEmail()
    {
        FiscalDocument_BR       fiscalDocument;
        CustTable               custTable;
        LogisticsElectronicAddress  electronicAddress;
        TransDateTime           transDateTime;
        Email                   recipientEmail;

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        fiscalDocument  = FiscalDocument_BR::find(this.FiscalDocument_BR);

        if (fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::Customer)
        {
            throw error("@SYS325444"); // Wrong account type
        }

        custTable       = CustTable::find(fiscalDocument.FiscalDocumentAccountNum);
        electronicAddress   = DirParty::primaryElectronicAddress(custTable.Party, LogisticsElectronicAddressMethodType::Email);

        transDateTime       = DateTimeUtil::newDateTime(fiscalDocument.FiscalDocumentDate, 0);
        if (electronicAddress)
        {
            recipientEmail = electronicAddress.Locator;
        }

        return recipientEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address state.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressStateId</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressStateId recipientState()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address street type and name.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressing</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressStreet recipientStreet()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address street number.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressStreetNumber</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressStreetNumber recipientStreetNumber()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().StreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Fiscal document's recipient's address ZIP code.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsAddressZipCodeId</c> value (string).
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display LogisticsAddressZipCodeId recipientZipCode()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.getThirdPartyPostalAddress().ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsCustCNPJCPF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the customer has CNPJ or CPF.
    /// </summary>
    /// <returns>
    /// '1' if CPF; '2' if CNPJ; '3' if empty.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if the recipient is not a customer.
    /// </exception>
    public display RPSCustCNPJCPF rpsCustCNPJCPF()
    {
        #RPSFlags_BR

        RPSCustCNPJCPF      rpsCustCNPJCPF;
        CustTable           custTable;
        FiscalDocument_BR   fiscalDocument      = FiscalDocument_BR::find(this.FiscalDocument_BR);

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        if (fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::Customer)
        {
            throw error("@SYS325444"); // Wrong account type
        }

        custTable = custTable::find(fiscalDocument.FiscalDocumentAccountNum);

        switch (custTable.partyType())
        {
            case DirPartyType::Person :
                rpsCustCNPJCPF = (custTable.CNPJCPFNum_BR ? #RPSCustPerson : #RPSCustOther);
                break;

            case DirPartyType::Organization :
                rpsCustCNPJCPF = (custTable.CNPJCPFNum_BR ? #RPSCustCompany : #RPSCustOther);
                break;

            default:
                rpsCustCNPJCPF = #RPSCustOther;
        }

        return rpsCustCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsCustServicesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total services amount of the Fiscal document.
    /// </summary>
    /// <returns>
    /// 0 if RPSStatus is cancelled or ISSExempt; the total services amount otherwise.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display InvoiceServicesAmount_BR rpsCustServicesAmount()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        if (this.RPSStatus == RPSStatus_BR::RPSCancelled
            ||  this.RPSStatus == RPSStatus_BR::IssExempt)
        {
            return 0;
        }
        else
        {
            return FiscalDocument_BR::find(this.FiscalDocument_BR).TotalServicesAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsExportFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the initial date of the RPS date range.
    /// </summary>
    /// <returns>
    /// The FromDate field as configured in the RPS Export form.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display FromDate rpsExportFromDate()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return RPSExportDateRange_BR::findRange().FromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsExportToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the final date of the RPS date range.
    /// </summary>
    /// <returns>
    /// The ToDate field as configured in the RPS Export form.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display ToDate rpsExportToDate()
    {
        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return RPSExportDateRange_BR::findRange().ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsISSDeductionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount of ISS tax deduction in the Fiscal document.
    /// </summary>
    /// <returns>
    /// The sum of all ISS amounts with Retained tax flag true.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display TaxAmount rpsISSDeductionAmount()
    {
        TaxTable            taxTable;
        TaxTrans            taxTrans;
        FiscalDocument_BR   fiscalDocument  = FiscalDocument_BR::find(this.FiscalDocument_BR);

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        select sum(TaxAmount) from taxTrans
            where   taxTrans.Voucher            == fiscalDocument.Voucher
                &&  taxTrans.TransDate          == fiscalDocument.FiscalDocumentDate
            join RecId from taxTable
                where   taxTable.TaxCode        == taxTrans.TaxCode
                    &&  taxTable.TaxType_BR     == TaxType_BR::ISS
                    &&  taxTable.RetainedTax_BR == NoYes::Yes;

        return taxTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsISSTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ISS tax value used in the Fiscal document.
    /// </summary>
    /// <returns>
    /// The first value found of the tax value of type ISS.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display TaxValue rpsISSTaxValue()
    {
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocument_BR           fiscalDocument          = FiscalDocument_BR::find(this.FiscalDocument_BR);

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        select firstOnly TaxValue from fiscalDocumentTaxTrans
            join RecId from fiscalDocumentLine
                where   fiscalDocumentLine.FiscalDocument   == fiscalDocument.RecId
                    &&  fiscalDocumentLine.RecId            == fiscalDocumentTaxTrans.FiscalDocumentLine
                    &&  fiscalDocumentTaxTrans.Type         == TaxType_BR::ISS;

        return fiscalDocumentTaxTrans.TaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsNumberWithoutPaddingZeros</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a treatment on RPSNumber field to remove the left zeros.
    /// </summary>
    /// <returns>
    ///  RSPNumber field value without left zeros.
    /// </returns>
    public display InvoiceId rpsNumberWithoutPaddingZeros()
    {
        return int2str(str2int(this.RPSNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsRetainedISS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the ISS tax is retained or not in the Fiscal document.
    /// </summary>
    /// <returns>
    /// 'S' for retained ISS; 'N' for non-retained ISS.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display RPSRetainedISS rpsRetainedISS()
    {
        #RPSFlags_BR

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        return this.rpsISSDeductionAmount() ? #ISSRetained : #ISSNormal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsRPSStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RPS status of the Fiscal document.
    /// </summary>
    /// <returns>
    /// 'T' if normal (payable); 'I' if exempt; 'F' if outside city; 'C' if cancelled.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display char rpsRPSStatus()
    {
        #RPSFlags_BR

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        switch (this.RPSStatus)
        {
            case RPSStatus_BR::IssPayable       : return #RPSIssPayable;
            case RPSStatus_BR::IssExempt        : return #RPSIssExempt;
            case RPSStatus_BR::IssOutsideCity   : return #RPSIssOutsideCity;
            case RPSStatus_BR::RPSCancelled     : return #RPSCancelled;
            default                             : return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsRPSType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RPS type of the Fiscal document.
    /// </summary>
    /// <returns>
    /// '' if None; 'RPS' if RPS; 'RPS-M' if RPSM.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display char rpsRPSType()
    {
        #RPSFlags_BR

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        switch (this.RPSType)
        {
            case RPSType_BR::None   : return '';
            case RPSType_BR::RPS    : return #RPSType;
            case RPSType_BR::RPSM   : return #RPSMType;
            default                 : return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsServiceCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Tax service code of the Fiscal document.
    /// </summary>
    /// <returns>
    /// The Tax service code from the first line found.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display TaxServiceCodeId_BR rpsServiceCodeId()
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;
        FiscalDocument_BR       fiscalDocument          = FiscalDocument_BR::find(this.FiscalDocument_BR);

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        select firstonly ServiceCode from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        return fiscalDocumentLine.ServiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpsServiceDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Service description of the Fiscal document.
    /// </summary>
    /// <returns>
    /// A string with all Description fields from Fiscal document lines concatenated using '|' (pipe) as line breaks.
    /// </returns>
    /// <remarks>
    /// Used to generate the RPS file.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the user has insufficient rights to access the necessary fields.
    /// </exception>
    public display ItemFreeTxt rpsServiceDescription()
    {
        #RPSFlags_BR

        FiscalDocumentLine_BR   fiscalDocumentLine;
        FiscalDocument_BR       fiscalDocument      = FiscalDocument_BR::find(this.FiscalDocument_BR);
        ItemFreeTxt             description;

        if (!hasTableAccess(tablenum(FiscalDocument_BR), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        while select Description from fiscalDocumentLine
            order by RecId
                where   fiscalDocumentLine.FiscalDocument   == fiscalDocument.RecId
                    &&  fiscalDocumentLine.ServiceCode      != ''
        {
            description += strLTrim(strRTrim(fiscalDocumentLine.Description)) + '|';
        }

        description = strReplace(description, #RPS_CRLF,   '|');
        description = strReplace(description, #RPS_LFCR,   '|');
        description = strReplace(description, #RPS_CR,     '|');
        description = strReplace(description, #RPS_LF,     '|');

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EFDocumentCity_BR</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>EFDocumentCity_BR</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EFDocumentCity_BR</c> table; otherwise, an empty record.
    /// </returns>
    public static EFDocumentCity_BR find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EFDocumentCity_BR   efDocumentCity;

        if (_recId)
        {
            efDocumentCity.selectForUpdate(_forUpdate);
            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                efDocumentCity.concurrencyModel(_concurrencyModel);
            }

            select firstonly efDocumentCity
                where efDocumentCity.RecId == _recId;
        }

        return efDocumentCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFiscalDocumentRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>EFDocumentCity_BR</c> record corresponding to the RecId of a <c>FiscalDocument_BR</c>.
    /// </summary>
    /// <param name="_refRecId">
    ///    The RecId of the <c>FiscalDocument_BR</c>.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EFDocumentCity_BR</c> table; otherwise, an empty record.
    /// </returns>
    public static EFDocumentCity_BR findByFiscalDocumentRef(RefRecId    _refRecId,
                                                            boolean     _forUpdate = false)
    {
        EFDocumentCity_BR efDocumentCity;

        if (_refRecId)
        {
            efDocumentCity.selectForUpdate(_forupdate);

            select efDocumentCity
                where efDocumentCity.FiscalDocument_BR == _refRecId;
        }

        return efDocumentCity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64121</DeveloperDocumentation>
	<Label>@GLS62505</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RPSNumber</TitleField1>
	<TitleField2>RPSDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>FiscalBooksBrazil</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RPSNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSExportDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSImportDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSValidationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RPSNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSValidationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportInfo</Name>
			<Label>@GLS64122</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RPSNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSExportDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ImportInfo</Name>
			<Label>@GLS64123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RPSValidationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPSImportDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocument_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RPSDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RPSExportDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPSDateTime_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RPSImportDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPSDateTime_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RPSNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPSStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPSStatus_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPSType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPSType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RPSValidationNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPSValidationNumber_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RPSImportIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RPSNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RPSDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalDocument_BRIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>FiscalDocument_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalDocument_BR</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EFDocumentCity_BR</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocument_BR</Name>
					<Field>FiscalDocument_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>