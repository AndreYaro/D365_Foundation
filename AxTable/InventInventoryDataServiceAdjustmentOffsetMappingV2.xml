<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceAdjustmentOffsetMappingV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
internal class InventInventoryDataServiceAdjustmentOffsetMappingV2 extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>upsertCommerceConfigurations</Name>
				<Source><![CDATA[
    public static void upsertCommerceConfigurations()
    {
        InventInventoryDataServiceAdjustmentOffsetMappingV2 offsetMap;

        ttsbegin;
        offsetMap.InventTransType = InventTransType::Sales;
        offsetMap.InventoryServiceAdjustmentOffsetOrderEvent = InventoryServiceAdjustmentOffsetOrderEvent::Create;
        offsetMap.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
        offsetMap.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::OnOrderOffset;
        offsetMap.initializeFlag();
        offsetMap.upsert();

        offsetMap.clear();
        offsetMap.InventTransType = InventTransType::Sales;
        offsetMap.InventoryServiceAdjustmentOffsetOrderEvent = InventoryServiceAdjustmentOffsetOrderEvent::Create;
        offsetMap.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
        offsetMap.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::ReservPhysicalOffset;
        offsetMap.initializeFlag();
        offsetMap.upsert();

        offsetMap.clear();
        offsetMap.InventTransType = InventTransType::Sales;
        offsetMap.InventoryServiceAdjustmentOffsetOrderEvent = InventoryServiceAdjustmentOffsetOrderEvent::Create;
        offsetMap.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
        offsetMap.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::SoldOffset;
        offsetMap.initializeFlag();
        offsetMap.upsert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceAdjustmentOffsetMappingV2 find(str _datasource, str _measure, boolean _update = false)
    {
        InventInventoryDataServiceAdjustmentOffsetMappingV2 offsetMapping;

        offsetMapping.selectForUpdate(_update);

        select firstonly offsetMapping
            where offsetMapping.Datasource == _datasource && offsetMapping.PhysicalMeasure == _measure;

        return offsetMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOffsetQueue</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceAdjustmentOffsetMappingV2 findByOffsetQueue(InventInventoryDataServiceAdjustmentOffsetQueue _offsetQueue)
    {
        return InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_offsetQueue.Datasource, _offsetQueue.PhysicalMeasure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBlockWhenInventDimChange</Name>
				<Source><![CDATA[
    public static boolean shouldBlockWhenInventDimChange(InventInventoryDataServiceAdjustmentOffsetMappingV2 _mapping, InventDimId _inventDimId1, InventDimId _inventDimId2)
    {
        if (_inventDimId1 == _inventDimId2)
        {
            return false;
        }
        
        var modifiedDimensionFields = InventDim::getModifiedInventoryDimensionFields(InventDim::find(_inventDimId1), InventDim::find(_inventDimId2));
        var excludedDimensionFields = _mapping.getExcludedDimensionFields();
        var enumerator = modifiedDimensionFields.getEnumerator();
        while (enumerator.moveNext())
        {
            if (!excludedDimensionFields.in(enumerator.current()))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedDimensionFields</Name>
				<Source><![CDATA[
    public Set getExcludedDimensionFields()
    {
        Set excludedDimensionFields;
        excludedDimensionFields = new Set(Types::Integer);
        if (!this.InventSiteIdFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, InventSiteId));
        }
        if (!this.InventLocationIdFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, InventLocationId));
        }
        if (!this.WMSLocationIdFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, WMSLocationId));
        }
        if (!this.LicensePlateFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, LicensePlateId));
        }
        if (!this.InventStatusFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, InventStatusId));
        }
        if (!this.InventBatchIdFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, InventBatchId));
        }
        if (!this.InventSerialIdFlag)
        {
            excludedDimensionFields.add(fieldNum(InventDim, InventSerialId));
        }
        
        return excludedDimensionFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExcludeDimensions</Name>
				<Source><![CDATA[
    public boolean shouldExcludeDimensions()
    {
        return !this.InventSiteIdFlag || !this.InventLocationIdFlag || !this.InventStatusFlag || !this.WMSLocationIdFlag || !this.LicensePlateFlag || !this.InventBatchIdFlag || !this.InventSerialIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFlag</Name>
				<Source><![CDATA[
    public void initializeFlag(boolean _inventSiteIdFlag = true, boolean _inventLocationIdFlag = true, boolean _inventStatusFlag = true, boolean _wMSLocationIdFlag = true, boolean _licensePlateFlag = true, boolean _inventBatchIdFlag = true, boolean _inventSerialIdFlag = true)
    {
        this.InventSiteIdFlag = _inventSiteIdFlag;
        this.InventLocationIdFlag = _inventLocationIdFlag;
        this.InventStatusFlag = _inventStatusFlag;
        this.WMSLocationIdFlag = _wMSLocationIdFlag;
        this.LicensePlateFlag = _licensePlateFlag;
        this.InventBatchIdFlag = _inventBatchIdFlag;
        this.InventSerialIdFlag = _inventSerialIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsert</Name>
				<Source><![CDATA[
    public void upsert()
    {
        ttsbegin;
        var offsetMapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(this.Datasource, this.PhysicalMeasure, true);

        if (offsetMapping)
        {
            buf2Buf(this, offsetMapping);
            offsetMapping.update();
        }
        else
        {
            this.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (this.Datasource != this.orig().Datasource || this.PhysicalMeasure != this.orig().PhysicalMeasure)
        {
            if (strLwr(this.Datasource) == 'fno')
            {
                throw error("@SCM:InventoryServiceAdjustmentOffsetDataSourceShouldNotBeFno");
            }

            var ivClient = new InventoryServiceClient();
            var configStr = ivClient.getConfiguration();
            ret = this.validateDatasourceAndPhysicalMeasure(configStr, this.Datasource, this.PhysicalMeasure);
        }
    
        if (this.InventoryServiceAdjustmentOffsetOrderEvent == InventoryServiceAdjustmentOffsetOrderEvent::None && this.InventoryServiceAdjustmentOffsetJournalEvent == InventoryServiceAdjustmentOffsetJournalEvent::None)
        {
            throw error("@SCM:InventoryServiceAdjustmentOffsetTriggerNotSet");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDatasourceAndPhysicalMeasure</Name>
				<Source><![CDATA[
    private boolean validateDatasourceAndPhysicalMeasure(str _configStr, str _datasource, str _physicalMeasure)
    {
        _datasource = strLwr(_datasource);
        _physicalMeasure = strLwr(_physicalMeasure);

        JObject responseJObject = Newtonsoft.Json.JsonConvert::DeserializeObject(_configStr);
        JObject inventorySystemConfigurations = responseJObject.GetValue('inventorySystemConfigurations');
        JObject datasourceConfigurations = inventorySystemConfigurations.GetValue(_datasource);

        if (datasourceConfigurations == null)
        {
            throw error(strFmt("@SCM:InventoryServiceAdjustmentOffsetDataSourceNotExist", _datasource));
        }
        
        JArray measures = datasourceConfigurations.GetValue('physicalMeasures');
        boolean found = false;
        // JArray.Contains does not work.
        for (int i = 0; i < measures.Count; i++)
        {
            Newtonsoft.Json.Linq.JValue measure = measures.get_item(i);
            if (any2Str(measure.Value) == _physicalMeasure)
            {
                found = true;
            }
        }

        if (!found)
        {
            throw error(strFmt("@SCM:InventoryServiceAdjustmentOffsetPhysicalMeasureNotExist", _datasource, _physicalMeasure));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>Key</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Datasource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceAdjustmentOffsetDataSource</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysicalMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceAdjustmentOffsetPhysicalMeasure</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransType</Name>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryServiceAdjustmentOffsetOrderEvent</Name>
			<EnumType>InventoryServiceAdjustmentOffsetOrderEvent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryServiceAdjustmentOffsetJournalEvent</Name>
			<EnumType>InventoryServiceAdjustmentOffsetJournalEvent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventSiteIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventLocationIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventStatusFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventStatusFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSLocationIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LicensePlateFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventBatchIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventSerialIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Datasource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>