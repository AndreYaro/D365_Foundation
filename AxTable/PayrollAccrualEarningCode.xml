<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollAccrualEarningCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollAccrualEarningCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualEarningCode</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollAccrualEarningCodeRecId _recId)
    {
        boolean ret = true;

        if (!PayrollAccrualEarningCode::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollAccrualEarningCode::txtNotExist(), tableId2name(tableNum(PayrollAccrualEarningCode))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualEarningCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollAccrualEarningCodeRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollAccrualEarningCode
                    where payrollAccrualEarningCode.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualEarningCode</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualEarningCode</c> table.
    /// </returns>
    public static PayrollAccrualEarningCode find(
    PayrollAccrualEarningCodeRecId          _recId,
    boolean                                 _forUpdate          = false,
    ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualEarningCode payrollAccrualEarningCode;

        payrollAccrualEarningCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualEarningCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualEarningCode
             where payrollAccrualEarningCode.RecId == _recId;

        return payrollAccrualEarningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccrualEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualEarningCode</c> table based on supplied values of the <c>Accrual</c> and <c>EarningCode</c> fields.
    /// </summary>
    /// <param name="_accrual">
    /// The value of the <c>accrual</c> field to find.
    /// </param>
    /// <param name="_earningCode">
    /// The value of the <c>EarningCode</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualEarningCode</c> table.
    /// </returns>
    public static PayrollAccrualEarningCode findByAccrualEarningCode(
    PayrollAccrualRecId         _accrual,
    PayrollEarningCodeRecId     _earningCode,
    boolean                     _forUpdate          = false,
    ConcurrencyModel            _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualEarningCode payrollAccrualEarningCode;

        payrollAccrualEarningCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualEarningCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualEarningCode
            where payrollAccrualEarningCode.Accrual == _accrual &&
                    payrollAccrualEarningCode.EarningCode == _earningCode;

        return payrollAccrualEarningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollaccrualearningcodeTableStoresTheInformationRelated</DeveloperDocumentation>
	<Label>@Payroll:BenefitAccrualEarningCode</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Accrual</TitleField1>
	<TitleField2>EarningCode</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PayrollAccrualEarningCodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Accrual</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollAccrualEarningCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Accrual</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EarningCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollAccrual</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Accrual</Name>
					<Field>Accrual</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollEarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollEarningCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEntitlementPlanEarningCode</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCode</Name>
					<Field>EarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>