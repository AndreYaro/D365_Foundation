<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqLineProcessingError</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqLineProcessingError extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearProcessingError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the processing error of a purchase requisition line in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLineId">
    ///     The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <param name="_type">
    ///     The processing error type.
    /// </param>
    public static void clearProcessingError(recId _purchReqLineId,
        PurchReqLineProcessingErrorType _type)
    {
        PurchReqLineProcessingError     purchReqLineProcessingError;

        delete_from purchReqLineProcessingError
            where purchReqLineProcessingError.PurchReqLine == _purchReqLineId
               && purchReqLineProcessingError.Type == _type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllAccountingErrors</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears all accounting errors associated with a purchase requisition or purchase requisition line.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    ///    The record ID in the <c>PurchReqTable</c> table.
    /// </param>
    /// <param name="_purchReqLineRecId">
    ///    The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    public static void deleteAllAccountingErrors(RefRecId _purchReqTableRecId, RefRecId _purchReqLineRecId = 0)
    {
        PurchReqLineProcessingError     purchReqLineProcessingError;
        PurchReqLine                    purchReqLine;

        if (_purchReqLineRecId == 0)
        {
            delete_from purchReqLineProcessingError
                where (purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::PreEncumbranceError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::BudgetError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetRevenueError)
            exists join purchReqLine
                where purchReqLineProcessingError.PurchReqLine == purchReqLine.RecId
                                 && purchReqLine.PurchReqTable == _purchReqTableRecId;
        }
        else
        {
            delete_from purchReqLineProcessingError
            where (purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::PreEncumbranceError ||
                   purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::BudgetError ||
                   purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetError ||
                   purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetRevenueError)
                && purchReqLineProcessingError.PurchReqLine == _purchReqLineRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllPurchaseOrderGenerationErrors</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears all generation errors associated with a purchase requisition or purchase requisition line.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    ///    The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    public static void deleteAllPurchaseOrderGenerationErrors(RefRecId _purchReqLineRecId)
    {
        PurchReqLineProcessingError     purchReqLineProcessingError;

        delete_from purchReqLineProcessingError where
               (purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ExceededPriceTolerance ||
                purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::InvalidQuote           ||
                purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::InvalidVendor          ||
                purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::Other)
                &&
                purchReqLineProcessingError.PurchReqLine == _purchReqLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified record exists in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLineProcessingErrorId">
    ///     The record ID in the <c>PurchReqLineProcessingError</c> table.
    /// </param>
    /// <returns>
    ///     True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _purchReqLineProcessingErrorId)
    {
        PurchReqLineProcessingError purchReqLineProcessingError = null;

        select RecId from purchReqLineProcessingError where purchReqLineProcessingError.RecId == _purchReqLineProcessingErrorId;

        return _purchReqLineProcessingErrorId && purchReqLineProcessingError.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAccountingError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an accounting error such as a budget failure, project budget failure, and
    /// pre-encumbrance error exists in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The record ID in the <c>PurchReqTable</c> table.
    /// </param>
    /// <param name="_purchReqLineRecId">
    /// The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    /// true if records exist; otherwise, false.
    /// </returns>
    static public boolean existAccountingError(RefRecId _purchReqTableRecId, RefRecId _purchReqLineRecId = 0)
    {
        PurchReqLineProcessingError     purchReqLineProcessingError;
        PurchReqLine                    purchReqLine;

        if (_purchReqLineRecId == 0)
        {
            select firstonly RecId from purchReqLineProcessingError
                where (purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::PreEncumbranceError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::BudgetError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetRevenueError)
            join RecId from purchReqLine
                where          purchReqLine.RecId == purchReqLineProcessingError.PurchReqLine
                    && purchReqLine.PurchReqTable == _purchReqTableRecId;
        }
        else
        {
            select firstonly RecId from purchReqLineProcessingError
                where (purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::PreEncumbranceError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::BudgetError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetError ||
                       purchReqLineProcessingError.Type == PurchReqLineProcessingErrorType::ProjectBudgetRevenueError)
                    && purchReqLineProcessingError.PurchReqLine == _purchReqLineRecId;
        }

        return (purchReqLineProcessingError.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLineProcessingErrorId">
    ///     The record ID in the <c>PurchReqLineProcessingError</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>PurchReqLineProcessingError</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static PurchReqLineProcessingError find(RefRecId _purchReqLineProcessingErrorId, boolean _forUpdate = false)
    {
        PurchReqLineProcessingError purchReqLineProcessingError;

        if (_purchReqLineProcessingErrorId)
        {
            purchReqLineProcessingError.selectForUpdate(_forUpdate);
            select firstonly purchReqLineProcessingError where purchReqLineProcessingError.RecId == _purchReqLineProcessingErrorId;
        }

        return purchReqLineProcessingError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLineId">
    /// A record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <param name="_type">
    /// The processing error type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>PurchReqLineProcessingError</c> table if it was found; otherwise, an empty
    /// buffer.
    /// </returns>
    public static PurchReqLineProcessingError findByPurchReqLine(
        recId                           _purchReqLineId,
        PurchReqLineProcessingErrorType _type,
        boolean                         _forUpdate = false)
    {
        PurchReqLineProcessingError purchReqLineProcessingError;

        purchReqLineProcessingError.selectForUpdate(_forUpdate);

        select purchReqLineProcessingError
            where purchReqLineProcessingError.PurchReqLine == _purchReqLineId
               && purchReqLineProcessingError.Type         == _type;

        return purchReqLineProcessingError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessingError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Logs the processing error of a purchase requisition line into the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLineId">
    ///     The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <param name="_type">
    ///     The processing error type.
    /// </param>
    /// <param name="_description">
    ///     The processing error description.
    /// </param>
    public static void logProcessingError(
        recId                                   _purchReqLineId,
        PurchReqLineProcessingErrorType         _type,
        PurchReqLineProcessingErrorDescription  _description)
    {
        PurchReqLineProcessingError purchReqLineProcessingError;

        select forupdate purchReqLineProcessingError
            where purchReqLineProcessingError.PurchReqLine  == _purchReqLineId
               && purchReqLineProcessingError.Type          == _type;

        ttsbegin;
        if (purchReqLineProcessingError.RecId == 0)
        {
            purchReqLineProcessingError.PurchReqLine = _purchReqLineId;
            purchReqLineProcessingError.Type         = _type;
            purchReqLineProcessingError.Description  = _description;
            purchReqLineProcessingError.insert();
        }
        else
        {
            purchReqLineProcessingError.Description  = _description;
            purchReqLineProcessingError.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePurchReqLineBudgetCheckError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores budget check error in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The buffer of the <c>PurchReqLine</c> table.
    /// </param>
    /// <param name="_budgetControlResult">
    /// The result of the budget check.
    /// </param>
    public static void savePurchReqLineBudgetCheckError(PurchReqLine _purchReqLine, BudgetControlResult _budgetControlResult)
    {
        SetEnumerator   resultErrors;
        SetEnumerator   resultWarnings;

        //Clear previous project budget errors.
        PurchReqLineProcessingError::clearProcessingError(_purchReqLine.RecId, PurchReqLineProcessingErrorType::BudgetError);
        PurchReqLineProcessingError::clearProcessingError(_purchReqLine.RecId, PurchReqLineProcessingErrorType::BudgetWarning);

        if (_budgetControlResult)
        {
            if (_budgetControlResult.errorMessages().elements() > 0)
            {
                resultErrors = _budgetControlResult.errorMessages().getEnumerator();
                while (resultErrors.moveNext())
                {
                    PurchReqLineProcessingError::logProcessingError(_purchReqLine.RecId, PurchReqLineProcessingErrorType::BudgetError, resultErrors.current());
                }
            }

            if (_budgetControlResult.warningMessages().elements() > 0)
            {
                resultWarnings = _budgetControlResult.warningMessages().getEnumerator();
                while (resultWarnings.moveNext())
                {
                    PurchReqLineProcessingError::logProcessingError(_purchReqLine.RecId, PurchReqLineProcessingErrorType::BudgetWarning, resultWarnings.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePurchReqLineProjBudgetCheckError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores project budget errors in the <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The buffer of the <c>PurchReqLine</c> table.
    /// </param>
    public static void savePurchReqLineProjBudgetCheckError(PurchReqLine _purchReqLine)
    {
        ProjBudgetStatus                projBudgetStatus;
        ProjBudgetStatusDetail          projBudgetStatusDetail;
        PurchReqLineProcessingErrorType logErrorType;

        projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(_purchReqLine.SourceDocumentLine);

        if (projBudgetStatus)
        {
            //Clear previous project budget errors.
            PurchReqLineProcessingError::clearProcessingError(_purchReqLine.RecId, PurchReqLineProcessingErrorType::ProjectBudgetError);
            PurchReqLineProcessingError::clearProcessingError(_purchReqLine.RecId, PurchReqLineProcessingErrorType::ProjectBudgetRevenueError);

            while select projBudgetStatusDetail where
                  projBudgetStatusDetail.ProjBudgetStatus               == projBudgetStatus.RecId                   &&
                  projBudgetStatusDetail.ProjBudgetControlErrorWarning  != ProjBudgetControlErrorWarning::NoError
            {
                if (projBudgetStatusDetail.Message)
                {
                    logErrorType =  projBudgetStatusDetail.ProjBudgetControlErrorWarning == ProjBudgetControlErrorWarning::OverBudgetWarning ?
                                    PurchReqLineProcessingErrorType::ProjectBudgetWarning :
                                    PurchReqLineProcessingErrorType::ProjectBudgetError;

                    PurchReqLineProcessingError::logProcessingError(_purchReqLine.RecId, logErrorType, projBudgetStatusDetail.Message);
                }

                if (projBudgetStatusDetail.RevenueMessage)
                {
                    logErrorType =  projBudgetStatusDetail.ProjBudgetControlErrorWarning == ProjBudgetControlErrorWarning::OverBudgetWarning ?
                                    PurchReqLineProcessingErrorType::ProjectBudgetRevenueWarning :
                                    PurchReqLineProcessingErrorType::ProjectBudgetRevenueError;

                    PurchReqLineProcessingError::logProcessingError(_purchReqLine.RecId, logErrorType, projBudgetStatusDetail.RevenueMessage);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePurchReqTableProjBudgetCheckError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores project budget errors in the <c>PurchReqLineProcessingError</c> table associated with the
    /// purchase requisition.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The buffer of <c>PurchReqTable</c> table.
    /// </param>
    public static void savePurchReqTableProjBudgetCheckError(PurchReqTable _purchReqTable)
    {
        PurchReqLine    purchReqLine;

        while select purchReqLine where
                purchReqLine.PurchReqTable == _purchReqTable.RecId &&
                purchReqLine.ProjId
        {
           PurchReqLineProcessingError::savePurchReqLineProjBudgetCheckError(purchReqLine);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SYS315414</DeveloperDocumentation>
	<Label>@SYS300595</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Type</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>PurchReqLineProcessingErrorTypeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchReqLineProcessingError</Name>
			<Label>@SYS300595</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqLineProcessingErrorDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS300601</Label>
			<EnumType>PurchReqLineProcessingErrorType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchReqLineProcessingErrorTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReqLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReqLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReqLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqLine_PurchReqLineProcessingError</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqLine</Name>
					<Field>PurchReqLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>