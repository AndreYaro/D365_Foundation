<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfLayoutLines_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConfLayoutLines_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        int                     lineNumSeq = 1;
        ConfLayoutLines_BR      confLayoutLines;
        ConfLayoutFields_BR     confLayoutFields;
        ConfLayoutGroups_BR     confLayoutGroups;
        ConfTable_BR            confTable;

        super();

        select ConfGroupId from confLayoutGroups
            where confLayoutGroups.LayoutGroupId == this.LayoutGroupId;

        select RecId from confTable
            where confTable.ConfGroupId == confLayoutGroups.ConfGroupId;

        if (confTable)
        {
            ttsbegin;

            while select forupdate confLayoutLines
                order by LayoutLineNum
                    where   confLayoutLines.LayoutGroupId == this.LayoutGroupId
            {
                update_recordset confLayoutFields
                    setting LayoutLineNum = confLayoutFields.LayoutLineNum + 10000
                        where   confLayoutFields.LayoutLineNum == confLayoutLines.LayoutLineNum
                            &&  confLayoutFields.LayoutGroupId == confLayoutLines.LayoutGroupId;

                confLayoutLines.LayoutLineNum += 10000;
                confLayoutLines.update();
            }

            ttscommit;

            ttsbegin;

            while select forupdate confLayoutLines
                order by LayoutLineNum
                    where  confLayoutLines.LayoutGroupId == this.LayoutGroupId
            {
                update_recordset confLayoutFields
                    setting LayoutLineNum = lineNumSeq
                        where   confLayoutFields.LayoutLineNum == confLayoutLines.LayoutLineNum
                            &&  confLayoutFields.LayoutGroupId == confLayoutLines.LayoutGroupId;

                confLayoutLines.LayoutLineNum = lineNumSeq;
                confLayoutLines.update();

              lineNumSeq ++;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLayoutGroup</Name>
				<Source><![CDATA[
        void initFromLayoutGroup(ConfLayoutGroups_BR _layoutGroup)
    {
        this.LayoutGroupId = _layoutGroup.LayoutGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.LayoutLineNum = (  select maxof(LayoutLineNum) from confLayoutLines_BR
                                    where confLayoutLines_BR.LayoutGroupId == this.LayoutGroupId).LayoutLineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record being processed is a batch.
    /// </summary>
    /// <returns>
    /// true if the record is a batch; false otherwise.
    /// </returns>
    public boolean isBatch()
    {
        return  this.BatchLayoutLineType  == ConfBatchLayoutLineType_BR::BatchHeader
            ||  this.BatchLayoutLineType  == ConfBatchLayoutLineType_BR::Details
            ||  this.BatchLayoutLineType  == ConfBatchLayoutLineType_BR::BatchTrailer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record being processed is a trailer.
    /// </summary>
    /// <param name="_confLayoutGroups">
    /// Configurator layout group name.
    /// </param>
    /// <returns>
    /// true if the record is of type trailer in case of Simple file structure;
    /// true if the record is of type File trailer or Batch trailer in case of Complex file structure;
    /// false otherwise.
    /// </returns>
    public boolean isTrailer(ConfLayoutGroups_BR _confLayoutGroups)
    {
        switch (_confLayoutGroups.FileStructure)
        {
            case ConfFileStructure_BR::Simple:
                return  this.LayoutLineType         == ConfLayoutLineType_BR::Trailer;

            case ConfFileStructure_BR::Complex:
                return  this.BatchLayoutLineType    == ConfBatchLayoutLineType_BR::FileTrailer
                    ||  this.BatchLayoutLineType    == ConfBatchLayoutLineType_BR::BatchTrailer;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevNextLine</Name>
				<Source><![CDATA[
        ConfLayoutLines_BR prevNextLine(NextPrevious _direction, boolean _forUpdate = false)
    {
        ConfLayoutLines_BR  layoutLine;

        layoutLine.selectForUpdate(_forUpdate);

        if (_direction == NextPrevious::Next)
        {
            select firstonly layoutLine
                order by LayoutLineNum asc
                where   layoutLine.LayoutGroupId == this.LayoutGroupId
                    &&  layoutLine.LayoutLineNum >  this.LayoutLineNum;
        }
        else
        {
            select firstonly layoutLine
                order by LayoutLineNum desc
                where   layoutLine.LayoutGroupId == this.LayoutGroupId
                    &&  layoutLine.LayoutLineNum <  this.LayoutLineNum;
        }

        return  layoutLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        #ConfMacros_BR

        boolean             ret;
        ConfLayoutLines_BR  conflayoutLines;

        ret = super();

        if (ret)
        {
            if (ConfLayoutGroups_BR::find(this.LayoutGroupId).FileStructure == ConfFileStructure_BR::Simple)
            {
                if (!this.LayoutLineType)
                {
                    ret = checkFailed(strFmt("@GLS1312",''));
                }
                else
                {
                    if (    this.LayoutLineType != ConfLayoutLineType_BR::Header
                        &&  this.LayoutLineType != ConfLayoutLineType_BR::Detail
                        &&  this.LayoutLineType != ConfLayoutLineType_BR::Trailer)
                    {
                        ret = false;
                    }
                }
            }
            else
            {
                if (!this.BatchLayoutLineType)
                {
                    ret = checkFailed(strFmt("@GLS1312",''));
                }
                else
                {
                    if (    this.BatchLayoutLineType != ConfBatchLayoutLineType_BR::FileHeader
                        &&  this.BatchLayoutLineType != ConfBatchLayoutLineType_BR::BatchHeader
                        &&  this.BatchLayoutLineType != ConfBatchLayoutLineType_BR::Details
                        &&  this.BatchLayoutLineType != ConfBatchLayoutLineType_BR::BatchTrailer
                        &&  this.BatchLayoutLineType != ConfBatchLayoutLineType_BR::FileTrailer)
                    {
                        ret = false;
                    }
                }

                if (ret)
                {
                    if (this.BatchLayoutLineType != ConfBatchLayoutLineType_BR::Details)
                    {
                        conflayoutLines = ConfLayoutLines_BR::findBatchLineNum(this.LayoutGroupId, this.BatchLayoutLineType, false);

                        if (    this.BatchLayoutLineType    == conflayoutLines.BatchLayoutLineType
                            &&  this.LayoutLineNum          != conflayoutLines.LayoutLineNum)
                        {
                            ret = checkFailed(strFmt("@GLS1313", this.BatchLayoutLineType));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        static ConfLayoutLines_BR find(ConfGroupId_BR _groupId, ConfLayoutLineType_BR layoutLineType, boolean _forUpdate = false)
    {
        ConfLayoutLines_BR     confLayoutLines;

        confLayoutLines.selectForUpdate(_forUpdate);

        select firstonly confLayoutLines
            where   confLayoutLines.LayoutGroupId  == _groupId
                &&  confLayoutLines.LayoutLineType == layoutLineType;

        return  confLayoutLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchLineNum</Name>
				<Source><![CDATA[
        static ConfLayoutLines_BR findBatchLineNum(ConfGroupId_BR _groupId, ConfBatchLayoutLineType_BR _lineType, boolean _forUpdate = false)
    {
        ConfLayoutLines_BR confLayoutLines;

        confLayoutLines.selectForUpdate(_forUpdate);

        select confLayoutLines
            where   confLayoutLines.LayoutGroupId == _groupId
                &&  confLayoutLines.BatchLayoutLineType == _lineType;

        return confLayoutLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineNum</Name>
				<Source><![CDATA[
        static ConfLayoutLines_BR findLineNum(ConfGroupId_BR _groupId, ConfBatchId_BR _batchId, ConfLayoutLineType_BR _lineType, boolean _forUpdate = false)
    {
        ConfLayoutLines_BR confLayoutLines;

        confLayoutLines.selectForUpdate(_forUpdate);

        select firstonly confLayoutLines
            where   confLayoutLines.LayoutGroupId  == _groupId
                &&  confLayoutLines.BatchId        == _batchId
                &&  confLayoutLines.LayoutLineType == _lineType;

        return  confLayoutLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordType</Name>
				<Source><![CDATA[
        static ConfLayoutLines_BR findRecordType(ConfLayoutGroupId_BR _groupId, LineNum _layoutLineNum, boolean _forUpdate = false)
    {
        ConfLayoutLines_BR  confLayoutLines;

        confLayoutLines.selectForUpdate(_forUpdate);

        select firstonly confLayoutLines
            where   confLayoutLines.LayoutGroupId  == _groupId
                &&  confLayoutLines.LayoutLineNum  == _layoutLineNum;

        return  confLayoutLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64022</DeveloperDocumentation>
	<Label>@GLS998</Label>
	<TitleField1>LayoutGroupId</TitleField1>
	<TitleField2>LayoutLineType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>GroupIdLineNumIdx</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>GroupIdLineNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchLayoutLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hide</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hide</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Complexlayouts</Name>
			<Label>@GLS1310</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hide</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchLayoutLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfRecordLength</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LayoutLines</Name>
			<Label>@GLS998</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfRecordLength</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ConfBatchId_BR</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchLayoutLineType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ConfBatchLayoutLineType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ConfRecordLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfRecordLength_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutGroupName_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Hide</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutGroupId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LayoutLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@GLS955</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LayoutLineType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutLineTypeId</ExtendedDataType>
			<EnumType>ConfLayoutLineType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Segment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutSegment_BR</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LayoutGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LayoutLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ConfLayoutGroups</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ConfLayoutGroups_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfLayoutGroups_BR</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ConfLayoutLines_BR</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutGroupId</Name>
					<Field>LayoutGroupId</Field>
					<RelatedField>LayoutGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>