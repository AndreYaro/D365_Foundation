<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class MCRSalesLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExternalGiftCardItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds external gift card item to sales order.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">The MCRCustPaymTable to negate.</param>
    [Hookable(false)]
    public static void addExternalGiftCardItem(MCRCustPaymTable _mcrCustPaymTable)
    {
        MCRSalesLine::addExternalGiftCardItemWithAmount(_mcrCustPaymTable, 0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExternalGiftCardItemWithAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds external gift card item to sales order with amount.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">The MCRCustPaymTable to negate.</param>
    /// <param name = "_amount">The optional amount to use on the new salesline.</param>
    [Hookable(false)]
    public static void addExternalGiftCardItemWithAmount(MCRCustPaymTable _mcrCustPaymTable, AmountCur _amount)
    {
        InventDim foundInventDim;
        InventDimCombination inventDimCombination;

        RetailStoreTenderTypeTable retailStoreTenderTypeTable = RetailStoreTenderTypeTable::find(_mcrCustPaymTable.Channel, _mcrCustPaymTable.TenderTypeId);
        ItemId itemId = retailStoreTenderTypeTable.GiftCardItemId;
        InventTable inventTable = InventTable::find(itemId);
        InventTableModule inventTableModule = InventTableModule::find(itemId,ModuleInventPurchSales::Sales);

        ttsbegin;
        select firstonly InventDimId, ItemId, RetailVariantId from inventDimCombination
            join InventStyleId, InventDimId from foundInventDim
            where foundInventDim.inventDimId == inventDimCombination.InventDimId
            && inventDimCombination.ItemId == itemId;

        InventDim newInventDim;
        if (inventTable)
        {
            newInventDim.clear();
            newInventDim.configId = inventTable.StandardConfigId;
            newInventDim.InventSizeId = inventTable.StandardInventSizeId;
            newInventDim.InventColorId = inventTable.StandardInventColorId;
            newInventDim.InventStyleId = foundInventDim.InventStyleId;
            newInventDim.InventVersionId = foundInventDim.InventVersionId;
            newInventDim = InventDim::findOrCreate(newInventDim);
        }

        SalesTable salesTable = _mcrCustPaymTable.salesTable();
        SalesLine salesline;
        if (salesTable.checkUpdate(true))
        {
            AmountCur lineAmount = _amount == 0 ? _mcrCustPaymTable.Amount : _amount;
            salesline.clear();
            salesline.SalesType = SalesType::Sales;
            salesline.initValue();
            salesline.SalesId = salesTable.SalesId;
            salesline.ItemId = itemId;
            salesline.SalesQty = 1;
            salesline.SalesUnit = inventTableModule.UnitId;
            salesline.SalesPrice = abs(lineAmount);
            salesline.LineAmount = abs(lineAmount);
            salesline.CurrencyCode = _mcrCustPaymTable.CurrencyCode;
            salesline.setInventDimId(newInventDim.inventDimId);
            salesline.RetailVariantId = inventDimCombination.RetailVariantId;
            salesline.createLine(true, true, false, true, true, false);

            // Store sales line reference in <c>MCRCustPaymTable</c> if sales line is created for gift card refund.
            if (salesline.RecId)
            {
                CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
                
                _mcrCustPaymTable.SalesLine = salesline.RecId;
                _mcrCustPaymTable.update();

                eventSource.EventWritePaymentsUpdateSalesLineReference(_mcrCustPaymTable.SalesLine, _mcrCustPaymTable.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editGiftCardId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the gift card number.
    /// </summary>
    /// <param name="_set">
    /// A <c>boolean</c> value that determines whether or not the user
    /// has modified the gift card number.
    /// </param>
    /// <param name="_retailGiftCardId">
    /// The new gift card card number.
    /// </param>
    /// <returns>
    /// The gift card number.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit RetailGiftCardId editGiftCardId(boolean _set,
                                                RetailGiftCardId _retailGiftCardId)
    {
        if (_set)
        {
            this.GiftCardNumber = _retailGiftCardId;

            if (this.GiftCardNumber && MCRGiftCard::validateGiftCardSerialNum(this.GiftCardNumber))
            {
                return this.GiftCardNumber;
            }
            else
            {
                return '';
            }
        }
        else
        {
            return this.GiftCardNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editGiftCardExpiration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the gift card expiration in short format MMYY.
    /// </summary>
    /// <param name = "_set">A <c>boolean</c> value that determines whether or not the user
    /// has modified the gift card number.
    /// </param>
    /// <param name = "_expiration">The new gift card expiration.</param>
    /// <returns>The gift card expiration.</returns>
    [Hookable(false)]
    public edit RetailGiftCardExpirationShort editGiftCardExpiration(boolean _set, str _expiration)
    {
        if (_set)
        {
            this.GiftCardExpiration = _expiration;
        }

        return this.GiftCardExpiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMaskedGiftCardId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the gift card number and returns it masked.
    /// </summary>
    /// <param name="_set">
    /// A <c>boolean</c> value that determines whether or not the user
    /// has modified the gift card number.
    /// </param>
    /// <param name="_retailGiftCardId">
    /// The new gift card card number.
    /// </param>
    /// <returns>
    /// The masked gift card number if one is set; otherwise, a blank string.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit RetailGiftCardId editMaskedGiftCardId(boolean _set,
                                                        RetailGiftCardId _retailGiftCardId)
    {
        if (_set)
        {
            this.GiftCardNumber = _retailGiftCardId;
        }
        if (_retailGiftCardId)
        {
            return MCRGiftCard::maskCardNum(_retailGiftCardId);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the parent item ID.
    /// </summary>
    /// <returns>
    /// The item ID if the sales line has a parent sales line; otherwise, an empty string.
    /// </returns>
    public display ItemId getParentItemId()
    {
        SalesLine salesLine;

        if (this.ParentLotId)
        {
            select firstonly ItemId from salesLine
                where salesLine.InventTransId == this.ParentLotId;
            if (salesLine)
            {
                return salesLine.ItemId;
            }
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the parent item name.
    /// </summary>
    /// <returns>
    /// The item name if the sales line has a parent sales line; otherwise, an empty string.
    /// </returns>
    public display ItemName getParentItemName()
    {
        InventTable inventTable;
        SalesLine   salesLine;

        if (this.ParentLotId)
        {
            select firstonly inventTable
                exists join salesLine
                where salesLine.InventTransId == this.ParentLotId
                    && salesLine.ItemId == inventTable.ItemId;

            if (inventTable)
            {
                return inventTable.itemName();
            }
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales line's parent line.
    /// </summary>
    /// <param name="_forUpdate">
    /// <c>Boolean</c> to determine whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The parent sales line; otherwise, a blank record.
    /// </returns>
    SalesLine getParentLine(boolean _forUpdate = false)
    {
        SalesLine salesLine;

        if (this.ParentLotId)
        {
            salesLine.selectForUpdate(_forUpdate);

            select firstonly salesLine
                where salesLine.InventTransId == this.ParentLotId;
        }
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SalesLine           salesLine;
        InventTable         inventTable;
        MCRInventTable      mcrInventTable;

        DlvMode             dlvMode;
        MCROrderEventTable  mcrOrderEventTable;

        if (this.SalesLine)
        {
            // Set installment eligibility based on the invent table.
            select firstonly InstallmentEligible from mcrInventTable
                exists join inventTable
                where inventTable.RecId == mcrInventTable.InventTable
                exists join salesLine
                where salesLine.ItemId == inventTable.ItemId
                   && salesLine.RecId == this.SalesLine;

            this.InstallmentEligible = mcrInventTable.InstallmentEligible;
            // only update if the FK is valid
            super();

            // Only insert expedite line event if line's expedite status differs
            // from delivery mode's expedite default.
            select firstonly SalesId, PackedExtensions from salesLine
                where salesLine.RecId == this.SalesLine
                exists join  dlvMode
                where salesLine.DlvMode == dlvMode.Code
                     && dlvMode.mcrExpedite != this.Expedite;

            if (salesLine)
            {
                mcrOrderEventTable.insertExpediteEvent(salesLine);
            }

            if (!RetailPricingKillSwitch::disablePriceOverrideHoldV2()
                && this.isPendingForApproval())
            {
                salesLine = SalesLine::findRecId(this.SalesLine);
                if (salesLine.SalesId != '')
                {
                    MCRHoldCodeTrans::tryInsertPriceOverrideHold(salesLine.SalesId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingForApproval</Name>
				<Source><![CDATA[
    /// <summary>`
    /// Whether the current record is pending for approval.
    /// </summary>
    /// <returns>True if pending for approval; Otherwise, false.</returns>
    internal boolean isPendingForApproval()
    {
        return conFind(MCRSalesLine::getPendingForApprovalStatuses(), this.RetailPriceOverrideWorkflowState) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingForApprovalStatuses</Name>
				<Source><![CDATA[
    internal static container getPendingForApprovalStatuses()
    {
        return [
            RetailPriceOverrideWorkflowState::NotSubmitted,
            RetailPriceOverrideWorkflowState::Submitted,
            RetailPriceOverrideWorkflowState::Rejected];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateContinuityCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a continuity line through the <c>axSalesLine</c> class.
    /// </summary>
    /// <param name="_interactive">
    /// Identifies if you are running interactively with the user.
    /// </param>
    public void mcrCreateContinuityCust(boolean _interactive = true)
    {
        MCRContinuityCustHeader     mcrContinuityCustHeader;
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;

        MCRLoadContinuityCustInfo   mcrLoadContinuityCustInfo;
        SalesLine salesLine = SalesLine::findRecId(this.SalesLine);

        // Don't create if line is not associated to a continuity schedule or a
        // continuity schedule has already been created.
        if (!this.ContinuityScheduleId
            || MCRContinuityCustHeader::find(salesLine.InventTransId))
        {
            return;
        }

        // Launch forms if running interactively w/ user.
        if (_interactive)
        {
            MCRContinuityCustHeader::launchContinuityForms(salesLine);
        }
        else // Create a schedule w/ the best available info for batch mode.
        {
            mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(this.ContinuityScheduleId);
            mcrContinuityCustHeader = mcrContinuityCustHeader.createDfltContCustHeader(salesLine, mcrContinuityScheduleHeader);

            if (mcrContinuityCustHeader.PaymentScheduleId)
            {
                // Create the payment schedule
                MCRContinuityCustHeader::createPaymentSched(mcrContinuityCustHeader);
            }

            mcrLoadContinuityCustInfo = new MCRLoadContinuityCustInfo();
            mcrLoadContinuityCustInfo.insertLineData(mcrContinuityCustHeader.InventTransId,
                                                   mcrContinuityCustHeader.ScheduleId, salesLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the related sales line when the source code is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        SalesLine salesLine;

        switch (_fieldId)
        {
             // if the source code is modified, the pricing, defaults, and scripts
            // needs to be re-evaluated
            case fieldNum(MCRSalesLine, SourceId):
                salesLine = this.SysExtensionSerializerExtensionMap::getBaseTable();
                salesLine.mcrInitFromSourceCodeSetup();
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catalog field of the related <c>RetailSalesLine</c> record to the
    /// catalog of the related <c>MCRSourceCodeSetup</c> record.
    /// </summary>
    public void setCatalog()
    {
        CatalogRefRecId catalog = 0;
        RetailSalesLine retailSalesLine;
        SalesLine       salesLine;

        // Get the proper catalog refrecId if has source id.
        if (this.SourceId)
        {
            catalog = MCRSourceCodeSetup::find(this.SourceId).Catalog;
        }

        if (this.SalesLine)
        {      
            ttsbegin;
            select firstonly forupdate retailSalesLine
                where retailSalesLine.SalesLine == this.SalesLine;
                
            if (retailSalesLine)
            {
                this.setCatalogOnRetailSalesLine(retailSalesLine, catalog);
                retailSalesLine.update();
            }
            else
            {
                this.setCatalogOnRetailSalesLine(retailSalesLine, catalog);
                retailSalesLine.SalesLine = this.SalesLine;
                retailSalesLine.insert();
            }
            ttscommit;
        }
        else
        {
            salesLine = this.SysExtensionSerializerExtensionMap::getBaseTable();

            retailSalesLine = salesLine.retailSalesLine();
            this.setCatalogOnRetailSalesLine(retailSalesLine, catalog);
            salesLine.retailPackRetailSalesLine(retailSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        MCROrderEventTable mcrOrderEventTable;
        MCRSalesLine mcrSalesLine_Orig;

        if (this.SalesLine)
        {
            mcrSalesLine_Orig = this.orig();

            // only update if the FK is valid
            super();

            // Insert expedite line event.
            if (mcrSalesLine_Orig.Expedite != this.Expedite)
            {
                mcrOrderEventTable.insertExpediteEvent(SalesLine::findRecId(this.SalesLine));
            }

            if (!RetailPricingKillSwitch::disablePriceOverrideHoldV2() &&
                mcrSalesLine_Orig.RetailPriceOverrideWorkflowState != this.RetailPriceOverrideWorkflowState)
            {
                SalesLine salesLine = SalesLine::findRecId(this.SalesLine);

                if (!mcrSalesLine_Orig.isPendingForApproval() && this.isPendingForApproval())
                {
                    MCRHoldCodeTrans::tryInsertPriceOverrideHold(salesLine.SalesId);
                }
                else if (mcrSalesLine_Orig.isPendingForApproval() && !this.isPendingForApproval())
                {
                    MCRSalesline::tryClearPriceOverrideHold(salesLine.SalesId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = true;

        ret = super(_fieldIdToCheck);
        switch (_fieldIdToCheck)
        {
            case fieldNum(MCRSalesLine, SourceId):
                if (this.SourceId)
                {
                    ret = MCRSourceCodeSetup::validateSourceCode(this.SourceId);
                }
            case fieldNum(MCRSalesLine, GiftCardRecipientEmail):
                if (this.GiftCardRecipientEmail && !(this.GiftCardRecipientEmail like '?*@?*.?*'))
                {
                    ret = checkFailed("@MCR10420");
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;
        ItemId  giftCardItem;
        RetailParameters retailParameters;

        // Check if the table is disabled by a config key or the Sales line is not set.
        // If so, there is no further work needed involving gift items.
        if (this.isTmp() || !this.SalesLine)
        {
            return ret;
        }

        retailParameters = RetailParameters::find();
        giftCardItem = retailParameters.GiftcardItem;
        ret = super();

        setPrefix("@MCR24013");

        if (giftCardItem && SalesLine::findRecId(this.SalesLine).ItemId == giftCardItem)
        {
            // check for email and recipient email only on email gift cards.
            if (ret
                && this.GiftCardType == MCRGiftCardType::Email
                && this.GiftCardRecipientEmail == "")
            {
                ret = checkFailed("@MCR10854");
            }

            // Validate the recipient name is filled in.
            // Validate the address is filled in properly.
            if (ret
                && this.GiftCardType == MCRGiftCardType::Physical)
            {
                if (this.GiftCardRecipientName == "")
                {
                    ret = checkFailed("@MCR10855");
                }
            }

            if (ret &&
                retailParameters.UseGiftCardPolicies &&
                retailParameters.ProcessGiftCardsAsPrepayments_RU )
            {
                ret = this.checkGiftCardIssuePolicies(SalesLine::findRecId(this.SalesLine).CurrencyCode);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRSalesLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The identification value of the sales line.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>MCRSalesLine</c> record if found; otherwise, an empty record.
    /// </returns>
    static MCRSalesLine findSalesLine(SalesLineRefRecId       _recId,
                               boolean     _update = false)
    {
        MCRSalesLine mcrSalesLine;

        if (_recId)
        {
            if (_update)
            {
                mcrSalesLine.selectForUpdate(_update);
            }

            select mcrSalesLine
                where mcrSalesLine.SalesLine == _recId;
        }

        return mcrSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGiftCardIssuePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether parameters of issuing card meets gift card policies.
    /// </summary>
    /// <param name="_currencyCode">
    /// Currency code of issue.
    /// </param>
    /// <returns>
    /// true if this gift card can be issued; otherwise, false.
    /// </returns>
    public boolean checkGiftCardIssuePolicies(CurrencyCode _currencyCode)
    {
        MCRSalesOrderGiftCardPolicyHelper giftCardPolicyHelper;

        giftCardPolicyHelper = MCRSalesOrderGiftCardPolicyHelper::construct(_currencyCode);

        return giftCardPolicyHelper.checkPolicy(this.GiftCardAmount_RU, this.GiftCardNumber, this.GiftCardType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the the <c>MCRSalesLine</c> amounts due to currency code change in the parent <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_currencyCodeFrom">
    /// Previous currency code.
    /// </param>
    /// <param name="_currencyCodeTo">
    /// New currency code.
    /// </param>
    /// <param name="_exchRateDate">
    /// The exchange rate date.
    /// </param>
    /// <param name="_useFixedExchRate">
    /// Fixed exchange rate is used.
    /// </param>
    /// <param name="_fixedexchRate">
    /// Fixed exchange rate value.
    /// </param>
    void convertCurrencyCode_RU(CurrencyCode  _currencyCodeFrom,
                                       CurrencyCode  _currencyCodeTo,
                                       TransDate     _exchRateDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                       boolean       _useFixedExchRate = false,
                                       CustExchRate  _fixedexchRate    = 0)
    {
        if (_useFixedExchRate)
        {
            this.GiftCardAmount_RU = CurrencyExchangeHelper::amountCur2MST(this.GiftCardAmount_RU, _currencyCodeFrom, _fixedexchRate, _exchRateDate);
        }
        else
        {
            this.GiftCardAmount_RU = CurrencyExchangeHelper::curAmount2CurAmount(this.GiftCardAmount_RU, _currencyCodeFrom, _currencyCodeTo, _exchRateDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowState</Name>
				<Source><![CDATA[
	/// <summary>
    /// Update workflow status
    /// </summary>
    /// <param name = "_salesLineRecId">
    /// Sales line RecId
	/// </param>
    /// <param name = "_status">
    /// Workflow status enum
	/// </param>
    public static void updateWorkflowState(RefRecId _salesLineRecId, RetailPriceOverrideWorkflowState _status)
    {
        MCRSalesLine mcrSalesLine;
        mcrSalesLine = MCRSalesLine::findSalesLine(_salesLineRecId, true);

        ttsbegin;
        mcrSalesLine.RetailPriceOverrideWorkflowState = _status;
        mcrSalesLine.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryClearPriceOverrideHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Try clearing price override hold for given order. The clearing will proceed if there is no line pending for approval.
    /// </summary>
    /// <param name = "_salesId">Sales Id</param>
    internal static void tryClearPriceOverrideHold(SalesId _salesId)
    {
        SalesLine salesLine;
        MCRSalesLine mcrSalesLine;
        MCRHoldCodeTrans mcrHoldCodeTrans;

        // check if any line is pending for approval. Clear price override code if there is none.
        select firstonly RecId from mcrSalesLine
            join RecId from salesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
                   && salesLine.SalesId == _salesId
                   && mcrSalesLine.RetailPriceOverrideWorkflowState in MCRSalesLine::getPendingForApprovalStatuses();

        if (!mcrSalesLine)
        {
            mcrHoldCodeTrans::clearPriceOverrideHoldV2(_salesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (!RetailPricingKillSwitch::disablePriceOverrideHoldV2() &&
            this.isPendingForApproval())
        {
            SalesLine salesLine = SalesLine::findRecId(this.SalesLine);
            MCRSalesline::tryClearPriceOverrideHold(salesLine.SalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsVirtualExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds whether a sales order contains a external gift card item.
    /// Which is not fully invoiced and gift card type is Email.
    /// </summary>
    /// <param name = "_salesTable">
    /// Sales table buffer.
    /// </param>
    /// <returns>
    /// True if sales order contains external gift card. Else, false.
    /// </returns>
    internal static boolean containsVirtualExternalGiftCard(SalesTable _salesTable)
    {
        SalesLine salesLine;
        RetailStoreTenderTypeTable retailStoreTenderTypeTable;
        MCRSalesLine mcrSalesLine;
        boolean hasExtGiftCardItem;

        select firstonly RecId from mcrSalesLine
            where mcrSalesLine.GiftCardType == MCRGiftCardType::Email
            exists join salesLine
                where salesLine.RecId == mcrSalesLine.SalesLine
                   && salesLine.SalesId == _salesTable.SalesId
                   && salesLine.SalesStatus == SalesStatus::Backorder
                   && salesLine.ItemId != RetailParameters::find().GiftcardItem
            exists join retailStoreTenderTypeTable
                where retailStoreTenderTypeTable.GiftCardItemId == salesLine.ItemId
                   && retailStoreTenderTypeTable.GiftCardItemId != ''
                   && retailStoreTenderTypeTable.Channel == _salesTable.retailSalesTable().RetailChannel;

        if (mcrSalesLine)
        {
            hasExtGiftCardItem = true;
        }

        return hasExtGiftCardItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatalogOnRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the catalog field value on retail sales line.
    /// </summary>
    /// <param name = "_retailSalesLine">The retail sales line.</param>
    /// <param name = "_catalog">The catalog record id.</param>
    private void setCatalogOnRetailSalesLine(RetailSalesLine _retailSalesLine, CatalogRefRecId _catalog)
    {
        SalesLine salesLine = this.SysExtensionSerializerExtensionMap::getBaseTable();
        SalesTable salesTable = SalesTable::find(salesLine.salesId);

        if (_catalog && !RetailInitializeCatalogInRetailSalesLineDataSourceFlight::instance().isEnabled())
        {
            _retailSalesLine.Catalog = _catalog;
        }
        // If it is a B2B catalog-aware Commerce order, then consider the B2B catalog associated to the B2B customer and channel
        // not the catalog associated to the Source code.
        else if (!B2B2BDataHelper::shouldRespectCatalog(salesTable.RetailChannelTable) && _catalog)
        {
            _retailSalesLine.Catalog = _catalog;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRCallCenter</ConfigurationKey>
	<DeveloperDocumentation>@SYS124481</DeveloperDocumentation>
	<Label>@Retail:MCRSalesLine</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LineType</TitleField1>
	<TitleField2>ContinuityScheduleId</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SalesLineIdx</ClusteredIndex>
	<Modules>TransactionsAndOrders</Modules>
	<ReplacementKey>SalesLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpSellOriginRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpSellOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentLotId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expedite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstallmentEligible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContinuityScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UpSellOriginRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpSellOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentLotId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expedite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstallmentEligible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContinuityScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeInventRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiftCardPhysical</Name>
			<Label>@MCR30166</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiftCardType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardBuyerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardRecipientName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardGiftMessage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiftCardVirtual</Name>
			<Label>@MCR30166</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiftCardType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardBuyerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardBuyerEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardRecipientName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardRecipientEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardGiftMessage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS104938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContinuityScheduleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityScheduleID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTransRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCustInvoiceTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExchangeInventRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRExchangeInventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Expedite</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRExpedite</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardBuyerEmail</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
			<Label>@MCR10943</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardBuyerName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@MCR10946</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardGiftMessage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRGiftCertMessage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailGiftCardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardRecipientEmail</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
			<Label>@MCR10944</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardRecipientName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@MCR10947</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiftCardType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRGiftCardType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InstallmentEligible</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRInstallmentEligible</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentLotId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Label>@MCR10521</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSalesLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSourceID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpSellOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRUpSellOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UpSellOriginRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRItemIdOfferId</ExtendedDataType>
			<Label>@MCR31296</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GiftCardAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRGiftCardIssueAmount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailPriceOverrideWorkflowState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailPriceOverrideWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardExpiration</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailGiftCardExpirationShort</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>SalesLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTransRecId</Name>
					<Field>CustInvoiceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MCRSalesLine_InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentLotId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>ParentLotId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRContinuityScheduleHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRContinuityScheduleHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContinuityScheduleId</Name>
					<SourceEDT>MCRContinuityScheduleID</SourceEDT>
					<Field>ContinuityScheduleId</Field>
					<RelatedField>ScheduleID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MCRContinuityScheduleId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRExpediteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRExpediteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Expedite</Name>
					<SourceEDT>MCRExpedite</SourceEDT>
					<Field>Expedite</Field>
					<RelatedField>MCRExpedite</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExpediteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRSourceCodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRSourceCodeSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceId</Name>
					<SourceEDT>MCRSourceID</SourceEDT>
					<Field>SourceId</Field>
					<RelatedField>SourceID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SourceID</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailGiftCardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailGiftCardTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GiftCardNumber</Name>
					<SourceEDT>RetailGiftCardId</SourceEDT>
					<Field>GiftCardNumber</Field>
					<RelatedField>entryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>typeEntryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLine</Name>
					<Field>SalesLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesLineIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>