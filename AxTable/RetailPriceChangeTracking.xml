<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTracking</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class RetailPriceChangeTracking extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFullRefreshRecordId</Name>
				<Source><![CDATA[
    private static int64 getFullRefreshRecordId()
    {
        return 0; // Use speical number 0 to mark the full refresh.
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProductPriceChangeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track a product.
    /// Based on the attribution processing logic in extension, the single product can be tracked multiple times.
    /// E.g. a product changes in discount line can apply to multiple channels (attributes).
    /// </summary>
    /// <param name = "_productId">The product id.</param>
    /// <param name = "_priceChangeDateTime">The price change datetime.</param>
    [Wrappable(false)]
    public static void writeProductPriceChangeRecord(RecId _productId, utcdatetime _priceChangeDateTime = DateTimeUtil::utcNow())
    {
        RetailPriceChangeTracking priceChangeTracking = RetailPriceChangeTracking::findByProduct(_productId, true);
        guid tag = newGuid();

        if (priceChangeTracking.RecId)
        {
            RetailPriceChangeTracking::updateRecord(priceChangeTracking.RecId, _priceChangeDateTime, tag);
        }
        else
        {
            RetailPriceChangeTracking::insertRecord(_productId, _priceChangeDateTime, tag);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProductPriceChangeRecordsCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track a product for all configured companies.
    /// </summary>
    /// <param name = "_productId">The product id.</param>
    /// <param name = "_priceChangeDateTime">The price change datetime.</param>
    [Wrappable(false)]
    public static void writeProductPriceChangeRecordsCrossCompany(RecId _productId, utcdatetime _priceChangeDateTime = DateTimeUtil::utcNow())
    {
        RetailPriceChangeTrackingDataArea priceChangeTrackingDataArea;

        while select crosscompany TrackedDataArea from priceChangeTrackingDataArea
        {
            changeCompany(priceChangeTrackingDataArea.TrackedDataArea)
            {
                InventTable inventTable = InventTable::findByProduct(_productId);

                // Skip if the product is not released to the company.
                if (inventTable)
                {
                    RetailPriceChangeTracking::writeProductPriceChangeRecord(_productId, _priceChangeDateTime);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFullRefreshRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trigger a full refresh with special record (zero product id) to set a base of incremental change tracking.
    /// Then clients like Azure search can trigger full publish. 
    /// </summary>
    /// <param name = "_priceChangeDateTime">The price change datetime.</param>
    [Wrappable(false)]
    public static void writeFullRefreshRecord( utcdatetime _priceChangeDateTime = DateTimeUtil::utcNow())
    {
        RetailPriceChangeTracking::writeProductPriceChangeRecord(RetailPriceChangeTracking::getFullRefreshRecordId(), _priceChangeDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFullRefreshRecordsCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trigger a full refresh for configured companies.
    /// </summary>
    [Wrappable(false)]
    public static void writeFullRefreshRecordsCrossCompany()
    {
        RetailPriceChangeTrackingDataArea priceChangeTrackingDataArea;

        while select crosscompany TrackedDataArea from priceChangeTrackingDataArea
        {
            changeCompany(priceChangeTrackingDataArea.TrackedDataArea)
            {
                RetailPriceChangeTracking::writeFullRefreshRecord();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllChangeTrackingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all the records in this table. E.g. when disable the feature.
    /// </summary>
    internal static void deleteAllChangeTrackingRecords()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(RetailPriceChangeTracking), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find existing record for the product and attribute set.
    /// </summary>
    /// <param name = "_productId">The product id.</param>
    /// <param name = "_forUpdate">Whether to select for update.</param>
    /// <returns>The price change tracking record.</returns>
    public static RetailPriceChangeTracking findByProduct(RecId _productId, boolean _forUpdate = false)
    {
        RetailPriceChangeTracking changeTracking;

        select firstonly changeTracking
            where changeTracking.ProductId == _productId;

        changeTracking.selectForUpdate(_forUpdate);

        return changeTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFullRefreshRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find existing full refresh record.
    /// </summary>
    /// <param name = "_forUpdate">Whether to select for update.</param>
    /// <returns>The price change tracking record.</returns>
    public static RetailPriceChangeTracking findFullRefreshRecord(boolean _forUpdate = false)
    {
        return RetailPriceChangeTracking::findByProduct(RetailPriceChangeTracking::getFullRefreshRecordId(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the selected record.
    /// </summary>
    /// <param name = "_priceChangeTrackingRecId">The selected record id for update.</param>
    /// <param name = "_priceChangeDateTime">The changed datetime.</param>
    /// <param name = "_tag">A tag to identify the version.</param>
    internal static void updateRecord(RecId _priceChangeTrackingRecId, utcdatetime _priceChangeDateTime, guid _tag)
    {
        ttsbegin;

        RetailPriceChangeTracking priceChangeTracking;

        select firstonly forupdate priceChangeTracking
            where priceChangeTracking.RecId == _priceChangeTrackingRecId;

        priceChangeTracking.UpdatedDatetime = _priceChangeDateTime;
        priceChangeTracking.Tag = _tag;
        priceChangeTracking.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the change tracking record.
    /// </summary>
    /// <param name = "_productId">Product id.</param>
    /// <param name = "_priceChangeDateTime">Changed datetime.</param>
    /// <param name = "_tag">>A tag to identify the version.</param>
    internal static void insertRecord(RecId _productId, utcdatetime _priceChangeDateTime, guid _tag)
    {
        ttsbegin;

        RetailPriceChangeTracking priceChangeTracking;

        priceChangeTracking.ProductId = _productId;
        priceChangeTracking.UpdatedDateTime =  _priceChangeDateTime;
        priceChangeTracking.Tag = _tag;

        priceChangeTracking.insert();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RetailPricing:RetailPriceChangeTrackingTableLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductId</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>UpdatedDatetime</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>Tag</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductIdIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TagIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tag</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>