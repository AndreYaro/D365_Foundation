<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionExternal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BusinessDocumentSubmissionExternal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record in the <c>BusinessDocumentSubmission</c> table exists.
    /// </summary>
    /// <param name = "_refTableId">A reference to the table ID.</param>
    /// <param name = "_refRecId">A reference to the record ID.</param>
    /// <returns><c>True</c> if the record is found.</returns>
    [Hookable(false)]
    public static boolean exists(
        RefTableId _refTableId,
        RefRecId _refRecId)
    {
        return 
            (select firstonly businessDocumentSubmission
                where businessDocumentSubmission.RefTableId == _refTableId
                    && businessDocumentSubmission.RefRecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a source business document for the submission.
    /// </summary>
    /// <returns>A source business document for the submission.</returns>
    [Hookable(false)]
    public Common getDocument()
    {
        Common document;
        
        if (this && this.RefTableId)
        {
            document = new DictTable(this.RefTableId).makeRecord();
            select firstonly document
                where document.RecId == this.RefRecId;

            return document;
        }
       
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentUidStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the document UID converted to a string.
    /// </summary>
    /// <returns>The document UID converted to a string.</returns>
    [Hookable(false)]
    public str documentUidStr()
    {
        return strLwr(guid2StrWithoutBraces(this.UID));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void insert()
    {
        if (this.ParentRefRecId)
        {
            BusinessDocumentSubmissionExternal submission;
            
			if (this.isTmp())
            {
                submission.setTmp();
                submission.setTmpData(this);
            }          
        }
  
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCommon</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static BusinessDocumentSubmissionExternal findByCommon(
        Common _record,
        boolean _forupdate = false)
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;

        if (_record.TableId == tableNum(BusinessDocumentSubmissionExternal))
        {
            businessDocumentSubmissionExternal = _record;
            businessDocumentSubmissionExternal.selectForUpdate(_forupdate);
        }
        else
        {
            businessDocumentSubmissionExternal = BusinessDocumentSubmissionExternal::find(_record.TableId, _record.RecId, _forupdate);
        }

        return businessDocumentSubmissionExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertByDocumentInfo</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static BusinessDocumentSubmissionExternal insertByDocumentInfo(
        BusinessDocumentInfo _documentInfo, 
        BusinessDocumentState _state2Set, 
        boolean _setTmstmpTicks = false)
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        utcdatetime createdDateTimeUTC = DateTimeUtil::removeTimeZoneOffset(
            _documentInfo.getCreatedDateTime(),
            DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;
        businessDocumentSubmissionExternal.UID = str2Guid(_documentInfo.getId());
        businessDocumentSubmissionExternal.AgentId = _documentInfo.getAgentId();
        businessDocumentSubmissionExternal.Timestamp = createdDateTimeUTC;
        businessDocumentSubmissionExternal.State = _state2Set;

        if (_setTmstmpTicks)
        {
            businessDocumentSubmissionExternal.setTimestampTicks(createdDateTimeUTC);
        }

        businessDocumentSubmissionExternal.insert();
        ttscommit;

        return businessDocumentSubmissionExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertByBusinessDocument</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static BusinessDocumentSubmissionExternal insertByBusinessDocument(
        BusinessDocument _document,
        boolean _setTmstmpTicks = false)
    {
        if (!_document)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        utcdatetime createdDateTimeUTC = System.DateTime::UtcNow;

        businessDocumentSubmissionExternal.UID = _document.UID;
        businessDocumentSubmissionExternal.AgentId = _document.Channel;
        businessDocumentSubmissionExternal.Timestamp = _document.CreatedDateTime;
        businessDocumentSubmissionExternal.State = _document.State;

        if (_setTmstmpTicks)
        {
            businessDocumentSubmissionExternal.setTimestampTicks(createdDateTimeUTC);
        }

        businessDocumentSubmissionExternal.insert();

        return businessDocumentSubmissionExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimestampTicks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setTimestampTicks(utcdatetime _timestamp)
    {
        System.DateTime timestamp = _timestamp;
        System.UInt64 ticks = timestamp.Ticks;
        this.TimestampTicks = ticks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static BusinessDocumentSubmissionExternal find(
        RefTableId _refTableId,
        RefRecId _refRecId,
        boolean _forupdate = false)
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;

        businessDocumentSubmissionExternal.selectForUpdate(_forupdate);

        select firstonly businessDocumentSubmissionExternal
            where businessDocumentSubmissionExternal.RefTableId == _refTableId
            && businessDocumentSubmissionExternal.RefRecId == _refRecId;

        return businessDocumentSubmissionExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUID</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static BusinessDocumentSubmissionExternal findByUID(
        guid _documentId,
        boolean _forupdate = false)
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;

        businessDocumentSubmissionExternal.selectForUpdate(_forupdate);

        select firstonly businessDocumentSubmissionExternal
            where businessDocumentSubmissionExternal.UID == _documentId;

        return businessDocumentSubmissionExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKeysFromDocInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method initializes natural key fields.
    /// </summary>
    /// <param name = "_info">A document info class.</param>
    [Hookable(false)]
    public void initKeysFromDocInfo(BusinessDocumentInfo _info)
    {
        const int maxArrayLength = 10;
        Map mapIdKeys = _info.getIdentificationKeys();
                
        this.KeyData = mapIdKeys.pack();

        int idx = 1;
        MapEnumerator me = mapIdKeys.getEnumerator();
        while (me.moveNext())
        {
            if (idx <= maxArrayLength)
            {
                this.KeyDataValues[idx] = me.currentValue();
                idx++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets error and warning messages from log.
    /// </summary>
    /// <returns>Messages log.</returns>
    internal container getLog()
    {
        container ret;
        if (this.Log)
        {
            ImageReference imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
            ret = imageReference.pack();
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@BusinessDocumentSubmissionService:BusDocSubmissionExtLogDevDoc</DeveloperDocumentation>
	<Label>@BusinessDocumentSubmissionService:BusDocSubmissionExtLog</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>KeyDataValues[1]</TitleField1>
	<TitleField2>AgentId</TitleField2>
	<ClusteredIndex>RefTableRecIdx</ClusteredIndex>
	<Modules>NotApplicable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorMsg</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Timestamp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyDataValues</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS4004250</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Timestamp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>UID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
			<HelpText>@BusinessDocumentSubmissionService:BusDocID</HelpText>
			<Label>@SYS5468</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>State</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>BusinessDocumentState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorMsg</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ErrorMsg</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Log</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KeyData</ExtendedDataType>
			<Label>@SYS2515</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>KeyData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyDataValues</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyDataArray</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BusinessDocumentAgentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>Timestamp</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS328584</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TimestampTicks</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgentExecutionRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@BusinessDocumentSubmissionService:ExternalAgentExecution</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefTableRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>State</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UidIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TimestampTicksIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TimestampTicks</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgentExecution</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BusinessDocumentExternalAgentExecutions</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgentExecutionRefRecId</Name>
					<Field>AgentExecutionRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>