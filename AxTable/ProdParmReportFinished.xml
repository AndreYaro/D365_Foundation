<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdParmReportFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdParmReportFinished extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>historicalCostQtyError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorHistoricalCost historicalCostQtyError()
    {
        ProdReportedErrorHistoricalCost ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().historicalCostQtyError();
                break;
            default :
                ret = this.prodTable().historicalCostQtyError();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyGood</Name>
				<Source><![CDATA[
    public display ProdReportedGood historicalCostQtyGood()
    {
        ProdReportedGood ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().historicalCostQtyGood();
                break;
            default :
                ret = this.prodTable().historicalCostQtyGood();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdParametersDim</Name>
				<Source><![CDATA[
    public void initFromProdParametersDim(ProdParametersDim   _prodParametersDim)
    {
        this.bomAutoConsump             = _prodParametersDim.bomAutoConsumpRepFin;
        this.RouteAutoConsump           = _prodParametersDim.RouteAutoConsumpRepFin;
        this.bomJournalNameId           = _prodParametersDim.bomJournalNameId;
        this.RouteJournalNameId         = _prodParametersDim.RouteJournalNameId;
        this.ProdJournalNameId          = _prodParametersDim.ProdJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes basic fields from the <c>ProdTable</c> table.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> table to initialize from.
    /// </param>
    /// <remarks>
    /// The basic parameters like ProdId, dimensions, lot id etc are initialized here.
    /// </remarks>
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ProdId         = _prodTable.ProdId;
        this.InventTransId  = _prodTable.InventTransId;
        this.ItemId         = _prodTable.ItemId;
        this.InventDimId    = this.inventDimIdWithOutputLocation(_prodTable, this.ItemId, _prodTable.InventDimId);

        this.PmfProductType = InventTable::find(_prodTable.ItemId).PmfProductType;
        if (_prodTable.PmfCoByVarAllow)
        {
            this.AcceptError = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initValue();

        this.PostNow                    = NoYes::Yes;
        this.AcceptError                = NoYes::No;
        this.EndJob                     = NoYes::Yes;

        this.initFromProdParametersDim(ProdParametersDim::findDefault());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportFinishProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value of the Report as Finished variable.
    /// </summary>
    public void initReportFinishProd()
    {
        if (   !this.ToOprNum
            || this.ToOprNum == ProdRoute::lastOprNum(this.ProdId))
        {
            this.ReportFinishProd = NoYes::Yes;
        }
        else
        {
            this.ReportFinishProd = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.JournalShowInfo        = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.JobStatus = ParmJobStatus::Waiting;

        this.initReportFinishProd();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProdParmReportFinished, ProdId):
                if (!this.RecId)
                {
                    if (!#PmfEnabled)
                    {
                        this.initFromProdTable(this.prodTable());
                        this.QtyGood          = ProdUpdReportFinished::proposalQtyGood(this.ProdId);
                        this.QtyError         = ProdUpdReportFinished::proposalQtyError(this.ProdId);
                        this.ErrorCause       = ProdErrorCause::None;
                        this.ReportFinishProd = NoYes::Yes;
                    }
                }
                break;

            case fieldnum(ProdParmReportFinished, ItemId):
                if (!this.RecId)
                {
                    this.pmfInitFromInventTable(InventTable::find(this.ItemId));
                    this.EndJob = NoYes::No;
                    this.InventTransId = "";
                }
                break;

            case fieldnum(ProdParmReportFinished, InventTransId):
                if (!this.RecId)
                {
                    if (PmfProdCoBy::findTransId(this.InventTransId))
                    {
                        this.pmfInitFromProdCoBy(
                            PmfProdCoBy::findTransId(this.InventTransId));
                    }
                    else if (ProdTable::findTransId(this.InventTransId))
                    {
                        this.initFromProdTable(ProdTable::findTransId(this.InventTransId));
                        this.QtyGood          = ProdUpdReportFinished::proposalQtyGood(this.ProdId);
                        this.QtyError         = ProdUpdReportFinished::proposalQtyError(this.ProdId);
                        this.ErrorCause       = ProdErrorCause::None;
                        this.ReportFinishProd = NoYes::Yes;
                    }
                    this.EndJob = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyError</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWHistoricalCostQtyError()
    {
        PdsCWInventQty ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().pdsCWHistoricalCostQtyError();
                break;
            default :
                ret = this.prodTable().pdsCWHistoricalCostQtyError();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyGood</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWHistoricalCostQtyGood()
    {
        PdsCWInventQty ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().pdsCWHistoricalCostQtyGood();
                break;
            default :
                ret = this.prodTable().pdsCWHistoricalCostQtyGood();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtySched</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWQtySched()
    {
        PdsCWInventQty  sched = 0;
        PmfProdCoBy     prodCoBy;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                if (hasFieldAccess(tablenum(ProdTable), fieldnum(ProdTable,QtySched), AccessType::View))
                {
                    prodCoBy = this.pmfProdCoBy();
                    sched = PdsCatchWeight::cwQty(prodCoBy.ItemId, prodCoBy.coByQty(this.prodTable().QtySched));
                }
                break;
            default :
                if (hasFieldAccess(tablenum(ProdTable), fieldnum(ProdTable,PdsCWBatchSched),AccessType::View))
                {
                    sched = this.prodTable().PdsCWBatchSched;
                }
                break;
        }

        return sched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyStUp</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWQtyStUp()
    {
        PdsCWInventQty  startUp = 0;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                if (hasFieldAccess(tablenum(PmfProdCoBy), fieldnum(PmfProdCoBy,PdsCWInventStup), AccessType::View))
                {
                    startUp = this.pmfProdCoBy().PdsCWInventStup;
                }
                break;
            default :
                if (hasFieldAccess(tablenum(ProdTable), fieldnum(ProdTable,PdsCWBatchStup), AccessType::View))
                {
                    startUp = this.prodTable().PdsCWBatchStup;
                }
                break;
        }

        return startUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRegisteredQty</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWRegisteredQty()
    {
        PdsCWInventQty ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().pdsCWRegisteredQty();
                break;
            default :
                ret = this.prodTable().pdsCWRegisteredQty();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedError</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWReportedFinishedError()
    {
        PdsCWInventQty ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().pdsCWReportedFinishedError();
                break;
            default :
                ret = this.prodTable().pdsCWReportedFinishedErr();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedGood</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWReportedFinishedGood()
    {
        PdsCWInventQty ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().pdsCWReportedFinishedGood();
                break;
            default :
                ret = this.prodTable().pdsCWReportedFinishedGood();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition code associated with the <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <returns>
    /// The disposition code associated with the <c>ProdParmReportFinished</c> record.
    /// </returns>
    public display PdsBatchDispositionCode pdsDispositionCode()
    {
        InventDim               inventDim;
        PdsBatchDispositionCode dispositionCode = '';

        if (hasFieldAccess(
            tablenum(InventBatch),
            fieldnum(InventBatch,PdsDispositionCode),
            AccessType::View))
        {
            inventDim = InventDim::find(this.InventDimId);
            if (inventDim.InventBatchId)
            {
                dispositionCode = InventBatch::find(
                                    inventDim.InventBatchId,
                                    this.ItemId).PdsDispositionCode;
            }
        }

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status associated with the <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <returns>
    /// The disposition status associated with the <c>ProdParmReportFinished</c> record.
    /// </returns>
    public display PdsBatchDispositionStatus pdsDispositionStatus()
    {
        InventDim                   inventDim;
        PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;

        inventDim = InventDim::find(this.InventDimId);

        if (inventDim.InventBatchId)
        {
            status = InventBatch::find(
                        inventDim.InventBatchId,
                        this.ItemId).pdsDispositionStatus();
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitCoByFromProdTable</Name>
				<Source><![CDATA[
    public void pmfInitCoByFromProdTable(ProdTable _prodTable)
    {
        InventDim inventDim;

        InventTable                 inventTable;
        PDSBatchAttribTransfer      transfers;

        this.ProdId = _prodTable.ProdId;

        inventDim.initFromInventLocation(
            _prodTable.inventDim().inventLocation());
        if (this.ItemId)
        {
            if (#PDSLotGenealogyEnabled)
            {
                inventTable = InventTable::find(this.ItemId);
                if (inventTable.pdsBaseAttributeId)
                {
                    if (PDSBatchAttribTransfer::isAttributeInherited(_prodTable.bomId, inventTable.pdsBaseAttributeId, this.ItemId))
                    {
                        transfers           = PDSBatchAttribTransfer::findActive(_prodTable.bomId, this.ItemId, inventTable.pdsBaseAttributeId);
                        this.pdsBaseValue   = PdsBatchAttrib::find(inventTable.pdsBaseAttributeId).locale2Storage(transfers.fromValue(this.ProdId, this.TransDate));
                    }
                }
            }

            inventDim.clearNotActiveDim(InventDimGroupSetup::newItemId(this.ItemId));
        }
        this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

        if (_prodTable.PmfCoByVarAllow)
        {
            this.AcceptError = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitFromInventTable</Name>
				<Source><![CDATA[
    public void pmfInitFromInventTable(InventTable _inventTable)
    {
        InventDim inventDim;

        ProdTable               prodTable;
        PDSBatchAttribTransfer  transfers;

        if (this.ProdId)
        {
            inventDim = InventDim::find(this.prodTable().InventDimId);
        }
        else
        {
            inventDim = InventDim::find(this.InventDimId);
        }
        inventDim.clearNotActiveDim(InventDimGroupSetup::newItemId(this.ItemId));

        this.ItemId         = _inventTable.ItemId;
        this.PmfProductType = _inventTable.PmfProductType;
        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;

        if (_inventTable.pdsBaseAttributeId)
        {
            prodTable = this.prodTable();
            if (PDSBatchAttribTransfer::isAttributeInherited(
                                            prodTable.bomId,
                                            _inventTable.pdsBaseAttributeId,
                                            this.ItemId))
            {
                transfers           = PDSBatchAttribTransfer::findActive(prodTable.bomId, this.ItemId, _inventTable.pdsBaseAttributeId);
                this.pdsBaseValue   = PdsBatchAttrib::find(_inventTable.pdsBaseAttributeId).locale2Storage(transfers.fromValue(this.ProdId, this.TransDate));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitFromProdCoBy</Name>
				<Source><![CDATA[
    public void pmfInitFromProdCoBy(PmfProdCoBy _prodCoBy)
    {
        ProdTable       prodTable = _prodCoBy.prodTable();

        this.ProdId         = _prodCoBy.ProdId;
        this.InventTransId  = _prodCoBy.InventTransId;
        this.ItemId         = _prodCoBy.ItemId;
        this.InventDimId    = this.inventDimIdWithOutputLocation(prodTable, this.ItemId, _prodCoBy.InventDimId);
        this.PmfProductType = _prodCoBy.ProductType;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWBatchGood = ProdUpdReportFinished::pmfCWCoByProposalQtyGood(_prodCoBy);
            this.PdsCWBatchErr  = 0;
            this.QtyGood        = PdsCatchWeight::inventQty(this.ItemId, this.PdsCWBatchGood);
            this.QtyError       = 0;
        }
        else
        {
            this.PdsCWBatchGood = 0;
            this.PdsCWBatchErr  = 0;
            this.QtyGood        = ProdUpdReportFinished::pmfCoByProposalQtyGood(_prodCoBy);
            this.QtyError       = 0;
        }

        if (prodTable.PmfCoByVarAllow)
        {
            this.AcceptError = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfProdCoBy</Name>
				<Source><![CDATA[
    public PmfProdCoBy pmfProdCoBy(boolean _forupdate = false)
    {
        PmfProdCoBy prodCoBy;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                prodCoBy = PmfProdCoBy::findTransId(
                            this.InventTransId,_forupdate);
                break;
        }

        return prodCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodName</Name>
				<Source><![CDATA[
    public display ProdName prodName()
    {
        ProdName prodName;

        if (!this.ItemId && (this.prodTable().ProdType == ProdType::Process))
        {
            return '';
        }

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                prodName = InventTable::find(this.ItemId).itemName();
                break;
            default :
                prodName = ProdTable::find(this.ProdId).Name;
                break;
        }

        return prodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodstatus</Name>
				<Source><![CDATA[
    public display ProdStatus prodstatus()
    {
        return ProdTable::find(this.ProdId).ProdStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forupdate = false)
    {
        return ProdTable::find(this.ProdId,_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySched</Name>
				<Source><![CDATA[
    public display ProdQtySched qtySched()
    {
        ProdQtySched ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().coByQty(this.prodTable().QtySched);
                break;
            default :
                ret = ProdTable::find(this.ProdId).QtySched;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyStUp</Name>
				<Source><![CDATA[
    public display ProdQtyStUp   qtyStUp()
    {
        ProdQtyStUp ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().QtyCoByStUp;
                break;
            default :
                ret = ProdTable::find(this.ProdId).QtyStUp;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQty</Name>
				<Source><![CDATA[
    public display InventQtyRegistered registeredQty()
    {
        InventQtyRegistered ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().registeredQty();
                break;
            default :
                ret = this.prodTable().registeredQty();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorReportedFinished  reportedFinishedError()
    {
        ProdReportedErrorReportedFinished ret;
        // <GEERU>
        #ISOCOuntryRegionCodes
        // </GEERU>

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().reportedFinishedError();
                break;
            default :
                ret = this.prodTable().reportedFinishedError();
                break;
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ret += this.prodTable().releasedError_RU();
        }
        // </GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedGood</Name>
				<Source><![CDATA[
    public display ProdReportedGood reportedFinishedGood()
    {
        ProdReportedGood ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = this.pmfProdCoBy().reportedFinishedGood();
                break;
            default :
                ret = this.prodTable().reportedFinishedGood();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeReportedError</Name>
				<Source><![CDATA[
    public display ProdRouteReportedError routeReportedError()
    {
        ProdRouteReportedError ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = 0;
                break;
            default :
                ret = this.prodTable().routeReportedError();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeReportedGood</Name>
				<Source><![CDATA[
    public display ProdRouteReportedGood routeReportedGood()
    {
        ProdRouteReportedGood ret;

        switch (this.PmfProductType)
        {
            case PmfProductType::By_Product,
                PmfProductType::Co_Product :
                ret = 0;
                break;
            default :
                ret = this.prodTable().routeReportedGood();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        fieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        ProdTable   prodTable   = ProdTable::find(this.ProdId);
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(ProdParmReportFinished, ItemId):
                if (this.ProdId && !prodTable.PmfCoByVarAllow)
                {
                    ret = checkFailed("@PRO2322");
                }
                //fallthrough
            case fieldstr(ProdParmReportFinished, InventTransId):
                if (prodTable.ProdType != ProdType::Process)
                {
                    ret = checkFailed("@PRO2325");
                }
                if (ret && this.InventTransId)
                {
                    InventTransOrigin origin = InventTransOrigin::findByInventTransId(this.InventTransId);
                    if (origin.ReferenceCategory != InventTransType::Production &&
                        origin.ReferenceCategory != InventTransType::PmfProdCoBy)
                    {
                        ret = checkFailed("@PRO2325");
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && !this.ItemId && #PmfEnabled)
        {
            ret = checkFailed(
                strfmt("@PRO2407",
                    fieldid2pname(
                        tablenum(ProdParmReportFinished),
                        fieldnum(ProdParmReportFinished, ItemId))));
        }

        if (ret && !this.RecId)
        {
            // Check for TCA price on insert but do not prevent user from continue
            PmfTCACostPriceValidation::runProdCoBy(this.prodTable(), this.ItemId, this.InventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParameters</Name>
				<Source><![CDATA[
    public static void deleteParameters(Num _parmId)
    {
        ProdParmReportFinished prodParmReportFinished;

        ttsbegin;

        delete_from prodParmReportFinished
            index hint NumLineNumIdx
            where prodParmReportFinished.ParmId == _parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        Num       _parmId,
        ProdId    _prodId)
    {
        return _parmId && _prodId && (select firstonly prodParmReportFinished
                index hint NumProdNumIdx
                where prodParmReportFinished.ParmId  == _parmId   &&
                      prodParmReportFinished.ProdId  == _prodId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProdParmReportFinished find(
        Num       _parmId,
        ProdId    _prodId,
        boolean   _forUpdate = false)
    {
        ProdParmReportFinished prodParmReportFinished;

        prodParmReportFinished.selectForUpdate(_forUpdate);

        if (_parmId && _prodId)
            select firstonly prodParmReportFinished
                index hint NumProdNumIdx
                where prodParmReportFinished.ParmId  == _parmId   &&
                      prodParmReportFinished.ProdId  == _prodId;

        return prodParmReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(Num _parmId)
    {
        return (select maxof(LineNum) from prodParmReportFinished
                    where prodParmReportFinished.ParmId == _parmId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodLookUp</Name>
				<Source><![CDATA[
    public static void prodLookUp(
        Object _lookupCtrl
        , ProdType _prodType = ProdType::Standard
        )
    {
        Query               q;
        ProdTable           prodTable;
        ProdStatusType      prodStatus;
        Counter             i = 0;
        int                 value;
        Common              anyBuffer;
        ProdLookup          prodLookup;
        SysDictEnum         sysDictEnum;

        q = new Query();
        q.addDataSource(tablenum(ProdTable));

        if (#PmfEnabled)
        {
            q.dataSourceTable(tablenum(ProdTable)).
                addRange(fieldnum(ProdTable,ProdType)).
                    value(_prodType == ProdType::Process ?
                        queryValue(ProdType::Process) :
                        SysQuery::valueNot(ProdType::Process));
        }

        sysDictEnum = new SysDictEnum(enumnum(ProdStatus));
        value       = sysDictEnum.firstValue();

        while (i < enumcnt(ProdStatus))
        {
            prodTable.ProdStatus = value;
            prodStatus = prodTable.statusClient();

            if (prodStatus.runReportFinished(anyBuffer as ProdParmReportFinished,true))
                prodStatus.queryAddStatus(q);

            value = sysDictEnum.nextValue(value);
            i++;
        }
        prodLookup = new ProdLookup(_lookupCtrl,q);
        prodLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdWithOutputLocation</Name>
				<Source><![CDATA[
    private InventDimId inventDimIdWithOutputLocation(
        ProdTable   _prodTable,
        ItemId      _itemBeingRAFed,
        InventDimId _inventDimId = _prodTable.InventDimId)
    {
        InventDimId     ret         = _inventDimId;
        InventDim       inventDim   = InventDim::find(ret);

        inventDim.wMSLocationId = _prodTable.defaultOutputLocation(_itemBeingRAFed, this.TransDate, '', inventDim);
        inventDim = inventDim::findOrCreate(inventDim);
        ret = inventDim.InventDimId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates this record's inventory dimensions with the given license plate ID.
    /// </summary>
    /// <param name="_whsLicensePlateId">
    /// The license plate ID to set.
    /// </param>
    public void setLicensePlateId(WHSLicensePlateId _whsLicensePlateId)
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        if (inventDim.LicensePlateId != _whsLicensePlateId)
        {
            inventDim.LicensePlateId = _whsLicensePlateId; // we have to rewrite LP even if it is empty
            this.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;
        }

        if (_whsLicensePlateId)
        {
            // create new license plate, if it doesn't exist
            WHSLicensePlate::createLicensePlate(_whsLicensePlateId);
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates this record's inventory dimensions with the given inventory batch ID.
    /// </summary>
    /// <param name="_inventBatchId">
    /// The batch number ID to set.
    /// </param>
    [Hookable(false)]
    internal void setInventBatchId(InventBatchId _inventBatchId)
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        if (inventDim.inventBatchId != _inventBatchId)
        {
            InventBatch jobInventBatch = InventBatch::findOrCreateWithProdDate(_inventBatchId, this.ItemId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

            inventDim.inventBatchId = jobInventBatch.inventBatchId;
            this.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmForProdTable</Name>
				<Source><![CDATA[
    internal static ProdParmReportFinished defaultParmForProdTable(ProdTable _prodTable, ProdParmId _parmId)
    {
        ProdParmReportFinished prodParmReportFinishedMain;

        prodParmReportFinishedMain.initParmDefault();
        prodParmReportFinishedMain.initFromProdParametersDim(_prodTable.prodParametersDim());
        prodParmReportFinishedMain.initFromProdTable(_prodTable);

        prodParmReportFinishedMain.ParmId         = _parmId;
        prodParmReportFinishedMain.LineNum        = ProdParmReportFinished::lastLineNum(_parmId) + 1;
        prodParmReportFinishedMain.QtyGood        = 0;
        prodParmReportFinishedMain.QtyError       = 0;
        prodParmReportFinishedMain.EndJob         = NoYes::No;

        return prodParmReportFinishedMain;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124166</DeveloperDocumentation>
	<Label>@SYS55278</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumProdNumIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>NumProdNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndJob</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Formula</Name>
			<Label>@PRO1115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfProductType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>prodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journals</Name>
			<Label>@SYS9020</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalShowInfo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operations</Name>
			<Label>@SYS8986</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromOprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToOprNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCause</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndJob</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteAutoConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMAutoConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndRouteCard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPicklist</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportFinishProd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchErr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchGood</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC4</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSBaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickingListJournal</Name>
			<Label>@SYS60017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMAutoConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPicklist</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportAsFinishedJournal</Name>
			<Label>@SYS26712</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndJob</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RespectFlushingPrincipleForWHSReportedOverproduction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportedAsFinished</Name>
			<Label>@SYS9576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCause</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseKindId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RouteCardJournal</Name>
			<Label>@SYS28452</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteAutoConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndRouteCard</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AcceptError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14646</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdAutoUpdate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMAutoConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMAutoConsump</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMJournalNameId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalNameIdBOM</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndJob</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdEndJob</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndPicklist</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdStUpEndPicklist</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndRouteCard</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdStUpEndRouteCard</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorCause</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdErrorCause</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExecutedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateTimeExecuted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FromOprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalShowInfo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalShowInfo</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseAttributeValues</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchErr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchErr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfProductType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdPostNow</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdJournalNameId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalNameIdProd</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReleaseKindId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReleaseRejectKindId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportFinishProd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportFinishProd</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteAutoConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RouteAutoConsump</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteJournalNameId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalNameIdRoute</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ToOprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS16301</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RespectFlushingPrincipleForWHSReportedOverproduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdRespectFlushingPrincipleForWHSReportedOverproduction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumProdNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ParmBuffer</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Linenum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>ProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobStatus</MapField>
					<MapFieldTo>JobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDateTime</MapField>
					<MapFieldTo>ExecutedDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelection</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelectionQuery</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PickingProdJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalName</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PickingProdJournalName</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdParmReportFinished</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMJournalNameId</Name>
					<Field>BOMJournalNameId</Field>
					<RelatedField>JournalNameId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::Picklist</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReleaseKindId_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdReleaseKindTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReleaseKindId_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdParmReportFinished</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReleaseKindId_RU</Name>
					<SourceEDT>ProdReleaseRejectKindId_RU</SourceEDT>
					<Field>ReleaseKindId_RU</Field>
					<RelatedField>ReleaseKindId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsReject_Extern</Name>
					<SourceEDT>ProdReleaseRejectKindId_RU</SourceEDT>
					<RelatedField>IsReject</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReportAsFinishedProdJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalName</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReportAsFinishedProdJournalName</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdParmReportFinished</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdJournalNameId</Name>
					<Field>ProdJournalNameId</Field>
					<RelatedField>JournalNameId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::ReportFinished</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteProdJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalName</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RouteProdJournalName</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdParmReportFinished</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteJournalNameId</Name>
					<Field>RouteJournalNameId</Field>
					<RelatedField>JournalNameId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::RouteCard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>