<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayEmplPeriodTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayEmplPeriodTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType</Name>
				<Source><![CDATA[
    private LedgerJournalACType accountType()
    {
        RPaytitleposting  rPaytitleposting;
        RHRMEmplTable     emplTable;

        emplTable = RHRMEmplTable::find(this.EmplId);

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         this.PayCtype,
                                                         this.EmplId,
                                                         emplTable.PayHRMOrganizationId,
                                                         emplTable.HcmTitle);

        return rPaytitleposting.AccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSourceEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changeSourceEndDate(RPayAverageEarnEmplPeriodTable _averageEarnEmplPeriodTable)
    {
        RPayAverageEarnEmplPeriodTable  recalcAverageEarnEmplPeriodTable;
        RPayEmplPeriodTrans             recalcEmplPeriodTrans;
        RPayTrans                       payTrans;
        EndDate                         endDate;
        ;

        if (! _averageEarnEmplPeriodTable)
        {
            return;
        }

        recalcAverageEarnEmplPeriodTable = _averageEarnEmplPeriodTable.recalcSickList();
        if (recalcAverageEarnEmplPeriodTable)
        {
            while select forupdate recalcEmplPeriodTrans
                where recalcEmplPeriodTrans.AverageEarnEmplPeriodRecId == recalcAverageEarnEmplPeriodTable.RecId
            {
                if (_averageEarnEmplPeriodTable.Included)
                {
                    endDate = endmth(prevMth(RPayParameters::payPeriod(recalcEmplPeriodTrans.EmplId)));

                    if (endDate >= recalcAverageEarnEmplPeriodTable.StartDate && endDate <= recalcAverageEarnEmplPeriodTable.EndDate)
                    {
                        recalcEmplPeriodTrans.EndDate = endDate;
                        recalcEmplPeriodTrans.update();
                    }
                    else
                    {
                        recalcEmplPeriodTrans.Amount = 0;
                        recalcEmplPeriodTrans.update();
                    }

                    delete_from payTrans
                        where payTrans.SourceTableId == recalcEmplPeriodTrans.TableId &&
                              payTrans.SourceRecId   == recalcEmplPeriodTrans.RecId   &&
                              payTrans.PayPeriod     >= RPayParameters::payPeriod(recalcEmplPeriodTrans.EmplId);
                }
                else
                {
                    recalcEmplPeriodTrans.setEndDateAndAmountByChildVacation(recalcAverageEarnEmplPeriodTable);
                    recalcEmplPeriodTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>childVacationAmount</Name>
				<Source><![CDATA[
    private Amount childVacationAmount(RPayAverageEarnEmplPeriodTable   _averageEarnEmplPeriodTable,
                                       ReportPeriod_RU                  _payPeriod = _averageEarnEmplPeriodTable.PayPeriod,
                                       RPayAverageSourceType            _sourceType = RPayAverageSourceType::PaymentFund)
    {
        RPayAverageEarnValue    rPayAverageEarnValue;
        RPayAmount              averageRate;
        ;
        averageRate = (select sum(AverageRate) from rPayAverageEarnValue
                        where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == _averageEarnEmplPeriodTable.RecId
                           && rPayAverageEarnValue.PayPeriod == _payPeriod).AverageRate
                           && ( prmisDefault(_sourceType)
                             || rPayAverageEarnValue.PayAverageSourceType == _sourceType) ;

        if (averageRate <= 0)
        {
            while select sum(AverageRate) from rPayAverageEarnValue
                group by PayPeriod
                where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == _averageEarnEmplPeriodTable.RecId
                   && ( prmisDefault(_sourceType)
                     || rPayAverageEarnValue.PayAverageSourceType == _sourceType)
            {
                if (rPayAverageEarnValue.AverageRate > averageRate)
                {
                    averageRate = rPayAverageEarnValue.AverageRate;
                }
            }
        }
        return averageRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTypeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Name costTypeName()
    {
        return RPayTable::find(this.PayCtype).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SysDictConfigurationKey         dictConfigurationKey;
        RPayAverageEarnEmplPeriodTable  recalcAverageEarnEmplPeriodTable = RPayAverageEarnEmplPeriodTable::findRecId(this.AverageEarnEmplPeriodRecId).recalcSickList();

        super();

        RPayEmplPeriodTrans::updateNextEmplPeriodTrans(recalcAverageEarnEmplPeriodTable);

        dictConfigurationKey = new SysDictConfigurationKey(configurationKeyNum(RPayEmplPeriod));
        RPayEmplCalculate::lastChangeAdd(this.EmplId, dictConfigurationKey.name(), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimension</Name>
				<Source><![CDATA[
    private DimensionDefault dimension()
    {
        RPaytitleposting rPaytitleposting;
        RHRMEmplTable    emplTable;

        emplTable = RHRMEmplTable::find(this.EmplId);

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         this.PayCtype,
                                                         this.EmplId,
                                                         emplTable.PayHRMOrganizationId,
                                                         emplTable.HcmTitle );

        return rPaytitleposting.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kinName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    edit PersonName kinName(boolean _set, RPayEmplPeriodTrans _rPayEmplPeriodTrans, PersonName _kinName)
    {
        RHRMVirtualNetworkFamily    family;
        ;

        if (_set)
        {
            family = RHRMVirtualNetworkFamily::findByRecId(str2recId(_kinName));
            if (family)
            {
                _rPayEmplPeriodTrans.FamilyRecId = family.RecId;
            }
            else
            {
                _rPayEmplPeriodTrans.FamilyRecId = RHRMVirtualNetworkFamily::findByKinName(
                                                        RHRMEmplTable::find(_rPayEmplPeriodTrans.EmplId).personTable().PersonnelNumber,
                                                        _kinName).RecId;
            }
        }

        return RHRMVirtualNetworkFamily::findByRecId(_rPayEmplPeriodTrans.FamilyRecId).KinName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccount</Name>
				<Source><![CDATA[
    private DimensionDynamicDefaultAccount ledgerAccount()
    {
        RPaytitleposting rPaytitleposting;
        RHRMEmplTable    emplTable;

        emplTable = RHRMEmplTable::find(this.EmplId);

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         this.PayCtype,
                                                         this.EmplId,
                                                         emplTable.PayHRMOrganizationId,
                                                         emplTable.HcmTitle);

        return LedgerDimensionFacade::serviceCreateLedgerDimension(rPaytitleposting.LedgerDimension, rPaytitleposting.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the field modification event.
    /// </summary>
    /// <param name="_fieldId">
    /// The changed field id.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        SysDictConfigurationKey     dictConfigurationKey;

        super(_fieldId);

        dictConfigurationKey = new SysDictConfigurationKey(configurationKeyNum(RPayEmplPeriod));
        RPayEmplCalculate::lastChangeAdd(this.EmplId, dictConfigurationKey.name(), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccount</Name>
				<Source><![CDATA[
    private DimensionDynamicDefaultAccount offsetAccount()
    {
        RPaytitleposting rPaytitleposting;
        RHRMEmplTable    emplTable;

        emplTable = RHRMEmplTable::find(this.EmplId);

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         this.PayCtype,
                                                         this.EmplId,
                                                         emplTable.PayHRMOrganizationId,
                                                         emplTable.HcmTitle);

        return LedgerDimensionFacade::serviceCreateLedgerDimension(rPaytitleposting.LedgerDimension, rPaytitleposting.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountType</Name>
				<Source><![CDATA[
    private LedgerJournalACType offsetAccountType()
    {
        RPaytitleposting    rPaytitleposting;
        RHRMEmplTable       emplTable;

        emplTable = RHRMEmplTable::find(this.EmplId);

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         this.PayCtype,
                                                         this.EmplId,
                                                         emplTable.PayHRMOrganizationId,
                                                         emplTable.HcmTitle);
        return rPaytitleposting.AccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetDimension</Name>
				<Source><![CDATA[
    private DimensionDefault offsetDimension()
    {
        RPaytitleposting rPaytitleposting;
        RHRMEmplTable    emplTable;

        emplTable = RHRMEmplTable::find(this.EmplId);

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         this.PayCtype,
                                                         this.EmplId,
                                                         emplTable.PayHRMOrganizationId,
                                                         emplTable.HcmTitle);

        return rPaytitleposting.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndDateAndAmountByChildVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setEndDateAndAmountByChildVacation(RPayAverageEarnEmplPeriodTable _averageEarnEmplPeriodTable)
    {
        RHRMVirtualNetworkFamily       rhrmVirtualNetworkFamily;
        TransDate                      birthDate15;
        RPayRateTable                  ageLimitRate;

        TransDate findEndDate()
        {
            RHRMOrderTrans  orderTrans;
            RHRMOrderTable  orderTable;

            select maxof(PrevVacationEndDate) from orderTrans
                join orderTable
                where orderTrans.EmplId == _averageEarnEmplPeriodTable.EmplId
                &&    orderTrans.PrevVacationStartDate == _averageEarnEmplPeriodTable.StartDate
                &&    orderTrans.OrderTableRecId == orderTable.RecId
                &&    orderTable.JournalType == RHRMJournalType::VacationChildCancel
                &&    orderTable.Posted;

            return orderTrans.PrevVacationEndDate ? orderTrans.PrevVacationEndDate : _averageEarnEmplPeriodTable.EndDate;
        }
        RPayAmount  findPrevAmount(RPayAmount _amount)
        {
            RPayAverageEarnEmplPeriodTable  prevPayAverageEarnEmplPeriodTable = _averageEarnEmplPeriodTable.previousSickList(true);
            RPayEmplPeriodTrans             prevPayEmplPeriodTrans;
            RPayAmount                      amount = _amount;
            ;
            while (prevPayAverageEarnEmplPeriodTable.RecId != 0)
            {
                select maxof(Amount) from prevPayEmplPeriodTrans
                    where prevPayEmplPeriodTrans.AverageEarnEmplPeriodRecId == prevPayAverageEarnEmplPeriodTable.RecId;
                if (prevPayEmplPeriodTrans.Amount > amount)
                {
                    amount = prevPayEmplPeriodTrans.Amount;
                }
                prevPayAverageEarnEmplPeriodTable = prevPayAverageEarnEmplPeriodTable.previousSickList(true);
            }
            return amount;
        }

        if (! _averageEarnEmplPeriodTable)
        {
            return;
        }

        select firstonly rhrmVirtualNetworkFamily
            where rhrmVirtualNetworkFamily.RecId == _averageEarnEmplPeriodTable.FamilyRecId;

        ageLimitRate = RPayRateTable::find(RPaySickIllParameters::find(_averageEarnEmplPeriodTable.RpayIllType).AgeLimit);

        if (rhrmVirtualNetworkFamily.BirthDate && ageLimitRate)
        {
            birthDate15 = dateMthFwd(rhrmVirtualNetworkFamily.BirthDate, real2int(ageLimitRate
                .getValue(RPayRateCallContext::construct(_averageEarnEmplPeriodTable.StartDate, _averageEarnEmplPeriodTable.EmplId))));

            if (this.StartDate <= birthDate15 && birthDate15 <= _averageEarnEmplPeriodTable.EndDate)
            {
                this.EndDate = birthDate15;
            }
            else
            {
                this.EndDate = findEndDate();
            }
        }
        else
        {
            this.EndDate = findEndDate();
        }

        this.AmountOther = findPrevAmount(this.childVacationAmount(_averageEarnEmplPeriodTable, _averageEarnEmplPeriodTable.PayPeriod, RPayAverageSourceType::PaymentFund));
        this.Amount = findPrevAmount(this.childVacationAmount(_averageEarnEmplPeriodTable, _averageEarnEmplPeriodTable.PayPeriod, RPayAverageSourceType::OtherFund));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosting</Name>
				<Source><![CDATA[
    private void updatePosting()
    {
        this.AccountType           = this.accountType();
        this.LedgerDimension       = this.ledgerAccount();
        this.DefaultDimension      = this.dimension();

        this.OffsetAccountType     = this.offsetAccountType();
        this.OffsetLedgerDimension = this.offsetAccount();
        this.OffsetLedgerDimension = this.offsetDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        boolean                         ret;

        ret = super();

        if (ret)
        {
            select firstonly averageEarnEmplPeriodTable
                where averageEarnEmplPeriodTable.RecId == this.AverageEarnEmplPeriodRecId &&
                      averageEarnEmplPeriodTable.Included;

            if (averageEarnEmplPeriodTable)
            {
                ret = checkFailed("@RUP2700");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean ret;
        ;
        ret = super(_p1);
        if (ret)
        {
            if (_p1 == fieldNum(RPayEmplPeriodTrans,PayCtype))
                this.updatePosting();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (! this.Amount && ! this.Sequence)
        {
            ret = checkFailed(strFmt("@RUP2356",fieldPName(RPayEmplPeriodTrans, Amount), fieldPName(RPayEmplPeriodTrans, Sequence)));
        }

        if (! this.PayCtype && ! this.Sequence)
        {
            ret = checkFailed(strFmt("@RUP2356",fieldPName(RPayEmplPeriodTrans, PayCtype), fieldPName(RPayEmplPeriodTrans, Sequence)));
        }

        if (this.StartDate > this.EndDate)
        {
            ret = checkFailed("@RUP2338");
        }

        ret = ret && RPayTable::checkRelativeFilling(this.PayCtype, this.FamilyRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createByChildVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayEmplPeriodTrans createByChildVacation(RPayAverageEarnEmplPeriodTable   _averageEarnEmplPeriodTable)
    {
        RPayEmplPeriodTrans             rPayEmplPeriodTrans;
        RPayEmplPeriodTrans             rPayEmplPeriodTransPrev;
        ReportPeriod_RU                 prevPeriod;

        if (! _averageEarnEmplPeriodTable)
        {
            return rPayEmplPeriodTrans;
        }

        ttsbegin;

        rPayEmplPeriodTrans.AverageEarnEmplPeriodRecId = _averageEarnEmplPeriodTable.RecId;
        rPayEmplPeriodTrans.EmplId                     = _averageEarnEmplPeriodTable.EmplId;

        if (! _averageEarnEmplPeriodTable.RecalcSickListId)
        {
            rPayEmplPeriodTrans.StartDate = _averageEarnEmplPeriodTable.StartDate;
        }
        else
        {
            rPayEmplPeriodTrans.StartDate = dateStartMth(RPayParameters::payPeriod(_averageEarnEmplPeriodTable.EmplId)); // PS56412
            if (rPayEmplPeriodTrans.StartDate < _averageEarnEmplPeriodTable.StartDate ||
                rPayEmplPeriodTrans.StartDate > _averageEarnEmplPeriodTable.EndDate)
            {
                rPayEmplPeriodTrans.StartDate = _averageEarnEmplPeriodTable.StartDate;
            }
            rPayEmplPeriodTrans.changeSourceEndDate(_averageEarnEmplPeriodTable);
        }

        rPayEmplPeriodTrans.setEndDateAndAmountByChildVacation(_averageEarnEmplPeriodTable);

        rPayEmplPeriodTrans.Sequence = RPaySickIllParameters::find(RPayIllType::ChildVacation).PaySequence;
        rPayEmplPeriodTrans.FamilyRecId = _averageEarnEmplPeriodTable.FamilyRecId; // PS56412
        rPayEmplPeriodTrans.insert();

        //--> recalculate prev period
        prevPeriod = endmth(prevMth(RPayParameters::payPeriod()));

        while (_averageEarnEmplPeriodTable.SickListRecalcPeriod &&
               prevPeriod >= min(_averageEarnEmplPeriodTable.SickListRecalcPeriod, endmth(_averageEarnEmplPeriodTable.EndDate)))
        {
            if (prevPeriod <= endmth(_averageEarnEmplPeriodTable.EndDate))
            {
                rPayEmplPeriodTransPrev.data(rPayEmplPeriodTrans);
                rPayEmplPeriodTransPrev.Amount     = rPayEmplPeriodTransPrev.childVacationAmount(_averageEarnEmplPeriodTable, prevPeriod);
                rPayEmplPeriodTransPrev.CalcPeriod = prevPeriod;
                rPayEmplPeriodTransPrev.EndDate    = min(prevPeriod, _averageEarnEmplPeriodTable.EndDate);
                rPayEmplPeriodTransPrev.StartDate  = max(dateStartMth(prevPeriod), _averageEarnEmplPeriodTable.StartDate);
                rPayEmplPeriodTransPrev.insert();
            }
            prevPeriod = endmth(prevMth(prevPeriod));
        }
        //<-- recalculate prev period

        RPayEmplPeriodTrans::updateNextEmplPeriodTrans(_averageEarnEmplPeriodTable.recalcSickList());

        ttscommit;

        return rPayEmplPeriodTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNextEmplPeriodTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateNextEmplPeriodTrans(RPayAverageEarnEmplPeriodTable   _averageEarnEmplPeriodTable)
    {
        RPayAverageEarnEmplPeriodTable  averageEarnEmplTableNext;
        RPayEmplPeriodTrans             rPayEmplPeriodTransNext;

        averageEarnEmplTableNext = _averageEarnEmplPeriodTable.nextSickList(true);
        while (averageEarnEmplTableNext.RecId != 0)
        {
            while select forupdate  rPayEmplPeriodTransNext
                where rPayEmplPeriodTransNext.AverageEarnEmplPeriodRecId == averageEarnEmplTableNext.RecId
            {
                rPayEmplPeriodTransNext.setEndDateAndAmountByChildVacation(averageEarnEmplTableNext);
                rPayEmplPeriodTransNext.update();
            }
            averageEarnEmplTableNext = averageEarnEmplTableNext.nextSickList(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RHRM</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6083</DeveloperDocumentation>
	<Label>@RUP385</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>EmplId</TitleField1>
	<TitleField2>PayCtype</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PayEmplidCtypeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>PayEmplidCtypeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCtype</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@RUP9</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AverageEarn</Name>
			<Label>@RUP491</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageEarnEmplPeriodRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS53632</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCtype</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineValue</Name>
			<Label>@RUP306</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyHour</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountOther</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetAccount</Name>
			<Label>@GLS100952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayType</Name>
			<Label>@RUP172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCtype</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Periods</Name>
			<Label>@SYS4081</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriodFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ByLag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relative</Name>
			<Label>@RUP2906</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>kinName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SickListRelation</Name>
			<Label>@RUP491</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AverageEarnEmplPeriodRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmountDebCred</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountOther</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP6192</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AverageEarnEmplPeriodRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ByLag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@RUP168</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalcPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmplId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RHRMEmplId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<Label>@RUP189</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FamilyRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RHRMFamilyRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetDefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCtype</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCostType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayPeriodFrequency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PeriodFrequency_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayQty</ExtendedDataType>
			<Label>@RUP355</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyHour</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayQty</ExtendedDataType>
			<Label>@SYS1151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySequence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS7402</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayEmplidCtypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EmplId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayCtype</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AverageEarnEmplPeriodRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmplId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RHRMEmplTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EmplId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmplId</Name>
					<SourceEDT>RHRMEmplId</SourceEDT>
					<Field>EmplId</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetDefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OffsetDefaultDimension</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetDefaultDimension</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMVirtualNetworkFamily</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RHRMVirtualNetworkFamily</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMVirtualNetworkFamily</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FamilyRecId</Name>
					<SourceEDT>RHRMFamilyRecId</SourceEDT>
					<Field>FamilyRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayAverageEarnEmplPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayAverageEarnEmplPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayAverageEarnEmplPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AverageEarnEmplPeriodRecId</Name>
					<Field>AverageEarnEmplPeriodRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPaySeqTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPaySeqTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPaySeqTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Sequence</Name>
					<SourceEDT>RPaySequence</SourceEDT>
					<Field>Sequence</Field>
					<RelatedField>Scanning</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayEmplPeriodTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCtype</Name>
					<SourceEDT>RPayCostType</SourceEDT>
					<Field>PayCtype</Field>
					<RelatedField>PayCtype</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_RPayEmplPeriodTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>