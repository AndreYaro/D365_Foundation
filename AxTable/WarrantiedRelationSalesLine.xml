<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WarrantiedRelationSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class WarrantiedRelationSalesLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOrUpdateWarrantiedRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add warrantied relation for given sales lines.
    /// </summary>
    /// <param name = "_warrantiedSerialNumber">serial number of product warrantied</param>
    /// <param name = "_warrantiedSalesLine">sales line warrantied</param>
    /// <param name = "_warrantySalesline">sales line with warranty</param>
    /// <returns>warrantied relation updated or created</returns>
    internal static WarrantiedRelationSalesLine addOrUpdateWarrantiedRelation(
        WarrantiedSerialNumber _warrantiedSerialNumber,
        WarrantySalesLineMap _warrantiedSalesLine,
        WarrantySalesLineMap _warrantySalesline)
    {
        WarrantiedRelationSalesLine warrantiedRelation;
        WarrantiedRelation relation = WarrantiedRelation::Added;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine::validateOrderTypesCombination(
                _warrantiedSalesLine, _warrantySalesline);

            warrantiedRelation = WarrantiedRelationSalesLine::updateWarrantiedRelationIfExists(
                _warrantiedSerialNumber, _warrantiedSalesLine, _warrantySalesline, relation);

            if (!warrantiedRelation)
            {
                ttsbegin;
                warrantiedRelation.CustAccount = _warrantySalesline.CustAccount;

                warrantiedRelation.WarrantiedOrderType = WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesLine);
                warrantiedRelation.WarrantiedSalesId = _warrantiedSalesLine.SalesId;
                warrantiedRelation.WarrantiedItemId = _warrantiedSalesLine.ItemId;
                warrantiedRelation.WarrantiedSalesLineNum = _warrantiedSalesLine.SalesLineNum;
                warrantiedRelation.WarrantiedInventTransId = _warrantiedSalesLine.InventTransId;
                warrantiedRelation.WarrantiedSerialNumber = _warrantiedSerialNumber;

                warrantiedRelation.WarrantyOrderType = WarrantiedRelationSalesLine::getOrderType(_warrantySalesline);
                warrantiedRelation.WarrantySalesId = _warrantySalesline.SalesId;
                warrantiedRelation.WarrantyItemId = _warrantySalesline.ItemId;
                warrantiedRelation.WarrantySalesLineNum = _warrantySalesline.SalesLineNum;
                warrantiedRelation.WarrantyInventTransId = _warrantySalesline.InventTransId;
                warrantiedRelation.Relation = relation;
                warrantiedRelation.insert();
                ttscommit;
            }
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarrantiedRelationIfExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates warrantied relation for given sales lines if it exists.
    /// </summary>
    /// <param name = "_warrantiedSerialNumber">serial number of product warrantied</param>
    /// <param name = "_warrantiedSalesLine">sales line warrantied, empty for 3rd party sales</param>
    /// <param name = "_warrantySalesline">sales line with warranty</param>
    /// <param name = "_relation">warrantied relation</param>
    /// <returns>updated warrantied relation; could be empty if none is found</returns>
    internal static WarrantiedRelationSalesLine updateWarrantiedRelationIfExists(
        WarrantiedSerialNumber _warrantiedSerialNumber,
        WarrantySalesLineMap _warrantiedSalesLine,
        WarrantySalesLineMap _warrantySalesline,
        WarrantiedRelation _relation)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine::validateOrderTypesCombination(
                _warrantiedSalesLine, _warrantySalesline);

            if (WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesLine)
                == WarrantiedRelationOrderType::ThirdParty)
            {
                select forupdate warrantiedRelation
                where warrantiedRelation.WarrantyOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantySalesline)
                    && warrantiedRelation.WarrantySalesId == _warrantySalesline.SalesId
                    && warrantiedRelation.WarrantySalesLineNum == _warrantySalesline.SalesLineNum
                    && warrantiedRelation.WarrantiedSerialNumber == _warrantiedSerialNumber
                    && warrantiedRelation.WarrantiedOrderType == WarrantiedRelationOrderType::ThirdParty
                    && warrantiedRelation.WarrantyItemId == _warrantySalesline.ItemId
                    && warrantiedRelation.WarrantyInventTransId == _warrantySalesline.InventTransId
                    && warrantiedRelation.CustAccount == _warrantySalesline.CustAccount;
            }
            else
            {
                select forupdate warrantiedRelation
                where warrantiedRelation.WarrantyOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantySalesline)
                    && warrantiedRelation.WarrantySalesId == _warrantySalesline.SalesId
                    && warrantiedRelation.WarrantySalesLineNum == _warrantySalesline.SalesLineNum
                    && warrantiedRelation.WarrantiedSerialNumber == _warrantiedSerialNumber
                    && warrantiedRelation.WarrantiedOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesline)
                    && warrantiedRelation.WarrantiedSalesId == _warrantiedSalesLine.SalesId
                    && warrantiedRelation.WarrantiedSalesLineNum == _warrantiedSalesLine.SalesLineNum;
            }

            if (warrantiedRelation.RecId > 0 && warrantiedRelation.Relation != _relation)
            {
                ttsbegin;
                warrantiedRelation.Relation = _relation;
                warrantiedRelation.update();
                ttscommit;
            }
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidWarrantiedRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add warrantied relation for given sales lines.
    /// </summary>
    /// <param name = "_warrantiedSerialNumber">serial number of product warrantied</param>
    /// <param name = "_warrantiedSalesLine">sales line warrantied</param>
    /// <param name = "_warrantySalesline">sales line with warranty</param>
    /// <returns>voided warrantied relation; could be empty if there is no existing warrantied relation</returns>
    internal static WarrantiedRelationSalesLine voidWarrantiedRelation(
        WarrantiedSerialNumber _warrantiedSerialNumber,
        WarrantySalesLineMap _warrantiedSalesLine,
        WarrantySalesLineMap _warrantySalesline)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            warrantiedRelation = WarrantiedRelationSalesLine::updateWarrantiedRelationIfExists(
                _warrantiedSerialNumber, _warrantiedSalesLine, _warrantySalesline, WarrantiedRelation::Voided);
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidWarrantiedRelationByCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets warrantied relations of given customer order to voided.
    /// </summary>
    /// <param name = "_salesId">Id of the customer order.</param>
    internal static void voidWarrantiedRelationByCustomerOrder(
        str _salesId)
    {
        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine relationLookup, relationUpdate;

            // Get first to check if Warrantied Relation exist. And only delete when exist to avoid unnecessary delete operation.
            select firstonly relationLookup
                where relationLookup.WarrantySalesId == _salesId
                && relationLookup.WarrantiedOrderType == WarrantiedRelationOrderType::SalesOrder;

            if (relationLookup)
            {
                update_recordset relationUpdate
                    setting
                        Relation = WarrantiedRelation::Voided
                    where relationUpdate.WarrantySalesId == _salesId
                         && relationUpdate.WarrantyOrderType == WarrantiedRelationOrderType::SalesOrder;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWarrantiedRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find warrantied relation for the sales line warrantied and sales line warranty.
    /// </summary>
    /// <param name = "_warrantiedSerialNumber">serial number of product warrantied; empty if not avaialble</param>
    /// <param name = "_warrantiedSalesLine">sales line warrantied, not used if serial number is provided</param>
    /// <param name = "_warrantySalesline">sales line with warranty</param>
    /// <returns>warrantied relation found</returns>
    internal static WarrantiedRelationSalesLine findWarrantiedRelation(
        WarrantiedSerialNumber _warrantiedSerialNumber,
        WarrantySalesLineMap _warrantiedSalesLine,
        WarrantySalesLineMap _warrantySalesline)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine::validateOrderTypesCombination(
                _warrantiedSalesLine, _warrantySalesline);

            if (_warrantiedSerialNumber)
            {
                select firstonly warrantiedRelation
                where warrantiedRelation.WarrantyOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantySalesline)
                    && warrantiedRelation.WarrantySalesId == _warrantySalesline.SalesId
                    && warrantiedRelation.WarrantySalesLineNum == _warrantySalesline.SalesLineNum
                    && warrantiedRelation.WarrantiedSerialNumber == _warrantiedSerialNumber
                    && warrantiedRelation.WarrantiedOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesline)
                    && warrantiedRelation.WarrantyItemId == _warrantySalesline.ItemId
                    && warrantiedRelation.WarrantyInventTransId == _warrantySalesline.InventTransId
                    && warrantiedRelation.CustAccount == _warrantySalesline.CustAccount;
            }
            else
            {
                select firstonly warrantiedRelation
                where warrantiedRelation.WarrantyOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantySalesline)
                    && warrantiedRelation.WarrantySalesId == _warrantySalesline.SalesId
                    && warrantiedRelation.WarrantySalesLineNum == _warrantySalesline.SalesLineNum
                    && warrantiedRelation.WarrantyInventTransId == _warrantySalesline.InventTransId
                    && warrantiedRelation.WarrantyItemId == _warrantySalesline.ItemId
                    && warrantiedRelation.CustAccount == _warrantySalesline.CustAccount
                    && warrantiedRelation.WarrantiedOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesline)
                    && warrantiedRelation.WarrantiedSalesId == _warrantiedSalesLine.SalesId
                    && warrantiedRelation.WarrantiedSalesLineNum == _warrantiedSalesLine.SalesLineNum
                    && warrantiedRelation.WarrantiedItemId == _warrantiedSalesLine.ItemId
                    && warrantiedRelation.WarrantiedInventTransId == _warrantiedSalesLine.InventTransId;
            }
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWarrantiedRelationByWarrantyInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds warrantied relation by invoice trans of warranty.
    /// </summary>
    /// <param name = "_warantyInvoiceTrans">invoice trans of warranty</param>
    /// <returns>warrantied relation</returns>
    internal static WarrantiedRelationSalesLine findWarrantiedRelationByWarrantyInvoiceTrans(
        CustInvoiceTrans _warantyInvoiceTrans)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            CustAccount custAccount = _warantyInvoiceTrans.invoiceAccount();

            select warrantiedRelation
                where warrantiedRelation.WarrantyOrderType == WarrantiedRelationOrderType::SalesOrder
                    && warrantiedRelation.WarrantyInventTransId == _warantyInvoiceTrans.InventTransId
                    && warrantiedRelation.WarrantySalesId == _warantyInvoiceTrans.SalesId
                    && warrantiedRelation.WarrantyItemId == _warantyInvoiceTrans.ItemId
                    && warrantiedRelation.CustAccount == custAccount;
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWarrantiedRelationByWarrantiedInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds warrantied relation by invoice trans of warrantied.
    /// </summary>
    /// <param name = "_warantiedInvoiceTrans">invoice trans of warrantied</param>
    /// <returns>warrantied relation</returns>
    internal static WarrantiedRelationSalesLine findWarrantiedRelationByWarrantiedInvoiceTrans(
        CustInvoiceTrans _warantiedInvoiceTrans)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            select warrantiedRelation
                where warrantiedRelation.WarrantyOrderType == WarrantiedRelationOrderType::SalesOrder
                    && warrantiedRelation.WarrantiedInventTransId == _warantiedInvoiceTrans.InventTransId
                    && warrantiedRelation.WarrantiedSalesId == _warantiedInvoiceTrans.SalesId
                    && warrantiedRelation.WarrantiedItemId == _warantiedInvoiceTrans.ItemId;
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWarrantiedRelationByWarrantySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds warrantied relation by Warranty SalesLine/QuoteLine (warranty product).
    /// </summary>
    /// <param name = "_salesLine">Warranty SalesLine/QuoteLine</param>
    /// <returns></returns>
    internal static WarrantiedRelationSalesLine findWarrantiedRelationByWarrantySalesLine(
        WarrantySalesLineMap _WarrantySalesLine)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantyOrderType orderType = _warrantySalesLine.TableId == tableNum(SalesLine) ?
                WarrantiedRelationOrderType::SalesOrder : WarrantiedRelationOrderType::Quote;

            select firstonly warrantiedRelation
            where  warrantiedRelation.WarrantyOrderType == orderType
                && warrantiedRelation.WarrantySalesId == _warrantySalesLine.SalesId
                && warrantiedRelation.WarrantySalesLineNum == _warrantySalesLine.SalesLineNum
                && warrantiedRelation.WarrantyItemId == _warrantySalesLine.ItemId
                && warrantiedRelation.Relation == WarrantiedRelation::Added;
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWarrantiedRelationByWarrantiedSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds warrantied relation by Warrantied SalesLine/QuoteLine (warranty product).
    /// </summary>
    /// <param name = "_salesLine">Warrantied SalesLine/QuoteLine</param>
    /// <returns></returns>
    internal static WarrantiedRelationSalesLine findWarrantiedRelationByWarrantiedSalesLine(
        WarrantySalesLineMap _WarrantiedSalesLine)
    {
        WarrantiedRelationSalesLine warrantiedRelation;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedOrderType orderType = _WarrantiedSalesLine.TableId == tableNum(SalesLine) ?
                WarrantiedRelationOrderType::SalesOrder : WarrantiedRelationOrderType::Quote;

            select firstonly warrantiedRelation
            where warrantiedRelation.WarrantiedOrderType == orderType
                && warrantiedRelation.WarrantiedSalesId == _WarrantiedSalesLine.SalesId
                && warrantiedRelation.WarrantiedSalesLineNum == _WarrantiedSalesLine.SalesLineNum
                && warrantiedRelation.WarrantiedItemId == _WarrantiedSalesLine.ItemId
                && warrantiedRelation.Relation == WarrantiedRelation::Added;
        }

        return warrantiedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidWarrantiedRelationByWarrantySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids warranited relation by warranty sales line.
    /// </summary>
    /// <param name = "_warrantySalesline">warranty sales line</param>
    internal static void voidWarrantiedRelationByWarrantySalesLine(
        WarrantySalesLineMap _warrantySalesline)
    {
        if(WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine relationLookup, relationUpdate;

            // Get first to check if Warrantied Relation exist. And only delete when exist to avoid unnecessary delete operation.
            select firstonly relationLookup
                where relationLookup.WarrantyOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantySalesline)
                    && relationLookup.WarrantySalesId == _warrantySalesline.SalesId
                    && relationLookup.WarrantySalesLineNum == _warrantySalesline.SalesLineNum
                    && relationLookup.WarrantyItemId == _warrantySalesline.ItemId
                    && relationLookup.WarrantyInventTransId == _warrantySalesline.InventTransId
                    && relationLookup.Relation == WarrantiedRelation::Added;

            if (relationLookup)
            {
                update_recordset relationUpdate
                    setting
                        Relation = WarrantiedRelation::Voided
                    where relationLookup.WarrantyOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantySalesline)
                        && relationUpdate.WarrantySalesId == _warrantySalesline.SalesId
                        && relationUpdate.WarrantySalesLineNum == _warrantySalesline.SalesLineNum
                        && relationUpdate.WarrantyItemId == _warrantySalesline.ItemId
                        && relationUpdate.WarrantyInventTransId == _warrantySalesline.InventTransId
                        && relationUpdate.Relation == WarrantiedRelation::Added;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidWarrantiedRelationByWarrantiedSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids warranited relation by warrantied sales line.
    /// </summary>
    /// <param name = "_warrantiedSalesline">warrantied sales line</param>
    internal static void voidWarrantiedRelationByWarrantiedSalesLine(
        WarrantySalesLineMap _warrantiedSalesline)
    {
        if(WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine relationLookup, relationUpdate;

            // Get first to check if Warrantied Relation exist. And only delete when exist to avoid unnecessary delete operation.
            select firstonly relationLookup
               where relationLookup.WarrantiedOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesline)
                    && relationLookup.WarrantiedSalesId == _warrantiedSalesline.SalesId
                    && relationLookup.WarrantiedSalesLineNum == _warrantiedSalesline.SalesLineNum
                    && relationLookup.WarrantiedItemId == _warrantiedSalesline.ItemId
                    && relationLookup.WarrantiedInventTransId == _warrantiedSalesline.InventTransId
                    && relationLookup.Relation == WarrantiedRelation::Added;

            if (relationLookup)
            {
                update_recordset relationUpdate
                    setting
                        Relation = WarrantiedRelation::Voided
                    where relationLookup.WarrantiedOrderType == WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesline)
                        && relationUpdate.WarrantiedSalesId == _warrantiedSalesline.SalesId
                        && relationUpdate.WarrantiedSalesLineNum == _warrantiedSalesline.SalesLineNum
                        && relationUpdate.WarrantiedItemId == _warrantiedSalesline.ItemId
                        && relationUpdate.WarrantiedInventTransId == _warrantiedSalesline.InventTransId
                        && relationUpdate.Relation == WarrantiedRelation::Added;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWarrantiedRelationByOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears warrantied relation from those deleted sales lines /Quotation line from the order.
    /// </summary>
    /// <param name = "_orderHeader">Customer Order or Quotation to clear.</param>
    internal static void clearWarrantiedRelationByOrder(
        RetailOrderHeaderMap _orderHeader
        )
    {
        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            WarrantiedRelationSalesLine warrantiedRelation;

            switch (_orderHeader.TableId)
            {
                case tableNum(SalesQuotationTable):
                    // Remove exisitng customer quote warrantied relations.
                    delete_from warrantiedRelation
                    where warrantiedRelation.WarrantyOrderType == WarrantiedRelationOrderType::Quote
                        && warrantiedRelation.WarrantySalesId == _orderHeader.Id;

                    break;

                case tableNum(SalesTable):
                    // Remove relation which does not have warranty sales line exist (voided line).
                    str salesId = _orderHeader.Id;
                    SalesLine salesLineLookup;
                    WarrantiedRelationSalesLine deleteRelation;

                    while select forupdate warrantiedRelation
                        where warrantiedRelation.WarrantyOrderType == WarrantiedRelationOrderType::SalesOrder
                            && warrantiedRelation.WarrantySalesId == salesId
                    {
                        // Check only the warranty line as it's alwasy voided when void a warrantied line.
                        select firstonly salesLineLookup
                            where salesLineLookup.SalesId == salesId
                                && salesLineLookup.InventTransId == warrantiedRelation.WarrantyInventTransId;
                    
                        if (!salesLineLookup)
                        {
                            delete_from deleteRelation
                                where deleteRelation.RecId == warrantiedRelation.RecId;
                        }
                    }

                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarrantiedSerialNumber</Name>
				<Source><![CDATA[
    internal str getWarrantiedSerialNumber()
    {
        str serialNumber;

        if (WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            if (this.WarrantiedOrderType == WarrantiedRelationOrderType::ThirdParty)
            {
                serialNumber = this.WarrantiedSerialNumber;
            }
            else if (this.WarrantiedInventTransId)
            {
                InventTable inventTable = inventTable::find(this.WarrantiedItemId);
                InventDim inventDim;

                // If isActiveInSalesProcess is enabled for warrantied product, then the serial number is maintained by the InventTrackingRegisterTrans
                // Else it will be maintained direclty by the SalesLine/SalesQuotationLine.
                if (inventTable.isActiveInSalesProcess())
                {
                    InventTransOrigin inventTransOrigin;
                    InventTrackingRegisterTrans inventTrackingRegisterTrans;

                    select firstonly InventSerialId from inventDim
                    join inventTrackingRegisterTrans
                    where inventTrackingRegisterTrans.InventDimId == inventDim.inventDimId
                    join inventTransOrigin
                    where inventTransOrigin.RecId ==inventTrackingRegisterTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == this.WarrantiedInventTransId;
                }
                else
                {
                    if (this.WarrantiedOrderType == WarrantiedRelationOrderType::SalesOrder)
                    {
                        inventDim = InventDim::find(SalesLine::findInventTransId(this.WarrantiedInventTransId).InventDimId);
                    }
                    else if (this.WarrantiedOrderType == WarrantiedRelationOrderType::Quote)
                    {
                        inventDim = InventDim::find(SalesQuotationLine::findInventTransId(this.WarrantiedInventTransId).InventDimId);
                    }
                }

                // Check if the serial number associated to the SalesLine/SalesQuotationLine.
                // In the furture, like 3rd party support, we may check the value stored in WarrantiedSerialNumber when no SerialNumber is assoicated with InventTransId.
                if (inventDim)
                {
                    serialNumber = inventDim.InventSerialId;
                }

                // for cash and carry.
                if (!serialNumber)
                {
                    serialNumber = this.WarrantiedSerialNumber;
                }
            }
        }

        return serialNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderTypesCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that order types of warrantied and warranty are valid combination.
    /// </summary>
    /// <param name = "_warrantiedSalesLine">sales line warrantied</param>
    /// <param name = "_warrantySalesline">sales line with warranty</param>
    internal static void validateOrderTypesCombination(
        WarrantySalesLineMap _warrantiedSalesLine,
        WarrantySalesLineMap _warrantySalesline)
    {
        if (WarrantiedRelationSalesLine::getOrderType(_warrantiedSalesLine)
            == WarrantiedRelationOrderType::ThirdParty)
        {
            return;
        }

        if (_warrantiedSalesLine.SourceTableId != _warrantySalesline.SourceTableId)
        {
            CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
            eventSource.EventWriteWarrantyWarrantiedRelationOrderTypesCombinationNotSupported(
                tableId2Name(_warrantiedSalesLine.SourceTableId),
                tableId2Name(_warrantySalesline.SourceTableId));
            throw error(strFmt(
                "@Warranty:OrderTypesCombinationNotSupported",
                tableId2Name(_warrantiedSalesLine.SourceTableId),
                tableId2Name(_warrantySalesline.SourceTableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets order type of the warranty sales line map.
    /// </summary>
    /// <param name = "_warrantySalesline">warranty sales line map</param>
    /// <returns>order type of the warranty sales line map</returns>
    internal static WarrantiedRelationOrderType getOrderType(WarrantySalesLineMap _warrantySalesline)
    {
        if (!_warrantySalesline)
        {
            return WarrantiedRelationOrderType::ThirdParty;
        }

        WarrantiedRelationOrderType orderType;

        switch (_warrantySalesline.SourceTableId)
        {
            case tableNum(SalesLine):
                orderType = WarrantiedRelationOrderType::SalesOrder;
                break;

            case tableNum(SalesQuotationLine):
                orderType = WarrantiedRelationOrderType::Quote;
                break;

            default:
                CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
                eventSource.EventWriteWarrantyWarrantiedRelationOrdeTypeNotSupported(
                    tableId2Name(_warrantySalesline.SourceTableId));
                throw error(strFmt("@Warranty:OrdeTypeNotSupported", tableId2Name(_warrantySalesline.SourceTableId)));
        }

        return orderType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@Warranty:WarrantiedRelationSalesLineDevDoc</DeveloperDocumentation>
	<Label>@Warranty:WarrantiedRelationSalesLine</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarrantiedOrderType</Name>
			<ExtendedDataType>WarrantiedOrderType</ExtendedDataType>
			<EnumType>WarrantiedRelationOrderType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantiedSalesId</Name>
			<ExtendedDataType>WarrantiedSalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantiedItemId</Name>
			<ExtendedDataType>WarrantiedItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WarrantiedSalesLineNum</Name>
			<ExtendedDataType>WarrantySalesLineNumWarrantied</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantiedInventTransId</Name>
			<ExtendedDataType>WarrantyInventTransIdWarrantied</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantiedSerialNumber</Name>
			<ExtendedDataType>WarrantiedSerialNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarrantyOrderType</Name>
			<ExtendedDataType>WarrantyOrderType</ExtendedDataType>
			<EnumType>WarrantiedRelationOrderType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantySalesId</Name>
			<ExtendedDataType>WarrantySalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantyItemId</Name>
			<ExtendedDataType>WarrantyItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WarrantySalesLineNum</Name>
			<ExtendedDataType>WarrantySalesLineNumWarranty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantyInventTransId</Name>
			<ExtendedDataType>WarrantyInventTransIdWarranty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Relation</Name>
			<EnumType>WarrantiedRelation</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>WarrantyOrderType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantyInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedSerialNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedOrderType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedInventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesLineIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WarrantyOrderType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantySalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantySalesLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedSerialNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedOrderType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedSalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarrantiedSalesLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesLineWarrantied</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantiedSalesId</Name>
					<Field>WarrantiedSalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantiedSalesLineNum</Name>
					<Field>WarrantiedSalesLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantiedInventTransId</Name>
					<Field>WarrantiedInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLineWarranty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantySalesId</Name>
					<Field>WarrantySalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantySalesLineNum</Name>
					<Field>WarrantySalesLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantyInventTransId</Name>
					<Field>WarrantyInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>QuotationLineWarrantied</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantiedSalesId</Name>
					<Field>WarrantiedSalesId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantiedSalesLineNum</Name>
					<Field>WarrantiedSalesLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantiedInventTransId</Name>
					<Field>WarrantiedInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>QuotationLineWarranty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantySalesId</Name>
					<Field>WarrantySalesId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantySalesLineNum</Name>
					<Field>WarrantySalesLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarrantyInventTransId</Name>
					<Field>WarrantyInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>