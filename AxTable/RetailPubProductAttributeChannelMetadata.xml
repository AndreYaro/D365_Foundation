<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPubProductAttributeChannelMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPubProductAttributeChannelMetadata extends common
{
    /// <summary>
    /// Populates publishing data for the specified channel in the <c>RetailPubProductAttributeChannelMetadata</c> table.
    /// </summary>
    /// <param name="_channelId">
    /// Id of the channel to publish.
    /// </param>
    /// <param name = "_publishDescendents">
    /// To publish hierarcgy or not.
    /// </param>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>publishChannel</Name>
				<Source><![CDATA[
    public static void publishChannel(RefRecId _channelId,
        boolean _publishDescendents = false
        )
    {
        RetailInternalOrganization publishedOrganization;

        if (_channelId > 0)
        {
            publishedOrganization = RetailInternalOrganization::findByChannelId(_channelId);
            RetailPubProductAttributeChannelMetadata::updateChannel(publishedOrganization.RecId, _publishDescendents);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates publishing data for the specified InternalOrg and its child in the <c>RetailPubProductAttributeChannelMetadata</c> table.
    /// </summary>
    /// <param name="_publishedOrganization">
    /// Organization id of the parent org to publish
    /// </param>
    /// <param name="_publishDescendents">
    /// To publish hierarchy or not.
    /// </param>
    /// <remarks>
    /// Publish the entire hierarchy
    /// </remarks>

    public static void updateChannel(RetailInternalOrgRefRecId _publishedOrganization, boolean _publishDescendents)
    {
        RetailProdAttribIntOrgMetadataCollapsed internalOrgMetadataCollapsed;
        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrgExploded internalOrgExploded;
        RetailInternalOrgAttributeGroupExploded internalOrgAttributeGroupExploded;
        RetailChannelTable retailChannelTable;
        RetailPubProductAttributeChannelMetadata pubMetadata, foundMetadata;
        RetailProdAttributeInternalOrgMetadata metadata;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;
        EcoResAttribute ecoResAttribute;
        EcoResAttributeType ecoResAttributeType;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        utcDateTime utcNow = DateTimeUtil::utcNow();

        #define.maxAttempts(8)
        #define.timeSlot(1000)

        int tryCount = 0;

        RetailTmpRecIdMap tmpChannelToRetailInternalOrg;
        str tmpChannelToRetailInternalOrgPhysicalTableName;

        try
        {
            if (tryCount == 0)
            {
                tmpChannelToRetailInternalOrgPhysicalTableName = RetailUtilities::getPhysicalTableName(tmpChannelToRetailInternalOrg);

                insert_recordset tmpChannelToRetailInternalOrg(KeyRecId, ValueRecId)
                    select RecId from retailChannelTable
                    join RecId from retailInternalOrganization
                        where retailInternalOrganization.InternalOrganization == retailChannelTable.OMOperatingUnitID
                    exists join internalOrgExploded
                        where internalOrgExploded.AncestorInternalOrg == _publishedOrganization
                            && internalOrgExploded.InternalOrganization == retailInternalOrganization.RecId
                            && (_publishDescendents || internalOrgExploded.Distance == 0)
                            && internalOrgExploded.ValidFrom <= utcNow
                            && internalOrgExploded.ValidTo >= utcNow;
            }

            tryCount++;

            ttsBegin;

            // Delete which does not exists
            delete_from pubMetadata
            exists join tmpChannelToRetailInternalOrg
                where tmpChannelToRetailInternalOrg.KeyRecId == pubMetadata.HostChannel
            notExists join internalOrgMetadataCollapsed
                where internalOrgMetadataCollapsed.Origin == pubMetadata.OriginId
                    && internalOrgMetadataCollapsed.ValidFrom <= utcNow
                    && internalOrgMetadataCollapsed.ValidTo >= utcNow
                    && internalOrgMetadataCollapsed.InternalOrganization == tmpChannelToRetailInternalOrg.ValueRecId;

            // Delete which have been modified
            delete_from pubMetadata
            exists join tmpChannelToRetailInternalOrg
                where tmpChannelToRetailInternalOrg.KeyRecId == pubMetadata.HostChannel
            exists join metadata
                where metadata.RecId == pubMetadata.OriginId
                    && (metadata.recVersion != pubMetadata.OriginRecVersion

                    // BUG 922639 - duplicate key error when publishing to SharePoint
                    // Don't know how the bad data came. Here deleting the bad data any way.
                    || metadata.Attribute != pubMetadata.Attribute);

            // Insert
            insert_recordset pubMetadata (Attribute, AttributeRelationType, KeyName, Metadata, MetadataVersion, OriginId, OriginRecVersion, HostChannel)
            select Attribute, AttributeRelationType, KeyName, Metadata, MetadataVersion from internalOrgMetadataCollapsed
                where internalOrgMetadataCollapsed.ValidFrom <= utcNow
                    && internalOrgMetadataCollapsed.ValidTo >= utcNow
                join RecId, RecVersion from metadata
                    where metadata.InternalOrganization == internalOrgMetadataCollapsed.AncestorInternalOrg
                        && metadata.Attribute == internalOrgMetadataCollapsed.Attribute
                join KeyRecId from tmpChannelToRetailInternalOrg
                    where tmpChannelToRetailInternalOrg.ValueRecId == internalOrgMetadataCollapsed.InternalOrganization
                notExists join foundMetadata
                    where foundMetadata.HostChannel == tmpChannelToRetailInternalOrg.KeyRecId
                            && foundMetadata.Attribute == internalOrgMetadataCollapsed.Attribute;

            // set the DataType field for non-reference attributes
            update_recordSet pubMetadata
            setting DataType = ecoResAttributeType.DataType
                join ecoResAttribute
                    where pubMetadata.Attribute == ecoResAttribute.RecId
                join ecoResAttributeType
                        where ecoResAttributeType.RecId == ecoResAttribute.AttributeType
                        && ecoResAttributeType.DataType != pubMetadata.DataType
                        && ecoResAttributeType.DataType != AttributeDataType::Reference;

            // set the DataType field for reference attributes
            update_recordSet pubMetadata
            setting DataType = ecoResAttributeType.DataType
                join attributeReference
                    where attributeReference.Attribute == pubMetadata.Attribute
                join ecoResReferenceValue
                    where ecoResReferenceValue.RecId == attributeReference.Value
                        && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                join ecoResAttribute
                    where ecoResAttribute.RecId == ecoResReferenceValue.RefRecId
                join ecoResAttributeType
                        where ecoResAttributeType.RecId == ecoResAttribute.AttributeType
                        && ecoResAttributeType.DataType != pubMetadata.DataType;

            // Update AttributeGroup, AttributeGroupDisplayOrder, AttributeDisplayOrder for the channel server to sort the attributes.
            // The attribute groups can be set on
            //   1. The channel itself directly
            //   2. The channel's parent (channel inheritance enabled)
            //   3. The combination of the above
            // The AttributeGroup and AttributeGroupDisplayOrder come from the view RetailInternalOrgAttributeGroupExploded,
            // The view joins the channel inheritance table and the channel to attribute groups mapping table to generate a
            // comprehensive channel to attribute groups with inheritance mapping, which will handle the situations mentioned
            // above.
            if (FeatureStateProvider::isFeatureEnabled(RetailEnableDisplayOrderForMerchandisingFeature::instance()))
            {
                update_recordset pubMetadata
                setting AttributeDisplayOrder = ecoResAttributeGroupAttribute.RetailDisplayOrder,
                        AttributeGroup = internalOrgAttributeGroupExploded.AttributeGroup,
                        AttributeGroupDisplayOrder = internalOrgAttributeGroupExploded.AttributeGroupDisplayOrder
                    join retailChannelTable
                        where retailChannelTable.RecId == pubMetadata.HostChannel
                    join retailInternalOrganization
                        where retailInternalOrganization.InternalOrganization == retailChannelTable.OMOperatingUnitID
                    join ecoResAttributeGroupAttribute
                        where ecoResAttributeGroupAttribute.Attribute == pubMetadata.Attribute
                    join internalOrgAttributeGroupExploded
                        where internalOrgAttributeGroupExploded.InternalOrganization == retailInternalOrganization.RecId &&
                              internalOrgAttributeGroupExploded.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup;
            }

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            // Bug 3687580 - As a first approach, we are trying to just catch the deadlocks and retry the failed tasks
            // after a brief sleep;
            // A more aggressive approach is also reducing the size of the transactions, as each task should be working
            // on a different group of records. If there is a failure during the process, the user can always re-validate
            // the catalog (The first action of this method is to delete all records for the channel - This could be pottentisally
            // split into a different transaction, with the collateral effect of losing the previous records in case of failure).
            // To serialize the Job, a developer exepericing deadlocks in parallel execution of this method should also consider having a table
            // with a SIGN field used as a semaphore for this operation, waiting for the GRENN sign before setting to RED,
            // executing the operation and setting to GREEN upon completion. THis may be necessary due to the high number of
            // deadlocks generated for databases with large catalogs.

            // Sleep with Exponential Backoff;
            if (1 <= tryCount && tryCount <= #maxAttempts)
            {
                int sleepTime = real2int(((power(2, tryCount) - 1) / 2) * #timeSlot);
                sleep(sleepTime);
                retry;
            }
            else
            {
                throw Exception::Deadlock;
            }
        }
        finally
        {
            tmpChannelToRetailInternalOrg.dispose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET490323</DeveloperDocumentation>
	<Label>@RET261229</Label>
	<TitleField1>HostChannel</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HostChannel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Metadata</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductAttributeMetadata</Name>
			<Label>@RET261229</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HostChannel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Metadata</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginRecVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MetadataVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AttributeDisplayOrder</Name>
			<AssetClassification>Customer content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroup</Name>
			<AssetClassification>Customer content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AttributeGroupDisplayOrder</Name>
			<AssetClassification>Customer content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailProductAttributeRelationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>AttributeDataType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HostChannel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeKeyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Metadata</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeChannelMetadata</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MetadataVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelMetadataVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OriginRecVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOriginRecVersion</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductAttribute</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HostChannel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductAttributeKeyName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>HostChannel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>KeyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HostChannel</Name>
					<Field>HostChannel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailProdAttributeInternalOrgMetadata</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailProdAttributeInternalOrgMetadata</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginId</Name>
					<Field>OriginId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPubRetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailPubRetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HostChannel</Name>
					<Field>HostChannel</Field>
					<RelatedField>OriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OriginIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>