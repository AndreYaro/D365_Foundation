<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileItemTmp_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBSpedFileItemTmp_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertFromFiscalDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedFileItemTmp_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the item comes.
    /// </param>
    /// <param name="_itemId">
    ///     A Item id for the item.
    /// </param>
    public void insertFromFiscalDocumentLine(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, ItemId _itemId)
    {
        this.clear();
        this.FiscalEstablishmentRecId = _fiscalEstablishmentRecId;
        this.ItemId = _itemId;

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUniqueFromSpedFiscalBlockK</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedFileItemTmp_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the item comes.
    /// </param>
    /// <param name="_itemId">
    ///     A Item id for the item.
    /// </param>
    /// <param name="_spedItemId">
    ///     A Sped Item id for the item.
    /// </param>
    /// <param name="_bomId">
    ///     The BOM identification.
    /// </param>
    public void insertUniqueFromSpedFiscalBlockK(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, ItemId _itemId, SpedItemId _spedItemId, BOMId _bomId)
    {
        FBSpedFileItemTmp_BR currentSpedFileItemTmp = FBSpedFileItemTmp_BR::findForItemIdAndSpedItemId(this, _fiscalEstablishmentRecId, _itemId, _spedItemId);

        if (!currentSpedFileItemTmp)
        {
            ttsBegin;
            this.clear();
            this.FiscalEstablishmentRecId = _fiscalEstablishmentRecId;
            this.ItemId = _itemId;
            this.SpedItemId = _spedItemId;
            this.BOMId = _bomId;

            this.insert();
            ttsCommit;
        }
        else if (currentSpedFileItemTmp && !currentSpedFileItemTmp.BOMId && _bomId)
        {
            ttsBegin;
            currentSpedFileItemTmp.BOMId = _bomId;

            currentSpedFileItemTmp.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectItemIdOrSpedItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select among the fields <c>ItemId</c> or <c>SpedItemId</c>. This selection will be made if the field <c>SpedItemId</c> is different from <c>ItemId</c> and not empty.
    /// </summary>
    /// <returns>
    /// Returns the <c>SpedItemId</c> field if this has been selected; otherwise returns <c>ItemId</c> field.
    /// </returns>
    public SpedItemId selectItemIdOrSpedItemId()
    {
        return this.shouldReportSpedItemId() ? this.SpedItemId : this.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReportSpedItemId</Name>
				<Source><![CDATA[
    private boolean shouldReportSpedItemId()
    {
        return strCmp(this.SpedItemId, '') != 0 &&
               strCmp(this.SpedItemId, this.ItemId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the <c>FBSpedFileItemTmp_BR</c> temporary table represented by the current table buffer instance.
    /// </summary>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the item comes.
    /// </param>
    /// <param name="_inventTable">
    ///     A <c>InventTable</c> table buffer representing the inventory item.
    /// </param>
    public void insertFromInventTable(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, InventTable _inventTable)
    {
        this.clear();
        this.FiscalEstablishmentRecId = _fiscalEstablishmentRecId;
        this.ItemId = _inventTable.ItemId;

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified record in the <c>FBSpedFileItemTmp_BR</c> temporary table exists.
    /// </summary>
    /// <param name="_spedFileItem">
    ///     The instance of table buffer <c>FBSpedFileItemTmp_BR</c> where data should be searched for.
    /// </param>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the item comes.
    /// </param>
    /// <param name="_itemId">
    ///     An <c>ItemId</c> representing the item ID to be searched for in the temporary table.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsForItemId(FBSpedFileItemTmp_BR _spedFileItem, FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, ItemId _itemId)
    {
        select firstOnly _spedFileItem
            where _spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishmentRecId
                && _spedFileItem.ItemId == _itemId;

        return _spedFileItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForItemIdAndSpedItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified record in the <c>FBSpedFileItemTmp_BR</c> temporary table exists.
    /// </summary>
    /// <param name="_spedFileItem">
    ///     The instance of table buffer <c>FBSpedFileItemTmp_BR</c> where data should be searched for.
    /// </param>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the item comes.
    /// </param>
    /// <param name="_itemId">
    ///     An <c>ItemId</c> representing the item ID to be searched for in the temporary table.
    /// </param>
    /// <param name="_spedItemId">
    ///     An <c>SpedItemId</c> representing the Sped Item ID to be searched for in the temporary table.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static FBSpedFileItemTmp_BR findForItemIdAndSpedItemId(FBSpedFileItemTmp_BR _spedFileItem, FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, ItemId _itemId, SpedItemId _spedItemId)
    {
        if ( strCmp(_itemId, _spedItemId) == 0)
        {
            select firstOnly forUpdate RecId from _spedFileItem
                where _spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishmentRecId
                      && _spedFileItem.ItemId == _itemId
                      && ( _spedFileItem.SpedItemId == '' || _spedFileItem.SpedItemId == _spedItemId);
        }
        else
        {
            select firstOnly forUpdate RecId from _spedFileItem
                where _spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishmentRecId
                    && _spedFileItem.ItemId == _itemId
                    && _spedFileItem.SpedItemId == _spedItemId;
        }

        return _spedFileItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMasterBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the BOMId related to finished good (in sped fiscal classification).
    /// </summary>
    /// <param name="_spedFileItem">
    ///     The instance of table buffer <c>FBSpedFileItemTmp_BR</c> where data should be searched for.
    /// </param>
    /// <param name="_fiscalEstablishmentRecId">
    ///     A record ID of the <c>FiscalEstablishment_BR</c> table representing the fiscal establishment from which the item comes.
    /// </param>
    /// <param name="_itemId">
    ///     An <c>ItemId</c> representing the item ID to be searched for in the temporary table.
    /// </param>
    /// <returns>
    ///     The BOMId related to the finished good.
    /// </returns>
    public static BOMId getMasterBOMId(FBSpedFileItemTmp_BR _spedFileItem, FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, ItemId _itemId)
    {
        select firstOnly BOMId from _spedFileItem
            where _spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishmentRecId
                  && _spedFileItem.ItemId == _itemId
                  && _spedFileItem.BOMId != ''
                  && (_spedFileItem.SpedItemId == _itemId || _spedFileItem.SpedItemId == '');

        return _spedFileItem.BOMId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@sys4082459</DeveloperDocumentation>
	<Label>@sys4082458</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishmentRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<HelpText>@sys25039</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpedItemId</Name>
			<ExtendedDataType>SpedItemId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FiscalEstablishmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalEstablishmentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>