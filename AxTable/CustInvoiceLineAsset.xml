<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceLineAsset</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceLineAsset extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.AssetSaleFactor = 100;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;
        CustInvoiceLine custInvoiceLine;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustInvoiceLineAsset, AssetSaleFactor) :
                    if (this.AssetSaleFactor <= 0 || this.AssetSaleFactor > 100)
                    {
                        isValid = checkFailed("@SYS31248");
                    }

                    if (isValid && this.AssetSaleFactor > 0 && this.AssetSaleFactor < 100)
                    {
                        custInvoiceLine = CustInvoiceLine::find(this.CustInvoiceLine);
                        if (custInvoiceLine
                            && !AssetPostDisposal_Pl::isDisposalWithPolishDepreciation(
                                    custInvoiceLine.AssetId, custInvoiceLine.AssetBookId))
                        {
                            isValid = checkFailed("@GLS221846");
                        }
                    }
                break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #isoCountryRegionCodes
        boolean isValid;
        CustInvoiceLine custInvoiceLine;

        isValid = super();

        if (this.CustInvoiceLine
            && this.AssetSaleFactor != 100
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            custInvoiceLine = CustInvoiceLine::find(this.CustInvoiceLine);
            if (custInvoiceLine.AssetId
                && custInvoiceLine.AssetBookId
                && !AssetPostDisposal_Pl::isDisposalWithPolishDepreciation(
                    custInvoiceLine.AssetId, custInvoiceLine.AssetBookId))
            {
                this.AssetSaleFactor = 100;
                isValid = checkFailed("@GLS221846");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a copy of the free text invoice line asset record for the given free text invoice line.
    /// </summary>
    /// <param name="_bufferFrom">
    /// The original free text invoice line.
    /// </param>
    /// <param name="_bufferTo">
    /// The new free text invoice line.
    /// </param>
    public static void copy(CustInvoiceLine _bufferFrom, CustInvoiceLine _bufferTo)
    {
        #isoCountryRegionCodes

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            return;
        }

        CustInvoiceLineAsset custInvoiceLineAssetOrig = CustInvoiceLineAsset::findByCustInvoiceLineId(_bufferFrom.RecId);

        if (custInvoiceLineAssetOrig)
        {
            CustInvoiceLineAsset custInvoiceLineAssetCopy = custInvoiceLineAssetOrig.data();

            custInvoiceLineAssetCopy.CustInvoiceLine = _bufferTo.RecId;

            custInvoiceLineAssetCopy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CustInvoiceLineAsset</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>CustInvoiceLineAsset</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustInvoiceLineAsset</c> table; otherwise, an empty record.
    /// </returns>
    public static CustInvoiceLineAsset find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceLineAsset custInvoiceLineAsset;

        custInvoiceLineAsset.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceLineAsset.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                custInvoiceLineAsset
            where
                custInvoiceLineAsset.RecId == _recId;

        return custInvoiceLineAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceLineId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CustInvoiceLineAsset</c> table.
    /// </summary>
    /// <param name="_custInvoiceLineRecId">
    /// The <c>CustInvoiceLineRecId</c> value of the <c>CustInvoiceLineAsset</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustInvoiceLineAsset</c> table; otherwise, an empty record.
    /// </returns>
    public static CustInvoiceLineAsset findByCustInvoiceLineId(
        RefRecId _custInvoiceLineRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceLineAsset custInvoiceLineAsset;

        custInvoiceLineAsset.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceLineAsset.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                custInvoiceLineAsset
            where
                custInvoiceLineAsset.CustInvoiceLine == _custInvoiceLineRecId;

        return custInvoiceLineAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustInvoiceLine</Name>
				<Source><![CDATA[
    public CustInvoiceLine CustInvoiceLine(CustInvoiceLine _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('CustInvoiceLine');
        }
        else
        {
            return this.setLink('CustInvoiceLine', _relatedTable);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS221838</DeveloperDocumentation>
	<Label>@GLS221841</Label>
	<SingularLabel>Customer invoice line</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>CustInvoiceLine</TitleField1>
	<TitleField2>AssetSaleFactor</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetSaleFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other_PL</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetSaleFactor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssetSaleFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlAssetSaleFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInvoiceLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>CustInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLine</Name>
					<Field>CustInvoiceLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ParentRecIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>