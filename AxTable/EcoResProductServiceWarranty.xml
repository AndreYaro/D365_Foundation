<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductServiceWarranty</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductServiceWarranty extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.DurationTimeUnit = WarrantyDurationTimeUnit::Day;
        this.DurationTime = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.DistinctProduct)
        {
            EcoResProduct ecoResProduct;
            select firstonly ecoResProduct 
                where ecoResProduct.RecId == this.DistinctProduct;

            if (!ecoResProduct.isDistinctProduct()
                || ecoResProduct.ProductType != EcoResProductType::Service
                || ecoResProduct.ServiceType != EcoResProductServiceType::Warranty)
            {
                ret = checkFailed("@Warranty:WarrantyCreationCheckError");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeWarrantyProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a product can be a warranty product.
    /// </summary>
    /// <param name = "_productIdentificationData">Instance of <c>EcoResProductIdentificationData</c> on which to check data.</param>
    /// <returns>True if the specified product can be a warranty product; otherwise false.</returns>
    internal static boolean canBeWarrantyProduct(
        EcoResProductIdentificationData _productIdentificationData)
    {
        return _productIdentificationData.parmProductType() == EcoResProductType::Service
            && _productIdentificationData.parmProductSubType() == EcoResProductSubtype::Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(EcoResProductServiceWarranty, DurationTime):
                    if (this.DurationTime <= 0)
                    {
                        ret = checkFailed("@Warranty:WarrantyDurationNotPositive");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDistinctProductId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>EcoResProductServiceWarranty</c> record with given product ID.
    /// </summary>
    /// <param name = "_distinctProductId">product ID</param>
    /// <returns><c>EcoResProductServiceWarranty</c> record with given product ID</returns>
    internal static EcoResProductServiceWarranty findByDistinctProductId(EcoResDistinctProductRecId _distinctProductId)
    {
        EcoResProductServiceWarranty warrantyProduct;

        // unique
        select firstonly warrantyProduct
            where warrantyProduct.DistinctProduct == _distinctProductId;
        return warrantyProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>EcoResProductServiceWarranty</c> record with given item ID.
    /// </summary>
    /// <param name = "_itemId">Item ID</param>
    /// <returns><c>EcoResProductServiceWarranty</c> record with given item ID</returns>
    internal static EcoResProductServiceWarranty findByItemId(ItemId _itemId)
    {
        return EcoResProductServiceWarranty::findByDistinctProductId(
            EcoResDistinctProduct::find(InventTable::find(_itemId).Product).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpirationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates warranty expiration date.
    /// </summary>
    /// <param name = "_effectiveDate">effetive date of the warranty policy</param>
    /// <param name = "_warrantyProduct"><c>EcoResProductServiceWarranty</c> record</param>
    /// <returns>warranty expiration date</returns>
    internal static WarrantyExpirationDate calculateExpirationDate(
        WarrantyEffectiveDate _effectiveDate, EcoResProductServiceWarranty _warrantyProduct)
    {
        WarrantyExpirationDate expirationDate;

        switch(_warrantyProduct.DurationTimeUnit)
        {
            case WarrantyDurationTimeUnit::Day:
                expirationDate = _effectiveDate + _warrantyProduct.DurationTime;
                break;

            case WarrantyDurationTimeUnit::Week:
                expirationDate = _effectiveDate + _warrantyProduct.DurationTime * 7;
                break;

            case WarrantyDurationTimeUnit::Month:
                expirationDate = dateMthFwd(_effectiveDate, _warrantyProduct.DurationTime);
                break;

            case WarrantyDurationTimeUnit::Year:
                expirationDate = dateMthFwd(_effectiveDate, _warrantyProduct.DurationTime * 12);
                break;
        }

        return expirationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@Warranty:WarrantyProductTableDevDoc</DeveloperDocumentation>
	<FormRef>EcoResProductDetails</FormRef>
	<Label>@Warranty:WarrantyProduct</Label>
	<ListPageRef>EcoResProductListPage</ListPageRef>
	<TableGroup>Main</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>DistinctProductIndex</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>DistinctProductIndex</PrimaryIndex>
	<ReplacementKey>DistinctProductIndex</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistinctProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarrantyDurationGroup</Name>
			<Label>@Warranty:WarrantyDuration</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DurationTimeUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DurationTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DurationTimeUnit</Name>
			<EnumType>WarrantyDurationTimeUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DurationTime</Name>
			<ExtendedDataType>WarrantyDurationTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DistinctProduct</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>EcoResDistinctProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DistinctProductIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DistinctProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DistinctProduct</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResDistinctProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DistinctProduct</Name>
					<Field>DistinctProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DistinctProduct</Name>
					<Field>DistinctProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>