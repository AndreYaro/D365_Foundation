<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashRegisterOperator_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CashRegisterOperator_W extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default terminal record for the current operator.
    /// </summary>
    /// <returns>
    /// The default terminal record for the current operator.
    /// </returns>
    public CashRegisterTerminal_W defaultTerminal()
    {
        return CashRegisterTerminal_W::find(this.Terminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRegisteredFiscalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if registered fiscal transactions exist for the current location.
    /// </summary>
    /// <returns>
    /// true, if registered fiscal transactions exist for the current location; otherwise, false;
    /// </returns>
    public boolean existsRegisteredFiscalTrans()
    {
        return (select firstOnly RecId from CashRegisterFiscalTrans_W
            where CashRegisterFiscalTrans_W.Operator    == this.RecId
                && CashRegisterFiscalTrans_W.Status     == CashRegisterFiscalTransStatus_W::Registered).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash register location record for the current operator.
    /// </summary>
    /// <returns>
    /// The cash register location record for the current operator.
    /// </returns>
    public CashRegisterLocation_W location()
    {
        return CashRegisterLocation_W::find(this.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(CashRegisterOperator_W, Location):
                if (this.Terminal && this.defaultTerminal().Location != this.Location)
                {
                    this.Terminal = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CashRegisterOperator_W, Terminal):
                    if (this.Location && this.Terminal)
                    {
                        if (this.defaultTerminal().Location().RecId != this.Location)
                        {
                            ret = checkFailed(strFmt("@FiscalServices:AS_CustPostInvoiceJob_Form_TerminalRecId_Method_Validate", this.location().Code));
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOperator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Cash register operator record for the current user.
    /// </summary>
    /// <returns>
    /// The Cash register operator record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// No worker is mapped to the current user. Set mapping in the User relations form.
    /// </exception>
    public static CashRegisterOperator_W currentOperator()
    {
        HcmWorkerRecId currentWorkerRecId = HcmWorker::findByPerson(DirPersonUser::current().PersonParty).RecId;
        CashRegisterOperator_W cashRegisterOperator;

        if (currentWorkerRecId)
        {
            cashRegisterOperator = CashRegisterOperator_W::findByWorker(currentWorkerRecId);
        }

        return cashRegisterOperator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the cash register operator record by the record ID.
    /// </summary>
    /// <param name="_operatorRecId">
    /// The record ID.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The cash register operator record.
    /// </returns>
    public static CashRegisterOperator_W find(RefRecId _operatorRecId, boolean _selectForUpdate = false)
    {
        CashRegisterOperator_W cashRegisterOperator;

        if (_selectForUpdate)
        {
            cashRegisterOperator.selectForUpdate(true);
        }

        if (_operatorRecId)
        {
            select firstonly cashRegisterOperator
            where cashRegisterOperator.RecId == _operatorRecId;
        }

        return cashRegisterOperator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the cash register operator record by the operator code.
    /// </summary>
    /// <param name="_code">
    /// The operator code.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The cash register operator record.
    /// </returns>
    public static CashRegisterOperator_W findByCode(CashRegisterOperatorCode_W _code, boolean _selectForUpdate = false)
    {
        CashRegisterOperator_W cashRegisterOperator;

        if (_selectForUpdate)
        {
            cashRegisterOperator.selectForUpdate(true);
        }

        if (_code)
        {
            select firstonly cashRegisterOperator
                where cashRegisterOperator.Code == _code;
        }

        return cashRegisterOperator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Cash register operator by the worker record ID.
    /// </summary>
    /// <param name="_workerRecId">
    /// The worker record ID.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The Cash register operator record.
    /// </returns>
    public static CashRegisterOperator_W findByWorker(RefRecId _workerRecId, boolean _selectForUpdate = false)
    {
        CashRegisterOperator_W cashRegisterOperator;

        if (_selectForUpdate)
        {
            cashRegisterOperator.selectForUpdate(true);
        }

        if (_workerRecId)
        {
            select firstonly cashRegisterOperator
                where cashRegisterOperator.HcmWorker == _workerRecId;
        }

        return cashRegisterOperator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>AT,CZ</CountryRegionCodes>
	<DeveloperDocumentation>@FiscalServices:AS_CashRegisterOperator_WTable_HelpText</DeveloperDocumentation>
	<FormRef>CashRegisterOperator_W</FormRef>
	<Label>@FiscalServices:AS_CashRegisterOperator_WTable_Title</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Code</TitleField1>
	<TitleField2>HcmWorker</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>CashRegisterOperator_W</Relation>
			<Table>CashRegisterFiscalTrans_W</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@FiscalServices:AS_CashRegisterOperator_WTable_FieldsGroupGeneral</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<ExtendedDataType>CashRegisterOperatorCode_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmWorker</Name>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<ExtendedDataType>CashRegisterLocationRecId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Terminal</Name>
			<ExtendedDataType>CashRegisterTerminalRecId_W</ExtendedDataType>
			<Label>@FiscalServices:AS_CasgRegisterOperator_WTable_FieldTerminal</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CashRegisterLocation_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashRegisterLocation_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CashRegisterTerminal_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashRegisterTerminal_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Terminal</Name>
					<Field>Terminal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmWorker</Name>
					<Field>HcmWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>