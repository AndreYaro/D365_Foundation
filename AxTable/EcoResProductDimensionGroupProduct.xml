<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimensionGroupProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductDimensionGroupProduct extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ecoResProductDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EcoResProductDimensionGroupName</c> from the DefaultDimension of this transaction.
    /// </summary>
    /// <returns>
    /// The <c>EcoResProductDimensionGroupName</c>.
    /// </returns>
    [SysClientCacheDataMethod(true)]
    public display EcoResProductDimensionGroupName ecoResProductDimensionGroupName()
    {
        return EcoResProductDimensionGroup::find(this.ProductDimensionGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which product dimensions are active.
    /// </summary>
    /// <returns>
    ///    A list that contains IDs of the <c>InventDim</c> table fields that are product dimensions fields and are active for a given product and product dimension group.
    /// </returns>
    public List activeProductDimensions()
    {
        return EcoResProductDimGroupSetup::newDimensionGroup(this.ProductDimensionGroup).activeDimensionFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer from an <c>EcoResProduct</c> buffer.
    /// </summary>
    /// <param name="_ecoResProduct">
    /// An <c>EcoResProduct</c> buffer from which to be initialized.
    /// </param>
    void initFromProduct(EcoResProduct _ecoResProduct)
    {
        this.Product = _ecoResProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified dimension is active for the product master.
    /// </summary>
    /// <param name="_dimensionFieldId">
    /// The <c>FieldId</c> reference to the product dimension.
    /// </param>
    /// <returns>
    /// True if the dimension is active; otherwise false.
    /// </returns>
    public boolean isProductDimensionActive(FieldId _dimensionFieldId)
    {
        EcoResProductDimGroupSetup  ecoResProductDimGroupSetup;

        ecoResProductDimGroupSetup  = EcoResProductDimGroupSetup::newDimensionGroup(this.ProductDimensionGroup);

        return ecoResProductDimGroupSetup.getFieldSetup(_dimensionFieldId).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (EcoResProductMaster::exist(this.Product))
            {
                ret = checkFailed(strFmt("@SYS50104", fieldPName(EcoResProductDimensionGroupProduct, ProductDimensionGroup)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        InventTable                         inventTable;
        InventModelGroup                    inventModelGroup;
        EcoResStorageDimensionGroupRecId    storageDimensionGroup;
        EcoResTrackingDimensionGroupRecId   trackingDimensionGroup;
        boolean                             ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(EcoResProductDimensionGroupProduct, ProductDimensionGroup):
                if (   this.orig().ProductDimensionGroup != this.ProductDimensionGroup
                    && !SysRecordTemplate::isTemplateEditFormRecord(this))
                {
                    while select crosscompany inventTable
                        where inventTable.Product == this.Product
                    {
                        changecompany(inventTable.company())
                        {
                            if (inventTable.hasInventTrans())
                            {
                                storageDimensionGroup = inventTable.storageDimensionGroup();
                                trackingDimensionGroup = inventTable.trackingDimensionGroup();
                                inventModelGroup = inventTable.modelGroup();
                                ret = ret && inventModelGroup.inventModelType().checkNewDimensionGroupsForItem(
                                                        InventDimGroupSetup::newDimensionGroups(this.orig().ProductDimensionGroup, storageDimensionGroup, trackingDimensionGroup),
                                                        InventDimGroupSetup::newDimensionGroups(this.ProductDimensionGroup, storageDimensionGroup, trackingDimensionGroup),
                                                        inventTable.ItemId,
                                                        inventModelGroup.ModelGroupId);
                            }
                            if (!ret)
                            {
                                //if error occurs in a company then we break in order not to show multiple times the same error messages.
                                break;
                            }
                        }
                    }

                    ret = ret && this.validateProductDimensionGroupChange();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDimensionGroupChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the new product dimension group for a product can be used for the product.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean validateProductDimensionGroupChange()
    {
        EcoResProductMaster                     ecoResProductMaster;
        EcoResProductDimGroupSetup              ecoResProductDimGroupSetupOrig;
        EcoResProductDimGroupSetup              ecoResProductDimGroupSetupNew;
        List                                    activeDimensionsOrig;
        InventDimParm                           activeDimensionsNew;
        ListEnumerator                          listEnumerator;
        FieldId                                 dimFieldId;
        FieldId                                 dimParmFieldId;
        EcoResProductDimensionAttribute         ecoResProductDimensionAttribute;
        SysDictTable                            sysDictTable;
        EcoResProductMasterDimensionValue       ecoResProductMasterDimensionValue;

        if (this.ProductDimensionGroup == this.orig().ProductDimensionGroup)
        {
            return true;
        }

        ecoResProductMaster = EcoResProductMaster::find(this.Product);
        if (!ecoResProductMaster.RecId)
        {
            return true;
        }

        if (ecoResProductMaster.isReleased())
        {
            return checkFailed("@SYS4000204");
        }

        setPrefix(strFmt("@SYS322189", ecoResProductMaster.productNumber()));

        // validate that active dimensions are not changed for a master with existing variants
        if (ecoResProductMaster.hasProductVariants()
        && !EcoResProductDimensionGroup::groupsHaveSameDimensionsActive(this.ProductDimensionGroup, this.orig().ProductDimensionGroup))
        {
            return checkFailed("@SYS322190");
        }

        // validate that active dimensions are not disabled where dimension values have been specified
        ecoResProductDimGroupSetupNew   = EcoResProductDimGroupSetup::newDimensionGroup(this.ProductDimensionGroup);
        activeDimensionsNew             = ecoResProductDimGroupSetupNew.inventDimParmActiveDimensions();
        ecoResProductDimGroupSetupOrig  = EcoResProductDimGroupSetup::newDimensionGroup(this.orig().ProductDimensionGroup);
        activeDimensionsOrig            = ecoResProductDimGroupSetupOrig.activeDimensionFields();
        listEnumerator                  = activeDimensionsOrig.getEnumerator();
        while (listEnumerator.moveNext())
        {
            // validate all dimension originally active
            dimFieldId = listEnumerator.current();
            dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (!activeDimensionsNew.(dimParmFieldId))
            {
                // Dimension will no longer be active
                // find attribute based on current dimension field ID
                ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(dimFieldId));
                // init correct sub type of product master dimension value table
                sysDictTable = new SysDictTable(ecoResProductDimensionAttribute.getMasterDimensionTableId());
                ecoResProductMasterDimensionValue = sysDictTable.makeRecord() as EcoResProductMasterDimensionValue;

                if (ecoResProductMasterDimensionValue.hasDimensionValueForProductMaster(ecoResProductMaster.RecId))
                {
                    setPrefix(fieldId2pname(tableNum(InventDim), dimFieldId));
                    return checkFailed("@SYS322191");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                                 ret;
        EcoResProduct                           ecoResProduct;

        ret = super();

        //Validate dimension group if we can find the product
        //Not possible when creating a new product - validation is then preformed by the logic that creates a product
        ecoResProduct = EcoResProduct::find(this.Product);
        if (!ecoResProduct.RecId)
        {
            return ret;
        }

        if (!EcoResProductDimensionGroupProduct::checkDimensionGroupValidForProduct(
                ecoResProduct,
                this.ProductDimensionGroup))
        {
            return false;
        }

        if (!ret || !ecoResProduct.isProductMaster())
        {
            return ret;
        }

        return this.validateProductDimensionGroupChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionGroupValidForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified product dimension group is valid for the given product.
    /// </summary>
    /// <param name="_ecoResProduct">
    /// The product for which the check is performed.
    /// </param>
    /// <param name="_productDimensionGroupRecId">
    /// The ID of a record in the <c>EcoResProductDimensionGroup</c> table for which the check is performed.
    /// </param>
    /// <returns>
    /// true if the product dimension group is valid for the product; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the product is a product master, then the product dimension group must have at least one product
    /// dimension active. If the set of active dimensions is changed, then validate that no product
    /// variants exist. If a dimension is disabled, then validate that no product dimensions have been
    /// specified for that dimension.
    /// </remarks>
    static boolean checkDimensionGroupValidForProduct(EcoResProduct _ecoResProduct, EcoResProductDimensionGroupRecId _productDimensionGroupRecId)
    {
        EcoResProductMaster                 ecoResProductMaster;
        EcoResProductDimensionGroup         ecoResProductDimensionGroup;
        EcoResProductDimGroupSetup          ecoResProductDimGroupSetup;

        ecoResProductDimensionGroup = EcoResProductDimensionGroup::find(_productDimensionGroupRecId);

        if (!_ecoResProduct.isProductMaster())
        {
            if (_productDimensionGroupRecId)
            {
                return checkFailed("@SYS133917");
            }
            return true;
        }

        // product masters must have at least one active product dimension
        if (_productDimensionGroupRecId == 0 || !EcoResProductDimensionGroup::exist(_productDimensionGroupRecId))
        {
            return checkFailed("@SYS133914");
        }

        if (!ecoResProductDimensionGroup.hasProductDimensionsActive())
        {
            return checkFailed("@SYS133916");
        }

        // some configuration technologies require Configuration to be an active dimension
        ecoResProductMaster = _ecoResProduct as EcoResProductMaster;

        if (ecoResProductMaster.isConstraintBased())
        {
            ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(_productDimensionGroupRecId);
            if (!ecoResProductDimGroupSetup.isOnlyConfigActive())
            {
                return checkFailed(strFmt("@SYS329755", ecoResProductMaster.VariantConfigurationTechnology));
            }
        }

        if (ecoResProductMaster.isDimensionBased()
            && !EcoResProductDimGroupSetup::newDimensionGroup(_productDimensionGroupRecId).getFieldSetup(fieldNum(InventDim, ConfigId)).isActive())
        {
            return checkFailed(strFmt("@SYS309241", ecoResProductMaster.VariantConfigurationTechnology));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResProductDimensionGroupProduct</c> table.
    /// </summary>
    /// <param name="_productRecId">
    /// The ID of the <c>EcoResProduct</c> record that is used as a filter.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProductDimensionGroupProduct</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResProductDimensionGroupProduct findByProduct(EcoResProductRecId _productRecId, boolean _forUpdate = false)
    {
        EcoResProductDimensionGroupProduct  ecoResProductDimensionGroupProduct;

        ecoResProductDimensionGroupProduct.selectForUpdate(_forUpdate);
        if (_productRecId)
        {
            select firstonly ecoResProductDimensionGroupProduct
                where ecoResProductDimensionGroupProduct.Product == _productRecId;
        }
        return ecoResProductDimensionGroupProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133871</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductDetails</FormRef>
	<Label>@SYS133872</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product</TitleField1>
	<TitleField2>ProductDimensionGroup</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ProductIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductDimensionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductDimensionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimensionGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_EcoResProductDimensionGroup</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductDimensionGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductDimensionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResProductDimensionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProductDimensionGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResProductDimensionGroup_EcoResProductDimensionGroupProduct</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductDimensionGroup</Name>
					<Field>ProductDimensionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductMaster</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProductMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProductMaster</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResProductMaster_EcoResProducttDimensionGroupProduct</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>