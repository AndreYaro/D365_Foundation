<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the location has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventSum       inventSum;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;

        inventDimCriteria.InventLocationId  = this.InventLocationId;
        inventDimCriteria.wmsLocationId     = this.wmsLocationId;
        inventDimParm.InventLocationIdFlag  = NoYes::Yes;
        inventDimParm.wmsLocationIdFlag     = NoYes::Yes;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly inventSum
                where inventSum.ClosedQty  == NoYes::No
                   && #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm);
        }
        else
        {
            select firstonly inventSum
                where inventSum.ClosedQty  == NoYes::No
                #InventDimJoin(inventSum.inventDimId, inventDim, inventDimCriteria, inventDimParm);
        }

        if (inventSum)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCheckText</Name>
				<Source><![CDATA[
    public void changeCheckText(int _aisleNo = -1)
    {
        int         aisle = _aisleNo;
        WMSAisle    wmsAisle;

        if (aisle == -1)
        {
            wmsAisle = WMSAisle::find(this.AisleId, this.InventLocationId);
            aisle = wmsAisle.AisleNo;
        }
        this.CheckText = WMSParameters::find().defaultCheckText(this, aisle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeName</Name>
				<Source><![CDATA[
    private void changeName(WMSLocationId _oldName)
    {
        WMSLocation                 wmsLocation;
        WMSShipment                 wmsShipment;
        InventDim                   inventDim;
        InventItemLocation          inventItemLocation;

        ttsbegin;
        setPrefix(strFmt("@SYS54732", this.InventLocationId, _oldName));
        setPrefix(strFmt("@SYS60775", this.wmsLocationId));

        while select forupdate inventDim
            where inventDim.wmsLocationId      == _oldName
               && inventDim.InventLocationId   == this.InventLocationId
        {
            inventDim.wmsLocationId = this.wmsLocationId;
            inventDim.update(true);
        }

        while select forupdate wmsLocation
            where wmsLocation.InputLocation     == _oldName
              &&  wmsLocation.InventLocationId  == this.InventLocationId
              &&  wmsLocation.RecId             != this.RecId
        {
            wmsLocation.InputLocation = this.wmsLocationId;
            wmsLocation.update();
        }

        while select forupdate wmsShipment
            where wmsShipment.OutputPort        == _oldName
               && wmsShipment.InventLocationId  == this.InventLocationId
        {
            wmsShipment.OutputPort = this.wmsLocationId;
            wmsShipment.update();
        }

        while select forupdate inventItemLocation
            where inventItemLocation.wmsPickingLocation == _oldName
        {
            if (inventItemLocation.inventLocationID() == this.InventLocationId)
            {
                inventItemLocation.wmsPickingLocation = this.wmsLocationId;
                inventItemLocation.update();
            }
        }

        while select forupdate inventItemLocation
            where inventItemLocation.wmsLocationIdDefaultReceipt == _oldName
        {
            if (inventItemLocation.inventLocationID() == this.InventLocationId)
            {
                inventItemLocation.wmsLocationIdDefaultReceipt = this.wmsLocationId;
                inventItemLocation.update();
            }
        }

        while select forupdate inventItemLocation
            where inventItemLocation.wmsLocationIdDefaultIssue == _oldName
        {
            if (inventItemLocation.inventLocationID() == this.InventLocationId)
            {
                inventItemLocation.wmsLocationIdDefaultIssue = this.wmsLocationId;
                inventItemLocation.update();
            }
        }

        ttscommit;

        if (this.InputLocation == _oldName)
        {
            this.InputLocation = this.wmsLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldChangeCheckText</Name>
				<Source><![CDATA[
    [Hookable]
    private boolean shouldChangeCheckText()
    {
        return !this.CheckText
                    && (this.LocationType       == WMSLocationType::Buffer
                        || this.LocationType    == WMSLocationType::Pick
                        || this.LocationType    == WMSLocationType::InspectionLocation
                        || this.LocationType    == WMSLocationType::KanbanSupermarket);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeOnInsertUpdate</Name>
				<Source><![CDATA[
    private void changeOnInsertUpdate()
    {
        this.Volume = this.Height * this.Width * this.Depth;

        if (this.shouldChangeCheckText())
        {
            this.changeCheckText();
        }

        this.initInputLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInputLocation</Name>
				<Source><![CDATA[
    private void initInputLocation()
    {
        if (!this.InputLocation)
        {
            this.InputLocation = this.wmsLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAisleIdForWHSLocation</Name>
				<Source><![CDATA[
    private void initAisleIdForWHSLocation()
    {
        if (!this.aisleId)
        {
            this.aisleId = WMSLocation::whsDefaultAisle();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs consistency checks that are related to the load for the current <c>WMSLocation</c> buffer.
    /// </summary>
    /// <param name="_wmsConsistencyCheck_Location">
    /// An instance of the <c>WMSConsistencyCheck_Location</c> class.
    /// </param>
    public void checkFixLoad(WMSConsistencyCheck_Location _wmsConsistencyCheck_Location)
    {
        WMSLocationFixLoad  wmsLocationFixLoad;

        wmsLocationFixLoad = WMSLocationFixLoad::constructForWMSConsistencyCheck(
            this.InventLocationId,
            this.wmsLocationId,
            this.LocationType,
            this.DataAreaId,
            _wmsConsistencyCheck_Location);

        wmsLocationFixLoad.fixLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the location profile that is associated with the current location.
    /// </summary>
    /// <returns>
    ///    true if the location profile is valid; otherwise, false.
    /// </returns>
    public boolean checkLocationProfile()
    {
        WHSLocationProfile  whsLocationProfile;
        WHSLocationProfile  whsLocationProfileOrig;
        boolean             isAddingProfile;
        boolean             result = true;

        if (   !this.LocProfileId
            && InventLocation::find(this.InventLocationId).whsEnabled)
        {
            result = checkFailed("@WAX840");
        }

        if (   result
            && this.LocProfileId
            && this.LocProfileId != this.orig().LocProfileId)
        {
            whsLocationProfile     = this.whsLocationProfile();
            whsLocationProfileOrig = this.orig().whsLocationProfile();
            isAddingProfile        = whsLocationProfile && !whsLocationProfileOrig;

            if (   this.RecId
                && whsLocationProfile.lpControlled != whsLocationProfileOrig.lpControlled)
            {
                if (WHSLocationProfile::isInUseWithInventoryTransactions(this.InventLocationId,this.wmsLocationId))
                {
                    result = checkFailed("@WAX5480");
                }
            }

            if (   result
                && whsLocationProfileOrig.AllowedContainerTypeGroup
                && whsLocationProfile.AllowedContainerTypeGroup != whsLocationProfileOrig.AllowedContainerTypeGroup
                && this.hasOpenInventSumQuantity())
            {
                result = checkFailed(strFmt("@WAX:WMSLocContainsInventory", this.LocProfileId, this.wMSLocationId, whsLocationProfileOrig.AllowedContainerTypeGroup));
            }

            if (   result
                && (isAddingProfile
                ||  whsLocationProfile.AllowMixedItems != whsLocationProfileOrig.AllowMixedItems))
            {
                result = WHSLocationProfileValidator::checkMixedItems(whsLocationProfile,this,whsLocationProfileOrig.LocProfileId);
            }

            if (   result
                && (isAddingProfile
                ||  whsLocationProfile.AllowMixedBatches != whsLocationProfileOrig.AllowMixedBatches))
            {
                result = WHSLocationProfileValidator::checkMixedBatches(whsLocationProfile,this,whsLocationProfileOrig.LocProfileId);
            }

            if (   result
                && (isAddingProfile
                ||  whsLocationProfile.AllowMixedStatus != whsLocationProfileOrig.AllowMixedStatus))
            {
                result = WHSLocationProfileValidator::checkMixedStatus(whsLocationProfile,this,whsLocationProfileOrig.LocProfileId);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLoadFromItemsCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates weight and volume of the items on the location.
    /// </summary>
    /// <returns>
    /// A container that contains the calculated weight and volume of the items on the location.
    /// </returns>
    /// <remarks>
    /// Only the load from the items on the location are included and not the load of the pallets on the
    /// location.
    /// </remarks>
    public container currentLoadFromItemsCalculated()
    {
        InventSum       inventSum;
        Weight          currentWeight;
        Volume          currentVolume;
        InventTable     inventTable;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // calculate currently used weight and volume on location
            while select ItemId, sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
            group by inventSum.ItemId
            where inventSum.ClosedQty           == NoYes::No
                && inventSum.wmsLocationId      == this.wmsLocationId
                && inventSum.InventLocationId   == this.InventLocationId
            {
                inventTable = InventTable::find(inventSum.ItemId);

                currentWeight += inventSum.PhysicalInvent * inventTable.grossWeight();
                currentVolume +=
                (PdsGlobal::pdsIsCWItem(inventSum.ItemId)? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent)
                * inventTable.grossVolume();
            }
        }
        else
        {
            InventDim       inventDim;

            // calculate currently used weight and volume on location
            while select ItemId, sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
            group by inventSum.ItemId
            where inventSum.ClosedQty == NoYes::No
            exists join inventDim
                where inventDim.InventDimId         == inventSum.InventDimId
                &&    inventDim.wmsLocationId       == this.wmsLocationId
                &&    inventDim.InventLocationId    == this.InventLocationId
            {
                inventTable = InventTable::find(inventSum.ItemId);

                currentWeight += inventSum.PhysicalInvent * inventTable.grossWeight();
                currentVolume +=
                (PdsGlobal::pdsIsCWItem(inventSum.ItemId)? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent)
                * inventTable.grossVolume();
            }
        }

        return [currentWeight, currentVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>freePalletCountFromQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the free pallet count for this Workflow Management Service (WMS) location that is based
    /// on the quantity.
    /// </summary>
    /// <param name="_currrentAndReservedPalletCount">
    /// A <c>WMSPalletCount</c> buffer that can be the sum of the reserved and current load on this
    /// location.
    /// </param>
    /// <returns>
    /// The free pallet count for this WMS location.
    /// </returns>
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public WMSFreePalletCount freePalletCountFromQuantity(WMSPalletCount _currrentAndReservedPalletCount)
    {
        return (this.MaxPalletCount - (_currrentAndReservedPalletCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the free volume for the <c>WMSLocation</c> table.
    /// </summary>
    /// <returns>
    /// The free volume for the <c>WMSLocation</c> table.
    /// </returns>
    public WMSVolume freeVolume()
    {
        return this.freeVolumeFromLoad(this.getWMSLocationLoadSummed());
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeVolumeFromLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the free volume for this Warehouse Management System (WMS) location that is based on the
    /// <c>WMSLocationLoad</c> buffer.
    /// </summary>
    /// <param name="_wmsLocationLoadSummed">
    /// A <c>WMSLocationLoad</c> buffer with the aggregated load for this location.
    /// </param>
    /// <returns>
    /// The free volume for this WMS location.
    /// </returns>
    public WMSVolume freeVolumeFromLoad(WMSLocationLoad _wmsLocationLoadSummed)
    {
        return this.freeVolumeFromQuantity(_wmsLocationLoadSummed.CurrentVolumeAdjusted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeVolumeFromQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the free volume for this Warehouse Management System (WMS) location that is based on the
    /// WMS volume.
    /// </summary>
    /// <param name="_currentAndReservedVolume">
    /// A WMS volume that can be the current and reserved volume.
    /// </param>
    /// <returns>
    /// The free volume for this WMS location.
    /// </returns>
    public WMSVolume freeVolumeFromQuantity(WMSVolume _currentAndReservedVolume)
    {
        return (this.MaxVolume - (_currentAndReservedVolume));
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeWeightFromLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the free weight for this Warehouse Management System (WMS) location that is based on the
    /// <c>WMSLocationLoad</c> buffer.
    /// </summary>
    /// <param name="_wmsLocationLoadSummed">
    /// A <c>WMSLocationLoad</c> buffer with the aggregated load for this location.
    /// </param>
    /// <returns>
    /// The free weight for this WMS location.
    /// </returns>
    public WMSWeight freeWeightFromLoad(WMSLocationLoad _wmsLocationLoadSummed)
    {
        return this.freeWeightFromQuantity(_wmsLocationLoadSummed.CurrentWeightAdjusted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeWeightFromQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the free weight for this Warehouse Management System (WMS) location that is based on the
    /// WMS weight argument.
    /// </summary>
    /// <param name="_currentAndReservedWeight">
    /// A WMS weight that can be the current and reserved weight for this location.
    /// </param>
    /// <returns>
    /// The free weight for this WMS location.
    /// </returns>
    public WMSWeight freeWeightFromQuantity(WMSWeight _currentAndReservedWeight)
    {
        return (this.MaxWeight - _currentAndReservedWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSLocationLoadSummed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>WMSLocationLoad</c> buffer that contains the summed values for this location.
    /// </summary>
    /// <returns>
    /// A <c>WMSLocationLoad</c> buffer that holds the summed values for this location
    /// </returns>
    public WMSLocationLoad getWMSLocationLoadSummed()
    {
        return WMSLocationLoad::selectSummedLoad(this.wmsLocationId,this.InventLocationId,this.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoOnLocationBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows Infolog messages if involved locations are blocked.
    /// </summary>
    /// <param name="_checkInput">
    ///    A Boolean value that indicates whether the location must be checked for input blocking; optional.
    /// </param>
    /// <param name="_checkOutput">
    ///    A Boolean value that indicates whether the location must be checked for output blocking; optional.
    /// </param>
    public void infoOnLocationBlocking(
        boolean     _checkInput     = true,
        boolean     _checkOutput    = true)
    {
        if (_checkInput && this.InputBlockingCauseId)
        {
            info(strFmt("@SYS72264", this.wmsLocationId));
        }

        if (_checkOutput && this.OutputBlockingCauseId)
        {
            info(strFmt("@SYS72265", this.wmsLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        WMSParameters   wmsParameters = WMSParameters::find();

        this.Height         = wmsParameters.DefaultHeight;
        this.Depth          = wmsParameters.DefaultDepth;
        this.Width          = wmsParameters.DefaultWidth;
        this.Volume         = this.Height * this.Depth * this.Width;
        this.MaxVolume      = this.Volume;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyWMSFieldsForWHSWarehouse</Name>
				<Source><![CDATA[
    public void emptyWMSFieldsForWHSWarehouse()
    {
        this.initAisleIdForWHSLocation();
        this.absoluteHeight            = 0;
        this.Height                    = 0;
        this.Depth                     = 0;
        this.Width                     = 0;
        this.Volume                    = 0;
        this.MaxVolume                 = 0;
        this.MaxWeight                 = 0;
        this.InputBlockingCauseId      = '';
        this.OutputBlockingCauseId     = '';
        this.LocationType              = WMSLocationType::Buffer;
        this.Rack                      = 0;
        this.level                     = 0;
        this.position                  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;
        this.changeOnInsertUpdate();

        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }

        this.fixLoadForLocation();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocation</Name>
				<Source><![CDATA[
    public InventLocation inventLocation(boolean _update = false)
    {
        return InventLocation::find(this.InventLocationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    display InventSiteId inventSiteId()
    {
        return this.inventLocation().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCapacityConstraintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location is capacity constrained by weight or volume.
    /// </summary>
    /// <returns>true if the location is constrained; otherwise, false.</returns>
    public display WHSLocationCapacityConstraintEnabled isCapacityConstraintEnabled()
    {
        WHSLocationCapacityConstraintEnabled locationCapacityConstraintEnabled = NoYes::No;

        if (this.whsLocationProfile().isVolumetricsEnabled())
        {
            locationCapacityConstraintEnabled =  NoYes::Yes;
        }

        return locationCapacityConstraintEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeName</Name>
				<Source><![CDATA[
    public WMSLocationId makeName()
    {
        return this.inventLocation().wmsLocationId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when field values are changed.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the changed field.
    /// </param>
    /// <remarks>
    ///    Default fields for WHS.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WMSLocation, InventLocationId):
                if (InventLocation::find(this.InventLocationId).whsEnabled)
                {
                    this.ManualName = NoYes::Yes;
                    this.initAisleIdForWHSLocation();
                    this.initInputLocation();
                }
                break;

            case fieldNum(WMSLocation, wmsLocationId):
                if (this.wmsLocationId && InventLocation::find(this.InventLocationId).whsEnabled)
                {
                    this.InputLocation = this.wmsLocationId;
                }
                break;

            case fieldNum(WMSLocation, CheckText):
                if (this.CheckText &&
                    InventLocation::find(this.InventLocationId).UniqueCheckDigits && 
                    WMSLocation::existsLocationWithCheckText(this.CheckText, this.InventLocationId))
                {
                    throw error("@WAX2632");
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        WMSLocationId   defaultName;

        this.changeName(this.orig().wmsLocationId);
        defaultName = this.inventLocation().wmsLocationId(this);

        this.ManualName = (this.wmsLocationId == defaultName) ? NoYes::No : NoYes::Yes;
        this.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedLoadFromPalletsCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the pallet count, weight, and volume of the pallets that are being transported to the
    /// location.
    /// </summary>
    /// <returns>
    /// A container with the pallet count, weight, and volume of the pallets that are being transported to
    /// the location.
    /// </returns>
    /// <remarks>
    /// Only the load from the pallets on the location are included and not the load of the items on the
    /// pallets.
    /// </remarks>
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public container reservedLoadFromPalletsCalculated()
    {
        WMSPallet       wmsPallet;
        WMSPalletType   wmsPalletType;
        WMSWeight       weight;
        WMSVolume       volume;
        WMSPalletCount  palletCount,totalPalletCount;

        WMSTransport    wmsTransport;

        while select TableId from wmsTransport
            where   wmsTransport.ExpeditionStatus != WMSExpeditionStatus::Complete
            &&  wmsTransport.ExpeditionStatus     != WMSExpeditionStatus::Cancelled
            &&  wmsTransport.ToInventLocationId   == this.InventLocationId
            &&  wmsTransport.ToLocation           == this.wmsLocationId
        join count(RecId) from wmsPallet
        group by PalletTypeId
            where wmsPallet.wmsPalletId == wmsTransport.wmsPalletId
        join wmsPalletType
        group by Weight,Volume
            where wmsPalletType.PalletTypeId == wmsPallet.PalletTypeId
        {
            palletCount = int642int(wmsPallet.RecId);
            weight              += palletCount * wmsPalletType.Weight;
            volume              += palletCount * wmsPalletType.Volume;
            totalPalletCount    += palletCount;
        }

        return [totalPalletCount,weight,volume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location is WHS enabled.
    /// </summary>
    /// <returns>
    /// true if the location is WHS enabled; otherwise, false.
    /// </returns>
    public boolean isWHSEnabled()
    {
        return (this.LocProfileId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPhysicalLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if physical load is tracked in the <c>WMSLocationLoad</c> table.
    /// </summary>
    /// <returns>
    /// true if load is tracked; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Locations that are WHS enabled does not track load in the <c>WMSLocationLoad</c> table.
    /// </remarks>
    public boolean trackPhysicalLoad()
    {
        return (!this.isWHSEnabled() && WMSLocation::trackPhysicalLoadFromLocationType(this.LocationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WMSLocation         orig = this.orig();

        ttsbegin;
        this.changeOnInsertUpdate();

        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }

        if (orig.wmsLocationId != this.wmsLocationId)
        {
            this.changeName(orig.wmsLocationId);
        }

        WMSLocationLoad::updateOnWMSLocationChange(this, orig);

        this.fixLoadForLocation(orig);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLoadForLocation</Name>
				<Source><![CDATA[
    private void fixLoadForLocation(WMSLocation originalLocation = null)
    {
        Query locationsToFixQuery = WHSLocationLoad::locationsToFixOnLocationWrite(this, originalLocation);

        // if the location has been created from the form then do a sync operation to improve the user experience
        if (FormDataUtil::isFormDataSource(this)
            || !originalLocation)
        {
            WHSLocationLoad::fixSynchronouslyNoWarnings(locationsToFixQuery);
        }
        else
        {
            WHSLocationLoad::fixLoadForLocations(locationsToFixQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationNames</Name>
				<Source><![CDATA[
    public void updateLocationNames(
        NoYes   _updateName,
        NoYes   _updateCheckText)
    {
        #OCCRetryCount
        WMSLocationId     wmsLocationName, oldName;

        try
        {
            ttsbegin;
            if (_updateName)
            {
                wmsLocationName = this.makeName();
                if (wmsLocationName != this.wmsLocationId)
                {
                    oldName = this.wmsLocationId;
                    this.wmsLocationId = wmsLocationName;
                    this.changeName(oldName);
                }
            }
            if (_updateCheckText)
            {
                this.changeCheckText();
            }

            this.update();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        InventItemLocation          inventItemLocation;
        InventDim                   inventDim;
        InventDim                   inventDimCriteria;
        InventDimParm               inventDimParm;
        boolean                     ret = super();

        if (isConfigurationkeyEnabled(configurationkeynum(WHSandTMS)) && this.inventLocation().DefaultQualityMaintenanceLocation == this.wMSLocationId)
        {
            ret = checkFailed("@SCM:LocationReferencedByDefaultMaintenanceLocationSetupFromWarehouseCannotBeDeleted");
        }

        if (this.hasOpenInventSumQuantity())
        {
            ret = checkFailed("@SYS72632");
        }

        if (this.hasOpenWork())
        {
            ret = checkFailed("@SCM:OpenWorkExistsOnLocation");
        }

        inventDimCriteria.InventLocationId  = this.InventLocationId;
        inventDimParm.InventLocationIdFlag  = NoYes::Yes;

        select firstonly inventItemLocation
            where (inventItemLocation.wmsLocationIdDefaultIssue     == this.wmsLocationId   ||
                   inventItemLocation.wmsLocationIdDefaultReceipt   == this.wmsLocationId)
            #inventDimExistsJoin(inventItemLocation.inventDimId, inventDim, inventDimCriteria, inventDimParm);

        if (inventItemLocation)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(InventItemLocation)));
        }

        InventLocation inventLocation;
        select firstonly inventLocation
            where inventLocation.inventlocationid == this.inventlocationid
            && (inventLocation.RetailWMSLocationIdDefaultReturn == this.wmsLocationId
            || inventLocation.RBODefaultWMSLocationId == this.wmsLocationId);

        if (inventLocation)
        {
            ret = checkFailed("@SCM:LocationIsInUse");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteUserLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validateDeleteUserLocation()
    {
        boolean ret = true;

        if (this.LocProfileId 
            && WMSLocation::canShowDialog())
        {
            WHSParameters whsParameters = WHSParameters::find();
            if (this.LocProfileId == whsParameters.UserLocType)
            {
                str dialogText;
                if (this.wMSLocationId == whsParameters.GenericWorkUserId)
                {
                    dialogText = strFmt("@WAX:WMSLocationDeleteDefaultWorkUserLocationWarning", this.wMSLocationId, this.inventLocationId);
                }
                else if (WHSWorkUserWarehouse::exist(this.wMSLocationId, this.inventLocationId))
                {
                    dialogText = strFmt("@WAX:WMSLocationDeleteWorkUserLocationWarning", this.wMSLocationId, this.inventLocationId);
                }

                if (dialogText)
                {
                    if (!WMSLocation::confirmDialog(dialogText))
                    {
                        ret = false;
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmDialog</Name>
				<Source><![CDATA[
    private static boolean confirmDialog(str _dialogText)
    {
        return Box::confirm(_dialogText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowDialog</Name>
				<Source><![CDATA[
    private static boolean canShowDialog()
    {
        return hasGUI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether the value of the <c>inputLocation </c>field should be validated.
    /// </summary>
    /// <param name="_fieldName">
    /// The specified name of field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The specified array index of the field; optional.
    /// </param>
    /// <returns>
    /// true if the validation passes; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method handles the table that relates to itself.
    /// </remarks>
    public boolean validateFieldValue(
        FieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        boolean ret;

        switch (_fieldName)
        {
            case fieldStr(WMSLocation, InputLocation):
                return this.validateInputLocation();
            case fieldStr(WMSLocation, position):
                if (!this.manualName)
                {
                    if (this.RecId && (this.orig().position != this.position)) // if not created but updated
                    {
                        return checkFailed(strFmt("@WAX:FieldUpdatesRelatedToLocationIdentification_ErrorMsg", fieldStr(WMSLocation, Position), fieldStr(WMSLocation, manualName), tableStr(WMSLocation), NoYes::No));
                    }
                }
                break;
            case fieldStr(WMSLocation, rack):
                if (!this.manualName)
                {
                    if (this.RecId && (this.orig().rack != this.rack)) // if not created but updated
                    {
                        return checkFailed(strFmt("@WAX:FieldUpdatesRelatedToLocationIdentification_ErrorMsg", fieldStr(WMSLocation, Rack), fieldStr(WMSLocation, manualName), tableStr(WMSLocation), NoYes::No));
                    }
                }
                break;
            case fieldStr(WMSLocation, Level):
                if (!this.manualName)
                {
                    if (this.RecId && (this.orig().level != this.level)) // if not created but updated
                    {
                        return checkFailed(strFmt("@WAX:FieldUpdatesRelatedToLocationIdentification_ErrorMsg", fieldStr(WMSLocation, Level), fieldStr(WMSLocation, manualName), tableStr(WMSLocation), NoYes::No));
                    }
                }
                break;
        }

        ret = super(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInputLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the relational integrity for the <c>InputLocation</c> field.
    /// </summary>
    /// <returns>
    /// true if the relational integrity is preserved for the <c>InputLocation</c> field; otherwise, false.
    /// </returns>
    public boolean validateInputLocation()
    {
        if (this.InputLocation == this.wmsLocationId
            ||  WMSLocation::exist(this.InputLocation, this.InventLocationId))
        {
            return true;
        }

        return checkFailed("@SYS341922");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAbsoluteHeight</Name>
				<Source><![CDATA[
    private void initAbsoluteHeight()
    {
        if (!this.RecId && !this.AbsoluteHeight && this.Level >= 1 && !this.ManualName)
        {
            this.AbsoluteHeight = (this.Level - 1) * WMSParameters::find().DefaultHeight;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret = true;
        WMSLocation         orig = this.orig();

        setPrefix(this.wmsLocationId);

        if (orig.RecId && orig.InventLocationId != this.InventLocationId)
        {
            return checkFailed("@SYS50501");
        }

        if (!InventLocation::find(this.inventLocationId).WHSEnabled)
        {
            if (!this.aisleId)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldStr(WMSLocation, AisleId)));
            }
            else if (!this.isTmp() && !this.wmsAisle()) // Location wizard might not have created the aisle in database yet.
            {
                ret = checkFailed(strFmt("@SYS53734", this.AisleId, this.InventLocationId));
            }
        }
        
        if (ret && this.CheckText &&
            this.CheckText != orig.checkText &&
            InventLocation::find(this.InventLocationId).UniqueCheckDigits && 
            WMSLocation::existsLocationWithCheckText(this.CheckText, this.InventLocationId))
        {
            ret = checkFailed("@WAX2632");
        }

        this.initInputLocation();
        if (orig.InputLocation != this.InputLocation)
        {
            ret = this.validateInputLocation() && ret;
        }

        this.initAbsoluteHeight();

        ret = super() && ret;
        ret = ret && this.checkLocationProfile();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSLocationId</Name>
				<Source><![CDATA[
    public void initWMSLocationId()
    {
        if (this.AisleId && this.InventLocationId && !this.wmsLocationId)
        {
            this.wmsLocationId = this.makeName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and returns a display string representing items on current warehouse location.
    /// </summary>
    /// <returns>
    /// ItemId if current location has a single item, otherwise - 'Multiple'
    /// </returns>
    display ItemId whsDisplayItemId()
    {
        InventSum           inventSum;
        ItemId              itemId;

        ttsbegin;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly10 ItemId from inventSum
            group by ItemId
            where inventSum.ClosedQty           == NoYes::No                &&
                  inventSum.InventLocationId    == this.InventLocationId    &&
                  inventSum.wmsLocationId       == this.wmsLocationId       &&
                  inventSum.PhysicalInvent       > 0;
        }
        else
        {
            InventDim           inventDim;

            select firstonly10 ItemId from inventSum
            group by ItemId
            exists join inventDim
            where inventSum.InventDimId         == inventDim.InventDimId    &&
                  inventSum.ClosedQty           == NoYes::No                &&
                  inventDim.InventLocationId    == this.InventLocationId    &&
                  inventDim.wmsLocationId       == this.wmsLocationId       &&
                  inventSum.PhysicalInvent       > 0;
        }

        itemId = inventSum.ItemId;

        if (itemId)
        {
            next inventSum;

            if (inventSum.ItemId)
            {
                itemId = "@WAX402";
            }
        }

        ttscommit;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and returns the physical inventory for current location.
    /// </summary>
    /// <returns>
    /// The physical inventory quantity for current location.
    /// </returns>
    display ProductQuantity whsDisplayQty()
    {
        InventDim       inventDim;
        InventSum       inventSum;
        ProductQuantity returnQty;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                PdsCatchWeightItem catchWeightItem;

                select sum(PdsCWPhysicalInvent) from inventSum
                where inventSum.ClosedQty           == NoYes::No
                    && inventSum.InventLocationId   == this.InventLocationId
                    && inventSum.wmsLocationId      == this.wmsLocationId
                exists join catchWeightItem
                    where catchWeightItem.ItemId == inventSum.ItemId;

                returnQty = inventSum.PdsCWPhysicalInvent;

                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty           == NoYes::No
                    && inventSum.InventLocationId   == this.InventLocationId
                    && inventSum.wmsLocationId      == this.wmsLocationId
                notexists join catchWeightItem
                    where catchWeightItem.ItemId == inventSum.ItemId;

                returnQty += inventSum.PhysicalInvent;
            }
            else
            {
                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty           == NoYes::No
                    && inventSum.InventLocationId   == this.InventLocationId
                    && inventSum.wmsLocationId      == this.wmsLocationId;

                returnQty = inventSum.PhysicalInvent;
            }
        }
        else
        {
            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                PdsCatchWeightItem catchWeightItem;

                select sum(PdsCWPhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                        && inventDim.InventLocationId   == this.InventLocationId
                        && inventDim.wmsLocationId      == this.wmsLocationId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSum.ItemId;

                returnQty = inventSum.PdsCWPhysicalInvent;

                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                        && inventDim.InventLocationId   == this.InventLocationId
                        && inventDim.wmsLocationId      == this.wmsLocationId
                    notexists join catchWeightItem
                        where catchWeightItem.ItemId == inventSum.ItemId;

                returnQty += inventSum.PhysicalInvent;
            }
            else
            {
                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                        && inventDim.InventLocationId   == this.InventLocationId
                        && inventDim.wmsLocationId      == this.wmsLocationId;

                returnQty = inventSum.PhysicalInvent;
            }
        }

        return returnQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsGenerateCheckText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates unique (not yet used in a system) random number and assigns it as <c>CheckText</c> column value for a current record.
    /// </summary>
    /// <remarks>
    /// The <c>CheckText</c> is assigned only once.
    /// Each generated candidate is validated agains all <c>CheckText</c> values known to the system and is thrown away if duplicate allready exists.
    /// The maximum number of attempts taken by this method to generate unique <c>CheckText</c> value is 10000. If during this number of attempts
    /// the unique value wasn't generated- the exception is thtown.
    /// Candidate random numbers are generated between #WHSCheckDigitMin and #WHSCheckDigitMax.
    /// </remarks>
    public void whsGenerateCheckText()
    {
        RandomGenerate  random;
        WMSLocation     wmsLocation;
        WMSCheckText    checkText;
        boolean         unique;
        int             i;

        if (!InventLocation::find(this.InventLocationId).UniqueCheckDigits)
        {
            random = new RandomGenerate();
            this.CheckText = int2str(random.randomInt(#MacroLib.whsCheckDigitMin, #MacroLib.whsCheckDigitMax));
        }
        else
        {
            while (!unique)
            {
                random = new RandomGenerate();

                // Generate a random check digit.
                checkText = int2str(random.randomInt(#MacroLib.whsCheckDigitMin, #MacroLib.whsCheckDigitMax));

                // Check to see if the check text we generated is unique.
                if (!WMSLocation::existsLocationWithCheckText(checkText, this.InventLocationId))
                {
                    unique = true;
                }

                // To avoid an infinite loop, only try 10,000 times.
                if (i == 10000)
                {
                    throw error(strFmt("@WAX2627", this.wmsLocationId));
                }

                i++;
            }

            this.CheckText = checkText;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationIdEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns boolean flag indicating whether or not current location is empty.
    /// </summary>
    /// <returns>
    /// True, if current location is empty, otherwise - False.
    /// </returns>
    public boolean whsLocationIdEmpty()
    {
        InventDim inventDim;
        InventSum inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Transaction is used to prevent getting data from the cache.
            ttsbegin;

            select firstonly RecId from inventSum
            where inventSum.InventLocationId	== this.InventLocationId
                && inventSum.wmsLocationId      == this.wmsLocationId
                && inventSum.ClosedQty          == NoYes::No
                && inventSum.PhysicalInvent	    > 0;

            ttscommit;

            return inventSum.RecId == 0;
        }
        else
        {
            // Transaction is used to prevent getting data from the cache.
            ttsbegin;

            select firstonly RecId from inventDim
            where inventDim.InventLocationId	== this.InventLocationId
                && inventDim.wmsLocationId      == this.wmsLocationId
            exists join inventSum
                where inventSum.InventDimId     == inventDim.InventDimId
                    && inventSum.ClosedQty      == NoYes::No
                    && inventSum.PhysicalInvent	> 0;

            ttscommit;

            return inventDim.RecId == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationIdEmptyIncludeDelta</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean whsLocationIdEmptyIncludeDelta(boolean _includeDelta)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return this.whsLocationIdEmptyIncludeDeltaCW(_includeDelta);
        }

        return this.whsLocationIdEmpty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationIdEmptyIncludeDeltaCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if location has no physical inventory.
    /// </summary>
    /// <param name = "_includeDelta">Should delta records be included in the calculation</param>
    /// <returns>True, if current location is empty; otherwise False.</returns>
    [Hookable(false)]
    internal boolean whsLocationIdEmptyIncludeDeltaCW(boolean _includeDelta)
    {
        InventDim inventDim;
        boolean isEmpty = true;

        ttsbegin;
        
        if (_includeDelta)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
            {
                InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty inventSumWithDim;

                select firstonly RecId from inventSumWithDim
                    where inventSumWithDim.PhysicalInvent > 0
                    && inventSumWithDim.InventLocationId == this.inventLocationId
                    && inventSumWithDim.wmsLocationId == this.wmsLocationId;

                isEmpty = inventSumWithDim.RecId == 0;
            }
            else
            {
                InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;

                select firstonly RecId from inventSumUnionDeltaPhysicalQty
                    where inventSumUnionDeltaPhysicalQty.PhysicalInvent > 0
                    exists join inventDim
                        where  inventDim.InventDimId == inventSumUnionDeltaPhysicalQty.InventDimId
                            && inventDim.InventLocationId == this.inventLocationId
                            && inventDim.wmsLocationId == this.wmsLocationId;

                isEmpty = inventSumUnionDeltaPhysicalQty.RecId == 0;
            }
        }
        else
        {
            InventSum inventSum;
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstOnly RecId from inventSum
                where  inventSum.PhysicalInvent > 0
                    && inventSum.ClosedQty == NoYes::No
                    && inventSum.InventLocationId == this.inventLocationId
                    && inventSum.wmsLocationId == this.wmsLocationId;
            }
            else
            {
                select firstOnly RecId from inventSum
                where  inventSum.PhysicalInvent > 0
                    && inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where  inventSum.InventDimId == inventDim.inventDimId
                        && inventDim.InventLocationId == this.inventLocationId
                        && inventDim.wmsLocationId == this.wmsLocationId;
            }

            isEmpty = inventSum.RecId == 0;
        }

        ttscommit;

        return isEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPhysicalOnhandForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is onhand quantity for the item in the location.
    /// </summary>
    /// <param name="_itemId">
    /// Id of the item.
    /// </param>
    /// <param name="_productVariantDimensionsId">
    /// Id of the product variant dimension; optional.
    /// </param>
    /// <returns>
    /// true if there is onhand for the item in a specific location; otherwise false.
    /// </returns>
    public boolean hasPhysicalOnhandForItem(ItemId _itemId, InventDimId _productVariantDimensionsId = '')
    {
        InventSum		inventSum;
        InventDim		inventDim;
        InventDim       inventDimCriteria = InventDim::find(_productVariantDimensionsId);
        InventDimParm	inventDimParm;

        inventDimCriteria.InventSiteId		= this.inventSiteId();
        inventDimCriteria.InventLocationId	= this.InventLocationId;
        inventDimCriteria.wmsLocationId     = this.wmsLocationId;

        inventDimParm.initFromInventDim(inventDimCriteria);

        // Select is executed inside the transaction in order to get the latest values and not use cache.
        ttsbegin;
        
        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
                where inventSum.ItemId			== _itemId
                    && inventSum.PhysicalInvent	> 0
                    && inventSum.ClosedQty      == NoYes::No
                    && #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm);
        }
        else
        {
            select firstonly RecId from inventSum
                where inventSum.ItemId			== _itemId
                    && inventSum.PhysicalInvent	> 0
                    && inventSum.ClosedQty      == NoYes::No
                #InventDimExistsJoin(inventSum.inventDimId, inventDim, inventDimCriteria, inventDimParm);
        }

        ttscommit;

        return inventSum.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warnIfLicensePlateIsUsedOnNonLPControlledLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean warnIfLicensePlateIsUsedOnNonLPControlledLocation()
    {
        if (!this.LocProfileId)
        {
            warning(strFmt("@WAX:LocationWithoutLocationProfile", this.wMSLocationId));
        }

        return checkFailed(strFmt("@WAX:LocationNotLPControlled", this.wMSLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationIsLPControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns boolean value indicating whether the current location is license plate controlled or not.
    /// </summary>
    /// <returns>
    /// True - if current location is license plate controlled, otherwise - False.
    /// </returns>
    public boolean whsLocationIsLPControlled()
    {
        return WHSLocationProfile::find(this.LocProfileId).lpControlled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationIsUserLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean flag indicating whether or not the current location is a user location.
    /// </summary>
    /// <returns>
    /// True - if current location is a user location, otherwise - false.
    /// </returns>
    public boolean whsLocationIsUserLocation()
    {
        WHSParameters       parameters;
        boolean             ret;

        if (this.wmsLocationId)
        {
            parameters = WHSParameters::find();

            if (!parameters.UserLocType)
            {
                throw error("@WAX1646");
            }

            ret = (this.LocProfileId == parameters.UserLocType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserLocationNotAllowedToAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean flag indicating whether or not the current location is a user location that is not allowed to adjust.
    /// </summary>
    /// <returns>True, if current location is a user location; otherwise false.</returns>
    [Hookable(false)]
    internal boolean isUserLocationNotAllowedToAdjust()
    {
        if (this.inventLocation().WHSEnabled && 
            this.whsLocationIsUserLocation() &&
            !WHSWorkUser::find(this.wMSLocationId).AllowAdjustmentsFromUserLocation)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns a record of <c>WHSLocationProfile</c> table associated with current location.
    /// </summary>
    /// <param name="_forUpdate">
    /// When True - associated record in <c>WHSLocationProfile</c> table is queried for update.
    /// </param>
    /// <returns>
    /// The record from <c>WHSLocationProfile</c> table associated with a current location.
    /// </returns>
    public WHSLocationProfile whsLocationProfile(boolean _forUpdate = false)
    {
        return WHSLocationProfile::find(this.LocProfileId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries and returns a type of current location.
    /// </summary>
    /// <returns>
    /// <c>WHSLocType</c> from location profile associated with current location.
    /// </returns>
    public WHSLocType whsLocationType()
    {
        return WHSLocationProfile::find(this.LocProfileId).LocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLookupInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfrorms location lookup for inventory location IDs
    /// </summary>
    /// <param name="_ctrl">
    /// Forms string control (lookup field)
    /// </param>
    /// <param name="_whsControlled">
    /// If true, only WHS controlled location are queried.
    /// </param>
    public void whsLookupInventLocationId(FormStringControl _ctrl, NoYesId _whsControlled)
    {
        InventLocation::lookupWarehouses(_ctrl, _whsControlled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsPCTFilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method providing filled percentage for current location shown by UI.
    /// </summary>
    /// <returns>
    /// Filled percentage for current location.
    /// </returns>
    display Percent whsPCTFilled()
    {
        WHSLocationOnHandConstraintQueryType queryType = WHSLocationOnHandConstraintQueryType::newWithDelta();
        queryType.parmGroupByItem(true);
        queryType.parmGroupByVariant(true);

        WHSLocationOnHandConstraintQryEnumerator onHandEnumerator = WHSLocationOnHandConstraintQuery::getEnumeratorByLocationId(queryType,
                                                                                                                                this.InventLocationId,
                                                                                                                                this.wmslocationId);

        // Check to see if the location uses stocking limits
        InventHandlingQty   allowedQty;
        UnitOfMeasureSymbol allowedUnitId;
        
        [allowedQty, allowedUnitId] = WHSLocationLimit::retrieveQuantityAndUnitLimitForLocation(this.InventLocationId, this.wMSLocationId, false);

        InventDim         onHandInventDim;
        Percent           pctFilled;
        InventHandlingQty locQty;
        
        if (allowedQty != 0)
        {
            UnitOfMeasureRecId allowedUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(allowedUnitId);

            // Use stocking limits
            while (onHandEnumerator.moveNext())
            {
                if (allowedUnitRecId != onHandEnumerator.currentHandlingUnitOfMeasureRecId())
                {
                    locQty += this.convertToLocationUnit(onHandEnumerator, allowedUnitRecId);
                }
                else
                {
                    locQty += onHandEnumerator.currentHandlingPhysicalInvent();
                }
            }

            pctFilled = locQty / allowedQty;
        }
        else
        {
            // Use volumetrics
            Volume              totalVolume;
            WHSPhysDimUOM       physDimUOM;
            UnitOfMeasureRecId  locUnitId;
            WHSLocationProfile  locationProfile = WHSLocationProfile::find(WMSLocation::find(this.wmsLocationId, this.InventLocationId).LocProfileId);
            UnitOfMeasureRecId  storageUnitId = UnitOfMeasure::unitOfMeasureIdBySymbol(locationProfile.StorageUnit);
            
            // Count up all volumes in the location
            while (onHandEnumerator.moveNext())
            {
                if (storageUnitId
                    && storageUnitId != onHandEnumerator.currentHandlingUnitOfMeasureRecId())
                {
                    locQty = this.convertToLocationUnit(onHandEnumerator, storageUnitId);
                    locUnitId = storageUnitId;
                }
                else
                {
                    locQty    = onHandEnumerator.currentHandlingPhysicalInvent();
                    locUnitId = onHandEnumerator.currentHandlingUnitOfMeasureRecId();
                }

                physDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(onHandEnumerator.currentItemId(), UnitOfMeasure::find(locUnitId).Symbol);
                totalVolume += physDimUOM.displayVolume() * locQty;
            }

            var locationVolume = locationProfile.maxFillVolume();

            if (locationVolume != 0)
            {
                pctFilled = totalVolume / locationVolume;
            }
            else
            {
                // Infinite location
                pctFilled = 0;
            }
        }

        return (pctFilled * 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToLocationUnit</Name>
				<Source><![CDATA[
    private Qty convertToLocationUnit(WHSLocationOnHandConstraintQryEnumerator _onHandEnumerator, UnitOfMeasureRecId _unit)
    {
        InventDim onHandInventDim = InventDim::findOrCreate(_onHandEnumerator.currentInventDim());

        EcoResProductUnitConverter unitConverter = EcoResProductUnitConverter::newForReleasedProduct(_onHandEnumerator.currentItemId(),
                                                                                                     onHandInventDim.InventDimId,
                                                                                                     _onHandEnumerator.currentHandlingUnitOfMeasureRecId(),
                                                                                                     _unit,
                                                                                                     NoYes::No,
                                                                                                     NoYes::No);

        if (unitConverter.canValueBeConverted())
        {
            return unitConverter.convertValue(_onHandEnumerator.currentHandlingPhysicalInvent());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsAisle</Name>
				<Source><![CDATA[
    public WMSAisle wmsAisle(boolean _update = false)
    {
        return WMSAisle::find(this.AisleId, this.InventLocationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterforWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Limits a QueryBuildDataSource to either WMS-only or WHS-only Warehouses
    /// </summary>
    /// <param name="_qbds">
    /// QueryBuildDataSource to be modified
    /// </param>
    /// <param name="_whsEnabled">
    /// Should retrieved warehouses be WHS Enabled?
    /// </param>
    public static void addFilterforWHSEnabled(QueryBuildDataSource _qbds, NoYes _whsEnabled)
    {
        QueryBuildDataSource qbds_inventlocation;

        qbds_inventlocation = _qbds.addDataSource(tableNum(InventLocation));
        qbds_inventlocation.relations(false);
        qbds_inventlocation.joinMode(JoinMode::ExistsJoin);
        qbds_inventlocation.addLink(fieldNum(WMSLocation, InventLocationId),fieldNum(InventLocation, InventLocationId),_qbds.name());
        qbds_inventlocation.addRange(fieldNum(InventLocation, whsEnabled)).value(queryValue(_whsEnabled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDefaultLookup</Name>
				<Source><![CDATA[
    public static SysTableLookup buildDefaultLookup(
        FormStringControl   _ctrl,
        InventLocationId    _inventLocationId)
    {
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(WMSLocation), _ctrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(WMSLocation));
        QueryBuildRange         queryBuildRange         = queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId));

        queryBuildRange.value(queryValue(_inventLocationId));
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(WMSLocation, wmsLocationId));
        // Instead of showing the Type, show the new Profile field.
        if (!InventLocation::find(_inventLocationId).whsEnabled)
        {
            sysTableLookup.addLookupfield(fieldNum(WMSLocation, LocationType));
        }
        else
        {
            sysTableLookup.addLookupfield(fieldNum(WMSLocation, LocProfileId));
        }
        sysTableLookup.addLookupMethod(tableMethodStr(WMSLocation, inventSiteId));

        sysTableLookup.addLookupfield(fieldNum(WMSLocation, InventLocationId));
        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the location for the specified item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDirection">
    /// Direction of inventory, ie issue or receipt.
    /// </param>
    /// <param name="_inventDim">
    /// Invent dimension.
    /// </param>
    /// <param name="_useRetailLocations">
    /// Indicates wether to consider the retail locations.
    /// </param>
    /// <returns>
    /// A <c>WMSLocation</c> record; otherwise, an empty record.
    /// </returns>
    public static WMSLocation defaultItemLocation(
        ItemId              _itemId,
        InventDirection     _inventDirection,
        InventDim           _inventDim,
        boolean             _useRetailLocations = false)
    {
        InventItemLocation  inventItemLocation;
        WMSLocationId       wmsLocationId;
        container           key = [_itemId, _inventDirection, _inventDim.mapKey(), _useRetailLocations];
        WMSLocation         wmsLocation = SysTransactionScopeCache::get(funcName(), key, null);

        if (wmsLocation)
        {
            return wmsLocation;
        }

        if (_inventDim.InventLocationId &&
            EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(_itemId, fieldNum(InventDim,wmsLocationId)))
        {
            inventItemLocation = InventItemLocation::findFixedWarehouse(_itemId, InventDim::findOrCreate(_inventDim).InventDimId);
            if (inventItemLocation.RecId && inventItemLocation.inventLocationID() == _inventDim.InventLocationId)
            {
                wmsLocationId = _inventDirection == InventDirection::Receipt ?
                                          inventItemLocation.wmsLocationIdDefaultReceipt :
                                          inventItemLocation.wmsLocationIdDefaultIssue;
            }

            // use default from retail in warehouse if enabled
            if (_useRetailLocations && _inventDim.InventLocationId && !wmsLocationId)
            {
                wmsLocationId = _inventDirection == InventDirection::Receipt ?
                                        InventLocation::find(_inventDim.InventLocationId).RetailWMSLocationIdDefaultReturn :
                                        InventLocation::find(_inventDim.InventLocationId).RBODefaultWMSLocationId;
            }

            // use default from warehouse
            if (_inventDim.InventLocationId && !wmsLocationId) 
            {
                wmsLocationId = _inventDirection == InventDirection::Receipt ?
                                          InventLocation::find(_inventDim.InventLocationId).wmsLocationIdDefaultReceipt :
                                          InventLocation::find(_inventDim.InventLocationId).wmSlocationIdDefaultIssue;
            }

            if (wmsLocationId)
            {
                wmsLocation = WMSLocation::find(wmsLocationId, _inventDim.InventLocationId);
                SysTransactionScopeCache::set(funcName(), key, wmsLocation);
            }
        }
        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        WMSLocationId       _wmsLocationId,
        InventLocationId    _inventLocationId)
    {
        return _wmsLocationId && (select wmsLocation
                    where wmsLocation.wmsLocationId     == _wmsLocationId
                       && wmsLocation.InventLocationId  == _inventLocationId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WMSLocation find(
        WMSLocationId       _wmsLocationId,
        InventLocationId    _inventLocationId,
        boolean             _update             = false)
    {
        WMSLocation     wmsLocation;

        wmsLocation.selectForUpdate(_update);

        if (_wmsLocationId && _inventLocationId)
        {
            select firstonly wmsLocation
                where wmsLocation.wmsLocationId     == _wmsLocationId
                   && wmsLocation.InventLocationId  == _inventLocationId;
        }

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WMSLocation</c> table.
    /// </summary>
    /// <param name="_wmsLocationId">
    /// The location to find.
    /// </param>
    /// <param name="_inventLocationId">
    /// The warehouse to find.
    /// </param>
    /// <param name="_dataAreaId">
    /// The legal entity in which to find the record.
    /// </param>
    /// <returns>
    /// A <c>WMSLocation</c> record; otherwise, an empty record.
    /// </returns>
    public static WMSLocation findInLegalEntity(
        WMSLocationId       _wmsLocationId,
        InventLocationId    _inventLocationId,
        DataAreaId          _dataAreaId)
    {
        WMSLocation  wmsLocation;

        if (_wmsLocationId    &&
            _inventLocationId &&
            _dataAreaId)
        {
            select firstonly crosscompany wmsLocation
                where wmsLocation.wmsLocationId     == _wmsLocationId
                   && wmsLocation.InventLocationId  == _inventLocationId
                   && wmsLocation.DataAreaId == _dataAreaId;
        }

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPickingLocation</Name>
				<Source><![CDATA[
    public static WMSLocation findPickingLocation(ItemId _itemId, InventDim _inventDim, boolean _update = false)
    {
        if (_inventDim.InventLocationId)
        {
            return InventItemLocation::findFixedWarehouse(_itemId, _inventDim.InventDimId).wmsPickingLocation(_update);
        }
        return InventItemLocation::find(_itemId, _inventDim.InventDimId).wmsPickingLocation(_update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the given warehouse location represents a supermarket.
    /// </summary>
    /// <param name="_wmsLocationId">
    ///    The warehouse location.
    /// </param>
    /// <param name="_inventLocationId">
    ///    The warehouse.
    /// </param>
    /// <returns>
    ///    true if the current record represents a supermarket; otherwise, false.
    /// </returns>
    public static boolean isSupermarket(
        WMSLocationId    _wmsLocationId,
        InventLocationId _inventLocationId)
    {
        WMSLocation wmsLocation;
        boolean     result = false;

        if (   _wmsLocationId
            && _inventLocationId)
        {
            wmsLocation = WMSLocation::find(_wmsLocationId,_inventLocationId);
            result      =    wmsLocation.RecId != 0
                          && wmsLocation.LocationType == WMSLocationType::KanbanSupermarket;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLocationId</Name>
				<Source><![CDATA[
    public static void lookupLocationId(
        FormStringControl   _ctrl,
        InventLocationId    _inventLocationId)
    {
        SysTableLookup          sysTableLookup = WMSLocation::buildDefaultLookup(_ctrl, _inventLocationId);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPackingLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup containing all packing locations for a warehouse.
    /// </summary>
    /// <param name="_ctrl">
    /// Form control to show the lookup.
    /// </param>
    /// <param name="_inventLocationId">
    /// Inventory Location ID.
    /// </param>
    public static void lookupPackingLocations(
        FormStringControl   _ctrl,
        InventLocationId    _inventLocationId)
    {
        SysTableLookup          sysTableLookup = WMSLocation::buildDefaultLookup(_ctrl, _inventLocationId);
        Query                   query;
        QueryBuildDataSource    queryBuildDataSourceWMSLocation;
        QueryBuildRange         queryBuildRangeLocationProfilePack;
        WHSParameters           whsParameters = WHSParameters::find();

        if (!sysTableLookup.parmQuery())
        {
            query = new Query();
            queryBuildDataSourceWMSLocation = query.addDataSource(tableNum(WMSLocation));
            sysTableLookup.parmQuery(query);
        }

        queryBuildDataSourceWMSLocation = SysQuery::findOrCreateDataSource(sysTableLookup.parmQuery(), tableNum(WMSLocation));

        var queryBuildDataSourceLocationProfile = queryBuildDataSourceWMSLocation.addDataSource(tableNum(WHSLocationProfile));
        queryBuildDataSourceLocationProfile.addLink(fieldNum(WMSLocation, LocProfileId), fieldNum(WHSLocationProfile, LocProfileId));

        // Is the system set up to use the legacy packing profile parameter
        if (whsParameters.PackingLocType)
        {
            // Filter based on the packing location profile used in the parameters
            queryBuildRangeLocationProfilePack = queryBuildDataSourceLocationProfile.addRange(fieldNum(WHSLocationProfile, LocProfileId));
            queryBuildRangeLocationProfilePack.value(queryValue(whsParameters.PackingLocType));
        }
        else
        {
            // Filter based on the packing profile type used in the parameters
            queryBuildRangeLocationProfilePack = queryBuildDataSourceLocationProfile.addRange(fieldNum(WHSLocationProfile, LocType));
            queryBuildRangeLocationProfilePack.value(queryValue(whsParameters.PackingLocationType));
        }

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLocationIdType</Name>
				<Source><![CDATA[
    public static void lookupLocationIdType(
        FormStringControl   _ctrl,
        WMSLocationType     _wmsLocationType,
        InventLocationId    _inventLocationId)
    {
        SysTableLookup          sysTableLookup = WMSLocation::buildDefaultLookup(_ctrl, _inventLocationId);
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query;

        if (!sysTableLookup.parmQuery())
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tableNum(WMSLocation));
            sysTableLookup.parmQuery(query);
        }

        // If using a WHS Warehouse, override the lookup.
        if (!InventLocation::find(_inventLocationId).whsEnabled)
        {
            queryBuildDataSource = SysQuery::findOrCreateDataSource(sysTableLookup.parmQuery(), tableNum(WMSLocation));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, LocationType));
            queryBuildRange.value(queryValue(_wmsLocationType));
        }

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLocationIdTypes</Name>
				<Source><![CDATA[
    public static void lookupLocationIdTypes(
        FormStringControl   _ctrl,
        Range               _locationTypesRange,
        InventLocationId    _inventLocationId)
    {
        SysTableLookup          sysTableLookup = WMSLocation::buildDefaultLookup(_ctrl, _inventLocationId);
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query;

        if (!sysTableLookup.parmQuery())
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tableNum(WMSLocation));
            sysTableLookup.parmQuery(query);
        }

        queryBuildDataSource = SysQuery::findOrCreateDataSource(sysTableLookup.parmQuery(), tableNum(WMSLocation));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, LocationType));
        queryBuildRange.value(_locationTypesRange);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPhysicalLoadFromLocationType</Name>
				<Source><![CDATA[
    // <remarks>
    //     Add a post-method handler for returning the right value when extending the <c>WMSLocationType</c> enumeration.
    // </remarks>
    public static boolean trackPhysicalLoadFromLocationType(WMSLocationType _wmsLocationType)
    {
        return (_wmsLocationType != WMSLocationType::OutputPort        &&
                _wmsLocationType != WMSLocationType::ProductionInput   &&
                _wmsLocationType != WMSLocationType::KanbanSupermarket);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDefaultAisle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default aise value for WHS enabled warehouse locations.
    /// </summary>
    /// <returns>
    /// The default aisle value.
    /// </returns>
    public static str whsDefaultAisle()
    {
        return '--';
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsGetInventBatchIdByStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns valid <c>InventBatchId</c> for specific location, item, dimensions based on batch allocation strategy.
    /// </summary>
    /// <param name="_locationId">
    /// WHS Location ID.
    /// </param>
    /// <param name="_inventLocationId">
    /// Inventory Location ID.
    /// </param>
    /// <param name="_inventStatusId">
    /// Inventory Status ID.
    /// </param>
    /// <param name="_itemDims">
    /// Item Dimensions.
    /// </param>
    /// <param name="_itemId">
    /// Item ID.
    /// </param>
    /// <param name="_strategy">
    /// Batch Allocation Strategy to consider.
    /// </param>
    /// <returns>
    /// Valid <c>InventBatchId</c> retrieved according the provided Batch Allocation Strategy.
    /// </returns>
    public static InventBatchId whsGetInventBatchIdByStrategy(WMSLocationId                 _locationId,
                                                              InventLocationId              _inventLocationId,
                                                              WHSInventStatusId             _inventStatusId,
                                                              InventDim                     _itemDims,
                                                              ItemId                        _itemId,
                                                              WHSBatchAllocationStrategy    _strategy)
    {
        InventDim       inventDim;
        InventSum       inventSum;
        InventBatch     inventBatch;

        InventDimParm inventDimParm = InventDimParm::allProductDim();
        
        InventDim inventDimSearch;
        inventDimSearch.data(_itemDims);

        inventDimSearch.InventSiteId        = InventLocation::find(_inventLocationId).InventSiteId;
        inventDimSearch.InventLocationId    = _inventLocationId;
        inventDimSearch.InventStatusId      = _inventStatusId;
        inventDimSearch.WmsLocationId       = _locationId;

        inventDimParm.InventSiteIdFlag = NoYes::Yes;
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        inventDimParm.InventStatusFlag = NoYes::Yes;
        inventDimParm.WmsLocationIdFlag = NoYes::Yes;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            switch (_strategy)
            {
                case WHSBatchAllocationStrategy::FEFO:
                    while select inventBatch
                        order by inventBatch.ExpDate asc
                        join InventDimId, PhysicalInvent, InventBatchId from inventSum
                        where inventBatch.ItemId            == _itemId                          &&
                              inventSum.ClosedQty           == NoYes::No                        &&
                              inventSum.ItemId              == _itemId                          &&
                              inventSum.PhysicalInvent       > 0                                &&
                              #InventDimFieldsFilter(inventSum, inventDimSearch, inventDimParm) &&
                              inventSum.InventBatchId       == inventBatch.InventBatchId
                    {
                        InventSumDelta  inventSumDelta;

                        select sum(PhysicalInvent) from inventSumDelta
                            where inventSumDelta.ItemId         == _itemId  &&
                                  inventSumDelta.InventDimId    == inventSum.InventDimId;

                        if (inventSum.PhysicalInvent + inventSumDelta.PhysicalInvent > 0)
                        {
                            return inventSum.InventBatchId;
                        }
                    }
                    break;

                case WHSBatchAllocationStrategy::LEFO:
                    while select inventBatch
                        order by inventBatch.ExpDate desc
                        join InventDimId, PhysicalInvent, InventBatchId from inventSum
                        where inventBatch.ItemId            == _itemId                          &&
                              inventSum.ClosedQty           == NoYes::No                        &&
                              inventSum.ItemId              == _itemId                          &&
                              inventSum.PhysicalInvent       > 0                                &&
                              #InventDimFieldsFilter(inventSum, inventDimSearch, inventDimParm) &&
                              inventSum.InventBatchId       == inventBatch.InventBatchId
                    {
                        InventSumDelta  inventSumDelta;

                        select sum(PhysicalInvent) from inventSumDelta
                            where inventSumDelta.ItemId         == _itemId  &&
                                  inventSumDelta.InventDimId    == inventSum.InventDimId;

                        if (inventSum.PhysicalInvent + inventSumDelta.PhysicalInvent > 0)
                        {
                            return inventSum.InventBatchId;
                        }
                    }
                    break;
            }
        }
        else
        {
            switch (_strategy)
            {
                case WHSBatchAllocationStrategy::FEFO:
                    while select inventBatch
                        order by inventBatch.ExpDate asc
                        join inventSum
                        where inventBatch.ItemId            == _itemId                      &&
                              inventSum.ClosedQty           == NoYes::No                    &&
                              inventSum.ItemId              == _itemId                      &&
                              inventSum.PhysicalInvent       > 0
                        #InventDimInnerJoin(inventSum.InventDimId, inventDim, inventDimSearch, inventDimParm) &&
                    inventDim.InventBatchId       == inventBatch.InventBatchId
                    {
                        InventSumDelta  inventSumDelta;

                        select sum(PhysicalInvent) from inventSumDelta
                            where inventSumDelta.ItemId         == _itemId  &&
                                  inventSumDelta.InventDimId    == inventDim.InventDimId;

                        if (inventSum.PhysicalInvent + inventSumDelta.PhysicalInvent > 0)
                        {
                            return inventDim.InventBatchId;
                        }
                    }
                    break;

                case WHSBatchAllocationStrategy::LEFO:
                    while select inventBatch
                        order by inventBatch.ExpDate desc
                        join InventDimId, ItemId, PhysicalInvent from inventSum
                        where inventBatch.ItemId            == _itemId                      &&
                              inventSum.ClosedQty           == NoYes::No                    &&
                              inventSum.ItemId              == _itemId                      &&
                              inventSum.PhysicalInvent       > 0
                        #InventDimInnerJoin(inventSum.InventDimId, inventDim, inventDimSearch, inventDimParm) &&
                    inventDim.InventBatchId       == inventBatch.InventBatchId
                    {
                        InventSumDelta  inventSumDelta;

                        select sum(PhysicalInvent) from inventSumDelta
                            where inventSumDelta.ItemId         == _itemId  &&
                                  inventSumDelta.InventDimId    == inventDim.InventDimId;

                        if (inventSum.PhysicalInvent + inventSumDelta.PhysicalInvent > 0)
                        {
                            return inventDim.InventBatchId;
                        }
                    }
                    break;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByIDOrCheckDigit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a warehouse location.
    /// </summary>
    /// <param name="_locationIdOrCheckDigit">
    /// A string value representing either WMSLocationID or CheckText to be used for search.
    /// </param>
    /// <param name="_inventLocationId">
    /// A warehouse to be used for search.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the records are selected for update; optional.
    /// </param>
    /// <returns>
    /// WMSLocation found based on provided searching parameters.
    /// </returns>
    public static WMSLocation findLocationByIDOrCheckDigit(str 80            _locationIdOrCheckDigit,
                                                           InventLocationId  _inventLocationId,
                                                           boolean           _forUpdate = false)   
    {
        WMSLocation location;
        
        if (_locationIdOrCheckDigit)        
        {
            location = WMSLocation::find(_locationIdOrCheckDigit, _inventLocationId, _forUpdate);
            
            if (!location)           
            {
                location = WMSLocation::findLocationByUniqueCheckDigit(_locationIdOrCheckDigit, _inventLocationId, _forUpdate);                
            }
        }
        
        return location;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByUniqueCheckDigit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a warehouse location based on the Unique Check Digits flag.
    /// </summary>
    /// <param name="_checkDigit">
    /// A string value representing CheckText to be used for search.
    /// </param>
    /// <param name="_inventLocationId">
    /// A warehouse to be used for search.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the records are selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>WMSLocation</c> warehouse location found based on provided searching parameters.
    /// </returns>
    public static WMSLocation findLocationByUniqueCheckDigit(str 80           _checkDigit,
                                                             InventLocationId _inventLocationId,
                                                             boolean          _forUpdate = false)    
    {
        WMSLocation location;
        
        location.selectForUpdate(_forUpdate);
        
        if (_checkDigit && InventLocation::find(_inventLocationId).UniqueCheckDigits)
        {
            select firstonly location
                where location.CheckText        == _checkDigit   
                   && location.InventLocationId == _inventLocationId;            
        }
        
        return location;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByWarehouseAndLocationProfileType</Name>
				<Source><![CDATA[
    internal static WMSLocation findFirstByWarehouseAndLocationProfileType(
        InventLocationId _inventLocationId,
        WHSLocType _locationType,
        boolean _forUpdate = false)
    {
        WMSLocation location;
        WHSLocationProfile locationProfile;
        
        location.selectForUpdate(_forUpdate);
        
        if (_inventLocationId && _locationType)
        {
            select firstonly location
                order by wMSLocationId
                where location.InventLocationId == _inventLocationId
                exists join locationProfile
                    where locationProfile.LocProfileId == location.LocProfileId
                        && locationProfile.LocType == _locationType;
        }

        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsLocationWithCheckText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a location with specified check text exists.
    /// </summary>
    /// <param name = "_checkText">A check text to be used for search.</param>
    /// <param name = "_inventLocationId">A warehouse to be used for search.</param>
    /// <returns>true, if location with the check text exists; otherwise false.</returns>
    private static boolean existsLocationWithCheckText(WMSCheckText _checkText, InventLocationId _inventLocationId)
    {
        WMSLocation location;

        select firstonly RecId from location
            where location.CheckText         == _checkText
               && location.InventLocationId  == _inventLocationId;

        return location.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsGetLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a warehouse location id.
    /// </summary>
    /// <param name="_locationIdOrCheckDigit">
    /// A string value representing either WMSLocationID or CheckText to be used for search.
    /// </param>
    /// <param name="_inventLocationId">
    /// A warehouse to be used for search.
    /// </param>
    /// <returns>
    /// A <c>WMSLocationId</c> warehouse location ID found based on provided searching parameters.
    /// </returns>    
    public static WMSLocationId whsGetLocationId(str 80            _locationIdOrCheckDigit,
                                                 InventLocationId  _inventLocationId)
    {
        return WMSLocation::findLocationByIDOrCheckDigit(_locationIdOrCheckDigit, _inventLocationId).wMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocationHasSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns boolean value indicating whether specific item on specific WMS location has serial number or not.
    /// </summary>
    /// <param name="_wmsLocation">
    /// WMS Location to check.
    /// </param>
    /// <param name="_itemId">
    /// Item ID to check.
    /// </param>
    /// <returns>
    /// true, if provided item on provided location has serial number.
    /// </returns>
    public static boolean whsLocationHasSerial(WMSLocation      _wmsLocation,
                                               ItemId           _itemId)

    {
        boolean ret = false;

        if (_wmsLocation)
        {
            ret = _wmsLocation.itemOnHandExistsWithSerialNumber(_itemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemOnHandExistsWithSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns boolean value indicating whether specific item on the current location has serial number or not.
    /// </summary>
    /// <param name="_itemId">
    /// Item ID to check.
    /// </param>
    /// <returns>
    /// true, if provided item on the current location has serial number.
    /// </returns>
    public boolean itemOnHandExistsWithSerialNumber(ItemId _itemId)
    {
        InventSum   inventSum;
        InventDim   inventDim;
        boolean     ret = true;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (PdsGlobal::pdsIsCWItem(_itemId))
            {
                select firstonly RecId from inventSum
                where  inventSum.InventLocationId       == this.inventLocationId
                    && inventSum.wmsLocationId          == this.wMSLocationId
                    && inventSum.InventSerialId         != ''
                    && inventSum.PdsCWPhysicalInvent    > 0
                    && inventSum.ClosedQty              == NoYes::No
                    && inventSum.ItemId                 == _itemId;
            }
            else
            {
                select firstonly RecId from inventSum
                where inventSum.InventLocationId    ==  this.inventLocationId   &&
                      inventSum.wmsLocationId       ==  this.wMSLocationId      &&
                      inventSum.InventSerialId      !=  ''                      &&
                      inventSum.PhysicalInvent      >  0                        &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.ItemId              == _itemId;
            }

            if (inventSum.RecId == 0)
            {
                ret = false;
            }
        }
        else
        {
            if (PdsGlobal::pdsIsCWItem(_itemId))
            {
                select firstonly RecId from inventDim
                where  inventDim.InventLocationId == this.inventLocationId
                    && inventDim.wmsLocationId == this.wMSLocationId
                    && inventDim.InventSerialId != ''
                exists join inventSum
                where  inventSum.InventDimId == inventDim.InventDimId
                    && inventSum.PdsCWPhysicalInvent > 0
                    && inventSum.ClosedQty == NoYes::No
                    && inventSum.ItemId    == _itemId;
            }
            else
            {
                select firstonly wmsLocationId, InventSerialId from inventDim
                join InventDimId, PhysicalInvent, ItemId from inventSum
                where inventDim.InventDimId         ==  inventSum.InventDimId   &&
                      inventDim.InventLocationId    ==  this.inventLocationId   &&
                      inventDim.wmsLocationId       ==  this.wMSLocationId      &&
                      inventSum.PhysicalInvent       >  0                       &&
                      inventSum.ItemId              ==  _itemId                 &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventDim.InventSerialId      !=  '';
            }

            if (inventDim.RecId == 0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLookupWHSLocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for WHS Location Sypes.
    /// </summary>
    /// <param name="_ctrl">
    /// Form field with lookup.
    /// </param>
    /// <param name="_locType">
    /// Type of location.
    /// </param>
    /// <param name="_inventLocationId">
    /// Inventory location ID.
    /// </param>
    /// <param name="_inventSiteId">
    /// Inventory Site ID.
    /// </param>
    public static void whsLookupWHSLocType(FormStringControl    _ctrl,
                                                  WHSLocType           _locType,
                                                  InventLocationId     _inventLocationId,
                                                  InventSiteId         _inventSiteId)
    {
        SysTableLookup          sysTableLookup = WMSLocation::buildDefaultLookup(_ctrl, _inventLocationId);
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query;

        if (!sysTableLookup.parmQuery())
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tableNum(WMSLocation));
            sysTableLookup.parmQuery(query);
        }

        queryBuildDataSource = SysQuery::findOrCreateDataSource(sysTableLookup.parmQuery(), tableNum(WMSLocation));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(WHSLocationProfile));
        queryBuildDataSource.relations(true);
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(WHSLocationProfile, LocType));
        queryBuildRange.value(queryValue(_locType));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinalShipLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the location profile can be used as a final ship location.
    /// </summary>
    /// <returns>
    ///    true if the location profile is valid; otherwise, false.
    /// </returns>
    public boolean checkFinalShipLocation()
    {
        boolean result = true;
        WHSLocationProfile whsLocationProfile = WHSLocationProfile::find(this.LocProfileId);
        WHSParameters parameters = WHSParameters::find();

        if (!whsLocationProfile ||
            parameters.ShipFinalLocType != whsLocationProfile.LocType)
        {
            result = checkFailed(strFmt("@SYP4881030", parameters.ShipFinalLocType));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSortLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the location profile can be used as a sorting location.
    /// </summary>
    /// <returns>
    /// true if the location profile is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean checkSortLocation()
    {
        boolean             result = true;
        WHSLocationProfile  whsLocationProfile = WHSLocationProfile::find(this.LocProfileId);
        WHSParameters       parameters = WHSParameters::find();

        if (parameters.SortingLocationType != whsLocationProfile.LocType)
        {
            result = checkFailed(strFmt("@WAX:OutboundSortLocationValidateLocationType", parameters.SortingLocationType));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowedAsOutputLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if location is allowed as output location
    /// </summary>
    /// <returns>
    /// true if the current <c>WMSLocation</c> record is allowed as output location; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A location is allowed as output location if it is in a WHS enabled warehouse and is license plate controlled, or, for
    /// non-license plate controlled locations, is part of a Work policy which allows skipping work creation for putaway
    /// </remarks>
    public boolean checkAllowedAsOutputLocation()
    {
        boolean result = false;

        if (this.RecId && this.inventLocation().WHSEnabled)
        {
            if (this.whsLocationIsLPControlled())
            {
                result = true;
            }
            else
            {
                if (!WHSWorkPolicy::exist(this))
                {
                    result = checkFailed(strFmt("@WAX:WorkPolicyDoesNotExistForLocation", this.wMSLocationId));
                }
                else
                {
                    result = true;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationIsInWhsWhAndLPControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the existing location is in a WHS enabled warehouse and is license plate controlled.
    /// </summary>
    /// <returns>
    /// true if the current <c>WMSLocation</c> record is in a WHS enabled warehouse and is LP controlled; otherwise, false.
    /// </returns>
    [SysObsolete('Use whsLocationIsLPControlled instead', false, 30\06\2018)]
    public boolean checkLocationIsInWhsWhAndLPControlled()
    {
        boolean result = true;

        if (this.RecId
            && this.inventLocation().WHSEnabled
            && !this.whsLocationIsLPControlled())
        {
            result = checkFailed("@WAX2975");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the location is a packing location.
    /// </summary>
    /// <returns>
    /// true, if the location is a packing location; otherwise, false.
    /// </returns>
    public boolean isPackingLocation()
    {
        WHSLocationProfile whsLocationProfile = WHSLocationProfile::find(this.LocProfileId);

        return whsLocationProfile.isPackingLocationProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStagingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the location is a staging location.
    /// </summary>
    /// <returns>
    /// true, if the location is a staging location; otherwise, false.
    /// </returns>
    public boolean isStagingLocation()
    {
        WHSLocationProfile whsLocationProfile = WHSLocationProfile::find(this.LocProfileId);

        return whsLocationProfile.isStagingLocationProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSortingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the location is an outbound sorting location.
    /// </summary>
    /// <returns>
    /// true, if the location is a sorting location; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isSortingLocation()
    {
        WHSLocationProfile whsLocationProfile = WHSLocationProfile::find(this.LocProfileId);

        return whsLocationProfile.isSortingLocationProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location is an inbound dock.
    /// </summary>
    /// <returns>
    /// true if the location is an inbound dock; otherwise; false.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>WMSLocationType</c> enumeration.
    /// </remarks>
    public boolean isInboundDock()
    {
        return this.LocationType == WMSLocationType::InputPort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUsedWithPickingActivityUpdatingOnhandInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this location can be used with a picking activity when the activity updates on hand inventory.
    /// </summary>
    /// <returns>
    /// true if the location can be used with a picking activity when the activity updates on hand inventory; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>WMSLocationType</c> enumeration.
    /// </remarks>
    public boolean canBeUsedWithPickingActivityUpdatingOnhandInventory()
    {
        return this.LocationType != WMSLocationType::KanbanSupermarket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLevelOfInventoryControlRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the level of inventory control at the location is restricted.
    /// </summary>
    /// <returns>
    /// true if the level of inventory control at the location is restricted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>WMSLocationType</c> enumeration.
    /// </remarks>
    public boolean isLevelOfInventoryControlRestricted()
    {
        return this.LocationType == WMSLocationType::KanbanSupermarket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editWorkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a related Work policy
    /// </summary>
    /// <param name="_set">
    /// Boolean indicating if the field is being set
    /// </param>
    /// <param name="_workPolicyName">
    /// The new value of Work policy field <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The name of the Work policy if current location is included in a Work policy; otherwise returns empty string
    /// </returns>
    public edit WHSWorkPolicyName editWorkPolicy(boolean _set, WHSWorkPolicyName _workPolicyName)
    {
        WHSWorkPolicyName ret;
        WHSWorkPolicy newWorkPolicy;

        WHSWorkPolicy existingWorkPolicy = WHSWorkPolicy::findPolicyForLocation(this);

        if (_set)
        {
            if (_workPolicyName == existingWorkPolicy.Name) // If nothing changed just return existing value
            {
                ret = existingWorkPolicy.Name;
            }
            else
            {
                if (_workPolicyName)    // If setting a value
                {
                    newWorkPolicy = WHSWorkPolicy::find(_workPolicyName);

                    if (!newWorkPolicy.RecId)   // Ensure the value being set is valid
                    {
                        warning(strFmt("@WAX:WHSWorkPolicyDoesNotExist", _workPolicyName));
                        ret = existingWorkPolicy.Name;
                    }
                    else    // Setting a new valid value
                    {
                        if (existingWorkPolicy)
                        {
                            WHSWorkPolicyLocation::changeAssociationToWorkPolicy(this, newWorkPolicy);
                        }
                        else
                        {
                            WHSWorkPolicyLocation::associateLocationToWorkPolicy(this, newWorkPolicy);
                        }

                        ret = newWorkPolicy.Name;
                    }
                }
                else    // If setting to blank
                {
                    WHSWorkPolicyLocation workPolicyLocation = WHSWorkPolicyLocation::find(this.inventLocationId, this.wMSLocationId);
                    if (workPolicyLocation.validateDelete())
                    {
                        WHSWorkPolicyLocation::removeLocationFromWorkPolicy(this);
                        ret = '';
                    }
                    else
                    {
                        ret = existingWorkPolicy.Name;
                    }
                }
            }
        }
        else // if not _set
        {
            ret = existingWorkPolicy.Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries whether any open work exists for the location.
    /// </summary>
    /// <returns>
    /// True if any open work exists for the location; else false.
    /// </returns>
    private boolean hasOpenWork()
    {
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;

        select firstOnly RecId from workLine
            where workLine.WMSLocationId    == this.wMSLocationId
               && workLine.WorkStatus       <  WHSWorkStatus::Closed
            exists join workTable
                where workTable.WorkId              == workLine.WorkId
                   && workTable.InventLocationId    == this.inventLocationId;

        return workLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenPutWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries whether any open put work exists for the location.
    /// </summary>
    /// <returns>
    /// true if any open put work exists for the location; otherwise false.
    /// </returns>
    internal boolean hasOpenPutWork()
    {
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;

        select firstOnly RecId from workLine
            where workLine.WorkType         == WHSWorkType::Put
               && workLine.WMSLocationId    == this.wMSLocationId
               && workLine.WorkStatus       <  WHSWorkStatus::Closed
            exists join workTable
                where workTable.WorkId              == workLine.WorkId
                   && workTable.InventLocationId    == this.inventLocationId;

        return workLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleLPExistsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether multiple license plates exists for an item in the same location.
    /// </summary>
    /// <param name="_itemId">
    /// The item id against which check will be done to validate whether
    /// more than one license plate exists.
    /// </param>
    /// <returns>
    /// true if multiple license plates exists; otherwise, false.
    /// </returns>
    public boolean multipleLPExistsForItem(ItemId _itemId)
    {
        InventSum inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly10 LicensePlateId from inventSum
            group by LicensePlateId
            where inventSum.InventLocationId == this.InventLocationId
                && inventSum.ClosedQty == NoYes::No
                && inventSum.wmsLocationId == this.wmsLocationId
                && inventSum.ItemId == _itemId
                && inventSum.PhysicalInvent > 0;

            WHSLicensePlateId licensePlate = inventSum.LicensePlateId;

            if (licensePlate)
            {
                next inventSum;

                if (inventSum.LicensePlateId)
                {
                    return true;
                }
            }
        }
        else
        {
            InventDim inventDim;

            select firstonly10 LicensePlateId from inventDim
            group by LicensePlateId
            where inventDim.InventLocationId == this.InventLocationId
                && inventDim.wmsLocationId == this.wmsLocationId
            exists join inventSum
            where inventSum.InventDimId == inventDim.InventDimId
                && inventSum.ClosedQty == NoYes::No
                && inventSum.ItemId == _itemId
                && inventSum.PhysicalInvent > 0;

            WHSLicensePlateId licensePlate = inventDim.LicensePlateId;

            if (licensePlate)
            {
                next inventDim;

                if (inventDim.LicensePlateId)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleItemExistsInTheSameLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether multiple items exists in the same location.
    /// </summary>
    /// <returns>
    /// true if multiple items exists; otherwise, false.
    /// </returns>
    public boolean multipleItemExistsInTheSameLocation()
    {
        InventSum inventSum;

        InventSiteId inventSiteId = InventLocation::find(this.InventLocationId).InventSiteId;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly10 ItemId from inventSum
            group by ItemId
            where inventSum.PhysicalInvent > 0
                && inventSum.ClosedQty == NoYes::No
                && inventSum.InventLocationId == this.InventLocationId
                && inventSum.wmsLocationId == this.wmsLocationId;
        }
        else
        {
            InventDim inventDim;

            select firstonly10 ItemId from inventSum
            group by ItemId
            where inventSum.PhysicalInvent > 0
                && inventSum.ClosedQty == NoYes::No
            exists join inventDim
            where inventDim.InventDimId == inventSum.InventDimId
                && inventDim.InventLocationId == this.InventLocationId
                && inventDim.wmsLocationId == this.wmsLocationId;
        }

        ItemId itemId = inventSum.ItemId;

        if (itemId)
        {
            next inventSum;

            if (inventSum.ItemId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLocationHaveOtherItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the location has physical inventory for an item that is not the given item.
    /// </summary>
    /// <param name="_itemId">The item ID to check against.</param>
    /// <returns>true if the location has physical inventory for an item that is not the given item.; otherwise, false.</returns>
    public boolean doesLocationHaveOtherItems(ItemId _itemId)
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.ItemId              != _itemId
                && inventSum.ClosedQty          == NoYes::No
                && inventSum.PhysicalInvent     != 0
                && inventSum.InventLocationId   == this.inventLocationId
                && inventSum.wmsLocationId      == this.wMSLocationId;
        }
        else
        {
            InventDim   inventDim;

            select firstonly RecId from inventSum
            where inventSum.ItemId          != _itemId
                && inventSum.ClosedQty      == NoYes::No
                && inventSum.PhysicalInvent != 0
            exists join inventDim
                where inventDim.InventDimId      == inventSum.InventDimId
                    && inventDim.InventLocationId == this.inventLocationId
                    && inventDim.wmsLocationId    == this.wMSLocationId;
        }

        return inventSum.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLocationHaveOtherBatches</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the current location has physical inventory for a batch that is not the given batch.
    /// </summary>
    /// <param name="_batchId">The batch number to check against.</param>
    /// <returns>true if the current location has physical inventory for a batch that is not the given batch; otherwise, false.</returns>
    public boolean doesLocationHaveOtherBatches(InventBatchId _batchId)
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                PdsCatchWeightItem catchWeightItem;

                select firstonly RecId from inventSum
                where inventSum.ClosedQty        == NoYes::No
                   && inventSum.PhysicalInvent   != 0
                   && inventSum.InventLocationId == this.inventLocationId
                   && inventSum.wmsLocationId    == this.wMSLocationId
                   && inventSum.InventBatchId    != ''
                   && inventSum.InventBatchId    != _batchId
                notexists join catchWeightItem
                    where catchWeightItem.ItemId == inventSum.ItemId;

                if (inventSum.RecId == 0)
                {
                    select firstonly RecId from inventSum
                    where inventSum.ClosedQty        == NoYes::No
                       && inventSum.PhysicalInvent   != 0
                       && inventSum.InventLocationId == this.inventLocationId
                       && inventSum.wmsLocationId    == this.wMSLocationId
                       && inventSum.InventBatchId    != ''
                       && inventSum.InventBatchId    != _batchId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSum.ItemId;
                }
            }
            else
            {
                select firstonly RecId from inventSum
                where inventSum.ClosedQty        == NoYes::No
                   && inventSum.PhysicalInvent   != 0
                   && inventSum.InventLocationId == this.inventLocationId
                   && inventSum.wmsLocationId    == this.wMSLocationId
                   && inventSum.InventBatchId    != ''
                   && inventSum.InventBatchId    != _batchId;
            }
        }
        else
        {
            InventDim   inventDim;

            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                PdsCatchWeightItem catchWeightItem;

                select firstonly RecId from inventSum
                where inventSum.ClosedQty      == NoYes::No
                   && inventSum.PhysicalInvent != 0
                exists join inventDim
                    where inventDim.InventDimId      == inventSum.InventDimId
                        && inventDim.InventLocationId == this.inventLocationId
                        && inventDim.wmsLocationId    == this.wMSLocationId
                        && inventDim.InventBatchId    != ''
                        && inventDim.InventBatchId    != _batchId
                    notexists join catchWeightItem
                        where catchWeightItem.ItemId == inventSum.ItemId;

                if (inventSum.RecId == 0)
                {
                    select firstonly RecId from inventSum
                    where inventSum.ClosedQty      == NoYes::No
                       && inventSum.PhysicalInvent != 0
                    exists join inventDim
                        where inventDim.InventDimId      == inventSum.InventDimId
                            && inventDim.InventLocationId == this.inventLocationId
                            && inventDim.wmsLocationId    == this.wMSLocationId
                            && inventDim.InventBatchId    != ''
                            && inventDim.InventBatchId    != _batchId
                        exists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId;
                }
            }
            else
            {
                select firstonly RecId from inventSum
                where inventSum.ClosedQty      == NoYes::No
                   && inventSum.PhysicalInvent != 0
                exists join inventDim
                    where inventDim.InventDimId      == inventSum.InventDimId
                        && inventDim.InventLocationId == this.inventLocationId
                        && inventDim.wmsLocationId    == this.wMSLocationId
                        && inventDim.InventBatchId    != ''
                        && inventDim.InventBatchId    != _batchId;
            }
        }

        return inventSum.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastCountedDateAndUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change LastCountedUTCDateTime value and update record.
    /// </summary>
    /// <param name="_lastCountedUTCDateTime">
    /// New value of LastCountedUTCDateTime field.
    /// </param>
    [Hookable(false)]
    public void updateLastCountedDateAndUpdate(WHSLastCountedUTCDateTime _lastCountedUTCDateTime)
    {
        this.LastCountedUTCDateTime = _lastCountedUTCDateTime;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplenishmentOverflowEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether replenishment overflow is enabled or not.
    /// </summary>
    /// <returns>
    /// true if replenishment overflow is enabled; otherwise, false
    /// </returns>
    [Hookable(false)]
    internal boolean isReplenishmentOverflowEnabled()
    {
        return this.whsLocationProfile().ReplenishmentExceedLocationCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockReplenishmentOverflowWorkOverCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Block work that is currently over capacity for the replenishment overflow location.
    /// </summary>
    [Hookable(false)]
    internal void blockReplenishmentOverflowWorkOverCapacity()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(tableStr(WMSLocation));

        using (var activityContext = instrumentationLogger.replenishmentActivities().blockReplenishmentOverflowWorkOverCapacity())
        {
            instrumentationLogger.logRecordInformation(this);

            int selectedWorkLines;
            int blockedWorkLines;

            WHSWorkTable    openReplenishmentWork;
            WHSWorkLine     workLine;

            while select workLine
                where workLine.WorkType == WHSWorkType::Put
                   && workLine.WMSLocationId == this.wmsLocationId
                   && workLine.WorkStatus != WHSWorkStatus::Cancelled
                   && workLine.WorkStatus != WHSWorkStatus::Combined
                   && workLine.WorkStatus != WHSWorkStatus::Closed
                exists join openReplenishmentWork
                    where openReplenishmentWork.WorkId              == workLine.WorkId
                       && openReplenishmentWork.WorkTransType       == WHSWorkTransType::Replenishment
                       && openReplenishmentWork.WorkStatus          == WHSWorkStatus::Open
                       && openReplenishmentWork.Frozen              == NoYes::No
                       && openReplenishmentWork.InventLocationId    == this.InventLocationId
            {
                instrumentationLogger.logRecordInformation(workLine);

                if (!WHSReplenishmentOverLocationCapacityValidator::newFromWorkLine(workLine).isWorkQtyWithinReplenishmentOverflowCapacity())
                {
                    WHSWorkBlocking::newFromWorkId(workLine.WorkId)
                                    .tryBlockWorkWithReasonType(WHSWorkBlockingReasonType::ExceedsReplenishmentOverflowCapacity);

                    blockedWorkLines++;
                }

                selectedWorkLines++;
            }

            instrumentationLogger.replenishmentActivities().blockedReplenishmentOverflowWorkOverCapacity(activityContext, selectedWorkLines, blockedWorkLines);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockReplenishmentOverflowWorkWithinCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unblock work that is currently within capacity for the replenishment overflow location.
    /// </summary>
    [Hookable(false)]
    internal void unblockReplenishmentOverflowWorkWithinCapacity()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(tableStr(WMSLocation));

        using (var activityContext = instrumentationLogger.replenishmentActivities().unblockReplenishmentOverflowWorkOverCapacity())
        {
            instrumentationLogger.logRecordInformation(this);

            int selectedWorkLines;
            int unblockedWorkLines;
            
            WHSWorkTable blockedReplenishmentWork;
            WHSWorkLine workLine;
            WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

            while select workLine
                where workLine.WorkType == WHSWorkType::Put
                   && workLine.WMSLocationId == this.wmsLocationId
                   && workLine.WorkStatus != WHSWorkStatus::Cancelled
                   && workLine.WorkStatus != WHSWorkStatus::Combined
                   && workLine.WorkStatus != WHSWorkStatus::Closed
                exists join blockedReplenishmentWork
                    where blockedReplenishmentWork.WorkId           == workLine.WorkId
                       && blockedReplenishmentWork.WorkTransType    == WHSWorkTransType::Replenishment
                       && blockedReplenishmentWork.WorkStatus       == WHSWorkStatus::Open
                       && blockedReplenishmentWork.Frozen           == NoYes::Yes
                       && blockedReplenishmentWork.InventLocationId == this.InventLocationId
                    exists join workBlockingReasonAssociation
                        where workBlockingReasonAssociation.WorkId      == blockedReplenishmentWork.WorkId
                           && workBlockingReasonAssociation.ReasonType  == WHSWorkBlockingReasonType::ExceedsReplenishmentOverflowCapacity
            {
                instrumentationLogger.logRecordInformation(workLine);

                if (WHSReplenishmentOverLocationCapacityValidator::newFromWorkLine(workLine).isWorkQtyWithinReplenishmentOverflowCapacity())
                {
                    WHSWorkBlocking::newFromWorkId(workLine.WorkId)
                                    .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::ExceedsReplenishmentOverflowCapacity);

                    unblockedWorkLines++;
                }

                selectedWorkLines++;
            }

            instrumentationLogger.replenishmentActivities().unblockedReplenishmentOverflowWorkOverCapacity(activityContext, selectedWorkLines, unblockedWorkLines);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WMSBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123912</DeveloperDocumentation>
	<FormRef>WHSLocationFormLauncher</FormRef>
	<Label>@SYS20394</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>wMSLocationId</TitleField1>
	<TitleField2>inventLocationId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>LocationIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LocationIdx</PrimaryIndex>
	<ReplacementKey>LocationIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WMSLocationLoad</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WMSLocationLoad</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WMSPallet</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WMSPallet</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>locationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Blocking</Name>
			<Label>@SYS50247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inputBlockingCauseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>outputBlockingCauseId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>aisleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>rack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>manualName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRAll</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRReservationPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRReservationSort</Name>
			<Label>@MCR34245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRReservationPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>checkText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>locationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inputLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PhysicalDimensions</Name>
			<Label>@SYS50219</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>absoluteHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maxWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maxVolume</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Placement</Name>
			<Label>@SYS14719</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sorting</Name>
			<Label>@SYS4138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>manualSortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHS</Name>
			<Label>@WAX13</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastCountedUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalZone1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalZone2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalZone3</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewQuery</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalZone1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalZone2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalZone3</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>absoluteHeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSAbsoluteLocationHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>aisleId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSAisleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>checkText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCheckText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inputBlockingCauseId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSBlockingCauseId</ExtendedDataType>
			<Label>@SYS50245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inputLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@SYS50250</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastCountedUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLastCountedUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>level</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLevelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>locationType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSLocationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>manualName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS50228</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>manualSortCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS50228</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>maxPalletCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMaxPalletCount</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>maxVolume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMaxVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>maxWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMaxWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MCRReservationPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>outputBlockingCauseId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSBlockingCauseId</ExtendedDataType>
			<Label>@SYS50246</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>palletTypeGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPalletTypeGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>pickingAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPickingAreaId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>position</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPositionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>rack</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRackId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>sortCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSSortCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>storeAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSInputAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>volume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ZoneId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdditionalZone1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdditionalZone1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdditionalZone2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdditionalZone2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdditionalZone3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdditionalZone3</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>inventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CoordinateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>inventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>aisleId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>rack</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>level</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>position</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StoreAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>storeAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>aisleId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>rack</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>level</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>position</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>locationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>freeLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WMSPallet</ConfigurationKey>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>inventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>locationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>storeAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inputBlockingCauseId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>palletTypeGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>height</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>maxPalletCount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CheckTextIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>checkText</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ZoneIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ZoneId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdditionalZone1Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AdditionalZone1</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdditionalZone2Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AdditionalZone2</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdditionalZone3Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AdditionalZone3</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InputArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSStoreArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InputArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSLocation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeAreaId</Name>
					<Field>storeAreaId</Field>
					<RelatedField>storeAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>storeAreaType_Extern</Name>
					<RelatedField>storeAreaType</RelatedField>
					<ValueStr>WMSStoreAreaType::Input</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreAreaIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InputBlockingCause</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WMSBlockingCause</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InputBlockingCause</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inputBlockingCauseId</Name>
					<SourceEDT>WMSBlockingCauseId</SourceEDT>
					<Field>inputBlockingCauseId</Field>
					<RelatedField>blockingCauseId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CauseIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InputLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123913</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InputLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inputLocation</Name>
					<Field>inputLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutputBlockingCause</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WMSBlockingCause</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OutputBlockingCause</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>outputBlockingCauseId</Name>
					<SourceEDT>WMSBlockingCauseId</SourceEDT>
					<Field>outputBlockingCauseId</Field>
					<RelatedField>blockingCauseId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CauseIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PickingArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WMSStoreArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PickingArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>pickingAreaId</Name>
					<SourceEDT>WMSPickingAreaId</SourceEDT>
					<Field>pickingAreaId</Field>
					<RelatedField>storeAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>storeAreaType_Extern</Name>
					<SourceEDT>WMSPickingAreaId</SourceEDT>
					<RelatedField>storeAreaType</RelatedField>
					<ValueStr>WMSStoreAreaType::Pick</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreAreaIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLocationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocProfileId</Name>
					<SourceEDT>WHSLocProfileId</SourceEDT>
					<Field>LocProfileId</Field>
					<RelatedField>LocProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSZone</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSZone</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ZoneId</Name>
					<SourceEDT>WHSZoneId</SourceEDT>
					<Field>ZoneId</Field>
					<RelatedField>ZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSAisle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123896</EntityRelationshipRole>
			<RelatedTable>WMSAisle</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>aisleId</Name>
					<Field>aisleId</Field>
					<RelatedField>aisleId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<EntityRelationshipRole>@SYS123914</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>wMSLocationId</Name>
					<Field>wMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSPalletTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSPalletTypeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>palletTypeGroupId</Name>
					<Field>palletTypeGroupId</Field>
					<RelatedField>palletTypeGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PalletTypeGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSStoreZoneArea</Name>
			<EntityRelationshipRole>@SYS123915</EntityRelationshipRole>
			<RelatedTable>WMSStoreZoneArea</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeAreaId</Name>
					<Field>storeAreaId</Field>
					<RelatedField>storeAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocationStatus</Name>
			<RelatedTable>WMSLocationStatus</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>wMSLocationId</Name>
					<Field>wMSLocationId</Field>
					<RelatedField>WMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AdditionalZone1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSZone</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WHSAdditionalZone1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdditionalZone1</Name>
					<Field>AdditionalZone1</Field>
					<RelatedField>ZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AdditionalZone2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSZone</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WHSAdditionalZone2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdditionalZone2</Name>
					<Field>AdditionalZone2</Field>
					<RelatedField>ZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AdditionalZone3</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSZone</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WHSAdditionalZone3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdditionalZone3</Name>
					<Field>AdditionalZone3</Field>
					<RelatedField>ZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>