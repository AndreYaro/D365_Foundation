<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineCalculatedTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationLineCalculatedTotals extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateForSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate line totals for a sales Quotation line. If a <c>SalesQuotationLineCalculatedTotals</c> record is existing, then it is updated.
    /// If one is not existing, then it is created.
    /// </summary>
    /// <param name = "_inventTransId">
    /// <c>InventTransId</c> of the sales quotation line for which total should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Update timestamp that should be marked on the record.
    /// </param>
    /// <returns>
    /// <c>SalesQuotationLineCalculatedTotals</c> record to containing the calculated totals.
    /// </returns>
    public static SalesQuotationLineCalculatedTotals calculateForSalesQuotationLine(InventTransId _inventTransId, utcdatetime _updateDateTime)
    {
        using (SysInstrumentationActivityContext activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(tableStr(SalesQuotationLineCalculatedTotals)).salesTotalsCalculateActivities().calculateForSalesQuotationLine())
        {
            ttsbegin;

            SalesQuotationLineCalculatedTotals orderquotationLineTotals = SalesQuotationLineCalculatedTotals::find(_inventTransId, true);
        
            SalesQuotationLine quotationLine = SalesQuotationLine::findInventTransId(_inventTransId);

            using (McrPriceHistoryLineSkipCalcPotentialContext context = McrPriceHistoryLineSkipCalcPotentialContext::construct())
            {
                McrPriceHistoryForm priceHistory = McrPriceHistoryForm::construct(quotationLine);
                orderquotationLineTotals.TotalDiscountAmount = priceHistory.getUnitPriceExtendedAmount() - priceHistory.getDiscAmountExtendedAmount() + priceHistory.getMultilineDiscPercentageNet();
            }
        
            SalesQuotationTotals quotationTotals;

            if (SalesQuotationLineCalculatedTotalsContextFlight::instance().isEnabled())
            {
                SalesQuotationLineCalculatedTotalsContext context = SalesQuotationLineCalculatedTotalsContext::current();

                if (context == null)
                {
                    quotationTotals = SalesQuotationTotals::construct(SalesQuotationTable::find(quotationLine.QuotationId));
                }
                else
                {
                    if (context.salesQuotationTotals == null || context.quotationId != quotationLine.QuotationId)
                    {
                        context.quotationId = quotationLine.QuotationId;
                        context.salesQuotationTotals = SalesQuotationTotals::construct(SalesQuotationTable::find(quotationLine.QuotationId));
                    }

                    quotationTotals = context.salesQuotationTotals;
                }
            }
            else
            {
                quotationTotals = SalesQuotationTotals::construct(SalesQuotationTable::find(quotationLine.QuotationId));
            }

            quotationTotals.calc();
        
            Tax tax = quotationTotals.tax();
            tax.sourceSingleLine(true, true);
            orderquotationLineTotals.TotalTaxAmount = Tax.totalTaxAmountSingleLine(tableNum(SalesQuotationLine), quotationLine.RecId);
            orderquotationLineTotals.TotalChargesAmount = quotationTotals.lineMarkupTotalAmount(quotationLine.RecId);
            orderquotationLineTotals.LastUpdatedDateTime = _updateDateTime;

            if (orderquotationLineTotals.RecId)
            {
                orderquotationLineTotals.update();
            }
            else
            {
                orderquotationLineTotals.QuotationId = quotationLine.QuotationId;
                orderquotationLineTotals.InventTransId = _inventTransId;
                orderquotationLineTotals.insert();
            }

            ttscommit;

            activityContext.addCustomProperty(tableStr(SalesQuotationLine), int642Str(quotationLine.RecId));

            return orderquotationLineTotals;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForSalesQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate line totals for all lines in a sales quotation. If a <c>SalesQuotationLineCalculatedTotals</c> record is existing, then it is updated.
    /// If one is not existing, then it is created.
    /// </summary>
    /// <param name = "_quotationId">
    /// <c>QuotationIdBase</c> of the sales quotation for which total should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Update timestamp that should be marked on the record.
    /// </param>
    public static void calculateForSalesQuotation(QuotationIdBase _quotationId, utcdatetime _updateDateTime)
    {
        using (SysInstrumentationActivityContext activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(tableStr(SalesQuotationLineCalculatedTotals)).salesTotalsCalculateActivities().calculateForSalesQuotation())
        {
            SalesQuotationLine salesQuotationLine;

            while select salesQuotationLine
                where salesQuotationLine.QuotationId == _quotationId
            {
                SalesQuotationLineCalculatedTotals::calculateForSalesQuotationLine(salesQuotationLine.InventTransId, _updateDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesQuotationLineCalculatedTotals find(InventTransId _inventTransId, boolean _forUpdate = false)
    {
        SalesQuotationLineCalculatedTotals quotationLineTotals;

        quotationLineTotals.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly quotationLineTotals
                where quotationLineTotals.InventTransId == _inventTransId;
        }

        return quotationLineTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Clear the LastUpdatedDateTime on the SalesQuotationCalculatedTotals record so that it is recalculated in the next run.
        this.clearSalesQuotationTotalsUpdatedDate();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSalesQuotationTotalsUpdatedDate</Name>
				<Source><![CDATA[
    private void clearSalesQuotationTotalsUpdatedDate()
    {
        ttsbegin;

        SalesQuotationCalculatedTotals quotationTotals = SalesQuotationCalculatedTotals::find(this.QuotationId, true);
        
        if (quotationTotals.LastUpdatedDateTime > DateTimeUtil::minValue())
        {
            quotationTotals.LastUpdatedDateTime = DateTimeUtil::minValue();
            quotationTotals.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesQuotationLineCalculatedTotalsDevDoc</DeveloperDocumentation>
	<Label>@SCM:SalesQuotationLineCalculatedTotals</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>QuotationId</TitleField1>
	<TitleField2>InventTransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>InventTransIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
			<Label>@RET3621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalChargesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalMarkupAmount</ExtendedDataType>
			<Label>@SYS11466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalTaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastUpdatedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTotalsLastUpdatedDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesQuotationLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>