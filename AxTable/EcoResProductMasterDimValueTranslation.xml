<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMasterDimValueTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductMasterDimValueTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMaintainTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the conditions for when the product translation record can be additionally maintained.
    /// </summary>
    /// <returns>
    /// true when the product translation record can be additionally maintained; otherwise, false.
    /// </returns>
    public boolean canMaintainTranslation()
    {
        return this.Name || this.Description || this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the product translation record.
    /// </summary>
    /// <param name="_productMasterDimValue">
    /// The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_name">
    /// The specified product name value.
    /// </param>
    /// <param name="_description">
    /// The specified product description value.
    /// </param>
    /// <param name="_languageId">
    /// The specified <c>LanguageId</c> value.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The product name and description value has not been passed.
    /// </exception>
    public static void createOrUpdateTranslation(
        EcoResProductMasterDimensionValueId _productMasterDimValue,
        Name                                _name,
        EcoResDescription                   _description,
        LanguageId                          _languageId = SystemParameters::getSystemLanguageId())
    {
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        if (!_description && !_name)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        productMasterDimValueTranslation = EcoResProductMasterDimValueTranslation::findByProductMasterDimValLanguage(_productMasterDimValue, _languageId, true);

        if (productMasterDimValueTranslation.RecId)
        {
            productMasterDimValueTranslation.Name           =   _name;
            productMasterDimValueTranslation.Description    =   _description;

            if (productMasterDimValueTranslation.validateWrite())
            {
                productMasterDimValueTranslation.update();
            }
        }
        else
        {
            productMasterDimValueTranslation.ProductMasterDimensionValue    = _productMasterDimValue;
            productMasterDimValueTranslation.Name                           = _name;
            productMasterDimValueTranslation.Description                    = _description;
            productMasterDimValueTranslation.LanguageId                     = _languageId;

            if (productMasterDimValueTranslation.validateWrite())
            {
                productMasterDimValueTranslation.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProdMasDimValOrSystemLanguage</Name>
				<Source><![CDATA[
    private static EcoResProductMasterDimValueTranslation findByProdMasDimValOrSystemLanguage(
        EcoResProductMasterDimensionValueId _productMasterDimensionValue,
        LanguageId                          _languageId,
        FieldId                             _translationFieldId)
    {
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;
        LanguageId                              systemLanguageId;

        productMasterDimValueTranslation = EcoResProductMasterDimValueTranslation::findByProductMasterDimValLanguage(
            _productMasterDimensionValue, _languageId);

        //no translation record or no value provided - fallback to system language
        if (!productMasterDimValueTranslation.RecId || !productMasterDimValueTranslation.(_translationFieldId))
        {
            systemLanguageId = SystemParameters::getSystemLanguageId();
            if (systemLanguageId != _languageId)
            {
                productMasterDimValueTranslation = EcoResProductMasterDimValueTranslation::findByProductMasterDimValLanguage(
                    _productMasterDimensionValue, systemLanguageId);
            }
        }

        return productMasterDimValueTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductMasterDimValLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProductMasterDimValueTranslation</c> table by using the specified
    ///    product language.
    /// </summary>
    /// <param name="_productMasterDimensionValue">
    ///    The ID of the <c>EcoResProductMasterDimensionValue</c> record to use as a filter.
    /// </param>
    /// <param name="_languageId">
    ///    A language ID to use as a filter.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProductMasterDimValueTranslation</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResProductMasterDimValueTranslation findByProductMasterDimValLanguage(
        EcoResProductMasterDimensionValueId _productMasterDimensionValue,
        LanguageId                          _languageId,
        boolean                             _forUpdate = false)
    {
        EcoResProductMasterDimValueTranslation productMasterDimValueTranslation;

        productMasterDimValueTranslation.selectForUpdate(_forUpdate);

        if (_productMasterDimensionValue && _languageId)
        {
            select firstonly productMasterDimValueTranslation
                where productMasterDimValueTranslation.ProductMasterDimensionValue  == _productMasterDimensionValue
                   && productMasterDimValueTranslation.LanguageId                   == _languageId;
        }
        return productMasterDimValueTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescriptionOrDefaultDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description of a product.
    /// </summary>
    /// <param name="_productMasterDimensionValue">
    ///    The ID of a product Master Dimension for which a description is retrieved.
    /// </param>
    /// <param name="_languageId">
    ///    The ID of a language in which a name is retrieved.
    /// </param>
    /// <returns>
    ///    A description of a product.
    /// </returns>
    /// <remarks>
    ///    If a description in the language specified by the <c>_languageId</c> parameter is not found
    ///    then a description in the system language is returned.
    /// </remarks>
    public static Name getDescriptionOrDefaultDescription(
        EcoResProductMasterDimensionValueId _productMasterDimensionValue,
        LanguageId                          _languageId)
    {
        EcoResDescription                       ret;
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        productMasterDimValueTranslation = EcoResProductMasterDimValueTranslation::findByProdMasDimValOrSystemLanguage(
            _productMasterDimensionValue, _languageId, fieldNum(EcoResProductMasterDimValueTranslation, Description));

        if (productMasterDimValueTranslation.RecId)
        {
            ret = productMasterDimValueTranslation.Description;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfLanguageIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a list of language IDs used in the table <c>EcoResProductMasterDimValueTranslation</c>.
    /// </summary>
    /// <returns>
    ///     A list of language IDs.
    /// </returns>
    public static List getListOfLanguageIds()
    {
        Query       query;
        QueryRun    languageListQueryRun;
        List        LanguageList        = new List(Types::String);
        TableId     translationTableId  = tableNum(EcoResProductMasterDimValueTranslation);
        FieldId     languageFieldId     = fieldNum(EcoResProductMasterDimValueTranslation,languageId);

        //query to fetch data from translation table
        query = new Query();
        query.addDataSource(translationTableId);
        query.dataSourceTable(translationTableId).clearRanges();
        query.dataSourceTable(translationTableId).addSortField(languageFieldId);
        query.dataSourceTable(translationTableId).addGroupByField(languageFieldId);
        languageListQueryRun = new QueryRun(query);

        //Loop through all translations
        while (languageListQueryRun.next())
        {
            LanguageList.addEnd(languageListQueryRun.get(translationTableId).(languageFieldId));
        }

        return LanguageList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameOrDefaultName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of a product.
    /// </summary>
    /// <param name="_productMasterDimensionValue">
    ///    The ID of a product Master Dimension for which a name is retrieved.
    /// </param>
    /// <param name="_languageId">
    ///    The ID of a language in which a name is retrieved.
    /// </param>
    /// <returns>
    ///    A name of a product.
    /// </returns>
    /// <remarks>
    ///    If a name in the language specified by the <c>_languageId</c> parameter is not found then a name in
    ///    the system language is returned.
    /// </remarks>
    public static Name getNameOrDefaultName(
        EcoResProductMasterDimensionValueId _productMasterDimensionValue,
        LanguageId                          _languageId)
    {
        Name    ret;
        EcoResProductMasterDimValueTranslation productMasterDimValueTranslation;

        productMasterDimValueTranslation = EcoResProductMasterDimValueTranslation::findByProdMasDimValOrSystemLanguage(
            _productMasterDimensionValue, _languageId, fieldNum(EcoResProductMasterDimValueTranslation, Name));

        if (productMasterDimValueTranslation.RecId)
        {
            ret = productMasterDimValueTranslation.Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOfLanguageIdsForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a Set of language IDs used in the table <c>EcoResProductMasterDimValueTranslation</c>
    ///     for product dimension values for a product master.
    /// </summary>
    /// <param name="_productMaster">
    ///     The product master for which to find the language ids of its' product dimension values.
    /// </param>
    /// <returns>
    ///     A Set of language IDs.
    /// </returns>
    public static Set getSetOfLanguageIdsForProductMaster(EcoResProductMasterRecId _productMaster)
    {
        EcoResProductMasterDimValueTranslation  ecoResProductMasterDimValueTranslation;
        EcoResProductMasterConfiguration        ecoResProductMasterConfiguration;
        EcoResProductMasterStyle                ecoResProductMasterStyle;
        EcoResProductMasterColor                ecoResProductMasterColor;
        EcoResProductMasterSize                 ecoResProductMasterSize;
        Set                                     languageSet = new Set(Types::String);

        while select LanguageId from ecoResProductMasterDimValueTranslation
            exists join * from ecoResProductMasterColor
                where ecoResProductMasterColor.RecId                == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue &&
                      ecoResProductMasterColor.ColorProductMaster   == _productMaster
        {
            languageSet.add(ecoResProductMasterDimValueTranslation.LanguageId);
        }

        while select LanguageId from ecoResProductMasterDimValueTranslation
            exists join * from ecoResProductMasterSize
                where ecoResProductMasterSize.RecId             == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue &&
                      ecoResProductMasterSize.SizeProductMaster == _productMaster
        {
            languageSet.add(ecoResProductMasterDimValueTranslation.LanguageId);
        }

        while select LanguageId from ecoResProductMasterDimValueTranslation
            exists join * from ecoResProductMasterStyle
                where ecoResProductMasterStyle.RecId                == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue &&
                      ecoResProductMasterStyle.StyleProductMaster   == _productMaster
        {
            languageSet.add(ecoResProductMasterDimValueTranslation.LanguageId);
        }

        while select LanguageId from ecoResProductMasterDimValueTranslation
            exists join * from ecoResProductMasterConfiguration
                where ecoResProductMasterConfiguration.RecId                == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue &&
                      ecoResProductMasterConfiguration.ConfigProductMaster  == _productMaster
        {
            languageSet.add(ecoResProductMasterDimValueTranslation.LanguageId);
        }

        return languageSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS4001442</DeveloperDocumentation>
	<Label>@SYS4001441</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProductMasterDimensionValue</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProductMasterDimValueLanguageIDx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductMasterDimValueLanguageIDx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMasterDimensionValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMasterDimensionValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMasterDimensionValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultTranslation</Name>
			<Label>@SYS21154</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductMasterDimensionValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductMasterDimensionValueId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductMasterDimValueLanguageIDx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductMasterDimensionValue</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductMasterDimValueNameRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductMasterDimensionValue</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductMasterDimensionValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProductMasterDimensionValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProductMasterDimensionValue</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>#EcoResProductMasterDimensionValue_EcoResProductMasterDimValueTranslation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductMasterDimensionValue</Name>
					<Field>ProductMasterDimensionValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LanguageTable_EcoResProductMasterDimValueTranslation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>