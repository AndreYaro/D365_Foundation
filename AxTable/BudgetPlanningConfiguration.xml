<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        throw error("@SYS23721");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.UseBudgetPlanningUserGroups = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // update attachments based on the new configuration
        BudgetPlanLoadAttachment::budgetPlanningConfigurationModified(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>BudgetPlanningConfiguration</c> record exists for the current company.
    /// </summary>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist()
    {
        return (select firstonly RecId from BudgetPlanningConfiguration).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>BudgetPlanningConfiguration</c> record exists for the specified Legal entity.
    /// </summary>
    /// <param name="_legalEntity">
    /// The Legal entity identifier.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existForLegalEntity(SelectableDataArea _legalEntity)
    {
        boolean recordExists;

        changeCompany(_legalEntity)
        {
            recordExists = BudgetPlanningConfiguration::exist();
        }

        return recordExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>BudgetPlanningConfiguration</c> table associated with the current company.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningConfiguration find(boolean _forupdate = false)
    {
        BudgetPlanningConfiguration budgetPlanningConfiguration;

        if (_forupdate)
        {
            budgetPlanningConfiguration.selectForUpdate(_forupdate);
        }

        select firstonly budgetPlanningConfiguration
            index KeyIdx
            where budgetPlanningConfiguration.Key == 0;

        if (!budgetPlanningConfiguration && !budgetPlanningConfiguration.isTmp())
        {
            Company::createParameter(budgetPlanningConfiguration);
        }

        return budgetPlanningConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>BudgetPlanningConfiguration</c> table associated with the specified Legal entity.
    /// </summary>
    /// <param name="_legalEntity">
    /// The Legal entity identifier.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningConfiguration findByLegalEntity(SelectableDataArea _legalEntity, boolean _forupdate = false)
    {
        BudgetPlanningConfiguration budgetPlanningConfiguration;

        changeCompany(_legalEntity)
        {
            budgetPlanningConfiguration = BudgetPlanningConfiguration::find(_forupdate);
        }

        return budgetPlanningConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127667";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4008540</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationParameters</FormRef>
	<Label>@GLS70127</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>dataAreaId</TitleField1>
	<TitleField2>UseBudgetPlanningUserGroups</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseBudgetPlanningUserGroups</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExcelWorkbooks</Name>
			<Label>@SYS4008541</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Security</Name>
			<Label>@SYS4008542</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseBudgetPlanningUserGroups</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecurityModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseBudgetPlanningUserGroups</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4008533</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SecurityModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetPlanningSecurityModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCurrencyConversion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:DoNotConvertCurrencyInAggregationLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchy</Name>
					<Field>DimensionHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>