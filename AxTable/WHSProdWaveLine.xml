<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProdWaveLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSProdWaveLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWHSProdBomPool</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initialize record from a WHSProdBOMPool record.
	/// </summary>
	/// <param name="_prodBomPool">
	/// The WHSProdBOMPool record to be used to initialize.
	/// </param>
    void initFromWHSProdBomPool(WHSProdBOMPool _prodBomPool)
    {
        this.InventTransId      = _prodBomPool.InventTransId;
        this.ItemId             = _prodBomPool.ItemId;
        this.ProdId             = _prodBomPool.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (WHSWaveTable::find(this.WaveId).inBatch())
        {
            ret = checkFailed("@WAX3219");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWaveIdAndProdBomPool</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a WHSProdWaveLine record from wave id and production bom pool.
	/// </summary>
	/// <param name="_waveId">
	/// Id of the wave.
	/// </param>
	/// <param name="_prodBomPool">
	/// WHSProdBOMPool record to be used.
	/// </param>
	/// <param name="_showError">
	/// Boolean value indicates that errors are shown in infolog.
	/// </param>
    public static void createFromWaveIdAndProdBomPool(WHSWaveId _waveId, WHSProdBOMPool _prodBomPool, boolean _showError = false)
    {
        WHSProdWaveLine::createFromWaveIdAndProdBomPoolUsingLock(_waveId, _prodBomPool, _showError);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWaveIdAndProdBomPoolUsingLock</Name>
				<Source><![CDATA[
    private static void createFromWaveIdAndProdBomPoolUsingLock(
        WHSWaveId _waveId,
        WHSProdBOMPool _prodBomPool,
        boolean _showError)
    {
        using (var waveLockManager = WHSWaveLockManager::newStandard())
        {
            if (waveLockManager.tryLockForProdWaveLineCreation(_prodBomPool.InventTransId, 0))
            {
                WHSProdWaveLine::createFromWaveIdAndProdBomPoolInternal(_waveId, _prodBomPool, _showError);

                waveLockManager.releaseForProdWaveLineCreation(_prodBomPool.InventTransId);
            }
            else
            {
                throw error(strFmt("@WAX:ProdWaveLineCreationLockFailureError", _prodBomPool.InventTransId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWaveIdAndProdBomPoolInternal</Name>
				<Source><![CDATA[
    private static void createFromWaveIdAndProdBomPoolInternal(
        WHSWaveId _waveId, 
        WHSProdBOMPool _prodBomPool, 
        boolean _showError)
    {
        WHSProdWaveLine     prodWaveLine;
        WHSWaveTable        waveTable;
        InventDim           inventDim;

        select firstonly prodWaveLine
            join waveTable
            where prodWaveLine.WaveId           == waveTable.WaveId          &&
                  prodWaveLine.InventTransId    == _prodBomPool.InventTransId   &&
                  (prodWaveLine.WaveId          == _waveId                      ||
                  waveTable.WaveStatus          <  WHSWaveStatus::Held);

        if (!prodWaveLine.RecId)
        {
            if (WHSWaveTemplateTable::validateWaveTemplate(WHSWaveTemplateType::Production,WHSWaveTable::find(_waveId),_prodBomPool.InventTransId,_showError))
            {
                ttsbegin;

                inventDim = InventDim::find(_prodBomPool.InventDimId);

                prodWaveLine.WaveId   = _waveId;
                prodWaveLine.initFromWHSProdBomPool(_prodBomPool);
                prodWaveLine.insert();

                waveTable.clear();

                waveTable = WHSWaveTable::find(_waveId, true);
                if (waveTable.RecId)
                {
                    waveTable.InventSiteId      = inventDim.InventSiteId;
                    waveTable.InventLocationId  = inventDim.InventLocationId;
                    waveTable.update();
                }

                ttscommit;
            }
        }
        else if (_showError)
        {
            warning(strFmt("@WAX3308", _prodBomPool.InventTransId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>whsProdWaveLine</c> record exists.
	/// </summary>
	/// <param name="_waveId">
	/// Wave id of the record.
	/// </param>
	/// <param name="_inventTransId">
	/// Inventory transaction id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    static boolean exist(WHSWaveId _waveId, InventTransId _inventTransId)
    {
        return _waveId && _inventTransId &&
            (select firstonly RecId from whsProdWaveLine
                 where whsProdWaveLine.WaveId           == _waveId &&
                       whsProdWaveLine.InventTransId    == _inventTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpenWaveIdForInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the open wave ID for the given inventory transaction ID.
    /// </summary>
    /// <param name="_inventTransId">
    /// Inventory transaction id of the record.
    /// </param>
    /// <returns>
    /// The wave ID of the open wave tied to the transaction if one exists; otherwise, blank.
    /// </returns>
    public static WHSWaveId getOpenWaveIdForInventTransId(InventTransId _inventTransId)
    {
        WHSProdWaveLine whsProdWaveLine;

        if (_inventTransId)
        {
            WHSWaveTable whsWaveTable;
            
            select firstonly WaveId from whsProdWaveLine
                where whsProdWaveLine.InventTransId == _inventTransId
                exists join whsWaveTable
                    where whsWaveTable.WaveId      == whsProdWaveLine.WaveId
                       && (whsWaveTable.WaveStatus == WHSWaveStatus::Created
                       ||  whsWaveTable.WaveStatus == WHSWaveStatus::Executing);
        }

        return whsProdWaveLine.WaveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSProdWaveLine</c> record with given parameters.
	/// </summary>
	/// <param name="_waveId">
	/// Wave id of the record.
	/// </param>
	/// <param name="_inventTransId">
	/// Inventory transaction id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSProdWaveLine find(WHSWaveId        _waveId,
                                       InventTransId    _inventTransId,
                                       boolean          _forupdate = false)
    {
        WHSProdWaveLine    prodWaveLine;

        if (_waveId && _inventTransId)
        {
            prodWaveLine.selectForUpdate(_forupdate);

            select firstonly prodWaveLine
                where prodWaveLine.WaveId           == _waveId      &&
                      prodWaveLine.InventTransId    == _inventTransId;
        }

        return prodWaveLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4420</DeveloperDocumentation>
	<Label>@WAX3298</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WaveIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WaveIdInventTransIdIdx</PrimaryIndex>
	<ReplacementKey>WaveIdInventTransIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WaveIdInventTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WaveIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSProdBOMPoll</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSProdBOMPool</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveId</Name>
					<SourceEDT>WHSWaveId</SourceEDT>
					<Field>WaveId</Field>
					<RelatedField>WaveId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>