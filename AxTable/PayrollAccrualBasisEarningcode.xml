<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollAccrualBasisEarningcode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollAccrualBasisEarningcode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.EarningCode == 0 && this.EarningCodeGroup == 0)
        {
            ret = checkFailed("@Payroll:EitherAnEarningCodeOrAnEarningCodeGroupIsRequiredSelectOneTh");
        }

        // Verify that only Compensatory Accrual methods have a AccrualRate value... This column is hidden for Hourly types and is not requried and we should not throw a zero value message.
        if (PayrollAccrual::isCompensatoryAccuralBasisType(this.Accrual) && this.AccrualRate <= 0)
        {
            ret = checkFailed("@Payroll:TheAccrualRateForCompensatoryTimeMustBeGreaterThanZero");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualBasisEarningCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollAccrualEarningCodeRecId _recId)
    {
        boolean ret = true;

        if (!PayrollAccrualBasisEarningCode::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollAccrualBasisEarningCode::txtNotExist(), tableId2name(tableNum(PayrollAccrualBasisEarningCode))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualBasisEarningCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollAccrualEarningCodeRecId _recId)
    {
        return _recId && (select firstonly RecId from PayrollAccrualBasisEarningCode
                    where PayrollAccrualBasisEarningCode.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCompensatoryAccrualBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>AccrualMethod</c> field value on <c>PayrollEarningCode</c> table
    /// is set to Compensatory
    /// </summary>
    /// <param name="_payrollAccrualRecId">
    /// The accrual code to check
    /// </param>
    /// <returns>
    /// true if the is compensatory; otherwise, false.
    /// </returns>
    public static boolean existByCompensatoryAccrualBasis(PayrollAccrualRecId _payrollAccrualRecId)
    {
        boolean ret;

        ret = (select firstonly RecId from payrollAccrual
                where payrollAccrual.AccrualMethod == PayrollAccrualMethod::Compensatory
                && payrollAccrual.RecId == _payrollAccrualRecId).RecId != 0 ;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByEarningCodeAccural</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualBasisEarningCode</c> table.
    /// </summary>
    /// <param name="_earningCodeRecId">
    /// The value of the Earning Cod Rec ID to check.
    /// </param>
    /// <param name="_accuralRecId">
    /// The value of the Accrual Code Rec ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean existByEarningCodeAccural(PayrollEarningCodeRecId _earningCodeRecId, PayrollAccrualRecId _accuralRecId)
    {
        return _earningCodeRecId && _accuralRecId && (select firstonly RecId from PayrollAccrualBasisEarningCode
                    where PayrollAccrualBasisEarningCode.Accrual == _accuralRecId
                    && PayrollAccrualBasisEarningCode.EarningCode == _earningCodeRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualBasisEarningCode</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualPlanEarningcode</c> table.
    /// </returns>
    public static PayrollAccrualBasisEarningCode find(
    PayrollAccrualEarningCodeRecId          _recId,
    boolean                                 _forUpdate          = false,
    ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualBasisEarningCode payrollAccrualBasisEarningCode;

        payrollAccrualBasisEarningCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualBasisEarningCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualBasisEarningCode
             where payrollAccrualBasisEarningCode.RecId == _recId;

        return payrollAccrualBasisEarningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccrualEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualBasisEarningCode</c> table based on supplied values of the <c>Accrual</c> and <c>EarningCode</c> fields.
    /// </summary>
    /// <param name="_accrual">
    /// The value of the <c>accrual</c> field to find.
    /// </param>
    /// <param name="_earningCode">
    /// The value of the <c>EarningCode</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualEarningCode</c> table.
    /// </returns>
    public static PayrollAccrualBasisEarningCode findByAccrualEarningCode(
    PayrollAccrualRecId         _accrual,
    PayrollEarningCodeRecId     _earningCode,
    boolean                     _forUpdate          = false,
    ConcurrencyModel            _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualBasisEarningCode payrollAccrualBasisEarningCode;

        payrollAccrualBasisEarningCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualBasisEarningCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualBasisEarningCode
            where payrollAccrualBasisEarningCode.Accrual == _accrual &&
                    payrollAccrualBasisEarningCode.EarningCode == _earningCode;

        return payrollAccrualBasisEarningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompensatoryAccrualBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>AccrualMethod</c> field value on <c>PayrollEarningCode</c> table
    /// is set to Compensatory
    /// </summary>
    /// <param name="_payrollAccrualRecId">
    /// The accrual code to check
    /// </param>
    /// <returns>
    /// true if the is compensatory; otherwise, false.
    /// </returns>
    public static boolean isCompensatoryAccrualBasis(PayrollAccrualRecId _payrollAccrualRecId)
    {
        boolean ret;

        ret = (select firstonly RecId from payrollAccrual
                where payrollAccrual.AccrualMethod == PayrollAccrualMethod::Compensatory
                && payrollAccrual.RecId == _payrollAccrualRecId).RecId != 0 ;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollaccrualbasisearningcodeTableStoresACollectionOfEar</DeveloperDocumentation>
	<Label>@Payroll:AccrualBasisEarnings</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Accrual</TitleField1>
	<TitleField2>EarningCode</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Payroll</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccuralType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCodeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Accrual</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccrualRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualCompensatoryRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccuralType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:EarningType1</Label>
			<EnumType>PayrollAccrualType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCodeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeGroupRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollAccuralEarningCodeEarningCodegIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Accrual</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EarningCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EarningCodeGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollAccrual</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Accrual</Name>
					<Field>Accrual</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollEarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollEarningCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEntitlementPlanEarningCode</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCode</Name>
					<Field>EarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollEarningCodeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollEarningCodeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollEarningCodeGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEntitlementPlanEarningCode</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCodeGroup</Name>
					<Field>EarningCodeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>