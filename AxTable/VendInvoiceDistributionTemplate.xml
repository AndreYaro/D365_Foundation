<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceDistributionTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceDistributionTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDistributionLineTotalAmount</Name>
				<Source><![CDATA[
    public display AmountCur displayDistributionLineTotalAmount(VendInvoiceDistributionTemplate _vendInvoiceDistributionTemplate)
    {
        return VendInvoiceDistributionTemplate::sumDistributionLineAmount(_vendInvoiceDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDistributionLineTotalPercentage</Name>
				<Source><![CDATA[
    public display Percent displayDistributionLineTotalPercentage(VendInvoiceDistributionTemplate _vendInvoiceDistributionTemplate)
    {
        return VendInvoiceDistributionTemplate::sumDistributionLinePercentage(_vendInvoiceDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        VendInvoiceTemplate vendInvoiceTemplate;
        VendInvoiceLineTemplate vendInvoiceLineTemplate;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendInvoiceDistributionTemplate, Percentage):
                vendInvoiceLineTemplate = VendInvoiceLineTemplate::find(this.VendInvoiceLineTemplate);
                vendInvoiceTemplate = VendInvoiceTemplate::find(vendInvoiceLineTemplate.VendInvoiceTemplate);
                this.AmountCur = CurrencyExchange::round(((this.Percentage / 100) * vendInvoiceLineTemplate.AmountCur), vendInvoiceTemplate.CurrencyCode);
                break;

            case fieldNum(VendInvoiceDistributionTemplate, AmountCur):
                vendInvoiceLineTemplate = VendInvoiceLineTemplate::find(this.VendInvoiceLineTemplate);

                if (VendInvoiceLineTemplate.AmountCur != 0.0)
                {
                    this.Percentage = (this.AmountCur / vendInvoiceLineTemplate.AmountCur) * 100;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        Percent linePercentage, totalPercentage;
        AmountCur lineAmount, totalAmount;
        VendInvoiceTemplate vendInvoiceTemplate;
        VendInvoiceLineTemplate vendInvoiceLineTemplate;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendInvoiceDistributionTemplate, Percentage):

                    vendInvoiceLineTemplate = VendInvoiceLineTemplate::find(this.VendInvoiceLineTemplate);
                    if (vendInvoiceLineTemplate.AmountCur != 0.0)
                    {
                        vendInvoiceTemplate = VendInvoiceTemplate::find(vendInvoiceLineTemplate.VendInvoiceTemplate);
                        lineAmount = CurrencyExchange::round(((this.Percentage / 100) * vendInvoiceLineTemplate.AmountCur), vendInvoiceTemplate.CurrencyCode);

                        totalAmount = (select sum(AmountCur) from vendInvoiceDistributionTemplate
                                            where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == vendInvoiceLineTemplate.RecId
                                                && vendInvoiceDistributionTemplate.RecId != this.RecId ).AmountCur;

                        totalAmount += lineAmount;

                        if (totalAmount <= vendInvoiceLineTemplate.AmountCur)
                        {
                            this.AmountCur = lineAmount;
                        }
                    }
                    break;

                case fieldNum(VendInvoiceDistributionTemplate, AmountCur):
                    vendInvoiceLineTemplate = VendInvoiceLineTemplate::find(this.VendInvoiceLineTemplate);

                    if (VendInvoiceLineTemplate.AmountCur != 0.0)
                    {
                        linePercentage = (this.AmountCur / vendInvoiceLineTemplate.AmountCur) * 100;

                        totalPercentage = (select sum(Percentage) from vendInvoiceDistributionTemplate
                                            where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == vendInvoiceLineTemplate.RecId
                                                && vendInvoiceDistributionTemplate.RecId != this.RecId ).Percentage;

                        totalPercentage += linePercentage;

                        if (totalPercentage <= 100)
                        {
                            this.Percentage = linePercentage;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _vendInvoiceDistributionTemplateRecId)
    {
        boolean ret = true;

        if (!VendInvoiceDistributionTemplate::exist(_vendInvoiceDistributionTemplateRecId))
        {
            ret = checkFailed(strFmt(VendInvoiceDistributionTemplate::txtNotExist(), _vendInvoiceDistributionTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _vendInvoiceDistributionTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from vendInvoiceDistributionTemplate
                    where vendInvoiceDistributionTemplate.RecId == _vendInvoiceDistributionTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendInvoiceDistributionTemplate find(
        recId _vendInvoiceDistributionTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;

        vendInvoiceDistributionTemplate.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendInvoiceDistributionTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendInvoiceDistributionTemplate
            where vendInvoiceDistributionTemplate.RecId == _vendInvoiceDistributionTemplateRecId;

        return vendInvoiceDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDistributionLineAmount</Name>
				<Source><![CDATA[
    public static AmountCur sumDistributionLineAmount(VendInvoiceDistributionTemplate _vendInvoiceDistributionTemplate)
    {
        AmountCur totalDistributedAmount;
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;

        totalDistributedAmount = (select sum(AmountCur) from vendInvoiceDistributionTemplate
                                    where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceDistributionTemplate.VendInvoiceLineTemplate).AmountCur;

        return totalDistributedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCountForTemplateLine</Name>
				<Source><![CDATA[
    static int recordCountForTemplateLine(RefRecId _vendInvoiceLineTemplateRecId)
    {
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;

        return any2int(
            (select count(RecId) from vendInvoiceDistributionTemplate
                where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceLineTemplateRecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDistributionLinePercentage</Name>
				<Source><![CDATA[
    public static Percent sumDistributionLinePercentage(VendInvoiceDistributionTemplate _vendInvoiceTemplateLine)
    {
        Percent totalDistributedPercentage;
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;

        totalDistributedPercentage = (select sum(Percentage) from vendInvoiceDistributionTemplate
                                        where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceTemplateLine.VendInvoiceLineTemplate).Percentage;

        return totalDistributedPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionLineAmount</Name>
				<Source><![CDATA[
    public static void updateDistributionLineAmount(VendInvoiceLineTemplate _vendInvoiceLineTemplate)
    {
        VendInvoiceTemplate vendInvoiceTemplate;
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;
        AmountCur totalDistributedAmount;

        ttsbegin;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (_vendInvoiceLineTemplate.AmountCur == 0.0)
            {
                delete_from vendInvoiceDistributionTemplate where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceLineTemplate.RecId;
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                || ( !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && _vendInvoiceLineTemplate.AmountCur != 0.0))
        {
            vendInvoiceTemplate = VendInvoiceTemplate::find(_vendInvoiceLineTemplate.VendInvoiceTemplate);

            // Update the invoice line template distribution amount by percentage.
            while select forupdate vendInvoiceDistributionTemplate
                where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceLineTemplate.RecId
            {
                vendInvoiceDistributionTemplate.AmountCur =
                CurrencyExchange::round(((vendInvoiceDistributionTemplate.Percentage / 100) * _vendInvoiceLineTemplate.AmountCur),
                                                        vendInvoiceTemplate.CurrencyCode);
                vendInvoiceDistributionTemplate.update();
                totalDistributedAmount += vendInvoiceDistributionTemplate.AmountCur;
            }

            // Handle penny difference at last distribution line.
            if (totalDistributedAmount != 0.0 && totalDistributedAmount != _vendInvoiceLineTemplate.AmountCur)
            {
                vendInvoiceDistributionTemplate.clear();
                select forupdate vendInvoiceDistributionTemplate
                    order by RecId desc
                        where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceLineTemplate.RecId;

                vendInvoiceDistributionTemplate.AmountCur += (_vendInvoiceLineTemplate.AmountCur - totalDistributedAmount);
                vendInvoiceDistributionTemplate.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionLineLedgerDimension</Name>
				<Source><![CDATA[
    public static void updateDistributionLineLedgerDimension(VendInvoiceStandardLineTemplate _vendInvoiceStandardLineTemplate)
    {
        if (_vendInvoiceStandardLineTemplate)
        {
            ttsbegin;
            VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;
            delete_from vendInvoiceDistributionTemplate where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == _vendInvoiceStandardLineTemplate.RecId;
            LedgerDimensionAccount ledgerDimension = (LedgerDimensionFacade::serviceCreateLedgerDimension( 
                                                        InventPosting::accountItemLedgerDimensionFromParameters(
                                                        VendInvoiceDistributionTemplate::buildAccountItemLedgerDimensionParameter(
                                                        InventAccountType::PurchExpense, _vendInvoiceStandardLineTemplate)), _vendInvoiceStandardLineTemplate.DefaultDimension));

            VendInvoiceDistributionTemplate::createDefaultDistributionTemplate(_vendInvoiceStandardLineTemplate, ledgerDimension);
            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    protected static InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType, VendInvoiceStandardLineTemplate _vendInvoiceStandardLineTemplate)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(_inventAccountType,
                                                                                    _vendInvoiceStandardLineTemplate.ItemId, 
                                                                                    InventTable::find(_vendInvoiceStandardLineTemplate.ItemId).itemGroupId(),
                                                                                    _vendInvoiceStandardLineTemplate.ProcurementCategory, 
                                                                                    '', 
                                                                                    '',
                                                                                    _vendInvoiceStandardLineTemplate.TaxGroup
                                                                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultDistributionTemplate</Name>
				<Source><![CDATA[
    public static void createDefaultDistributionTemplate(VendInvoiceLineTemplate _vendInvoiceLineTemplate, LedgerDimensionAccount _ledgerDimension)
    {
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;

        if (VendInvoiceDistributionTemplate::isExtensionOfVendInvoiceInfoLineTemplateAndHasDefaultDimension(_vendInvoiceLineTemplate))
        {
            vendInvoiceDistributionTemplate.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, VendInvoiceDistributionTemplate::getDefaultDimensionFieldFromVendInvoiceInfoLineTemplate(_vendInvoiceLineTemplate));
        }
        else
        {
            vendInvoiceDistributionTemplate.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, VendInvoiceTemplate::find(_vendInvoiceLineTemplate.VendInvoiceTemplate).DefaultDimension);
        }

        vendInvoiceDistributionTemplate.Percentage = 100.0;
        vendInvoiceDistributionTemplate.AmountCur = _vendInvoiceLineTemplate.AmountCur;
        vendInvoiceDistributionTemplate.VendInvoiceLineTemplate = _vendInvoiceLineTemplate.RecId;
        vendInvoiceDistributionTemplate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionOfVendInvoiceInfoLineTemplateAndHasDefaultDimension</Name>
				<Source><![CDATA[
    protected static boolean isExtensionOfVendInvoiceInfoLineTemplateAndHasDefaultDimension(VendInvoiceLineTemplate _vendInvoiceLineTemplate)
    {
        return _vendInvoiceLineTemplate is VendInvoiceStandardLineTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionFieldFromVendInvoiceInfoLineTemplate</Name>
				<Source><![CDATA[
    protected static DimensionDefault getDefaultDimensionFieldFromVendInvoiceInfoLineTemplate(VendInvoiceLineTemplate _vendInvoiceLineTemplate)
    {
        return (_vendInvoiceLineTemplate as VendInvoiceStandardLineTemplate).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDistributionsFromLine</Name>
				<Source><![CDATA[
    public static void createDistributionsFromLine(VendInvoiceLineTemplate _vendInvoiceLineTemplate, SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        AccountingDistribution accountingDistribution;
        boolean distributionFound;
        MonetaryAmount monetaryAmount;
        LedgerDimensionAccount defaultLedgerDimension;

        // Get default values, depending on the type of line
        if (_vendInvoiceLineTemplate.InstanceRelationType == DictTable::getRelationTypeFromTableName(tableStr(VendInvoiceStandardLineTemplate)))
        {
            monetaryAmount = MonetaryAmount::ExtendedPrice;
        }
        else
        {
            VendInvoiceMarkupTransTemplate markupLineTemplate = _vendInvoiceLineTemplate;
            monetaryAmount = MonetaryAmount::Charge;
            defaultLedgerDimension = MarkupTable::find(MarkupModuleType::Vend, markupLineTemplate.MarkupCode).CustomerLedgerDimension;
        }

        // Create a distribution template for each accounting distribution on the source document line
        while select accountingDistribution
            where accountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId &&
                accountingDistribution.MonetaryAmount == monetaryAmount
        {
            VendInvoiceDistributionTemplate::createFromAccountingDistribution(_vendInvoiceLineTemplate.RecId, accountingDistribution);

            distributionFound = true;
        }

        if (!distributionFound)
        {
            VendInvoiceDistributionTemplate::createDefaultDistributionTemplate(_vendInvoiceLineTemplate, defaultLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAccountingDistribution</Name>
				<Source><![CDATA[
    public static void createFromAccountingDistribution(RefRecId _vendInvoiceLineTemplateRecId, AccountingDistribution _accountingDistribution)
    {
        VendInvoiceDistributionTemplate distributionTemplate;

        distributionTemplate.VendInvoiceLineTemplate = _vendInvoiceLineTemplateRecId;
        distributionTemplate.LedgerDimension = _accountingDistribution.LedgerDimension;
        distributionTemplate.Percentage = _accountingDistribution.percentage();
        distributionTemplate.AmountCur = _accountingDistribution.TransactionCurrencyAmount;

        distributionTemplate.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceDistributionTemplateTableDevDoc</DeveloperDocumentation>
	<FormRef>VendInvoiceDistributionTemplate</FormRef>
	<Label>@AccountsPayable:VendorInvoiceDistributionTemplate</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceLineTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Distribution</Name>
			<Label>@SYS81056</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS177138</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceLineTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PercentPositive</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTemplateLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendFreeInvoiceTemplateLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceTemplateLine_VendInvoiceTemplateDistributionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceLineTemplate</Name>
					<Field>VendInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceTemplate_VendInvoiceTemplateDistributionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceLineTemplate</Name>
					<Field>VendInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>