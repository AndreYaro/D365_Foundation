<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEvatError_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxEvatError_NL extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        TaxErrorType _taxErrorType,
        TaxErrorCode _taxErrorCode)
    {
        boolean ret = true;
        ;

        if (!TaxEvatError_NL::exist(_taxErrorType, _taxErrorCode))
        {
            ret = checkFailed(strfmt(TaxEvatError_NL::txtNotExist(), _taxErrorType, _taxErrorCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        TaxErrorType _taxErrorType,
        TaxErrorCode _taxErrorCode)
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxEvatError_NL
                 where
                     taxEvatError_NL.ErrorCode == _taxErrorCode &&
                    taxEvatError_NL.ErrorType == _taxErrorType).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>TaxEvatError_NL</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>TaxEvatError_NL</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxEvatError_NL</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxEvatError_NL find(
        RecId               _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxEvatError_NL taxEvatError_NL;

        taxEvatError_NL.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxEvatError_NL.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxEvatError_NL
            where taxEvatError_NL.RecId == _recId;

        return taxEvatError_NL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxEvatError_NL</c> table.
    /// </summary>
    /// <param name="_dpErrorCode">
    ///    The DPErrorCode for the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxEvatError_NL</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxEvatError_NL findByCode(ErrorCode_NL _dpErrorCode, boolean _forupdate = false)
    {
        TaxEvatError_NL taxEvatError;

        taxEvatError.selectForUpdate(_forupdate);

        select firstonly taxEvatError
            where taxEvatError.DPErrorCode == _dpErrorCode;

        return taxEvatError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByErrorTypeCode</Name>
				<Source><![CDATA[
    public static TaxEvatError_NL findByErrorTypeCode(
        TaxErrorType        _taxErrorType,
        TaxErrorCode        _taxErrorCode,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxEvatError_NL taxEvatError_NL;

        taxEvatError_NL.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxEvatError_NL.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxEvatError_NL
            where
            taxEvatError_NL.ErrorCode == _taxErrorCode &&
                    taxEvatError_NL.ErrorType == _taxErrorType;

        return taxEvatError_NL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOnId</Name>
				<Source><![CDATA[
    public static TaxEvatError_NL findOnId(TaxErrorId _taxErrorId)
    {
        TaxEvatError_NL  taxEvatError_NL;
        ;

        if (_taxErrorId)
        {
            select firstonly taxEvatError_NL
                where taxEvatError_NL.ErrorId == _taxErrorId;
        }

        return taxEvatError_NL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertError</Name>
				<Source><![CDATA[
    public static void insertError(
        TaxErrorType _taxErrorType,
        TaxErrorCode _taxErrorCode,
        ErrorTxt     _errorTxt)
    {
        TaxEvatError_NL taxEvatError_NL;
        ;

        ttsbegin;
        taxEvatError_NL.ErrorType        = _taxErrorType;
        taxEvatError_NL.ErrorCode        = _taxErrorCode;
        taxEvatError_NL.ErrorDescription = _errorTxt;

        taxEvatError_NL.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103298";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS123489</DeveloperDocumentation>
	<FormRef>TaxEvatError_NL</FormRef>
	<Label>@SYS96763</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>ErrorId</TitleField1>
	<TitleField2>ErrorCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ErrorIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxReturnedError_NL</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxReturnedError_NL</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ErrorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ErrorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ErrorId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Error</Name>
			<Label>@SYS8500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DPErrorCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ErrorId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DPErrorCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ErrorCode_NL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ErrorCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxErrorCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ErrorTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxErrorId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxErrorType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ErrorIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ErrorId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>