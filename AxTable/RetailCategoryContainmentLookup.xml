<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCategoryContainmentLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailCategoryContainmentLookup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>containsCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a contained category occurs in the <c>RetailCategoryContainmentLookup</c> table.
    /// </summary>
    /// <param name="_category">
    /// A <c>Category</c> value.
    /// </param>
    /// <param name="_containedCategory">
    /// A <c>ContainedCategory</c> value.
    /// </param>
    /// <returns>
    /// true if the record with the specified contained category occurs; otherwise false.
    /// </returns>
    public static boolean containsCategory(EcoResCategoryId _category, EcoResCategoryId _containedCategory)
    {
        RetailCategoryContainmentLookup containmentLookup;
        select firstonly RecId from containmentLookup
            where containmentLookup.Category == _category
               && containmentLookup.ContainedCategory == _containedCategory;

        return (containmentLookup.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContainedCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and retrieves all the contained categories in a specified category.
    /// </summary>
    /// <param name="_category">
    /// The category <c>RecId</c> value to find the contained categories.
    /// </param>
    /// <returns>
    /// A read only <c>SetEnumerator</c> value that enumerates all the contained categories.
    /// </returns>
    /// <remarks>
    /// The specified category, the descendants of the category, and all categories reachable by special
    /// group membership will also be included in the set.
    /// </remarks>
    public static SetEnumerator findContainedCategories(EcoResCategoryId _category)
    {
        EcoResCategoryId current;
        List directChildren;
        ListEnumerator childrenEnumerator;

        StackBase tempStack = new StackBase(Types::Int64);
        Set results = new Set(Types::Int64);

        // we can write this diffently but is more clear like this.
        tempStack.push(_category);
        current = tempStack.pop();

        while (current)
        {
            results.add(current);
            directChildren = RetailCategoryContainmentLookup::getDirectlyContainedCategories(current);
            if (directChildren)
            {
                childrenEnumerator = directChildren.getEnumerator();
                while (childrenEnumerator.moveNext())
                {
                    if (!results.in(childrenEnumerator.current()))
                    {
                        results.add(childrenEnumerator.current());
                        tempStack.push(childrenEnumerator.current());
                    }
                }
            }
            current = tempStack.pop();
        }

        return results.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the descendant categories of a specified category and puts them into a container.
    /// </summary>
    /// <param name="_category">
    /// The category <c>RecId</c> value to retrieve the descendant categories.
    /// </param>
    /// <returns>
    /// A container that contains the descendant categories.
    /// </returns>
    private static container getCategoryDescendants(EcoResCategoryId _category)
    {
        container descRecIds;
        EcoResCategory descCategory = EcoResCategory::find(_category).getDescendants();

        while (descCategory)
        {
            descRecIds += descCategory.RecId;
            next descCategory;
        }

        return descRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryDirectReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the member line categories of a specified category and puts them into a container.
    /// </summary>
    /// <param name="_category">
    /// The category <c>RecId</c> value to retrieve the member line categories.
    /// </param>
    /// <returns>
    /// A container that contains the member line categories.
    /// </returns>
    private static container getCategoryDirectReferences(EcoResCategoryId _category)
    {
        container containedRecIds;
        RetailSpecialCategoryMember categoryMember;
        RetailGroupMemberLine       memberLine;

        while select Category from memberLine
              join RecId from categoryMember
              where categoryMember.Category == _category
                 && categoryMember.RetailGroupMember == memberLine.RecId
                 && memberLine.Product == 0
                 && memberLine.Variant == 0
                 && memberLine.Category != 0
        {
            containedRecIds += memberLine.Category;
        }

        return containedRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirectlyContainedCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of the records of the descendent categories and the member line categories.
    /// </summary>
    /// <param name="_category">
    /// A category <c>RecId</c> value to the records of the retrieve descendant categories and the member
    /// line categories.
    /// </param>
    /// <returns>
    /// A list of the records of the descendent categories and member line categories.
    /// </returns>
    private static List getDirectlyContainedCategories(EcoResCategoryId _category)
    {
        return con2List(RetailCategoryContainmentLookup::getCategoryDescendants(_category)
                        + RetailCategoryContainmentLookup::getCategoryDirectReferences(_category));
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeAllRetailCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>RetailCategoryContainmentLookup</c> table to match the configuration of the retail
    /// product hierarchy and the retail special category hierarchies.
    /// </summary>
    [SysObsolete('Explicit call to synchronize records in lookup table no longer allowed.', false, 31\03\2019)]
    public static void synchronizeAllRetailCategories()
    {
        // Work around broken chain of command.
        // We need to ensure obsolete method still being called from all previouse locations
        // to mimic original behavior.
        if (RetailCategoryContainmentLookupParameters::isChainOfCommandCallback)
        {
            RetailCategoryContainmentLookupParameters::isChainOfCommandCallback = false;
        }
        else
        {
            RetailCategoryContainmentLookup::synchronizeCategoriesLookup(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeCategoriesLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>RetailCategoryContainmentLookup</c> table to match the configuration of the retail
    /// product hierarchy and the retail special category hierarchies.
    /// </summary>
    /// <param name="_forceCleanSync">
    /// Force sync will ensure that lookup table is empty.
    /// </param>
    internal static void synchronizeCategoriesLookup(boolean _forceCleanSync = false)
    {
        const int RetryNum = 5;
        const int RetryWaitTime = 10000;  // in ms. 10 seconds for retry.

        using (var logger = RetailInstrumentationSegment::construct('Category hierarchy', funcName()))
        {
            try
            {
                if (_forceCleanSync)
                {   // Rebuild the table offline in a temp table, then update the master table when all done.
                    RetailCategoryContainmentLookup retailCategoryContainmentLookup;
                    // NOTE: retailCategoryContainmentLookupTmp is declared in scope of the "try" to ensure for any retry that the table is trucated
                    // (instead of adding code for delete_from retailCategoryContainmentLookupTmp)
                    RetailCategoryContainmentLookupTmp retailCategoryContainmentLookupTmp;

                    retailCategoryContainmentLookup.skipDatabaseLog(true);
                    retailCategoryContainmentLookup.skipEvents(true);
                    retailCategoryContainmentLookupTmp.skipDatabaseLog(true);
                    retailCategoryContainmentLookupTmp.skipEvents(true);

                    // Debug Help enable the following: info(retailCategoryContainmentLookupTmp.getPhysicalTableName());
             
                    RetailCategoryContainmentLookup::checkAndInsertNewCategoriesAndContainersTmp(retailCategoryContainmentLookupTmp);
                    RetailCategoryContainmentLookup::checkAndInsertReferencedCategoriesHierarchyTmp(retailCategoryContainmentLookupTmp);

                    ttsbegin;  // Merge/Copy tmp table back to the master table and purge/update as needed (e.g., Mirror back)

                    // delete for no records with matching index: EcoResCategoryContainment
                    delete_from retailCategoryContainmentLookup
                        notexists join retailCategoryContainmentLookupTmp
                        where
                            retailCategoryContainmentLookup.Category == retailCategoryContainmentLookupTmp.Category
                            && retailCategoryContainmentLookup.ContainedCategory == retailCategoryContainmentLookupTmp.ContainedCategory;
                
                    // Update rows that exists in both tables based upon index: EcoResCategoryContainment
                    // Can skip rows where there is no delta
                    update_recordset retailCategoryContainmentLookup
                        setting
                                IsDirty = retailCategoryContainmentLookupTmp.IsDirty
                        join retailCategoryContainmentLookupTmp
                        where
                            retailCategoryContainmentLookup.Category == retailCategoryContainmentLookupTmp.Category
                            && retailCategoryContainmentLookup.ContainedCategory == retailCategoryContainmentLookupTmp.ContainedCategory
                            &&
                            (   // Skip rows where there is no delta/data changes.
                                retailCategoryContainmentLookup.IsDirty != retailCategoryContainmentLookupTmp.IsDirty
                            );

                    // insert rows that exist in the tmp table but not yet in the master table.
                    insert_recordset retailCategoryContainmentLookup(Category, ContainedCategory, IsDirty)
                        select Category, ContainedCategory, IsDirty from retailCategoryContainmentLookupTmp
                        notexists join retailCategoryContainmentLookup
                            where
                                retailCategoryContainmentLookup.Category == retailCategoryContainmentLookupTmp.Category
                                && retailCategoryContainmentLookup.ContainedCategory == retailCategoryContainmentLookupTmp.ContainedCategory;
                 
                    ttscommit;   
                }
                else
                {
                    // Attempt to update the value in place to avoid long delays when done from UI.
                    RetailCategoryContainmentLookup::removeDeletedCategoriesAndContainers();
                    RetailCategoryContainmentLookup::checkAndInsertNewCategoriesAndContainers();
                    RetailCategoryContainmentLookup::checkAndInsertReferencedCategoriesHierarchy();
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::Deadlock; // non-recoverable deadlock
                }
                else
                {
                    sleep(RetryWaitTime); // wait 10 seconds, 50 seconds in total with retries
                    // Retry after deadlock in processing products and variants.
                    warning(strFmt('%1 %2', DateTimeUtil::toStr(DateTimeUtil::utcNow()), "@Retail:DeliveryModeExplodeJobDeadlockRetryProductsAndVariants"));
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                // No chance to get this, but
                // try to resolve update conflict
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        warning(strFmt('%1 %2', DateTimeUtil::toStr(DateTimeUtil::utcNow()), "@Retail:DeliveryModeExplodeJobDeadlockRetryProductsAndVariants"));
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }

            // Keep chain of command callback intact.
            RetailCategoryContainmentLookupParameters::isChainOfCommandCallback = true;
            RetailCategoryContainmentLookup::synchronizeAllRetailCategories();

            RetailPricingCacheManager::clearCategoriesCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReferencedCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes category reference from supplemental hierarchy.
    /// </summary>
    /// <param name = "_category">Category that has reference to another category node.</param>
    /// <param name = "_referenceCategory">Category id.</param>
    public static void deleteReferencedCategoryHierarchy(EcoResCategoryId _category, EcoResCategoryId _referenceCategory)
    {
        RetailCategoryContainmentLookup dirtyCategories;
        RetailCategoryContainmentLookup containmentLookup;
        RetailCategoryContainmentLookup parentCategories;
        RetailCategoryContainmentLookup referenceCategoryChildren;
        RetailGroupMemberLine           memberLine;
        RetailSpecialCategoryMember     categoryMember;

        ttsbegin;

        delete_from containmentLookup
            exists join parentCategories
                where containmentLookup.ContainedCategory == parentCategories.ContainedCategory
                    && parentCategories.Category == _referenceCategory
            exists join referenceCategoryChildren
                where containmentLookup.Category == referenceCategoryChildren.Category
                    && referenceCategoryChildren.ContainedCategory == _category;

        ttscommit;

        // Keep chain of command callback intact.
        RetailCategoryContainmentLookupParameters::isChainOfCommandCallback = true;
        RetailCategoryContainmentLookup::synchronizeAllRetailCategories();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndDeleteReferencedCategoriesHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if category has any references to other categories and deletes them.
    /// </summary>
    /// <param name = "_category">Category that should be used to check references.</param>
    public static void checkAndDeleteReferencedCategoriesHierarchy(EcoResCategoryId _category)
    {
        ListEnumerator referencedCategoriesEnumerator;
        List referencedCategories = con2List(RetailCategoryContainmentLookup::getCategoryDirectReferences(_category));

        if (referencedCategories)
        {
            referencedCategoriesEnumerator = referencedCategories.getEnumerator();
            while (referencedCategoriesEnumerator.moveNext())
            {
                if (referencedCategoriesEnumerator.current())
                {
                    RetailCategoryContainmentLookup::deleteReferencedCategoryHierarchy(_category, referencedCategoriesEnumerator.current());
                }
            }
        }

        // Keep chain of command callback intact.
        RetailCategoryContainmentLookupParameters::isChainOfCommandCallback = true;
        RetailCategoryContainmentLookup::synchronizeAllRetailCategories();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertNewCategoriesAndContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if new categories are not yet in lookup table and insert.
    /// <c>RetailCategoryContainmentLookup</c> table.
    /// </summary>
    private static void checkAndInsertNewCategoriesAndContainers()
    {
        RetailCategoryContainmentLookup containmentLookup;
        EcoResCategory ecoResCategory;
        EcoResCategoryHierarchyRole hierarchyRole;
        RecordInsertList recordInsertList;

        ttsbegin;
        
        recordInsertList = new RecordInsertList(containmentLookup.TableId);

        // Check if tehre are new categories that were added and insert new categories into lookup table.
        while select RecId, ParentCategory from ecoResCategory
                exists join hierarchyRole
                    where ecoResCategory.CategoryHierarchy == hierarchyRole.CategoryHierarchy
                       && (hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                           || hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                           || hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation)
                notexists join containmentLookup
                    where ecoResCategory.RecId == containmentLookup.Category
                        && ecoResCategory.RecId == containmentLookup.ContainedCategory
        {
            // Category contains itself. This is must have.
            containmentLookup.Category = ecoResCategory.RecId;
            containmentLookup.ContainedCategory = ecoResCategory.RecId;
            recordInsertList.add(containmentLookup);

            EcoResCategoryId parentCategoryId = ecoResCategory.ParentCategory;

            // Add parent categories and mark that they contain sub category.
            while (parentCategoryId > 0)
            {
                EcoResCategory ecoResParentCategories;

                select firstonly RecId, ParentCategory from ecoResParentCategories
                        where ecoResParentCategories.RecId == parentCategoryId;

                if (ecoResParentCategories.RecId > 0)
                {
                    containmentLookup.Category = ecoResParentCategories.RecId;
                    containmentLookup.ContainedCategory = ecoResCategory.RecId;
                    recordInsertList.add(containmentLookup);

                    parentCategoryId = ecoResParentCategories.ParentCategory;
                }
                else
                {
                    break;
                }
            }
        }

        var numberOfRecords = recordInsertList.insertDatabase();

        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        eventSource.EventWriteInsertNewEcoResCategories(numberOfRecords);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertNewCategoriesAndContainersTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if new categories are not yet in lookup table and insert.
    /// <c>RetailCategoryContainmentLookup</c> table.
    /// </summary>
    /// <param name = "containmentLookupTmp">The working copy temp table.</param>
    private static void checkAndInsertNewCategoriesAndContainersTmp(RetailCategoryContainmentLookupTmp containmentLookupTmp)
    {
        EcoResCategory ecoResCategory;
        EcoResCategoryHierarchyRole hierarchyRole;
        RecordInsertList recordInsertList;

        ttsbegin;

        // instead of: recordInsertList = new RecordInsertList(containmentLookupTmp.TableId);
        // For tempDB use:
        recordInsertList = new RecordInsertList(tableNum(RetailCategoryContainmentLookupTmp), // table id
            false, // skip insert
            false, // skip database log
            false, // skip events
            false, // skip AOS validation
            false, // skip RLS validation
            containmentLookupTmp // tmp buffer where records will be inserted
            );

        // Check if there are new categories that were added and insert new categories into lookup table.
        while select RecId, ParentCategory from ecoResCategory
                exists join hierarchyRole
                    where ecoResCategory.CategoryHierarchy == hierarchyRole.CategoryHierarchy
                       && (hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                           || hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                           || hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation)
                notexists join containmentLookupTmp
                    where ecoResCategory.RecId == containmentLookupTmp.Category
                        && ecoResCategory.RecId == containmentLookupTmp.ContainedCategory
        {
            // Category contains itself. This is must have.
            containmentLookupTmp.Category = ecoResCategory.RecId;
            containmentLookupTmp.ContainedCategory = ecoResCategory.RecId;
            recordInsertList.add(containmentLookupTmp);

            EcoResCategoryId parentCategoryId = ecoResCategory.ParentCategory;

            // Add parent categories and mark that they contain sub category.
            while (parentCategoryId > 0)
            {
                EcoResCategory ecoResParentCategories;

                select firstonly RecId, ParentCategory from ecoResParentCategories
                        where ecoResParentCategories.RecId == parentCategoryId;

                if (ecoResParentCategories.RecId > 0)
                {
                    containmentLookupTmp.Category = ecoResParentCategories.RecId;
                    containmentLookupTmp.ContainedCategory = ecoResCategory.RecId;
                    recordInsertList.add(containmentLookupTmp);

                    parentCategoryId = ecoResParentCategories.ParentCategory;
                }
                else
                {
                    break;
                }
            }
        }

        var numberOfRecords = recordInsertList.insertDatabase();

        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        eventSource.EventWriteInsertNewEcoResCategories(numberOfRecords);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertReferencedCategoriesHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if we need to  inserts category reference from supplemental hierarchy.
    /// </summary>
    private static void checkAndInsertReferencedCategoriesHierarchy()
    {
        RetailCategoryContainmentLookup containmentLookup;
        RetailCategoryContainmentLookup parentCategories;
        RetailCategoryContainmentLookup referenceCategoryChildren;
        RetailCategoryContainmentLookup checkContainmentLookup;
        RetailGroupMemberLine memberLine;
        RetailSpecialCategoryMember categoryMember;

        ttsbegin;

        do
        {
            // Select reference category from RetailGroupMemberLine where it is initialized and has no other fields set
            // Find new parent category and all parents that contain it
            // Cross reference all parent categories of new parent with all children of reference category
            // Exclude the once that are already in the table
            insert_recordset containmentLookup(Category, ContainedCategory)
                        select Category from parentCategories
                            group by Category
                        join categoryMember
                            where categoryMember.Category == parentCategories.ContainedCategory
                        join memberLine
                            where memberLine.RecId == categoryMember.RetailGroupMember
                                && memberLine.Product == 0
                                && memberLine.Variant == 0
                                && memberLine.Category != 0
                        join ContainedCategory from referenceCategoryChildren
                            group by ContainedCategory
                            where referenceCategoryChildren.Category == memberLine.Category
                        notExists join checkContainmentLookup
                            where checkContainmentLookup.Category == parentCategories.Category
                                && checkContainmentLookup.ContainedCategory == referenceCategoryChildren.ContainedCategory;
        }
        while (containmentLookup.RowCount() > 0);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertReferencedCategoriesHierarchyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if we need to  inserts category reference from supplemental hierarchy.
    /// </summary>
    /// <param name = "containmentLookupTmp">The working copy temp table.</param>
    private static void checkAndInsertReferencedCategoriesHierarchyTmp(RetailCategoryContainmentLookupTmp containmentLookupTmp)
    {
        RetailCategoryContainmentLookupTmp parentCategoriesTmp;
        RetailCategoryContainmentLookupTmp referenceCategoryChildrenTmp;
        RetailCategoryContainmentLookupTmp checkContainmentLookupTmp;
        RetailGroupMemberLine memberLine;
        RetailSpecialCategoryMember categoryMember;

        // Make sure all Tmp table references use the same working table
        parentCategoriesTmp.linkPhysicalTableInstance(containmentLookupTmp);
        referenceCategoryChildrenTmp.linkPhysicalTableInstance(containmentLookupTmp);
        checkContainmentLookupTmp.linkPhysicalTableInstance(containmentLookupTmp);

        ttsbegin;

        do
        {
            // Select reference category from RetailGroupMemberLine where it is initialized and has no other fields set
            // Find new parent category and all parents that contain it
            // Cross reference all parent categories of new parent with all children of reference category
            // Exclude the once that are already in the table
            insert_recordset containmentLookupTmp(Category, ContainedCategory)
                        select Category from parentCategoriesTmp
                            group by Category
                        join categoryMember
                            where categoryMember.Category == parentCategoriesTmp.ContainedCategory
                        join memberLine
                            where memberLine.RecId == categoryMember.RetailGroupMember
                                && memberLine.Product == 0
                                && memberLine.Variant == 0
                                && memberLine.Category != 0
                        join ContainedCategory from referenceCategoryChildrenTmp
                            group by ContainedCategory
                            where referenceCategoryChildrenTmp.Category == memberLine.Category
                        notExists join checkContainmentLookupTmp
                            where checkContainmentLookupTmp.Category == parentCategoriesTmp.Category
                                && checkContainmentLookupTmp.ContainedCategory == referenceCategoryChildrenTmp.ContainedCategory;
        } 
        while (containmentLookupTmp.RowCount() > 0);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDeletedCategoriesAndContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove deleted categories and those that contain it in the
    /// <c>RetailCategoryContainmentLookup</c> table.
    /// </summary>
    private static void removeDeletedCategoriesAndContainers()
    {
        RetailCategoryContainmentLookup containmentLookup;
        EcoResCategory ecoResCategory;
        EcoResCategoryHierarchyRole hierarchyRole;

        ttsbegin;

        // Delete categories from lookup contained set that do not exist.
        delete_from containmentLookup
            notexists join ecoResCategory
                where ecoResCategory.RecId == containmentLookup.ContainedCategory;

        delete_from containmentLookup
            notexists join ecoResCategory
                where ecoResCategory.RecId == containmentLookup.Category;


        // Delete categories that were assigned to a different category role other than Retail.
        delete_from containmentLookup
            exists join ecoResCategory
                where ecoResCategory.RecId == containmentLookup.Category
            notexists join hierarchyRole
                where ecoResCategory.CategoryHierarchy == hierarchyRole.CategoryHierarchy
                    && (hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                        || hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                        || hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllRetailCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records of the descendant categories and the member line categories.
    /// Obsolete: Method will clear lookup table and recreate new records.
    /// </summary>
    [SysObsolete('Explicit call to insert records into lookup table no longer allowed.', false, 31\03\2019)]
    public static void insertAllRetailCategories()
    {
        // Preserving basic functionality of the function.
        RetailCategoryContainmentLookup containmentLookup;
        delete_from containmentLookup;

        RetailCategoryContainmentLookup::synchronizeCategoriesLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@RET5759</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET5758</Label>
	<TitleField1>Category</TitleField1>
	<TitleField2>ContainedCategory</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<ReplacementKey>EcoResCategoryContainment</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainedCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainedCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainedCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContainedCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDirty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResCategoryContainment</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContainedCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsDirtyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsDirty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContainedCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContainedCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContainedCategory</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CopyTableTmpIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContainedCategory</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsDirty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResContainedCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResContainedCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainedCategory</Name>
					<Field>ContainedCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResProductCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainedCategory</Name>
					<Field>ContainedCategory</Field>
					<RelatedField>Category</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>