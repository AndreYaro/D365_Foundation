<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkBlockingReasonAssociation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkBlockingReasonAssociation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a description of the blocking reason.
    /// </summary>
    /// <returns>
    /// A description of the blocking reason.
    /// </returns>
    [Hookable(false), SysClientCacheDataMethod(true)]
    internal display WHSWorkBlockingReasonDescription description()
    {
        return WHSWorkBlockingReason::newFromReasonType(this.ReasonType, this.workTable()).description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTable</Name>
				<Source><![CDATA[
    private WHSWorkTable workTable()
    {
        return WHSWorkTable::find(this.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record in the table based on the parameters.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <param name = "_reasonType">A reason type.</param>
    [Hookable(false)]
    internal static void deleteAssociation(
        WHSWorkId                   _workId,
        WHSWorkBlockingReasonType   _reasonType)
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;
        delete_from workBlockingReasonAssociation
            where workBlockingReasonAssociation.WorkId == _workId
                && workBlockingReasonAssociation.ReasonType == _reasonType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSWorkBlockingReasonAssociation</c> record based on the parameters. If the record does not exist it is created.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <param name = "_reasonType">A reason type.</param>
    /// <returns>A <c>WHSWorkBlockingReasonAssociation</c> record.</returns>
    [Hookable(false)]
    internal static WHSWorkBlockingReasonAssociation findOrCreate(
        WHSWorkId                   _workId,
        WHSWorkBlockingReasonType   _reasonType)
    {
        #OCCRetryCount;
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        try
        {
            workBlockingReasonAssociation = WHSWorkBlockingReasonAssociation::find(_workId, _reasonType);

            if (!workBlockingReasonAssociation)
            {
                ttsbegin;
                workBlockingReasonAssociation = WHSWorkBlockingReasonAssociation::create(_workId, _reasonType);
                ttscommit;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }
            
        return workBlockingReasonAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSWorkBlockingReasonAssociation</c> record based on the parameters.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <param name = "_reasonType">A reason type.</param>
    /// <param name = "_forUpdate">A boolean which specifies whether the returned <c>WHSWorkBlockingReasonAssociation</c> should be selected for update.</param>
    /// <returns>A <c>WHSWorkBlockingReasonAssociation</c> record.</returns>
    [Hookable(false)]
    internal static WHSWorkBlockingReasonAssociation find(
        WHSWorkId                   _workId,
        WHSWorkBlockingReasonType   _reasonType,
        boolean                     _forUpdate = false)
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        if (_workId)
        {
            workBlockingReasonAssociation.selectForUpdate(_forUpdate);
            
            select firstonly workBlockingReasonAssociation
                where workBlockingReasonAssociation.WorkId == _workId
                    && workBlockingReasonAssociation.ReasonType == _reasonType;                    
        }

        return workBlockingReasonAssociation;

    }

]]></Source>
			</Method>
			<Method>
				<Name>blockingReasonExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a work has any blocking reasons.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <returns>True, if the work has any blocking reasons; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean blockingReasonExist(WHSWorkId _workId)
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        if (_workId)
        {
            select firstonly workBlockingReasonAssociation
                where workBlockingReasonAssociation.WorkId == _workId;

            return workBlockingReasonAssociation.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCountOfBlockingReasons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the count of the blocking reasons for the passed work.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <returns>Count of the blocking reasons for the passed work.</returns>
    [Hookable(false)]
    internal static NumberOfRecords calculateCountOfBlockingReasons(WHSWorkId _workId)
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        if (_workId)
        {
            select count(RecId) from workBlockingReasonAssociation
                where workBlockingReasonAssociation.WorkId == _workId;
        }

        return any2int(workBlockingReasonAssociation.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    private static WHSWorkBlockingReasonAssociation create(
        WHSWorkId                   _workId,
        WHSWorkBlockingReasonType   _reasonType)
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        workBlockingReasonAssociation.WorkId = _workId;
        workBlockingReasonAssociation.ReasonType = _reasonType;

        workBlockingReasonAssociation.insert();

        return workBlockingReasonAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSAndTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSWorkBlockingReasonAssociationDeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:WHSWorkBlockingReasonAssociationTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WorkId</TitleField1>
	<TitleField2>ReasonType</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkIdReasonTypeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkIdReasonTypeIdx</PrimaryIndex>
	<ReplacementKey>WorkIdReasonTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReasonType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkBlockingReasonType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkIdReasonTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReasonType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>