<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowUpdateWithQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the update of the production order is enabled by related quality order.
    /// </summary>
    /// <returns>
    /// true if the update is enabled; otherwise, false.
    /// </returns>
    boolean allowUpdateWithQualityOrder()
    {
        return !InventParameters::find().UseQualityManagement || (this.qualityOrderStatusDisplay() != InventTestOrderStatusDisplay::Open);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountUnderconsumed</Name>
				<Source><![CDATA[
    public display Amount amountUnderconsumed()
    {
        DictTable                           dictTableProdTable;

        dictTableProdTable = new DictTable(tableNum(ProdTable));

        if (dictTableProdTable.rights() >= AccessType::View)
        {
            return conPeek(this.underconsumed(), 2);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoUpdate</Name>
				<Source><![CDATA[
    public void autoUpdate(ProdStatus wantedProdStatus)
    {
        ProdTable tmpProdTable;

        if ( this.status().isAfter(wantedProdStatus))
        {
            throw error("@SYS24884");
        }

        tmpProdTable.ProdId          = this.ProdId;
        tmpProdTable.ProdStatus      = wantedProdStatus;

        tmpProdTable.status().runAutoUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a production/batch order in the original BOM/Formula version.
    /// </summary>
    /// <returns>
    /// The related BOM/Formula version of a production/batch order.
    /// </returns>
    public BOMVersion bomVersion()
    {
        BOMVersion bomVersion;
        InventDim  inventDim    = InventDim::find(this.inventDimid);
        bomVersion              = BOMVersion::selectBomVersionWithPriority(this.ItemId,this.BOMDate,abs(this.QtySched),inventDim,true,true,true,false,true,this.bomId);

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDelay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the scheduling delay.
    /// </summary>
    /// <returns>
    /// The scheduling delay.
    /// </returns>
    display DaysAsString calcDelay()
    {
        int delay = this.SchedEnd-this.DlvDate;

        if (delay < 0)
        {
            delay = 0;
        }

        return strFmt("@SYS93387", delay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatingWIP_RU</Name>
				<Source><![CDATA[
    public boolean calculatingWIP_RU()
    {
        return this.prodParametersDim().CalculatingWIP_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    private boolean canInventUpdExpected()
    {
        return this.type().canInventUpdExpected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the bill of materials ID.
    /// </summary>
    /// <returns>
    ///    true if the bill of materials ID is valid; otherwise false.
    /// </returns>
    public boolean checkBOMId()
    {
        return ProdTable::validateBOMId(this.bomId,this.ItemId,this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEqualityReleaseQty_RU</Name>
				<Source><![CDATA[
    public boolean checkEqualityReleaseQty_RU(TransDate _calculationDate)
    {
        ProdTableJour           prodTableJour;
        ProdRouteTrans          prodRouteTrans;
        ProdReleaseTrans_RU     prodReleaseTrans;
        ProdReleaseKindTable_RU prodReleaseKindTable;

        Qty                     releaseQty;
        UnitOfMeasureSymbol     prodInventUnitId;

        boolean                 ret = true;

        if (!this.useReleaseFromProduction_RU())
        {
            return true;
        }

        // calculate reported finished error
        select sum(QtyError) from prodTableJour
            where prodTableJour.ProdId         == this.ProdId           &&
                  prodTableJour.JournalType    == ProdJourType::Receipt &&
                  prodTableJour.Canceled       == NoYes::No             &&
                  prodTableJour.TransDate      <= _calculationDate;

        // calculate error quantity of released production
        while select sum(ReleaseQty) from prodReleaseTrans
            group by ItemId, UnitId, ReleaseKindId, InventDimId
            where prodReleaseTrans.ProdId       == this.ProdId                              &&
                  prodReleaseTrans.Cancelled    == NoYes::No                                &&
                  prodReleaseTrans.DateWIP      <= _calculationDate
            exists join prodReleaseKindTable
                where prodReleaseKindTable.ReleaseKindId == prodReleaseTrans.ReleaseKindId  &&
                      prodReleaseKindTable.IsReject
        {
            prodInventUnitId    = this.inventTable().inventUnitId();
            releaseQty			+= EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodReleaseTrans.ItemId,
																										 prodReleaseTrans.InventDimId,
																										 prodReleaseTrans.ReleaseQty,
																										 prodReleaseTrans.UnitId,
																										 prodInventUnitId,
																										 NoYes::Yes);
        }

        // calculate error quantity of finished production in the route card
        select sum(QtyError) from prodRouteTrans
            where prodRouteTrans.TransRefId      == this.ProdId                  &&
                  prodRouteTrans.TransRefType    == ProdTransRefType::Production &&
                  prodRouteTrans.Cancelled       == NoYes::No                    &&
                  prodRouteTrans.DateWIP         <= _calculationDate;

        if (releaseQty != (prodRouteTrans.QtyError + prodTableJour.QtyError))
        {
            ret = checkFailed("@GLS115757");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxPhysicalDataForEndJob_RU</Name>
				<Source><![CDATA[
    public boolean checkMaxPhysicalDataForEndJob_RU(TransDate _closingDate)
    {
        InventTrans         inventTrans;
        ProdRouteTrans      prodRouteTrans;
        ProdIndirectTrans   prodIndirectTrans;
        ProdReleaseTrans_RU prodReleaseTrans;

        InventTransOrigin                   inventTransOrigin;
        InventTransOriginAssemblyComponent  inventTransOriginAssemblyComponent;

        boolean             ret = true;

        inventTransOrigin = InventTransOrigin::findByInventTransId(this.InventTransId);

        select sum(Qty) from inventTrans
            where inventTrans.DatePhysical > _closingDate
        exists join inventTransOriginAssemblyComponent
            where inventTransOriginAssemblyComponent.ComponentInventTransOrigin == inventTrans.InventTransOrigin &&
                  inventTransOriginAssemblyComponent.AssemblyInventTransOrigin  == inventTransOrigin.RecId;

        if (inventTrans.Qty)
        {
            ret = checkFailed(strFmt("@GLS115850", this.ProdId));
        }

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                  inventTrans.DatePhysical      >  _closingDate;

        if (inventTrans.Qty)
        {
            ret = checkFailed(strFmt("@GLS115851", this.ProdId));
        }

        select sum(Amount) from prodRouteTrans
            where prodRouteTrans.TransRefId == this.ProdId      &&
                  prodRouteTrans.Calculated == NoYes::No        &&
                  prodRouteTrans.Cancelled  == NoYes::No        &&
                  prodRouteTrans.DateWIP    >  _closingDate;

        if (prodRouteTrans.Amount)
        {
            ret = checkFailed(strFmt("@GLS115852", this.ProdId));
        }

        select sum(Amount) from prodIndirectTrans
            where prodIndirectTrans.TransRefId     == this.ProdId &&
                  prodIndirectTrans.Calculated     == NoYes::No   &&
                  prodIndirectTrans.Canceled       == NoYes::No   &&
                  prodIndirectTrans.DateEstimation >  _closingDate;

        if (prodIndirectTrans.Amount)
        {
            ret = checkFailed(strFmt("@GLS115853", this.ProdId));
        }

        select sum(ReleaseQty) from prodReleaseTrans
            where prodReleaseTrans.ProdId      == this.ProdId      &&
                  prodReleaseTrans.Calculated  == NoYes::No        &&
                  prodReleaseTrans.Cancelled   == NoYes::No        &&
                  prodReleaseTrans.DateWIP     >  _closingDate;

        if (prodReleaseTrans.ReleaseQty)
        {
            ret = checkFailed(strFmt("@GLS115854", this.ProdId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingProdItemPrice_RU</Name>
				<Source><![CDATA[
    public boolean checkNotMissingProdItemPrice_RU(TransDate _calculationDate)
    {
        if (!InventItemPrice::findCurrent(this.ItemId, CostingVersionPriceType::Cost, this.InventDimId, _calculationDate))
        {
            return checkFailed(strFmt("@GLS115855",
                                      this.ProdId,
                                      _calculationDate,
                                      CostingVersionPriceType::Cost));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the production order type is valid.
    /// </summary>
    /// <returns>
    /// true if the production order type is valid; otherwise, false .
    /// </returns>
    public boolean checkProdType()
    {
        boolean         result      = true;
        InventTable     inventTable = this.inventTable();

        if (inventTable)
        {
            switch (this.ProdType)
            {
                case ProdType::Process:
                    if (!inventTable.isFormulaAllowed())
                    {
                        result = checkFailed(strFmt("@PRO89",this.ItemId));
                    }
                    break;

                case ProdType::Standard:
                case ProdType::Vendor:
                    if (!inventTable.isBOMAllowed())
                    {
                        result = checkFailed(strFmt("@SYS7861",this.ItemId));
                    }
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefProdBOM</Name>
				<Source><![CDATA[
    public boolean checkRefProdBOM(ProdBOM  prodBOM)
    {
        if (!prodBOM.RecId)
        {
            return checkFailed("@SYS19558");
        }

        if (this.InventRefTransId   != prodBOM.InventTransId    ||
            this.InventRefId        != prodBOM.ProdId           ||
            this.ItemId             != prodBOM.ItemId)
        {
            return checkFailed("@SYS19558");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefProdJournalProd</Name>
				<Source><![CDATA[
    public boolean  checkRefProdJournalProd(ProdJournalProd prodJournalProd)
    {
        if (this.ProdId != prodJournalProd.ProdId)
        {
            return checkFailed("@SYS19559");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefSalesLine</Name>
				<Source><![CDATA[
    public boolean checkRefSalesLine(SalesLine salesOrderLine)
    {
        if (!salesOrderLine.RecId)
        {
            return checkFailed("@SYS189");
        }

        if (this.InventRefType              != InventRefType::Sales         ||
            salesOrderLine.InventTransId    != this.InventRefTransId        ||
            this.InventRefId                != salesOrderLine.SalesId       ||
            this.ItemId                     != salesOrderLine.ItemId
           )
        {
            return checkFailed("@SYS19558");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReleaseProportionallyFixedPrice_RU</Name>
				<Source><![CDATA[
    public boolean checkReleaseProportionallyFixedPrice_RU()
    {
        boolean                 ret = true;
        ProdReleaseTrans_RU     prodReleaseTrans;
        ProdReleaseKindTable_RU prodReleaseKindTable;
        InventByProductTable_RU inventByProductTable;

        InventDim               mainItemInventDim,
                                byProdItemInventDim;

        ProdParametersDim       prodParametersDim = this.prodParametersDim();

        if (!(prodParametersDim.UseReleaseFromProduction_RU && prodParametersDim.CalculatingWIP_RU && prodParametersDim.CalculatingMethod_RU == ProdCalculatingMethod_RU::Proportionally))
        {
            return true;
        }

        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, this.inventDim(), mainItemInventDim);
        mainItemInventDim = InventDim::findOrCreate(mainItemInventDim);

        while select prodReleaseTrans
            where prodReleaseTrans.ProdId       == this.ProdId  &&
                  prodReleaseTrans.Cancelled    == NoYes::No
            join IsReject, ReleaseKindId from prodReleaseKindTable
                where prodReleaseKindTable.ReleaseKindId == prodReleaseTrans.ReleaseKindId                                                      &&
                      (!prodReleaseKindTable.IsReject    || prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::FixedPrice)
        {
            if (prodReleaseKindTable.IsReject)
            {
                ret = checkFailed(strFmt("@GLS115856",
                                         prodReleaseTrans.ItemId,
                                         prodParametersDim.CalculatingMethod_RU,
                                         prodReleaseKindTable.ReleaseKindId,
                                         ProdReleaseCalcPrinciple_RU::Calculated,
                                         prodReleaseTrans.JournalId));
            }
            else
            {
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(prodReleaseTrans.ItemId, prodReleaseTrans.inventDim(), byProdItemInventDim);
                byProdItemInventDim = InventDim::findOrCreate(byProdItemInventDim);

                inventByProductTable = InventByProductTable_RU::find(this.ItemId,
                                                                     mainItemInventDim.InventDimId,
                                                                     prodReleaseTrans.ItemId,
                                                                     byProdItemInventDim.InventDimId);

                if (!inventByProductTable.RecId)
                {
                    ret = checkFailed(strFmt("@GLS115797",
                                             prodReleaseTrans.ItemId,
                                             this.ItemId));
                }
                else if (inventByProductTable.ByProdCosting == ProdByProdCosting_RU::FixedPrice)
                {
                    ret = checkFailed(strFmt("@GLS115856",
                                             prodReleaseTrans.ItemId,
                                             prodParametersDim.CalculatingMethod_RU,
                                             prodReleaseKindTable.ReleaseKindId,
                                             ProdReleaseCalcPrinciple_RU::Calculated,
                                             prodReleaseTrans.JournalId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity()
    {
        return ProjActivity::checkReqActivity(this.ProjId, this.ActivityNumber, tableNum(ProjItemTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the route ID.
    /// </summary>
    /// <returns>
    /// true if the route ID is valid; otherwise, false.
    /// </returns>
    public boolean checkRouteId()
    {
        return ProdTable::validateRouteId(this.RouteId,this.ItemId,this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean checkValid(ProdId prodId)
    {
        boolean         ok = true;

        if (! prodId)
        {
            ok = checkFailed("@SYS17656");
        }

        if (! this && prodId)
        {
            ok = checkFailed(strFmt(ProdTable::txtNotExist(), prodId) );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWIPCalcMethod_RU</Name>
				<Source><![CDATA[
    #define.point('. ')
    public boolean checkWIPCalcMethod_RU(boolean _showPrompt = false)
    {
        ProdParametersDim prodParameters = this.prodParametersDim();

        if (! this.RouteId                   &&
            prodParameters.CalculatingWIP_RU &&
            prodParameters.CalculatingMethod_RU == ProdCalculatingMethod_RU::Proportionally)
        {
            if (! _showPrompt || Box::yesNo("@SYS25493" + #point + "@SYS79387", DialogButton::No) == DialogButton::No)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventUpd_Estimated</c> object from the current record.
    /// </summary>
    /// <param name = "_childBuffer">
    /// A record of any type that controls the current <c>ProdTable</c> record.
    /// </param>
    /// <returns>
    /// The <c>InventUpd_Estimated</c> object.
    /// </returns>
    private InventUpd_Estimated createEstimated(Common _childBuffer)
    {
        return this.type().createEstimated(_childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create production order status change record.
    /// </summary>
    private void createProdStatusChange()
    {
        this.type().createProdStatusChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwReportedFinishedError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the error quantity that was reported as finished.
    /// </summary>
    /// <returns>
    ///     The error quantity in catch-weight units.
    /// </returns>
    public display ProdReportedErrorReportedFinished cwReportedFinishedError()
    {
        return ProdTableJour::pdsCWReportedFinishedError(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwRouteReportedError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch-weight error quantity that is reported.
    /// </summary>
    /// <returns>
    /// The error quantity in catch-weight units.
    /// </returns>
    public display PdsCWInventQty cwRouteReportedError()
    {
        return ProdRouteTrans::cwQtyErrorProd(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _showInfoDelReserv = true)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.status().deleting();

        #ISOCountryRegionCodes

        // All previous cancelled journals will set DateCalc to avoid their appearance
        // in Work in Progress reports. "Calculated" is not changed to avoid side effects.

        ProdRouteTrans      prodRouteTrans;

        update_recordset prodRouteTrans
            setting
                DateCalc = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            where   prodRouteTrans.TransRefId     == this.ProdId                  &&
                    prodRouteTrans.TransRefType   == ProdTransRefType::Production &&
                    prodRouteTrans.DateCalc       == dateNull()                   &&
                    prodRouteTrans.Cancelled      == NoYes::Yes;

        InventRefTransId inventRefTransId = this.itemReqInventRefTransId();

        super();

        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this), _showInfoDelReserv).updateNow();

        this.projCostControlUpdate(inventRefTransId);

        if (this.status().isBefore(ProdStatus::Completed))
        {
            this.onClearingProductionOrderReferences();
        }

        PmfProdCoBy         pmfProdCoBy;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        
        //If status was Created, no InventTransOrigin records exist.
        delete_from pmfProdCoBy
            where   pmfProdCoBy.ProdId          == this.ProdId
            || (
                    pmfProdCoBy.InventRefId     == this.ProdId
                &&  pmfProdCoBy.InventRefType   == InventRefType::Production
               )
            notexists join inventTransOrigin
                where inventTransOrigin.ReferenceId   == pmfProdCoBy.ProdId
                   && inventTransOrigin.InventTransId == pmfProdCoBy.InventTransId;
        
        //If status was reset to Created, keep the record with financial update.
        delete_from pmfProdCoBy
            where   pmfProdCoBy.ProdId          == this.ProdId
            || (
                    pmfProdCoBy.InventRefId     == this.ProdId
                &&  pmfProdCoBy.InventRefType   == InventRefType::Production
               )
            exists join inventTransOrigin
                where inventTransOrigin.ReferenceId   == pmfProdCoBy.ProdId
                   && inventTransOrigin.InventTransId == pmfProdCoBy.InventTransId
            notexists join inventTrans
                where inventTrans.StatusReceipt       == StatusReceipt::Purchased
                   && inventTrans.StatusIssue         == StatusIssue::None
                   && inventTrans.InventTransOrigin   == inventTransOrigin.RecId;

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        this.status().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onClearingProductionOrderReferences</Name>
				<Source><![CDATA[
    private void onClearingProductionOrderReferences()
    {
        this.clearingProductionOrderReferences(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingProductionOrderReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised to clear references to production order.
    /// </summary>
    /// <param name = "_prodTable">The <c>ProdTable</c> record.</param>
    delegate void clearingProductionOrderReferences(ProdTable _prodTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingProductionOrderReferencesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscriber for the <c>ProdTable</c> record clear references event.
    /// </summary>
    /// <param name = "_prodTable">The <c>ProdTable</c> record.</param>
    [SubscribesTo(tablestr(ProdTable), delegateStr(ProdTable, clearingProductionOrderReferences))]
    public static void clearingProductionOrderReferencesEventHandler(ProdTable _prodTable)
    {
        switch (_prodTable.InventRefType)
        {
            case InventRefType::ProdLine:
                ProdBOM     prodBOM = ProdBOM::findTransId(_prodTable.InventRefTransId, true);

                if (prodBOM.RecId && prodBOM.InventRefType)
                {
                    prodBOM.InventRefType       = InventRefType::None;
                    prodBOM.InventRefId         = '';
                    prodBOM.InventRefTransId    = '';
                    prodBOM.update();
                }

                break;

            case InventRefType::Sales:
                SalesLine   salesLine = SalesLine::findInventTransId(_prodTable.InventRefTransId, true);

                if (salesLine.RecId && salesLine.InventRefType)
                {
                    salesLine.clearInventReference();
                    salesLine.update();
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProdTableProj</Name>
				<Source><![CDATA[
    public void deleteProdTableProj(ProjItemTypeProdTable _projItemTypeProdTable)
    {
        ProdTableProj   prodTableProj;

        prodTableProj = this.prodTableProj(_projItemTypeProdTable, true);
        if (prodTableProj)
        {
            prodTableProj.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstWIPCalculationDate_RU</Name>
				<Source><![CDATA[
    public TransDate firstWIPCalculationDate_RU(UnknownNoYes _postedFromInventClosing = UnknownNoYes::Unknown)
    {
        ProdWIPHistoricalCostTable_RU   wipHistoricalCostTable;
        NoYesId                         noYesVal = _postedFromInventClosing == UnknownNoYes::Yes;

        select firstonly TransDate from wipHistoricalCostTable
            order by TransDate
            where wipHistoricalCostTable.ProdId     == this.ProdId                                              &&
                  wipHistoricalCostTable.Cancelled  == NoYes::No                                                &&
                  (! _postedFromInventClosing || wipHistoricalCostTable.PostedFromInventClosing == noYesVal);

        return wipHistoricalCostTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProdBOMReservation</Name>
				<Source><![CDATA[
    public boolean hasProdBOMReservation(ProdReservation _reservation)
    {
        ProdBOM     prodBOM;

        select firstonly RecId from prodBOM
            where prodBOM.ProdId      == this.ProdId
               && prodBOM.EndConsump  == NoYes::No
               && prodBOM.Reservation == _reservation;

        return prodBOM.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCoByReportedFinishedError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if product has the CoBy RAF with qty error.
    /// </summary>
    /// <returns> True if the CoBy RAF was found; otherwise, false. </returns>
    public boolean hasCoByReportedFinishedError()
    {
        return ProdTableJour::hasCoByReportedFinishedError(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorHistoricalCost historicalCostQtyError()
    {
        return ProdTableJour::historicalCostQtyError(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyGood</Name>
				<Source><![CDATA[
    public display ProdReportedGood  historicalCostQtyGood()
    {
        return ProdTableJour::historicalCostQtyGood(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMVersion</Name>
				<Source><![CDATA[
    public void initBOMVersion()
    {
        BOMVersion   bomVersion;

        this.bomId = this.bomId ? this.bomId : InventTable::find(this.ItemId).bomId(this.bomDate, this.QtySched, this.inventDim());

        if (this.inventTable().isFormulaAllowed())
        {
            bomVersion = BOMVersion::selectBomVersionWithPriority(this.ItemId, this.BOMDate, this.QtySched, this.inventDim(), true, true, true, false, true, this.BOMId);
            
            this.initFromBOMVersion(bomVersion, this.QtySched <= 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record based on a BOM version.
    /// </summary>
    /// <param name="_bomVersion">
    /// The BOM version record from which to initialize.
    /// </param>
    /// <param name="_useBomVersionQty">
    /// A Boolean value that indicates whether the quantity of the production should be updated based on
    /// the batch size of the BOM version.
    /// </param>
    public void initFromBOMVersion(BOMVersion _bomVersion, boolean _useBomVersionQty)
    {
        this.bomId = _bomVersion.bomId;

        if (this.PmfReworkBatch)
        {
            this.initReworkOrderFields();
        }
        else
        {
            this.PmfYieldPct = _bomVersion.PmfYieldPct;
        }

        this.PmfCoByVarAllow        = _bomVersion.PmfCoByVarAllow;
        this.PmfTotalCostAllocation = _bomVersion.PmfTotalCostAllocation;

        if (_useBomVersionQty)
        {
            this.QtySched = _bomVersion.PmfBatchSize;
            this.QtySched = this.QtySched? this.QtySched: 1;
            this.QtySched = decRound(
                                    this.QtySched,
                                    UnitOfMeasure::unitOfMeasureDecimalPrecision(
                                        UnitOfMeasure::findBySymbol(InventTable::find(this.ItemId).inventUnitId()).RecId));
            
            // Adding this check to avoid validateFieldValue to be trigger for the PdsCWBatchSched field,
            // and avoid error in the case PdsCWSize field is zero.
            if (this.PdsCWBatchSched != _bomVersion.PdsCWSize)
            {
                this.PdsCWBatchSched = _bomVersion.PdsCWSize;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    public void initFromCaller(Common callerBuffer)
    {
        SalesLine   salesLine;
        ProdBOM     prodBOM;
        ProjTable   projTable;

        switch (callerBuffer.TableId)
        {
            case (tableNum(SalesLine))   :
                salesLine = callerBuffer as SalesLine;
                this.initFromInventTable(InventTable::find(salesLine.ItemId), salesLine.inventDim());
                this.initFromSalesLine(salesLine);
                break;

            case (tableNum(ProdBOM))     :
                prodBOM = callerBuffer as ProdBOM;
                this.initFromInventTable(InventTable::find(prodBOM.ItemId), prodBOM.inventDim());
                this.initFromProdBOM(prodBOM);
                break;

            case (tableNum(ProjTable))     :
                projTable = callerBuffer as ProjTable;
                this.ProjId = projTable.ProjId;
                this.initProjPostingType();
                this.initFromProjTable(projTable);
                break;

            case (tableNum(ProjInvoiceTable)) :
            case (tableNum(ProjWIPTable))     :
                this.initProjPostingType();
                break;

            default:
                this.DlvDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current ProdTable buffer with default values from an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The InventTable buffer that the default values should be taken from.
    /// </param>
    /// <param name="_inventDimDefault">
    /// The InventDim buffer with the preferred inventory dimensions
    /// that should be used instead of the default inventory dimensions from the item.
    /// </param>
    public void initFromInventTable(
                            InventTable    _inventTable,
                            InventDim      _inventDimDefault   = null)
    {
        this.initReleasedProductSpecificDefaulting(_inventTable);
        this.initDimensionsSpecificDefaulting(_inventTable, _inventDimDefault, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        this.Name               = _inventTable.defaultProductName();
        this.DefaultDimension   = this.copyDimension(_inventTable.DefaultDimension);
        this.PropertyId         = _inventTable.PropertyId;
        this.ProdPoolId         = _inventTable.ProdPoolId;
        this.ProdGroupId        = _inventTable.ProdGroupId;
        this.Height             = _inventTable.Height;
        this.Width              = _inventTable.Width;
        this.Depth              = _inventTable.Depth;
        this.Density            = _inventTable.Density;

        this.bomDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
 	}

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes dimension dependent fields.
    /// </summary>
    /// <param name = "_inventTable">The item record; optional.</param>
    /// <param name = "_inventDimDefault">Input for initial defaulting of dimension values; optional.</param>
    /// <param name = "_forceQtyUpdate">Determines if the quantity field should always be re-defaulted even if it is already set; optional.</param>
	public void initDimensionsSpecificDefaulting(InventTable _inventTable = this.inventTable(), InventDim _inventDimDefault = null, boolean _forceQtyUpdate = false)
    {
        InventDim   inventDim;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        inventDim.initFromInventTable(_inventTable,
                                      InventItemOrderSetupType::Invent,
                                      _inventDimDefault ? _inventDimDefault: inventDim);

        inventDim = InventDim::findOrCreate(inventDim);

        boolean isDistinctProductFullySpecified = InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim);
        if (!isDistinctProductFullySpecified)
        {
            inventDim.clearStorageDimensions();
        }

        this.setInventDimIdFromInventDim(inventDim);

        if (isDistinctProductFullySpecified)
        {
            _inventTable.inventItemInventSetup(inventDim.InventDimId).checkNotStopped();

            if (!this.QtySched || _forceQtyUpdate)
            {
                if (PdsGlobal::pdsIsCWItem(_inventTable.ItemId))
                {
                    this.PdsCWBatchSched = this.QtySched
                                ? PdsCatchWeight::cwQty(_inventTable.ItemId,this.QtySched)
                                : 1;
                    this.PdsCWBatchSched = this.PdsCWBatchSched ? this.PdsCWBatchSched : 1;
                    this.QtySched = PdsCatchWeight::inventQty(
                                        _inventTable.ItemId,
                                        this.PdsCWBatchSched);
                }
                else
                {
                    this.QtySched           = _inventTable.inventStandardQty(inventDim.InventDimId);
                    this.QtySched           = this.QtySched? this.QtySched: 1;
                    this.QtySched           = decRound(this.QtySched, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(_inventTable.ItemId,ModuleInventPurchSales::Invent).UnitId)));
                }
            }

            if (this.isProjMethodFinished() || this.isProjMethodConsumed())
            {
                ProjInventJournalTransMapForm::construct(this).initFromInventTable(_inventTable);
            }
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles reinitialization if needed when an associated <c>InventDim</c> buffer is changed.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer.</param>
    /// <param name = "_inventDimFieldId">The field that was changed.</param>
    public void modifiedInventDim(InventDim _inventDim, FieldId _inventDimFieldId)
    {
        boolean isFieldProductOrSiteDimension = _inventDim.siteOrProductDimFieldModified(_inventDimFieldId);
        this.InventDimId = _inventDim.inventDimId;

        if (isFieldProductOrSiteDimension)
        {
            this.initDimensionsSpecificDefaulting();
        }

        _inventDim.refreshFormDataSource(this.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current ProdTable buffer from ItemId.
    /// </summary>
    public void initFromItemId()
    {
        InventDim inventDim;

        this.bomId         = '';
        this.RouteId       = '';

        this.initFromInventTable(InventTable::find(this.ItemId), this.inventDim());
        inventDim = InventDim::find(this.InventDimId);

        // Initialize if site is set
        if (inventDim.InventSiteId)
        {
            this.initBOMVersion();
            this.initRouteVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPmfProdCoBy</Name>
				<Source><![CDATA[
    public void initFromPmfProdCoBy(
        PmfProdCoBy _coBy)
    {
        InventDim           inventDim;
        InventDimParm       inventDimParm;
        InventDimGroupSetup inventDimGroupSetup;

        this.ItemId                 = _coBy.ItemId;
        this.QtySched               = _coBy.QtyCoByCalc;
        this.RemainInventPhysical   = _coBy.QtyCoByCalc;
        this.InventRefType          = InventRefType::ProdLine;
        this.InventRefId            = _coBy.ProdId;
        this.InventRefTransId       = _coBy.InventTransId;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        // The item dimensions from the ProdBOM are merged with the inventDim which was initialized
        inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);
        inventDim.copyPrimaryDim(inventDimGroupSetup,_coBy.inventDim());

        // InventDimParm is flagged for the filled dimensions on the ProdBOm
        inventDimParm.initFromInventDim(_coBy.inventDim());

        // The InventDim is set for the filled dimensions on the ProdBOm
        inventDim.copyDimParmDim(   inventDimGroupSetup,
                                    _coBy.inventDim(),
                                    inventDimParm);

        this.setInventDimIdFromInventDim(inventDim);

        this.initRouteVersion();
        this.initBOMVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    public void initFromProdBOM(ProdBOM  prodBOM)
    {
        InventDim                       inventDim;
        InventDimParm                   inventDimParm;

        this.ItemId                     = prodBOM.ItemId;
        this.QtySched                   = prodBOM.QtyInventCalc;
        this.PdsCWBatchSched            = prodBOM.PdsCWInventCalc;
        this.RemainInventPhysical       = prodBOM.QtyInventCalc;
        this.PdsCWRemainInventPhysical  = prodBOM.PdsCWInventCalc;
        this.InventRefType              = InventRefType::ProdLine;
        this.InventRefId                = prodBOM.ProdId;
        this.InventRefTransId           = prodBOM.InventTransId;
        this.DlvDate                    = prodBOM.RawMaterialDate;
        this.bomId                      = prodBOM.ItemBomId;
        this.RouteId                    = prodBOM.ItemRouteId;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        // The product dimensions from the ProdBOM are merged with the inventDim which was initialized
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, prodBOM.inventDim(), inventDim);

        // InventDimParm is flagged for the filled dimensions on the ProdBOm
        inventDimParm.initFromInventDim(prodBOM.inventDim());

        // The InventDim is set for the filled dimensions on the ProdBOm
        inventDim.copyDimParmDim(InventDimGroupSetup::newItemId(this.ItemId), prodBOM.inventDim(), inventDimParm);

        this.setInventDimIdFromInventDim(inventDim);

        this.initRouteVersion();
        this.initBOMVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the category of the journal line with the default category of the project activity passed in as a parameter.
    /// </summary>
    /// <param name="_projActivity">
    ///    The project activity used to initialize the category of the journal line.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    public void initFromProjTable(ProjTable  _projTable)
    {
        this.ProjId = _projTable.ProjId;

        if (this.isProjMethodFinished() || this.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(this).initFromProjTable(_projTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPo</Name>
				<Source><![CDATA[
    public void initFromReqPo(ReqPO       _reqPO)
    {
        this.ItemId                 = _reqPO.ItemId;
        this.QtyCalc                = _reqPO.Qty;
        this.QtySched               = _reqPO.Qty;
        this.RemainInventPhysical   = _reqPO.Qty;

        this.PdsCWRemainInventPhysical = _reqPO.PdsCWReqQty;
        this.PdsCWBatchEst             = _reqPO.PdsCWReqQty;
        this.PdsCWBatchSched           = _reqPO.PdsCWReqQty;

        this.DlvDate                = _reqPO.ReqDateDlv;
        this.DlvTime                = _reqPO.ReqTime;

        this.PlanningPriority       = _reqPO.PlanningPriority;

        this.bomDate                = ReqTransPoMarkFirmUseDlvDateForBOMVersionFlight::instance().isEnabled()? _reqPO.getBomDate() : _reqPO.ReqDate;

        this.ReqPOId                = _reqPO.RefId;
        this.ReqPlanIdSched         = ReqPlanVersion::find(_reqPO.PlanVersion).ReqPlanId;
        this.setInventDimId(_reqPO.CovInventDimId);

        this.bomId                  = _reqPO.ItemBomId;
        this.RouteId                = _reqPO.ItemRouteId;

        this.SchedStart             = _reqPO.SchedFromDate;
        this.SchedFromTime          = _reqPO.ReqTimeOrder;
        this.SchedEnd               = _reqPO.SchedToDate;
        this.SchedToTime            = _reqPO.ReqTime;

        this.CalcDate               = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.SchedDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.LatestSchedDate        = this.DlvDate;
        this.LatestSchedDirection   = SchedDirection::Backward;

        this.SchedStatus            = _reqPO.RouteJobsUpdated ? ProdSchedStatus::JobScheduled : ProdSchedStatus::OperationScheduled;
        this.RouteJobs              = _reqPO.RouteJobsUpdated;

        if (#PmfEnabled)
        {
            this.PmfBulkOrd         = _reqPO.PmfBulkOrd;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes production order's delivery date and time
    /// </summary>
    /// <param name = "_deliveryDate">Scheduled delivery date</param>
    /// <param name = "_deliveryTime">Scheduled delivery time</param>
    public void initDeliveryDateTime(SchedDate _deliveryDate, SchedTime _deliveryTime)
    {
        this.DlvDate = _deliveryDate;
        this.DlvTime = _deliveryTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReworkProdTable</Name>
				<Source><![CDATA[
    public void initFromReworkProdTable(ProdTable  _prodTable) // old production
    {
        #define.Percent(100)

        this.ItemId                 = _prodTable.ItemId;

        this.ProdOrigId             = _prodTable.ProdId;

        this.Name                   = _prodTable.Name;
        this.ProdGroupId            = _prodTable.ProdGroupId;
        this.ProdPrio               = _prodTable.ProdPrio;
        this.ProdType               = _prodTable.ProdType;

        this.Height                 = _prodTable.Height;
        this.Width                  = _prodTable.Width;
        this.Depth                  = _prodTable.Depth;
        this.Density                = _prodTable.Density;

        this.PmfReworkBatch         = NoYes::Yes;
        this.Reservation            = ProdReservation::None;
        this.ProdPostingType        = _prodTable.ProdPostingType;
        this.DefaultDimension       = this.copyDimension(_prodTable.DefaultDimension);

        this.bomDate                = _prodTable.bomDate;
        this.ProdPoolId             = _prodTable.ProdPoolId;
        this.ProfitSet              = _prodTable.ProfitSet;
        this.PropertyId             = _prodTable.PropertyId;

        this.InventRefType          = InventRefType::Production;
        this.InventRefId            = _prodTable.ProdId;
        this.InventRefTransId       = _prodTable.InventTransId;

        this.bomId                  = _prodTable.bomId;

        this.setInventDimId(_prodTable.InventDimId);

        this.ReqPlanIdSched         = _prodTable.ReqPlanIdSched;
        this.ReqPOId                = _prodTable.ReqPOId;

        this.PmfYieldPct = #Percent;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWBatchSched = 1;
            this.QtySched = PdsCatchWeight::inventQty(
                                this.ItemId,
                                this.PdsCWBatchSched);
        }
        else
        {
            this.QtySched = min(_prodTable.QtySched,1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    public void initFromSalesLine(SalesLine salesLine)
    {
        InventDim                       inventDim;
        InventDimParm                   inventDimParm;
        SalesTable                      salesTable;

        this.ItemId                 = salesLine.ItemId;

        // The InventDimId is initialized from InventTable
        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        // The product dimensions from the SalesLine are merged with the inventDim which was initialized from InventTable
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, salesLine.inventDim(), inventDim);

        // InventDimParm is flagged for the filled dimensions on the SalesLine
        inventDimParm.initFromInventDim(salesLine.inventDim());

        // The InventDim is set for the filled dimensions on the SalesLine
        inventDim.copyDimParmDim(InventDimGroupSetup::newItemId(this.ItemId),
                                 salesLine.inventDim(),
                                 inventDimParm);

        inventDim                   = InventDim::findOrCreate(inventDim);

        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId)
            && salesLine.inventTable().isFormulaAllowed())
        {
            this.PdsCWBatchSched = salesLine.PdsCWRemainInventPhysical;
            this.QtySched        = salesLine.RemainInventPhysical;
        }
        else
        {
            this.QtySched = InventTable::calculateOrderQuantity(salesLine.inventTable().inventItemInventSetup(inventDim.InventDimId),
																salesLine.InventDimId,
																salesLine.RemainInventPhysical, 
																salesLine.inventTable().inventUnitId(),
																false);
        }
        this.RemainInventPhysical   = this.QtySched;
        this.DlvDate                = salesLine.ConfirmedDlv;
        this.bomId                  = salesLine.ItemBOMId;
        this.RouteId                = salesLine.ItemRouteId;
        this.bomDate                = salesLine.ConfirmedDlv;

        this.InventRefType          = InventRefType::Sales;
        this.InventRefId            = salesLine.SalesId;
        this.InventRefTransId       = salesLine.InventTransId;

        this.DefaultDimension       = this.mergeDimension(salesLine.DefaultDimension);

        if (this.QtySched < salesLine.RemainInventPhysical)
        {
            info("@SYS82140");
        }

        this.setInventDimIdFromInventDim(inventDim);

        this.initRouteVersion();
        this.initBOMVersion();

        if (salesLine.ProjId)
        {
            salesTable = salesLine.salesTable();
            this.ProjId = salesLine.ProjId;
            this.ActivityNumber = salesLine.ActivityNumber;
            this.ProjCategoryId = salesLine.ProjCategoryId;
            if (salesTable.SalesType == SalesType::ItemReq)
            {
                this.ProjPostingType = ProjParameters::prodPostingType();
            }
            else
            {
                this.ProjPostingType = ProjProdPostingType::FinishedItemMethod;
            }

            this.ProjLinkedToOrder = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSplitProdTable</Name>
				<Source><![CDATA[
    public void initFromSplitProdTable(ProdTable  _prodTable) // old production
    {
        this.ItemId                 = _prodTable.ItemId;

        this.ProdOrigId             = _prodTable.ProdId;

        this.Name                   = _prodTable.Name;
        this.ProdGroupId            = _prodTable.ProdGroupId;
        this.ProdPrio               = _prodTable.ProdPrio;
        this.ProdType               = _prodTable.ProdType;

        this.Height                 = _prodTable.Height;
        this.Width                  = _prodTable.Width;
        this.Depth                  = _prodTable.Depth;
        this.Density                = _prodTable.Density;

        this.Reservation            = _prodTable.Reservation;
        this.ProdPostingType        = _prodTable.ProdPostingType;
        this.DefaultDimension       = this.copyDimension(_prodTable.DefaultDimension);

        this.bomDate                = _prodTable.bomDate;
        this.ProdPoolId             = _prodTable.ProdPoolId;
        this.ProfitSet              = _prodTable.ProfitSet;
        this.PropertyId             = _prodTable.PropertyId;

        this.InventRefType          = _prodTable.InventRefType;
        this.InventRefId            = _prodTable.InventRefId;
        this.InventRefTransId       = _prodTable.InventRefTransId;

        this.ProdWHSReleasePolicy   = _prodTable.ProdWHSReleasePolicy;

        this.bomId                  = _prodTable.bomId;
        this.RouteId                = _prodTable.RouteId;

        this.setInventDimId(_prodTable.InventDimId);

        this.ReqPlanIdSched         = _prodTable.ReqPlanIdSched;
        this.ReqPOId                = _prodTable.ReqPOId;

        if (#PmfEnabled)
        {
            this.PmfYieldPct = _prodTable.PmfYieldPct;
            this.PmfCoByVarAllow = _prodTable.PmfCoByVarAllow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjPostingType</Name>
				<Source><![CDATA[
    public void initProjPostingType()
    {
        if (this.ProjId)
        {
            this.ProjPostingType = ProjParameters::prodPostingType();

            if (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod)
            {
                this.DlvDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
        else
        {
            this.ProjPostingType = ProjProdPostingType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReworkOrderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields for a reword order.
    /// </summary>
    public void initReworkOrderFields()
    {
        #define.Percent(100)

        if (this.PmfReworkBatch)
        {
            this.PmfYieldPct = #Percent;
            this.Reservation = ProdReservation::None;
            this.RouteId     = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRouteVersion</Name>
				<Source><![CDATA[
    public void initRouteVersion()
    {
        this.RouteId = this.RouteId ? this.RouteId : InventTable::find(this.ItemId).routeId(this.bomDate, this.QtySched, this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        ProdParameters prodParameters = ProdParameters::find();

        this.Reservation          = prodParameters.ItemReservation;
        this.ProdWHSReleasePolicy = prodParameters.ProdWHSReleasePolicy;
        this.ProdPostingType      = prodParameters.ProdPostingType;
        this.ProfitSet            = prodParameters.ProfitSet;

        this.bomDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (#PmfEnabled)
        {
            this.PmfYieldPct = 100;
        }

        this.DlvTime        = ReqParameters::find().ReqTimePoDefault;

        this.ProjPostingType = ProjProdPostingType::None;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _dropEstimated = false, Common _childBuffer = null, boolean _expandBOMRoute = true)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        #ISOCountryRegionCodes

        this.status().inserting();

        this.onCheckingProductionOrderReferences();

        this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        ProdTableType prodTableType = this.type();

        if (! this.ProdId)
        {
            this.ProdId = prodTableType.initProdId(false);
        }
        else
        {
            prodTableType.prodIdUsed();
        }

        this.status().setBackStatus();

        if (! this.CollectRefProdId)
        {
            this.CollectRefProdId      = this.ProdId;
            this.CollectRefLevel       = 0;
        }

        if (this.isProjMethodFinished())
        {
            ProjInventJournalTransMapForm::construct(this).insertPost();
        }

        if (_expandBOMRoute)
        {
            // Check BOM integrity early
            prodTableType.initializeBOMSearchWithBOMCheck();
        }

        boolean     dropEstimated = _dropEstimated;

        if (!this.canInventUpdExpected())
        {
            dropEstimated = true;
        }

        InventUpd_Estimated estimated;

        if (!dropEstimated)
        {
            estimated = this.createEstimated(_childBuffer);
            estimated.updateNow();
        }

        this.setGanttColor();

        super();

        if (estimated)
        {
            estimated.updateOwnerRelationship();
        }

        this.onUpdatingProductionOrderReferences();

        if (_expandBOMRoute)
        {
            prodTableType.expandBOMRoute();
        }

        if (!this.isBatchBalancingEnabled())
        {
            this.updateBOMReservation();
        }

        // Create the WHSProdTable record.
        WHSProdTable::createFromProdTable(this);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }

        this.status().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCheckingProductionOrderReferences</Name>
				<Source><![CDATA[
    private void onCheckingProductionOrderReferences()
    {
        this.checkingProductionOrderReferences(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkingProductionOrderReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the references for the given <c>ProdTable</c> record.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <remarks>
    ///  The subscriber is expected to throw an error if the check fails.
    /// </remarks>
    delegate void checkingProductionOrderReferences(ProdTable _prodTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkingProductionOrderReferencesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscriber for checking the references for the given <c>ProdTable</c> record.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    [SubscribesTo(tableStr(ProdTable), delegateStr(ProdTable, checkingProductionOrderReferences))]
    public static void checkingProductionOrderReferencesEventHandler(ProdTable _prodTable)
    {
        switch (_prodTable.InventRefType)
        {
            case InventRefType::ProdLine:
                ProdTable prodTableParent = ProdTable::find(_prodTable.InventRefId);

                _prodTable.CollectRefLevel     = prodTableParent.CollectRefLevel  + 1;
                _prodTable.CollectRefProdId    = prodTableParent.CollectRefProdId;

                ProdBOM prodBOM = ProdBOM::findTransId(_prodTable.InventRefTransId, true);

                if (!_prodTable.checkRefProdBOM(prodBOM))
                {
                    throw error("@SYS18447");
                }

                break;

            case InventRefType::Sales:
                SalesLine salesLine = SalesLine::findInventTransId(_prodTable.InventRefTransId, true);

                if (! _prodTable.checkRefSalesLine(salesLine))
                {
                    throw error("@SYS18447");
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdatingProductionOrderReferences</Name>
				<Source><![CDATA[
    private void onUpdatingProductionOrderReferences()
    {
        this.updatingProductionOrderReferences(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingProductionOrderReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates references from the given <c>ProdTable</c> record. 
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    delegate void updatingProductionOrderReferences(ProdTable _prodTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingProductionOrderReferencesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscriber for updating any references from the <c>ProdTable</c> record.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    [SubscribesTo(tableStr(ProdTable), delegateStr(ProdTable, updatingProductionOrderReferences))]
    public static void updatingProductionOrderReferencesEventHandler(ProdTable _prodTable)
    {
        boolean updateMarking;
        switch (_prodTable.InventRefType)
        {
            case InventRefType::ProdLine:

                ProdBOM prodBOM = ProdBOM::findTransId(_prodTable.InventRefTransId, true);
                prodBOM.InventRefType         = InventRefType::Production;
                prodBOM.InventRefId           = _prodTable.ProdId;
                prodBOM.InventRefTransId      = _prodTable.InventTransId;

                updateMarking = (_prodTable.InventDimId != prodBOM.InventDimId) ? true : false;

                prodBOM.setInventDimId(_prodTable.InventDimId);
                prodBOM.update();

                // Update marking
                if (updateMarking)
                {
                    InventTransOrigin::updateMarking(
                            InventTransOrigin::findByInventTransId(_prodTable.InventTransId).RecId,
                            InventTransOrigin::findByInventTransId(prodBOM.InventTransId).RecId,
                            _prodTable.QtySched,
                            '',
                            SortOrder::Ascending,
                            false,
                            _prodTable.inventDim(),
                            InventMovement::construct(_prodTable).markingInventDimParmFixed(),
                            _prodTable.PdsCWBatchSched);
                }

                InventUpd_Reservation::updateReserveRefTransId(InventMovement::construct(prodBOM));

                break;

            case InventRefType::Sales:

                SalesLine salesLine = SalesLine::findInventTransId(_prodTable.InventRefTransId, true);
                if (_prodTable.QtySched >= salesLine.RemainInventPhysical)
                {
                    salesLine.InventRefType      = InventRefType::Production;
                    salesLine.InventRefId        = _prodTable.ProdId;
                    salesLine.InventRefTransId   = _prodTable.InventTransId;
                }

                updateMarking = (_prodTable.InventDimId != salesLine.InventDimId) ? true : false;
                if (InventMovement::construct(salesLine).canHaveReservedWork())
                {
                    InventDim inventDimBelow = InventDim::find(_prodTable.InventDimId);
                    inventDimBelow.clearLocationAndBelowDim(_prodTable.ItemId);
                    inventDimBelow = InventDim::findOrCreate(inventDimBelow);
                    salesLine.setInventDimId(inventDimBelow.InventDimId);
                }
                else
                {
                    salesLine.setInventDimId(_prodTable.InventDimId);
                }

                salesLine.update();

                if (updateMarking && ProdTableUpdateReferencesValidateQtyBeforeMarkingFlight::instance().isEnabled())
                {
                    // The salesLine.qtyMarked returns a negative value. If the sum is greater than 0, 
                    // it indicates that there is unmarked quantity remaining, and marking 
                    //should be executed.
                    updateMarking = salesLine.QtyOrdered + salesLine.qtyMarked() > 0;
                }

                // Update marking
                if (updateMarking)
                {
                    InventTransOrigin::updateMarking(
                            InventTransOrigin::findByInventTransId(_prodTable.InventTransId).RecId,
                            InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId,
                            _prodTable.QtySched,
                            '',
                            SortOrder::Ascending,
                            false,
                            _prodTable.inventDim(),
                            InventMovement::construct(_prodTable).markingInventDimParmFixed(),
                            _prodTable.PdsCWBatchSched);
                }

                InventUpd_Reservation::updateReserveRefTransId(InventMovement::construct(salesLine));

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromForm</Name>
				<Source><![CDATA[
    public InventDimId insertFromForm(
        InventDim   _inventDim,
        NumberSeq   _numberSeq
        )
    {
        ttsbegin;

        this.setInventDimIdFromInventDim(_inventDim);

        if (_numberSeq)
        {
            _numberSeq.used();
        }

        this.insert();

        ttscommit;

        return this.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSplitProduction</Name>
				<Source><![CDATA[
    public void insertSplitProduction()
    {        
        #ISOCountryRegionCodes

        ttsbegin;

        this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        this.ProdId        = this.type().initProdId(false);

        this.status().setBackStatus();

        if (! this.CollectRefProdId)
        {
            this.CollectRefProdId      = this.ProdId;
            this.CollectRefLevel       = 0;
        }

        InventUpd_Estimated estimated = InventUpd_Estimated::newProdTable(this,null,this.type());
        estimated.updateNow();

        this.doInsert();

        estimated.updateOwnerRelationship();
        estimated.updateReservation();

        WHSProdTable::createFromProdTable(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventDim</c> record that is related to the current item.
    /// </summary>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventDim</c> record; otherwise, an empty buffer.</returns>
    public InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active <c>InventItemPrice</c> record that is associated with the record.
    /// </summary>
    /// <returns>
    /// The <c>InventItemPrice</c> record that is associated with the record.
    /// </returns>
    public InventItemPrice inventItemPrice()
    {
        InventItemPrice inventItemPrice;

        inventItemPrice = InventItemPrice::findCurrent(
                this.ItemId,
                CostingVersionPriceType::Cost,
                this.InventDimId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                this.inventDim().InventSiteId);

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovementProj</Name>
				<Source><![CDATA[
    public InventMovement inventMovementProj(ProdTableProj prodTableProj = null)
    {
        InventMov_Prod_Proj inventMov_Prod_Proj;

        inventMov_Prod_Proj = InventMov_Prod_Proj::newFromProdTable(this);

        if (prodTableProj)
        {
            inventMov_Prod_Proj.parmProdTableProj(prodTableProj);
        }

        return inventMov_Prod_Proj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        InventTable inventTable = InventTable::find(this.ItemId, _forUpdate);

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the default inventory unit of the related product.
    /// </summary>
    /// <returns>
    ///     An unit of measure symbol.
    /// </returns>
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodConsumed</Name>
				<Source><![CDATA[
    public boolean isProjMethodConsumed()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        return (this.ProjPostingType == ProjProdPostingType::ConsumedMethod && this.ProjId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodConsumedAndLinkedToOrder</Name>
				<Source><![CDATA[
    public boolean isProjMethodConsumedAndLinkedToOrder()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        return (this.ProjPostingType == ProjProdPostingType::ConsumedMethod && this.ProjLinkedToOrder && this.ProjId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodFinished</Name>
				<Source><![CDATA[
    public boolean isProjMethodFinished()
    {
        return (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod && !this.ProjLinkedToOrder && this.ProjId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodLinkedToOrder</Name>
				<Source><![CDATA[
    public boolean isProjMethodLinkedToOrder()
    {
        return (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod && this.ProjLinkedToOrder && this.ProjId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptQtyEqual_RU</Name>
				<Source><![CDATA[
    public boolean isReceiptQtyEqual_RU(TransDate _calculationDate)
    {
        ProdTableJour   prodTableJour;
        ProdRouteTrans  prodRouteTrans;

        OprNum          lastOprNum;

        if (!this.useReleaseFromProduction_RU())
        {
            return true;
        }

        // calculate reported finished good
        select sum(QtyGood) from prodTableJour
            where prodTableJour.ProdId         == this.ProdId           &&
                  prodTableJour.JournalType    == ProdJourType::Receipt &&
                  prodTableJour.Canceled       == NoYes::No             &&
                  prodTableJour.TransDate      <= _calculationDate;

        // calculate good quantity of finished production (in the last operation number)
        lastOprNum = (select firstonly OprNum from prodRoute
                        order by OprNum desc
                        where prodRoute.ProdId == this.ProdId).OprNum;

        select sum(QtyGood) from prodRouteTrans
            where prodRouteTrans.OprNum     == lastOprNum       &&
                  prodRouteTrans.TransRefId == this.ProdId      &&
                  prodRouteTrans.Cancelled  == NoYes::No        &&
                  prodRouteTrans.DateWIP    <= _calculationDate;

        if (prodTableJour.QtyGood != prodRouteTrans.QtyGood)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReqExploded</Name>
				<Source><![CDATA[
    public boolean isReqExploded()
    {
        return ((select firstonly reqTrans
                    where reqTrans.PlanVersion              == ReqPlanVersion::findActiveReqPlanIdDynamic().RecId   &&
                          reqTrans.RefType                  == ReqRefType::ProdLine                                 &&
                          reqTrans.RefId                    == this.ProdId                                          &&
                          reqTrans.CovQty                   != 0).RecId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the product number from the current production order.
    /// </summary>
    /// <returns>The product number used in the production order.</returns>
    public display EcoResProductDisplayProductNumber productNumber()
    {
        InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(this.ItemId, this.inventDim());
        RefRecId product;
        if (inventDimCombination)
        {
            product = inventDimCombination.DistinctProductVariant;
        }
        else
        {
            product = InventTable::find(this.ItemId).Product;
        }

        return EcoResProduct::find(product).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemReqInventRefTransId</Name>
				<Source><![CDATA[
    public InventRefTransId itemReqInventRefTransId()
    {
        InventTransOriginProdTable  inventTransOriginProdTable;
        InventTransOrigin           inventTransOriginRef;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        InventTrans                 inventTrans;
        SalesLine                   salesLine;

        if (this.isProjMethodConsumed() && this.ProjLinkedToOrder)
        {
            select firstonly TableId from inventTransOriginProdTable
                where inventTransOriginProdTable.ProdOrderDataAreaId == this.DataAreaId
                   && inventTransOriginProdTable.ProdOrderId         == this.ProdId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOriginProdTable.InventTransOrigin
                       && inventTrans.MarkingRefInventTransOrigin
                    join InventTransId from inventTransOriginRef
                        where inventTransOriginRef.RecId             == inventTrans.MarkingRefInventTransOrigin
                           && inventTransOriginRef.ReferenceCategory == InventTransType::Sales
                        exists join inventTransOriginSalesLine
                            where inventTransOriginSalesLine.InventTransOrigin  == inventTransOriginRef.RecId
                            join TableId from salesLine
                                where salesLine.InventTransId       == inventTransOriginSalesLine.SalesLineInventTransId
                                   && salesLine.DataAreaId          == inventTransOriginSalesLine.SalesLineDataAreaId
                                   && salesLine.SalesType           == SalesType::ItemReq;

            return inventTransOriginRef.InventTransId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastWIPCalculationDate_RU</Name>
				<Source><![CDATA[
    public TransDate lastWIPCalculationDate_RU(UnknownNoYes _postedFromInventClosing = UnknownNoYes::Unknown)
    {
        ProdWIPHistoricalCostTable_RU   wipHistoricalCostTable;
        NoYesId                         noYesVal = (_postedFromInventClosing == UnknownNoYes::Yes) ? NoYes::Yes : NoYes::No;

        select firstonly TransDate from wipHistoricalCostTable
            order by TransDate desc
            where wipHistoricalCostTable.ProdId         == this.ProdId                                          &&
                  wipHistoricalCostTable.Cancelled      == NoYes::No                                            &&
                  wipHistoricalCostTable.CanBeCancelled == NoYes::Yes                                           &&
                  (! _postedFromInventClosing || wipHistoricalCostTable.PostedFromInventClosing == noYesVal);

        return wipHistoricalCostTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryRegister</Name>
				<Source><![CDATA[
    public boolean mandatoryRegister()
    {
        return InventTable::find(this.ItemId).modelGroup().MandatoryRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        InventQualityOrderTable     inventQualityOrderTable;

        if (_fieldName == fieldStr(ProdTable, PmfReworkBatch)
            && this.PmfReworkBatch)
        {
            this.PmfYieldPct = 100;
            this.ProdType = ProdType::Process;
            info("@PRO2251");
        }

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ProdTable, ProjId):
                ProjInventJournalTransMapForm::construct(this).fieldModifiedProjIdPost();
                break;
            case fieldStr(ProdTable, ProjPostingType):
                ProjInventJournalTransMapForm::construct(this).fieldModifiedProjProdPostingTypePost();
                break;
            case fieldStr(ProdTable, ItemId):
                if ((this.ProjPostingType == ProjProdPostingType::FinishedItemMethod &&
                    !this.ProjLinkedToOrder)                                         ||
                    this.ProjPostingType == ProjProdPostingType::ConsumedMethod)
                {
                    ProjInventJournalTransMapForm::construct(this).fieldModifiedItemIdPost();
                }
                break;
            case fieldStr(ProdTable, ProjCategoryId):
                if (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod &&
                    !this.ProjLinkedToOrder)
                {
                    ProjInventJournalTransMapForm::construct(this).fieldModifiedProjCatetoryIdPost();
                }
                break;
            case fieldStr(ProdTable, ProjSalesCurrencyId):
                if (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod &&
                    !this.ProjLinkedToOrder)
                {
                    ProjInventJournalTransMapForm::construct(this).fieldModifiedProjSalesCurrencyIdPost();
                }
                break;
            case fieldStr(ProdTable, ProjSalesUnitId):
                if (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod &&
                    !this.ProjLinkedToOrder)
                {
                    ProjInventJournalTransMapForm::construct(this).fieldModifiedQtyPost();
                }
                break;
            case fieldStr(ProdTable, ActivityNumber):
                if (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod &&
                !this.ProjLinkedToOrder)
                {
                    ProjInventJournalTransMapForm::construct(this).fieldModifiedActivityNumberPost();
                }
                else if (this.ProjPostingType == ProjProdPostingType::ConsumedMethod)
                {
                    if (this.projIsUnposted())
                    {
                        this.projCopyActivityToLines(this.ActivityNumber);
                    }
                }
                break;
            case fieldStr(ProdTable, QtySched):
                this.status().updateBOMRoute();
                if (InventParameters::find().UseQualityManagement)
                {
                    if (this.qualityOrderStatusDisplay() == InventTestOrderStatusDisplay::Open ||
                       (select inventQualityOrderTable
                            where inventQualityOrderTable.OrderStatus   == InventTestOrderStatus::Open
                               && inventQualityOrderTable.ReferenceType == InventTestReferenceType::RouteOpr
                               && inventQualityOrderTable.InventRefId   == this.ProdId).RecId)
                    {
                        throw error("@SYS113930");
                    }
                }
                break;
            case fieldStr(ProdTable, DlvDate):
                this.status().updateBOMRoute();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDelivery</Name>
				<Source><![CDATA[
    public display ProdQtyOverDelivery overDelivery()
    {
        ProdQtyOverDelivery                 prodQtyOverDelivery = 0;
        DictTable                           dictTableProdTable;
        ProdReportedGood                    prodReportedGood;

        dictTableProdTable = new DictTable(tableNum(ProdTable));

        if (dictTableProdTable.rights() >= AccessType::View)
        {
            if (this.InventRefType != InventRefType::ProdLine)
            {
                if (!this.itemReqInventRefTransId())
                {
                    prodReportedGood = this.reportedFinishedGood();
                    if (prodReportedGood > this.QtySched)
                    {
                        prodQtyOverDelivery = -(prodReportedGood - this.QtySched);
                    }
                }
            }

            return prodQtyOverDelivery;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsCatchWeightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets whether the catch-weight feature is enabled.
    /// </summary>
    /// <returns>
    ///     true if the feature is enabled; otherwise, false.
    /// </returns>
    public Display boolean PdsCatchWeightEnabled()
    {
        return #PdsCatchWeightEnabled ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyError</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWBatchErr pdsCWHistoricalCostQtyError()
    {
        PdsCWBatchErr  pdsCWBatchErr = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(ProdTableJour),
                           fieldNum(ProdTableJour, PdsCWBatchErr),
                           AccessType::View))
        {
            pdsCWBatchErr = ProdTableJour::pdsCWHistoricalCostQtyError(
                                                this.ProdId);
        }

        return pdsCWBatchErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyGood</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWBatchGood pdsCWHistoricalCostQtyGood()
    {
        PdsCWBatchGood  pdsCWBatchGood = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(ProdTableJour),
                           fieldNum(ProdTableJour, PdsCWBatchGood),
                           AccessType::View))
        {
            pdsCWBatchGood = ProdTableJour::pdsCWHistoricalCostQtyGood(
                                                this.ProdId);
        }

        return pdsCWBatchGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRegisteredQty</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWRegisteredQty()
    {
        PdsCWInventQty pdsCWInventQty = 0;
        InventTransOriginId inventTransOriginId;

        //Check if user has security access
        if (hasFieldAccess(tableNum(InventSum),fieldNum(InventSum, PdsCWRegistered),AccessType::View))
        {
            inventTransOriginId = InventTransOriginProdTable::findInventTransOriginId(this.DataAreaId, this.ProdId);
            pdsCWInventQty = InventTransSum::newStandard().pdsCWidRegistered(inventTransOriginId);
        }

        return pdsCWInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    public display PdsCWInventQty pdsCWRemainInventFinancial()
    {
        InventTransIdSum transIdSum;
        PdsCWInventQty   pdsCWInventQty = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(InventSum),
                           fieldNum(InventSum, PdsCWDeducted),
                           AccessType::View)
            && hasFieldAccess(tableNum(InventSum),
                          fieldNum(InventSum, PdsCWReceived),
                          AccessType::View))
        {
            InventTransOriginId prodInventTransOriginId = InventTransOriginProdTable::findInventTransOriginId(this.DataAreaId, this.ProdId);
            transIdSum = InventTransIdSum::newTransOriginId(prodInventTransOriginId);
            pdsCWInventQty = transIdSum.pdsCWPhysical();
        }

        return pdsCWInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedErr</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display PdsCWBatchErr pdsCWReportedFinishedErr()
    {
        PdsCWBatchErr  pdsCWBatchErr = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(ProdTableJour),
                           fieldNum(ProdTableJour, PdsCWBatchErr),
                           AccessType::View))
        {
            pdsCWBatchErr = ProdTableJour::pdsCWReportedFinishedError(this.ProdId);
        }

        return pdsCWBatchErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedGood</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display PdsCWBatchGood pdsCWReportedFinishedGood()
    {
        PdsCWBatchGood  pdsCWBatchGood = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(ProdTableJour),
                           fieldNum(ProdTableJour, PdsCWBatchGood),
                           AccessType::View))
        {
            pdsCWBatchGood = ProdTableJour::pdsCWReportedFinishedGood(this.ProdId);
        }

        return pdsCWBatchGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfRemainCostAlloc</Name>
				<Source><![CDATA[
    public PmfCostAllocationPct pmfRemainCostAlloc()
    {
        return 100 - this.pmfTotalCostAlloc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfTotalCostAlloc</Name>
				<Source><![CDATA[
    public PmfCostAllocationPct pmfTotalCostAlloc(RefRecId _refRecId = 0)
    {
        PmfProdCoBy prodCoBy;

        select sum(CostAllocationPct)
            from prodCoBy
            where prodCoBy.ProdId == this.ProdId
                && prodCoBy.ProductType == PmfProductType::Co_Product
                && prodCoBy.CostAllocationPct > 0.0
                && prodCoBy.RecId != _refRecId;

        return prodCoBy.CostAllocationPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateTCA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cost allocation fields based on the usage of the total cost allocation methodology.
    /// </summary>
    /// <param name="_isTCA">
    /// A Boolean value that indicates whether the record uses the total cost allocation methodology or not.
    /// </param>
    /// <returns>
    /// true if record needs to be updated; otherwise false.
    /// </returns>
    public boolean pmfUpdateTCA(boolean _isTCA = false)
    {
        PmfProdCoBy     coby;
        boolean         ret = true;

        if (this.orig().PmfTotalCostAllocation != this.PmfTotalCostAllocation)
        {
            select firstonly RecId
                from coby
                where coby.ProdId == this.ProdId;

            if (coby.RecId)
            {
                if (appl.ttsLevel() == 0
                    && hasGUI()
                    && (Box::okCancel("@PRO2838", DialogButton::Cancel, "@PRO2839") == DialogButton::Ok))
                {
                    ttsbegin;

                    while select forupdate coby
                        where coby.ProdId == this.ProdId
                    {
                        coby.PmfCoByMap::updateCostAllocationFromTCA(_isTCA);
                        coby.update();
                    }

                    ttscommit;
                }
                else
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfValidateTCA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PmfProdCoBy</c> records for TCA requirements.
    /// </summary>
    /// <returns>
    /// true if the <c>PmfProdCoBy</c> item has an active cost price; otherwise false .
    /// </returns>
    public boolean pmfValidateTCA()
    {
        PmfProdCoBy     coby;
        boolean         ret = true;

        while select forupdate coby
            where coby.ProdId           == this.ProdId
                && coby.CostAllocation  == PmfCostAllocationMethod::TCA
        {
            ret = PmfTCACostPriceValidation::runProdCoBy(this, coby.ItemId, coby.InventDimId);

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfYieldPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the yield percentage.
    /// </summary>
    /// <returns>
    /// The Item Yield as 0 for the non Process Production type.
    /// </returns>
    public display PmfYieldPct pmfYieldPercentage()
    {
        PmfYieldPct yield;

        if (this.ProdType == ProdType::Process)
        {
            yield = this.PmfYieldPct;
        }
        return yield;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodCalcTrans</Name>
				<Source><![CDATA[
    public ProdCalcTrans prodCalcTrans(boolean _forUpdate = false)
    {
        return ProdCalcTrans::findIdRef(this.TableId,this.RecId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodParametersDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ProdParametersDim</c> record based on the <c>inventDimId</c> of this record.
    /// </summary>
    /// <returns>
    /// The <c>ProdParametersDim</c> record.
    /// </returns>
    public ProdParametersDim prodParametersDim()
    {
        return ProdParametersDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodStatusParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>ProdStatusParameters</c> records.
    /// </summary>
    /// <param name="_fromStatus">
    /// The <c>ProdStatusParameters.FromProdStatus</c> value to search for.
    /// </param>
    /// <param name="_toStatus">
    /// The <c>ProdStatusParameters.ToProdStatus</c> value to search for.
    /// </param>
    /// <returns>
    /// The <c>ProdStatusParameters</c> record.
    /// </returns>
    public ProdStatusParameters prodStatusParameters(
                                     ProdStatusAll  _fromStatus,
                                     ProdStatusAll  _toStatus)
    {
        return ProdStatusParameters::find(this.InventDimId,_fromStatus,_toStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableProj</Name>
				<Source><![CDATA[
    public ProdTableProj prodTableProj(ProjItemTypeProdTable _projItemTypeProdTable, boolean _forUpdate = false)
    {
        return ProdTableProj::find(this.ProdId,_projItemTypeProdTable,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableRef</Name>
				<Source><![CDATA[
    public ProdTable prodTableRef(boolean _forUpdate = false)
    {
        return ProdTable::find(this.InventRefId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCopyActivityToLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project activity on the production BOM, production route, route card journal and picking list journal.
    /// </summary>
    /// <param name="_activityNum">
    /// A <c>smmActivityNumber</c> record that contains the activity to update on the production order.
    /// </param>
    public void projCopyActivityToLines(smmActivityNumber _activityNum)
    {
        ProdBOM             prodBOM;
        ProdRouteProj       prodRouteProj;

        ProdJournalBOM      prodJournalBOM;
        ProdJournalRoute    prodJournalRoute;
        ProdJournalRouteProj prodJournalRouteProj;
        ProdJournalTable    prodJournalTable;

        ttsbegin;

        update_recordset prodBOM
            setting ActivityNumber=_activityNum
            where prodBOM.ProdId == this.ProdId;

        update_recordset prodRouteProj
            setting ActivityNumber=_activityNum
            where prodRouteProj.ProdId == this.ProdId;

        update_recordset prodJournalBOM
            setting ActivityNumber=_activityNum
            exists join prodJournalTable
            where prodJournalTable.Posted   == false
            &&    prodJournalTable.JournalId== prodJournalBOM.JournalId
            &&    prodJournalBOM.ProdId     == this.ProdId;

        update_recordset prodJournalRouteProj
            setting ActivityNumber=_activityNum
            exists join prodJournalRoute
            where prodJournalRouteProj.LineNum   == prodJournalRoute.LineNum
            &&    prodJournalRouteProj.JournalId == prodJournalRoute.JournalId
            &&    prodJournalRoute.ProdId        == this.ProdId
            exists join prodJournalTable
            where prodJournalTable.JournalId     == prodJournalRoute.JournalId
            &&    prodJournalTable.Posted        == false;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostControlUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the committed cost records of item requirements that references the current production order when using the project posting Consumed/Linked to order.
    /// </summary>
    /// <param name="inventRefTransId">
    /// The Lot ID of the item requirement that will be updated.
    /// </param>
    /// <remarks>
    /// Method will update the committed cost records of item requirements that references the current production order when using the project posting Consumed/Linked to order.
    /// </remarks>
    public void projCostControlUpdate(InventRefTransId inventRefTransId = this.itemReqInventRefTransId())
    {
        SalesLine                           salesLine;
        InventMovement                      movementSales;
        CostControlPostingItemSalesOrder    costControlPostingItemSales;

        if (inventRefTransId)
        {
            salesLine = SalesLine::findInventTransId(inventRefTransId);
            if (salesLine)
            {
                movementSales = InventMovement::construct(salesLine);
                if (movementSales.mustBeCostControlled()  && movementSales.canCommittedCostBeReversed())
                {
                    costControlPostingItemSales = CostControlPosting::newCostControlPostingItem(movementSales);
                    costControlPostingItemSales.run(ProjCommittedCostUpdateAction::UpdateReverse);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIsUnposted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the project posting can be reverted.
    /// </summary>
    /// <returns>
    /// true if the project posting can be reverted; otherwise, false.
    /// </returns>
    public boolean projIsUnposted()
    {
        ProdBOM prodBOM;
        ProdRoute prodRoute;
        ProdRouteJob prodRouteJob;

        // Check if the picking list journal was posted
        while select RemainBOMPhysical, QtyBOMCalc, RemainInventPhysical, QtyInventCalc
        from prodBOM
            where prodBOM.ProdId == this.ProdId
        {
            if (prodBOM.RemainBOMPhysical < prodBOM.QtyBOMCalc || prodBOM.RemainInventPhysical < prodBOM.QtyInventCalc)
            {
                return false;
            }
        }

        // Check if the ProdRoute has post the route journal
        while select ExecutedProcess, ExecutedSetup from prodRoute where prodRoute.ProdId == this.ProdId
        {
            if (prodRoute.ExecutedProcess >0 || prodRoute.ExecutedSetup >0)
            {
                return false;
            }
        }

        //Check if the ProdRouteJob has post the route journal
        while select ExecutedPct from prodRouteJob where prodRouteJob.ProdId == this.ProdId
        {
            if (prodRouteJob.ExecutedPct >0)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQueryValueInventTransId</Name>
				<Source><![CDATA[
    public str projQueryValueInventTransId()
    {
        return ProjItemTrans::projQueryValueInventTransId(this.InventTransId, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _forUpdate = false)
    {
        return ProjTable::find(this.ProjId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorReportedFinished qtyError()
    {
        DictTable                           dictTableProdTable;
        ProdReportedErrorReportedFinished   prodReportedErrorReportedFinished = 0;
        #ISOCountryRegionCodes

        dictTableProdTable = new DictTable(tableNum(ProdTable));

        if (dictTableProdTable.rights() >= AccessType::View)
        {
            prodReportedErrorReportedFinished = -this.reportedFinishedError();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                prodReportedErrorReportedFinished -= this.releasedError_RU();
            }

            return prodReportedErrorReportedFinished;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyMarked</Name>
				<Source><![CDATA[
    public InventQtyMarked qtyMarked()
    {
        return InventTransOrigin::qtyMarked(InventTransOriginProdTable::findInventTransOriginId(this.DataAreaId, this.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnderconsumed</Name>
				<Source><![CDATA[
    public display InventQty qtyUnderconsumed()
    {
        DictTable                           dictTableProdTable;

        dictTableProdTable = new DictTable(tableNum(ProdTable));

        if (dictTableProdTable.rights() >= AccessType::View)
        {
            return conPeek(this.underconsumed(), 1);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and returns the status of the associated quality orders.
    /// </summary>
    /// <returns>
    /// The current quality order status.
    /// </returns>
    public display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return InventQualityOrderTable::referenceDocumentStatusDisplay(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reestimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes re-estimation for the production order.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Cannot find the last updated parameter record.
    /// </exception>
    public void reestimate()
    {
        ProdParmCostEstimation  lastCostEstimation;
        ProdParmCostEstimation  newCostEstimation;
        ProdPurch               prodPurch = ProdPurch::newProd();

        select reverse firstonly lastCostEstimation
            index hint NumProdNumIdx
                where lastCostEstimation.ProdId      == this.ProdId
                    && lastCostEstimation.JobStatus  == ParmJobStatus::Executed;

        newCostEstimation.selectForUpdate(true);

        if (lastCostEstimation.RecId)
        {
            buf2Buf(lastCostEstimation, newCostEstimation);
        }
        else
        {
            newCostEstimation.initFromParameters(this.ProdId);
        }

        newCostEstimation.ParmBuffer::initParmId(true);
        newCostEstimation.LineNum = 1;
        newCostEstimation.insert();

        this.status().runCostEstimation(newCostEstimation,false,prodPurch,null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWarningTxtDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the warning text if the entire production quantity cannot be marked.
    /// </summary>
    /// <param name = "_currentRecord">The <c>ProdTable</c> record for which this delegate is called.</param>
    /// <param name = "_qtyMarked">Quantity marked.</param>
    /// <param name = "_qtyCanBeMarked">Quantity can be marked.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the result of type <c>str</c>.</param>
    delegate void generateWarningTxtDelegate(ProdTable _currentRecord, InventQtyMarked _qtyMarked, InventQtyMarked _qtyCanBeMarked, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWarningTxtDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the warning text if the entire production quantity cannot be marked.
    /// </summary>
    /// <param name = "_currentRecord">The <c>ProdTable</c> record for which this delegate is called.</param>
    /// <param name = "_qtyMarked">Quantity marked.</param>
    /// <param name = "_qtyCanBeMarked">Quantity can be marked.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the result of type <c>str</c>.</param>
    [SubscribesTo(tableStr(ProdTable), delegateStr(ProdTable, generateWarningTxtDelegate))]
    public static void generateWarningTxtDelegateHandler(ProdTable _currentRecord, InventQtyMarked _qtyMarked, InventQtyMarked _qtyCanBeMarked, EventHandlerResult _result)
    {
        str warningTxt;

        switch (_currentRecord.InventRefType)
        {
            case InventRefType::Sales :
                SalesLine salesLine = SalesLine::findInventTransId(_currentRecord.InventRefTransId, true);
                if (_qtyMarked)
                {
                    if (_qtyMarked==1)
                    {
                        warningTxt = strFmt("@SYS87098", _qtyMarked, salesLine.ItemId)+'\n';
                    }
                    else
                    {
                        warningTxt = strFmt("@SYS87099", _qtyMarked, salesLine.ItemId)+'\n';
                    }
                }

                if (_qtyCanBeMarked)
                {
                    warningTxt += strFmt("@SYS87100", _qtyCanBeMarked, _currentRecord.QtySched);
                }
                else
                {
                    warningTxt += strFmt("@SYS87101", _qtyCanBeMarked, _currentRecord.QtySched);
                }
                break;

            case InventRefType::Production:
                if (_qtyMarked)
                {
                    warningTxt = strFmt("@PRO2411", _qtyMarked, _currentRecord.ItemId)+'\r\r\n';
                }

                if (_qtyCanBeMarked)
                {
                    warningTxt += strFmt("@SYS87100", _qtyCanBeMarked, _currentRecord.QtySched);
                }
                else
                {
                    warningTxt += strFmt("@SYS87101", _qtyCanBeMarked, _currentRecord.QtySched);
                }
                break;
        }

        _result.result(warningTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceInfoWhatCanBeMarked</Name>
				<Source><![CDATA[
    public container referenceInfoWhatCanBeMarked()
    {
        InventQtyMarked         qtyMarked;
        InventQty               qtyTrans;
        InventQtyMarked         qtyCanBeMarked;
        InventTransOriginId     markedInventTransOriginId;
        Qty                     qtyRemain;
        str                     warningTxt;

        if (this.InventRefTransId)
        {
            markedInventTransOriginId = InventTransOrigin::findByInventTransId(this.InventRefTransId).RecId;
            qtyTrans = abs(InventTrans::qtyFinancialOpen(markedInventTransOriginId));
            qtyMarked = abs(InventTransOrigin::qtyMarked(markedInventTransOriginId));
            qtyCanBeMarked = qtyTrans - qtyMarked;
            qtyRemain = this.QtySched - qtyCanBeMarked;
        }

        // Create a warning message if not entire production quantity can be marked
        if (qtyRemain > 0)
        {
            var eventHandlerResult = EventHandlerResult::newSingleResponse();
            this.generateWarningTxtDelegate(this, qtyMarked, qtyCanBeMarked, eventHandlerResult);
            if (eventHandlerResult.hasResult())
            {
                warningTxt = eventHandlerResult.result();
            }
        }

        return [qtyCanBeMarked, warningTxt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceName</Name>
				<Source><![CDATA[
    public display ProdNameReference referenceName()
    {
        switch (this.InventRefType)
        {
            case InventRefType::Sales :
                return (select salesTable where salesTable.SalesId == this.InventRefId).SalesName ;
            case InventRefType::Production :
            case InventRefType::ProdLine :
                return (select prodTable where prodTable.ProdId == this.InventRefId).Name ;
            default :
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceProdSearch</Name>
				<Source><![CDATA[
    public ProdTable referenceProdSearch(
                                Integer     refLevel       = this.CollectRefLevel + 1,
                                boolean     _forUpdate     = false)
    {
        ProdTable prodTable;

        prodTable.selectForUpdate(_forUpdate);

        select prodTable
            index hint RefCollectIdx
            where prodTable.CollectRefLevel      == refLevel &&
                  prodTable.CollectRefProdId     == this.CollectRefProdId;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQty</Name>
				<Source><![CDATA[
    public display InventQtyRegistered registeredQty()
    {
        InventTransOriginId     inventTransOriginId = InventTransOriginProdTable::findInventTransOriginId(this.DataAreaId, this.ProdId);

        return InventTransSum::newStandard().originRegistered(inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedError_RU</Name>
				<Source><![CDATA[
    public ProdReportedErrorReportedFinished releasedError_RU()
    {
        return ProdReleaseTrans_RU::releasedError(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainInventFinancial</Name>
				<Source><![CDATA[
    public display InventQty remainInventFinancial()
    {
        InventTransIdSum transIdSum;

        transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdTable::findInventTransOriginId(this.DataAreaId, this.ProdId));

        return transIdSum.physical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Replaces the production bill of materials (BOM) and the production route with the specified BOM and
    ///    route for the production order.
    /// </summary>
    /// <param name="_newBOMId">
    ///    A string value that holds a BOM ID.
    /// </param>
    /// <param name="_newRouteId">
    ///    A string value that holds a route ID.
    /// </param>
    protected void replaceBOMRoute(BOMId _newBOMId, RouteId _newRouteId)
    {
        BOMRouteCopyJob     bomRouteCopyJob;
        if (   (_newBOMId    && !this.SkipCreateBOMLines)
            || (_newRouteId  && !this.SkipCreateRouteOperations))
        {
            bomRouteCopyJob = BOMRouteCopyJob::newToProd(this, _newBOMId, _newRouteId);
            bomRouteCopyJob.parmUpdateBOMId(false);
            bomRouteCopyJob.parmUpdateRouteId(false);
            bomRouteCopyJob.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorReportedFinished reportedFinishedError()
    {
        return ProdTableJour::reportedFinishedError(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedGood</Name>
				<Source><![CDATA[
    public display ProdReportedGood reportedFinishedGood()
    {
        return ProdTableJour::reportedFinishedGood(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding record in the <c>ReqTrans</c> table for the current record in the
    /// <c>ProdTable</c> table.
    /// </summary>
    /// <param name="_reqPlanVersionRefRecId">
    /// An integer value that holds the ID of the <c>ReqPlanVersion</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ReqTrans</c> table; otherwise, an empty record.
    /// </returns>
    public ReqTrans reqTrans(
        RefRecId  _reqPlanVersionRefRecId = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
        boolean   _forupdate = false)
    {
        ReqTrans                    reqTrans;
        InventTransOriginProdTable  inventTransOriginProdTable;

        reqTrans.selectForUpdate(_forupdate);

        if (this.inventTable().PmfProductType == PmfProductType::MainItem)
        {
            select firstonly reqTrans
                where reqTrans.PlanVersion   == _reqPlanVersionRefRecId
                    && reqTrans.RefType      == ReqRefType::Production
                    && reqTrans.RefId        == this.ProdId;
        }
        else
        {
            select firstonly reqTrans
            where reqTrans.PlanVersion  == _reqPlanVersionRefRecId
               && reqTrans.RefType      == ReqRefType::Production
               && reqTrans.RefId        == this.ProdId
            exists join inventTransOriginProdTable
                where inventTransOriginProdTable.InventTransOrigin      == reqTrans.InventTransOrigin
                   && inventTransOriginProdTable.ProdOrderDataAreaId    == this.DataAreaId
                   && inventTransOriginProdTable.ProdOrderId            == this.ProdId;
        }

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reschedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reschedules the production order with the previous used parameters.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Cannot find the last updated parameter record.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The scheduling method is unknown.
    /// </exception>
    void reschedule()
    {
        ProdParmScheduling prodParmScheduling = this.getLastOrDefaultSchedulingParameters();

        this.rescheduleWithParameters(prodParmScheduling);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rescheduleWithParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reschedules the production order with the given parameters.
    /// </summary>
    /// <param name = "_prodParmScheduling">Scheduling parameters.</param>
    public void rescheduleWithParameters(ProdParmScheduling _prodParmScheduling)
    {
        ProdPurch prodPurch = ProdPurch::newProd();

        _prodParmScheduling.ParmBuffer::initParmId(true);
        _prodParmScheduling.LineNum = 1;
        _prodParmScheduling.insert();

        switch (this.getLastSchedulingMethod())
        {
            case ProdSchedMethod::JobScheduling      : this.status().runJobScheduling(_prodParmScheduling, false, prodPurch, null);           break;
            case ProdSchedMethod::OperationScheduling: this.status().runOperationScheduling(_prodParmScheduling, false, prodPurch, null);     break;
            default: throw error(strFmt("@SYS84951" + " " + "@SYS18598", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastOrDefaultSchedulingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameters for running scheduling for this production order.
    /// </summary>
    /// <returns>The parameters for running scheduling for this production order.</returns>
    public ProdParmScheduling getLastOrDefaultSchedulingParameters()
    {
        ProdParmRelease         prodParmRelease;
        ProdParmScheduling      newScheduling;
        ProdParmScheduling      lastScheduling = ProdParmScheduling::findLastExecuted(this.ProdId, this.getLastSchedulingMethod());

        newScheduling.selectForUpdate(true);

        if (lastScheduling.RecId)
        {
            buf2Buf(lastScheduling, newScheduling);
        }
        else
        {
            prodParmRelease.initParmDefault();
            prodParmRelease.ProdId  = this.ProdId;
            newScheduling           = ProdUpdScheduling::initParmBufferFromRelease(prodParmRelease);
        }

        return newScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastSchedulingMethod</Name>
				<Source><![CDATA[
    private ProdSchedMethod getLastSchedulingMethod()
    {
        return this.SchedStatus == ProdSchedStatus::JobScheduled ? ProdSchedMethod::JobScheduling : ProdSchedMethod::OperationScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeReportedError</Name>
				<Source><![CDATA[
    public display ProdRouteReportedError routeReportedError()
    {
        return ProdRouteTrans::qtyErrorProd(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeReportedGood</Name>
				<Source><![CDATA[
    public display ProdRouteReportedGood routeReportedGood()
    {
        return ProdRouteTrans::qtyGoodProd(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGanttColor</Name>
				<Source><![CDATA[
    public void setGanttColor()
    {
        int64 num;

        num = str2int64(this.ProdId);
        if (! num)
        {
            num = this.RecId;
        }

        this.GanttColorId = GanttColorTable::getGanttColor(num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>ProdTable.inventDimId</c> field and applies
    /// default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>ProdTable.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        _inventDim.setInventSiteFromParentIfModified(this, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    /// found <c>InventDimId</c> to the <c>ProdTable.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current <c>ProdTable</c> record
    /// buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStorageDim</Name>
				<Source><![CDATA[
    public void setInventStorageDim(
                            InventDim                  _inventDim      = InventDim::find(this.InventDimId),
                            InventTable                _inventTable    = InventTable::find(this.ItemId),
                            InventItemOrderSetupType   _setupType      = InventItemOrderSetupType::Invent)
    {
        InventItemOrderSetupMap itemOrderSetupDefaultMap = _inventTable.inventItemOrderSetupMap(_setupType);
        InventItemOrderSetupMap itemOrderSetupDimMap;

        boolean                 updateInventDim = false;

        if (!_inventDim.InventSiteId || _inventDim.InventSiteId != itemOrderSetupDefaultMap.inventSiteId(_inventDim.InventSiteId, _inventTable))
        {
            _inventDim.InventSiteId = itemOrderSetupDefaultMap.inventSiteId(_inventDim.InventSiteId, _inventTable);

            updateInventDim = true;
        }

        if (_inventDim.InventSiteId)
        {
            itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::findOrCreate(_inventDim).InventDimId);
        }
        else
        {
            itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::inventDimIdBlank());
        }

        if (!_inventDim.InventLocationId || _inventDim.InventLocationId != itemOrderSetupDimMap.inventLocationId(_inventDim.InventLocationId,
                                                                                                                _inventTable,
                                                                                                                _inventDim.InventSiteId))
        {
            _inventDim.InventLocationId = itemOrderSetupDimMap.inventLocationId(_inventDim.InventLocationId,
                                                                                _inventTable,
                                                                                _inventDim.InventSiteId);

            _inventDim.initFromInventLocation(_inventDim.inventLocation());

            updateInventDim = true;
        }

        if (updateInventDim)
        {
            _inventDim.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;

            this.setInventDimId(_inventDim.InventDimId, _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    public ProdStatusType status()
    {
        return ProdStatusType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusClient</Name>
				<Source><![CDATA[
    public ProdStatusType statusClient()
    {
        return ProdStatusType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return this.SchedEnd ? this.SchedEnd : this.DlvDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSchedTime</Name>
				<Source><![CDATA[
    public SchedTime transSchedTime()
    {
        return this.SchedEnd ? this.SchedToTime : this.DlvTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public ProdTableType type()
    {
        return ProdTableType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeClient</Name>
				<Source><![CDATA[
    public ProdTableType typeClient()
    {
        return ProdTableType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>underconsumed</Name>
				<Source><![CDATA[
    public container underconsumed()
    {
        InventQty                           inventQty = 0;
        Amount                              amount = 0;
        InventTransIdSum                    inventTransIdSumAdj;
        InventTransIdSum_MarkingRef         inventTransIdSum_MarkingRef;
        InventTransOriginId                 inventTransOriginId;

        if (this.InventRefType == InventRefType::ProdLine &&
            this.ProdStatus == ProdStatus::Completed)
        {
            inventTransOriginId = InventTransOriginProdTable::findInventTransOriginId(this.DataAreaId, this.ProdId);
            inventTransIdSumAdj = InventTransIdSum::newTransOriginId(inventTransOriginId);
            inventTransIdSum_MarkingRef = InventTransIdSum_MarkingRef::newMarkingRef(
                        inventTransOriginId,
                        InventTransOrigin::findByInventTransId(this.InventRefTransId).RecId);

            inventQty = -(inventTransIdSumAdj.financial() - inventTransIdSum_MarkingRef.financial());

            if (inventTransIdSumAdj.financial())
            {
                amount = CurrencyExchangeHelper::amount(ProdTableJour::costAccountedAmount(this.ProdId) / inventTransIdSumAdj.financial() * inventQty);
            }
        }

        return [inventQty, amount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _dropEstimated = false, Common _childBuffer = null)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        ProdTable               this_Orig = this.orig();

        #isoCountryRegionCodes

        ProdStatusType  prodStatusType = this.status();
        
        prodStatusType.updating();

        this.createProdStatusChange();

        prodStatusType.setBackStatus();

        InventUpd_Estimated     estimated;
        boolean                 dropEstimated = _dropEstimated;

        if (!this.canInventUpdExpected())
        {
            dropEstimated = true;
        }

        if (!dropEstimated)
        {
            estimated = this.createEstimated(_childBuffer);
            estimated.updateNow();

            if (estimated.parmEstimated())
            {
                this.projCostControlUpdate();
            }
        }

        if (   this_Orig.bomId      != this.bomId
            || this_Orig.RouteId    != this.RouteId)
        {
            this.replaceBOMRoute(this_Orig.bomId    != this.bomId      && prodStatusType.bomAllowEdit()    ? this.bomId   : '',
                                 this_Orig.RouteId  != this.RouteId    && prodStatusType.routeAllowEdit()  ? this.RouteId : '');
        }

        this.pmfUpdateTCA(this.PmfTotalCostAllocation);

        super();

        if (!DimensionDefaultFacade::areEqual(this_Orig.DefaultDimension, this.DefaultDimension))
        {
            this.propagateFinancialDimToProdLines();
        }

        this.updateProdBOMReservation(this_Orig);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.updateLinesPrice_RU();
        }

        this.status().updated(this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateProdBOMReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>ProdBOM</c> must be updated.
    /// </summary>
    /// <param name = "_prodTableOrig">An instance of the <c>ProdTable</c> record.</param>
    [Replaceable]
    protected boolean mustUpdateProdBOMReservation(ProdTable _prodTableOrig)    
    {
        return _prodTableOrig.Reservation != this.Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdBOMReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ProdBOM</c> records for a given <c>ProdTable</c> record.
    /// </summary>
    /// <param name = "_prodTableOrig">An instance of the <c>ProdTable</c> record.</param>
    private void updateProdBOMReservation(ProdTable _prodTableOrig)
    {
        if (this.mustUpdateProdBOMReservation(_prodTableOrig))
        {
            ProdBOM                 prodBOM;

            while select forupdate prodBOM
                where prodBOM.ProdId == this.ProdId
            {
                prodBOM.Reservation = this.Reservation;
                prodBOM.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCollectReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Count the number of references for a given production ID.
    /// </summary>
    /// <param name = "_prodId">The production ID.</param>
    /// <returns>The count of referenced production IDs.</returns>
    public static int countCollectReferences(ProdId _prodId)
    {
        ProdTable prodTableCollectReference;

        select count(RecId) from prodTableCollectReference
            where prodTableCollectReference.CollectRefProdId == _prodId;
        return prodTableCollectReference.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectRefProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the collect references for the production order and its sub orders.
    /// </summary>
    public void updateCollectRefProdId()
    {
        this.updateCollectReferenceProdunctionId(new Set(Types::String));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectReferenceProdunctionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the collect references for the production order and its sub orders.
    /// </summary>
    /// <param name = "_encounteredOrders">Encountered orders. This is used to check for circularity.</param>
    private void updateCollectReferenceProdunctionId(Set _encounteredOrders)
    {
        ProdTable       prodTableSub;
        ProdCalcTrans   prodCalcTrans;
        ProdBOM         prodBOM;

        // circularity check
        if (_encounteredOrders.in(this.ProdId))
        {
            prodBOM = ProdBOM::findTransId(this.InventRefTransId);

            throw error(strfmt('@SCM:ProductionOrderCircularityDetected', prodBOM.ProdId, this.ProdId));
        }

        _encounteredOrders.add(this.ProdId);

        ttsbegin;

        while select InventTransId, InventRefId
        from prodBOM
            index hint NumIdx
            where prodBOM.ProdId        == this.ProdId                  &&
                  prodBOM.InventRefType == InventRefType::Production    &&
                  (prodBOM.ProdLineType == BOMType::PeggedSupply || (prodBOM.ProdLineType == BOMType::Item && CostTakeMarkedItemAsPeggedSupplyFlight::instance().isEnabled()))
        {
            prodTableSub = ProdTable::find(prodBOM.InventRefId,true);
            if (prodTableSub.RecId              &&
                prodTableSub.InventRefType      == InventRefType::ProdLine   &&
                prodTableSub.InventRefTransId   == prodBOM.InventTransId)
            {
                prodTableSub.CollectRefProdId   = this.CollectRefProdId;
                prodTableSub.CollectRefLevel    = this.CollectRefLevel + 1;
                prodTableSub.update();

                prodTableSub.updateCollectReferenceProdunctionId(_encounteredOrders);
            }
        }

        while select forupdate prodCalcTrans
            index hint ProdCollectIdx
            where prodCalcTrans.TransRefId == this.ProdId
               && prodCalcTrans.TransRefType == ProdTransRefType::Production
        {
            prodCalcTrans.initFromProdTable(this, prodCalcTrans.CalcType);
            prodCalcTrans.update();
        }

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesPrice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes price and calculates line amount of the production BOM.
    /// </summary>
    void updateLinesPrice_RU()
    {
        ProdBOM  prodBOM;

        ttsbegin;

        while select forupdate prodBOM
            where prodBOM.ProdId == this.ProdId
        {
            prodBOM.setPrice_RU();
            prodBOM.LineAmount_RU = prodBOM.calcLineAmount_RU();
            prodBOM.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRawMaterialDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the dates on the raw material related to the current production order.
    /// </summary>
    /// <param name="_updateSubProductions">
    ///    A Boolean value indicating whether to cascade the update to the sub-productions; optional. The default value is true.
    /// </param>
    public void updateRawMaterialDates(boolean _updateSubProductions = true)
    {
        ProdBOM         prodBOM;
        ProdRoute       prodRoute;
        Set             purchTableRecIdSet;

        if (this.status().isBefore(ProdStatus::ReportedFinished))
        {
            ttsBegin;
            // Loop through BOM lines to set material date
            while select forupdate prodBOM
                where prodBOM.ProdId == this.ProdId
            outer join prodRoute
                where   prodRoute.ProdId      == prodBOM.ProdId
                    &&  prodRoute.OprPriority == RouteOprPriority::Primary
                    &&  prodRoute.OprNum      == prodBOM.OprNum
            {
                if (prodBOM.OprNum && prodRoute)
                {
                    if (prodBOM.QtyInventCalc           < 0 ||
                        prodBOM.RemainInventPhysical    < 0 ||
                        prodBOM.EndSchedConsump)
                    {
                        prodBOM.RawMaterialDate  = prodRoute.ToDate;
                        prodBOM.RawMaterialTime  = prodRoute.ToTime;
                    }
                    else
                    {
                        prodBOM.RawMaterialDate  = prodRoute.FromDate;
                        prodBOM.RawMaterialTime  = prodRoute.FromTime;
                    }
                }
                else
                {
                    if (prodBOM.QtyInventCalc < 0 || prodBOM.RemainInventPhysical < 0)
                    {
                        prodBOM.RawMaterialDate = this.SchedEnd;
                        prodBOM.RawMaterialTime = this.SchedToTime;
                    }
                    else
                    {
                        prodBOM.RawMaterialDate = this.SchedStart;
                        prodBOM.RawMaterialTime = this.SchedFromTime;
                    }
                }

                var wrkCtrParmSchedule = WrkCtrParmScheduleContext::parmWrkCtrParmSchedule();
                
                prodBOM.update();

                // Update delivery dates on sub productions if they are not part of this scheduling
                if (_updateSubProductions)
                {
                    prodBOM.updateSubProduction();
                }

                if (!purchTableRecIdSet)
                {
                    purchTableRecIdSet = new Set(Types::Int64);
                }

                prodBOM.updateSubPurch(purchTableRecIdSet);
            }

            if (purchTableRecIdSet)
            {
                var enumerator = purchTableRecIdSet.getEnumerator();
                const str EmptyWorkflowMessage = '';
                while (enumerator.moveNext())
                {
                    PurchTable purchaseOrder = PurchTable::findRecId(enumerator.current(), true);

                    if (ProdParmMultiPurchLateSubmissionToWorkflow::find(purchaseOrder.PurchId))
                    {
                        ProdParmMultiPurchLateSubmissionToWorkflow::setModified(purchaseOrder.PurchId, NoYes::Yes);
                    }
                    else
                    {
                        ProdTable::submitPurchaseOrderToWorkflow(purchaseOrder, EmptyWorkflowMessage);
                    }
                }
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitPurchaseOrderToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit purchase order to workflow.
    /// </summary>
    /// <param name = "_purchOrder">The <c>PurchTable</c> record.</param>
    /// <param name = "_workflowMessage">The workflow comment.</param>
    [Hookable(false)]
    internal final static void submitPurchaseOrderToWorkflow(PurchTable _purchOrder, str _workflowMessage)
    {
        const WorkflowTypeName purchTableTemplate = workFlowTypeStr(PurchTableTemplate);

        if (_purchOrder.RecId && _purchOrder.ChangeRequestRequired && _purchOrder.canSubmitToWorkflow(purchTableTemplate))
        {
            _purchOrder.updatePurchaseOrderPreWorkflow();

            _purchOrder.submitToWorkflow(purchTableTemplate, _workflowMessage, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoute</Name>
				<Source><![CDATA[
    public void updateRoute()
    {
        ProdRouteUpdate prodRouteUpdate;

        if (! this.CheckRoute)
        {
            return;
        }

        prodRouteUpdate    = new ProdRouteUpdate(this.ProdId);
        prodRouteUpdate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useReleaseFromProduction_RU</Name>
				<Source><![CDATA[
    public boolean useReleaseFromProduction_RU()
    {
        return this.prodParametersDim().UseReleaseFromProduction_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(boolean calledFromStatus= false)
    {
        if (!calledFromStatus)
        {
            return this.status().validateDelete();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        BOMVersion  formulaVersion;
        InventTable inventTable;
        boolean     ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ProdTable, QtySched):
                if (this.QtySched <= 0)
                {
                    return checkFailed("@SYS50502");
                }
                if (    this.ItemId
                    &&  this.bomId
                    &&  (this.ProdType == ProdType::Process))
                {
                    formulaVersion = this.bomVersion();

                    //if the item id is set, PI can validate the multiples
                    this.QtySched = PmfFormulaMultiplesQtyValidation::validateQtyMultiple(
                        this.QtySched,
                        formulaVersion.PmfFormulaMultiple,
                        formulaVersion.inventTable(),
                        true);
                }
                break;

            case fieldStr(ProdTable,PdsCWBatchSched):
                if (this.PdsCWBatchSched <= 0 && PdsGlobal::pdsIsCWItem(this.ItemId))
                    return checkFailed("@SYS50502");
                break;

            case fieldStr(ProdTable, PmfTotalCostAllocation) :
                ret = ret && this.pmfUpdateTCA(this.PmfTotalCostAllocation);
                break;

            case fieldStr(ProdTable, ProdType):
                ret = ret && this.checkProdType();
                break;

            case fieldStr(ProdTable, ItemId):
                if (!this.ItemId)
                {
                    return checkFailed("@SYS16661");
                }
                inventTable = this.inventTable();
                if (!inventTable)
                {
                    return checkFailed(strFmt("@SYS5307",this.ItemId));
                }
                if (!inventTable.isStocked())
                {
                    return checkFailed("@SYS190616");
                }

                if (#PmfEnabled)
                {
                    ret = ret && this.checkProdType();
                }

                if (!inventTable.inventItemType().canBeProduced())
                {
                    return checkFailed(strFmt("@SYS78161",inventTable.ItemType));
                }
                break;
        }

        if ((this.ProjPostingType == ProjProdPostingType::FinishedItemMethod && !this.ProjLinkedToOrder) ||
            this.ProjPostingType == ProjProdPostingType::ConsumedMethod ||
            (this.ProjPostingType == ProjProdPostingType::FinishedItemMethod && this.ProjLinkedToOrder))
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateFieldPost(_fieldName, _arrayIndex) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean calledFromStatus= false)
    {
        InventOnHandQty inventOnHandQty;
        InventDim       inventDim;
        boolean ret;
        #define.Percent(100)

        if (! calledFromStatus)
        {
            return this.status().validateWrite();
        }

        ret = super();

        if (ret && (this.isProjMethodLinkedToOrder() ||
            this.isProjMethodFinished() ||
            this.isProjMethodConsumed()))
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateWritePost();
        }
        ret = ret && this.checkProdType();
        if (ret
            &&  #PMFEnabled
            &&  (this.ProdType == ProdType::Process))
        {
            this.validateFieldValue(fieldStr(ProdTable, QtySched));
        }

        if (ret
            && #PmfReworkBatchEnabled
            && this.PmfReworkBatch)
        {
            if (this.ProdType != ProdType::Process)
            {
                ret = checkFailed("@PRO2393");
            }

            if (ret
                && this.PmfYieldPct != #Percent)
            {
                ret = checkFailed("@PRO2394");
            }

            if (ret
                && this.inventTable().PmfProductType == PmfProductType::MainItem)
            {
                ret = checkFailed("@PRO2066");
            }

            if (ret
                && this.status().isBefore(ProdStatus::ReportedFinished)
                && this.orig().QtySched != this.QtySched)
            {
                inventOnHandQty = InventOnHandQty::newItemId(this.ItemId);
                inventDim = this.inventDim();
                inventDim.clearNotSiteAndProductDim(InventDimGroupSetup::newItemId(this.ItemId));
                inventOnHandQty.parmInventDim(InventDim::findOrCreate(inventDim));

                if (this.QtySched > inventOnHandQty.availPhysical())
                {
                    ret = checkFailed("@PRO2068");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrParametersDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>WrkCtrParametersDim</c> record.
    /// </summary>
    /// <returns>
    /// The <c>WrkCtrParametersDim</c> record.
    /// </returns>
    public WrkCtrParametersDim wrkCtrParametersDim()
    {
        return WrkCtrParametersDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>argsProdId</Name>
				<Source><![CDATA[
    public static ProdId argsProdId(Args args)
    {
        FormRun                     callerForm;

        ProdId                      prodId;
        FieldId                     id;

        if (args.caller() && args.dataset())
        {
            id = fieldName2id(args.dataset(),fieldStr(ProdTable,ProdId));

            if (id)
            {
                prodId = args.record().(id);
            }

            if (!prodId)
            {
                callerForm = args.caller();

                if (callerForm && callerForm.args() && callerForm.args().record() && callerForm.args().record().TableId)
                {
                    id = fieldName2id(callerForm.args().record().TableId,fieldStr(ProdTable,ProdId));

                    if (id)
                    {
                        prodId = callerForm.args().record().(id);
                    }
                }
            }
        }

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(ProdId prodId)
    {
        if (prodId && !ProdTable::exist(prodId))
        {
            return checkFailed(strFmt(ProdTable::txtNotExist(),prodId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultiSiteBOMRouteConsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified site is used consistently for a production.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order to validate.
    /// </param>
    /// <param name="_siteId">
    /// The Site ID to check the BOM and route version against.
    /// </param>
    /// <returns>
    /// true if the site is used consistently; otherwise false.
    /// </returns>
    /// <remarks>
    /// This method verifies that the site on the production order is the same as the BOM version site; BOM
    /// versions without sites are accepted. It also checks that relations to the production order site
    /// exist for all route operations.
    /// </remarks>
    public static boolean checkMultiSiteBOMRouteConsistency(ProdTable _prodTable, InventSiteId _siteId)
    {
        boolean             ok              = true;
        BOMTable            bomTable;
        RouteSearch_Config  routeSearch;
        Route               route;
        RouteOpr            routeOpr;

        if (!_siteId)
        {
            ok = checkFailed(strFmt("@SYS84378",fieldPName(InventSite,SiteId)));
        }

        // BOM table has to have same site or be siteless if site is specified.
        if (_siteId && _prodTable.bomId)
        {
            bomTable = BOMTable::find(_prodTable.bomId);
            // If it is not a general/siteless BOM version.
            if (bomTable.SiteId && bomTable.SiteId != _siteId)
            {
                ok = checkFailed("@SYS109223");
            }
        }

        // Check if relations to production order site exist for all route operations.
        if (_siteId && _prodTable.RouteId)
        {
            routeSearch = RouteSearch_Config::newProdTable(_prodTable);

            while (routeSearch.next())
            {
                route    = routeSearch.route();
                routeOpr = routeSearch.routeOpr();

                if (!routeOpr.RecId)
                {
                    ok = checkFailed(strFmt("@SYS22152", route.OprNum, _prodTable.ItemId));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProdId prodId)
    {
        return prodId && (select firstonly prodTable
                    index hint ProdIdx
                    where prodTable.ProdId == prodId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProdTable find(
                          ProdId      prodId,
                          boolean     _forUpdate = false)
    {
        ProdTable prodTable;

        prodTable.selectForUpdate(_forUpdate);

        if (prodId)
        {
            select firstonly prodTable
                index hint ProdIdx
                where prodTable.ProdId == prodId;
        }
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static ProdTable findRecId(
                          RecId      _prodTableRecId,
                          boolean    _forUpdate = false)
    {
        ProdTable prodTable;

        prodTable.selectForUpdate(_forUpdate);

        if (_prodTableRecId)
        {
            select firstonly prodTable
                where prodTable.RecId == _prodTableRecId;
        }
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithPessimisticLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProdTable</c> record and obtains a pessimistic lock on it.
    /// </summary>
    /// <param name = "prodId">
    /// Production Order ID
    /// </param>
    /// <returns> The found production order </returns>
    internal static ProdTable findWithPessimisticLock(
                          ProdId      _prodId)
    {
        ProdTable prodTable;

     
        if (_prodId)
        {
            select firstonly pessimisticlock prodTable
                index hint ProdIdx
                where prodTable.ProdId == _prodId;
        }
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransId</Name>
				<Source><![CDATA[
    public static ProdTable findTransId(InventTransId  _inventTransId,
                                        boolean        _forUpdate = false)
    {
        ProdTable prodTable;

        prodTable.selectForUpdate(_forUpdate);

        if (_inventTransId)
            select firstonly prodTable
                index hint TransIdIdx
                where prodTable.InventTransId == _inventTransId;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccessibleToSetProjPostingType</Name>
				<Source><![CDATA[
    public static boolean isAccessibleToSetProjPostingType(boolean _set, ProjProdPostingTypeSetup _postingType)
    {
        DictTable dictTable;
        AccessType reqdAccessType;

        dictTable = new DictTable(tableNum(ProdTable));
        if (_set)
        {
            if (_postingType)
            {
                reqdAccessType = AccessType::Edit;
            }
            else
            {
                reqdAccessType = AccessType::Delete;
            }
        }
        else
        {
            reqdAccessType = AccessType::View;
        }
        return dictTable.rights() >= reqdAccessType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemBOMLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current production order belongs to an item BOM line type.
    /// </summary>
    /// <returns>
    /// true if production order belongs to an item BOM line type; otherwise, false.
    /// </returns>
    public boolean isItemBOMLineType()
    {
        ProdBOM prodBOM;
        boolean isItemBOMLineType = false;

        if (this.InventRefType == InventRefType::ProdLine && this.CollectRefLevel != 0)
        {
            prodBOM = ProdBOM::findTransId(this.InventRefTransId);
            if (prodBOM.InventRefType == InventRefType::Production && !prodBOM.type().isPeggedSupply())
            {
                isItemBOMLineType = true;
            }
        }

        return isItemBOMLineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBatchOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a look up for selecting batch orders.
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormStringControl</c> object in which the lookup values should be displayed.
    /// </param>
    public static void lookupBatchOrders(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ProdTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ProdTable));

        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdId));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,ItemId));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,QtySched));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdStatus));

        queryBuildDataSource.addRange(fieldNum(ProdTable, ProdType)).value(SysQuery::value(ProdType::Process));
        queryBuildDataSource.addRange(fieldNum(ProdTable, ProdStatus)).value(SysQuery::valueNot(ProdStatus::Completed));

        queryBuildDataSource.addSortField(fieldNum(ProdTable,ProdId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProdId</Name>
				<Source><![CDATA[
    public static void lookupProdId(
        FormStringControl   _ctrl,
        ProdId              _prodId,
        Common              _common = null,
        ProdStatus          _minProdStatus = ProdStatus::Created,
        ProdStatus          _maxProdStatus = ProdStatus::Completed)
    {
        Args        args;
        Object      formRun;

        args = new Args();
        args.name(formStr(ProdTableLookUp));
        args.parm(_prodId);
        args.caller(_ctrl);
        args.record(_common);
        formRun = classfactory.formRunClass(args);
        formRun.parmMinProdStatus(_minProdStatus);
        formRun.parmMaxProdStatus(_maxProdStatus);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpProdNumJournal</Name>
				<Source><![CDATA[
    public static void lookUpProdNumJournal(Object lookupCtrl)
    {
        Query           q;
        ProdTable       prodTable;
        ProdStatusType  prodStatusType;
        ProdLookup      prodLookup;
        SysDictEnum     sysDictEnum;
        int             i = 0;
        int             value;

        q = new Query();
        q.addDataSource(tableNum(ProdTable));

        sysDictEnum = new SysDictEnum(enumNum(ProdStatus));
        value       = sysDictEnum.firstValue();

        while (i < enumCnt(ProdStatus))
        {
            prodTable.ProdStatus = value;
            prodStatusType = prodTable.statusClient();

            if (prodStatusType.prodNumLookupJournal())
                prodStatusType.queryAddStatus(q);

            value = sysDictEnum.nextValue(value);
            i++;
        }

        prodLookup = new ProdLookup(lookupCtrl,q);
        prodLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStdOnlyProd</Name>
				<Source><![CDATA[
    public static void lookupStdOnlyProd(
        FormStringControl _ctrl,
        ProdType          _prodType = ProdType::Standard)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(
                                                    tableNum(ProdTable),
                                                    _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource =
            query.addDataSource(tableNum(ProdTable));

        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdId));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,Name));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdStatus));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,BackorderStatus));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdType));

        queryBuildDataSource.addRange(fieldNum(ProdTable,ProdType)).value(
                                            SysQuery::value(_prodType));

        queryBuildDataSource.addSortField(fieldNum(ProdTable,ProdId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public static Name name(ProdId prodId)
    {
        return ProdTable::find(prodId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqProdId</Name>
				<Source><![CDATA[
    public static NumberSeq numberSeqProdId(boolean makeDecisionLater = true)
    {
        return NumberSeq::newGetNum(ProdParameters::numRefProdId(),makeDecisionLater);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfLookupNonConsBatchOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a look up for selecting non-consolidated batch orders.
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormStringControl</c> object in which the lookup values should be displayed.
    /// </param>
    public static void pmfLookupNonConsBatchOrders(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(
                                                    tableNum(ProdTable),
                                                    _ctrl);

        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdId));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,ItemId));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,QtySched));
        sysTableLookup.addLookupfield(fieldNum(ProdTable,ProdStatus));

        sysTableLookup.parmQuery(ProdTable::pmfLookupNonConsBatchOrdersQuery());
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfLookupNonConsBatchOrdersQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a query used in non-consolidated batch orders lookup.
    /// </summary>
    /// <returns>
    /// Query object to be displayed in non-consolidated batch orders lookup.
    /// </returns>
    public static Query pmfLookupNonConsBatchOrdersQuery()
    {
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(ProdTable));

        queryBuildDataSource.addRange(fieldNum(ProdTable, ProdType)).value(SysQuery::value(ProdType::Process));
        queryBuildDataSource.addRange(fieldNum(ProdTable, ProdStatus)).value(SysQuery::valueNot(ProdStatus::Completed));
        queryBuildDataSource.addRange(fieldNum(ProdTable, PmfConsOrdId)).value(SysQuery::valueEmptyString());

        queryBuildDataSource.addSortField(fieldNum(ProdTable,ProdId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfNumberSeqBatchId</Name>
				<Source><![CDATA[
    public static NumberSeq pmfNumberSeqBatchId(
        boolean _makeDecisionLater = true)
    {
        return NumberSeq::newGetNum(
                ProdParameters::pmfNumRefProcessBatchId(),
                _makeDecisionLater);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfNumberSeqConsOrdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>NumberSeq</c> object for the Consolidate Orders.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// A Boolean value that indicates whether the number is committed later; optional.
    /// </param>
    /// <returns>
    /// A <c>NumberSeq</c> object for the consolidate order
    /// </returns>
    public static NumberSeq pmfNumberSeqConsOrdId(
        boolean _makeDecisionLater = true)
    {
        return NumberSeq::newGetNum(
                ProdParameters::pmfNumRefConsOrdId(),
                _makeDecisionLater);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateConsOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a production batch order by using the specified consolidated order number.
    /// </summary>
    /// <param name="_prodId">
    /// The Production ID.
    /// </param>
    /// <param name="_ordId">
    /// The Consolidated Order ID.
    /// </param>
    /// <param name="_pmfBulkOrd">
    /// The Bulk Order ID.
    /// </param>
    public static void pmfUpdateConsOrder(
        ProdId          _prodId,
        PmfConsOrdId    _ordId,
        PmfBulkOrd      _pmfBulkOrd)
    {
        ProdTable prodTable;

        prodTable = ProdTable::find(_prodId,true);
        try
        {
            ttsbegin;
            prodTable.PmfConsOrdId  = _ordId;
            prodTable.PmfBulkOrd    = _pmfBulkOrd;
            prodTable.update();
            prodTable.pmfAddMarkingAndReservationWithBulkOrder();
            ttscommit;
        }
        catch(Exception::Error)
        {
            throw error("@PRO2472");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS12725";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a bill of materials ID.
    /// </summary>
    /// <param name="_bomId">
    /// The bill of materials ID to check.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of the item to check.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension to check.
    /// </param>
    /// <returns>
    /// true if the bill of materials ID is valid; otherwise, false.
    /// </returns>
    public static boolean validateBOMId(
        BOMId     _bomId,
        ItemId    _itemId,
        InventDim _inventDim)
    {
        BOMTable    bomTable;
        BOMVersion  bomVersion;
        boolean     ok = true;

        if (_bomId)
        {
            bomTable = BOMTable::find(_bomId);
            if (!bomTable.isApproved())
            {
                ok = checkFailed(strFmt("@SYS29115",_bomId));
            }

            if (ok)
            {
                //must have an approved version.
                bomVersion = BOMVersion::selectBomVersion(_itemId,dateNull(),maxUInt(),_inventDim,
                                                          true,true,true,false,false,_bomId);
                if (!bomVersion)
                {
                    ok = checkFailed(strFmt("@SYS137190",_bomId,_itemId));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a route ID.
    /// </summary>
    /// <param name="_routeId">
    /// The route ID to check.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of the item to check.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension to check.
    /// </param>
    /// <returns>
    /// true if the route ID is valid; otherwise, false.
    /// </returns>
    public static boolean validateRouteId(
        RouteId   _routeId,
        ItemId    _itemId,
        InventDim _inventDim)
    {
        boolean ok = true;

        if (_routeId)
        {
            if (!ProdTable::IsRouteApproved(_routeId))
            {
                ok = checkFailed(strFmt("@SYS29134",_routeId));
            }

            if (ok)
            {
                if (!ProdTable::hasApprovedVersion(_routeId, _itemId, _inventDim))
                {
                    ok = checkFailed(strFmt("@SYS137191",_routeId,_itemId));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsRouteApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the route has been approved.
    /// </summary>
    /// <param name="_routeId">
    /// The route ID to check.
    /// </param>
    /// <returns>
    /// true if the route has been approved; otherwise, false.
    /// </returns>
    protected static boolean IsRouteApproved(RouteId _routeId)
    {
        RouteTable routeTable = RouteTable::find(_routeId);
        return routeTable.RecId && routeTable.isApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApprovedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if approved <c>RouteVersion</c> exists for the passed parameters.
    /// </summary>
    /// <param name="_routeId">
    /// The route ID to check.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of the item to check.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension to check.
    /// </param>
    /// <returns>
    /// true if approved <c>RouteVersion</c> record exists; otherwise, false.
    /// </returns>
    protected static boolean hasApprovedVersion(RouteId _routeId, ItemId _itemId, InventDim _inventDim)
    {
        RouteVersion routeVersion = RouteVersion::selectRouteVersion(_itemId,
                                                                     dateNull(),
                                                                     maxUInt(),
                                                                     _inventDim,
                                                                     true,
                                                                     true,
                                                                     true,
                                                                     false,
                                                                     false,
                                                                     _routeId);
        return routeVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsRegisterProdLookup</Name>
				<Source><![CDATA[
    public static void wmsRegisterProdLookup(Object lookupCtrl)
    {
        Query           q;
        ProdTable       prodTable;
        ProdStatusType  prodStatusType;
        ProdLookup      prodLookup;
        SysDictEnum     sysDictEnum;
        int             i = 0;
        int             value;

        q = new Query();
        q.addDataSource(tableNum(ProdTable));

        sysDictEnum = new SysDictEnum(enumNum(ProdStatus));
        value       = sysDictEnum.firstValue();

        while (i < enumCnt(ProdStatus))
        {
            prodTable.ProdStatus = value;
            prodStatusType = prodTable.status();

            if (prodStatusType.canBeWMSRegistered())
                prodStatusType.queryAddStatus(q);

            value = sysDictEnum.nextValue(value);
            i++;
        }

        prodLookup = new ProdLookup(lookupCtrl,q);
        prodLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOutputLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the default output location for the <c>ProdTable</c> table in the following sequence:
    /// <list>
    /// <item>find the output location from the resource group, to which the scheduled resource of the last operation
    /// belongs to, on a given date,</item>
    /// <item>otherwise, find the output location from the default finished goods location.</item>
    /// </list>
    /// </summary>
    /// <param name="_itemUnderRAF">
    /// The item which is going to be reported as finished.
    /// </param>
    /// <param name="_effectiveDate">
    /// The date for which the resource group effectiveness needs to be looked up.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The resource Id to be used in the search for output locations; optional.
    /// </param>
    /// <param name="_prodInventDim">
    /// The <c>InventDim</c> table associated with this <c>ProdTable</c> instance; optional.
    /// </param>
    /// <returns>
    /// The output location for this production order.
    /// </returns>
    /// <remarks>
    /// This is used by the warehousing functionality to fetch the correct output location.
    /// </remarks>
    public WMSLocationId defaultOutputLocation(
        ItemId          _itemUnderRAF,
        TransDate       _effectiveDate,
        WrkCtrIdBase    _wrkCtrId = '',
        InventDim       _prodInventDim = InventDim::find(this.InventDimId))
    {
        WMSLocationId           ret;
        WrkCtrTable             wrkCtrTable;

        // get from the ProdTable
        ret = _prodInventDim.wMSLocationId;

        // For non WHS item and nonWHS enabled warehouses, the output locations need to be set
        if (!_prodInventDim.inventLocation().WHSEnabled || !WHSInventEnabled::exist(_itemUnderRAF))
        {
            return ret;
        }

        // get from the resource of the last operation
        if (ret == '')
        {
            if (_wrkCtrId == '')
            {
                wrkCtrTable =
                    ProdRoute::getResourceForLastOperation(this.ProdId, _effectiveDate, _prodInventDim.InventSiteId);
            }
            else
            {
                wrkCtrTable = WrkCtrTable::find(_wrkCtrId);
            }

            ret = wrkCtrTable.outputWMSLocationId(_effectiveDate, 
                                                  DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ScheduledToDateTime(this), 
                                                                                                       this.inventDim().inventSite().Timezone)),
                                                  this.ProdId);
        }

        // get from the default finished goods location
        if (ret == '')
        {
            ret = InventLocation::find(_prodInventDim.InventLocationId).DefaultProductionFinishGoodsLocation;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOutputLocationIsLPControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the default output location is LP controlled.
    /// </summary>
    /// <param name = "_itemUnderRAF">The item id for which this is to be queried</param>
    /// <param name = "_effectiveDate">The date when RAF is being done</param>
    /// <param name = "_wrkCtrId">The resource Id to be used in the search for output locations; optional</param>
    /// <returns>True if the output location is license plate controlled; false otherwise</returns>
    public boolean defaultOutputLocationIsLPControlled(
        ItemId          _itemUnderRAF,
        TransDate       _effectiveDate,
        WrkCtrIdBase    _wrkCtrId = '')
    {
        InventDim prodInventDim = InventDim::find(this.InventDimId);
        InventLocationId inventLocationId = prodInventDim.inventLocationId;
        WMSLocationId wmsLocationId = this.defaultOutputLocation(_itemUnderRAF, _effectiveDate, _wrkCtrId, prodInventDim);

        return WMSLocation::find(wmsLocationId, inventLocationId).whsLocationIsLPControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsDSAUpdated_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display whether the DSA register is updated or not.
    /// </summary>
    /// <param name="_prodTable">
    /// The product order information.
    /// </param>
    /// <returns>
    /// True if DSA register is updated for the production order.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display boolean displayIsDSAUpdated_IN(ProdTable _prodTable)
    {
        // <GIN>
        InventTransOrigin   inventTransOrigin;
        TaxTrans_IN         taxTrans;

        select firstonly RecId from taxTrans
            where taxTrans.ExciseRegister == ExciseRegister_IN::DSA
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.ReferenceId == _prodTable.ProdId
                    && (inventTransOrigin.ReferenceCategory == InventTransType::Production
                        || inventTransOrigin.ReferenceCategory == InventTransType::PmfProdCoBy);

        return (taxTrans.RecId != 0);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProdStatusDecreasable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the production status can be decreased.
    /// </summary>
    /// <returns>
    /// True if the production status can be decreased.
    /// </returns>
    /// <remarks>
    /// This is only additional check for India excise.
    /// </remarks>
    public boolean isProdStatusDecreasable_IN()
    {
        // <GIN>
        return !this.displayIsDSAUpdated_IN(this);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProdTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_prodTable_IN">
    /// The extension table record.
    /// </param>
    public void packProdTable_IN(ProdTable_IN _prodTable_IN)
    {
        // <GIN>
        _prodTable_IN.ProdTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_prodTable_IN);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProdTable_IN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProdTable_IN</c> associated with the current record.
    /// </returns>
    public ProdTable_IN prodTable_IN()
    {
        // <GIN>
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProdTable_IN));
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultWMSLocationOnInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default receipt location on the <c>InventDimId</c> for this table.
    /// </summary>
    /// <remarks>
    /// For WHS enabled locations, this step is skipped because the location shall
    /// be defaulted from the output location fallback hierarchy.
    /// </remarks>
    public void setDefaultWMSLocationOnInventDim()
    {
        InventDim       inventDimItemLocal;
        WMSLocation     wmsLocation;

        inventDimItemLocal = InventDim::find(this.InventDimId);
        if (!InventLocation::find(inventDimItemLocal.InventLocationId).WHSEnabled) // no defaulting of receipt location for WHS item
        {
            wmsLocation = WMSLocation::defaultItemLocation(this.ItemId, InventDirection::Receipt, inventDimItemLocal);
            if (wmsLocation)
            {
                inventDimItemLocal.wMSLocationId = wmsLocation.wmsLocationId;
                this.InventDimId = InventDim::findOrCreate(inventDimItemLocal).inventDimId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this production order is handled in advanced warehousing processes.
    /// </summary>
    /// <returns>
    /// true, if the production order is handled in advanced warehousing processes; otherwise, false.
    /// </returns>
    public boolean whsEnabled()
    {
        return InventLocation::find(this.inventDim().InventLocationId).WHSEnabled
            && WHSInventEnabled::exist(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWHSLocationLPSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a WMSLocation id.
    /// </summary>
    /// <param name="_itemId">
    /// The Item ID to check.
    /// </param>
    /// <param name="_wmsLocationId">
    /// The WMSLocation ID to check.
    /// </param>
    /// <param name="_inventLocationId">
    /// The Invent Location ID to check.
    /// </param>
    /// <returns>
    /// true if the item or location are non WHS-enabled or if the item and location are WHS enabled and 
    /// the location is allowed as output location and is license plate controlled, or, for non-license plate 
    /// controlled locations, is part of a Work policy which allows skipping work creation for putaway;
    /// false if the item is WHS-enabled and the location is in a WHS warehouse and non LP controlled and 
    /// there are no Work policies defined which allows skipping work creation for putaway;
    /// </returns>
    public static boolean validateWHSLocationLPSetup(
                                    ItemId           _itemId,
                                    WMSLocationId    _wmsLocationId,
                                    InventLocationId _inventLocationId)
    {
        boolean ret = true;

        if (WHSInventTable::exist(_itemId) && InventLocation::find(_inventLocationId).WHSEnabled)
        {
            ret = WMSLocation::find(_wmsLocationId, _inventLocationId).checkAllowedAsOutputLocation();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeliveryDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery date and time of the order as a combined value
    /// </summary>
    /// <param name = "_prodTable">Order for which delivery date and time is required</param>
    /// <returns>Delivery date and time of the order</returns>
    /// <remarks>
    /// The user time zone offset is removed from datetime returned, to compensate for the offset added during display
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display DlvDateTime DeliveryDateTime(ProdTable _prodTable)
    {
        return DateTimeUtil::newDateTime(_prodTable.DlvDate, _prodTable.DlvTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ScheduledFromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the scheduled start date and time of the order as a combined value
    /// </summary>
    /// <param name = "_prodTable">Order for which scheduled start date and time is required</param>
    /// <returns>Scheduled start date and time of the order</returns>
    /// <remarks>
    /// The user time zone offset is removed from datetime returned, to compensate for the offset added during display
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display SchedDateTime ScheduledFromDateTime(ProdTable _prodTable)
    {
        return DateTimeUtil::newDateTime(_prodTable.SchedStart, _prodTable.SchedFromTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ScheduledToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the scheduled end date and time of the order as a combined value
    /// </summary>
    /// <param name = "_prodTable">Order for which scheduled end date and time is required</param>
    /// <returns>Scheduled end date and time of the order</returns>
    /// <remarks>
    /// The user time zone offset is removed from datetime returned, to compensate for the offset added during display
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display SchedDateTime ScheduledToDateTime(ProdTable _prodTable)
    {
        return DateTimeUtil::newDateTime(_prodTable.SchedEnd, _prodTable.SchedToTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayScheduledFromDateTimeWithUserTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the scheduled start date and time of the order as a combined value with applied user's timezone offset
    /// </summary>
    /// <param name = "_prodTable">Order for which scheduled start date and time is required</param>
    /// <returns>String conversion of scheduled start date and time of the order with applied user's timezone offset</returns>
    [SysClientCacheDataMethod(true), Hookable(false)]
    internal display str displayScheduledFromDateTimeWithUserTimezone(ProdTable _prodTable)
    {
        return ProdTimeZoneHelper::composeDateTimeWithUserTimeZone(_prodTable.SchedStart, _prodTable.SchedFromTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayScheduledToDateTimeWithUserTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the scheduled end date and time of the order as a combined value with applied user's timezone offset
    /// </summary>
    /// <param name = "_prodTable">Order for which scheduled end date and time is required</param>
    /// <returns>String conversion of scheduled end date and time of the order with applied user's timezone offset</returns>
    [SysClientCacheDataMethod(true), Hookable(false)]
    internal display str displayScheduledToDateTimeWithUserTimezone(ProdTable _prodTable)
    {
        return ProdTimeZoneHelper::composeDateTimeWithUserTimeZone(_prodTable.SchedEnd, _prodTable.SchedToTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSetInitialRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial remain physical value based on product type.
    /// </summary>
    public void pmfSetInitialRemainInventPhysical()
    {
        if (#PmfEnabled)
        {
            if (this.inventTable().PmfProductType == PmfProductType::MainItem)
            {
                this.RemainInventPhysical       = 0;
                this.PdsCWRemainInventPhysical  = 0;
            }
            else
            {
                this.RemainInventPhysical       = this.QtySched;
                this.PdsCWRemainInventPhysical  = this.PdsCWBatchSched;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAddMarkingAndReservationWithBulkOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Mark and reserve with bulk item.
    /// </summary>
    public void pmfAddMarkingAndReservationWithBulkOrder()
    {
        ProdBOM             bulkProdLine;
        InventTransIdSum    inventTransIdSum;
        ProdTable           bulkOrder;
        InventTransOriginId transOriginIdProdLine;
        InventTransOriginId transOriginIdBulkOrder;
        InventQty           qtyToMark;
        PdsCWQty            cwQtyToMark;
        PmfQtyDataCarrier   outQuantities = new PmfQtyDataCarrier();
        boolean             hasBulkOrder;

        if (this.PmfConsOrdId && !this.PmfBulkOrd)
        {
            while select bulkProdLine
            where bulkProdLine.ProdId == this.ProdId
               && bulkProdLine.RemainInventPhysical
            {
                transOriginIdProdLine = InventTransOrigin::findByInventTransId(bulkProdLine.InventTransId).RecId;
                inventTransIdSum = InventTransIdSum::newTransOriginId(transOriginIdProdLine);

                if (inventTransIdSum.reserved() != 0)
                {
                    throw error("@SCM:PmfConsOrdMarkAndReserveOutOfConsolidateBatchOrder");
                }

                qtyToMark = inventTransIdSum.onOrder();
                cwQtyToMark = inventTransIdSum.pdsCWOnOrder();

                hasBulkOrder = false;
                while select bulkOrder
                where  bulkOrder.PmfConsOrdId   == this.PmfConsOrdId
                    && bulkOrder.ItemId         == bulkProdLine.ItemId
                    && bulkOrder.PmfBulkOrd
                {
                    hasBulkOrder = true;
                    transOriginIdBulkOrder = InventTransOrigin::findByInventTransId(bulkOrder.InventTransId).RecId;
                    InventTransOrigin::updateMarking(transOriginIdBulkOrder,
                                                 transOriginIdProdLine,
                                                 -qtyToMark,
                                                 '',
                                                 SortOrder::Descending,
                                                 false,
                                                 null,
                                                 null,
                                                 -cwQtyToMark,
                                                 outQuantities);

                    if (outQuantities.parmInventQty() == 0)
                    {
                        continue;
                    }

                    InventTransOrigin::updateMarking(transOriginIdProdLine,
                                                 transOriginIdBulkOrder,
                                                 outQuantities.parmInventQty(),
                                                 '',
                                                 SortOrder::Descending,
                                                 false,
                                                 null,
                                                 null,
                                                 outQuantities.parmCwQty());

                    qtyToMark -= outQuantities.parmInventQty();
                    cwQtyToMark -= outQuantities.parmCwQty();

                    if (qtyToMark == 0)
                    {
                        break;
                    }

                    if (cwQtyToMark * qtyToMark <= 0)
                    {
                        cwQtyToMark = 0;
                    }
                }

                if (hasBulkOrder && qtyToMark != 0)
                {
                    throw error("@SCM:PmfConsOrdNotEnoughBulkItem");
                }

                InventUpd_Reservation::updateReserveRefTransIdOnOrder(InventMovement::construct(bulkProdLine));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfRemoveMarkingAndReservationWithBulkOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Remove marking and reservation with bulk item.
    /// </summary>
    public void pmfRemoveMarkingAndReservationWithBulkOrder()
    {
        ProdBOM                     bulkProdLine;
        InventTransIdSum_MarkingRef inventTransIdSum;
        ProdTable                   bulkOrder;
        InventTransOriginId         transOriginIdProdLine;
        InventTransOriginId         transOriginIdBulkOrder;

        ttsBegin;
        if (this.PmfConsOrdId && !this.PmfBulkOrd)
        {
            while select bulkProdLine
            where bulkProdLine.ProdId == this.ProdId
               && bulkProdLine.RemainInventPhysical
            {
                transOriginIdProdLine = InventTransOrigin::findByInventTransId(bulkProdLine.InventTransId).RecId;

                while select bulkOrder
                where  bulkOrder.PmfConsOrdId   == this.PmfConsOrdId
                    && bulkOrder.ItemId         == bulkProdLine.ItemId
                    && bulkOrder.PmfBulkOrd
                {
                    transOriginIdBulkOrder = InventTransOrigin::findByInventTransId(bulkOrder.InventTransId).RecId;

                    inventTransIdSum = InventTransIdSum_MarkingRef::newMarkingRef(transOriginIdProdLine, transOriginIdBulkOrder);

                    if (inventTransIdSum.reserved())
                    {
                        InventTransOrigin::deleteMarking(transOriginIdProdLine,
                                                    transOriginIdBulkOrder,
                                                    inventTransIdSum.reserved(),
                                                    false,
                                                    null,
                                                    null,
                                                    true,
                                                    false,
                                                    inventTransIdSum.pdsCWReserved());

                        InventTransOrigin::deleteMarking(transOriginIdBulkOrder,
                                                    transOriginIdProdLine,
                                                    -inventTransIdSum.reserved(),
                                                    false,
                                                    null,
                                                    null,
                                                    true,
                                                    false,
                                                    -inventTransIdSum.pdsCWReserved());
                    }
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propagateFinancialDimToProdLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Merge financial dimenison changes on production/batch order with financial dimensions on materials or co/by products.
    /// </summary>
    private void propagateFinancialDimToProdLines()
    {
        if (this.status().isBefore(ProdStatus::StartedUp))
        {
            ProdBOM prodBOM;

            while select forupdate prodBOM
                where prodBOM.ProdId == this.ProdId
            {
                prodBOM.DefaultDimension = prodBOM.mergeDimension(this.DefaultDimension, prodBOM.DefaultDimension);
                prodBOM.update();
            }
        }

        if (this.ProdType == ProdType::Process)
        {
            PmfProdCoBy prodCoBy;

            while select forupdate prodCoBy
                where prodCoBy.ProdId == this.ProdId
            {
                prodCoBy.DefaultDimension = prodCoBy.mergeDimension(this.DefaultDimension, prodCoBy.DefaultDimension);
                prodCoBy.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchBalancingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch balancing is enabled on a production order.
    /// </summary>
    /// <param name = "_prodTable">Production order to check if batch balancing should be enabled.</param>
    /// <returns>true if batch balancing should be enabled; otherwise, false</returns>
    public boolean isBatchBalancingEnabled()
    {
        if (this.ProdType != ProdType::Process
        ||  !this.hasActiveIngredient()
        ||  (ProdBOM::hasWHSItem(this.ProdId) 
        &&   ProdTable::isActiveIngredientBelowLocation(this.ProdId)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveIngredientBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any active ingredients on the production order are batch tracked below location.
    /// </summary>
    /// <param name = "_prodId">The production ID to check for active ingredients batch tracked below location.</param>
    /// <returns>true if an active ingredient is batch tracked below location; otherwise, false</returns>
    private static boolean isActiveIngredientBelowLocation(ProdId _prodId)
    {
        Query                q          = new Query();
        QueryBuildDataSource prodBOM_ds = q.addDataSource(tableNum(ProdBOM));
        
        prodBOM_ds.addRange(fieldNum(ProdBOM, ProdId)).value(_prodId);
        prodBOM_ds.addRange(fieldNum(ProdBOM, PDSIngredientType)).value(enum2Str(PDSIngredientTypeEnum::Active));

        WhsReservationHierarchyProvider::addHigherAndLowerDimensionCriteria(prodBOM_ds,
                                                                            fieldNum(ProdBOM, ItemId),
                                                                            fieldNum(ProdBOM, DataAreaId),
                                                                            fieldNum(InventDim, InventBatchId),
                                                                            fieldNum(InventDim, wMSLocationId));

        prodBOM_ds.firstOnly(true);

        QueryRun qr = new QueryRun(q);
        
        return qr.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveIngredient</Name>
				<Source><![CDATA[
    private boolean hasActiveIngredient()
    {
        return (select firstonly RecId from ProdBOM
                    where ProdBOM.ProdId            == this.ProdId
                    &&    ProdBOM.PDSIngredientType == PDSIngredientTypeEnum::Active).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveOrCompensatingIngredient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the production order has an active or compensating ingredient.
    /// </summary>
    /// <returns>true if the production order has an active or compensating ingredient; otherwise, false</returns>
    public static boolean hasActiveOrCompensatingIngredient(ProdId _prodId)
    {
        return (select firstonly RecId from ProdBOM
                    where ProdBOM.ProdId             == _prodId
                       && (ProdBOM.PDSIngredientType == PDSIngredientTypeEnum::Active
                       ||  ProdBOM.PDSIngredientType == PDSIngredientTypeEnum::Compensating)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMReservation</Name>
				<Source><![CDATA[
    private void updateBOMReservation()
    {
        ProdBOM prodBOM;

        ttsbegin;

        update_recordset prodBOM
            setting Reservation = this.Reservation
            where prodBOM.ProdId            == this.ProdId
            &&    prodBOM.PDSIngredientType != PDSIngredientTypeEnum::None
            &&    prodBOM.Reservation       != this.Reservation;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsJobRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if there is registration for the production order.
    /// </summary>
    /// <param name="_prodId">
    /// The Production ID.
    /// </param>
    /// <returns>
    /// True if the production order has registrations; otherwise, false.
    /// </returns>
    public static boolean existsJobRegistration(ProdId _prodId)
    {
        JmgStampJournalTable jmgStampJournalTable;
        JmgStampJournalTrans jmgStampJournalTrans;

        select firstonly RecId from jmgStampJournalTrans
            where jmgStampJournalTrans.JobRef          == _prodId
            exists join jmgStampJournalTable
                where jmgStampJournalTable.Worker      == jmgStampJournalTrans.Worker
                   && jmgStampJournalTable.ProfileDate == jmgStampJournalTrans.ProfileDate;

        return jmgStampJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(ProdTable, PlanningPriority),
                [fieldNum(ProdTable, ItemId),
                 fieldNum(ProdTable, InventDimId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFinanciallyUpdatedInventTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any financially processed inventory transactions for given production order.
    /// </summary>
    /// <returns>
    /// true - if given production order has financially processed inventory transactions; false, otherwise.
    /// </returns>
    internal boolean hasFinanciallyUpdatedInventTrans_RU()
    {
        const container ProdInventTransTypes = [InventTransType::Production, InventTransType::PmfProdCoBy];
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select firstonly RecId from inventTransOrigin
            where inventTransOrigin.ReferenceId == this.ProdId
        exists join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId && inventTrans.PackingSlipReturned == NoYes::No
                && ((inventTransOrigin.ReferenceCategory == InventTransType::ProdLine && inventTrans.StatusIssue == StatusIssue::Sold)
                    || (inventTransOrigin.ReferenceCategory in ProdInventTransTypes && inventTrans.StatusReceipt == StatusReceipt::Purchased));

        return inventTransOrigin.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateReservationUsingExplosionBeforeScheduling</Name>
				<Source><![CDATA[
    internal boolean mustUpdateReservationUsingExplosionBeforeScheduling()
    {
        return this.status().isBefore(ProdStatus::Scheduled) &&
               this.hasProdBOMReservation(ProdReservation::Scheduling);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopLevelProductionId</Name>
				<Source><![CDATA[
    public static ProdId getTopLevelProductionId(ProdId _collectRefProdId)
    {
        ProdTable prodTable;
        
        select firstonly ProdId from prodTable
            order by CollectRefLevel
            where prodTable.CollectRefProdId == _collectRefProdId;

        return prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMLinesReservationAndMarkingFromPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs reservation and/or marking for production order BOM lines based on the planning result.
    /// </summary>
    /// <param name = "_prodId">Id of the production order.</param>
    /// <param name = "_doMarking">true if marking should be done; false, otherwise.</param>
    /// <param name = "_deleteMarking">true if marking should be deleted; false, otherwise.</param>
    /// <param name = "_planVersion">Plan version.</param>
    public static void updateBOMLinesReservationAndMarkingFromPlan(
        ProdId _prodId,
        boolean _doMarking,
        boolean _deleteMarking,
        ReqPlanVersionRefRecId _planVersion)
    {
        ProdBOM prodBOM;

        if (!_doMarking)
        {
            // No marking, only do reservation
            while select forupdate prodBOM
                where  prodBOM.ProdId        == _prodId
                   &&  prodBOM.Reservation   == ProdReservation::Scheduling
            {
                InventMovement::construct(prodBOM).updateReservation();
            }
        }
        else
        {
            InventTransOriginProdBOM inventTransOriginProdBOM;

            // Both marking and reservation
            while select forupdate prodBOM
                where prodBOM.ProdId       == _prodId 
                   && prodBOM.EndConsump   == NoYes::No
                 join InventTransOrigin from inventTransOriginProdBOM
                    where inventTransOriginProdBOM.ProdBOMDataAreaId    == prodBOM.DataAreaId
                       && inventTransOriginProdBOM.ProdBOMInventTransId == prodBOM.InventTransId
            {
                InventQty reserveQty = 0;
                InventUpdateOnhandGlobal::instance().inventUpdateOnhand().parmSkipInventSumLogTTS(true);

                ReqTrans reqTrans;
                while select forupdate reqTrans
                    index hint RefIdx
                    where reqTrans.PlanVersion               == _planVersion
                          && reqTrans.RefType                == ReqRefType::ProdLine
                          && reqTrans.RefId                  == prodBOM.ProdId
                          && reqTrans.InventTransOrigin      == inventTransOriginProdBOM.InventTransOrigin
                          && (_deleteMarking || reqTrans.MarkingRefInventTransOrigin == 0)
                {
                    InventTrans::updateMarkReqTransCov(reqTrans);
                    reserveQty += reqTrans.qtyCovOnhand();
                }

                InventUpdateOnhandGlobal::instance().inventUpdateOnhand().parmSkipInventSumLogTTS(false);

                if (reserveQty < 0)
                {
                    InventMovement movement = InventMovement::construct(prodBOM);
                    if (movement)
                    {
                        reserveQty -= movement.transIdSum(true).reservPhysical(); // deduct already reserved qty.

                        if (reserveQty < 0)
                        {
                            InventUpd_Reservation::newMovement(movement, reserveQty, true, true).updateNow();
                        }
                    }
                }
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124183</DeveloperDocumentation>
	<FormRef>ProdTable</FormRef>
	<Label>@SYS9747</Label>
	<SingularLabel>@SYS89639</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>ProdIdx</PrimaryIndex>
	<ReplacementKey>ProdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProdBOM</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdBOM</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdRoute</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdRoute</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdTableProj</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdTableProj</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrCapRes</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrCapRes</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BackorderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyStUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedEnd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS7916</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMRoute</Name>
			<Label>@SYS22227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateScheduled</Name>
			<Label>@SYS22158</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchedStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedFromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedToTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateScheduledTimezone</Name>
			<Label>@SYS22158</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayScheduledFromDateTimeWithUserTimezone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayScheduledToDateTimeWithUserTimezone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateUpdated</Name>
			<Label>@SYS22156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StUpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinishedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grouping</Name>
			<Label>@SYS21667</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LatestScheduling</Name>
			<Label>@SYS25360</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LatestSchedDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestSchedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestSchedTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Measurement</Name>
			<Label>@SYS2021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Density</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS17860</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdOrigId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdPostingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfCoByVarAllow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfTotalCostAllocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrderReference</Name>
			<Label>@SYS24657</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfBatch</Name>
			<Label>@PRO90</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfYieldPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfReworkBatch</Name>
			<Label>@PRO1698</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfReworkBatch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price_RU</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceGroup_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Production</Name>
			<Label>@SYS4398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanningPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductionBatch</Name>
			<Label>@SYS4398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfConsOrdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfBulkOrd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPostingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinkedToOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtySched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectFinishedItem</Name>
			<Label>@SYS105517</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QualityManagement</Name>
			<Label>@SYS113616</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuantityUpdated</Name>
			<Label>@SYS22157</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyStUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchEst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchStup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Route</Name>
			<Label>@SYS4190</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteJobs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckRoute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scheduling</Name>
			<Label>@SYS21838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdLocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdPrio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdPostingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdWHSReleasePolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfTotalCostAllocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25532</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BackorderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryReference</Name>
			<Label>@SYS24658</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectRefProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectRefLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefLookUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GanttColorId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BackorderStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdBackStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BOMDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22297</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS22298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalcDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS101273</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckRoute</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<Label>@SYS14575</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CollectRefLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMLevel</ExtendedDataType>
			<Label>@SYS24986</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectRefProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<Label>@SYS24987</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Density</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDensity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DlvDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
			<Label>@SYS4508</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>DlvTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedTime</ExtendedDataType>
			<Label>@SYS8758</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FinishedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS9576</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GanttColorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>GanttColorId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdProduction</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LatestSchedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>SchedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LatestSchedDirection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<Label>@SYS8350</Label>
			<EnumType>SchedDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>LatestSchedTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchEst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchEst</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchSched</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchStup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchStup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS129</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfBulkOrd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfBulkOrd</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfCoByVarAllow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>PmfCoByVarAllow</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfConsOrdId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfConsOrdId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfReworkBatch</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfReworkBatch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfTotalCostAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfTotalCostAllocation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfYieldPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfYieldPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroup_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CustPriceGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdLocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>Locked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdOrigId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdOrigId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdPoolId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS10507</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdPostingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS13356</Label>
			<EnumType>ProdPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ProdPrio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfitSet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostProfitSet</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjLinkedToOrder</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS105516</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjPostingType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjProdPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyCalc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdQtyCalc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtySched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdQtySched</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyStUp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdQtyStUp</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RealDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS12257</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RefLookUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdRefLookUp</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReleasedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS6966</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS54074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdSched</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdReservation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteJobs</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<Label>@SYS6912</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SchedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS11771</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SchedEnd</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SchedFromTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedFromTime</ExtendedDataType>
			<HelpText>@SCM:SchedFromTimeProdTableHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SchedStart</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SchedStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<EnumType>ProdSchedStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SchedToTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedToTime</ExtendedDataType>
			<HelpText>@SCM:SchedToTimeProdTableHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StUpDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS4695</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdWHSReleasePolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<EnumType>ProdWHSReleasePolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCreateBOMLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdTableSkipCreateBOMLines</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCreateRouteOperations</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdTableSkipCreateRouteOperations</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdStatusIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BackStatusItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeRemainIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdPoolId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefCollectIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CollectRefProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectRefLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Project</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RealDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RealDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjInventJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BudgetReservationLine_PSN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EcoResCategory</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostAmount</MapField>
					<MapFieldTo>ProjCostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostMarkup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
					<MapFieldTo>ProjCostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjPriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>ProjSalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>QtySched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>DlvDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>WrkCtrSchedulerOrder</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CollectRefId</MapField>
					<MapFieldTo>CollectRefProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CollectRefLevel</MapField>
					<MapFieldTo>CollectRefLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PlanVersion</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>QtySched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefId</MapField>
					<MapFieldTo>ProdId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>QtySched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CurrencyCode_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode_RU</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode_RU</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GanttColorTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GanttColorTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GanttColorId</Name>
					<Field>GanttColorId</Field>
					<RelatedField>color</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ColorIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS304946</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::InventJournal</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS309926</EntityRelationshipRole>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductTransfer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::InventTransfer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginalProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OriginalProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdOrigId</Name>
					<SourceEDT>ProdOrigId</SourceEDT>
					<Field>ProdOrigId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlannedOrder</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS124184</EntityRelationshipRole>
			<RelatedTable>ReqPO</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlannedOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPOId</Name>
					<Field>ReqPOId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfConsOrd</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>PmfConsOrd</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PmfConsOrd</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfConsOrdId</Name>
					<Field>PmfConsOrdId</Field>
					<RelatedField>ConsOrdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceGroup_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PriceGroup_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceGroup_RU</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<Field>PriceGroup_RU</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdGroupId</Name>
					<Field>ProdGroupId</Field>
					<RelatedField>ProdGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124185</EntityRelationshipRole>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionBom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefTransId</Name>
					<Field>InventRefTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::ProdLine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdPoolId</Name>
					<Field>ProdPoolId</Field>
					<RelatedField>ProdPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PoolIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS123434</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CurrentProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTableProj</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS124186</EntityRelationshipRole>
			<RelatedTable>ProdTableProj</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Production</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124187</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjSalesUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitId</Name>
					<Field>ProjSalesUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReferenceProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CollectRefProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>CollectRefProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdSched</Name>
					<Field>ReqPlanIdSched</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteId</Name>
					<Field>RouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124188</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SalesStatus_Extern</Name>
					<RelatedField>SalesStatus</RelatedField>
					<ValueStr>SalesStatus::Backorder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesOrderLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124189</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrderLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SalesStatus_Extern</Name>
					<RelatedField>SalesStatus</RelatedField>
					<ValueStr>SalesStatus::Backorder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefTransId</Name>
					<Field>InventRefTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Sales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PropertyIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>