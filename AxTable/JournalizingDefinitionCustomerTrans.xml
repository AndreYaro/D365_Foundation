<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionCustomerTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionCustomerTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the line of the <c>JournalizingDefinitionCustomerTrans</c> and clear the cache of the <c>JournalizingMainAccDimensionListProvider</c>.
    /// </summary>
    public void delete()
    {
        super();
        JournalizingMainAccDimensionListProvider::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editJournalizngDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the journalizing definition code.
    /// </summary>
    /// <param name="set">
    /// true if the journalizing definition code is set; otherwise, false.
    /// </param>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code sets or retrieves on the basis of <paramref name="set"/> value.
    /// </param>
    /// <returns>
    /// The journalizing definition code of the record in the <c>JournalizingDefinition</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit JournalizingDefinitionCode editJournalizngDefinition(boolean set, JournalizingDefinitionCode _journalizingDefinitionCode)
    {
        JournalizingDefinitionVersion journalizingDefinitionVersion;
        SysDateEffectiveDataManager   sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition);

        if (set)
        {
            if (JournalizingDefinition::exist(_journalizingDefinitionCode))
            {
                if (JournalizingDefinition::checkExistJournalizingDefinitionByModule(_journalizingDefinitionCode, JournalizingDefinitionModuleId::AccountsReceivable))
                {
                    journalizingDefinitionVersion = sysDateEffectiveDataManager.findCurrentVersionByParentId(JournalizingDefinition::find(_journalizingDefinitionCode).RecId);

                    if (!journalizingDefinitionVersion)
                    {
                        checkFailed("@SYS132141");
                    }
                    else
                    {
                        this.JournalizingDefinition = JournalizingDefinition::find(_journalizingDefinitionCode).RecId;
                    }
                }
            }
            else
            {
                checkFailed(strFmt("@SPS277",_journalizingDefinitionCode));
            }
        }
        else
        {
            _journalizingDefinitionCode = JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionCode;
        }

        return _journalizingDefinitionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMatchCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the match code.
    /// </summary>
    /// <param name="set">
    /// true if the match code is set; otherwise, false.
    /// </param>
    /// <param name="_matchCodeId">
    /// The match code to be set.
    /// </param>
    /// <returns>
    /// The match code in the <c>JournalizingDefinitionCustomerTrans</c> table
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit MatchCodeId editMatchCode(boolean set, MatchCodeId _matchCodeId)
    {
        if (set)
        {
            this.setMatchCode(_matchCodeId);
        }
        else
        {
            _matchCodeId = this.getMatchCode();
        }

        return _matchCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the match code.
    /// </summary>
    /// <returns>
    /// The match code of the record in the <c>JournalizingDefinitionCustomerTrans</c> table.
    /// </returns>
    private MatchCodeId getMatchCode()
    {
        MatchCodeId   matchCodeId;

        switch (this.MatchType)
        {
            case BillingCodeBillingClassAll::BillingCode:
                matchCodeId = CustBillingCode::find(this.CustBillingCode).BillingCode;
                break;

            case BillingCodeBillingClassAll::BillingClassification:
                matchCodeId = CustBillingClassification::find(this.CustBillingClassification).BillingClassification;
                break;

            case BillingCodeBillingClassAll::All:
                matchCodeId = '';
                break;
        }
        return matchCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert a new line in the <c>JournalizingDefinitionCustomerTrans</c> table and clear the cache of the <c>JournalizingMainAccDimensionListProvider</c>.
    /// </summary>
    public void insert()
    {
        super();
        JournalizingMainAccDimensionListProvider::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizingDefinitionDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the posting definition description based on a posting definition code.
    /// </summary>
    /// <returns>
    /// The posting definition description to be displayed to the user.
    /// </returns>
    /// <remarks>
    /// This method returns the posting definition description based on a posting Definition code.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display JournalizingDefinitionDesc journalizingDefinitionDescription()
    {
        return JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the match code.
    /// </summary>
    /// <param name="_matchCodeId">
    /// The match code sets in the  <c>JournalizingDefinitionCustomerTrans</c> table.
    /// </param>
    private void setMatchCode(MatchCodeId _matchCodeId)
    {
        if (!_matchCodeId)
        {
            this.CustBillingCode = 0;
            this.CustBillingClassification = 0;
        }
        else
        {
            switch (this.MatchType)
            {
                case BillingCodeBillingClassAll::BillingCode:
                    if ((CustBillingCode::findBillingCode(_matchCodeId).RecId) == 0)
                    {
                        checkFailed(strFmt("@SYS112224", _matchCodeId, fieldPName(CustBillingCode, BillingCode), tablePName(CustBillingCode)));
                    }
                    else
                    {
                        this.CustBillingCode = CustBillingCode::findBillingCode(_matchCodeId).RecId;
                        this.CustBillingClassification = 0;
                    }
                    break;

                case BillingCodeBillingClassAll::BillingClassification:
                    if ((CustBillingClassification::findBillingClassification(_matchCodeId).RecId) == 0)
                    {
                        if (this.CustomerTransactionType == CustomerTransactionType::FreeTextInvoice)
                        {
                            checkFailed(strFmt("@SYS112224", _matchCodeId, fieldPName(CustBillingClassification, BillingClassification), tablePName(CustBillingClassification)));
                        }
                        else
                        {
                            checkFailed("@SPS665");
                        }
                    }
                    else
                    {
                        this.CustBillingClassification = CustBillingClassification::findBillingClassification(_matchCodeId).RecId;
                        this.CustBillingCode = 0;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates line record of the <c>JournalizingDefinitionCustomerTrans</c> table and clear the cache of the <c>JournalizingMainAccDimensionListProvider</c>.
    /// </summary>
    public void update()
    {
        super();
        JournalizingMainAccDimensionListProvider::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(JournalizingDefinitionCustomerTrans, JournalizingDefinition):
                ret = JournalizingDefinition::checkExistJournalizingDefinitionByModule(JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionCode, JournalizingDefinitionModuleId::AccountsReceivable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.MatchType == BillingCodeBillingClassAll::BillingCode && !this.CustBillingCode)
        {
            ret = checkFailed("@SPS274");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified RecId exists in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The posting definition code to find.
    /// </param>
    /// <returns>
    /// true if the RecId exists in the table; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!JournalizingDefinitionCustomerTrans::exist(_recId))
        {
            ret = checkFailed(strFmt(JournalizingDefinitionCustomerTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified RecId exists in the table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId to find.
    /// </param>
    /// <returns>
    /// true if the RecId exists in the table; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinitionCustomerTrans
                    where journalizingDefinitionCustomerTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the JournalizingDefinitionCustomerTrans table for the specified RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use.
    /// </param>
    /// <returns>
    /// A JournalizingDefinitionCustomerTrans table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static JournalizingDefinitionCustomerTrans find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionCustomerTrans journalizingDefinitionCustomerTrans;

        journalizingDefinitionCustomerTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionCustomerTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly journalizingDefinitionCustomerTrans
                where journalizingDefinitionCustomerTrans.RecId == _recId;

        return journalizingDefinitionCustomerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the JournalizingDefinitionCustomerTrans table does not exist.
    /// </summary>
    /// <returns>
    /// A message that indicates the record does not exist.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128269";
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBillingClassificationLookupFilterOutTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the billing classification lookup functionality.
    /// </summary>
    /// <param name="_formControl">
    /// The form control object from where this method is called.
    /// </param>
    /// <param name="_customerTransactionType">
    /// The <c>CustomerTransactionType</c> parameter value that is filtered out of the lookup query.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void custBillingClassificationLookupFilterOutTransType(FormControl _formControl, CustomerTransactionType _customerTransactionType)
    {
        SysTableLookup sysTableLookup = JournalizingDefinitionCustomerTrans::initCustBillingClassLookupFilterOutTransType(_formControl, _customerTransactionType);

        // Perform the lookup
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBillingClassLookupFilterOutTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the billing classification lookup functionality.
    /// </summary>
    /// <param name="_formControl">
    /// The form control object from where this method is called.
    /// </param>
    /// <param name="_customerTransactionType">
    /// The <c>CustomerTransactionType</c> value that is filtered out of the lookup query.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysTableLookup initCustBillingClassLookupFilterOutTransType(FormControl _formControl, CustomerTransactionType _customerTransactionType)
    {
        SysTableLookup       sysTableLookup;
        Query                query = new Query();
        QueryBuildDataSource qbdsCustBillingClassification;
        QueryBuildDataSource qbdsJournalizingDefinitionCustTrans;

        sysTableLookup = SysTableLookup::newParameters(tableNum(CustBillingClassification), _formControl);

        // Set the query to be used by the lookup form
        sysTableLookup.parmQuery(JournalizingDefinitionCustomerTrans::initCustBillingClassFilterOutTransTypeQuery(_customerTransactionType));

        // Specify the BillingClassification field to show in the form
        sysTableLookup.addLookupfield(fieldNum(CustBillingClassification, BillingClassification));
        sysTableLookup.addLookupfield(fieldNum(CustBillingClassification, Description));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBillingClassFilterOutTransTypeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>Query</c> object that filters out <c>CustBillingCode</c> records based
    /// on the <c>CustomerTransactionType</c> parameter value.
    /// </summary>
    /// <param name="_customerTransactionType">
    /// The <c>CustomerTransactionType</c> value for which the query is being filtered out.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query initCustBillingClassFilterOutTransTypeQuery(CustomerTransactionType _customerTransactionType)
    {
        Query                query = new Query();
        QueryBuildDataSource qbdsCustBillingClassification;
        QueryBuildDataSource qbdsJournalizingDefinitionCustTrans;

        qbdsCustBillingClassification = query.addDataSource(tableNum(CustBillingClassification));

        qbdsJournalizingDefinitionCustTrans = qbdsCustBillingClassification.addDataSource(tableNum(JournalizingDefinitionCustomerTrans));
        qbdsJournalizingDefinitionCustTrans.addRange(fieldNum(JournalizingDefinitionCustomerTrans, CustomerTransactionType)).value(enum2str(_customerTransactionType));
        qbdsJournalizingDefinitionCustTrans.relations(true);
        qbdsJournalizingDefinitionCustTrans.joinMode(JoinMode::NoExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBillingCodeLookupFilterOutTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the billing classification lookup functionality.
    /// </summary>
    /// <param name="_formControl">
    /// The form control object from where this method is called.
    /// </param>
    /// <param name="_customerTransactionType">
    /// The <c>CustomerTransactionType</c> value that is filtered out of the lookup query.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void custBillingCodeLookupFilterOutTransType(FormControl _formControl, CustomerTransactionType _customerTransactionType)
    {
        SysTableLookup sysTableLookup = JournalizingDefinitionCustomerTrans::initCustBillingCodeLookupFilterOutTransType(_formControl, _customerTransactionType);

        // Perform the lookup
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBillingCodeLookupFilterOutTransType</Name>
				<Source><![CDATA[
    //// <summary>
    /// Initializes the billing code lookup functionality.
    /// </summary>
    /// <param name="_formControl">
    /// The form control object from where this method is called.
    /// </param>
    /// <param name="_customerTransactionType">
    /// The <c>CustomerTransactionType</c> value that is filtered out of the lookup query.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysTableLookup initCustBillingCodeLookupFilterOutTransType(FormControl _formControl, CustomerTransactionType _customerTransactionType)
    {
        SysTableLookup       sysTableLookup;
        QueryBuildDataSource qbdsBillingCode;
        QueryBuildDataSource qbdsJournalizingDefinitionCustTrans;

        sysTableLookup = SysTableLookup::newParameters(tableNum(CustBillingCode), _formControl);

        // Set the query to be used by the lookup form
        sysTableLookup.parmQuery(JournalizingDefinitionCustomerTrans::initCustBillingCodeFilterOutTransTypeQuery(_customerTransactionType));

        // Specify the fields to show in the form
        sysTableLookup.addLookupfield(fieldNum(CustBillingCode, BillingCode));
        sysTableLookup.addLookupfield(fieldNum(CustBillingCode, Description));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBillingCodeFilterOutTransTypeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>Query</c> object that filters out <c>CustBillingCode</c> records based
    /// on the <c>CustomerTransactionType</c> parameter value.
    /// </summary>
    /// <param name="_customerTransactionType">
    /// The <c>CustomerTransactionType</c> value for which the query is being filtered out.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query initCustBillingCodeFilterOutTransTypeQuery(CustomerTransactionType _customerTransactionType)
    {
        Query                query = new Query();
        QueryBuildDataSource qbdsBillingCode;
        QueryBuildDataSource qbdsJournalizingDefinitionCustTrans;

        qbdsBillingCode = query.addDataSource(tableNum(CustBillingCode));

        qbdsJournalizingDefinitionCustTrans = qbdsBillingCode.addDataSource(tableNum(JournalizingDefinitionCustomerTrans));
        qbdsJournalizingDefinitionCustTrans.addRange(fieldNum(JournalizingDefinitionCustomerTrans, CustomerTransactionType)).value(enum2str(_customerTransactionType));
        qbdsJournalizingDefinitionCustTrans.relations(true);
        qbdsJournalizingDefinitionCustTrans.joinMode(JoinMode::NoExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeToCustomerTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value of <c>CustomerTransactionType</c> that is related to the specified <c>LedgerPostingType</c> enumeration value.
    /// </summary>
    /// <param name = "_ledgerPostingType">The <c>LedgerPostingType</c>.</param>
    /// <returns>A value of <c>CustomerTransactionType</c> that is related to the specified <c>LedgerPostingType</c>.</returns>
    internal static CustomerTransactionType ledgerPostingTypeToCustomerTransactionType(LedgerPostingType _ledgerPostingType)
    {
        CustomerTransactionType customerTransactionType;

        switch (_ledgerPostingType)
        {
            case LedgerPostingType::CustBalance :
                customerTransactionType = CustomerTransactionType::FreeTextInvoice;
                break;

            case LedgerPostingType::CustInterest :
                customerTransactionType = CustomerTransactionType::Interestnote;
                break;

            case LedgerPostingType::LedgerJournal :
                customerTransactionType = CustomerTransactionType::WriteOff;
                break;
        }

        return customerTransactionType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS272</DeveloperDocumentation>
	<FormRef>journalizingDefinitionTrans</FormRef>
	<Label>@SPS273</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustomerTransactionType</TitleField1>
	<TitleField2>JournalizingDefinition</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editJournalizngDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editMatchCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountsReceivable</Name>
			<Label>@SYS128605</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editMatchCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editJournalizngDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomerTransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomerTransactionTypeId</ExtendedDataType>
			<EnumType>CustomerTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BillingCodeBillingClassAllId</ExtendedDataType>
			<EnumType>BillingCodeBillingClassAll</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionCustTrans</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CustBillingCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MatchType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerTransactionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustBillingClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_JournalizingDefinitionCustomerTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBillingCode</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustBillingCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingCode_JournalizingDefinitionCustomerTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingCode</Name>
					<Field>CustBillingCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinition</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JournalizingDefinition_JournalizingDefinitionCustomerTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinition</Name>
					<Field>JournalizingDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>