<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestUserRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequestUserRequest extends UserRequest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// The account number for the request.
    /// </summary>
    /// <returns>
    /// A string representation of the account number.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> will provide the account number specific to the sub type.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestAccountNumber accountNumber()
    {
        return this.vendorRequest().VendRequestNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the person for the request.
    /// </summary>
    /// <returns>
    /// true if the person is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> can override this this method to validate the person.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkPerson()
    {
        DirPartyRelationship    contactRelationship;
        DirRelationshipTypeId   relationShipType;
        boolean                 ret = true;

        relationShipType = DirRelationshipTypeTable::findBySystemType(DirSystemRelationshipType::ProspectiveVendorContact).RelationshipTypeId;

        select RecId from contactRelationship
            where contactRelationship.ParentParty == this.vendorRequest().VendParty
            && contactRelationship.ChildParty == this.Person
            && contactRelationship.RelationshipTypeId == relationShipType;

        if (contactRelationship.RecId == 0)
        {
            ret = checkFailed("@SYS334522");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequestedRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the requested role is available to the requested person.
    /// </summary>
    /// <returns>
    /// true if the role is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> can override this this method to validate the role.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkRequestedRole()
    {
        DirExternalRole externalRole;
        boolean         ret = true;

        if (this.RequestedRole != 0)
        {
            select RecId from externalRole
                where externalRole.Role == this.RequestedRole
                && externalRole.EntityType == UserExternalPartyEntityType::ProspectiveVendor;

            if (externalRole.RecId == 0)
            {
                ret = checkFailed("@SYS324475");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the request from a related record.
    /// </summary>
    /// <param name="_relatedRecord">
    /// The related record to initialize the request from.
    /// </param>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> can override this this method to initialize the request.
    /// </remarks>
    public void initFrom(Common _relatedRecord)
    {
        VendRequest vendorRequest;

        super(_relatedRecord);

        if (_relatedRecord is VendRequest)
        {
            vendorRequest = _relatedRecord as VendRequest;
            this.VendorRequest = vendorRequest.RecId;
            this.Person = vendorRequest.ContactParty;
            this.personModified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();

        this.AuthenticationMode = UserRequestParameters::find().VendorAuthenticationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the organization name for the requested person.
    /// </summary>
    /// <returns>
    /// A string representation of the organization name.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> can override this this method to provide the organization name, if
    /// applicable.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestOrganizationName organizationName()
    {
        return DirPartyTable::findRec(this.vendorRequest().VendParty).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>personFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the filter for the lookup of the person for the request.
    /// </summary>
    /// <returns>
    /// The filter for the person lookup.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> can override this this method to provide the filter.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public dirPartyLookupEntitiesFilter personFilter()
    {
        DirRelationshipTypeId           relationShipType;
        dirPartyLookupEntitiesFilter    filter = dirPartyLookupEntitiesFilter::generateDirPartyLookupEntitiesFilter(NoYes::No);

        relationShipType = DirRelationshipTypeTable::findBySystemType(DirSystemRelationshipType::ProspectiveVendorContact).RelationshipTypeId;
        filter.parmFilterRelationshipType(relationShipType);

        filter.parmFilterParentParty(this.vendorRequest().VendParty);

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the request type of the request.
    /// </summary>
    /// <returns>
    /// The request type.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> should override this this method to provide the request type.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestEntityType requestType()
    {
        return UserRequestEntityType::ProspectiveVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default security role for the person for the request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDefaultRole()
    {
        DirExternalRole externalRole;

        select firstonly Role from externalRole
                where externalRole.EntityType == UserExternalPartyEntityType::ProspectiveVendor;

        this.RequestedRole = externalRole.Role;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoleLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that will be used as the security role lookup.
    /// </summary>
    /// <param name="_securityRoleLookupQuery">
    /// The query to update.
    /// </param>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> can override this this method to update the default query.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateRoleLookupQuery(Query _securityRoleLookupQuery)
    {
        QueryBuildDataSource externalRoleDataSource = _securityRoleLookupQuery.dataSourceTable(tableNum(SecurityRole)).addDataSource(tableNum(DirExternalRole));

        externalRoleDataSource.addLink(fieldNum(SecurityRole, RecId), fieldNum(DirExternalRole, Role));
        externalRoleDataSource.joinMode(JoinMode::ExistsJoin);
        SysQuery::findOrCreateRange(externalRoleDataSource, fieldNum(DirExternalRole, EntityType)).value(queryValue(UserExternalPartyEntityType::ProspectiveVendor));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the vendor request related to the user request.
    /// </summary>
    /// <returns>
    ///    The vendor request.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendRequest vendorRequest()
    {
        VendRequest vendRequest;

        select crossCompany vendRequest
            where vendRequest.RecId == this.VendorRequest;

        return vendRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of a user request that has finished the workflow successfully.
    /// </summary>
    public void workflowCompleted()
    {
        // Gets the company specific vendor request.
        VendRequest vendRequest = this.vendorRequest();

        super();

        // The prospective vendor user request is a global workflow, but vendor request is company specific.
        // Change companies to manage the vendor request state.
        changeCompany(
                      vendRequest.company()
                      )
        {
             VendRequestCompany::updateRequestCompanyType(
                this.VendorRequest,
                VendRequestCompanyType::NewVendorCompanyProfile);

            VendRequestCompany::setWorkflowState(this.VendorRequest, VendRequestCompanyStatus::VendorInvited);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendRequest</ConfigurationKey>
	<DeveloperDocumentation>@SYS334526</DeveloperDocumentation>
	<Label>@SYS334478</Label>
	<SingularLabel>@SYS334479</SingularLabel>
	<CacheLookup>Found</CacheLookup>
	<Extends>UserRequest</Extends>
	<Modules>Obsolete</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorRequest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorRequest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorRequest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendRequestIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorRequest</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRequest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRequest</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorRequest</Name>
					<Field>VendorRequest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRequestUserRequest</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>UserRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>