<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompensationGrid</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastCompensationGrid extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayStepDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the Description of the <c>RefPointId</c> field in the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </summary>
    /// <returns>
    /// The <c>HRCCompRefPointSetupLine</c> <c>RefPointId</c> field description.
    /// </returns>
    display HcmPositionForecastRefPointStep displayStepDescription()
    {
        HRCCompRefPointSetupLine hRCCompRefPointSetupLine;

        hRCCompRefPointSetupLine = hRCCompRefPointSetupLine::find(this.RefPointSetupId, this.RefPointId);

        return hRCCompRefPointSetupLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>annualizeCompensationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the compensation annual amount from a record in the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </summary>
    /// <param name="_compGroupRecId">
    /// The compensation group record ID of the <c>HcmPositionForecastCompensationGroup</c> table record to be processed.
    /// </param>
    /// <param name="_positionForecastCompensationGridRecId">
    /// The record ID of the <c>HcmPositionForecastCompensationGrid</c> table record to process.
    /// </param>
    /// <returns>
    /// The annual compensation amount.
    /// </returns>
    /// <remarks>
    /// If the compensation type in the <c>HcmPositionForecastCompensationGroup</c> table record is
    /// set to annual salary, then we just return the amount from the <c>HcmPositionForecastCompensationGrid</c> table record.
    /// Otherwise, it is an hourly wage and we need to multiply by the annual hours to annualize. Using the cross company data access pattern
    /// in order to prevent the data from being restricted to just the current company context.
    /// </remarks>
    public static HcmPositionForecastAmountCur annualizeCompensationAmount(HcmPositionForecastCompGroupRecId _compGroupRecId,
                                                                                HcmPositionForecastCompensationGridRecId _positionForecastCompensationGridRecId)
    {
        HcmPositionForecastAmountCur            resultAmount;
        HcmPositionForecastCompensationGroup    positionForecastCompensationGroup;
        HcmPositionForecastCompensationGrid     hcmPositionForecastCompensationGrid;

        select firstonly crossCompany RecId, CompensationType, AnnualHours from positionForecastCompensationGroup
            where positionForecastCompensationGroup.RecId == _compGroupRecId;

        hcmPositionForecastCompensationGrid = HcmPositionForecastCompensationGrid::findCrossCompany(_positionForecastCompensationGridRecId);

        if (positionForecastCompensationGroup.CompensationType == HcmForecastCompensationGroupType::HourlyWage)
        {
            resultAmount = positionForecastCompensationGroup.AnnualHours * hcmPositionForecastCompensationGrid.Amount;
        }
        else
        {
            resultAmount = hcmPositionForecastCompensationGrid.Amount;
        }

        return resultAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmPositionForecastCompensationGrid</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_positionForecastCompGroupRefPtRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionForecastCompGroupRefPtRecId _positionForecastCompGroupRefPtRecId)
    {
        boolean isExist = true;

        if (!HcmPositionForecastCompensationGrid::exist(_positionForecastCompGroupRefPtRecId))
        {
            isExist = checkFailed(strFmt(HcmPositionForecastCompensationGrid::txtNotExist(), tableStr(HcmPositionForecastCompensationGrid)));
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </summary>
    /// <param name="_positionForecastCompensationGridRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(HcmPositionForecastCompensationGridRecId _positionForecastCompensationGridRecId)
    {
        return _positionForecastCompensationGridRecId && (select firstonly RecId from hcmPositionForecastCompensationGrid
                    where hcmPositionForecastCompensationGrid.RecId == _positionForecastCompensationGridRecId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompensationGrid</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_positionForecastCompensationGridRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGrid find(
        HcmPositionForecastCompensationGridRecId _positionForecastCompensationGridRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGrid;

        hcmPositionForecastCompensationGrid.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastCompensationGrid.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastCompensationGrid
            where hcmPositionForecastCompensationGrid.RecId == _positionForecastCompensationGridRecId;

        return hcmPositionForecastCompensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompensationGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>HcmPositionForecastCompensationGrid</c> table specified by the <c>HcmPositionForecastCompGroupRefPtRecId</c>,
    ///    <c>HRCCompRefPointSetupId</c>, <c>HRCCompRefPointId</c> and <c>HcmCompensationLevelRecId</c> fields value.
    /// </summary>
    /// <param name="_compensationGrpRefPointRecId">
    /// A <c>HcmPositionForecastCompGroupRefPtRecId</c> field value.
    /// </param>
    /// <param name="_refPointSetupId">
    ///    A <c>HRCCompRefPointSetupId</c> field value.
    /// </param>
    /// <param name="_refPointId">
    ///    A <c>HRCCompRefPointId</c> field value.
    /// </param>
    /// <param name="_compensationLevelId">
    ///    A <c>CompensationLevel</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGrid findByCompensationGrid(HcmPositionForecastCompGroupRefPtRecId _compensationGrpRefPointRecId,
                                                         HRCCompRefPointSetupId     _refPointSetupId,
                                                         HRCCompRefPointId          _refPointId,
                                                         HcmCompensationLevelRecId _compensationLevelId,
                                                         boolean             _forUpdate = false,
                                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationGrid compensationGrid;

        compensationGrid.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            compensationGrid.concurrencyModel(_concurrencyModel);
        }

         select firstonly compensationGrid
            where compensationGrid.CompensationGroupRefPointId == _compensationGrpRefPointRecId
                && compensationGrid.RefPointSetupId == _refPointSetupId
                && compensationGrid.RefPointId == _refPointId
                && compensationGrid.CompensationLevel == _compensationLevelId;

        return compensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompensationGrid</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_positionForecastCompensationGridRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </returns>
    /// <remarks>
    /// Uses the cross company data access pattern in order to prevent the data from being restricted to just the current company context.
    /// </remarks>
    public static HcmPositionForecastCompensationGrid findCrossCompany(
        HcmPositionForecastCompensationGridRecId _positionForecastCompensationGridRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGrid;

        hcmPositionForecastCompensationGrid.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastCompensationGrid.concurrencyModel(_concurrencyModel);
        }

        select firstonly crossCompany hcmPositionForecastCompensationGrid
            where hcmPositionForecastCompensationGrid.RecId == _positionForecastCompensationGridRecId;

        return hcmPositionForecastCompensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosForecastCompGridByPosFctScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the associated compensation grid for a given position forecast scenario
    /// based on the input compensation group, step and level information.
    /// </summary>
    /// <param name="_compensationGroupRecId">
    /// The record ID of a <c>HcmPositionForecastCompensationGroup</c> record.
    /// </param>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of a <c>HcmPositionForecastScenario</c> record.
    /// </param>
    /// <param name="_compensationLevel">
    /// The record ID of a <c>HcmCompensationLevel</c> record.
    /// </param>
    /// <param name="_step">
    /// The step value in the <c>HRCCompRefPointId</c> table.
    /// </param>
    /// <returns>
    /// A record in the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGrid getPosForecastCompGridByPosFctScenario(HcmPositionForecastCompGroupRecId _compensationGroupRecId,
                                                HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                HcmCompensationLevelRecId _compensationLevel,
                                                HRCCompRefPointId _step)
    {
        HcmPositionForecastCompensationRate  hcmPositionForecastCompensationRate;
        HcmPositionForecastScenario          hcmPositionForecastScenario;
        HcmPositionForecastCompGroupRefPoint hcmPositionForecastCompGroupRefPoint;
        HcmPositionForecastCompensationGrid  hcmPositionForecastCompensationGrid;

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        select firstonly RecId from hcmPositionForecastCompensationRate
            order by hcmPositionForecastCompensationRate.EffectiveDate asc
            where hcmPositionForecastCompensationRate.CompensationGroup == _compensationGroupRecId
                && hcmPositionForecastCompensationRate.EffectiveDate <= hcmPositionForecastScenario.getPositionForecastDateRangeEndDate()
                && hcmPositionForecastCompensationRate.ExpirationDate >= hcmPositionForecastScenario.getPositionForecastDateRangeStartDate()
            join RecId, RefPointSetupId from hcmPositionForecastCompGroupRefPoint
                where hcmPositionForecastCompGroupRefPoint.CompensationRate == hcmPositionForecastCompensationRate.RecId
            join * from hcmPositionForecastCompensationGrid
                where hcmPositionForecastCompensationGrid.CompensationGroupRefPointId == hcmPositionForecastCompGroupRefPoint.RecId
                    && hcmPositionForecastCompensationGrid.RefPointSetupId == hcmPositionForecastCompGroupRefPoint.RefPointSetupId
                    && hcmPositionForecastCompensationGrid.CompensationLevel == _compensationLevel
                    && hcmPositionForecastCompensationGrid.RefPointId == _step;

        return hcmPositionForecastCompensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompensationGridInUse</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether a specified record exists in the <c>HcmPositionForecastScenario</c> table.
    /// </summary>
    /// <param name="_compGroupId">
    ///  The record ID of the Compensation group in <c>HcmPositionForecastCompensationGroup</c> table to check for existence.
    /// </param>
    /// <returns>
    ///  true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean isCompensationGridInUse(HcmPositionForecastCompGroupRecId _compGroupId)
    {
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGrid;
        HcmPositionForecastScenario positionForecastScenario;
        HcmPositionForecastCompGroupRefPoint hcmPositionForecastCompGroupRefPoint;

        select firstOnly RecId from positionForecastScenario
            exists join hcmPositionForecastCompensationGrid
                where hcmPositionForecastCompensationGrid.RecId == positionForecastScenario.PositionForecastCompensationGrid
                exists join hcmPositionForecastCompGroupRefPoint
                    where hcmPositionForecastCompensationGrid.CompensationGroupRefPointId == hcmPositionForecastCompGroupRefPoint.RecId
                        && hcmPositionForecastCompGroupRefPoint.CompensationGroup == _compGroupId;

        return _compGroupId && positionForecastScenario.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLevelAndStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom <c>lookupReference</c> logic for foreign keys to the <c>HcmPositionForecastCompensationGrid</c>,
    /// the <c>HcmPositionForecastGroupRefPoint</c> and the <c>HcmPositionForecastCompensationGroup</c> tables.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> form for which the look up is being performed.
    /// </param>
    /// <param name="_compensationGroup">
    /// The <c>CompensationGroup</c> field for which the look up is being performed.
    /// </param>
    /// <param name="_positionForecastScenarioRecId">
    /// The record Id of the table <c>HcmPositionForecastScenario</c>.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionForecastCompensationGrid</c> table record buffer that contains the record that is selected in the look up.
    /// </returns>
    public static Common lookupLevelAndStep(FormReferenceControl _formReferenceControl,
                                                HcmPositionForecastCompGroupRecId _compensationGroup,
                                                HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        Common                              record;
        HcmPositionForecastCompensationRate compensationGroupRate;
        HcmPositionForecastScenario         hcmPositionForecastScenario;
        QueryBuildDataSource                qbdsCompensationGroupVersion;
        SysReferenceTableLookup             sysReferenceTableLookup;
        QueryBuildDataSource                qbdsCompensationGrid;
        QueryBuildDataSource                qbdsCompensationGroupRef;
        QueryBuildDataSource                qbdsCompensationGroup;
        Query                               query = new Query();

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmPositionForecastCompensationGrid), _formReferenceControl);

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        //Get the first version of rate only in the date range
        compensationGroupRate = HcmPositionForecastCompensationRate::findByGroupAndDateRange(_compensationGroup,
                                                                                                hcmPositionForecastScenario.getPositionForecastDateRangeStartDate(),
                                                                                                hcmPositionForecastScenario.getPositionForecastDateRangeEndDate());

        qbdsCompensationGrid     = query.addDataSource(tableNum(HcmPositionForecastCompensationGrid));

        qbdsCompensationGroupRef = qbdsCompensationGrid.addDataSource(tableNum(HcmPositionForecastCompGroupRefPoint));
        qbdsCompensationGroupRef.relations(true);

        qbdsCompensationGroupVersion = qbdsCompensationGroupRef.addDataSource(tableNum(HcmPositionForecastCompensationRate));
        qbdsCompensationGroupVersion.relations(true);
        qbdsCompensationGroupVersion.addRange(fieldNum(HcmPositionForecastCompensationRate, RecId)).value(queryValue(compensationGroupRate.RecId)) ;

        qbdsCompensationGroup = qbdsCompensationGroupVersion.addDataSource(tableNum(HcmPositionForecastCompensationGroup));
        qbdsCompensationGroup.relations(true);
        qbdsCompensationGroup.addRange(fieldNum(HcmPositionForecastCompensationGroup, RecId)).value(queryValue(_compensationGroup));

        sysReferenceTableLookup.addLookupfield(fieldNum(HcmPositionForecastCompensationGrid, CompensationLevel));
        sysReferenceTableLookup.addLookupfield(fieldNum(HcmPositionForecastCompensationGrid, RefPointId));

        sysReferenceTableLookup.addLookupMethod(tableMethodStr(HcmPositionForecastCompensationGrid, displayStepDescription));

        sysReferenceTableLookup.parmQuery(query);

        record = sysReferenceTableLookup.performFormLookup();

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumOrderedCompGridLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides query for the custom lookup logic for foreign keys to the <c>HcmPositionForecastCompensationGrid</c>,
    /// the <c>HcmPositionForecastGroupRefPoint</c> and the <c>HcmPositionForecastCompensationGroup</c> tables.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <returns>
    /// A query that selects the <c>HcmPositionForecastCompensationGrid</c> table record buffer that contains the record that is selected in the look up.
    /// </returns>
    public static Query getLineNumOrderedCompGridLookupQuery(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        Query query = new Query();

        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);
        HcmPositionForecastCompensationGroup positionforecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGroupId(positionForecastScenario.CompensationGroupId);

        // Get the first version of rate only in the date range
        HcmPositionForecastCompensationRate compensationGroupRate = HcmPositionForecastCompensationRate::findByGroupAndDateRange(positionforecastCompensationGroup.RecId,
                                                                                                positionForecastScenario.getPositionForecastDateRangeStartDate(),
                                                                                                positionForecastScenario.getPositionForecastDateRangeEndDate());

        QueryBuildDataSource compensationGridDataSource = query.addDataSource(tableNum(HcmPositionForecastCompensationGrid), tablestr(HcmPositionForecastCompensationGrid));
        compensationGridDataSource.addOrderByField(fieldNum(HcmPositionForecastCompensationGrid, CompensationLevel), SortOrder::Ascending);
        compensationGridDataSource.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource hrcCompRefPointSetupLineDataSource = compensationGridDataSource.addDataSource(tableNum(HRCCompRefPointSetupLine), tablestr(HRCCompRefPointSetupLine));
        hrcCompRefPointSetupLineDataSource.relations(true);
        hrcCompRefPointSetupLineDataSource.joinMode(JoinMode::InnerJoin);
        hrcCompRefPointSetupLineDataSource.addOrderByField(fieldNum(HRCCompRefPointSetupLine, LineNum), SortOrder::Ascending);
        hrcCompRefPointSetupLineDataSource.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource compensationGroupRefDataSource = compensationGridDataSource.addDataSource(tableNum(HcmPositionForecastCompGroupRefPoint), tablestr(HcmPositionForecastCompGroupRefPoint));
        compensationGroupRefDataSource.relations(true);
        compensationGroupRefDataSource.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource compensationGroupVersionDataSource = compensationGroupRefDataSource.addDataSource(tableNum(HcmPositionForecastCompensationRate), tablestr(HcmPositionForecastCompensationRate));
        compensationGroupVersionDataSource.relations(true);
        compensationGroupVersionDataSource.addRange(fieldNum(HcmPositionForecastCompensationRate, RecId)).value(queryValue(compensationGroupRate.RecId));
        compensationGroupVersionDataSource.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource compensationGroupDataSource = compensationGroupVersionDataSource.addDataSource(tableNum(HcmPositionForecastCompensationGroup), tablestr(HcmPositionForecastCompensationGroup));
        compensationGroupDataSource.relations(true);
        compensationGroupDataSource.addRange(fieldNum(HcmPositionForecastCompensationGroup, RecId)).value(queryValue(positionforecastCompensationGroup.RecId));
        compensationGroupDataSource.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveLevelAndStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom <c>resolveReference</c> logic for foreign keys to the <c>HcmPositionForecastScenario</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> form object for which to resolve the reference.
    /// </param>
    /// <param name="_compGroupRecId">
    /// The record Id of <c>HcmPositionForecastCompensationGroup</c> table selected for which to resolve the reference.
    /// </param>
    /// <param name="_positionForecastScenarioRecId">
    /// The record Id of the table <c>HcmPositionForecastScenario</c>.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionForecastCompensationGrid</c> table record buffer that contains the record to which the values in the
    /// <c>FormReferenceControl</c> object are resolved.
    /// </returns>
    public static Common resolveLevelAndStep(FormReferenceControl _formReferenceControl,
                                                HcmPositionForecastCompGroupRecId _compGroupRecId,
                                                HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        HcmPositionForecastCompensationGrid  positionForecastCompensationGrid;
        HcmPositionForecastCompGroupRefPoint positionForecastCompGroupRefPoint;
        HcmPositionForecastCompensationRate  positionForecastCompensationRate;
        HcmCompensationLevel                 compensationLevel;
        HcmCompensationLevelId               compensationLevelId;
        HRCCompRefPointId                    compRefPointId;
        HcmPositionForecastScenario          hcmPositionForecastScenario;
        ValidFromDate                        startDate;
        ValidToDate                          endDate;

        compensationLevelId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(HcmCompensationLevel, CompensationLevelId), tableStr(HcmCompensationLevel))).value();
        compRefPointId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(HcmPositionForecastCompensationGrid, RefPointId), tableStr(HcmPositionForecastCompensationGrid))).value();

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        // Get valid date range from Forecast position scenario
        startDate = hcmPositionForecastScenario.getPositionForecastDateRangeStartDate();
        endDate = hcmPositionForecastScenario.getPositionForecastDateRangeEndDate();

        select firstonly positionForecastCompensationGrid
            join RecId from positionForecastCompGroupRefPoint
                where  positionForecastCompensationGrid.CompensationGroupRefPointId == positionForecastCompGroupRefPoint.RecId
            join RecId from positionForecastCompensationRate
                where positionForecastCompGroupRefPoint.CompensationRate == positionForecastCompensationRate.RecId
                    && positionForecastCompensationRate.EffectiveDate <= endDate
                    && positionForecastCompensationRate.ExpirationDate >= startDate
                    && positionForecastCompensationRate.CompensationGroup == _compGroupRecId
            join RecId from compensationLevel
                where positionForecastCompensationGrid.CompensationLevel == compensationLevel.RecId
                    && compensationLevel.CompensationLevelId == compensationLevelId
                    && positionForecastCompensationGrid.RefPointId == compRefPointId;

        return positionForecastCompensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompensationGridByRefPointIdCompGroupWithInDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the associated compensation grid within the particular dates
    /// based on the input compensation group, step and level information.
    /// </summary>
    /// <param name = "_refPointId"> The reference point Id.</param>
    /// <param name = "_refPointSetupId">The reference setup Id </param>
    /// <param name = "_effectiveDate">The effective date for the compensation rate associated with the compensation grid.</param>
    /// <param name = "_expirationDate">The expiration date for the compensation rate associated with the compensation grid.</param>
    /// <param name = "_compGroupId">The compensation group Id.</param>
    /// <param name = "_compensationGroupDataAreaId">The data area Id associated with the compensation group.</param>
    /// <param name = "_hcmCompensationLevelRecId">The recid of the compensation level associated with the compensation grid.</param>
    /// <returns></returns>
    public static HcmPositionForecastCompensationGrid getCompensationGridByRefPointIdCompGroupWithInDateRange(HRCCompRefPointId _refPointId,
                                                            HRCCompRefPointSetupId _refPointSetupId,
                                                            EffectiveDate _effectiveDate,
                                                            ExpirationDate _expirationDate,
                                                            HcmPositionForecastCompensationGroupId _compGroupId,
                                                            DataAreaId _compensationGroupDataAreaId,
                                                            HcmCompensationLevelRecId _hcmCompensationLevelRecId = 0)
    {
        HcmPositionForecastCompensationGrid compGrid;
        HcmPositionForecastCompGroupRefPoint positionForecastCompGroupRefPoint;
        HRCCompRefPointSetupLine hrcCompRefPointSetupLine;
        HcmPositionForecastCompensationRate compensationRate;
        HcmPositionForecastCompensationGroup positionforecastCompensationGroup;

        if (_hcmCompensationLevelRecId != 0)
        {
            select firstonly
                compGrid
                where compGrid.RefPointId == _refPointId
                    && compGrid.RefPointSetupId == _refPointSetupId
                    && compGrid.CompensationLevel == _hcmCompensationLevelRecId
                join positionForecastCompGroupRefPoint
                    where positionForecastCompGroupRefPoint.RecId == compGrid.CompensationGroupRefPointId
                join hrcCompRefPointSetupLine
                    where hrcCompRefPointSetupLine.RefPointId == compGrid.RefPointId
                    && hrcCompRefPointSetupLine.RefPointSetupId == compGrid.RefPointSetupId
                join compensationRate
                    where compensationRate.RecId == positionForecastCompGroupRefPoint.CompensationRate
                    && compensationRate.EffectiveDate <= _expirationDate
                    && compensationRate.ExpirationDate >= _effectiveDate
                join positionforecastCompensationGroup
                    where positionforecastCompensationGroup.RecId == compensationRate.CompensationGroup
                    && positionforecastCompensationGroup.DataAreaId == _compensationGroupDataAreaId
                    && positionforecastCompensationGroup.CompensationGroupId == _compGroupId;
        }
        else
        {
            select firstonly
                    compGrid
                    where compGrid.RefPointId == _refPointId
                        && compGrid.RefPointSetupId == _refPointSetupId
                    join positionForecastCompGroupRefPoint
                        where positionForecastCompGroupRefPoint.RecId == compGrid.CompensationGroupRefPointId
                    join hrcCompRefPointSetupLine
                        where hrcCompRefPointSetupLine.RefPointId == compGrid.RefPointId
                        && hrcCompRefPointSetupLine.RefPointSetupId == compGrid.RefPointSetupId
                    join compensationRate
                        where compensationRate.RecId == positionForecastCompGroupRefPoint.CompensationRate
                        && compensationRate.EffectiveDate <= _expirationDate
                        && compensationRate.ExpirationDate >= _effectiveDate
                    join positionforecastCompensationGroup
                        where positionforecastCompensationGroup.RecId == compensationRate.CompensationGroup
                        && positionforecastCompensationGroup.DataAreaId == _compensationGroupDataAreaId
                        && positionforecastCompensationGroup.CompensationGroupId == _compGroupId;
        }

        return compGrid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4005884</DeveloperDocumentation>
	<Label>@SYS330302</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>CompensationLevel</TitleField1>
	<TitleField2>CompensationGroupRefPointId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>HcmPositionForecastCompensationGridIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationGroupRefPointId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPointId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationGroupRefPointId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPointId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPointSetupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationGroupRefPointId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompGroupRefPtRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmCompensationLevelRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefPointId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRCCompRefPointId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefPointSetupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRCCompRefPointSetupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmPositionForecastCompensationGridIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CompensationGroupRefPointId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompensationLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefPointId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefPointSetupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmCompensationLevel</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmCompensationLevel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationLevel</Name>
					<Field>CompensationLevel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastCompGroupRefPoint</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPositionForecastCompGroupRefPoint</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationGroupRefPointId</Name>
					<Field>CompensationGroupRefPointId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HRCCompRefPointSetupLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HRCCompRefPointSetupLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HRCCompRefPointSetupLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefPointId</Name>
					<SourceEDT>HRCCompRefPointId</SourceEDT>
					<Field>RefPointId</Field>
					<RelatedField>RefPointId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefPointSetupId</Name>
					<Field>RefPointSetupId</Field>
					<RelatedField>RefPointSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>