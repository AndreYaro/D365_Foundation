<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxLedgerAccountGroup_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxLedgerAccountGroup_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            ret = TaxParameters::checkParameter_IN(TaxComponentTable_IN::taxTypeComponent2TaxType(this.TaxType));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxAccountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether exist a instance <c>TaxLedgerAccountGroup_IN</c> for given parameters.
    /// </summary>
    /// <param name="_taxAccountGroup">
    /// The tax acount group is used to find record.
    /// </param>
    /// <param name="_taxType">
    /// The tax type is used to find record.
    /// </param>
    /// <returns>
    /// Returns ture, if exist record; otherwise, false.
    /// </returns>
    public static boolean checkTaxAccountGroup(
        TaxAccountGroup_IN _taxAccountGroup,
        TaxType_IN         _taxType)
    {
        return _taxAccountGroup && (select firstonly RecId from taxLedgerAccountGroup_IN
                                        where taxLedgerAccountGroup_IN.TaxAccountGroup  == _taxAccountGroup
                                           && taxLedgerAccountGroup_IN.TaxType          == TaxComponentTable_IN::taxtype2TaxtypeComponent(_taxType)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxLedgerAccountGroup_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxLedgerAccountGroup_IN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        if (_recId)
        {
            return (select firstonly RecId from taxLedgerAccountGroup_IN
                    where taxLedgerAccountGroup_IN.RecId  == _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxLedgerAccountGroup_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxLedgerAccountGroup_IN table.
    /// </returns>
    public static TaxLedgerAccountGroup_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxLedgerAccountGroup_IN taxLedgerAccountGroup;

        taxLedgerAccountGroup.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxLedgerAccountGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxLedgerAccountGroup
            where taxLedgerAccountGroup.RecId == _recId;

        return taxLedgerAccountGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxAccountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxLedgerAccountGroup_IN</c> table specified by a tax account group.
    /// </summary>
    /// <param name="_taxAccountGroup">
    /// The tax account group of the <c>TaxLedgerAccountGroup_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxLedgerAccountGroup_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxLedgerAccountGroup_IN findByTaxAccountGroup(
        TaxAccountGroup_IN _taxAccountGroup,
        boolean            _forUpdate = false)
    {
        TaxLedgerAccountGroup_IN taxLedgerAccountGroup;

        if (_taxAccountGroup)
        {
            taxLedgerAccountGroup.selectForUpdate(_forUpdate);

            select firstonly taxLedgerAccountGroup
                where taxLedgerAccountGroup.TaxAccountGroup == _taxAccountGroup;
        }

        return taxLedgerAccountGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the Go to Main Table Form option to the context menu.
    /// </summary>
    /// <param name="_taxLedgerAccountGroup">
    ///    An instance of the <c>TaxLedgerAccountGroup_IN</c> table.
    /// </param>
    public static void jumpRef(TaxLedgerAccountGroup_IN _taxLedgerAccountGroup)
    {
        Args args = new Args();

        args.lookupField(fieldnum(TaxLedgerAccountGroup_IN, RecId));
        args.lookupValue(int642str(_taxLedgerAccountGroup.RecId));

        new MenuFunction(menuitemDisplayStr(TaxLedgerAccountGroup_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the account group.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxType">
    /// The tax type is used to add rang in query.
    /// </param>
    public static void lookupAccountGroup(
        FormControl _formControl,
        TaxType_IN  _taxType)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tablenum(TaxLedgerAccountGroup_IN), _formControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxLedgerAccountGroup_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccountGroup_IN, TaxType));
        queryBuildRange.value(queryValue(TaxComponentTable_IN::taxtype2TaxtypeComponent(_taxType)));

        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccountGroup_IN, TaxAccountGroup));
        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccountGroup_IN, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountGroupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the account group reference.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The account group reference information.
    /// </returns>
    public static Common lookupAccountGroupReference(
        FormReferenceControl _formControl,
        TaxType_IN           _taxType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxLedgerAccountGroup_IN), _formControl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxLedgerAccountGroup_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccountGroup_IN, TaxType));
        queryBuildRange.value(queryValue(TaxComponentTable_IN::taxtype2TaxtypeComponent(_taxType)));

        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccountGroup_IN, TaxAccountGroup));
        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccountGroup_IN, Name));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the customer registration number.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxType">
    /// The tax type is used to add rang in query.
    /// </param>
    /// <param name="_taxAccountGroup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    public static void lookupCustomsRegistrationNumber(
        FormControl _formControl,
        TaxType_IN  _taxType,
        RefRecId    _taxAccountGroup)
    {
        SysTableLookup       sysTableLookup;
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;
        QueryBuildDataSource queryBuildDataSourceLoc;

        sysTableLookup       = SysTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formControl);
        queryBuildDataSource = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));

        if (TaxLedgerAccountSetup_IN::existAll(TaxLedgerAccountGroup_IN::find(_taxAccountGroup).TaxAccountGroup, _taxType))
        {
            queryBuildRange      = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, TaxType));
            queryBuildRange.value(queryValue(_taxType));

            queryBuildRange      = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, RegistrationType));
            queryBuildRange.value(queryValue(TaxRegistrationType_IN::Company));
        }
        else
        {
            queryBuildDataSourceLoc = queryBuildDataSource.addDataSource(tablenum(TaxLedgerAccountSetup_IN));

            queryBuildDataSourceLoc.addLink(fieldnum(TaxRegistrationNumbers_IN, RecId), fieldnum(TaxLedgerAccountSetup_IN, TaxRegistrationNumberTable));

            queryBuildDataSourceLoc.addRange(fieldnum(TaxLedgerAccountSetup_IN, TaxLedgerAccountGroup)).value(queryValue(_taxAccountGroup));
        }

        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber), true);
        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the reference registration number information.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type information.
    /// </param>
    /// <param name="_taxAccountGroup">
    /// The tax account group information.
    /// </param>
    static void lookupReferenceRegistrationNumber(
        FormReferenceControl _formControl,
        TaxType_IN           _taxType,
        RefRecId             _taxAccountGroup)
    {
        SysReferenceTableLookup sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSourceLoc;
        DictRelation            dictRelation;

        sysTableLookup          = SysReferenceTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formControl);
        queryBuildDataSource    = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));

        //If All is there then get records from Tax registration number table
        if (TaxLedgerAccountSetup_IN::existAll(TaxLedgerAccountGroup_IN::find(_taxAccountGroup).TaxAccountGroup, _taxType))
        {
            queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, TaxType));
            queryBuildRange.value(queryValue(_taxType));
            queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, RegistrationType));
            queryBuildRange.value(queryValue(TaxRegistrationType_IN::Company));
        }
        else
        {
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);

            queryBuildDataSourceLoc   = queryBuildDataSource.addDataSource(tablenum(TaxLedgerAccountSetup_IN));
            queryBuildDataSourceLoc.joinMode(JoinMode::ExistsJoin);

            dictRelation            = new DictRelation(tablenum(TaxLedgerAccountSetup_IN));
            dictRelation.loadFieldRelation(fieldnum(TaxLedgerAccountSetup_IN, TaxRegistrationNumberTable));
            queryBuildDataSourceLoc.addRelation(dictRelation);

            queryBuildRange         = queryBuildDataSourceLoc.addRange(fieldnum(TaxLedgerAccountSetup_IN, TaxLedgerAccountGroup));
            queryBuildRange.value(queryValue(_taxAccountGroup));
        }

        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber));
        sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the registration number.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxType">
    /// The tax type is used to add rang in query.
    /// </param>
    /// <param name="_taxAccountGroup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    static void lookupRegistrationNumber(
        FormControl _formControl,
        TaxType_IN  _taxType,
        RefRecId    _taxAccountGroup)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSource2;
        DictRelation            dictRelation;

        //If All is there then get records from Tax registration number table
        if (TaxLedgerAccountSetup_IN::existAll(TaxLedgerAccountGroup_IN::find(_taxAccountGroup).TaxAccountGroup, _taxType))
        {
            sysTableLookup          = SysTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formControl);
            queryBuildDataSource    = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));
            queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, TaxType));
            queryBuildRange.value(queryValue(_taxType));
            queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxRegistrationNumbers_IN, RegistrationType));
            queryBuildRange.value(queryValue(TaxRegistrationType_IN::Company));
            sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber));
            sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));
        }
        else
        {
            sysTableLookup = SysTableLookup::newParameters(tablenum(TaxRegistrationNumbers_IN), _formControl);
            sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, RegistrationNumber));
            sysTableLookup.addLookupfield(fieldnum(TaxRegistrationNumbers_IN, Name));

            queryBuildDataSource = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);

            queryBuildDataSource2   = queryBuildDataSource.addDataSource(tablenum(TaxLedgerAccountSetup_IN));
            queryBuildDataSource2.joinMode(JoinMode::ExistsJoin);

            dictRelation            = new DictRelation(tablenum(TaxLedgerAccountSetup_IN));
            dictRelation.loadFieldRelation(fieldnum(TaxLedgerAccountSetup_IN, TaxRegistrationNumberTable));
            queryBuildDataSource2.addRelation(dictRelation);

            queryBuildRange         = queryBuildDataSource2.addRange(fieldnum(TaxLedgerAccountSetup_IN, TaxLedgerAccountGroup));
            queryBuildRange.value(queryValue(_taxAccountGroup));
        }
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63748</DeveloperDocumentation>
	<FormRef>TaxLedgerAccountGroup_IN</FormRef>
	<Label>@GLS5094</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TaxAccountGroup</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AccountGroupIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAccountGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAccountGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAccountGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxTypeComponent</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxAccountGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxAccountGroup_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxTypeComponent_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxAccountGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>