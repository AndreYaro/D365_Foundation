<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesParmLine_IN extends common
{
    /// <summary>
    ///    Determines whether the specified record exists in the <c>SalesParmLine_IN</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>SalesParmLine_IN</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        boolean doesExist = true;

        if (!SalesParmLine_IN::exist(_recId))
        {
            doesExist = checkFailed(strFmt("@SPS1280", _recId));
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>SalesParmLine_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>SalesParmLine_IN</c> table to check for existence.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean exist(RecId _recId)
    {
        SalesParmLine_IN salesParmLine;

        select firstonly RecId from salesParmLine
            where salesParmLine.RecId == _recId;

        return salesParmLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <C>SalesParmLine_IN</C> record based on record ID of <C>SalesParmLine_IN</C> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of <C>SalesParmLine_IN</C> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <C>SalesParmLine_IN</C> record.
    /// </returns>

    static SalesParmLine_IN find(RecId _recId, boolean _forUpdate = false)
    {
        SalesParmLine_IN salesParmLine;

        if (_recId)
        {
            salesParmLine.selectForUpdate(_forUpdate);
            select firstonly salesParmLine
                where salesParmLine.RecId == _recId;
        }
        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates sales parmline.
    /// </summary>
    /// <param name="_salesLineOrig">
    /// The original sales line.
    /// </param>
    public void updateSalesParmLine(SalesLine _salesLineOrig)
    {
        SalesLine       salesLineLoc;
        MarkupTrans     markupTransLoc;
        Amount          markupTotalValue;

        if (_salesLineOrig)
        {
            while select TransTableId, TransRecId, CurrencyCode, Value from markupTransLoc
                where markupTransLoc.TransTableId == _salesLineOrig.TableId
                   && markupTransLoc.TransRecId   == _salesLineOrig.RecId
            {
                markupTotalValue    += CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, salesLineLoc.CurrencyCode);
            }
            this.AssessableValueTransactionCurrency = SalesParmLine::findRecId(this.SalesParmLine).effectiveLineAmount() + markupTotalValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomsAssessableValue</Name>
				<Source><![CDATA[
    //Updates the assessable value when the quantity is updated in the Bill of entry form
    public void setCustomsAssessableValue()
    {
        SalesParmTable                  salesParmTable;
        SalesParmLine                   salesParmLine, salesParmLineLoc;
        CustomsExportAssessableValue_IN customsExportAssessableValue;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        SysQueryRun                     queryRun;
        SalesParmLine                   salesParmLineOrig;

        salesParmLineOrig = SalesParmLine::findRecId(this.SalesParmLine);
        salesParmTable = salesParmLineOrig.salesParmTable();
        if (salesParmTable.CustomsExportInvoiceId_IN)
        {
            queryBuildDataSource    = query.addDataSource(tableNum(CustomsExportAssessableValue_IN));
            queryBuildRange         = queryBuildDataSource.addRange(fieldNum(CustomsExportAssessableValue_IN, SalesId));
            queryBuildRange.value(salesParmTable.SalesId);

            while select ParmId, TableRefId, InventTransId from salesParmLine
                where salesParmLine.ParmId      == salesParmTable.ParmId   &&
                      salesParmLine.TableRefId  == salesParmTable.TableRefId
            {
                queryBuildRange         = queryBuildDataSource.addRange(fieldNum(CustomsExportAssessableValue_IN, InventTransId));
                queryBuildRange.value(salesParmLine.InventTransId);
            }
        }
        queryRun = new SysQueryRun(query);
        while (queryRun.next())
        {
            customsExportAssessableValue = queryRun.get(tableNum(CustomsExportAssessableValue_IN));
            // ParmId, TableRefId, InventTransId uniquely identifies a SalesParmLine
            if (customsExportAssessableValue.InventTransId == salesParmLineOrig.InventTransId)
            {
                select forupdate salesParmLineLoc
                where salesParmLineLoc.ParmId        == salesParmTable.ParmId     &&
                      salesParmLineLoc.TableRefId    == salesParmTable.TableRefId &&
                      salesParmLineLoc.InventTransId == customsExportAssessableValue.InventTransId;
                ttsbegin;
                customsExportAssessableValue.selectForUpdate(true);
                customsExportAssessableValue.Amount = salesParmLineOrig.effectiveLineAmount();
                customsExportAssessableValue.update();
                ttscommit;
            }
        }
        // This piece of code populates the SalesParmLine field called Assessable value with the updated assessable
        // value from the CustomsExportAssessableValue_IN table
        this.AssessableValueTransactionCurrency = CustomsExportAssessableValue_IN::findInventTransId(salesParmLineOrig.InventTransId).invoiceAssessableValue();
        salesParmLineOrig.packSalesParmLine_IN(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.hasIndirectTaxFieldChanged_IN(this.orig()))
        {
            SalesParmLine::findRecId(this.SalesParmLine).markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesParmLine</c> table buffer on India fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(SalesParmLine_IN _salesParmLine_Orig_IN)
    {
        boolean             indirectTaxChanged = false;

        if (TaxParameters::checkTaxParameters_IN())
        {
            indirectTaxChanged =
                this.AssessableValueTransactionCurrency != _salesParmLine_Orig_IN.AssessableValueTransactionCurrency
                || this.MaximumRetailPrice              != _salesParmLine_Orig_IN.MaximumRetailPrice;
        }
        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4860195</DeveloperDocumentation>
	<Label>@SYP4860194</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>SalesParmLine</TitleField1>
	<TitleField2>InventSiteGateEntryLine</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SalesParmLineIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>SalesParmLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteGateEntryLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesParmLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventSiteGateEntryLine</Name>
			<Label>@SYP4860381</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteGateEntryLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssessableValue</Name>
			<Label>@GLS5298</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssessableValueTransactionCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaximumRetailPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessableValueTransactionCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventSiteGateEntryLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteGateEntryLineRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesParmLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesParmLineRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValueTransactionCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsShippingBillNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5773</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesParmLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesParmLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>SalesParmLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
					<MapFieldTo>AssessableValueTransactionCurrency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditNoteDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsMaxRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice</MapField>
					<MapFieldTo>MaximumRetailPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAsPerOriginalInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSiteGateEntryLine_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventSiteGateEntryLine_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteGateEntryLine</Name>
					<Field>InventSiteGateEntryLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesParmLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesParmLine</Name>
					<Field>SalesParmLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>