<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidationSupportedCountry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxIntegrationAddressValidationSupportedCountry extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveDataByDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the supported countries
    /// </summary>
    /// <param name = "_supportedCountryString">Supported country string</param>
    public static void saveDataByDataArea(str _supportedCountryString)
    {
        TaxIntegrationAddressValidationSupportedCountry taxIntegrationAddressValidationSupportedCountry;

        ttsbegin;
        delete_from taxIntegrationAddressValidationSupportedCountry;

        if (_supportedCountryString)
        {
            container countryNames = str2con(_supportedCountryString, ';');

            for (int i = 1; i <= conLen(countryNames); i++)
            {
                LogisticsAddressCountryRegionId locCountryRegionId = conPeek(countryNames, i);
                taxIntegrationAddressValidationSupportedCountry.CountryRegionId = locCountryRegionId;
                taxIntegrationAddressValidationSupportedCountry.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCountryRegionId</Name>
				<Source><![CDATA[
    public static TaxIntegrationAddressValidationSupportedCountry findByCountryRegionId(LogisticsAddressCountryRegionId _countryRegionId, boolean _forUpdate = false)
    {
        TaxIntegrationAddressValidationSupportedCountry taxIntegrationAddressValidationSupportedCountry;

        if (_forUpdate)
        {
            taxIntegrationAddressValidationSupportedCountry.selectForUpdate(_forupdate);
        }
        select firstonly taxIntegrationAddressValidationSupportedCountry
            index CountryRegionId
            where taxIntegrationAddressValidationSupportedCountry.CountryRegionId == _countryRegionId;

        return taxIntegrationAddressValidationSupportedCountry;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@TaxIntegration:AddressValidationSupportedCountry</DeveloperDocumentation>
	<Label>@TaxIntegration:AddressValidationSupportedCountry</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Reference</TableGroup>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CountryRegionId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CountryRegionId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryRegionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>