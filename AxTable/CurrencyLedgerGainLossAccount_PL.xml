<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CurrencyLedgerGainLossAccount_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CurrencyLedgerGainLossAccount_PL extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.CurrencyLedgerGainLossAccount != 0 && this.ExchAdjTaxableType != ExchAdjTaxableType_W::No)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.CurrencyLedgerGainLossAccount != 0)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCurrencyLedgerGainLossAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CurrencyLedgerGainLossAccount_PL</c> record by the specified <c>CurrencyLedgerGainLossAccount</c> record ID.
    /// </summary>
    /// <param name = "_currencyLedgerGainLossAccountRecId">The reference record ID of the <c>CurrencyLedgerGainLossAccount</c> record.</param>
    /// <param name = "_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>The found <c>CurrencyLedgerGainLossAccount_PL</c> record.</returns>
    public static CurrencyLedgerGainLossAccount_PL findByCurrencyLedgerGainLossAccount(
        RefRecId _currencyLedgerGainLossAccountRecId,
        boolean _forupdate)
    {
        CurrencyLedgerGainLossAccount_PL currencyLedgerGainLossAccount_PL;

        currencyLedgerGainLossAccount_PL.selectForUpdate(_forupdate);

        select firstonly currencyLedgerGainLossAccount_PL
            where currencyLedgerGainLossAccount_PL.CurrencyLedgerGainLossAccount == _currencyLedgerGainLossAccountRecId;

        return currencyLedgerGainLossAccount_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        CurrencyLedgerGainLossAccount currencyLedgerGainLossAccount = this.currencyLedgerGainLossAccount();
        boolean ret = super();

        if (ret 
            && this.ExchAdjTaxableType != ExchAdjTaxableType_W::No
            && !(CurrencyLedgerGainLossAccount_PL::ledgerSupportsGainLossFromNetValue(currencyLedgerGainLossAccount.Ledger)
                 && (   currencyLedgerGainLossAccount.AccountType == CurrencyGainLossAccountType::RealizedGain
                     || currencyLedgerGainLossAccount.AccountType == CurrencyGainLossAccountType::RealizedLoss)))
        {
            ret = checkFailed(strFmt("@CurrencyLedgerGainLossFromNetValueFeature_PL:FieldIsAllowedToHaveValue",
                fieldPName(CurrencyLedgerGainLossAccount_PL, ExchAdjTaxableType),
                ExchAdjTaxableType_W::No,
                con2Str(CurrencyLedgerGainLossAccount_PL::getCountryRegionCodes()),
                fieldPName(CurrencyLedgerGainLossAccount, AccountType),
                CurrencyGainLossAccountType::RealizedGain,
                CurrencyGainLossAccountType::RealizedLoss));
        }

        if (ret && this.ExchAdjTaxableType == ExchAdjTaxableType_W::Tax)
        {
            ret = checkFailed(strFmt("@CurrencyLedgerGainLossFromNetValueFeature_PL:ValueIsNotAllowed",
                ExchAdjTaxableType_W::Tax, 
                fieldPName(CurrencyLedgerGainLossAccount_PL, ExchAdjTaxableType), 
                tablePName(CurrencyLedgerGainLossAccount_PL)));
        }

        if (ret && this.ExchAdjTaxableType != ExchAdjTaxableType_W::No && !this.RealizedTaxLedgerDimension)
        {
            ret = checkFailed(strFmt("@CurrencyLedgerGainLossFromNetValueFeature_PL:MustBeFilledIn",
                fieldPName(CurrencyLedgerGainLossAccount_PL, RealizedTaxLedgerDimension),
                fieldPName(CurrencyLedgerGainLossAccount_PL, ExchAdjTaxableType),
                ExchAdjTaxableType_W::No));
        }

        if (ret && this.ExchAdjTaxableType == ExchAdjTaxableType_W::No && this.RealizedTaxLedgerDimension)
        {
            ret = checkFailed(strFmt("@CurrencyLedgerGainLossFromNetValueFeature_PL:MustBeEmpty",
                fieldPName(CurrencyLedgerGainLossAccount_PL, RealizedTaxLedgerDimension),
                fieldPName(CurrencyLedgerGainLossAccount_PL, ExchAdjTaxableType),
                ExchAdjTaxableType_W::No));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyLedgerGainLossAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CurrencyLedgerGainLossAccount</c> record corresponding to the current <c>CurrencyLedgerGainLossAccount_PL</c> record.
    /// </summary>
    /// <param name = "_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when reading the record; optional.</param>
    /// <returns>The found <c>CurrencyLedgerGainLossAccount</c> record.</returns>
    public CurrencyLedgerGainLossAccount currencyLedgerGainLossAccount(
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        return CurrencyLedgerGainLossAccount::find(this.currencyLedgerGainLossAccount, _forupdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSupportsGainLossFromNetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if ledger with specified record ID supports calculation of currency exchange gain/loss from net value.
    /// </summary>
    /// <param name = "_ledgerRecId">The record ID of the <c>Ledger</c> table to check.</param>
    /// <returns>true if ledger supports calculation of currency exchange gain/loss from net value; otherwise, false.</returns>
    public static boolean ledgerSupportsGainLossFromNetValue(LedgerRecId _ledgerRecId)
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion(
            CurrencyLedgerGainLossAccount_PL::getCountryRegionCodes(),
            CompanyInfo::findRecId(Ledger::find(_ledgerRecId).PrimaryForLegalEntity).DataArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container with country region codes of the <c>CurrencyLedgerGainLossAccount_PL</c> table.
    /// </summary>
    /// <returns>Container with country region codes of the <c>CurrencyLedgerGainLossAccount_PL</c> table.</returns>
    public static container getCountryRegionCodes()
    {
        return new DictTable(tableNum(CurrencyLedgerGainLossAccount_PL)).getCountryRegionCodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTableFieldForChartOfAccountsUsageDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionDefaultAccountValidation), delegatestr(DimensionDefaultAccountValidation, checkTableFieldForChartOfAccountsUsageDelegate ))]
    public static void checkTableFieldForChartOfAccountsUsageDelegate(DimensionDefaultAccountValidationContract _contract, TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(CurrencyLedgerGainLossAccount_PL))
        {
            switch(_fieldId)
            {
                case(fieldNum(CurrencyLedgerGainLossAccount_PL, RealizedTaxLedgerDimension)):
                    CurrencyLedgerGainLossAccount_PL ref;
                    CurrencyLedgerGainLossAccount header;
                    DimensionAttributeValueCombination dimAttrValCombo;
                    MainAccount mainAccount;

                    select count(RecId) from ref
                    join header
                        where header.RecId == ref.currencyLedgerGainLossAccount
                            && header.Ledger == Ledger::current()
                    join dimAttrValCombo
                        where dimAttrValCombo.RecId == ref.RealizedTaxLedgerDimension
                    join mainAccount
                        where mainAccount.RecId == dimAttrValCombo.MainAccount
                          && mainAccount.LedgerChartOfAccounts == _contract.ChartOfAccountsRecId;

                    _result.result(ref.RecId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@CurrencyLedgerGainLossFromNetValueFeature_PL:CurrencyLedgerGainLossAccountPLTableDevDoc</DeveloperDocumentation>
	<FormRef>CurrencyLedgerGainLossAccount</FormRef>
	<Label>@CurrencyLedgerGainLossFromNetValueFeature_PL:CurrencyLedgerGainLossAccountPLTableLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>CurrencyLedgerGainLossAccount</TitleField1>
	<TitleField2>ExchAdjTaxableType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CurrencyLedgerGainLossAccount</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RealizedTaxLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS116083</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExchAdjTaxableType</Name>
			<EnumType>ExchAdjTaxableType_W</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CurrencyLedgerGainLossAccountIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyLedgerGainLossAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyLedgerGainLossAccount</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CurrencyLedgerGainLossAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CurrencyLedgerGainLossAccount</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CurrencyLedgerGainLossAccount_PL</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyLedgerGainLossAccount</Name>
					<Field>CurrencyLedgerGainLossAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_CurrencyLedgerGainLossAccount_PL</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RealizedTaxLedgerDimension</Name>
					<Field>RealizedTaxLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>