<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInformationLegalEntity_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxInformationLegalEntity_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();

        this.panStatus = TaxPermanentAccountStatus_IN::NotAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryTaxWithholdInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax withhold information is mandatory information.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <returns>
    /// Returns true if the field is mandatory tax withhold information.
    /// </returns>
    boolean isMandatoryTaxWithholdInfo(FieldName _fieldName)
    {
        boolean ret;

        switch (_fieldName)
        {
            case fieldStr(TaxInformationLegalEntity_IN,paoCode) :
            case fieldStr(TaxInformationLegalEntity_IN,ddoCode) :
                ret = (this.TypeOfDeductor == TypeOfDeductor_IN::CentralGovernmentA);
                break;

            case fieldStr(TaxInformationLegalEntity_IN,StateCode) :
                ret = conFind([TypeOfDeductor_IN::StateGovernmentS,
                               TypeOfDeductor_IN::StatutoryBodyE,
                               TypeOfDeductor_IN::AutonomousBodyH,
                               TypeOfDeductor_IN::LocalAuthorityN
                              ],
                              this.TypeOfDeductor);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the modifield field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes

        super(_fieldId);

        switch (_fieldId)
        {
            #define.MinistryCodeNameStart(4)
            case fieldNum(TaxInformationLegalEntity_IN, panStatus):
                if (this.panStatus == TaxPermanentAccountStatus_IN::NotAvailable)
                {
                    this.panNumber = '';
                }
                break;
            case fieldNum(TaxInformationLegalEntity_IN, MinistryType):
                if (this.MinistryType == TaxWithholdMinistryType_IN::Regular)
                {
                    this.MinistryCode = TaxWithholdMinistryCode_IN::Agriculture;
                    this.MinistryName = subStr(enum2str(this.MinistryCode), #MinistryCodeNameStart, strLen(enum2str(this.MinistryCode)));
                }
                else
                {
                    this.MinistryCode = TaxWithholdMinistryCode_IN::Others;
                    this.MinistryName ='';
                }
                break;

            case fieldNum(TaxInformationLegalEntity_IN, MinistryCode):
                this.MinistryName = subStr(enum2str(this.MinistryCode), #MinistryCodeNameStart, strLen(enum2str(this.MinistryCode)));
                break;

            case fieldNum(TaxInformationLegalEntity_IN, TypeOfDeductor):
                if (!conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS,
                             TypeOfDeductor_IN::StatutoryBodyE,TypeOfDeductor_IN::StatutoryBodyD,
                             TypeOfDeductor_IN::AutonomousBodyG,TypeOfDeductor_IN::AutonomousBodyH,
                             TypeOfDeductor_IN::LocalAuthorityL,TypeOfDeductor_IN::LocalAuthorityN],this.TypeOfDeductor))
                {
                    this.paoCode = '';
                    this.ddoCode = '';
                    this.paoRegNum = '';
                    this.ddoRegNum = '';
                    this.MinistryName = '';
                    this.MinistryType = TaxWithholdMinistryType_IN::Regular;
                    this.MinistryCode = TaxWithholdMinistryCode_IN::Agriculture;
                    this.MinistryName = subStr(enum2str(this.MinistryCode), #MinistryCodeNameStart, strLen(enum2str(this.MinistryCode)));
                }
                if (!conFind([TypeOfDeductor_IN::StateGovernmentS,
                         TypeOfDeductor_IN::StatutoryBodyE,
                         TypeOfDeductor_IN::AutonomousBodyH,
                         TypeOfDeductor_IN::LocalAuthorityN
                        ],
                        this.TypeOfDeductor))
                {
                    this.StateCode = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDDORegNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the entered value in PAN number field is a valid PAN or not
    /// </summary>
    /// <returns>
    /// Returns boolean based on the matched value.
    /// </returns>
    public boolean validateDDORegNum()
    {
        boolean ret = true;

        #define.alphabets('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        #define.numbers('0123456789')
        #COSNumbers

        if ((strKeep(subStr(this.DDORegNum, #1, #3), #alphabets) != subStr(this.DDORegNum, #1, #3)) ||
            (strKeep(subStr(this.DDORegNum, #4, #6), #numbers)   != subStr(this.DDORegNum, #4, #6)) ||
            (strLen(this.DDORegNum) != #10)                                                                         ||
            (strKeep(subStr(this.DDORegNum, #10, #1), #alphabets)!= subStr(this.DDORegNum, #10, #1)))
        {
            // The DDO Registration Number must be alphanumeric with 3 alpha, 6 numeric and 1 alpha characters.
            ret = checkFailed("@SYS4000851");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);
        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(TaxInformationLegalEntity_IN, MinistryCode):
                    if (this.MinistryType == TaxWithholdMinistryType_IN::Regular && this.MinistryCode == TaxWithholdMinistryCode_IN::Others)
                    {
                        ret = checkFailed(strFmt("@SYS94968",enum2str(this.MinistryCode), fieldPName(TaxInformationLegalEntity_IN,MinistryCode)));
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the entered value in PAN number field is a valid PAN or not
    /// </summary>
    /// <returns>
    /// Returns boolean based on the matched value.
    /// </returns>
    public boolean validatePAN()
    {
        boolean ret = true;

        #define.alphabets('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        #define.numbers('0123456789')
        #COSNumbers

        if ((strKeep(subStr(this.panNumber, #1, #5), #alphabets) != subStr(this.panNumber, #1, #5)) ||
            (strKeep(subStr(this.panNumber, #6, #4), #numbers)   != subStr(this.panNumber, #6, #4)) ||
            (strLen(this.panNumber) != #10)                                                                         ||
            (strKeep(subStr(this.panNumber, #10, #1), #alphabets)!= subStr(this.panNumber, #10, #1)))
        {
            ret = checkFailed("@GLS5849");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxWithholdInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the values are valid tax withhold information or not.
    /// </summary>
    /// <returns>
    /// Returns true if the values are valid tax withhold information; otherwise, false.
    /// </returns>
    boolean validateTaxWithholdInfo()
    {
        boolean ret=true;
        #localmacro.CheckField
            ret = ret && ((this.isMandatoryTaxWithholdInfo(%1) && !this.(fieldname2id(this.tableId, %1)))? checkfailed(strfmt("@SYS116347", %1)):ret);
        #endMacro
        #define.numbers('0123456789')

        #CheckField(fieldstr(TaxInformationLegalEntity_IN,PAOCode))
        #CheckField(fieldstr(TaxInformationLegalEntity_IN,DDOCode))
        #CheckField(fieldstr(TaxInformationLegalEntity_IN,StateCode))

        ret = ret && ((this.StateCode && strKeep(this.StateCode,#numbers) != this.StateCode) ? checkFailed(strFmt("@SYS94968",this.StateCode,fieldPName(TaxInformationLegalEntity_IN,StateCode))) : ret);
        ret = ret && ((this.paoRegNum && strKeep(this.paoRegNum,#numbers) != this.paoRegNum) ? checkFailed(strFmt("@SYS94968",this.paoRegNum,fieldPName(TaxInformationLegalEntity_IN,paoRegNum))) : ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        #isoCountryRegionCodes
        boolean ret;

        ret = super();

        if (ret)
        {
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                ret = ret && this.validateTaxWithholdInfo();
                ret = ret && (
                        (this.panStatus == TaxPermanentAccountStatus_IN::Available
                            && !this.panNumber) ?
                        checkFailed(strFmt("@SYS116347",fieldId2pname(this.TableId,fieldNum(TaxInformationLegalEntity_IN,panNumber)))) : ret);
            }
            if ((TaxParameters::checkTaxParameters_IN()
                    || TaxWithholdParameters_IN::checkTaxParameters())
                && this.panNumber)
            {
                ret = ret && this.validatePAN();
            }
            if ((TaxParameters::checkTaxParameters_IN()
                    || TaxWithholdParameters_IN::checkTaxParameters())
                && this.DDORegNum)
            {
                ret = ret && this.validateDDORegNum();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxInformationLegalEntity_IN</c> table for the specified legal entity.
    /// </summary>
    /// <param name="_legalEntity">
    /// The unique legal entity to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxInformationLegalEntity_IN</c> table.
    /// </returns>
    public static TaxInformationLegalEntity_IN findByLegalEntity(
        DirPartyRecId       _legalEntity,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxInformationLegalEntity_IN   taxInformationLegalEntity;

        taxInformationLegalEntity.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxInformationLegalEntity.concurrencyModel(_concurrencyModel);
        }

        select taxInformationLegalEntity
            where taxInformationLegalEntity.LegalEntity == _legalEntity;

        return taxInformationLegalEntity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<CountryRegionContextField>LegalEntity</CountryRegionContextField>
	<DeveloperDocumentation>@GLS220215</DeveloperDocumentation>
	<FormRef>OMLegalEntities</FormRef>
	<Label>@GLS220214</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LegalEntity</TitleField1>
	<TitleField2>PANNumber</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CompanyInfoIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<ReplacementKey>CompanyInfoIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CircleNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessingOfficerNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PANNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PANInformation</Name>
			<Label>@GLS5163</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PANStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PANNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessingOfficerNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CircleNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WardNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeOfDeductor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PAOCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DDOCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PAORegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DDORegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinistryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinistryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinistryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssessingOfficerNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssessingOfficerNumber_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:AssessingOfficerNumberHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CircleNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CircleNumber_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:CircleNumberHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DDOCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdDDOCode_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:LegalEntityDDOCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DDORegNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdExpression_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:LegalEntityDDORegNumHelpText</HelpText>
			<Label>@GLS63013</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinistryCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:LegalEntityMinistryCodeHelpText</HelpText>
			<EnumType>TaxWithholdMinistryCode_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MinistryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdMinistryName_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinistryType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:LegalEntityMinistryDetailHelpText</HelpText>
			<EnumType>TaxWithholdMinistryType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PANNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PermanentAccountNumber_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:LegalEntityPANNumberHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PANStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:LegalEntityPANStatusHelpText</HelpText>
			<EnumType>TaxPermanentAccountStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PAOCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdPAOCode_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:LegalEntityPAOCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PAORegNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdPAORegNum_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:LegalEntityPAORegNumHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdStateCode_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:LegalEntityStateCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfDeductor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:TypeOfDeductorHelpText</HelpText>
			<EnumType>TypeOfDeductor_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WardNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WardNumber_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:WardNumberHelpText</HelpText>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CompanyInfoIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<SourceEDT>RecId</SourceEDT>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>