<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSalesTaxExchangeRateTypeCurrency</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerSalesTaxExchangeRateTypeCurrency extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayExchangeRateTypeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate type description.
    /// </summary>
    /// <returns>
    /// The exchange rate type description.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Description displayExchangeRateTypeDescription()
    {
        Description description;

        description = ExchangeRateType::find(this.ExchangeRateType).Description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in <c>LedgerSalesTaxExchangeRateTypeCurrency</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerSalesTaxExchangeRateTypeCurrency</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!LedgerSalesTaxExchangeRateTypeCurrency::exist(_recId))
        {
            isExisting = checkFailed(strFmt(LedgerSalesTaxExchangeRateTypeCurrency::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>LedgerSalesTaxExchangeRateTypeCurrency</c> table
    /// exists.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>LedgerSalesTaxExchangeRateTypeCurrency</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RecId _recId)
    {
        LedgerSalesTaxExchangeRateTypeCurrency ledgerSalesTaxExchangeRateTypeCurrency;

        select firstonly RecId
            from ledgerSalesTaxExchangeRateTypeCurrency
            where ledgerSalesTaxExchangeRateTypeCurrency.RecId == _recId;

        return ledgerSalesTaxExchangeRateTypeCurrency != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>LedgerSalesTaxExchangeRateTypeCurrency</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerSalesTaxExchangeRateTypeCurrency</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerVATExchangeRateTypeCurrency</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerSalesTaxExchangeRateTypeCurrency find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerSalesTaxExchangeRateTypeCurrency ledgerSalesTaxExchangeRateTypeCurrency;

        ledgerSalesTaxExchangeRateTypeCurrency.selectForUpdate(_forUpdate);

        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerSalesTaxExchangeRateTypeCurrency.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerSalesTaxExchangeRateTypeCurrency
            where ledgerSalesTaxExchangeRateTypeCurrency.RecId == _recId;

        return ledgerSalesTaxExchangeRateTypeCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTypeOfTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the exchange rate type for a specific transaction type.
    /// </summary>
    /// <param name="_ledgerRecId">
    /// The ID of the <c>Ledger</c> record.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_transactionType">
    /// The sales transaction type.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerVATExchangeRateTypeCurrency</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ExchangeRateTypeRecId getExchangeRateTypeOfTransactionType(
        LedgerRecId     _ledgerRecId,
        CurrencyCode    _currencyCode,
        TransactionType _transactionType)
    {
        LedgerSalesTaxExchangeRateTypeCurrency ledgerSalesTaxExchangeRateTypeCurrency;

        select firstonly ExchangeRateType from ledgerSalesTaxExchangeRateTypeCurrency
            where ledgerSalesTaxExchangeRateTypeCurrency.Ledger == _ledgerRecId &&
                ledgerSalesTaxExchangeRateTypeCurrency.CurrencyCode == _currencyCode &&
                ledgerSalesTaxExchangeRateTypeCurrency.TransactionType == _transactionType;

        return ledgerSalesTaxExchangeRateTypeCurrency.ExchangeRateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in <c>LedgerVATExchangeRateTypeCurrency</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS221231</DeveloperDocumentation>
	<Label>@GLS221230</Label>
	<TitleField1>Ledger</TitleField1>
	<TitleField2>CurrencyCode</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeRateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS104938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeRateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExchangeRateType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ExchangeRateTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Ledger</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerRecId</ExtendedDataType>
			<Label>@SYS13356</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TransactionType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerCurrencyIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Ledger</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTransactionCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerSalesTaxExchangeRateTypeCurrency</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Ledger</Name>
					<Field>Ledger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTaxExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ExchangeRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTaxExchangeRateTypeCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchangeRateType</Name>
					<Field>ExchangeRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>