<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBegBalJournalTrans_CostSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBegBalJournalTrans_CostSales extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the activity for a journal line.
    /// </summary>
    /// <returns>
    /// true if the activity that is used in this journal line is valid; otherwise, false.
    /// </returns>
    public boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);

            // validate if activity is a root activity.
            if (ret && this.ProjTransType != BegBalProjTransTypeCost::None)
            {
                if (!ProjParameters::allowParentActivitySelection(this.ActivityNumber))
                {
                    ret = checkFailed("@Proj:ParentActivityError");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the category for this journal line can be changed.
    /// </summary>
    /// <returns>
    /// true if the category for the journal line can be changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method does not allow a change and causes an exception if the activity that is used on the
    /// journal line has a default category that is mandatory, and the category set on the journal line is
    /// not set to the default category.
    /// </remarks>
    public boolean checkCategoryAllowed()
    {
        boolean ret = true;

        if (this.ActivityNumber && this.ProjCategoryId)
        {
            if (ProjActivity::find(this.ActivityNumber).Mandatory)
            {
                if (this.ProjCategoryId != (ProjActivity::find(this.ActivityNumber).CategoryDefault))
                {
                    ret = checkFailed("@SYS81827");
                }

                this.ProjCategoryId = ProjActivity::find(this.ActivityNumber).CategoryDefault;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the selected category is valid and is in the <c>ProjCategory</c> table.
    /// </summary>
    /// <returns>
    /// true if the category for the journal line is valid; otherwise, false.
    /// </returns>
    public boolean checkCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.ProjCategoryId)
        {
            projCategory    = ProjCategory::find(this.ProjCategoryId);
            switch (this.ProjTransType)
            {
                case BegBalProjTransTypeCost::Hour:
                    if (projCategory.CategoryType    != ProjCategoryType::Hour)
                    {
                        ret = checkFailed(strFmt("@SYS54897", this.ProjCategoryId));
                    }

                    ret = ret && projCategory.validateIfInactiveAllowed();
                    break;

                case BegBalProjTransTypeCost::Cost:
                    if (projCategory.CategoryType    != ProjCategoryType::Cost)
                    {
                        ret = checkFailed(strFmt("@SYS54897", this.ProjCategoryId));
                    }
                    ret = ret && projCategory.validateIfInactiveAllowed();
                    break;

                case BegBalProjTransTypeCost::Item:
                    if (projCategory.CategoryType    != ProjCategoryType::Item)
                    {
                        ret = checkFailed(strFmt("@SYS54897", this.ProjCategoryId));
                    }
                    ret = ret && projCategory.validateIfInactiveAllowed();
                    break;

                default:  
                    ret = this.checkCategoryIdForCustomType();
            }

            if (ret && isConfigurationkeyEnabled(configurationKeyNum(Project)) && projCategory.psaIndirectComponent)
            {
                ret = checkFailed("@PSA11059");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryIdForCustomType</Name>
				<Source><![CDATA[
    public boolean checkCategoryIdForCustomType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundingLimits</Name>
				<Source><![CDATA[
    private boolean checkFundingLimits()
    {
        ProjTrans   orginalProjTrans;
        ProjTrans   newProjTrans;
        boolean     retValue = true;

        if (this.orig())
        {
            // Revert the original reservations
            orginalProjTrans = ProjTrans::construct(this.orig());
            if (orginalProjTrans)
            {
                ProjFundingLimitTrackingManager::updateUsingProjTrans(orginalProjTrans, ProjFundingLimitTrackingAction::Release);
            }
        }

        // Check new reservatioons
        newProjTrans = ProjTrans::construct(this);
        if (!ProjFundingEngine::isAmountWithinFundingLimits(newProjTrans, newProjTrans.fundingSource(), newProjTrans.transTurnover()))
        {
            retValue = checkFailed("@SYS344241");
        }

        if (this.orig())
        {
            // Re-instate the original reservations
            if (orginalProjTrans)
            {
                ProjFundingLimitTrackingManager::updateUsingProjTrans(orginalProjTrans, ProjFundingLimitTrackingAction::Allocate);
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified project ID is valid for a journal line.
    /// </summary>
    /// <returns>
    /// true if the project ID is valid; otherwise, false.
    /// </returns>
    public boolean checkProjId()
    {
        boolean ret = true;

        if (this.ProjId)
        {
            switch (this.ProjTransType)
            {
                case BegBalProjTransTypeCost::Hour:
                case BegBalProjTransTypeCost::Cost:
                case BegBalProjTransTypeCost::Item:
                    if (! ProjTable::find(this.ProjId).status().activeInTree())
                    {
                        ret = checkFailed(strFmt("@Proj:ProjectIsHeaderOrFinished", this.ProjId));
                    }
                    break;
                default :   
                        ret = this.checkProjIdForCustomType();
            }

            if ( ret && (!ProjTable::isBegBalRuleDefined(this.ProjId)))
            {
                ret = checkFailed(strFmt("@SYS135526", ProjTable::find(this.ProjId).Stage()));
            }

            if (ret && (this.ProjTransType != BegBalProjTransTypeCost::Hour && this.ProjTransType != BegBalProjTransTypeCost::None &&
                    ProjTable::find(this.ProjId).Type == ProjType::Time))
            {
                ret = checkFailed(strFmt("@SYS136760", this.ProjTransType, "@SYS8758"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjIdForCustomType</Name>
				<Source><![CDATA[
    public boolean checkProjIdForCustomType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the terminated resource is enabled for transactions with a
    /// <c>BegBalProjTransTypeCost</c> enumeration value of Hour.
    /// </summary>
    /// <returns>
    /// true if the resource is valid; otherwise, false.
    /// </returns>
    public boolean checkResource()
    {
        boolean ret = true;

        if (this.Resource && this.ProjTransType == BegBalProjTransTypeCost::Hour)
        {
            ret = ResourceFacade::validateNotTerminated(this.Resource);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResourceAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the resource that is specified for a journal line is valid.
    /// </summary>
    /// <returns>
    /// true if the resource is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns false and throws an error if the category used on the journal line requires a
    /// resource and the resource is not specified.It also returns false and throws an error if the
    /// category used on the journal line does not require a resource and the resource is specified.
    /// </remarks>
    private boolean checkResourceAllowed()
    {
        boolean ret = true;

        if (this.ProjTransType == BegBalProjTransTypeCost::Hour && this.Resource)
        {
            ret =  ProjJournalTrans::checkCategoryResourceOption(this.ProjCategoryId, this.Resource);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set to apply to the <c>dimension</c> field.
    /// </summary>
    /// <param name="_dimension">
    ///    A dimension set to apply to the <c>dimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object that was initialized by using the current <c>ProjForecastEmpl</c>
    ///    buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>dimension</c> field.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _dimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(curext()).RecId))
    {
        return _dimensionCopy.copy(_dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTransPosting</Name>
				<Source><![CDATA[
    protected ProjTransPosting createProjTransPosting(ProjLedgerPostingLine _line, ProjCostSales _costSales, DebitCredit _debitCredit, InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        ProjFundingSource       projFundingSource;
        ProjTransPosting        projTransPosting;
        ProjLedgerUpdate        projLedgerUpdate;

        projTransPosting.ProjTransDate      = this.ProjTransDate;

        projTransPosting.ProjId             = this.ProjId;
        projTransPosting.ActivityNumber     = this.ActivityNumber;
        projTransPosting.CategoryId         = this.ProjCategoryId;
        projTransPosting.EmplItemId         = this.ItemId;
        projTransPosting.InventTransId      = _inventTransId;
        projTransPosting.ProjAdjustRefId    = _projAdjustRefId;
        projTransPosting.Resource           = this.Resource;
        projTransPosting.ResourceCategory   = this.ResourceCategory;
        projTransPosting.ProjType           = ProjTable::find(this.ProjId).Type;
        projTransPosting.ProjTransType      = ProjBegBalJournalTrans_CostSales::begBalTransType2ProjTransType(this.ProjTransType);
        projTransPosting.TransId            = this.TransId;
        projTransPosting.TransactionOrigin  = ProjOrigin::BeginningBalance;
        projTransPosting.ProjFundingSource  = this.ProjFundingSource;

        projTransPosting.CostSales          = _costSales;

        if (_costSales == ProjCostSales::Sales)
        {
            if (_debitCredit == DebitCredit::Credit)
            {
                projTransPosting.AmountMst  = -1 * this.ProjSalesAmount;
            }
            else
            {
                projTransPosting.AmountMst  = this.ProjSalesAmount;
            }
        }
        else if (_costSales == ProjCostSales::Cost)
        {
            if (_debitCredit == DebitCredit::Credit)
            {
                projTransPosting.AmountMst  = -1 * this.CostAmount;
            }
            else
            {
                projTransPosting.AmountMst  = this.CostAmount;
            }
        }

        if (this.ProjTransType == BegBalProjTransTypeCost::Hour)
        {
            if (_debitCredit == DebitCredit::Credit)
            {
                projTransPosting.Qty    = -1 * this.Quantity;
            }
            else
            {
                projTransPosting.Qty    = this.Quantity;
            }
        }

        projTransPosting.LedgerTransDate    = this.TransDate;
        projTransPosting.Voucher            = this.Voucher;
        projTransPosting.PostingType        = _line.parmLedgerPostingType();
        projTransPosting.LedgerOrigin       = ProjOrigin::BeginningBalance;

        projTransPosting.LedgerDimension = _line.parmLedgerAccount();

        projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        if (projTransPosting.PostingType == LedgerPostingType::ProjPayrollAllocation)
        {
            DimensionDefault resourceDefaultDimensions = ResourceFacade::getDefaultDimension(this.Resource);
            
            if (FeatureStateProvider::isFeatureEnabled(ProjPayrollAllocationAllowsOnlyWorkerDimensionsFeature::instance()))
            {
                projTransPosting.DefaultDimension = resourceDefaultDimensions;
            }
            else
            {
                projTransPosting.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(resourceDefaultDimensions, projFundingSource.DefaultDimension);
            }
        }
        else
        {
            projTransPosting.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);
        }

        projLedgerUpdate = new ProjLedgerUpdate();
        projLedgerUpdate.setPaymentDateStatus(projTransPosting);

        return projTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostStatus</Name>
				<Source><![CDATA[
    //precondition: projId, linePropertyId filled in; project of type FixedPrice or Investment
    private ProjLedgerStatus defaultCostStatus()
    {
        ProjTable projTable = ProjTable::find(this.ProjId);
        ProjLineProperty projLineProperty = ProjLineProperty::find(this.LinePropertyId);

        ProjCompletePrincip completePrinciple = ProjRevRecHelper::getCompletePrincipleForProjTable(projTable);
        
        if ((completePrinciple == ProjCompletePrincip::CompletedContract ||
             completePrinciple == ProjCompletePrincip::CompletedPercentage)
            &&
            ((this.ProjTransType == BegBalProjTransTypeCost::Cost && ProjRevRecHelper::getCostLedgerStatus(projTable) == ProjLedgerStatus::Never) ||
             (this.ProjTransType == BegBalProjTransTypeCost::Hour && ProjRevRecHelper::getEmplLedgerStatus(projTable) == ProjLedgerStatus::Never) ||
             (this.ProjTransType == BegBalProjTransTypeCost::Item && ProjRevRecHelper::getItemLedgerStatus(projTable) == ProjLedgerStatus::Never)))
        {
            return ProjLedgerStatus::Never;
        }

        if (completePrinciple == ProjCompletePrincip::CompletedContract &&
            projLineProperty.ToBeCapitalize == NoYes::Yes)
        {
            return ProjLedgerStatus::BalanceSheet;
        }

        if (completePrinciple == ProjCompletePrincip::CompletedPercentage &&
            projLineProperty.ToBeCapitalize == NoYes::Yes)
        {
            return ProjLedgerStatus::Operations;
        }

        if ((completePrinciple == ProjCompletePrincip::CompletedContract || completePrinciple == ProjCompletePrincip::CompletedPercentage) &&
            projLineProperty.ToBeCapitalize == NoYes::No)
        {
            return ProjLedgerStatus::Operations;
        }

        throw error('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjTrans   projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);

        super();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a voucher number.
    /// </summary>
    /// <param name="_journalNameId">
    /// The journal ID associated with the specified record.
    /// </param>
    public void generateVoucher(JournalNameId _journalNameId)
    {
        NumberSeq                           numberSeq;
        NumberSequenceTable                 numberSequenceTableVoucher  = ProjJournalName::find(_journalNameId).getNumberSequenceTable();
        ProjBegBalJournalTrans_CostSales    projBegBalJournalTrans_CostSales;

        select firstonly projBegBalJournalTrans_CostSales where projBegBalJournalTrans_CostSales.ProjTransType == this.ProjTransType
            && projBegBalJournalTrans_CostSales.JournalId == this.JournalId;
        if (projBegBalJournalTrans_CostSales)
        {
            this.Voucher = projBegBalJournalTrans_CostSales.Voucher ;
        }
        else
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(numberSequenceTableVoucher.NumberSequence);
            this.Voucher = numberSeq.voucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    private DimensionDefault getDefaultDimension()
    {
        ProjTable projTable;
        InventTable inventTable;
        DimensionDefault defaultDimension;

        if (this.ProjId && this.ItemId)
        {
            inventTable=InventTable::find(this.ItemId);
            projTable = ProjTable::find(this.ProjId);
            defaultDimension = this.mergeDimension(inventTable.DefaultDimension,projTable.DefaultDimension);
        }
        else if (this.ProjId)
        {
            projTable = ProjTable::find(this.ProjId);
            this.DefaultDimension = projTable.DefaultDimension;
            defaultDimension = this.mergeDimension(ResourceFacade::getDefaultDimension(this.Resource));
        }
        else if (this.ItemId)
        {
            inventTable=InventTable::find(this.ItemId);
            defaultDimension = inventTable.DefaultDimension;
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLines</Name>
				<Source><![CDATA[
    public ProjLedgerPostingLines getLedgerPostingLines()
    {
        ProjLedgerPostingLines  ret;

        LedgerPostingType               ledgerPostingType;
        LedgerDimensionDefaultAccount   ledgerAccount;

        switch (this.ProjTransType)
        {
            case BegBalProjTransTypeCost::Hour:
                ret = this.getLedgerPostingLinesHour();
                break;

            case BegBalProjTransTypeCost::Cost:
                ret = this.getLedgerPostingLinesCost();
                break;

            case BegBalProjTransTypeCost::Item:
                ret = this.getLedgerPostingLinesItem();
                break;

            default:
                ret = this.LedgerPostingLines_CustomType();
        }

        if (!ret)
        {
            return ret;
        }

        if (ret.parmCostDebit())
        {
            ledgerPostingType = ret.parmCostDebit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.ProjCategoryId, this.ProjFundingSource, false, false);
            ret.parmCostDebit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmCostCredit())
        {
            ledgerPostingType = ret.parmCostCredit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.ProjCategoryId, this.ProjFundingSource, false, false);
            ret.parmCostCredit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmSaleDebit())
        {
            ledgerPostingType = ret.parmSaleDebit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.ProjCategoryId, this.ProjFundingSource, false, false);
            ret.parmSaleDebit().parmLedgerAccount(ledgerAccount);
        }

        if (ret.parmSaleCredit())
        {
            ledgerPostingType = ret.parmSaleCredit().parmLedgerPostingType();
            ledgerAccount = ProjPosting::getLedgerDimensionLedgerPostingType(ledgerPostingType, this.ProjId, this.ProjCategoryId, this.ProjFundingSource, false, false);
            ret.parmSaleCredit().parmLedgerAccount(ledgerAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerPostingLines_CustomType</Name>
				<Source><![CDATA[
    protected ProjLedgerPostingLines LedgerPostingLines_CustomType()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjLedgerPostingLines</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines initProjLedgerPostingLines(ProjLedgerPostingLine _costDebit, ProjLedgerPostingLine _costCredit, ProjLedgerPostingLine _saleDebit, ProjLedgerPostingLine _saleCredit)
    {
        ProjLedgerPostingLines ret = new ProjLedgerPostingLines();

        ret.parmCostCredit(_costCredit);
        ret.parmCostDebit(_costDebit);
        ret.parmSaleCredit(_saleCredit);
        ret.parmSaleDebit(_saleDebit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the credit and debit values of cost and sales and retrieve a new instance of <c>ProjLedgerPostingLines</c> class
    ///     where transaction type is expense.
    /// </summary>
    /// <returns>
    ///     An instance of <c>ProjLedgerPostingLines</c> class.
    /// </returns>
    protected ProjLedgerPostingLines getLedgerPostingLinesCost()
    {
        ProjLedgerPostingLines  ret;
        ProjTable projTableLocal = ProjTable::find(this.ProjId);

        switch (projTableLocal.Type)
        {
            case ProjType::TimeMaterial:
                ret = this.getLedgerPostingLinesCostForTimeMaterial();                
                break;

            case ProjType::FixedPrice:
            case ProjType::Investment:
            case ProjType::Internal:
                ret = this.getLedgerPostingLinesCostForFixedPriceInternalInvestment();
                break;

            case ProjType::Cost:
                ProjLedgerPostingLine costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                ProjLedgerPostingLine costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                ProjLedgerPostingLine saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                ProjLedgerPostingLine saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        
                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }
                ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);
                break;

            case ProjType::None:
                if (!projTableLocal.ProjInvoiceProjId || ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Cost, ProjContractBillingMethod::FixedPrice))
                {
                    ret = this.getLedgerPostingLinesCostForFixedPriceInternalInvestment();
                }
                else if (ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Cost, ProjContractBillingMethod::TimeMaterial))
                {
                    ret = this.getLedgerPostingLinesCostForTimeMaterial();
                }
                else
                {
                    throw Error(strFmt("@Proj:ProjNoContractLineForTransType", enum2Str(ProjTransType::Cost), projTableLocal.ProjInvoiceProjId, projTableLocal.ProjId));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesCostForTimeMaterial</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesCostForTimeMaterial()
    {
        ProjLedgerPostingLine costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced
            && this.ProjLedgerCostStatus == ProjLedgerStatus::Operations
            && this.ProjAccruable == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjTurnover);
        }

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus == ProjLedgerStatus::Operations
            && this.ProjAccruable == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus == ProjLedgerStatus::Operations
            && this.ProjAccruable == NoYes::Yes
            && ProjLineProperty::find(this.LinePropertyId).ToBeAccrued == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalueOffset);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalue);
        }

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPCostvalue);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesCostForFixedPriceInternalInvestment</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesCostForFixedPriceInternalInvestment()
    {
        ProjLedgerPostingLine costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus == ProjLedgerStatus::Operations
            && this.ProjAccruable == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPCostvalue);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesHour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the credit and debit values of cost and sales and retrieve a new instance of <c>ProjLedgerPostingLines</c> class
    ///     where transaction type is hour.
    /// </summary>
    /// <returns>
    ///     An instance of <c>ProjLedgerPostingLines</c> class.
    /// </returns>
    protected ProjLedgerPostingLines getLedgerPostingLinesHour()
    {
        ProjLedgerPostingLines  ret;
        ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        ProjTable projTableLocal = ProjTable::find(this.ProjId);

        switch (projTableLocal.Type)
        {
            case ProjType::TimeMaterial:
                ret = this.getLedgerPostingLinesHourForTimeMaterial();
                break;

            case ProjType::FixedPrice:
                ret = this.getLedgerPostingLinesHourForFixedPrice();
                break;

            case ProjType::Investment:

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::None
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNoLedger);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::BalanceSheet
                    && this.ProjAccruable               == NoYes::No
                    && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPCostvalue);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }

                ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);
                break;

            case ProjType::Internal:
                ret = this.getLedgerPostingLinesHourForInternal();
                break;

            case ProjType::Cost:

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }
                ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);
                break;

            case ProjType::Time:

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }
                ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);
                break;

            case ProjType::None:
                if (!projTableLocal.ProjInvoiceProjId)
                {
                    ret = this.getLedgerPostingLinesHourForInternal();
                }
                else if (ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Hour, ProjContractBillingMethod::FixedPrice))
                {
                    ret = this.getLedgerPostingLinesHourForFixedPrice();
                }
                else if (ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Hour, ProjContractBillingMethod::TimeMaterial))
                {
                    ret = this.getLedgerPostingLinesHourForTimeMaterial();
                }
                else
                {
                    throw Error(strFmt("@Proj:ProjNoContractLineForTransType", enum2Str(ProjTransType::Hour), projTableLocal.ProjInvoiceProjId, projTableLocal.ProjId));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesHourForTimeMaterial</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesHourForTimeMaterial()
    {
        ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Invoiced
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjTurnover);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Invoiced
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjTurnover);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::None
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNoLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
            && this.ProjAccruable               == NoYes::Yes
            && ProjLineProperty::find(this.LinePropertyId).ToBeAccrued == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalueOffset);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalue);
        }
        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::Yes
            && ProjLineProperty::find(this.LinePropertyId).ToBeAccrued == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalueOffset);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalue);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPCostvalue);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesHourForFixedPrice</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesHourForFixedPrice()
    {
        ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                
        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::None
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNoLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPCostvalue);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesHourForInternal</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesHourForInternal()
    {
        ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);                
        
        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::None
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNoLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Never
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjNeverLedger);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjWIPCostvalue);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjPayrollAllocation);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the credit and debit values of cost and sales and retrieve a new instance of <c>ProjLedgerPostingLines</c> class
    ///     where transaction type is item.
    /// </summary>
    /// <returns>
    ///     An instance of <c>ProjLedgerPostingLines</c> class.
    /// </returns>
    protected ProjLedgerPostingLines getLedgerPostingLinesItem()
    {
        ProjLedgerPostingLines  ret;
        ProjTable projTableLocal = ProjTable::find(this.ProjId);

        switch (projTableLocal.Type)
        {
            case ProjType::TimeMaterial:
                ret = this.getLedgerPostingLinesItemForTimeMaterial();
                break;

            case ProjType::FixedPrice:
            case ProjType::Investment:
            case ProjType::Internal:
                ret = this.getLedgerPostingLinesItemForFixedPriceInternalInvestment();
                break;

            case ProjType::Cost:                
                ProjLedgerPostingLine   costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                ProjLedgerPostingLine   costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                ProjLedgerPostingLine   saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                ProjLedgerPostingLine   saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

                if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
                    && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
                    && this.ProjAccruable               == NoYes::No)
                {
                    costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
                    costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                    saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
                }
                ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);
                break;                            

            case ProjType::None:
                if (!projTableLocal.ProjInvoiceProjId || ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Item, ProjContractBillingMethod::FixedPrice))
                {
                    ret = this.getLedgerPostingLinesItemForFixedPriceInternalInvestment();
                }
                else if (ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Item, ProjContractBillingMethod::TimeMaterial))
                {
                    ret = this.getLedgerPostingLinesItemForTimeMaterial();
                }
                else
                {
                    throw Error(strFmt("@Proj:ProjNoContractLineForTransType", enum2Str(ProjTransType::Item), projTableLocal.ProjInvoiceProjId, projTableLocal.ProjId));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesItemForTimeMaterial</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesItemForTimeMaterial()
    {
        ProjLedgerPostingLine costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Invoiced
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjTurnover);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::Yes
            && ProjLineProperty::find(this.LinePropertyId).ToBeAccrued == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalueOffset);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::ProjSalesvalue);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjStatusAccountItem);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingLinesItemForFixedPriceInternalInvestment</Name>
				<Source><![CDATA[
    private ProjLedgerPostingLines getLedgerPostingLinesItemForFixedPriceInternalInvestment()
    {
        ProjLedgerPostingLine costDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine costCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleDebit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        ProjLedgerPostingLine saleCredit = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        
        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::Operations
            && this.ProjAccruable               == NoYes::No)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjCost);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }

        if (this.ProjTransStatusPostedInvoiced   == ProjTransStatusPostedInvoiced::Posted
            && this.ProjLedgerCostStatus        == ProjLedgerStatus::BalanceSheet
            && this.ProjAccruable               == NoYes::No
            && ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize == NoYes::Yes)
        {
            costDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::ProjStatusAccountItem);
            costCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleDebit   = ProjLedgerPostingLine::construct(LedgerPostingType::None);
            saleCredit  = ProjLedgerPostingLine::construct(LedgerPostingType::None);
        }        

        ProjLedgerPostingLines ret = this.initProjLedgerPostingLines(costDebit, costCredit, saleDebit, saleCredit);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the cost price and sales price associated with the journal line.
    /// </summary>
    public void initCostSales()
    {
        switch (this.ProjTransType)
        {
            case BegBalProjTransTypeCost::Hour :
                this.setHourCostPrice();
                this.setHourSalesPrice();
                break;

            case BegBalProjTransTypeCost::Item :
                this.setInventCostPrice();
                this.setInventSalesPrice();
                break;

            default :
                this.CostPrice = 0;
                this.SalesPrice = 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default value of the category associated with the journal line.
    /// </summary>
    /// <param name="_projJournalTable">
    /// A <c>ProjJournalTable</c> table buffer.
    /// </param>
    void initDefaultCategory(ProjJournalTable _projJournalTable)
    {
        ProjCategoryType    projCategoryType;
        ProjTransType       begBalProjTransType;
        InventTable         tmpInventTable;
        CategoryId          tmpCategoryId;

        tmpInventTable = InventTable::find(this.ItemId);

        if (tmpInventTable.ProjCategoryId)
        {
            projCategoryType = ProjCategory::find(tmpInventTable.ProjCategoryId).CategoryType;
            tmpCategoryId = tmpInventTable.ProjCategoryId;
        }
        else if (this.ProjCategoryId)
        {
            projCategoryType = ProjCategory::find(this.ProjCategoryId).CategoryType;
            tmpCategoryId = this.ProjCategoryId;
        }
        else
        {
            projCategoryType = ProjCategory::find(_projJournalTable.CategoryId).CategoryType;
            tmpCategoryId = _projJournalTable.CategoryId;
        }

        begBalProjTransType = ProjBegBalJournalTrans_CostSales::begBalTransType2ProjTransType(this.ProjTransType);

        if (ProjCategory::categoryType2TransType(projCategoryType) == begBalProjTransType )
        {
            this.ProjCategoryId = tmpCategoryId;
        }
        else
        {
            this.ProjCategoryId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBegBalJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the appropriate fields in a starting balance journal line with the values of the
    /// corresponding fields of the specified starting balance journal line.
    /// </summary>
    /// <param name="_projBegBalJournalTrans_CostSales">
    /// The starting balance journal line that is used for initialization.
    /// </param>
    public void initFromBegBalJournalTrans(ProjBegBalJournalTrans_CostSales _projBegBalJournalTrans_CostSales)
    {
        this.JournalId              = _projBegBalJournalTrans_CostSales.JournalId;
        this.LineNum                = _projBegBalJournalTrans_CostSales.LineNum;
        this.Voucher                = _projBegBalJournalTrans_CostSales.Voucher;

        this.ItemId                 = _projBegBalJournalTrans_CostSales.ItemId;
        this.Resource               = _projBegBalJournalTrans_CostSales.Resource;
        this.ResourceCategory       = _projBegBalJournalTrans_CostSales.ResourceCategory;
        this.ProjId                 = _projBegBalJournalTrans_CostSales.ProjId;
        this.ProjCategoryId         = _projBegBalJournalTrans_CostSales.ProjCategoryId;
        this.LinePropertyId         = _projBegBalJournalTrans_CostSales.LinePropertyId;

        this.Txt                    = _projBegBalJournalTrans_CostSales.Txt;
        this.Quantity               = _projBegBalJournalTrans_CostSales.Quantity;

        this.CostPrice              = _projBegBalJournalTrans_CostSales.CostPrice;
        this.CostAmount             = _projBegBalJournalTrans_CostSales.CostAmount;

        this.SalesPrice             = _projBegBalJournalTrans_CostSales.SalesPrice;
        this.ProjSalesAmount        = _projBegBalJournalTrans_CostSales.ProjSalesAmount;

        this.ProjSalesCurrencyId    = _projBegBalJournalTrans_CostSales.ProjSalesCurrencyId;
        this.ProjTaxGroupId         = _projBegBalJournalTrans_CostSales.ProjTaxGroupId;
        this.ProjTaxItemGroupId     = _projBegBalJournalTrans_CostSales.ProjTaxItemGroupId;
        this.ActivityNumber         = _projBegBalJournalTrans_CostSales.ActivityNumber;

        this.TransDate              = _projBegBalJournalTrans_CostSales.TransDate;
        this.ProjTransDate          = _projBegBalJournalTrans_CostSales.ProjTransDate;

        this.TransId                = ProjParameters::newTransId();

        this.ProjAccruable          = _projBegBalJournalTrans_CostSales.ProjAccruable;
        this.ProjFundingSource      = _projBegBalJournalTrans_CostSales.ProjFundingSource;

        this.ProjLedgerCostStatus   = _projBegBalJournalTrans_CostSales.ProjLedgerCostStatus;

        this.ProjTransStatusPostedInvoiced = _projBegBalJournalTrans_CostSales.ProjTransStatusPostedInvoiced;
        this.ProjTransType          = _projBegBalJournalTrans_CostSales.ProjTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPostedInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the cost status associated with the selected project id.
    /// </summary>
    public void initPostedInvoiced()
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(ProjTable::find(this.ProjId), ProjBegBalJournalTrans_CostSales::begBalTransType2ProjTransType(this.ProjTransType)))
        {
            this.ProjTransStatusPostedInvoiced = ProjTransStatusPostedInvoiced::Invoiced;
        }
        else
        {
            this.ProjTransStatusPostedInvoiced = ProjTransStatusPostedInvoiced::Posted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes default values of table fields.
    /// </summary>
    public void initValue()
    {
        super();

        this.ProjCategoryId = '';
        this.Txt = '';
        this.ItemId = '';
        this.Resource = 0;
        this.ResourceCategory = 0;
        this.ActivityNumber = '';

        if (this.ProjTransType == BegBalProjTransTypeCost::Hour)
        {
            this.Quantity = 0;
        }
        else
        {
            this.Quantity = 1;
        }
        this.LinePropertyId = '';
        this.CostPrice = 0;
        this.SalesPrice = 0;
        this.CostAmount = 0;
        this.Voucher = '';
        this.ProjSalesAmount = 0;

        this.ProjLedgerCostStatus = ProjLedgerStatus::Operations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProjTrans   projTrans;

        if (this.LineNum == 0)
        {
            this.LineNum = ProjBegBalJournalTrans_CostSales::nextLineNum(this.JournalId);
        }

        super();

        projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Allocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>DefaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// The first dimension set to use to merge with the current <c>DefaultDimension</c> field of this
    /// table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// The second dimension set to use to merge with the current <c>DefaultDimension</c> field of this
    /// table; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>DimensionMerge</c> object that was initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// The dimension set that holds the merged combination of the current <c>DefaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are
    /// merged.Additionally, the default entity specifier will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeResourceDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the default dimension for the journal line with worker resource default dimension.
    /// </summary>
    private void mergeResourceDimensionDefault()
    {
        if (this.Resource)
        {
            this.DefaultDimension = this.mergeDimension(ResourceFacade::getDefaultDimension(this.Resource));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        ProjTable           projTable;
        ProjFundingSource   projFundingSource;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjTransDate) :
                switch (this.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour :
                        this.setHourCostPrice();
                        this.setHourSalesPrice();
                        break;

                    case BegBalProjTransTypeCost::Cost :
                        this.setExpenseCostPrice();
                        this.setExpenseSalesPrice();
                        break;
                }
                this.setCostAmount();
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, Quantity), fieldNum(ProjBegBalJournalTrans_CostSales, CostPrice) :
                switch (this.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour :
                        this.setHourSalesPrice();
                        break;

                    case BegBalProjTransTypeCost::Cost :
                        if (_fieldId == fieldNum(ProjBegBalJournalTrans_CostSales, Quantity))
                        {
                            this.setExpenseCostPrice();
                        }
                        this.setExpenseSalesPrice();
                        break;
                }
                this.setCostAmount();
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, Resource) :
                switch (this.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour :
                        this.setHourCostPrice();
                        this.setHourSalesPrice();
                        break;

                    case BegBalProjTransTypeCost::Cost :
                        this.setExpenseCostPrice();
                        this.setExpenseSalesPrice();
                        break;
                }
                this.setCostAmount();
                this.setSalesAmount();
                this.setProjectDimensionDefault();
                this.mergeResourceDimensionDefault();
                break;
            case fieldNum(ProjBegBalJournalTrans_CostSales, ResourceCategory) :
                switch (this.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour :
                        this.setHourCostPrice();
                        this.setHourSalesPrice();
                        break;
                }
                this.setCostAmount();
                this.setSalesAmount();
                break;
            case fieldNum(ProjBegBalJournalTrans_CostSales, SalesPrice) :
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjSalesCurrencyId) :
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ItemId) :
                this.DefaultDimension=this.getDefaultDimension();
                this.initDefaultCategory(this.projJournalTable());
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjCategoryId) :
                switch (this.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour :
                        this.setHourCostPrice();
                        this.setHourSalesPrice();
                        break;

                    case BegBalProjTransTypeCost::Cost :
                        this.setExpenseCostPrice();
                        this.setExpenseSalesPrice();
                        break;
                }
                this.setCostAmount();
                this.setSalesAmount();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjId) :
                projTable = ProjTable::find(this.ProjId);
                this.ProjSalesCurrencyId = projTable.currencyId();
                this.LinePropertyId = '';
                this.setLineProperty();
                switch (this.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour :
                        this.setHourCostPrice();
                        this.setHourSalesPrice();
                        break;

                    case BegBalProjTransTypeCost::Cost :
                        this.setExpenseCostPrice();
                        this.setExpenseSalesPrice();
                        break;
                }
                this.setCostAmount();
                this.setSalesAmount();
                this.ProjFundingSource = 0;
                this.DefaultDimension=this.getDefaultDimension();
                if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
                {
                    select firstonly RecId from projFundingSource where projFundingSource.ContractId == projTable.ProjInvoiceProjId;
                    this.ProjFundingSource = projFundingSource.RecId;
                    if (!ProjFundingSource::isExternalFunding(this.ProjFundingSource))
                    {
                        this.ProjAccruable = NoYes::No;
                        this.ProjTransStatusPostedInvoiced = ProjTransStatusPostedInvoiced::Posted;
                    }
                }
            //no break.setCostStatus code below has to run for projid change as well.

            case fieldNum(ProjBegBalJournalTrans_CostSales, LinePropertyId) :
                this.setCostStatus(true, false);
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjFundingSource) :
                if (!ProjFundingSource::isExternalFunding(this.ProjFundingSource))
                {
                    this.ProjAccruable = NoYes::No;
                    this.ProjTransStatusPostedInvoiced = ProjTransStatusPostedInvoiced::Posted;
                }
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjLedgerCostStatus) :
                this.setCostStatus(false, true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjLedger</Name>
				<Source><![CDATA[
    private boolean postProjLedger(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        ProjTrans               projTrans;
        ProjTransPosting        projTransPosting;
        ProjLedgerPostingLines  projLedgerPostingLines;
        ProjLedgerPostingLine   line;
        boolean                 ret = false;

        boolean                 postPL;
        boolean                 postWIP;
        boolean                 postPayroll;

        ProjJournalTable        projJournalTable = this.projJournalTable();

        postPL                  = projJournalTable.PostPL;
        postWIP                 = projJournalTable.PostWIP;
        postPayroll             = projJournalTable.PostPayroll;

        projLedgerPostingLines  = this.getLedgerPostingLines();

        if (!projLedgerPostingLines)
        {
            return false;
        }

        if (!projLedgerPostingLines.parmCostDebit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmCostCredit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmSaleDebit())
        {
            return false;
        }

        if (!projLedgerPostingLines.parmSaleCredit())
        {
            return false;
        }

        if (projLedgerPostingLines.parmCostDebit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmCostCredit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmSaleDebit().parmLedgerPostingType() == LedgerPostingType::None
            && projLedgerPostingLines.parmSaleCredit().parmLedgerPostingType() == LedgerPostingType::None)
        {
            throw Global::error(strFmt("@SYS309459", enum2str(this.ProjTransType), this.ProjCategoryId, this.ProjSalesAmount, this.ProjTransDate));
        }

        ttsbegin;

        //Cost debit
        line = projLedgerPostingLines.parmCostDebit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Cost, DebitCredit::Debit, _inventTransId, _projAdjustRefId);
            projTransPosting.insert();
        }

        //Cost credit
        line = projLedgerPostingLines.parmCostCredit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Cost, DebitCredit::Credit, _inventTransId, _projAdjustRefId);
            projTransPosting.insert();
        }

        //Sale debit
        line = projLedgerPostingLines.parmSaleDebit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Sales, DebitCredit::Debit, _inventTransId, _projAdjustRefId);
            projTransPosting.insert();
        }

        //Sale credit
        line = projLedgerPostingLines.parmSaleCredit();
        line.filter(postPL, postWIP, postPayroll);
        if (line.parmLedgerPostingType() != LedgerPostingType::None)
        {
            projTransPosting = this.createProjTransPosting(line, ProjCostSales::Sales, DebitCredit::Credit, _inventTransId, _projAdjustRefId);
            projTransPosting.insert();
        }

        projTrans = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);
        ProjFundingEngine::updateFundingLimits(ProjTrans::construct(this), this.ProjFundingSource, this.ProjSalesAmount);

        ret = true;
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransaction</Name>
				<Source><![CDATA[
    private boolean postProjTransaction(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        switch (this.ProjTransType)
        {
            case    BegBalProjTransTypeCost::Cost:
                return this.postProjTransactionCost();

            case    BegBalProjTransTypeCost::Hour:
                return this.postProjTransactionHour();

            case    BegBalProjTransTypeCost::Item:
                return this.postProjTransactionItem(_inventTransId, _projAdjustRefId);

            default:
                return this.postProjTransactionCustomType(this.ProjTransType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project transactions related to Cost.
    /// </summary>
    /// <returns>
    /// true if the posting completes successfully; otherwise, false.
    /// </returns>
    protected boolean postProjTransactionCost()
    {
        boolean ret = false;

        ttsbegin;

        ProjCostTrans projCostTrans = this.postProjTransactionCost_ProjCostTrans();

        this.postProjTransactionCost_ProjCostTransCost(projCostTrans);

        this.postProjTransactionCost_ProjCostTransSale(projCostTrans);

        ret = true;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost_ProjCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjCostTrans</c> record.
    /// </summary>
    /// <returns>
    /// An inserted <c>ProjCostTrans</c> record.
    /// </returns>
    protected ProjCostTrans postProjTransactionCost_ProjCostTrans()
    {
        ProjCostTrans projCostTrans = this.postProjTransactionCost_InitializeProjCostTrans();
        projCostTrans.insert();

        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost_InitializeProjCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjCostTrans</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjCostTrans</c> table buffer.
    /// </returns>
    protected ProjCostTrans postProjTransactionCost_InitializeProjCostTrans()
    {
        ProjCostTrans projCostTrans;

        projCostTrans.TransDate             = this.ProjTransDate;
        projCostTrans.ProjId                = this.ProjId;
        projCostTrans.ActivityNumber        = this.ActivityNumber;
        projCostTrans.CategoryId            = this.ProjCategoryId;
        projCostTrans.Resource              = this.Resource;
        projCostTrans.ResourceCategory      = this.ResourceCategory;
        projCostTrans.LinePropertyId        = this.LinePropertyId;
        projCostTrans.TransId               = this.TransId;
        projCostTrans.TransIdRef            = this.TransId;
        projCostTrans.VoucherJournal        = this.Voucher;
        projCostTrans.Txt                   = this.Txt;
        projCostTrans.TransactionOrigin     = ProjOrigin::BeginningBalance;
        projCostTrans.CurrencyIdCost        = CompanyInfoHelper::standardCurrency();
        projCostTrans.Qty                   = this.Quantity;
        projCostTrans.CurrencyId            = this.ProjSalesCurrencyId;
        projCostTrans.TaxGroupId            = this.ProjTaxGroupId;
        projCostTrans.TaxItemGroupId        = this.ProjTaxItemGroupId;
        projCostTrans.DefaultDimension      = this.DefaultDimension;

        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost_ProjCostTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjCostTransCost</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// A <c>ProjCostTrans</c> record.
    /// </param>
    protected void postProjTransactionCost_ProjCostTransCost(ProjCostTrans _projCostTrans)
    {
        ProjCostTransCost projCostTransCost = this.postProjTransactionCost_InitializeProjCostTransCost(_projCostTrans);

        projCostTransCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost_InitializeProjCostTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjCostTransCost</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// A <c>ProjCostTrans</c> record.
    /// </param>
    /// <returns>
    /// An initialized <c>ProjCostTransCost</c> table buffer.
    /// </returns>
    protected ProjCostTransCost postProjTransactionCost_InitializeProjCostTransCost(ProjCostTrans _projCostTrans)
    {
        ProjCostTransCost projCostTransCost;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projCostTransCost.TransId           = this.TransId;
        projCostTransCost.LedgerTransdate   = this.ProjTransDate;
        projCostTransCost.CostPrice         = this.CostPrice;
        projCostTransCost.LedgerStatusCost  = this.ProjLedgerCostStatus;
        projCostTransCost.FundingSource     = this.ProjFundingSource;

        projCostTransCost.LineAmount        = CurrencyExchangeHelper::amount(this.CostPrice * this.Quantity, _projCostTrans.CurrencyIdCost);
        if (this.ProjLedgerCostStatus == ProjLedgerStatus::BalanceSheet || this.ProjLedgerCostStatus == ProjLedgerStatus::Operations)
        {
            projCostTransCost.CostAmountLedger  =  projCostTransCost.LineAmount;
        }
        projCostTransCost.CostPriceCurrency = this.CostPrice;

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projCostTransCost.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projCostTransCost.TransStatus   = ProjTransStatus::Posted;
        }

        projCostTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projCostTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost_ProjCostTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjCostTransSale</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// A <c>ProjCostTrans</c> record.
    /// </param>
    protected void postProjTransactionCost_ProjCostTransSale(ProjCostTrans _projCostTrans)
    {
        ProjCostTransSale projCostTransSale = this.postProjTransactionCost_InitializeProjCostTransSale(_projCostTrans);

        projCostTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCost_InitializeProjCostTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjCostTransSale</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// A <c>ProjCostTrans</c> record.
    /// </param>
    /// <returns>
    /// An initialized <c>ProjCostTransSale</c> table buffer.
    /// </returns>
    protected ProjCostTransSale postProjTransactionCost_InitializeProjCostTransSale(ProjCostTrans _projCostTrans)
    {
        ProjCostTransSale projCostTransSale;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projCostTransSale.TransId           = this.TransId;
        projCostTransSale.LedgerTransdate   = this.ProjTransDate;
        projCostTransSale.LedgerSalesPosted = this.ProjAccruable;
        if (projCostTransSale.LedgerSalesPosted)
        {
            projCostTransSale.LedgerSalesAmount = this.ProjSalesAmount;
        }
        projCostTransSale.FundingSource     = this.ProjFundingSource;
        projCostTransSale.SalesPrice        = this.SalesPrice;
        projCostTransSale.LineAmount        = CurrencyExchangeHelper::amount(this.SalesPrice * this.Quantity, _projCostTrans.CurrencyId);

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projCostTransSale.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projCostTransSale.TransStatus   = ProjTransStatus::Posted;
        }

        projCostTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projCostTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project transactions related to Hour.
    /// </summary>
    /// <returns>
    /// true if the posting completes successfully; otherwise, false.
    /// </returns>
    protected boolean postProjTransactionHour()
    {
        boolean ret = false;

        ttsbegin;

        this.postProjTransactionHour_ProjEmplTrans();

        this.postProjTransactionHour_ProjEmplTransCost();

        this.postProjTransactionHour_ProjEmplTransSale();

        ret = true;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionCustomType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project transactions related to Custom type.
    /// </summary>
    /// <param name = "_custTransType">
    /// The <c>BegBalProjTransTypeCost</c> custom type.
    /// </param>
    /// <returns>
    /// true if the posting completes successfully; otherwise, false.
    /// </returns>
    protected boolean postProjTransactionCustomType(BegBalProjTransTypeCost _custTransType)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour_ProjEmplTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjEmplTrans</c> record.
    /// </summary>
    protected void postProjTransactionHour_ProjEmplTrans()
    {
        ProjEmplTrans projEmplTrans = this.postProjTransactionHour_InitializeProjEmplTrans();

        projEmplTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour_InitializeProjEmplTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjEmplTrans</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjEmplTrans</c> table buffer.
    /// </returns>
    protected ProjEmplTrans postProjTransactionHour_InitializeProjEmplTrans()
    {
        ProjEmplTrans projEmplTrans;

        projEmplTrans.TransDate             = this.ProjTransDate;
        projEmplTrans.ProjId                = this.ProjId;
        projEmplTrans.ActivityNumber        = this.ActivityNumber;
        projEmplTrans.CategoryId            = this.ProjCategoryId;

        projEmplTrans.Resource              = this.Resource;
        projEmplTrans.ResourceCategory      = this.ResourceCategory;
        projEmplTrans.LinePropertyId        = this.LinePropertyId;
        projEmplTrans.TransId               = this.TransId;
        projEmplTrans.TransIdRef            = this.TransId;
        projEmplTrans.VoucherJournal        = this.Voucher;
        projEmplTrans.Txt                   = this.Txt;
        projEmplTrans.TransactionOrigin     = ProjOrigin::BeginningBalance;
        projEmplTrans.Qty                   = this.Quantity;
        projEmplTrans.CurrencyId            = this.ProjSalesCurrencyId;
        projEmplTrans.TaxGroupId            = this.ProjTaxGroupId;
        projEmplTrans.TaxItemGroupId        = this.ProjTaxItemGroupId;

        projEmplTrans.DefaultDimension       = this.DefaultDimension;

        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour_ProjEmplTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjEmplTransCost</c> record.
    /// </summary>
    protected void postProjTransactionHour_ProjEmplTransCost()
    {
        ProjEmplTransCost projEmplTransCost = this.postProjTransactionHour_InitializeProjEmplTransCost();

        projEmplTransCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour_InitializeProjEmplTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjEmplTransCost</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjEmplTransCost</c> table buffer.
    /// </returns>
    protected ProjEmplTransCost postProjTransactionHour_InitializeProjEmplTransCost()
    {
        ProjEmplTransCost projEmplTransCost;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projEmplTransCost.TransId           = this.TransId;
        projEmplTransCost.LedgerTransdate   = this.ProjTransDate;
        projEmplTransCost.CostPrice         = this.CostPrice;
        projEmplTransCost.LedgerStatusCost  = this.ProjLedgerCostStatus;
        projEmplTransCost.FundingSource     = this.ProjFundingSource;

        projEmplTransCost.LineAmount        = CurrencyExchangeHelper::amount(this.Quantity * this.CostPrice);
        projEmplTransCost.LedgerCostAmountMST  =  projEmplTransCost.LineAmount;

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projEmplTransCost.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projEmplTransCost.TransStatus   = ProjTransStatus::Posted;
        }
        projEmplTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projEmplTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour_ProjEmplTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjEmplTransSale</c> record.
    /// </summary>
    protected void postProjTransactionHour_ProjEmplTransSale()
    {
        ProjEmplTransSale projEmplTransSale = this.postProjTransactionHour_InitializeProjEmplTransSale();

        projEmplTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionHour_InitializeProjEmplTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjEmplTransSale</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjEmplTransSale</c> table buffer.
    /// </returns>
    protected ProjEmplTransSale postProjTransactionHour_InitializeProjEmplTransSale()
    {
        ProjEmplTransSale projEmplTransSale;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projEmplTransSale.TransId           = this.TransId;
        projEmplTransSale.LedgerTransdate   = this.ProjTransDate;
        projEmplTransSale.LedgerSalesPosted = this.ProjAccruable;
        if (projEmplTransSale.LedgerSalesPosted)
        {
            projEmplTransSale.LedgerSalesAmount = this.ProjSalesAmount;
        }
        projEmplTransSale.FundingSource     = this.ProjFundingSource;
        projEmplTransSale.SalesPrice        = this.SalesPrice;
        projEmplTransSale.LineAmount        = CurrencyExchangeHelper::amount(this.SalesPrice * this.Quantity, this.ProjSalesCurrencyId);

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projEmplTransSale.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projEmplTransSale.TransStatus   = ProjTransStatus::Posted;
        }
        projEmplTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projEmplTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project transactions related to Item.
    /// </summary>
    /// <param name = "_inventTransId">
    /// The inventory transaction Id.
    /// </param>
    /// <param name = "_projAdjustRefId">
    /// The project adjustment number.
    /// </param>
    /// <returns>
    /// true if the posting completes successfully; otherwise, false.
    /// </returns>
    protected boolean postProjTransactionItem(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        boolean ret = false;

        ttsbegin;

        ProjItemTrans projItemTrans = this.postProjTransactionItem_ProjItemTrans(_inventTransId, _projAdjustRefId);

        this.postProjTransactionItem_ProjItemTransCost(projItemTrans);

        this.postProjTransactionItem_ProjItemTransSale();

        ret = true;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem_ProjItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjItemTrans</c> record.
    /// </summary>
    /// <param name = "_inventTransId">
    /// The inventory transaction Id.
    /// </param>
    /// <param name = "_projAdjustRefId">
    /// The project adjustment number.
    /// </param>
    /// <returns>
    /// An inserted <c>ProjItemTrans</c> record.
    /// </returns>
    protected ProjItemTrans postProjTransactionItem_ProjItemTrans(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        ProjItemTrans projItemTrans = this.postProjTransactionItem_InitializeProjItemTrans(_inventTransId, _projAdjustRefId);
        projItemTrans.insert();

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem_InitializeProjItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjItemTrans</c> record.
    /// </summary>
    /// <param name = "_inventTransId">
    /// The inventory transaction Id.
    /// </param>
    /// <param name = "_projAdjustRefId">
    /// The project adjustment number.
    /// </param>
    /// <returns>
    /// An initialized <c>ProjItemTrans</c> table buffer.
    /// </returns>
    protected ProjItemTrans postProjTransactionItem_InitializeProjItemTrans(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        ProjItemTrans projItemTrans;

        projItemTrans.TransDate             = this.ProjTransDate;
        projItemTrans.ProjId                = this.ProjId;
        projItemTrans.ActivityNumber        = this.ActivityNumber;
        projItemTrans.CategoryId            = this.ProjCategoryId;

        projItemTrans.ItemId                = this.ItemId;
        projItemTrans.LinePropertyId        = this.LinePropertyId;
        projItemTrans.ProjTransId           = this.TransId;
        projItemTrans.ProjTransIdRef        = this.TransId;
        projItemTrans.InventTransId         = _inventTransId;
        projItemTrans.ProjAdjustRefId       = _projAdjustRefId;
        projItemTrans.VoucherPackingSlip    = this.Voucher;
        projItemTrans.Txt                   = this.Txt;
        projItemTrans.TransactionOrigin     = ProjOrigin::BeginningBalance;
        projItemTrans.Qty                   = this.Quantity;
        projItemTrans.CurrencyId            = this.ProjSalesCurrencyId;
        projItemTrans.TaxGroupId            = this.ProjTaxGroupId;
        projItemTrans.TaxItemGroupId        = this.ProjTaxItemGroupId;
        projItemTrans.DefaultDimension      = this.DefaultDimension;
        projItemTrans.InventDimId           = InventDim::findOrCreateBlank().InventDimId;
        projItemTrans.SalesUnit             = '';

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem_ProjItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjItemTransCost</c> record.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record.
    /// </param>
    protected void postProjTransactionItem_ProjItemTransCost(ProjItemTrans _projItemTrans)
    {
        ProjItemTransCost projItemTransCost = this.postProjTransactionItem_InitializeProjItemTransCost(_projItemTrans);
        projItemTransCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem_InitializeProjItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjItemTransCost</c> record.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record.
    /// </param>
    /// <returns>
    /// An initialized <c>ProjItemTransCost</c> table buffer.
    /// </returns>
    protected ProjItemTransCost postProjTransactionItem_InitializeProjItemTransCost(ProjItemTrans _projItemTrans)
    {
        ProjItemTransCost projItemTransCost;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projItemTransCost.InventTransId     = _projItemTrans.InventTransId;
        projItemTransCost.ProjAdjustRefId   = _projItemTrans.ProjAdjustRefId;
        projItemTransCost.LedgerTransdate   = this.ProjTransDate;
        projItemTransCost.LedgerStatusCost  = this.ProjLedgerCostStatus;
        projItemTransCost.FundingSource     = this.ProjFundingSource;

        projItemTransCost.LineAmount            = CurrencyExchangeHelper::amount(this.Quantity * this.CostPrice);
        projItemTransCost.LedgerCostAmountMST   =  projItemTransCost.LineAmount;
        projItemTransCost.AmountMST             = CurrencyExchangeHelper::mstAmount(this.Quantity * this.CostPrice, CompanyInfoHelper::standardCurrency(), this.TransDate);

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projItemTransCost.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projItemTransCost.TransStatus   = ProjTransStatus::Posted;
        }
        projItemTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        projItemTransCost.ProjId            = _projItemTrans.ProjId;
        projItemTransCost.ItemType          = ProjItemTrans::transactionOriginToItemType(_projItemTrans.TransactionOrigin);
        projItemTransCost.CostType          = ProjItemTransCostType::Cost;
        projItemTransCost.Voucher           = _projItemTrans.VoucherPackingSlip;

        return projItemTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem_ProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjItemTransSale</c> record.
    /// </summary>
    protected void postProjTransactionItem_ProjItemTransSale()
    {
        ProjItemTransSale projItemTransSale = this.postProjTransactionItem_InitializeProjItemTransSale();
        projItemTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjTransactionItem_InitializeProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjItemTransSale</c> record.
    /// </summary>
    /// <returns>
    /// An initialized <c>ProjItemTransSale</c> table buffer.
    /// </returns>
    protected ProjItemTransSale postProjTransactionItem_InitializeProjItemTransSale()
    {
        ProjItemTransSale projItemTransSale;
        ProjFundingSource projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

        projItemTransSale.ProjTransId       = this.TransId;
        projItemTransSale.LedgerTransdate   = this.ProjTransDate;
        projItemTransSale.LedgerSalesPosted = this.ProjAccruable;
        if (projItemTransSale.LedgerSalesPosted)
        {
            projItemTransSale.LedgerSalesAmount = this.ProjSalesAmount;
        }
        projItemTransSale.FundingSource     = this.ProjFundingSource;
        projItemTransSale.SalesPrice        = this.SalesPrice;
        projItemTransSale.LineAmount        = CurrencyExchangeHelper::amount(this.SalesPrice * this.Quantity, this.ProjSalesCurrencyId);

        if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced)
        {
            projItemTransSale.TransStatus   = ProjTransStatus::Invoiced;
        }
        else if (this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Posted)
        {
            projItemTransSale.TransStatus   = ProjTransStatus::Posted;
        }
        projItemTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.DefaultDimension, projFundingSource.DefaultDimension);

        return projItemTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    public boolean postTrans()
    {
        ProjBudgetTransaction           projBudgetTransaction;
        ProjBudgetTransactionManager    projBudgetTransactionManager;
        ProjTrans                       projTrans = ProjTrans::construct(this);
        boolean                         ret = false;
        ProjForecastReduce              projForecastReduce;
        InventTransId                   inventTransId;
        ProjAdjustRefId                 projAdjustRefId;

        ttsbegin;

        if (this.ProjTransType == BegBalProjTransTypeCost::Item)
        {
            inventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            projAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }

        ret = this.postProjLedger(inventTransId, projAdjustRefId);
        ret = ret && this.postProjTransaction(inventTransId, projAdjustRefId);

        if (ret && ProjTable::find(projTrans.projId()).UseBudgeting)
        {
            projBudgetTransaction = ProjBudgetTransaction::construct(this);
            projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
            projBudgetTransactionManager.parmSupressMessages(true);
            ret = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
        }
        else if (ret)
        {
            boolean hasForecast = false;
            switch (this.ProjTransType)
            {
                case  BegBalProjTransTypeCost::Item:

                    ForecastSales forecastSales;
                    select firstonly RecId from forecastSales
                        where forecastSales.ItemId == this.itemId
                            && forecastSales.ProjId == projTrans.projId();
                    if (forecastSales.RecId)
                    {
                        hasForecast = true;
                    }
                    break;

                case  BegBalProjTransTypeCost::Hour:

                    ProjForecastEmpl projForecastEmpl;
                    select firstonly RecId from projForecastEmpl
                        where projForecastEmpl.CategoryId == this.ProjCategoryId
                            && projForecastEmpl.ProjId == projTrans.projId();
                    if (projForecastEmpl.RecId)
                    {
                        hasForecast = true;
                    }
                    break;

                case BegBalProjTransTypeCost::Cost:

                    ProjForecastCost projForecastCost;
                    select firstonly RecId from projForecastCost
                        where projForecastCost.CategoryId == this.ProjCategoryId
                            && projForecastCost.ProjId == projTrans.projId();
                    if (projForecastCost.RecId)
                    {
                        hasForecast = true;
                    }
                    break;
                default :
                    hasForecast = this.hasCustomTypeProjForecast();
            }

            if (hasForecast)
            {
                projForecastReduce = ProjForecastReduce::newProjPost(projTrans,
                                                        projTrans.qty(),
                                                        projTrans.transCost());
                projForecastReduce.parmProjTransId(this.TransId);
                projForecastReduce.run();
            }
        }

        if (!ret)
        {
            throw Global::error(strFmt("@SYS309459", enum2str(this.ProjTransType), this.ProjCategoryId, this.ProjSalesAmount, this.ProjTransDate));
        }
        else
        {
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustomTypeProjForecast</Name>
				<Source><![CDATA[
    protected boolean hasCustomTypeProjForecast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project journal that contains the journal line.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The desired project journal.
    /// </returns>
    public ProjJournalTable projJournalTable(boolean _forUpdate = false)
    {
        return ProjJournalTable::find(this.JournalId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostAmount</Name>
				<Source><![CDATA[
    private void setCostAmount()
    {
        this.CostAmount = this.Quantity * this.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the cost status on modifying of current line property.
    /// </summary>
    /// <param name = "set">
    ///     An boolean value to check whether cost status need to be assign or not.
    /// </param>
    /// <param name = "checkAndInfolog">
    ///     A boolean value to notify the change is going to be made for cost status.
    /// </param>
    protected void setCostStatus(boolean set, boolean checkAndInfolog)
    {
        ProjTable           projTable           = ProjTable::find(this.ProjId);
        ProjLedgerStatus    projLedgerStatus;

        if (!(ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(this.ProjId), ProjBegBalJournalTrans_CostSales::begBalTransType2ProjTransType(this.ProjTransType)) || projTable.Type == ProjType::Investment))
        {
            return;
        }

        if (!this.ProjId || !this.LinePropertyId)
        {
            return;
        }

        try
        {
            projLedgerStatus = this.defaultCostStatus();
        }
        catch(Exception::Error)
        {
            infolog.clear();
            return;
        }

        if (checkAndInfolog && this.ProjLedgerCostStatus != projLedgerStatus)
        {
            info("@SYS305908");
        }

        if (set)
        {
            this.ProjLedgerCostStatus = projLedgerStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpenseCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the cost price of the project journal line for Expense transactions.
    /// </summary>
    /// <remarks>
    ///    The cost price is set with the corresponding expense cost price set up in the <c>ProjCostPriceExpense</c> table for the employee, project, category, and project transaction date associated
    ///    to the journal line.
    /// </remarks>
    public void setExpenseCostPrice()
    {
        ProjPriceParameters priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
			this.ProjId,
            this.Resource,
            this.ProjCategoryId,
            this.ProjTransDate);
        this.CostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpenseSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sales price of the project journal line for Expense transactions.
    /// </summary>
    /// <returns>
    /// true if the price is found; otherwise, false.
    /// </returns>
    public boolean setExpenseSalesPrice()
    {
        boolean     priceFound = false;

        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
			this.ProjId,
            this.Resource,
            this.ProjCategoryId,
            this.CostPrice,
            CompanyInfoHelper::standardCurrency(),
            this.ProjSalesCurrencyId,
            this.TransDate);
        [this.SalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);

        return priceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cost price of the project journal line for Hour transactions.
    /// </summary>
    /// <remarks>
    /// The cost price is set with the hour cost price set up in the <c>ProjHourCostPrice</c> table for the
    /// employee, project, category, line property, and project transaction date associated with the
    /// journal line.
    /// </remarks>
    public void setHourCostPrice()
    {
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
			this.ProjId ,
            this.Resource,
            this.ProjCategoryId,
            this.LinePropertyId,
            this.ProjTransDate,
            '',
            '',
            '',
            this.ResourceCategory);
        this.CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sales price of the project journal line for Hour transactions.
    /// </summary>
    /// <returns>
    ///    true if the price found; otherwise, false.
    /// </returns>
    public boolean setHourSalesPrice()
    {
        boolean     priceFound = false;

        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
			this.ProjId,
			this.Resource,
			this.ProjCategoryId,
			this.LinePropertyId,
			this.CostPrice,
			CompanyInfoHelper::standardCurrency(),
			DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
			'',
			'',
			'',
			this.ResourceCategory);
        [this.SalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);

        return priceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the cost price of the project journal line for Item transactions.
    /// </summary>
    void setInventCostPrice()
    {
        InventItemPrice inventItemPrice;

        select PriceUnit, Price from inventItemPrice where inventItemPrice.ItemId == this.ItemId
            && inventItemPrice.PriceType == CostingVersionPriceType::Cost
            && inventItemPrice.CostingType == InventItemCostingType::Default;
        this.Quantity = inventItemPrice.PriceUnit;
        this.CostPrice = inventItemPrice.Price;
        this.CostAmount = this.Quantity * this.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sales price of the project journal line for Item transactions.
    /// </summary>
    void setInventSalesPrice()
    {
        InventItemPrice inventItemPrice;

        select firstonly PriceUnit, Price from inventItemPrice where inventItemPrice.ItemId == this.ItemId
            && inventItemPrice.PriceType == CostingVersionPriceType::Sales
            && inventItemPrice.CostingType == InventItemCostingType::Default;

        this.Quantity = inventItemPrice.PriceUnit;
        this.SalesPrice = inventItemPrice.Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the line property of the project journal line.
    /// </summary>
    /// <remarks>
    ///    The line property is set to the line property set up in the <c>ProjLinePropertySetup</c> table to cover the project and category associated to the journal line.
    /// </remarks>
    public void setLineProperty()
    {
        if (!this.LinePropertyId || (this.LinePropertyId && this.LinePropertyId != ProjJournalTable::find(this.JournalId).LinePropertyId))
        {
            this.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimension for the journal line with the project default dimension.
    /// </summary>
    private void setProjectDimensionDefault()
    {
        if (this.ProjId)
        {
            this.DefaultDimension = ProjTable::find(this.ProjId).DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
    {
        this.ResourceCategory = ResourceFacade::getResourceCategory(this.Resource,
        (this.ProjTransDate ? this.ProjTransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesAmount</Name>
				<Source><![CDATA[
    private void setSalesAmount()
    {
        if (this.ProjTransDate && this.ProjSalesCurrencyId)
        {
            this.ProjSalesAmount = CurrencyExchangeHelper::amountCur2MST(this.SalesPrice * this.Quantity, this.ProjSalesCurrencyId, 0, this.ProjTransDate);
        }
        else
        {
            this.ProjSalesAmount = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjTrans   projTransOriginal;
        ProjTrans   projTransNew;

        projTransOriginal = ProjTrans::construct(this.orig());
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTransOriginal, ProjFundingLimitTrackingAction::Release);

        super();

        projTransNew = ProjTrans::construct(this);
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTransNew, ProjFundingLimitTrackingAction::Allocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a specified field.
    /// </summary>
    /// <param name="p1">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value of the field passed in as a parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId p1)
    {
        boolean         ret;

        ret = super(p1);

        switch (p1)
        {
            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjId):
                ret = ret && this.checkProjId();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ProjCategoryId):
                ret = ret && this.checkCategoryId();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ItemId):
                ret = ret && this.checkResource();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, Resource):
                ret = this.resourceExists(this.validateResourceInCurrentCompanyOnly());
                ret = ret && this.checkResource();
                break;

            case fieldNum(ProjBegBalJournalTrans_CostSales, ActivityNumber):
                ret = ret && this.checkActivity();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResourceInCurrentCompanyOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the resource validation to perform only in the current company.
    /// </summary>
    /// <returns>
    ///     true if the resource should validate only in the current company; otherwise, false.
    /// </returns>
    protected boolean validateResourceInCurrentCompanyOnly()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the transaction resource exists.
    /// </summary>
    /// <param name = "_inCurrentCompanyOnly">
    ///     A Boolean value that indicate whether to check resource only in the current company; optional.
    /// </param>
    /// <returns>
    ///     true if the transaction resource exists; otherwise, false.
    /// </returns>
    protected boolean resourceExists(boolean _inCurrentCompanyOnly = true)
    {
        boolean ret;

        if (_inCurrentCompanyOnly)
        {
            ret = ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
        }
        else
        {
            ret = ResourceFacade::exist(this.Resource);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current <c>ProjBegBalJournalTrans_CostSales</c> record before it is written to the database.
    /// </summary>
    /// <returns>
    ///    true if the current ProjJournal record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        ProjJournalTable    projJournalTable    = this.projJournalTable();
        boolean             journalExists       = projJournalTable.RecId != 0;
        boolean             ret;

        ret = super();

        if (projJournalTable.Posted)
        {
            return checkfailed(strFmt("@Proj:PostedJournalError", projJournalTable.JournalId));
        }

        switch (this.ProjTransType)
        {
            case BegBalProjTransTypeCost::Hour:
            case BegBalProjTransTypeCost::Cost:
                ret = ret && this.checkProjId() && this.checkCategoryId() && this.checkResource();
                ret = ret && ProjJournalTable::exist(this.JournalId);
                if (ret)
                {
                    ret = this.checkResourceAllowed();
                }
                break;
            default:
                ret = ret && this.checkProjId() && this.checkCategoryId() && this.checkResource();
                ret = ret && ProjJournalTable::exist(this.JournalId);
                if (ret)
                {
                    ret = this.checkResourceAllowed();
                }
        }

        ret = ret && this.checkActivity();
        if (ret)
        {
            ret = projValCheckTrans.validateMandatory(this);
        }

        if (ret && this.ProjFundingSource && this.ProjId && ProjFundingSource::find(this.ProjFundingSource).ContractId != ProjTable::find(this.ProjId).ProjInvoiceProjId)
        {
            ret = checkFailed("@SYS152804");
        }

        if (ret && ProjTable::find(this.ProjId).Type == ProjType::Time && this.ProjTransType == BegBalProjTransTypeCost::Hour && this.ProjLedgerCostStatus != ProjLedgerStatus::Never)
        {
            ret = checkFailed("@SYS152816");
        }

        if (ret && ProjTable::find(this.ProjId).Type == ProjType::Cost && this.ProjLedgerCostStatus != ProjLedgerStatus::Operations)
        {
            ret = checkFailed("@SYS152817");
        }

        if (ret && this.ProjLedgerCostStatus == ProjLedgerStatus::BalanceSheet && !ProjLineProperty::find(this.LinePropertyId).ToBeCapitalize)
        {
            ret = checkFailed("@SYS152818");
        }

        if (ret && this.ProjAccruable && !ProjLineProperty::find(this.LinePropertyId).ToBeAccrued)
        {
            ret = checkFailed("@SYS152819");
        }

        if (ret && this.ProjTransType != BegBalProjTransTypeCost::Hour && (this.ProjLedgerCostStatus == ProjLedgerStatus::Never || this.ProjLedgerCostStatus == ProjLedgerStatus::None))
        {
            ret = checkFailed("@SYS152820");
        }

        if (ret && this.ProjTransStatusPostedInvoiced == ProjTransStatusPostedInvoiced::Invoiced && !ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced)
        {
            ret = checkFailed("@SYS152821");
        }

        if (ret &&
            this.ProjFundingSource == 0 &&
            (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(ProjTable::find(this.ProjId), ProjBegBalJournalTrans_CostSales::begBalTransType2ProjTransType(this.ProjTransType)) ||
            ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(this.ProjId), ProjBegBalJournalTrans_CostSales::begBalTransType2ProjTransType(this.ProjTransType))))
        {
            ret = checkFailed("@SYS303970");
        }

        ret = ret && this.resourceExists(this.validateResourceInCurrentCompanyOnly());

        // Validate limits
        ret = ret && this.checkFundingLimits();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>begBalTransType2ProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>BegBalTransTypeCost</c> enumeration value to a <c>ProjTransType</c> enumeration
    /// value.
    /// </summary>
    /// <param name="_begBalProjTransType">
    /// The <c>BegBalTransTypeCost</c> enumeration value to convert to a <c>ProjTransType</c> enumeration
    /// value.
    /// </param>
    /// <returns>
    /// The <c>ProjTransType</c> enumeration value.
    /// </returns>
    public static ProjTransType begBalTransType2ProjTransType(BegBalProjTransTypeCost  _begBalProjTransType)
    {
        ProjTransType projTransType;

        switch (_begBalProjTransType)
        {
            case BegBalProjTransTypeCost::Cost :
                projTransType = ProjTransType::Cost;
                break;

            case BegBalProjTransTypeCost::Hour :
                projTransType = ProjTransType::Hour;
                break;

            case BegBalProjTransTypeCost::Item :
                projTransType = ProjTransType::Item;
                break;

            default:
                projTransType = ProjTransType::None;
                break;
        }
        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransType2BegBalProjTransTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>ProjTransType</c> enumeration value to a <c>BegBalProjTransTypeCost</c> enumeration.
    /// value.
    /// </summary>
    /// <param name="_projTransType">
    /// The <c>ProjTransType</c> enumeration value. Supported options are : Cost, Hour, Item.
    /// value.
    /// </param>
    /// <returns>
    /// The <c>BegBalProjTransTypeCost</c> enumeration value.
    /// </returns>
    public static BegBalProjTransTypeCost projTransType2BegBalProjTransTypeCost(ProjTransType _projTransType)
    {
        BegBalProjTransTypeCost begBalProjTransTypeCost;

        switch (_projTransType)
        {
            case ProjTransType::Cost:
                begBalProjTransTypeCost = BegBalProjTransTypeCost::Cost;
                break;

            case ProjTransType::Hour:
                begBalProjTransTypeCost = BegBalProjTransTypeCost::Hour;
                break;

            case ProjTransType::Item:
                begBalProjTransTypeCost = BegBalProjTransTypeCost::Item;
                break;

            default:
                begBalProjTransTypeCost = BegBalProjTransTypeCost::None;

                break;
        }

        return begBalProjTransTypeCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record occurs in the <c>ProjBegBalJournalTrans_CostSales</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The unique ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!ProjBegBalJournalTrans_CostSales::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBegBalJournalTrans_CostSales::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjBegBalJournalTrans_CostSales</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     projBegBalJournalTrans_CostSales
                 where
                     projBegBalJournalTrans_CostSales.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBegBalJournalTrans_CostSales</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>ProjBegBalJournalTrans_CostSales</c> table buffer.
    /// </returns>
    public static ProjBegBalJournalTrans_CostSales find(
        RecId _recId,
        boolean                 _forupdate = false)
    {
        ProjBegBalJournalTrans_CostSales projBegBalJournalTrans_CostSales;

        projBegBalJournalTrans_CostSales.selectForUpdate(_forupdate);

        select firstonly
                projBegBalJournalTrans_CostSales
            where
                projBegBalJournalTrans_CostSales.RecId == _recId;

        return projBegBalJournalTrans_CostSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransIdAndProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBegBalJournalTrans_CostSales</c> table.
    /// </summary>
    /// <param name="_transId">
    /// Trans id on the record.
    /// </param>
    /// <param name="_projId">
    /// Proj id associated with the record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>ProjBegBalJournalTrans_CostSales</c> table buffer.
    /// </returns>
    public static ProjBegBalJournalTrans_CostSales findByTransIdAndProjId(ProjTransIdBase _transId, ProjId _projId, 
        boolean _forupdate = false)
    {
        ProjBegBalJournalTrans_CostSales projBegBalJournalTrans_CostSales;

        projBegBalJournalTrans_CostSales.selectForUpdate(_forupdate);

        select firstonly projBegBalJournalTrans_CostSales 
            where projBegBalJournalTrans_CostSales.TransId == _transId
                && projBegBalJournalTrans_CostSales.ProjId == _projId;

        return projBegBalJournalTrans_CostSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the label number to use when displaying a message to indicate that the record does not
    ///    exist.
    /// </summary>
    /// <returns>
    ///    A string that indicates the label number to use.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the next line number for the journal transaction line.
    /// </summary>
    /// <returns>
    /// An integer that indicates the next line number for a new transaction line.
    /// </returns>
    public static LineNum nextLineNum(ProjJournalId _projJournalId)
    {
        ProjBegBalJournalTrans_CostSales begBalJournalTrans;

        select maxof(LineNum) from begBalJournalTrans where begBalJournalTrans.JournalId == _projJournalId;

        return begBalJournalTrans.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124922</DeveloperDocumentation>
	<Label>@SYS135521</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>ProjCategoryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundingSourceRef</Name>
			<Label>@SYS128116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLedgerCostStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransStatusPostedInvoiced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAccruable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountProject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@SYS91933</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjAccruable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjAccruable</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS128116</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjLedgerCostStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLedgerCostStatus</ExtendedDataType>
			<EnumType>ProjLedgerStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransStatusPostedInvoiced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransStatusPostedInvoiced</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BegBalProjTransTypeCost</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyHours</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Label>@SYS16658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalTransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjFundingSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Item</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124923</EntityRelationshipRole>
			<RelatedTable>ProjActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory_Expense</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBeginningBalanceJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryHour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory_Hour</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBeginningBalanceJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory_Item</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBeginningBalanceJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProjJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>projJournalTxt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124924</EntityRelationshipRole>
			<RelatedTable>ProjJournalTxt</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Txt</Name>
					<Field>Txt</Field>
					<RelatedField>Txt</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTransTypeCostWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_ExpenseTrx</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Worker</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Cost</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTransTypeEmplWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_Hours</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Worker</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Hour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTransTypeItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_ItemTrx</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Item</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Item</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBegBalJournalTrans_CostSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTransTypeCostResource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTransTypeCostResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Cost</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTransTypeEmplResource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTransTypeEmplResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>BegBalProjTransTypeCost::Hour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>