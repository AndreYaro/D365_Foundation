<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkTemplateGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkTemplateGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayFieldName</Name>
				<Source><![CDATA[
	/// <summary>
	/// Method to display the underlying field name
	/// </summary>
	/// <returns>
	/// The underlying field name in the record.
	/// </returns>
    public display FieldName displayFieldName()
    {
        int arrayIndex = fieldExt2Idx(this.GroupFieldId);
        int idx = arrayIndex ? arrayIndex : 1;
        return fieldId2PName(this.GroupTableId, this.GroupFieldId, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTableName</Name>
				<Source><![CDATA[
	/// <summary>
	/// Method to display underlying table name.
	/// </summary>
	/// <returns>
	/// The underlying table name.
	/// </returns>
    public display TableName displayTableName()
    {
        return tableId2PName(this.GroupTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
	public void update()
    {
        WHSWorkTemplateGroup    workTemplateGroup;

        if (this.WorkGroupBy)
        {
            this.setGroupByInRelatedRecords();
        }
        else
        {
            workTemplateGroup.skipDataMethods(true);
            update_recordset workTemplateGroup
                setting WorkGroupBy = NoYes::No
                where workTemplateGroup.RefRecId    == this.RefRecId    &&
                      workTemplateGroup.LineNum      > this.LineNum;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroups</Name>
				<Source><![CDATA[
	/// <summary>
    /// Create work template groups for a work template
    /// </summary>
    /// <param name="_refRecId">
    /// RecId of the <c>WHSWorkTemplateTable</c> record for which work template group should be created
    /// </param>
    /// <param name="_queryRun">
    /// Query based on which the template group records should be created
    /// </param>
    /// <param name="_fieldsToGroup">
    /// fields that the template should be already grouped by at creation time; optional
    /// </param>
    public static void createGroups(
		RefRecId	_refRecId,
		QueryRun	_queryRun,
		Map			_fieldsToGroup	= null)
    {
        if (_queryRun)
        {
            ttsbegin;

            WHSWorkTemplateGroup workTemplateGroup;

            delete_from workTemplateGroup
                where workTemplateGroup.RefRecId == _refRecId;
   
            LineNum	lineNum;
            int		sortCount	= _queryRun.query().orderByFieldCount();

            for (int i = 1; i <= sortCount; ++i)
            {
				QueryOrderByField qobf = _queryRun.query().orderByField(i);

                if (qobf)
                {
                    ++lineNum;
                    workTemplateGroup = WHSWorkTemplateGroup::find(_refRecId, qobf.dataSource().table(), qobf.fieldID(), true);
                    workTemplateGroup.clear();
                    workTemplateGroup.LineNum       = lineNum;
                    workTemplateGroup.RefRecId      = _refRecId;
                    workTemplateGroup.GroupTableId  = qobf.dataSource().table();
                    workTemplateGroup.GroupFieldId  = qobf.fieldID();
                    if (_fieldsToGroup && (_fieldsToGroup.exists([workTemplateGroup.GroupTableId, workTemplateGroup.GroupFieldId])))
                    {
                        workTemplateGroup.WorkGroupBy = NoYes::Yes;
                    }
                    workTemplateGroup.insert();
                    workTemplateGroup.setGroupByInRelatedRecords();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkTemplateGroup</c> record exists.
	/// </summary>
	/// <param name="_refRecId">
	/// Referenced record id of the record.
	/// </param>
	/// <param name="_groupTableId">
	/// Table id of the record.
	/// </param>
	/// <param name="_groupFieldId">
	/// Field id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(
		RefRecId    _refRecId,
        RefTableId  _groupTableId,
        RefFieldId	_groupFieldId)

    {
        return (_refRecId && _groupTableId && _groupFieldId) &&
               (select firstonly RecId from whsWorkTemplateGroup
                where whsWorkTemplateGroup.RefRecId         == _refRecId        &&
                      whsWorkTemplateGroup.GroupTableId     == _groupTableId    &&
                      whsWorkTemplateGroup.GroupFieldId     == _groupFieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSWorkTemplateLineGroup</c> record exists for the specified referenced record id.
    /// </summary>
    /// <param name="_refRecId">
    /// Referenced record id of the record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise false.
    /// </returns>
    public static boolean existByRefRecId(RefRecId _refRecId)
    {
        return _refRecId
            && (select firstonly RecId from whsWorkTemplateGroup
                where whsWorkTemplateGroup.RefRecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkTemplateGroup</c> record with given parameters.
	/// </summary>
	/// <param name="_refRecId">
	/// Referenced record id of the record.
	/// </param>
	/// <param name="_groupTableId">
	/// Table id of the record.
	/// </param>
	/// <param name="_groupFieldId">
	/// Field id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkTemplateGroup find(
		RefRecId    _refRecId,
        RefTableId	_groupTableId,
        RefFieldId  _groupFieldId,
        boolean     _forupdate		= false)
    {
        WHSWorkTemplateGroup    workTemplateGroup;

        if (_refRecId && _groupTableId && _groupFieldId)
        {
            workTemplateGroup.selectForUpdate(_forupdate);

            select firstonly workTemplateGroup
                where workTemplateGroup.RefRecId        == _refRecId        &&
                      workTemplateGroup.GroupTableId    == _groupTableId    &&
                      workTemplateGroup.GroupFieldId    == _groupFieldId;
        }

        return workTemplateGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a work template is being grouped by the field specified.
    /// </summary>
    /// <param name="_refRecId">
    /// RecId of the work template.
    /// </param>
    /// <param name="_groupTableId">
    /// Table Id of the table which holds the field being checked.
    /// </param>
    /// <param name="_groupFieldId">
    /// The field Id being checked.
    /// </param>
    /// <returns>
    /// true if the work template is being grouped on the field specified; otherwise, false.
    /// </returns>
    public static boolean isGroupedBy(
		RefRecId    _refRecId,
        RefTableId  _groupTableId,
        RefFieldId	_groupFieldId)

    {
        return (_refRecId && _groupTableId && _groupFieldId) &&
               (select firstonly whsWorkTemplateGroup
                where whsWorkTemplateGroup.RefRecId         == _refRecId        &&
                      whsWorkTemplateGroup.GroupTableId     == _groupTableId    &&
                      whsWorkTemplateGroup.GroupFieldId     == _groupFieldId    &&
                      whsWorkTemplateGroup.WorkGroupBy      == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupByInRelatedRecords</Name>
				<Source><![CDATA[
    private void setGroupByInRelatedRecords()
    {
        WHSWorkTemplateGroup workTemplateGroup;

        workTemplateGroup.skipDataMethods(true);
        update_recordset workTemplateGroup
            setting WorkGroupBy = NoYes::Yes
              where workTemplateGroup.RefRecId    == this.RefRecId
                &&  workTemplateGroup.LineNum      < this.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4513</DeveloperDocumentation>
	<Label>@WAX1156</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>GroupTableId</TitleField1>
	<TitleField2>GroupFieldId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RefRecIdLineNumIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RefRecIdLineNumIdx</PrimaryIndex>
	<ReplacementKey>RefRecIdLineNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkGroupBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkGroupBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkGroupBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkGroupBy</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdGroupTableIdGroupFieldId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupFieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSWorkTemplateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkTemplateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>