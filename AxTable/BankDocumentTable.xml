<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankDocumentTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document status enumeration.
    /// </summary>
    /// <returns>
    /// The document status.
    /// </returns>
    public BankDocumentStatus getBankDocumentStatus()
    {
        BankDocumentStatus status;

        if (this.IsReconciled && this.IsCancelled)
        {
            status = BankDocumentStatus::ReconciledAndCancelled;
        }
        else if (this.IsReconciled && !this.IsCancelled)
        {
            status = BankDocumentStatus::Reconciled;
        }
        else if (!this.IsReconciled && this.IsCancelled)
        {
            status = BankDocumentStatus::Cancelled;
        }
        else
        {
            status = BankDocumentStatus::None;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentTableMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document map.
    /// </summary>
    /// <returns>
    /// The bank document map.
    /// </returns>
    public BankDocumentTableMap getBankDocumentTableMap()
    {
        const str BankDocumentTableCache = 'BankDocumentTableCache';

        SysGlobalCache cache = classFactory.globalCache();
        str cacheKey = curExt() + int642Str(this.SourceRelationType);

        BankDocumentTableMap bankDocumentTableMap;
        if (cache.isSet(BankDocumentTableCache, this.SourceRelationType))
        {
            bankDocumentTableMap = cache.get(BankDocumentTableCache, cacheKey);
        }
        else
        {
            DictTable dictTable = new DictTable(this.SourceRelationType);
            bankDocumentTableMap = dictTable.makeRecord();
            cache.set(BankDocumentTableCache, cacheKey, bankDocumentTableMap);
        }

        select firstonly bankDocumentTableMap
            where bankDocumentTableMap.RecId == this.SourceRecId;

        return bankDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectionBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets correction amount.
    /// </summary>
    /// <returns>
    /// The correction amount.
    /// </returns>
    public BankReconciliationCorrectionAmount getCorrectionBankCurrencyAmount()
    {
        return this.CorrectionBankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matching statement line.
    /// </summary>
    /// <returns>
    /// The matching statement line.
    /// </returns>
    public BankStmtISOReportEntry getMatchingStatementLine()
    {
        BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByDocumentRecId(this.RecId);

        BankStmtISOReportEntry statementLine;
        BankReconciliationMatchingItem matchingItemStatement;

        select firstOnly statementLine
        exists join matchingItemStatement
            where matchingItemStatement.BankStmtISOReportEntry == statementLine.RecId
                && matchingItemStatement.BankReconciliationMatching == matchingItem.BankReconciliationMatching;

        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecentMatchingStatementLine</Name>
				<Source><![CDATA[
    internal BankStmtISOReportEntry getRecentMatchingStatementLine()
    {
        BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByDocumentRecId(this.RecId);

        BankStmtISOReportEntry statementLine;
        BankReconciliationMatchingItem matchingItemStatement;

        select firstOnly statementLine
            order by BookingDateTime desc
            exists join matchingItemStatement
                where matchingItemStatement.BankStmtISOReportEntry == statementLine.RecId
                    && matchingItemStatement.BankReconciliationMatching == matchingItem.BankReconciliationMatching;

        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWithCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the bank document is with correction amount.
    /// </summary>
    /// <returns>
    /// True if the bank document is with correction amount; otherwise, false.
    /// </returns>
    public boolean isWithCorrection()
    {
        boolean result = false;

        if (this.CorrectionBankCurrencyAmount != 0)
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bank document status.
    /// </summary>
    /// <param name="_status">
    /// The bank document status.
    /// </param>
    public void setBankDocumentStatus(BankDocumentStatus _status)
    {
        boolean isCancelled;
        boolean isReconciled;

        switch (_status)
        {
            case BankDocumentStatus::None:
                isCancelled = false;
                isReconciled = false;
                break;
            case BankDocumentStatus::Reconciled:
                isCancelled = false;
                isReconciled = true;
                break;
            case BankDocumentStatus::Cancelled:
                isCancelled = true;
                isReconciled = false;
                break;
            case BankDocumentStatus::ReconciledAndCancelled:
                isCancelled = true;
                isReconciled = true;
                break;
        }

        this.IsCancelled = isCancelled;
        this.IsReconciled = isReconciled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified record exists in the <c>BankDocumentTable</c> table; if not, an
    ///     error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>BankDocumentTable</c> record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!BankDocumentTable::exist(_recId))
        {
            isExisting = checkFailed(strFmt("@SYS102169", _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BankDocumentTable</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankDocumentTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        BankDocumentTable document;

        select firstonly RecId from document
            where document.RecId == _recId;

        return document != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BankDocumentTable</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankDocumentTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankDocumentTable</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentTable find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankDocumentTable document;

        document.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            document.concurrencyModel(_concurrencyModel);
        }

        select firstonly document
            where document.RecId == _recId;

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BankDocumentTable</c> table with a specified source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table ID.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankDocumentTable</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentTable findBySource(
        TableId   _sourceTableId,
        RefRecId    _sourceRecId,
        boolean     _forUpdate = false)
    {
        BankDocumentTable document;

        document.selectForUpdate(_forUpdate);

        select firstonly document
            where document.SourceRelationType   == _sourceTableId
                && document.SourceRecId         == _sourceRecId;

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the message to use when a specific record in the <c>BankDocumentTable</c> table does not exist.
    /// </summary>
    /// <returns>
    ///     A message that states that a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorrectionBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the correction amount.
    /// </summary>
    /// <param name="_recId">
    /// The bank document record id.
    /// </param>
    /// <param name="_correctionAmount">
    /// The correction amount.
    /// </param>
    public static void updateCorrectionBankCurrencyAmount(
        RecId       _recId,
        AmountCur   _correctionAmount)
    {
        BankDocumentTable bankDocumentTable;

        bankDocumentTable = BankDocumentTable::find(_recId, true);
        if (bankDocumentTable)
        {
            ttsBegin;

            if (bankDocumentTable.CorrectionBankCurrencyAmount != _correctionAmount)
            {
                bankDocumentTable.CorrectionBankCurrencyAmount = _correctionAmount;
                bankDocumentTable.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221729</DeveloperDocumentation>
	<Label>@GLS221638</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>BankDocumentBookType</TitleField1>
	<TitleField2>IsReconciled</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsReconciled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCancelled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cancelled</Name>
			<Label>@SYS1068</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsCancelled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reconciled</Name>
			<Label>@SYS68025</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsReconciled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionBankCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankDocumentBookType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>BankDocumentBookType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CorrectionBankCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationCorrectionAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCancelled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentCancelled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReconciled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentReconciled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Label>@SYS2720</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceRelation</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRelationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsReconciled</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsReconciled</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRelationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsCancelled</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BankDocumentTableView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankDocumentTableView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>BankDocumentTableRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>