<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllCalendarDatesToTemporaryBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the temporary records to the <c>WorkCalendarDate</c> table buffer for all the dates in the
    /// specified interval.
    /// </summary>
    /// <param name="_workCalendarDateTmp">
    /// The temporary table buffer to which to add records.
    /// </param>
    /// <param name="_fromDate">
    /// The first date of the interval.
    /// </param>
    /// <param name="_toDate">
    /// The last date of the interval.
    /// </param>
    [SuppressBPWarningAttribute('BPErrorSelectUsingFirstOnly', 'The selected buffer is iterated')]
    public void addAllCalendarDatesToTemporaryBuffer(WorkCalendarDate _workCalendarDateTmp, date _fromDate, date _toDate)
    {
        WorkCalendarDate            workCalendarDate;
        WrkCtrResourceCalendar      wrkCtrResourceCalendar;
        TransDate                   transDate = _fromDate - 1;

        void insertTemp(CalendarId _calendarId, TransDate _transDate, WorkTimeControl _workTimeControl, boolean _closedForPickup)
        {
            WorkCalendarDate    workCalendarDateNew;

            workCalendarDateNew.setTmp();
            workCalendarDateNew.setTmpData(_workCalendarDateTmp);

            workCalendarDateNew.CalendarId      = _calendarId;
            workCalendarDateNew.TransDate       = _transDate;
            workCalendarDateNew.WorkTimeControl = _workTimeControl;
            workCalendarDateNew.ClosedForPickup = _closedForPickup;
            workCalendarDateNew.doInsert();
        }

        while select validTimeState(_fromDate, _toDate) workCalendarDate
            order by TransDate
            where workCalendarDate.TransDate    >= _fromDate
                && workCalendarDate.TransDate    <= _toDate
            exists join wrkCtrResourceCalendar
                where wrkCtrResourceCalendar.WrkCtrId              == this.WrkCtrId
                    && wrkCtrResourceCalendar.ValidFrom             <= workCalendarDate.TransDate
                    && wrkCtrResourceCalendar.ValidTo               >= workCalendarDate.TransDate
                    && wrkCtrResourceCalendar.CalendarId            == workCalendarDate.CalendarId
        {
            // Create missing records in front of the current record
            while (workCalendarDate.TransDate > transDate + 1)
            {
                transDate++;
                insertTemp('', transDate, WorkTimeControl::Closed, true);
            }

            insertTemp(workCalendarDate.CalendarId, workCalendarDate.TransDate, workCalendarDate.WorkTimeControl, workCalendarDate.ClosedForPickup);
            transDate = workCalendarDate.TransDate;
        }

        // Create missing records in front of the current record
        while (transDate < _toDate)
        {
            transDate++;
            insertTemp('', transDate, WorkTimeControl::Closed, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefinedCalendarDatesToTemporaryBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the temporary records to the <c>WorkCalendarDate</c> table buffer for all the dates in the
    /// specified interval where the resource has defined a calendar.
    /// </summary>
    /// <param name="_workCalendarDateTmp">
    /// The temporary table buffer to which to add records.
    /// </param>
    /// <param name="_fromDate">
    /// The first date of the interval.
    /// </param>
    /// <param name="_toDate">
    /// The last date of the interval.
    /// </param>
    public void addDefinedCalendarDatesToTemporaryBuffer(WorkCalendarDate _workCalendarDateTmp, date _fromDate, date _toDate)
    {
        WrkCtrResourceCalendar      wrkCtrResourceCalendar;
        WorkCalendarDate            workCalendarDateNew;

        // Create records for each date in the interval
        void createInterval(CalendarId _calendarId, date _validFrom, date _validTo)
        {
            TransDate transDate;

            transDate = max(_fromDate, _validFrom);
            while (transDate <= min(_toDate, _validTo))
            {
                workCalendarDateNew.CalendarId      = _calendarId;
                workCalendarDateNew.TransDate       = transDate;
                workCalendarDateNew.doInsert();

                transDate++;
            }
        }

        workCalendarDateNew.setTmp();
        workCalendarDateNew.setTmpData(_workCalendarDateTmp);

        while select validTimeState(_fromDate, _toDate) CalendarId, ValidFrom, ValidTo
            from wrkCtrResourceCalendar
            order by ValidFrom
            where wrkCtrResourceCalendar.WrkCtrId == this.WrkCtrId
        {
            createInterval(wrkCtrResourceCalendar.CalendarId, wrkCtrResourceCalendar.ValidFrom, wrkCtrResourceCalendar.ValidTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEmplVendorChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Employee and Vendor field is allowed to be changed
    /// </summary>
    /// <returns>
    /// true if the Resource Employee and Vendor field is allowed to be changed; otherwise, false.
    /// </returns>
    public boolean allowEmplVendorChange()
    {
        boolean ret = true;

        // Do not allow to change the empl or vendor if the resource current has or will have a group membership
        if (this.RecId && WrkCtrTable::resourceGroupResource(this.WrkCtrId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), maxDate()).RecId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowResourceTypeChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Resource Type is allowed to be changed
    /// </summary>
    /// <returns>
    /// true if the Resource Type is allowed to be changed; otherwise, false.
    /// </returns>
    public boolean allowResourceTypeChange()
    {
        boolean ret = true;

        // Do not allow to change the resource type if the resource ever had or will have a group membership
        if (this.RecId && WrkCtrTable::resourceGroupResource(this.WrkCtrId, dateNull(), maxDate()).RecId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowWorkerChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Resource Worker is allowed to be changed
    /// </summary>
    /// <returns>
    /// true if the Resource Worker is allowed to be changed; otherwise, false.
    /// </returns>
    public boolean allowWorkerChange()
    {
        boolean ret = true;

        // Do not allow changing worker if resource is used as project resource
        if (ResourceFacade::findByResourceBackingEntity(this))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarIdPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the calendar that the resource is associated with on the specified date.
    /// </summary>
    /// <param name="_date">
    /// The <c>date</c> to search for calendar.
    /// </param>
    /// <returns>
    /// The ID of the calendar that the resource is associated with.
    /// </returns>
    public CalendarId calendarIdPerDate(date _date)
    {
        CalendarId  calendarId;

        calendarId = WrkCtrResourceCalendar::findActiveForResource(this.WrkCtrId, _date).CalendarId;

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the calendar for the resource.
    /// </summary>
    /// <param name="_date">
    /// The date for which to change the calendar.
    /// </param>
    /// <param name="_newCalendarId">
    /// The ID of the calendar to which to change.
    /// </param>
    public void changeCalendar(date         _date,
                               CalendarId   _newCalendarId)
    {
        if (!WorkCalendarTable::exist(_newCalendarId))
        {
            throw error(strFmt("@SYS112224",_newCalendarId, fieldPName(WrkCtrResourceCalendar,CalendarId),tablePName(WorkCalendarTable)) );
        }

        if (_date < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            throw error("@SYS301742");
        }

        WrkCtrResourceCalendar::changeResourceCalendar(this.WrkCtrId, _date,_newCalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current record is an existing valid record.
    /// </summary>
    /// <returns>
    /// true if the current record is an existing valid record; otherwise, false.
    /// </returns>
    public boolean checkValid()
    {
        boolean ok = true;

        if (! this.WrkCtrId)
        {
            return checkFailed("@SYS17691");
        }

        if (!this.RecId)
        {
            ok = checkFailed(strFmt("@SYS12234",this.WrkCtrId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentCapabilityString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a comma-delimited string with the names of all the capabilities assigned to the resource.
    /// </summary>
    /// <returns>
    /// A comma-delimited string with the names of all the capabilities assigned to the resource.
    /// </returns>
    public str currentCapabilityString()
    {
        WrkCtrCapabilityResource    wrkCtrCapabilityResource;
        WrkCtrCapability            wrkCtrCapability;
        int                         minPriority = -1;
        str                         capabilityStr;
        date                        selectDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        while select validTimeState(selectDate) Priority from wrkCtrCapabilityResource
            order by Priority
            where wrkCtrCapabilityResource.WrkCtrId             == this.WrkCtrId
               && wrkCtrCapabilityResource.ResourceDataAreaId   == this.DataAreaId
            join Name from wrkCtrCapability
            where wrkCtrCapabilityResource.Capability == wrkCtrCapability.RecId
        {
            if (wrkCtrCapabilityResource.Priority > minPriority && minPriority != -1)
            {
                break;
            }

            minPriority = wrkCtrCapabilityResource.Priority;
            if (capabilityStr != '')
            {
                capabilityStr = strFmt('%1, %2', capabilityStr, wrkCtrCapability.Name);
            }
            else
            {
                capabilityStr = wrkCtrCapability.Name;
            }
        }

        return capabilityStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        TableId roleViewId =  (this.WrkCtrType == WrkCtrType::Group) ? tableNum(DimAttributeWrkCtrResourceGroup): tableNum(DimAttributeWrkCtrTable);

        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this, roleViewId))
        {
            throw error(strFmt("@SYS134392", this.WrkCtrId));
        }

        ttsbegin;

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this, roleViewId);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the calendar of the resource on a specific date.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the calendar should change.
    /// </param>
    /// <param name="_date">
    /// The date for which to get or set the calendar.
    /// </param>
    /// <param name="_calendarId">
    /// The new calendar to set; optional.
    /// </param>
    /// <returns>
    /// The ID of the active calendar.
    /// </returns>
    public CalendarId editCalendar(boolean _set, date _date, CalendarId _calendarId)
    {
        if (_set)
        {
            this.changeCalendar(_date, _calendarId);
        }

        return this.calendarIdPerDate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectivityPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the efficiency percentage of the resource.
    /// </summary>
    /// <returns>
    /// The efficiency percentage of the resource.
    /// </returns>
    public Percent effectivityPct()
    {
        return (this.EffectivityPct ? this.EffectivityPct : 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.OperationSchedPct      = 100;
        this.EffectivityPct         = 100;

        this.ProcessPerQty          = 1;
        this.WrkCtrType             = WrkCtrType::Machine;
        this.IsIndividualResource   = NoYes::Yes;
        this.ToHours                = 1;
        this.Created                = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values in the current record to be representing a resource group.
    /// </summary>
    public void initValueGroup()
    {
        this.initValue();

        this.IsIndividualResource = NoYes::No;
        this.WrkCtrType = WrkCtrType::Group;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the input warehouse for the resource.
    /// </summary>
    /// <param name="_date">
    ///     The date for which to get the location.
    /// </param>
    /// <returns>
    ///     The ID of the warehouse related to the current resource.
    /// </returns>
    public InventLocationId inputWarehouseId(date _date)
    {
        WrkCtrResourceGroupResource     wrkCtrResourceGroupResource;
        WrkCtrResourceGroup             wrkCtrResourceGroup;
        InventLocationId                inputWarehouse;

        if (this.IsIndividualResource)
        {
            wrkCtrResourceGroupResource = WrkCtrTable::resourceGroupResource(this.WrkCtrId, _date, _date);
            inputWarehouse              = wrkCtrResourceGroupResource.inputInventLocationIdResourceGroup();
        }
        else
        {
            wrkCtrResourceGroup         = WrkCtrResourceGroup::findWrkCtrId(this.WrkCtrId);
            inputWarehouse              = wrkCtrResourceGroup.inputInventLocationIdFallback();
        }

        return inputWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the input warehouse management system (WMS) location for the resource.
    /// </summary>
    /// <param name="_date">
    /// The date for which to get the location.
    /// </param>
    /// <returns>
    /// The input WMS location.
    /// </returns>
    public WMSLocation inputWMSLocation(date _date)
    {
        WMSLocation                     wmsLocation;
        WrkCtrResourceGroupResource     wrkCtrResourceGroupResource;
        WrkCtrResourceGroup             wrkCtrResourceGroup;

        if (this.IsIndividualResource)
        {
            wrkCtrResourceGroupResource = WrkCtrTable::resourceGroupResource(this.WrkCtrId, _date, _date);
            if (wrkCtrResourceGroupResource.InputWMSLocationId)
            {
                wmsLocation = WMSLocation::find(wrkCtrResourceGroupResource.InputWMSLocationId, wrkCtrResourceGroupResource.InputInventLocationId);
            }

            if (!wmsLocation)
            {
                wrkCtrResourceGroup = WrkCtrResourceGroup::find(wrkCtrResourceGroupResource.ResourceGroup);
            }
        }
        else
        {
            wrkCtrResourceGroup = WrkCtrResourceGroup::findWrkCtrId(this.WrkCtrId);
        }

        if (wrkCtrResourceGroup && wrkCtrResourceGroup.InputWMSLocationId)
        {
            wmsLocation = WMSLocation::find(wrkCtrResourceGroup.InputWMSLocationId, wrkCtrResourceGroup.InputInventLocationId);
        }

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // Clear the fields that is not applicable according to the type
        if (this.WrkCtrType != WrkCtrType::Personnel && this.Worker != 0)
        {
            this.Worker = 0;
        }

        if (this.WrkCtrType != WrkCtrType::Vendor && this.VendId != '')
        {
            this.VendId = '';
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WrkCtrTable, WrkCtrType):
                this.Worker = 0;
                this.VendId = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationSchedPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the operation scheduling percentage.
    /// </summary>
    /// <returns>
    /// The operation scheduling percentage.
    /// </returns>
    public Percent operationSchedPct()
    {
        return (this.OperationSchedPct ? this.OperationSchedPct : 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        TableId roleViewId = (this.WrkCtrType == WrkCtrType::Group) ? tableNum(DimAttributeWrkCtrResourceGroup): tableNum(DimAttributeWrkCtrTable);
        
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig(), roleViewId);
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceIssueLedgerDimensionDisplayValue</Name>
				<Source><![CDATA[
    display DimensionDisplayValue resourceIssueLedgerDimensionDisplayValue()
    {
        return  LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.ResourceIssueLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceIssueOffsetLedgerDimDisplayValue</Name>
				<Source><![CDATA[
    display DimensionDisplayValue resourceIssueOffsetLedgerDimDisplayValue()
    {
        return  LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.ResourceIssueOffsetLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sameResourceGroupInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the resource is a member of the same resource group for the duration of a period.
    /// </summary>
    /// <param name="_fromDate">
    /// The first day of the period.
    /// </param>
    /// <param name="_toDate">
    /// The last day of the period.
    /// </param>
    /// <returns>
    /// true if the resource is a member of the same resource group for the complete duration of the
    /// period; otherwise, false.
    /// </returns>
    public boolean sameResourceGroupInPeriod(date _fromDate, date _toDate)
    {
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;

        select validtimestate(_fromDate, _toDate) count(RecId) from wrkCtrResourceGroup
            exists join wrkCtrResourceGroupResource
                where wrkCtrResourceGroup.RecId             == wrkCtrResourceGroupResource.ResourceGroup
                   && wrkCtrResourceGroupResource.WrkCtrId  == this.WrkCtrId;

        return wrkCtrResourceGroup.RecId <= 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        InventQualityOrderTable inventQualityOrderTable;
        WrkCtrResourceGroup wrkCtrResourceGroup;
        boolean                 ret;

        ret = super();

        if (ret && this.WrkCtrType == WrkCtrType::Group)
        {
            //When a record is a resource group make validation check for its deletion
            wrkCtrResourceGroup =  WrkCtrTable::resourceGroup(this.WrkCtrId);
            if (wrkCtrResourceGroup)
            {
                ret = wrkCtrResourceGroup.validateDelete();
            }
        }

        if (ret)
        {
            select firstonly RecId from inventQualityOrderTable
                where inventQualityOrderTable.WrkCtrId      == this.WrkCtrId
                   && inventQualityOrderTable.OrderStatus   == InventTestOrderStatus::Open;

            if (inventQualityOrderTable.RecId)
            {
                ret = checkFailed(strFmt("@SYS302416", this.WrkCtrId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WrkCtrTable, CapLimited):
            case fieldNum(WrkCtrTable, BottleneckResource):
                if (!this.CapLimited && this.BottleneckResource)
                {
                    ret = ret && checkFailed("@SYS105589");
                }
                break;

            case fieldNum(WrkCtrTable, OperationSchedPct):
                if (this.OperationSchedPct < 0 || this.OperationSchedPct > 100)
                {
                    ret = ret && checkFailed("@SYS31248");
                }
                break;

            //validate worker
            case fieldNum(WrkCtrTable, Worker) :
                if (ret && this.Worker )
                {
                    ret = HcmWorkerLookup::newAllWorkersWithinCompany().validateWorker(this.Worker);
                    if (!ret)
                    {
                        checkFailed(strFmt("@SYS39817", HcmWorker::find(this.Worker).PersonnelNumber));
                    }

                    if (ret && (this.WrkCtrType != WrkCtrType::Personnel))
                    {
                        ret = checkFailed("@SYS321073");
                    }
                }

                if (ret
                 && (this.Worker != this.orig().Worker)
                 && !this.allowEmplVendorChange())
                {
                    ret = checkFailed("@SYS321073");
                }
                break;

            case fieldNum(WrkCtrTable, VendId):
                if (ret
                 && this.VendId
                 && (this.WrkCtrType != WrkCtrType::Vendor))
                {
                    ret = checkFailed("@SYS321073");
                }

                if (ret
                 && (this.VendId != this.orig().VendId)
                 && !this.allowEmplVendorChange())
                {
                    ret = checkFailed("@SYS321073");
                }
                break;

            case fieldNum(WrkCtrTable, WrkCtrType):
                if (this.IsIndividualResource && this.WrkCtrType == WrkCtrType::Group)
                {
                    ret = checkFailed('@SCM:OperationsResourceNotGroup');
                }

                if (ret
                 && (this.WrkCtrType != this.orig().WrkCtrType)
                 && !this.allowResourceTypeChange())
                {
                    ret = checkFailed("@SYS321073");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipIssueLedgerDimensionDisplayValue</Name>
				<Source><![CDATA[
    display DimensionDisplayValue wipIssueLedgerDimensionDisplayValue()
    {
        return  LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.wipIssueLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipValuationLedgerDimensionDisplayValue</Name>
				<Source><![CDATA[
    display DimensionDisplayValue wipValuationLedgerDimensionDisplayValue()
    {
        return  LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.wipValuationLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkerResourceGroupMembership</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts resource group memberships for a worker based on changes in the employment date.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker to adjust the membership for.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the worker for which to adjust the membership.
    /// </param>
    /// <param name="_utcOldValidFrom">
    /// The original valid from date of the employment.
    /// </param>
    /// <param name="_utcOldValidTo">
    /// The original valid to date of the employment.
    /// </param>
    /// <param name="_utcNewValidFrom">
    /// The new valid from date of the employment.
    /// </param>
    /// <param name="_utcNewValidTo">
    /// The new valid to date of the employment.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The update of the resource group membership is not valid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The deletion of the resource group membership is not valid.
    /// </exception>
    [SuppressBPWarningAttribute('BPErrorMethodDeleteFromNotUsed', 'The code contains extra conditions which cannot be used in expressions')]
    public static void adjustWorkerResourceGroupMembership( WrkCtrWorker    _worker,
                                                            RefRecId        _legalEntity,
                                                            utcdatetime     _utcOldValidFrom,
                                                            utcdatetime     _utcOldValidTo,
                                                            utcdatetime     _utcNewValidFrom,
                                                            utcdatetime     _utcNewValidTo)
    {
        WrkCtrTable                 wrkCtrTable;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        Timezone                    timezone;
        date                        oldValidFrom;
        date                        oldValidTo;
        date                        newValidFrom;
        date                        newValidTo;
        CompanyInfo                 companyInfo = CompanyInfo::findRecId(_legalEntity);
        date                        searchFromDate = DateTimeUtil::date(_utcOldValidFrom);
        date                        searchToDate = DateTimeUtil::date(_utcOldValidTo);

        void validateAndUpdateResourceGroupResource()
        {
            if (wrkCtrResourceGroupResource.validateWrite())
            {
                wrkCtrResourceGroupResource.update();
            }
            else
            {
                throw error("@SYS18738");
            }
        }

        if (_utcNewValidFrom > _utcOldValidFrom || _utcNewValidTo < _utcOldValidTo)
        {
            // Seach dates are set based on "worst case" UTC conversion since the time zone is only determined in the the resource group membership context
            if (searchFromDate > dateNull())
            {
                searchFromDate -= 1;
            }
            if (searchToDate < maxDate())
            {
                searchToDate += 1;
            }

            changecompany(companyInfo.company())
            {
                while select forupdate validtimestate(searchFromDate, searchToDate) wrkCtrResourceGroupResource
                    exists join wrkCtrTable
                        where wrkCtrTable.Worker == _worker
                           && wrkCtrResourceGroupResource.WrkCtrId == wrkCtrTable.WrkCtrId
                {
                    timezone        = wrkCtrResourceGroupResource.wrkCtrResourceGroup().timeZone();
                    oldValidFrom    = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_utcOldValidFrom, timezone));
                    oldValidTo      = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_utcOldValidTo, timezone));
                    newValidFrom    = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_utcNewValidFrom, timezone));
                    newValidTo      = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_utcNewValidTo, timezone));

                    if (wrkCtrResourceGroupResource.ValidFrom <= oldValidTo && wrkCtrResourceGroupResource.ValidTo >= oldValidFrom)
                    {
                        if (newValidTo < wrkCtrResourceGroupResource.ValidFrom || newValidFrom > wrkCtrResourceGroupResource.ValidTo)
                        {
                            // The resource group membership must be completely removed as it is not overlapping with the worker affiliation
                            if (wrkCtrResourceGroupResource.validateDelete())
                            {
                                wrkCtrResourceGroupResource.delete();
                            }
                            else
                            {
                                throw error("@SYS18738");
                            }
                        }
                        else
                        {
                            // The dates on the resource group membership should just be adjusted
                            // Note that the ValidFrom and ValidTo fields are not allowed to be changed in the same update
                            wrkCtrResourceGroupResource.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                            if (newValidFrom > wrkCtrResourceGroupResource.ValidFrom  )
                            {
                                wrkCtrResourceGroupResource.ValidFrom = newValidFrom;
                                validateAndUpdateResourceGroupResource();
                            }

                            if (newValidTo < wrkCtrResourceGroupResource.ValidTo)
                            {
                                wrkCtrResourceGroupResource.ValidTo = newValidTo;
                                validateAndUpdateResourceGroupResource();
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoCreateResourceFromEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the resource from the worker.
    /// </summary>
    /// <param name="_personnelNumber">
    /// The worker personnel number.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The new resource table.
    /// </returns>
    static WrkCtrTable autoCreateResourceFromEmpl(HcmPersonnelNumberId  _personnelNumber,
                                                  boolean   _forUpdate = false)
    {
        WrkCtrTable wrkCtrTable;
        HcmWorker   hcmWorker;

        wrkCtrTable.selectForUpdate(_forUpdate);

        if (_personnelNumber)
        {
            hcmWorker = HcmWorker::findByPersonnelNumber(_personnelNumber);
            if (!hcmWorker)
            {
                return null;
            }
            wrkCtrTable.clear();
            wrkCtrTable.initValue();
            wrkCtrTable.WrkCtrId = WrkCtrTable::generateWrkCtrId(hcmWorker.PersonnelNumber);
            wrkCtrTable.WrkCtrType= WrkCtrType::Personnel;
            wrkCtrTable.Worker = hcmWorker.RecId;

            wrkCtrTable.insert();
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(WrkCtrId _wrkCtrId)
    {
        if (_wrkCtrId && ! WrkCtrTable::exist(_wrkCtrId))
        {
            return checkFailed(strFmt(WrkCtrTable::txtNotExist(),_wrkCtrId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(WrkCtrId _wrkCtrId)
    {
        return WrkCtrTable::find(_wrkCtrId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WrkCtrTable</c> table.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of the resource record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrTable</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrTable find(WrkCtrId    _wrkCtrId,
                            boolean     _forUpdate = false)
    {
        WrkCtrTable wrkCtrTable;

        wrkCtrTable.selectForUpdate(_forUpdate);

        if (_wrkCtrId)
        {
            select firstonly wrkCtrTable
                where wrkCtrTable.WrkCtrId == _wrkCtrId;
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WrkCtrTable</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the resource record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrTable</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrTable findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WrkCtrTable wrkCtrTable;

        wrkCtrTable.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly wrkCtrTable
                where wrkCtrTable.RecId == _recId;
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WrkCtrTable</c> table by Worker.
    /// </summary>
    /// <param name="worker">
    /// The <c>HcmWorker</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrTable</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrTable findByWorker(HcmWorkerRecId _worker, boolean _forUpdate = false)
    {
        WrkCtrTable wrkCtrTable;

        wrkCtrTable.selectForUpdate(_forUpdate);

        if (_worker)
        {
            select firstonly wrkCtrTable
                where wrkCtrTable.Worker == _worker
                    && wrkCtrTable.WrkCtrType == WrkCtrType::Personnel;
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a resource ID that has the basis of another name.
    /// </summary>
    /// <param name="_name">
    /// The base name that the new ID should be generated from.
    /// </param>
    /// <returns>
    /// A new resource ID.
    /// </returns>
    /// <remarks>
    /// The resource ID will at first be set to the same value as the base name. If that name already
    /// exists then it will be post fixed with a number. If the base name is long, the length may be
    /// reduced to enable higher postfix values.
    /// </remarks>
    static WrkCtrId generateWrkCtrId(str _name)
    {
        int         nameLen,maxLen;
        int         i,j;
        WrkCtrId    seed,base,candidate,result='';
        SysDictType sysDictType;

        sysDictType = new SysDictType(extendedTypeNum(WrkCtrId));

        nameLen = strLen(_name);
        if (nameLen==0)
        {
            return '';
        }
        maxLen = sysDictType.stringLen();
        nameLen = min(nameLen,maxLen);
        seed = subStr(_name,1,nameLen); //seed 's length is nameLen

        for (i = 0; i< maxLen && result=='' ;i++)
        {
            base = subStr(seed,1,maxLen-i);

            candidate = base;
            if (!WrkCtrTable::exist(candidate))
            {
                result = candidate;
                break;
            }
            else
            {
                for (j=1; j<power(10,i);j++)
                {
                    candidate = base + int2str(j);
                    if (!WrkCtrTable::exist(candidate))
                    {
                        result = candidate;
                        break;
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jumps to main table for the resource or resource group.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of a resource.
    /// </param>
    /// <param name="_openWrkCtrTableAsDefault">
    /// A <c>boolean</c> that determines if the <c>WrkCtrTable</c> form should be opened as default when no record could be found;
    /// otherwise the <c>WrkCtrResourceGroup</c> form will be opened when no record could be found.
    /// </param>
    public static void jumpRefWrkCtrId(WrkCtrId _wrkCtrId, boolean _openWrkCtrTableAsDefault = true)
    {
        WrkCtrTable     wrkCtrTable;
        Args            args;
        FormRun         formRun;
        str             menuitemName;

        if (_wrkCtrId)
        {
            wrkCtrTable = WrkCtrTable::find(_wrkCtrId);
        }

        args = new Args();

        if ((!wrkCtrTable.RecId && !_openWrkCtrTableAsDefault)
           || (wrkCtrTable.RecId && wrkCtrTable.IsIndividualResource == NoYes::No))
        {
            menuitemName = menuitemDisplayStr(WrkCtrResourceGroup);
        }
        else
        {
            menuitemName = menuitemDisplayStr(WrkCtrTable);
        }

        formRun = new MenuFunction(menuitemName, MenuItemType::Display).create(args);
        formRun.run();

        if (wrkCtrTable)
        {
            formRun.dataSource().findRecord(wrkCtrTable);
        }

        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitComboToIndividualResourceTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Limits the possible enumeration values for the resource type, to only include those that apply to
    /// an individual resource.
    /// </summary>
    /// <param name="_comboBox">
    /// The <c>FormComboBoxControl</c> control for which to limit the enumeration values.
    /// </param>
    [SysObsolete('The method is no longer used and will be deprecated.', false, 30\06\2020)]
    public static void limitComboToIndividualResourceTypes(FormComboBoxControl _comboBox)
    {
        DictEnum dictEnum = DictEnum::newFromName(enumStr(WrkCtrType));
        
        _comboBox.clear();

        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            WrkCtrType value = enum.current();

            if (value != WrkCtrType::Group)
            {
                _comboBox.add(dictEnum.value2Label(enum2int(value)));
            }
        }

        _comboBox.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup form for resources.
    /// </summary>
    /// <param name="_ctrl">
    /// The control to which the lookup form should bind.
    /// </param>
    /// <param name="_siteId">
    /// The ID of a site that the results in the lookup should be filtered based on; optional.
    /// </param>
    /// <param name="_prodUnitId">
    /// The ID of a production unit that the results in the lookup should be filtered based on; optional.
    /// </param>
    /// <param name="_resourceGroup">
    /// The ID of a resource group that the results in the lookup should be filtered based on; optional.
    /// </param>
    /// <param name="_onlyIndividualResource">
    /// Indicates that only individual resources should be shown in the lookup; optional.
    /// </param>
    /// <param name="_wrkCtrTmpFilter">
    /// Filter for which resources should be included in the lookup; optional.
    /// </param>
    /// <param name="_wrkCtrTmpApplicable">
    /// Resources that should have the Applicable checkmark shown in the lookup; optional.
    /// </param>
    static void lookupWrkCtrId(
        FormStringControl   _ctrl,
        InventSiteId        _siteId                 = '',
        ProdUnitId          _prodUnitId             = '',
        RefRecId            _resourceGroup          = 0,
        boolean             _onlyIndividualResource = false,
        WrkCtrTmpFilter     _wrkCtrTmpFilter        = null,
        WrkCtrTmpFilter     _wrkCtrTmpApplicable    = null)
    {
        Args       args;
        Object     formRun;

        args = new Args();
        args.name(formStr(WrkCtrIdLookUp));
        args.parmObject(_ctrl);
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);
        formRun.parmSiteId(_siteId);
        formRun.parmProdUnitId(_prodUnitId);
        formRun.parmResourceGroup(_resourceGroup);
        formRun.parmOnlyIndividualResource(_onlyIndividualResource);
        formRun.parmWrkCtrTmpFilter(_wrkCtrTmpFilter);
        formRun.parmWkCtrTmpApplicable(_wrkCtrTmpApplicable);
        formRun.init();

        _ctrl.performFormLookup(formRun as FormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWrkCtrIdCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the costing resource.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control to look up.
    /// </param>
    static void lookupWrkCtrIdCost(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup      = SysTableLookup::newParameters(tableNum(WrkCtrTable), _ctrl);
        Query                   query               = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldNum(WrkCtrTable, WrkCtrId),true);
        sysTableLookup.addLookupfield(fieldNum(WrkCtrTable, Name));
        sysTableLookup.addLookupfield(fieldNum(WrkCtrTable, SetupTime));
        sysTableLookup.addLookupfield(fieldNum(WrkCtrTable, ProcessTime));
        sysTableLookup.addLookupfield(fieldNum(WrkCtrTable, Capacity));
        sysTableLookup.addLookupfield(fieldNum(WrkCtrTable, CapacityBatch));

        queryBuildDataSource = query.addDataSource(tableNum(WrkCtrTable));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWrkCtrIdOnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup form for resources.
    /// </summary>
    /// <param name="_ctrl">
    /// The control to which the lookup form should bind.
    /// </param>
    /// <param name="_wrkCtrType">
    /// The resource type that the results in the lookup should be filtered based on.
    /// </param>
    static void lookupWrkCtrIdOnType(FormStringControl _ctrl, WrkCtrType _wrkCtrType)
    {
        Args       args;
        Object    formRun;

        args = new Args();
        args.name(formStr(WrkCtrIdLookUp));
        args.parmObject(_ctrl);
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);
        formRun.parmWrkCtrType(true, _wrkCtrType);
        formRun.init();

        _ctrl.performFormLookup(formRun as FormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the resource group which the given resource belongs to.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of the resource.
    /// </param>
    /// <param name="_fromDate">
    /// The start date of when the resource belongs to the resource group; optional.
    /// </param>
    /// <param name="_toDate">
    /// The end date of when the resource belongs to the resource group; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrResourceGroup</c> table; otherwise, an empty record.
    /// </returns>
    [SuppressBPWarningAttribute('BPErrorSelectUsingFirstOnly', 'The selected buffer is iterated')]
    public static WrkCtrResourceGroup resourceGroup(
        WrkCtrId    _wrkCtrId,
        date        _fromDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        date        _toDate     = _fromDate,
        boolean     _forUpdate  = false)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrTable                 wrkCtrTable = WrkCtrTable::find(_wrkCtrId);

        wrkCtrResourceGroup.selectForUpdate(_forUpdate);

        if (wrkCtrTable.IsIndividualResource)
        {
            //Fetch the group through the membership
            select validTimeState(_fromDate, _toDate) wrkCtrResourceGroup
            exists join wrkCtrResourceGroupResource
            where            wrkCtrResourceGroupResource.WrkCtrId               == _wrkCtrId
                             && wrkCtrResourceGroupResource.ResourceGroup       == wrkCtrResourceGroup.RecId;
        }
        else
        {
            //Fetch the group directly
            wrkCtrResourceGroup = WrkCtrResourceGroup::findWrkCtrId(_wrkCtrId);
        }

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceGroupResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>WrkCtrResourceGroupResource</c> table.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of the resource.
    /// </param>
    /// <param name="_fromDate">
    /// The start date of when the resource belongs to the resource group; optional.
    /// </param>
    /// <param name="_toDate">
    /// The end date of when the resource belongs to the resource group; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrResourceGroupResource</c> table; otherwise, an empty record.
    /// </returns>
    [SuppressBPWarningAttribute('BPErrorSelectUsingFirstOnly', 'The selected buffer is iterated')]
    public static WrkCtrResourceGroupResource resourceGroupResource(
        WrkCtrId    _wrkCtrId,
        date        _fromDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        date        _toDate     = _fromDate,
        boolean     _forUpdate  = false)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;

        wrkCtrResourceGroupResource.selectForUpdate(_forUpdate);

        select validTimeState(_fromDate, _toDate) wrkCtrResourceGroupResource
        where            wrkCtrResourceGroupResource.WrkCtrId               == _wrkCtrId;

        return wrkCtrResourceGroupResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourcesInCostCenter_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a collection of <c>WrkCtrTable</c> records
    /// </summary>
    /// <param name="_costCenterDimensionAttribute">
    /// Dimension attribute
    /// </param>
    /// <param name="_dimensionAttributeValueRecId">
    /// Dimension attribute RecId
    /// </param>
    /// <returns>
    /// A collection Map
    /// </returns>
    public static Map resourcesInCostCenter_BR(DimensionAttributeRecId _costCenterDimensionAttribute, RecId _dimensionAttributeValueRecId)
    {
        WrkCtrTable                         workCenterTable;
        DimensionAttributeValueSetStorage   wrkCenterDimensionAttributeValueSet;
        Map                                 costCenterResources;

        costCenterResources = new Map(Types::String, Types::Record);

        while select workCenterTable where workCenterTable.WrkCtrType != WrkCtrType::Group
        {
            wrkCenterDimensionAttributeValueSet     = DimensionAttributeValueSetStorage::find(workCenterTable.DefaultDimension);

            if (_dimensionAttributeValueRecId == wrkCenterDimensionAttributeValueSet.getValueByDimensionAttribute(_costCenterDimensionAttribute))
            {
                costCenterResources.insert(workCenterTable.WrkCtrId, workCenterTable);
            }
        }

        return costCenterResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS12234";
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputWMSLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Id of the output location for this resource based on a given date.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The date that is used to find the effective resource group.
    /// </param>
    /// <param name="_resourceEffectiveDate">
    /// The date that is used to find the effective resource member.
    /// </param>
    /// <param name="_prodId">
    /// The production number used to find the route job.
    /// </param>
    /// <returns>
    /// The output WMS location Id.
    /// </returns>
    /// <remarks>
    /// The output location is taken from this resource or the resource group to which this resource belongs.
    /// </remarks>
    public WMSLocationIdOutput outputWMSLocationId(
        TransDate   _effectiveDate,
        TransDate   _resourceEffectiveDate = _effectiveDate,
        ProdId      _prodId = '')
    {
        WMSLocationIdOutput outputWMSLocationId;
        
        if (this.IsIndividualResource)
        {
            outputWMSLocationId = this.achieveRightWMSLocationId(this.WrkCtrId, _resourceEffectiveDate, _resourceEffectiveDate, _prodId);
        }
        else if (_prodId)
        {
            // If this is a resource group check if there is a route job with a resource.
            ProdRouteJob prodRouteJob = ProdRouteJob::findLast(_prodId, ProdRoute::lastOprNum(_prodId));

            outputWMSLocationId = this.achieveRightWMSLocationId(prodRouteJob.WrkCtrId, prodRouteJob.ToDate, prodRouteJob.ToDate, _prodId);
        }

        // If there is still no output location, check the resource group.
        if (outputWMSLocationId == '')
        {
            InventLocationId resourceGroupOutputLocationId = WrkCtrTable::resourceGroup(this.WrkCtrId, _effectiveDate, _effectiveDate).OutputInventLocationId;
            InventLocationId prodInventLocationId = InventDim::find(ProdTable::find(_prodId).InventDimId).InventLocationId;

            if (resourceGroupOutputLocationId && resourceGroupOutputLocationId != prodInventLocationId)
            {
                outputWMSLocationId = '';
            }
            else
            {
                outputWMSLocationId = WrkCtrTable::resourceGroup(this.WrkCtrId, _effectiveDate, _effectiveDate).OutputWMSLocationId;
            }
        } 

        return outputWMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>achieveRightWMSLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Achieve output WMS location Id when prodtable warehouse not equal the resource group warehouse.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of the resource.
    /// </param>
    /// <param name = "_effectiveDate">
    /// The date that is used to find the effective resource group.
    /// </param>
    /// <param name = "_resourceEffectiveDate">
    /// The date that is used to find the effective resource member.
    /// </param>
    /// <param name = "_prodId">
    /// The production number used to find the route job.
    /// </param>
    /// <returns>
    /// The output WMS location Id.
    /// </returns>
    private WMSLocationId achieveRightWMSLocationId(WrkCtrId _wrkCtrId, TransDate _effectiveDate, TransDate _resourceEffectiveDate = _effectiveDate, ProdId _prodId = '')
    {
        WMSLocationId outputWMSLocationId;
        InventLocationId resourceGroupOutputLocationId = WrkCtrTable::resourceGroupResource(_wrkCtrId, _effectiveDate, _effectiveDate).OutputInventLocationId;
        InventLocationId prodInventLocationId = InventDim::find(ProdTable::find(_prodId).InventDimId).InventLocationId;

        if (resourceGroupOutputLocationId && resourceGroupOutputLocationId != prodInventLocationId)
        {
            outputWMSLocationId = '';
        }
        else
        {
            outputWMSLocationId = WrkCtrTable::resourceGroupResource(_wrkCtrId, _effectiveDate, _effectiveDate).OutputWMSLocationId;
        }

        return outputWMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(WrkCtrTable, Name),
                [
                    fieldNum(WrkCtrTable, WrkCtrId)
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WrkCtrTable, Name):
                if (!this.Name && this.WrkCtrId)
                {
                    this.Name = this.WrkCtrId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceGroupFromCache</Name>
				<Source><![CDATA[
    /// <summary>Retrieves resource membership from a cache.</summary>
    /// <param name = "_wrkCtrTable">A resource</param>
    /// <param name = "_fromDate">A valid from date.</param>
    /// <param name = "_toDate">A valid to date.</param>
    /// <returns>An <c>WrkCtrResourceGroup</c> record.</returns>
    public static WrkCtrResourceGroup getResourceGroupFromCache(
        WrkCtrTable _wrkCtrTable,
        date        _fromDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        date        _toDate     = _fromDate)
    {
        container result = WrkCtrResourceGroupMembershipCache::getValue([_wrkCtrTable.RecId]);

        if (result != conNull())
        {
            WrkCtrResourceGroupResource resourceGroupResource = conpeek(result, 2);

            // consider same db date effective constraint and immediately return from cache if match found.
            if (!(resourceGroupResource.ValidTo < _fromDate || resourceGroupResource.ValidFrom > _toDate))
            {
                return conpeek(result, 1);
            }
            result = conNull();
        }

        if (result == connull())
        {
            result = [WrkCtrTable::resourceGroup(_wrkCtrTable.WrkCtrId, _fromDate, _toDate),
                      WrkCtrTable::resourceGroupResource(_wrkCtrTable.WrkCtrId, _fromDate, _toDate)];

            WrkCtrResourceGroupMembershipCache::insertValue([_wrkCtrTable.RecId], result);
        }
        return conpeek(result, 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS124193</DeveloperDocumentation>
	<FormRef>WrkCtrTable</FormRef>
	<Label>@SYS10369</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WrkCtrId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>WrkCtrIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>WrkCtrIdx</PrimaryIndex>
	<ReplacementKey>WrkCtrIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PMFSeqReqRouteChanges</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PMFSeqReqRouteChanges</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTestAssociationTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTestAssociationTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdRoute</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProdRoute</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjForecastEmpl</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjForecastEmpl</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityResourceRequirement</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityResourceRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrCapabilityResource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrCapabilityResource</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrCapRes</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrCapRes</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrResourceGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrResourceGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrResourceGroupResource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrResourceGroupResource</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Resource</Relation>
			<Table>WrkCtrResourceCalendar</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Resource</Relation>
			<Table>ResourceSetup</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectivityPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Capacity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Capacity</Name>
			<Label>@SYS8345</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CapUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Capacity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapacityBatch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerAccountsCosting</Name>
			<Label>@SYS22281</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceIssueLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceIssueOffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerAccountsWIP</Name>
			<Label>@SYS22280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WIPIssueLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPValuationLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PMFSequencing</Name>
			<Label>@PSC247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PMFSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS25781</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Created</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Route</Name>
			<Label>@SYS4190</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RouteOverlap</Name>
			<Label>@SYS22311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferBatch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RouteTimes</Name>
			<Label>@SYS22290</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueueTimeBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SetupTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessPerQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TranspTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QueueTimeAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoutingCostCategories</Name>
			<Label>@SYS22291</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetUpCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scheduling</Name>
			<Label>@SYS21838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectivityPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperationSchedPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapLimited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyLimited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Exclusive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BottleneckResource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PMFSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkCenter</Name>
			<Label>@SYS10597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SetUpCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryIdSetup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BottleneckResource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrBottleneckResource</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Capacity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CapacityValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapacityBatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CapacityValueBatch</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CapLimited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedLimitCap</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CapUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CapacityUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Created</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS98444</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EffectivityPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EffectivityPct</ExtendedDataType>
			<Label>@SYS68164</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ErrorPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exclusive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS11261</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIndividualResource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrIsIndividualResource</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OperationSchedPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedPct</ExtendedDataType>
			<Label>@SYS68163</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PMFSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PMFSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryIdProcess</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProcessPerQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprQtyProcessNumOf</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProcessTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeProcess</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PropertyLimited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedLimitProperty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QtyCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryIdQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QueueTimeAfter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeQueueAfter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QueueTimeBefore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeQueueBefore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceIssueLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS22697</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceIssueOffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS23041</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SetupTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeSetup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteHourFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferBatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprQtyTransferBatch</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TranspTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeTransport</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS9455</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WIPIssueLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS3290</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WIPValuationLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdRouting</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS22282</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WrkCtrType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1201</Label>
			<EnumType>WrkCtrType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WrkCtrIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WrkCtrId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Worker</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>Project</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>WrkCtrTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
					<MapFieldTo>WrkCtrId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Resource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>hcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Worker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkCenter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PMFSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PMFSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PMFSequenceGroupId</Name>
					<SourceEDT>PMFSequenceGroupId</SourceEDT>
					<Field>PMFSequenceGroupId</Field>
					<RelatedField>SequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>QuantityCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QuantityCostCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WrkCtrTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QtyCategoryId</Name>
					<SourceEDT>RouteCostCategoryIdQty</SourceEDT>
					<Field>QtyCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceIssueLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceIssueLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Resource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceIssueLedgerDimension</Name>
					<Field>ResourceIssueLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceIssueOffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceIssueOffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Resource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceIssueOffsetLedgerDimension</Name>
					<Field>ResourceIssueOffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteGroupId</Name>
					<Field>RouteGroupId</Field>
					<RelatedField>RouteGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RouteGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RuntimeCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RuntimeCostCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WrkCtrTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcessCategoryId</Name>
					<SourceEDT>RouteCostCategoryIdProcess</SourceEDT>
					<Field>ProcessCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SetupCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SetupCostCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WrkCtrTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SetUpCategoryId</Name>
					<SourceEDT>RouteCostCategoryIdSetup</SourceEDT>
					<Field>SetUpCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WIPIssueLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WIPIssueLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Resource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WIPIssueLedgerDimension</Name>
					<Field>WIPIssueLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WIPValuationLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WIPValuationLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Resource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WIPValuationLedgerDimension</Name>
					<Field>WIPValuationLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>