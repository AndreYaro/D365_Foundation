<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookTableShiftDepreciation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetBookTableShiftDepreciation_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetBookTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to find AssetBookTable based on particular BookId.
    /// </summary>
    /// <returns>
    ///     Returns AssetBookTable based on the BookId.
    /// </returns>
    public AssetBookTable assetBookTable()
    {
        return AssetBookTable::find(this.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a valid interval exists.
    /// </summary>
    /// <returns>
    /// Returns true if an interval is valid.
    /// </returns>
    public boolean checkInterval()
    {
        if ((this.FromDate && ! this.ToDate) || (! this.FromDate && this.ToDate))
        {
            return checkFailed("@SYS22087");
        }

        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS16982");
        }

        if (this.FromDate && AssetBookTableShiftDepreciation_IN::existDataWithoutDate(this.BookId, this.RecId))
        {
            return checkFailed("@SYS22088");
        }

        if (AssetBookTableShiftDepreciation_IN::existSamePeriod(this.BookId,
                                                                this.FromDate,
                                                                this.ToDate,
                                                                this.RecId))
        {
            return checkFailed("@SYS22089");
        }
        else
        {
            if (AssetBookTableShiftDepreciation_IN::existPeriodOverlap(this.BookId,
                                                                       this.FromDate,
                                                                       this.ToDate,
                                                                       this.RecId))
            {
                return checkFailed("@SYS94867");
            }
        }
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        AssetBookTableShiftDepreciation_IN   lastRecord;

        super();

        lastRecord = AssetBookTableShiftDepreciation_IN::findLastRecord(this.BookId);

        if (lastRecord.RecId != 0)
        {
            this.FromDate = lastRecord.ToDate + 1 ;
            this.setShiftPercentage();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        AssetDepreciationPercentage shiftPercentageLoc;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(AssetBookTableShiftDepreciation_IN, TypeOfShift) :
                this.setShiftPercentage();
                break;

            case fieldStr(AssetBookTableShiftDepreciation_IN, BookId) :
                this.setShiftPercentage();
                break;

            case fieldStr(AssetBookTableShiftDepreciation_IN, ShiftPercentage) :
                shiftPercentageLoc = this.ShiftPercentage;
                this.setShiftPercentage();
                this.ShiftPercentage = max(shiftPercentageLoc, this.ShiftPercentage);
                break;

            case fieldStr(AssetBookTableShiftDepreciation_IN, FromDate) :
                this.setShiftPercentage();
                break;

            default:
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>setShiftPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to default the ShiftPercentage field from AssetShiftDepreciationProfile_IN table
    /// </summary>
    private void setShiftPercentage()
    {
        AssetShiftDepreciationProfile_IN    assetShiftDepreciationProfile;

        assetShiftDepreciationProfile = AssetShiftDepreciationProfile_IN::findByDepProfileTransDate(this.assetBookTable().DepreciationProfile,
                                                                                                    this.FromDate);

        this.ShiftPercentage = assetShiftDepreciationProfile.getShiftPercentage(this.TypeOfShift);
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            ret = this.checkInterval();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if asset book exists.
    /// </summary>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// Returns true if asset book exists.
    /// </returns>
    public static boolean exist(AssetBookId     _bookId,
                                FromDate        _fromDate,
                                ToDate          _toDate)
    {
        return (select firstonly RecId
                    from assetBookTableShiftDepreciation_IN
                        where assetBookTableShiftDepreciation_IN.BookId     == _bookId
                           && assetBookTableShiftDepreciation_IN.FromDate   == _fromDate
                           && assetBookTableShiftDepreciation_IN.ToDate     == _toDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
        static private boolean existDataWithoutDate(AssetBookId  _bookId,
                                                       recId        _recId)
    {
        if (_bookId)
        {
            return (select RecId
                        from assetBookTableShiftDepreciation_IN
                            where assetBookTableShiftDepreciation_IN.BookId             == _bookId
                               && assetBookTableShiftDepreciation_IN.RecId              != _recId
                               && ! assetBookTableShiftDepreciation_IN.FromDate
                               && ! assetBookTableShiftDepreciation_IN.ToDate).RecId    != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether overlapping periods exist.
    /// </summary>
    /// <param name="_bookId">
    /// BookId to search for.
    /// </param>
    /// <param name="_fromDate">
    /// From date of interval.
    /// </param>
    /// <param name="_toDate">
    /// To date of interval.
    /// </param>
    /// <param name="_recId">
    /// Record id of an already existing record which we dont need to find.
    /// </param>
    /// <returns>
    /// Returns true if overlapping period exists.
    /// </returns>
    static private boolean existPeriodOverlap(AssetBookId    _bookId,
                                                     FromDate       _fromDate,
                                                     ToDate         _toDate,
                                                     recId          _recId)
    {
        AssetBookTableShiftDepreciation_IN  assetBookTableShiftDepreciation;
        boolean                             ret = false;

        if (_bookId)
        {
            while select FromDate, ToDate
                  from assetBookTableShiftDepreciation
                      where assetBookTableShiftDepreciation.BookId  == _bookId
                         && assetBookTableShiftDepreciation.RecId   != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }

                if (_fromDate   >= assetBookTableShiftDepreciation.FromDate  &&
                    _fromDate   <= assetBookTableShiftDepreciation.ToDate    ||
                    _toDate     >= assetBookTableShiftDepreciation.FromDate  &&
                    _toDate     <= assetBookTableShiftDepreciation.ToDate)
                {
                    ret = true;
                }

                if (assetBookTableShiftDepreciation.FromDate >= _fromDate    &&
                    assetBookTableShiftDepreciation.FromDate <= _toDate      ||
                    assetBookTableShiftDepreciation.ToDate   >= _fromDate    &&
                    assetBookTableShiftDepreciation.ToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSamePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if another record with the same period interval exists.
    /// </summary>
    /// <param name="_assetBookId">
    /// BookId to search for.
    /// </param>
    /// <param name="_fromDate">
    /// From date of interval.
    /// </param>
    /// <param name="_toDate">
    /// To date of interval.
    /// </param>
    /// <param name="_recId">
    /// Record id of an already existing record which we dont need to find.
    /// </param>
    /// <returns>
    /// Returns true if overlapping period exists.
    /// </returns>
    static private boolean existSamePeriod(AssetBookId   _assetBookId,
                                                  FromDate      _fromDate,
                                                  ToDate        _toDate,
                                                  recId         _recId)
    {
        if (_assetBookId)
        {
            return (select RecId
                from assetBookTableShiftDepreciation_IN
                    where assetBookTableShiftDepreciation_IN.BookId     == _assetBookId
                       && assetBookTableShiftDepreciation_IN.FromDate   == _fromDate
                       && assetBookTableShiftDepreciation_IN.ToDate     == _toDate
                       && assetBookTableShiftDepreciation_IN.RecId      != _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset book by RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetBookTableShiftDepreciation_IN</c> class.
    /// </returns>
    public static AssetBookTableShiftDepreciation_IN find(recId     _recId,
                                                          boolean   _forUpdate = false)
    {
        AssetBookTableShiftDepreciation_IN  shiftDepreciation;

        if (_recId)
        {
            if (_forUpdate)
            {
                shiftDepreciation.selectForUpdate(_forUpdate);
            }

            select firstonly shiftDepreciation
                where shiftDepreciation.RecId == _recId;
        }

        return shiftDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset book table shift depreciation by asset book id.
    /// </summary>
    /// <param name="_assetBookId">
    /// The asset book id.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_forUpdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetBookTableShiftDepreciation_IN</c> class.
    /// </returns>
    public static AssetBookTableShiftDepreciation_IN findByAssetBookId(AssetBookId   _assetBookId,
                                                                       FromDate      _fromDate,
                                                                       ToDate        _toDate,
                                                                       boolean       _forUpdate = false)
    {
        AssetBookTableShiftDepreciation_IN  shiftDepreciation;

        if (_assetBookId && _fromDate)
        {
            shiftDepreciation.selectForUpdate(_forUpdate);

            select firstonly shiftDepreciation
                index hint AssetBookTableDepreciationIdx
                    where shiftDepreciation.BookId      == _assetBookId
                       && shiftDepreciation.FromDate    == _fromDate
                       && shiftDepreciation.ToDate      == _toDate;
        }
        return shiftDepreciation;
    }
]]></Source>
			</Method>
			<Method>
				<Name>findLastRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the last record with BookID .
    /// </summary>
    /// <param name="_assetBookId">
    /// The BookId
    /// </param>
    /// <returns>
    /// Returns last record with BookID.
    /// </returns>

    public static AssetBookTableShiftDepreciation_IN findLastRecord(AssetBookId _assetBookId)
    {
        AssetBookTableShiftDepreciation_IN assetBookTableShiftDepreciation_IN;

        select firstOnly assetBookTableShiftDepreciation_IN
            order by ToDate DESC
                 where assetBookTableShiftDepreciation_IN.BookId  == _assetBookId;

        return  assetBookTableShiftDepreciation_IN;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63873</DeveloperDocumentation>
	<FormRef>AssetBookTableShiftDepreciation_IN</FormRef>
	<Label>@FixedAssets:FA_EntityTitle_BookShiftDepreciation</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BookId</TitleField1>
	<TitleField2>FromDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AssetBookTableDepreciationIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfShift</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShiftDepreciation</Name>
			<Label>@GLS5965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeOfShift</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfIndustry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShiftPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ShiftPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationPercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfIndustry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TypeOfIndustry_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfShift</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TypeOfShift_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetBookTableDepreciationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBookTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBookTable_AssetBookTableShiftDepreciation_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>