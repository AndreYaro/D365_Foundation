<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkTemplateTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkTemplateTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the validity of the work template.
    /// </summary>
    /// <returns>
    /// true if the work template is valid; otherwise false.
    /// </returns>
    public display boolean displayIsValid()
    {
        return this.WorkTemplateValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record has sorting.
    /// </summary>
    /// <returns>
    /// true if the record has sorting; otherwise false.
    /// </returns>
    private boolean hasSorting()
    {
        return WHSWorkTemplateGroup::existByRefRecId(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetWorkBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if it is possible to set the work breaks field.
    /// </summary>
    /// <returns>true if it should be enabled to set this field; otherwise false.</returns>
    public boolean canSetWorkBreaks()
    {
        if (this.WorkTransType == WHSWorkTransType::PackedContainerPicking)
        {
            return false;
        }

        return this.canSetWorkTemplateQuery() && this.hasSorting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetWorkTemplateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the work template query field.
    /// </summary>
    /// <returns>true if it should be enabled to set this field; otherwise false.</returns>
    public boolean canSetWorkTemplateQuery()
    {
        return (this.WorkTransType != WHSWorkTransType::CycleCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetAutomaticallyProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the automatically process field.
    /// </summary>
    /// <returns>true if it should be enabled to set this field; otherwise false.</returns>
    public boolean canSetAutomaticallyProcess()
    {
        return (this.WorkTransType != WHSWorkTransType::CycleCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Work Transactions Type and Work Template priority fields.
    /// </summary>
    /// <param name="_workTransType">
    /// The Work Transaction Type of the Work Template record.
    /// </param>
    public void initFromWorkTransType(WHSWorkTransType _workTransType)
    {
        WHSWorkTemplateTable whsWorkTemplateTable;

        this.WorkTransType = _workTransType;

        select firstonly WorkTemplatePriority from whsWorkTemplateTable
            order by WorkTemplatePriority desc
            where whsWorkTemplateTable.WorkTransType == this.WorkTransType;

        if (whsWorkTemplateTable)
        {
            this.WorkTemplatePriority = whsWorkTemplateTable.WorkTemplatePriority + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumsAreSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any of the maximum fields are configured.
    /// </summary>
    /// <returns>
    /// True if some maximums are setup; otherwise, false.
    /// </returns>
    public boolean maximumsAreSetup()
    {
        return this.MaxQty
               || this.MaxQtyWorkHeader
               || this.MaxWeight
               || this.MaxWeightWorkHeader
               || this.MaxVolume
               || this.MaxVolumeWorkHeader
               || this.MaxEstimatedPickTime
               || this.MaxPickLines
               || this.UsePackingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryIsLocationSpecific</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the work template query has a range or sort on the location data source or any of it's child data sources.
    /// </summary>
    /// <returns>
    /// true if the work template's query must be location specific; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If false we can safely disable the location data source before executing the query during work creation.
    /// This is necessary to allow blank locations for work.
    /// </remarks>
    public boolean queryIsLocationSpecific()
    {
        QueryBuildDataSource    locationDataSource;
        QueryBuildDataSource    childDataSource;
        Counter                 i;
        Counter                 occuranceNum = 1;
        Query                   query;
        boolean                 ret;

        query = new Query(this.WorkTemplateQuery);

        //to recognize range that was added as a filter
        if (this.locationFilterExists(query))
        {
            return true;
        }

        //to recognize range that was added as a range
        do
        {
            locationDataSource = query.dataSourceTable(tableNum(WMSLocation), occuranceNum);
            ++occuranceNum;
            if (locationDataSource)
            {
                if (locationDataSource.rangeCount()     > 0
                ||  locationDataSource.sortFieldCount() > 0)
                {
                    ret = true;
                }

                if (!ret)
                {
                    for (i = 1; i <= locationDataSource.childDataSourceCount(); i++)
                    {
                        childDataSource = locationDataSource.childDataSourceNo(i);
                        if (childDataSource.rangeCount()       > 0
                        ||  childDataSource.sortFieldCount()   > 0)
                        {
                            ret = true;
                        }
                    }
                }
            }
        }
        while (locationDataSource && !ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationFilterExists</Name>
				<Source><![CDATA[
    private boolean locationFilterExists(Query _query)
    {
        for (int j = 1; j <= _query.queryFilterCount(); j++)
        {
            QueryFilter qf = _query.queryFilter(j);

            if (qf.dataSource().table() == tableNum(WMSLocation))
            {
                return true;
            }
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastLineCustom</Name>
				<Source><![CDATA[
    private boolean isLastLineCustom()
    {
        WHSWorkTemplateLine workTemplateLine;

        select firstonly WorkType from workTemplateLine
            order by workTemplateLine.LineNum desc
            where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
                && workTemplateLine.WorkTransType   == this.WorkTransType;

        return (workTemplateLine.WorkType == WHSWorkType::Custom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstLineCustom</Name>
				<Source><![CDATA[
    private boolean isFirstLineCustom()
    {
        WHSWorkTemplateLine workTemplateLine;

        select firstonly WorkType from workTemplateLine
            order by workTemplateLine.LineNum asc
            where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
                && workTemplateLine.WorkTransType   == this.WorkTransType;

        return (workTemplateLine.WorkType == WHSWorkType::Custom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomLineAllowedAsFirstLine</Name>
				<Source><![CDATA[
    private boolean isCustomLineAllowedAsFirstLine()
    {
        return !WHSWorkTemplateTable::workTransTypesNotAllowingCustomStepAsFirst().in(this.WorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransTypesNotAllowingCustomStepAsFirst</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static Set workTransTypesNotAllowingCustomStepAsFirst()
    {
        Set set = new Set(Types::Enum);

        set.add(WHSWorkTransType::Sales);
        set.add(WHSWorkTransType::TransferIssue);
    
        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransTypeAllowQualityCheck</Name>
				<Source><![CDATA[
    private boolean workTransTypeAllowQualityCheck()
    {
        return WHSWorkTemplateTable::workTransTypesAllowingQualityCheck().in(this.WorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransTypesAllowingQualityCheck</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static Set workTransTypesAllowingQualityCheck()
    {
        Set set = new Set(Types::Enum);

        set.add(WHSWorkTransType::Purch);
        set.add(WHSWorkTransType::ProdPut);
        set.add(WHSWorkTransType::ProdProcessPut);
        set.add(WHSWorkTransType::TransferReceipt);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustom</Name>
				<Source><![CDATA[
    private container validateCustom(boolean _valid)
    {
        boolean                  valid = _valid;
        WHSWorkTemplateLine      workTemplateLine;
        WHSWorkTemplateErrorText errorText;

        if (this.isLastLineCustom())
        {
            valid = false;
            errorText = "@WAX1359";
        }
        else if (!this.isCustomLineAllowedAsFirstLine() && this.isFirstLineCustom())
        {
            valid = false;
            errorText = strFmt("@WAX:WorkTemplateValidationError_FirstLineIsCustom", this.WorkTemplateCode, this.WorkTransType);
        }

        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDirCodes</Name>
				<Source><![CDATA[
    private container validateDirCodes(boolean _valid, LineNum _maxLineNum)
    {
        boolean                  valid = _valid;
        WHSWorkTemplateLine      workTemplateLine;
        LineNum                  maxLineNum = _maxLineNum;
        WHSWorkTemplateErrorText errorText;

        if (valid)
        {
            WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(this.WorkTransType);

            if (workTransactionType)
            {
                while select workTemplateLine
                    where workTemplateLine.WorkTransType     == this.WorkTransType    &&
                          workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode
                {
                    errorText = workTransactionType.validateLocDirCodeForWorkTemplateLine(workTemplateLine, workTemplateLine.LineNum == maxLineNum);
                    if (errorText)
                    {
                        valid = false;
                        break;
                    }                    
                }
            }
        }

        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickPutLines</Name>
				<Source><![CDATA[
    private container validatePickPutLines()
    {
        boolean valid;
        WHSWorkType workType;
        str errorText;
        int counter;
        
        WHSWorkTemplateLine workTemplateLine;
        
        while select WorkType from workTemplateLine
            order by workTemplateLine.LineNum
            where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode &&
                  workTemplateLine.WorkTransType     == this.WorkTransType    &&
                  workTemplateLine.Mandatory         == NoYes::Yes
        {
            switch (workTemplateLine.WorkType)
            {
                case WHSWorkType::Pick:
                    valid = false;
                    if (workType == workTemplateLine.WorkType)
                    {
                        ++counter;
                    }
                    errorText = "@WAX1361";
                    break;

                case WHSWorkType::Put:
                    valid = true;
                    if (workType == workTemplateLine.WorkType)
                    {
                        ++counter;
                    }
                    break;

                case WHSWorkType::QualityCheck:
                    // Make sure quality check comes after a pick.
                    if (workType != WHSWorkType::Pick)
                    {
                        valid = false;
                        errorText = "@WAX:QualityCheckComesAfterPick";
                    }
                    break;
            }

            if (counter && workType)
            {
                valid = false;
                errorText = "@WAX1360";
            }

            if (workTemplateLine.WorkType != WHSWorkType::Custom)
            {
                workType = workTemplateLine.WorkType;
            }
        }        

        return [valid, errorText];    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLines</Name>
				<Source><![CDATA[
	/// <summary>
	/// Validates work template lines.
	/// </summary>
	/// <returns>
	/// Error text if not valid, otherwise empty string.
	/// </returns>
    public str validateLines()
    {
        
        if (this.WorkTransType == WHSWorkTransType::CycleCount)
        {
            [this.WorkTemplateValid, this.WorkTemplateErrorText] = this.validateCycleCountLine();

			return this.WorkTemplateErrorText;
        }

        WHSWorkTemplateLine workTemplateLine;
        
        LineNum maxLineNum = (select maxof(LineNum) from whsWorkTemplateLine
                        where whsWorkTemplateLine.WorkTransType     == this.WorkTransType    &&
                              whsWorkTemplateLine.WorkTemplateCode  == this.WorkTemplateCode).LineNum;

        boolean valid;
        WHSWorkTemplateErrorText    errorText;
        
        [valid, errorText] = this.validatePickPutLines();

        if (valid)
        {
            [valid, errorText] = this.validateWorkType(valid);
        }

        if (valid)
        {
            [valid, errorText] = this.validateCustom(valid);
        }

        if (valid)
        {
            [valid, errorText] = this.validateMandatory(valid);
        }

        if (valid)
        {
            [valid, errorText] = this.validatePrint(valid);
        }

        if (valid)
        {
            [valid, errorText] = this.validateStops(valid);
        }

        if (valid)
        {
            [valid, errorText] = this.validateDirCodes(valid, maxLineNum);
        }

        if (valid)
        {
            [valid, errorText] = this.validateWorkClass(valid);
        }

        if (valid)
        {
            [valid, errorText] = this.validateQualityCheck();
        }

        if (valid)
        {
            EventHandlerResult result = EventHandlerResult::newDefault();
            this.validateLinesDelegate(this, result);

            if (result.hasResult())
            {
                valid = false;
                errorText = result.result();
            }
        }

        this.WorkTemplateValid = valid;
        this.WorkTemplateErrorText = errorText;

        return this.WorkTemplateErrorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQualityCheck</Name>
				<Source><![CDATA[
    private container validateQualityCheck()
    {
        boolean                  valid = true;
        WHSWorkTemplateErrorText errorText;

        if (!this.workTransTypeAllowQualityCheck())
        {
            WHSWorkTemplateLine workTemplateLine;

            select firstOnly RecId from workTemplateLine
            where  workTemplateLine.WorkTransType    == this.WorkTransType
                && workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
                && workTemplateLine.WorkType         == WHSWorkType::QualityCheck;
    
            if (workTemplateLine.RecId)
            {
                errorText = "@WAX:QualityCheckValidWorkTransType";
                valid = false;
            }
        }
        
        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for validating lines on a work template.
    /// </summary>
    /// <param name = "_whsWorkTemplateTable">The work template.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> class where an error message can be provided when validation fails.</param>
    delegate void validateLinesDelegate(WHSWorkTemplateTable _whsWorkTemplateTable, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCycleCountLine</Name>
				<Source><![CDATA[
    private container validateCycleCountLine()
    {
        boolean						valid;
        WHSWorkTemplateErrorText	errorText;

        if (this.WorkTransType == WHSWorkTransType::CycleCount)
        {
            WHSWorkTemplateLine workTemplateLine;

            select count(RecId) from workTemplateLine
                where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode;

            if (workTemplateLine.RecId != 1)
            {
                errorText	= "@WAX:CycleCountWorkTemplateDoesNotHaveOnlyOneLine";
            }
			else
            {
                valid = true;
            }
        }

        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatory</Name>
				<Source><![CDATA[
    private container validateMandatory(boolean _valid)
    {
        boolean                  valid = _valid;
        WHSWorkTemplateLine      workTemplateLine;
        WHSWorkTemplateErrorText errorText;
        if (valid)
        {
            select firstonly Mandatory from workTemplateLine
                order by workTemplateLine.LineNum
                where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode &&
                      workTemplateLine.WorkTransType     == this.WorkTransType;

            if (!workTemplateLine.Mandatory)
            {
                valid = false;
                errorText = "@WAX1356";
            }

            select firstonly Mandatory from workTemplateLine
                order by workTemplateLine.LineNum desc
                where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode &&
                      workTemplateLine.WorkTransType     == this.WorkTransType;

            if (!workTemplateLine.Mandatory)
            {
                valid = false;
                errorText = "@WAX1357";
            }
        }
        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrint</Name>
				<Source><![CDATA[
    private container validatePrint(boolean _valid)
    {
        boolean                  valid = _valid;
        WHSWorkTemplateLine      workTemplateLine;
        WHSWorkTemplateErrorText errorText;

        if (valid)
        {
            select firstonly WorkType from workTemplateLine
                order by workTemplateLine.LineNum
                where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode
                    && workTemplateLine.WorkTransType    == this.WorkTransType;

            if (workTemplateLine.WorkType == WHSWorkType::Print)
            {
                valid = false;
                errorText = "@WAX1358";
            }
        }

        if (valid)
        {
            while select WorkTemplateCode, WorkTransType, LineNum from workTemplateLine
                where workTemplateLine.WorkTemplateCode   == this.WorkTemplateCode
                    && workTemplateLine.WorkTransType     == this.WorkTransType
                    && workTemplateLine.WorkType          == WHSWorkType::Print
            {
                if (!workTemplateLine.isStepBetweenPickAndPut())
                {
                    valid = false;
                    errorText = "@SCM:PrintLineBetweenPickAndPut";

                    break;
                }
            }
        }

        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStops</Name>
				<Source><![CDATA[
    private container validateStops(boolean _valid)
    {
        boolean                  valid = _valid;
        WHSWorkTemplateLine      workTemplateLine;
        WHSWorkTemplateErrorText errorText;
        LineNum                  firstPut;
        if (valid)
        {
            select count(RecId) from workTemplateLine
                order by workTemplateLine.LineNum
                where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode &&
                      workTemplateLine.WorkTransType     == this.WorkTransType &&
                      workTemplateLine.WorkStop          == NoYes::Yes;

            if (workTemplateLine.RecId)
            {
                //Check for any non-pick stops
                select count(RecId) from workTemplateLine
                    order by workTemplateLine.LineNum
                    where workTemplateLine.WorkTemplateCode    == this.WorkTemplateCode &&
                          workTemplateLine.WorkTransType       == this.WorkTransType &&
                          workTemplateLine.WorkStop            == NoYes::Yes &&
                          workTemplateLine.WorkType            != WHSWorkType::Pick;

                if (workTemplateLine.RecId)
                {
                    errorText = "@WAX1354";
                    valid = false;
                }
                else
                {
                    //check for stops before first pick
                    select firstonly LineNum from workTemplateLine order by workTemplateLine.LineNum where
                                    workTemplateLine.WorkTemplateCode    == this.WorkTemplateCode &&
                                    workTemplateLine.WorkTransType       == this.WorkTransType &&
                                    workTemplateLine.WorkType            == WHSWorkType::Put;

                    firstPut = workTemplateLine.LineNum;

                    select count(RecId) from workTemplateLine order by workTemplateLine.LineNum where
                                    workTemplateLine.WorkTemplateCode    == this.WorkTemplateCode &&
                                    workTemplateLine.WorkTransType       == this.WorkTransType &&
                                    workTemplateLine.WorkStop            == NoYes::Yes &&
                                    workTemplateLine.WorkType            == WHSWorkType::Pick &&
                                    workTemplateLine.LineNum                <  firstPut;

                    if (workTemplateLine.RecId)
                    {
                        errorText = "@WAX1355";
                        valid = false;
                    }
                }
            }
        }
        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkClass</Name>
				<Source><![CDATA[
    private container validateWorkClass(boolean _valid)
    {
        boolean valid =          _valid;
        WHSWorkTemplateLine      workTemplateLine;
        WHSWorkClassId           workClassId;
        WHSWorkTemplateErrorText errorText;

        if (valid)
        {
            while select WorkTransType, WorkTemplateCode, WorkType, WorkClassId
                from workTemplateLine
                where workTemplateLine.WorkTransType     == this.WorkTransType    &&
                      workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode
            {
                if (workTemplateLine.WorkType == WHSWorkType::Pick)
                {
                    workClassId = workTemplateLine.WorkClassId;
                }
                else if (workTemplateLine.WorkType == WHSWorkType::Put)
                {
                    if (workClassId != workTemplateLine.WorkClassId)
                    {
                        errorText = "@WAX1458";
                        valid = false;
                        break;
                    }
                    else
                    {
                        workClassId = '';
                    }
                }
            }
        }

        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkType</Name>
				<Source><![CDATA[
    private container validateWorkType(boolean _valid)
    {
        boolean                  valid = _valid;
        WHSWorkTemplateLine      workTemplateLine;
        WHSWorkTemplateErrorText errorText;

        if (valid && this.WorkTransType == WHSWorkTransType::Replenishment)
        {
            select firstonly RecId, WorkType from workTemplateLine
                where workTemplateLine.WorkTransType == this.WorkTransType &&
                      workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode &&
                      (workTemplateLine.WorkType  == WHSWorkType::Count ||
                        workTemplateLine.WorkType == WHSWorkType::Adjustment ||
                        workTemplateLine.WorkType == WHSWorkType::Quarantine ||
                        workTemplateLine.WorkType == WHSWorkType::LicensePlateBuild ||
                        workTemplateLine.WorkType == WHSWorkType::PackToNestedLicensePlate);

            if (workTemplateLine.RecId)
            {
                errorText = strFmt("@WAX5800", enum2str(workTemplateLine.WorkType), enum2str(this.WorkTransType));
                valid = false;
            }
        }

        return [valid, errorText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        WHSWorkTemplateTable    workTemplateTable;
        boolean                 ret;

        ret = super();

        if (ret)
        {
            select firstonly RecId from workTemplateTable
                where workTemplateTable.WorkTransType        == this.WorkTransType        &&
                      workTemplateTable.WorkTemplatePriority == this.WorkTemplatePriority &&
                      workTemplateTable.WorkTemplateCode     != this.WorkTemplateCode;

            if (workTemplateTable.RecId != 0)
            {
                ret = checkFailed("@WAX1350");
            }
            else
            {
                if (this.MaxQty && !this.MaxUnitId)
                {
                    ret = checkFailed("@WAX1797");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyWorkTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies work template info for a new work template code.
    /// </summary>
    /// <param name="_workTransType">
    /// Transaction type of the work template to be copied.
    /// </param>
    /// <param name="_workTemplateCode">
    /// Template code of the work template to be copied.
    /// </param>
    /// <param name="_copyWorkTemplateCode">
    /// Template code of the copied work template.
    /// </param>
    public static void copyWorkTemplate(
        WHSWorkTransType    _workTransType,
        WHSWorkTemplateCode _workTemplateCode,
        WHSWorkTemplateCode	_copyWorkTemplateCode)
    {
        ttsbegin;

        // Copy the header
        WHSWorkTemplateTable	workTemplateTable = WHSWorkTemplateTable::find(_workTemplateCode, _workTransType);
        WHSWorkTemplateTable	copyWorkTemplateTable;

        buf2Buf(workTemplateTable, copyWorkTemplateTable);
        copyWorkTemplateTable.WorkTemplateCode = _copyWorkTemplateCode;
        copyWorkTemplateTable.WorkTemplatePriority = WHSWorkTemplateTable::getHighestPriority(_workTransType) + 1;

        if (!copyWorkTemplateTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSWorkTemplateTable)));
        }
        else
        {
            copyWorkTemplateTable.insert();
        }

        // Copy the grouping
        WHSWorkTemplateGroup    workTemplateGroup;
        WHSWorkTemplateGroup    copyWorkTemplateGroup;
        RefRecId				copyWorkTemplateTableRecId	= copyWorkTemplateTable.RecId;

        insert_recordset copyWorkTemplateGroup (GroupFieldId, GroupTableId, LineNum, RefRecId, WorkGroupBy)
            select GroupFieldId, GroupTableId, LineNum, copyWorkTemplateTableRecId, WorkGroupBy from workTemplateGroup
                where workTemplateGroup.RefRecId == workTemplateTable.RecId;

        // Copy the lines
        WHSWorkTemplateLine workTemplateLine;
        WHSWorkTemplateLine	copyWorkTemplateLine;

        while select workTemplateLine
            where workTemplateLine.WorkTransType     == _workTransType   &&
                  workTemplateLine.WorkTemplateCode  == _workTemplateCode
        {
            buf2Buf(workTemplateLine, copyWorkTemplateLine);
            copyWorkTemplateLine.WorkTemplateCode = _copyWorkTemplateCode;
            copyWorkTemplateLine.insert();

            // This is just a performance optimization as the WHSWorkTemplateLineGroup records can only be created for cycle counting work templates.
            if (workTemplateTable.WorkTransType == WHSWorkTransType::CycleCount)
            {
                WHSWorkTemplateLineGroup    workTemplateLineGroup;
                WHSWorkTemplateLineGroup    copyWorkTemplateLineGroup;
                WHSWorkTemplateLineRecId	copyWorkTemplateLineRecId	= copyWorkTemplateLine.RecId;

                insert_recordset copyWorkTemplateLineGroup (GroupField, SequenceNumber, WorkTemplateLine)
                    select GroupField, SequenceNumber, copyWorkTemplateLineRecId from workTemplateLineGroup
                        where workTemplateLineGroup.WorkTemplateLine == workTemplateLine.RecId;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkTemplateTable</c> record exists.
	/// </summary>
	/// <param name="_workTemplateCode">
	/// Work template code of the record.
	/// </param>
	/// <param name="_workTransType">
	/// Transaction type of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSWorkTemplateCode _workTemplateCode, WHSWorkTransType _workTransType)
    {
        return _workTemplateCode && _workTransType &&
               (select firstonly RecId from whsWorkTemplateTable
                where whsWorkTemplateTable.WorkTemplateCode  == _workTemplateCode    &&
                      whsWorkTemplateTable.WorkTransType     == _workTransType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkTemplateTable</c> record with given parameters.
	/// </summary>
	/// <param name="_workTemplateCode">
	/// Work template code of the record.
	/// </param>
	/// <param name="_workTransType">
	/// Transaction type of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkTemplateTable find(
		WHSWorkTemplateCode	_workTemplateCode,
        WHSWorkTransType	_workTransType,
        boolean             _forupdate			= false)
    {
        WHSWorkTemplateTable    workTemplateTable;

        if (_workTemplateCode && _workTransType)
        {
            workTemplateTable.selectForUpdate(_forupdate);

            select firstonly workTemplateTable
                where workTemplateTable.WorkTemplateCode == _workTemplateCode    &&
                      workTemplateTable.WorkTransType    == _workTransType;
        }

        return workTemplateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHighestPriority</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the highest work template priority among the templates with the same transaction type.
	/// </summary>
	/// <param name="_workTransType">
	/// Transaction type of the work templates.
	/// </param>
	/// <returns>
	/// The highest work template priority among the templates with the same transaction type.
	/// </returns>
    public static WHSWorkTemplatePriority getHighestPriority(WHSWorkTransType _workTransType)
    {
        WHSWorkTemplateTable    workTemplateTable;

        select firstonly WorkTemplatePriority from workTemplateTable
            order by WorkTemplatePriority desc
            where workTemplateTable.WorkTransType == _workTransType;

        return workTemplateTable.WorkTemplatePriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxLineNum</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the maximum line number among the work template lines.
	/// </summary>
	/// <param name="_workTemplateCode">
	/// Work template code of the lines.
	/// </param>
	/// <param name="_workTransType">
	/// Transaction type of the lines.
	/// </param>
	/// <returns>
	/// The maximu line number among the work template lines.
	/// </returns>
    public static LineNum getMaxLineNum(WHSWorkTemplateCode _workTemplateCode, WHSWorkTransType _workTransType)
    {
        WHSWorkTemplateLine workTemplateLine;

        select maxof(LineNum) from workTemplateLine
            where workTemplateLine.WorkTemplateCode == _workTemplateCode
                && workTemplateLine.WorkTransType   == _workTransType;

        return workTemplateLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumLines</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the number of work template lines
	/// </summary>
	/// <param name="_workTemplateCode">
	/// Work template code of the lines.
	/// </param>
	/// <param name="_workTransType">
	/// Transaction type of the lines.
	/// </param>
	/// <returns>
	/// The number of work template lines.
	/// </returns>
    public static int getNumLines(WHSWorkTemplateCode _workTemplateCode, WHSWorkTransType _workTransType)
    {
        WHSWorkTemplateLine     workTemplateLine;

        select count(LineNum) from workTemplateLine
            where workTemplateLine.WorkTemplateCode  == _workTemplateCode &&
                  workTemplateLine.WorkTransType     == _workTransType;

        return real2int(workTemplateLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidWorkTransTypesForCreationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the set of work order types that can be matched with selected work creation process value.
    /// </summary>
    /// <param name="_workCreationProcess">
    /// The selected work creation process value.
    /// </param>
    /// <returns>
    /// A set of <c>WHSWorkTransType</c> enum values.
    /// </returns>
    public static Set getValidWorkTransTypesForCreationProcess(WHSWorkCreationProcess _workCreationProcess)
    {
        Set workTransType = new Set(Types::Enum);

        switch (_workCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                workTransType.add( WHSWorkTransType::Purch);
                break;

            case WHSWorkCreationProcess::ReportAsFinishedBySerial:
                workTransType.add(WHSWorkTransType::ProdPut);
                break;
            case WHSWorkCreationProcess::ReportAsFinished:
            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                workTransType.add(WHSWorkTransType::ProdPut);
                workTransType.add(WHSWorkTransType::ProdProcessPut);
                break;

            case WHSWorkCreationProcess::MovementByTemplate:
                workTransType.add(WHSWorkTransType::Invent);
                break;

            case WHSWorkCreationProcess::LoadItemReceiving:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                workTransType.add(WHSWorkTransType::TransferReceipt);
                workTransType.add(WHSWorkTransType::Purch);
                break;

            case WHSWorkCreationProcess::TransferOrderItemReceiving:
            case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderLineReceiving:
            case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                workTransType.add(WHSWorkTransType::TransferReceipt);
                break;

            case WHSWorkCreationProcess::KanbanPut:
                workTransType.add(WHSWorkTransType::KanbanPick);
                break;

            case WHSWorkCreationProcess::KanbanPutAndLocate:
                workTransType.add(WHSWorkTransType::KanbanPut);
                break;

            case WHSWorkCreationProcess::MixedLPReceiving:
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                workTransType.add(WHSWorkTransType::TransferReceipt);
                workTransType.add(WHSWorkTransType::Purch);
                break;
        }
        return workTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTemplateDetail</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the work template detail from first pick or last put line of the work template header.
	/// </summary>
	/// <param name="_templateCode">
	/// Template code of the lines.
	/// </param>
	/// <param name="_workType">
	/// Type indicating pick or put work.
	/// </param>
	/// <param name="_workTransType">
	/// Transaction type of the lines.
	/// </param>
    public static container getWorkTemplateDetail(
		WHSWorkTemplateCode	_templateCode,
		WHSWorkType			_workType,
		WHSWorkTransType	_workTransType)
    {
        WHSWorkTemplateLine     workTemplateLine;

        if (_workType == WHSWorkType::Pick)
        {
            select firstonly LineNum, WorkClassId from workTemplateLine
                order by workTemplateLine.LineNum asc
                where workTemplateLine.WorkTemplateCode  == _templateCode &&
                      workTemplateLine.WorkTransType     == _workTransType;
        }
        else if (_workType == WHSWorkType::Put)
        {
            select firstonly LineNum, WorkClassId from workTemplateLine
                order by workTemplateLine.LineNum desc
                where workTemplateLine.WorkTemplateCode  == _templateCode &&
                      workTemplateLine.WorkTransType     == _workTransType;
        }

        return [workTemplateLine.LineNum, workTemplateLine.WorkClassId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderWorkTemplateSequenceNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorders the work template sequence numbers so there are no gaps when templates are deleted.
    /// </summary>
    /// <param name="_workTransType">
    /// Work transaction type used to filter select to find templates for the same trans type
    /// </param>
    public static void reorderWorkTemplateSequenceNumbers(WHSWorkTransType _workTransType)
    {
        WHSWorkTemplateTable    workTemplateTable;
        WHSWorkTemplatePriority workTemplatePriority;

        ttsbegin;

        while select forupdate workTemplateTable
            order by workTemplateTable.WorkTemplatePriority
            where workTemplateTable.WorkTransType == _workTransType
        {
            if (workTemplateTable.WorkTemplatePriority > workTemplatePriority)
            {
                workTemplateTable.WorkTemplatePriority = workTemplatePriority;
                workTemplateTable.update();
            }

            workTemplatePriority++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMandatoryGroupingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the mandatory grouping fields for the record's work order type.
    /// </summary>
    /// <returns>A map with the mandatory grouping fields.</returns>
    public Map getMandatoryGroupingFields()
    {
        Map mandatoryGroupingFields = new Map(Types::Container, Types::String);

        switch (this.WorkTransType)
        {
            case WHSWorkTransType::ProdPick:
                mandatoryGroupingFields.insert([tableNum(WHSTmpWorkLine), fieldNum(WHSTmpWorkLine, ProdBOMOprNum)], "@SYP4881948");
                break;

            case WHSWorkTransType::Replenishment:
                mandatoryGroupingFields.insert([tableNum(WHSTmpWorkLine), fieldNum(WHSTmpWorkLine, ReplenLocationId)], "@WAX:ReplenishmentWorkTemplateMustBreakWorkByReplensLocId");
                break;
        }

        return mandatoryGroupingFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSWorkTemplateTable, AutoExecute):
                    ret = this.validateAutoExecute();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAutoExecute</Name>
				<Source><![CDATA[
    private boolean validateAutoExecute()
    {
        boolean ret = true;

        if (this.AutoExecute && !this.isAutoExecuteSupported())
        {
            ret = checkFailed(strFmt("@WAX:InvalidWorkTemplateFieldForWorkOrderType", fieldPName(WHSWorkTemplateTable, AutoExecute)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoExecuteSupported</Name>
				<Source><![CDATA[
    protected boolean isAutoExecuteSupported()
    {
        switch (this.WorkTransType)
        {
            case WHSWorkTransType::Sales:
            case WHSWorkTransType::ProdPick:
            case WHSWorkTransType::ProdPut:
            case WHSWorkTransType::TransferIssue:
            case WHSWorkTransType::KanbanPick:
            case WHSWorkTransType::ProdProcessPut:
                return true;

            case WHSWorkTransType::PackedContainerPicking:
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTemplateExistsForWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there exists any templates for the specified work transaction type.
    /// </summary>
    /// <param name = "_workTransType">The Work Transaction Type of the Work Template record.</param>
    /// <returns>true, if the template exists; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean validTemplateExistsForWorkTransType(WHSWorkTransType _workTransType)
    {
        return (select firstOnly RecId from WHSWorkTemplateTable
                    where WHSWorkTemplateTable.WorkTransType        == _workTransType &&
                          WHSWorkTemplateTable.WorkTemplateValid    == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets work template header query run depending on the work transaction type.
    /// </summary>
    public void initQuery()
    {
        QueryRun queryRun;

        if (this.WorkTemplateQuery)
        {
            queryRun = new QueryRun(this.WorkTemplateQuery);
        }

        if (!queryRun)
        {
            queryRun = this.defaultPackedQueryRun();
            WHSWorkTemplateGroup::createGroups(this.RecId, queryRun, this.getMandatoryGroupingFields());
        }

        if (queryRun)
        {
            queryRun.name(strFmt('%1', this.WorkTemplateCode));
            this.WorkTemplateQuery = queryRun.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPackedQueryRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal QueryRun defaultPackedQueryRun()
    {
        QueryRun queryRun;

        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(this.WorkTransType);

        if (workTransactionType)
        {
            QueryName queryName = workTransactionType.workTemplateQueryName(this);
            if (queryName)
            {
                queryRun = new QueryRun(queryName);
            }

            if (queryRun)
            {
                queryRun.name(strFmt('%1', this.WorkTemplateCode));
            }
        }

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4511</DeveloperDocumentation>
	<Label>@WAX519</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkTemplateCode</TitleField1>
	<TitleField2>WorkTemplateDesc</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkTemplateCodeWorkTransTypeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkTemplateCodeWorkTransTypeIdx</PrimaryIndex>
	<ReplacementKey>WorkTemplateCodeWorkTransTypeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSWorkTemplateGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSWorkTemplateGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSWorkTemplateLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSWorkTemplateLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplatePriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateErrorText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsePackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoExecute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultWorkPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchAllocationStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplenishmentDependentWorkBlockingPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitCrossDockWorkAtLicensePlateReceiving</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplatePriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateErrorText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsePackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoExecute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultWorkPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchAllocationStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplenishmentDependentWorkBlockingPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitCrossDockWorkAtLicensePlateReceiving</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkHeaderMaximums</Name>
			<Label>@WAX:WorkHeaderMaximums</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaxEstimatedPickTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPickLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxQtyWorkHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxVolumeWorkHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxWeightWorkHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoExecute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAutoExecute</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchAllocationStrategy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSBatchAllocationStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DefaultWorkPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkPriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MaxUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxUnitId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxVolume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UsePackingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUsePackingQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkPoolId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTemplateCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTemplateDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTemplateErrorText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateErrorText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkTemplatePriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplatePriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WorkTemplateQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTemplateValid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateValid</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxEstimatedPickTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxEstimatedPickTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxPickLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxPickLines</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxQtyWorkHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxQtyWorkHeader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxVolumeWorkHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxVolumeWorkHeader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxWeightWorkHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxWeightWorkHeader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReplenishmentDependentWorkBlockingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSReplenishmentDependentWorkBlockingPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LicensePlateLabelBuildConfig</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateLabelBuildConfigRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SplitCrossDockWorkAtLicensePlateReceiving</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSSplitCrossDockWorkAtLicensePlateReceiving</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkTemplateCodeWorkTransTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkTransTypeWorkTemplatePriorityI</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTemplatePriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MaxUnitId</Name>
					<Field>MaxUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkPoolId</Name>
					<SourceEDT>WHSWorkPoolId</SourceEDT>
					<Field>WorkPoolId</Field>
					<RelatedField>WorkPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLicensePlateLabelBuildConfig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLicensePlateLabelBuildConfig</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateLabelBuildConfig</Name>
					<Field>LicensePlateLabelBuildConfig</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>