<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayTblTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEmplOrganization</Name>
				<Source><![CDATA[
    private boolean checkEmplOrganization()
    {
        boolean                 ret = false;
        RPayTblJournal          rPayTblJournal = this.rpayTblJournal();
        StartDate               startDate = dateStartMth(rPayTblJournal.TblDate);
        EndDate                 endDate = endmth(rPayTblJournal.TblDate);
        RPayHistory             rPayHistory;

        if (RHRMEmplTable::find(this.EmplId).PayFormType == rPayTblJournal.PayFormType)
        {
            if (RPayHistory::findLastSignOnMove(this.EmplId, startDate).HrmOrganizationId == rPayTblJournal.HrmOrganizationId)
            {
                ret = true;
            }
            else
            {
                select firstonly RecId from rPayHistory
                    where rPayHistory.Number == this.EmplId &&
                          rPayHistory.HrmOrganizationId == rPayTblJournal.HrmOrganizationId &&
                          rPayHistory.StartDate >= startDate &&
                          rPayHistory.StartDate <= endDate;

                if (rPayHistory.RecId != 0)
                {
                    ret = true;
                }
            }
        }

        if (! ret)
        {
            warning(strFmt("@RUP6024",
                rPayTblJournal.HrmOrganizationId,
                rPayTblJournal.PayFormType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RPayTblTransDocRelation relationTable;

        RPayTblEmplSum::deleteOrUpdate(this);

        delete_from relationTable
            where relationTable.TblTransRecId == this.RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCalendarTable</Name>
				<Source><![CDATA[
    #RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromCalendarTable(TransDate            _dateStart,
                                             TransDate            _dateEnd,
                                             boolean              _add = true,
                                             RPayCalendarTimeCode _rPayCalendarTimeCode = "")
    {
        RPayTblTimeTable     rPayTblTimeTable;
        RPayDayHour          rPayDayHour;
        RPayTblJournal       rPayTblJournal = this.rpayTblJournal();
        RPayCalendarDateLine rPayCalendarDateLine;
        RPayCalendarTimeTrans   timeTrans;

        #localMacro.payCalendarTimeCode
           #default(_rPayCalendarTimeCode,rPayTblTimeTable.rPayTblTimeTable.PayTblTimeCode)
        #endMacro

        RPayCalendarTimeCode defaultTimeCode()
        {
            return (_rPayCalendarTimeCode) ? _rPayCalendarTimeCode : rPayTblTimeTable.PayTblTimeCode;
        }

        void updateField(RPayDayHour            _value,
                         RPayCalendarTimeCode   _timeCode,
                         RPayDayHourCalc        _dayHour)
        {
            if (!this.RecId)
            {
                throw Exception::Error;
            }

            timeTrans = RPayCalendarTimeTrans::findByTimeCode(this.RecId, _timeCode, true);

            if (_value)
            {
                if (_add)
                {
                    timeTrans.dayHour(_dayHour, timeTrans.dayHour(_dayHour) + _value);
                }
                else
                {
                    timeTrans.dayHour(_dayHour, max(0, timeTrans.dayHour(_dayHour) - _value));
                }
            }

            if (timeTrans)
            {
                timeTrans.update();
            }
            else
            {
                timeTrans.TblTransRecId = this.RecId;
                timeTrans.PayCalendarTimeCode = _timeCode;
                timeTrans.insert();
            }
        }

        while select PayTblTimeTypeCalc, PayTblTimeCode from rPayTblTimeTable
            where rPayTblTimeTable.PayFormType == rPayTblJournal.PayFormType
        exists join rPayCalendarDateLine
            where rPayCalendarDateLine.PayCalendarTimeCode == rPayTblTimeTable.PayTblTimeCode &&
                  rPayCalendarDateLine.CalendarId          == this.PayCalendarId              &&
                  rPayCalendarDateLine.TransDate           >= _dateStart                      &&
                  rPayCalendarDateLine.TransDate           <= _dateEnd
        {
            switch (rPayTblTimeTable.PayTblTimeTypeCalc)
            {
                case RPayTblTimeTypeCalc::Hours:
                    rPayDayHour = RPayCalendarTable::periodWorkHours(this.PayCalendarId,
                                                                     _dateStart,
                                                                     _dateEnd,
                                                                     rPayTblTimeTable.PayTblTimeCode);

                    updateField(rPayDayHour, defaultTimeCode(), RPayDayHourCalc::Hour);
                    break;
                case RPayTblTimeTypeCalc::Days:
                    rPayDayHour = RPayCalendarTable::periodWorkDays(this.PayCalendarId,
                                                                    _dateStart,
                                                                    _dateEnd,
                                                                    rPayTblTimeTable.PayTblTimeCode);
                    updateField(rPayDayHour, defaultTimeCode(), RPayDayHourCalc::Day);
                    break;
                case RPayTblTimeTypeCalc::Both:
                    rPayDayHour = RPayCalendarTable::periodWorkDays(this.PayCalendarId,
                                                                    _dateStart,
                                                                    _dateEnd,
                                                                    rPayTblTimeTable.PayTblTimeCode);
                    updateField(rPayDayHour, defaultTimeCode(), RPayDayHourCalc::Day);

                    rPayDayHour = RPayCalendarTable::periodWorkHours(this.PayCalendarId,
                                                                     _dateStart,
                                                                     _dateEnd,
                                                                     rPayTblTimeTable.PayTblTimeCode);
                    updateField(rPayDayHour, defaultTimeCode(), RPayDayHourCalc::Hour);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEmplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromEmplTable()
    {
        RHRMEmplTable       emplTable      = RHRMEmplTable::find(this.EmplId);
        RPayTblJournal      rPayTblJournal = RPayTblJournal::find(this.PayTblNum);
        int                 i;
        DictType            dictTypeCode;
        RPayRateCallContext context;

        if (! RPayTblTransFormCreate::checkExtendedTypes())
        {
            throw error("@GLS101992");
        }

        this.SourceDate         = rPayTblJournal.TblDate;
        this.CorrectedPeriod    = this.SourceDate;
        this.HcmTitle           = emplTable.HcmTitle;
        this.PayCalendarId      = emplTable.PayCalendarId;

        dictTypeCode  = new DictType(extendedTypeNum(RPayTblRateCode));

        for (i = 1; i <= dictTypeCode.arraySize(); i ++)
        {
            context = new RPayRateCallContext();
            context.parmEmployeeId(this.EmplId);
            context.parmRateDate(rPayTblJournal.TblDate);
            this.Stavka[i] = RPayRateTable::find(rPayTblJournal.PayRate[i]).getValue(context);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        RPayTblEmplSum::calculateEmpl(this.EmplId, this.SourceDate, this.PayCalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payEmplName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display  EmplName payEmplName()
    {
        return RHRMEmplTable::find(this.EmplId).personTable().fio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>payEmplNameFull</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EmplName payEmplNameFull()
    {
        return RHRMEmplTable::find(this.EmplId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpayTblJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblJournal rpayTblJournal(boolean _forUpdate = false)
    {
        return RPayTblJournal::find(this.PayTblNum, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>titleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title.
    /// </summary>
    /// <returns>
    /// The title.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display public HcmTitleId titleId()
    {
        return HcmTitle::find(this.HcmTitle).TitleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDayHour</Name>
				<Source><![CDATA[
    #RPayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblDayHour transDayHour(RPayDayHourCalc   _payDayHourCalc,
                                              RPayTblTimeCode   _payTblTimeCode,
                                              boolean           _tillCalcDate = false)
    {
        RPayTblJournal      payTblJounral       = this.rpayTblJournal();
        RPayTblDayHourTrans payTblDayHourTrans;
        RPayCalcDate        calcDate            = RPayParameters::calcDate(this.EmplId);
        Integer             day;
        FieldId             fieldId;
        RPayTblDayHour      dayHour;

        if (_tillCalcDate                                             &&
            this.SourceDate == RPayParameters::payPeriod(this.EmplId) &&
            payTblJounral.PayTblType == RPayTblType::EveryDay         &&
            calcDate != this.SourceDate)
        {
            while select payTblDayHourTrans
                where payTblDayHourTrans.TblTransRecId  == this.RecId &&
                      payTblDayHourTrans.PayTblTimeCode == _payTblTimeCode
            {
                for (day = 1; day <= dayOfMth(calcDate); day ++)
                {
                    fieldId = fieldName2id(tableNum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(day));

                    dayHour += _payDayHourCalc == RPayDayHourCalc::Day ?
                               RPayCalendarTable::hoursToDay(payTblDayHourTrans.(fieldId)) :
                               any2real(payTblDayHourTrans.(fieldId));
                }
            }
        }
        else
        {
            dayHour += RPayCalendarTimeTrans::findByTimeCode(this.RecId, _payTblTimeCode).dayHour(_payDayHourCalc);
        }

        return dayHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDayHourGroup</Name>
				<Source><![CDATA[
    #RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblDayHour transDayHourGroup(RPayDayHourCalc   _payDayHourCalc,
                                                   RpayTimeGroupCode _rpayTimeGroupCode,
                                                   boolean           _tillCalcDate       = false)
    {
        RPayTblJournal      payTblJounral       = this.rpayTblJournal();
        RPayTblDayHourTrans payTblDayHourTrans;
        RPayCalcDate        calcDate            = RPayParameters::calcDate(this.EmplId);
        Integer             day;
        FieldId             fieldId;
        RPayTblDayHour      dayHour;
        RPayTimeGroupMember rPayTimeGroupMember;

        if (_tillCalcDate                                             &&
            this.SourceDate == RPayParameters::payPeriod(this.EmplId) &&
            payTblJounral.PayTblType == RPayTblType::EveryDay         &&
            calcDate != this.SourceDate)
        {
            while select payTblDayHourTrans
                where payTblDayHourTrans.TblTransRecId == this.RecId
                exists join rPayTimeGroupMember
                    where rPayTimeGroupMember.PayCalendarTimeCode == payTblDayHourTrans.PayTblTimeCode &&
                          rPayTimeGroupMember.TimeGroup           == _rpayTimeGroupCode
            {
                for (day = 1; day <= dayOfMth(calcDate); day ++)
                {
                    fieldId = fieldName2id(tableNum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(day));

                    dayHour += _payDayHourCalc == RPayDayHourCalc::Day                     ?
                               RPayCalendarTable::hoursToDay(payTblDayHourTrans.(fieldId)) :
                               any2real(payTblDayHourTrans.(fieldId));
                }
            }
        }
        else
        {
            while select PayCalendarTimeCode from rPayTimeGroupMember
                where rPayTimeGroupMember.TimeGroup == _rpayTimeGroupCode
            {
                dayHour += RPayCalendarTimeTrans::findByTimeCode(this.RecId, rPayTimeGroupMember.PayCalendarTimeCode).dayHour(_payDayHourCalc);
            }
        }

        return dayHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ReportPeriod_RU oldPayPeriod = this.orig().SourceDate;

        ttsbegin;
        super();

        // update total employee time
        RPayTblEmplSum::updateFactTime(this.EmplId, this.SourceDate, this.PayCalendarId);
        if (oldPayPeriod != this.SourceDate)
            RPayTblEmplSum::updateFactTime(this.EmplId, oldPayPeriod, this.PayCalendarId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = RPayController::canModuleChanged(true, this.EmplId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    #define.Value5(5)
    #define.Value4(4)
    #RpayTblConstants
    #RpayModuleName
    public boolean validateField(FieldId _p1)
    {
        boolean           ret;
        DictField         dictField = new DictField(tableNum(RPayTblTrans),_p1);
        RPayTblJournal    payTblJournal;
        RPayCalculate_Tbl payCalculate;
        FormRun           formRun;
        FormObjectSet     formObjectSet;
        #define.dataSourceName("PayTrans")

        ret = super(_p1);

        if (ret)
        {
            ret = RPayController::canModuleChanged(true, this.EmplId);
        }

        switch (_p1)
        {
            case fieldNum(RPayTblTrans, EmplId):
                ret = ret && this.checkEmplOrganization();
                break;
        }

        if (ret && this.RecId)
        {
            if (fieldExt2Id(_p1) == fieldNum(RPayTblTrans, Stavka)        ||
               _p1              == fieldNum(RPayTblTrans, PayCalendarId) ||
               _p1              == fieldNum(RPayTblTrans, HcmTitle)         ||
               _p1              == fieldNum(RPayTblTrans, SourceDate))
            {
                payTblJournal = RPayTblJournal::find(this.PayTblNum);
                this.SourceDate = endmth(this.SourceDate);

                if (payTblJournal.Interactive == NoYes::Yes)
                {
                    payCalculate = new RPayCalculate_Tbl(RPayModuleTable::find(#ModuleNameTbl));
                    payCalculate.setSourceTable(this);
                    payCalculate.payPeriod(payTblJournal.TblDate);
                    payCalculate.calcCommon(0,NoYes::Yes);
                }
                else
                {
                    if (this.EmplId)
                    {
                        RPayEmplCalculate::lastChangeAdd(this.EmplId,#ModuleNameTbl);
                    }
                }
            }
            if (FormDataUtil::getFormDataSource(this))
            {
                formRun = FormDataUtil::getFormDataSource(this).formRun();
            }
            if (formRun)
            {
                formObjectSet = formRun.dataSource(#dataSourceName);
            }
            if (formObjectSet)
            {
                formObjectSet.research();
            }
        }
        if (infolog.num())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            if (this.SourceDate)
            {
                this.SourceDate = endmth(this.SourceDate);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find timesheet totals table record by reference id.
    /// </summary>
    /// <param name="_recId">
    /// The reference id.
    /// </param>
    /// <param name="_forUpdate">
    /// The indicator, if true record will be selected for update.
    /// </param>
    /// <returns>
    /// The <c>RPayTblTrans</c> table record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTblTrans findRecId(RefRecId _recId, boolean _forUpdate = false)
    {
        RPayTblTrans rPayTblTrans;

        rPayTblTrans.selectForUpdate(_forUpdate);

        select rPayTblTrans
            where rPayTblTrans.RecId     == _recId;

        return rPayTblTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTimesheetPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets last timesheet period for employee
    /// </summary>
    /// <param name="_emplId">
    /// Employee Id
    /// </param>
    /// <param name="_dateFrom">
    /// Fromm date
    /// </param>
    /// <returns>
    /// Last period
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReportPeriod_RU lastTimesheetPeriod(RHRMEmplId _emplId, StartDate _dateFrom)
    {
        RPayTblTrans tblTrans;

        select firstOnly sourceDate from tblTrans
            order by sourceDate desc
            where  tblTrans.EmplId     == _emplId
                && tblTrans.SourceDate >= _dateFrom;

        return tblTrans.SourceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>realDayHour</Name>
				<Source><![CDATA[
    #RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTblDayHour realDayHour(ReportPeriod_RU      _payPeriod,
                                                    RHRMEmplId           _emplId,
                                                    RPayDayHourCalc      _payDayHourCalc,
                                                    RPayCalendarTimeCode _rPayCalendarTimeCode,
                                                    RPayCalendarId       _payCalendarId = '',
                                                    boolean              _tillCalcDate  = false)
    {
        RPayTblTrans        payTblTrans;
        RPayTblDayHourTrans payTblDayHourTrans;
        RPayTblJournal      payTblJournal;
        RPayCalcDate        calcDate = RPayParameters::calcDate(_emplId);
        Integer             day;
        FieldId             fieldId;
        RPayTblDayHour      dayHour;
        RPayCalendarTimeTrans   timeTrans;

        select firstonly PayTblType from payTblJournal
            exists join payTblTrans
                where payTblJournal.TblNum      == payTblTrans.PayTblNum &&
                      payTblTrans.EmplId        == _emplId               &&
                      payTblTrans.SourceDate    == _payPeriod            &&
                     (payTblTrans.PayCalendarId == _payCalendarId        ||
                      ! _payCalendarId);

        if (_tillCalcDate                                     &&
            _payPeriod == RPayParameters::payPeriod(_emplId)  &&
            payTblJournal.PayTblType == RPayTblType::EveryDay &&
            calcDate != _payPeriod)
        {
            while select payTblDayHourTrans
                where payTblDayHourTrans.PayTblTimeCode == _rPayCalendarTimeCode
                exists join payTblTrans
                    where payTblTrans.RecId             == payTblDayHourTrans.TblTransRecId &&
                          payTblTrans.EmplId            == _emplId                          &&
                          payTblTrans.SourceDate        == _payPeriod                       &&
                         (payTblTrans.PayCalendarId     == _payCalendarId                   ||
                          ! _payCalendarId)
            {
                for (day = 1; day <= dayOfMth(calcDate); day ++)
                {
                    fieldId = fieldName2id(tableNum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(day));

                    dayHour += _payDayHourCalc == RPayDayHourCalc::Day                     ?
                               RPayCalendarTable::hoursToDay(payTblDayHourTrans.(fieldId)) :
                               any2real(payTblDayHourTrans.(fieldId));
                }
            }
        }
        else
        {
            while select RecId from payTblTrans
                where payTblTrans.EmplId            == _emplId        &&
                      payTblTrans.SourceDate        == _payPeriod     &&
                     (payTblTrans.PayCalendarId     == _payCalendarId ||
                      ! _payCalendarId)
                join timeTrans
                where timeTrans.TblTransRecId == payTblTrans.RecId
                   && timeTrans.PayCalendarTimeCode == _rPayCalendarTimeCode
            {
                dayHour += timeTrans.dayHour(_payDayHourCalc);
            }
        }

        return dayHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>realDayHourGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates real days/hours basd on time sheet.
    /// </summary>
    /// <param name="_payPeriod">
    /// Calculation period.
    /// </param>
    /// <param name="_emplId">
    /// Employee's number.
    /// </param>
    /// <param name="_payDayHourCalc">
    /// Determines whether days or hours should be calculated.
    /// </param>
    /// <param name="_rpayTimeGroupCode">
    /// The time group.
    /// </param>
    /// <param name="_tillCalcDate">
    /// Calculate only till calculation date.
    /// </param>
    /// <param name="_reportPeriod">
    /// Reporting date.
    /// </param>
    /// <returns>
    /// The sum of real days/hours for specified employee.
    /// </returns>
#RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTblDayHour realDayHourGroup(ReportPeriod_RU   _payPeriod,
                                                         RHRMEmplId        _emplId,
                                                         RPayDayHourCalc   _payDayHourCalc,
                                                         RpayTimeGroupCode _rpayTimeGroupCode,
                                                         boolean           _tillCalcDate = false,
                                                         ReportPeriod_RU   _reportPeriod = maxDate())
    {
        RPayTblTrans        payTblTrans;
        RPayTblDayHourTrans payTblDayHourTrans;
        RPayTblJournal      payTblJournal, payTblJournalExists;
        RPayCalcDate        calcDate = RPayParameters::calcDate(_emplId);
        Integer             day;
        FieldId             fieldId;
        RPayTblDayHour      dayHour;
        RPayTimeGroupMember rPayTimeGroupMember;
        RPayCalendarTimeTrans   timeTrans;

        select firstonly PayTblType from payTblJournal
            where payTblJournal.TblDate <= _reportPeriod
            exists join payTblTrans
                where payTblJournal.TblNum          == payTblTrans.PayTblNum &&
                      payTblTrans.EmplId            == _emplId               &&
                      payTblTrans.SourceDate == _payPeriod;

        if (_tillCalcDate                                     &&
            _payPeriod == RPayParameters::payPeriod(_emplId)  &&
            payTblJournal.PayTblType == RPayTblType::EveryDay &&
            calcDate != _payPeriod)
        {
            while select payTblDayHourTrans
                exists join payTblTrans
                    where payTblTrans.RecId             == payTblDayHourTrans.TblTransRecId &&
                          payTblTrans.EmplId            == _emplId                          &&
                          payTblTrans.SourceDate == _payPeriod
                exists join rPayTimeGroupMember
                    where rPayTimeGroupMember.PayCalendarTimeCode == payTblDayHourTrans.PayTblTimeCode &&
                          rPayTimeGroupMember.TimeGroup           == _rpayTimeGroupCode
                exists join payTblJournalExists
                    where payTblJournalExists.TblNum    == payTblTrans.PayTblNum &&
                          payTblJournalExists.TblDate   <= _reportPeriod
            {
                for (day = 1; day <= dayOfMth(calcDate); day ++)
                {
                    fieldId = fieldName2id(tableNum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(day));

                    dayHour += _payDayHourCalc == RPayDayHourCalc::Day                     ?
                               RPayCalendarTable::hoursToDay(payTblDayHourTrans.(fieldId)) :
                               any2real(payTblDayHourTrans.(fieldId));
                }
            }
        }
        else
        {
            while select PayCalendarTimeCode from rPayTimeGroupMember
                where rPayTimeGroupMember.TimeGroup == _rpayTimeGroupCode
            {
                while select RecId from payTblTrans
                     where payTblTrans.EmplId == _emplId &&
                           payTblTrans.SourceDate == _payPeriod
                    join timeTrans
                       where timeTrans.TblTransRecId == payTblTrans.RecId
                       && timeTrans.PayCalendarTimeCode == rPayTimeGroupMember.PayCalendarTimeCode
                exists join payTblJournalExists
                    where payTblJournalExists.TblNum    == payTblTrans.PayTblNum &&
                          payTblJournalExists.TblDate   <= _reportPeriod
                {
                    dayHour += timeTrans.dayHour(_payDayHourCalc);
                }
            }
        }

        return dayHour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RPayTbl</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6025</DeveloperDocumentation>
	<Label>@RUP404</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>EmplId</TitleField1>
	<TitleField2>Stavka</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TableNumEmplIdx</ClusteredIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>TableNumEmplIdx</PrimaryIndex>
	<ReplacementKey>TableNumEmplIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RPayTblDayHourTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RPayTblDayHourTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RPayTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RPayTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Stavka</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayTblNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Stavka</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DayTimeValues</Name>
			<Label>@SYS71961</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RateGroup</Name>
			<Label>@GLS100811</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Stavka</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCorrectedPeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmplId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RHRMEmplId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmTitle</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RHRMTitleRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCalendarId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCalendarId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayTblNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayTblNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SourceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
			<Label>@RUP393</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Stavka</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayTblRateValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableNumEmplIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PayTblNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EmplId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayCalendarId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Stavka</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HcmTitle</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmTitle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmTitle</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmTitle</Name>
					<Field>HcmTitle</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PayTblDayHourTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayTblDayHourTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PayTblDayHourTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTblTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>TblTransRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMEmplTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>RHRMEmplTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMEmplTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTblTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmplId</Name>
					<SourceEDT>RHRMEmplId</SourceEDT>
					<Field>EmplId</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayCalendarTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayCalendarTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RPayTblTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCalendarId</Name>
					<SourceEDT>RPayCalendarId</SourceEDT>
					<Field>PayCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayTblJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayTblJournal</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTblJournal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTblTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayTblNum</Name>
					<SourceEDT>RPayTblNum</SourceEDT>
					<Field>PayTblNum</Field>
					<RelatedField>TblNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>