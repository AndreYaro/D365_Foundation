<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzVendAdvanceInvoiceLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CzVendAdvanceInvoiceLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advanceInvoiceTable</Name>
				<Source><![CDATA[
    public CzAdvanceInvoiceTable advanceInvoiceTable(
        CompanyId   _company  = this.InvoiceCompany,
        RefRecId    _refRecId = this.AdvanceInvoiceRecId)
    {
        return CzVendAdvanceInvoiceTable::findByCompany(_company, _refRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentPosted</Name>
				<Source><![CDATA[
    display CzPaymentPosted isPaymentPosted(CompanyId _company   = this.PaymentCompany,
                                            Voucher   _voucher   = this.Voucher,
                                            TransDate _transDate = this.TransDate)
    {
        VendTrans vendTrans;

        changecompany(_company)
        {
            vendTrans = VendTrans::findVoucherDate(_voucher, _transDate);
        }

        return vendTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    public container paymentAmount(CompanyId _company   = this.PaymentCompany,
                                   Voucher   _voucher   = this.Voucher,
                                   TransDate _transDate = this.TransDate)
    {
        Amount       amount;
        CurrencyCode currency;

        VendTrans          vendTrans;
        LedgerJournalTrans journalTrans;

        changecompany(_company)
        {
            if (this.isPaymentPosted(_company, _voucher, _transDate))
            {
                select firstonly sum(AmountCur), sum(SettleAmountCur), CurrencyCode from vendTrans
                    group by CurrencyCode
                    where vendTrans.Voucher   == _voucher &&
                          vendTrans.TransDate == _transDate;

                amount   = vendTrans.AmountCur - vendTrans.SettleAmountCur;
                currency = vendTrans.CurrencyCode;
            }
            else
            {
                select firstonly AmountCurDebit, AmountCurCredit, CurrencyCode from journalTrans
                    where journalTrans.Voucher     == _voucher   &&
                          journalTrans.TransDate   == _transDate &&
                         (journalTrans.AccountType       == LedgerJournalACType::Vend ||
                          journalTrans.OffsetAccountType == LedgerJournalACType::Vend);

                amount   = journalTrans.amount();
                currency = journalTrans.CurrencyCode;
            }
        }

        return [ amount, currency ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAdvance</Name>
				<Source><![CDATA[
    public static boolean existsAdvance(CompanyId _company, CzVendAdvanceInvoiceRecId _recId)
    {
        CzVendAdvanceInvoiceLink ret;

        if (_recId)
        {
            select firstonly crosscompany RecId from ret
                where ret.InvoiceCompany        == _company
                   && ret.AdvanceInvoiceRecId   == _recId;
        }

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNonLinkedPayment</Name>
				<Source><![CDATA[
    public static boolean existsNonLinkedPayment(CompanyId _company, DirPartyRecId _party)
    {
        CzVendAdvanceInvoiceLink    advanceInvoiceLink;
        VendTable                   vendTable;
        boolean                     ret;
        container                   sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_company);

        for (int idx = 1; idx <= conLen(sharedServiceCompanies); idx++)
        {
            changecompany(conPeek(sharedServiceCompanies, idx))
            {
                VendTrans trans;

                select firstonly RecId from trans
                exists join vendTable
                where   trans.AccountNum  == vendTable.AccountNum
                    &&   vendTable.Party == _party
                    &&   trans.Prepayment
                    && ! trans.Closed
                notexists join advanceInvoiceLink
                where advanceInvoiceLink.PaymentCompany == trans.DataAreaId
                    && advanceInvoiceLink.Voucher        == trans.Voucher
                    && advanceInvoiceLink.TransDate      == trans.TransDate;

                if (trans)
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherAdvance</Name>
				<Source><![CDATA[
    public static boolean existsOtherAdvance(CompanyId                 _invoiceCompany,
                                                    CzVendAdvanceInvoiceRecId _recId,
                                                    CompanyId                 _paymentCompany,
                                                    Voucher                   _voucher,
                                                    TransDate                 _transDate)
    {
        CzVendAdvanceInvoiceLink ret;

        select firstonly crosscompany RecId from ret
            where (ret.InvoiceCompany      != _invoiceCompany
               ||  ret.AdvanceInvoiceRecId != _recId)
               &&  ret.PaymentCompany      == _paymentCompany
               &&  ret.Voucher             == _voucher
               &&  ret.TransDate           == _transDate;

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherPayment</Name>
				<Source><![CDATA[
    public static boolean existsOtherPayment(CompanyId                 _invoiceCompany,
                                                    CzVendAdvanceInvoiceRecId _recId,
                                                    CompanyId                 _paymentCompany,
                                                    Voucher                   _voucher,
                                                    TransDate                 _transDate)
    {
        CzVendAdvanceInvoiceLink ret;

        select firstonly crosscompany RecId from ret
            where  ret.InvoiceCompany       == _invoiceCompany
               &&  ret.AdvanceInvoiceRecId  == _recId
               && (ret.PaymentCompany       != _paymentCompany
               ||  ret.Voucher              != _voucher
               ||  ret.TransDate            != _transDate);

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPaymentForOrder</Name>
				<Source><![CDATA[
    // select open prepayment, linked to (non-closed) advance invoice
    // which belongs to given purchase order
    public static boolean existsPaymentForOrder(CompanyId _invoiceCompany, PurchId _orderId)
    {
        CzVendAdvanceInvoiceTable advanceInvoiceTable;
        CzVendAdvanceInvoiceLink  advanceInvoiceLink;
        VendTrans                 trans;
        boolean                   ret;

        changecompany(_invoiceCompany)
        {
            select advanceInvoiceTable
                where advanceInvoiceTable.PurchId == _orderId &&
                      advanceInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed;

            while (advanceInvoiceTable && ! ret)
            {
                select crosscompany advanceInvoiceLink
                    where advanceInvoiceLink.InvoiceCompany      == _invoiceCompany &&
                          advanceInvoiceLink.AdvanceInvoiceRecId == advanceInvoiceTable.RecId;

                while (advanceInvoiceLink && ! ret)
                {
                    changecompany(advanceInvoiceLink.PaymentCompany)
                    {
                        trans = null;
                        select firstonly trans
                            where  trans.Voucher   == advanceInvoiceLink.Voucher   &&
                                   trans.TransDate == advanceInvoiceLink.TransDate &&
                                   trans.Prepayment                                &&
                                 ! trans.Closed;
                    }
                    if (trans)
                    {
                        ret = true;
                    }

                    next advanceInvoiceLink;
                }

                next advanceInvoiceTable;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPaymentLinkedToManual</Name>
				<Source><![CDATA[
    public static boolean existsPaymentLinkedToManual(CompanyId _company, VendAccount _account)
    {
        CzVendAdvanceInvoiceTable advanceInvoiceTable;
        CzVendAdvanceInvoiceLink  advanceInvoiceLink;
        VendTrans                 trans;
        boolean                   ret;
        VendTable                 vendTableExists;
        VendTable                 vendTable              = VendTable::find(_account);
        container                 sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_company);

        while select crosscompany:sharedServiceCompanies advanceInvoiceLink
        {
            changecompany(advanceInvoiceLink.InvoiceCompany)
            {
                advanceInvoiceTable = null;
                select firstonly advanceInvoiceTable
                    where ! advanceInvoiceTable.PurchId
                       &&   advanceInvoiceTable.RecId == advanceInvoiceLink.AdvanceInvoiceRecId;
            }

            if (advanceInvoiceTable)
            {
                changecompany(advanceInvoiceLink.PaymentCompany)
                {
                    trans = null;
                    vendTableExists = null;
                    select firstonly trans
                        exists join vendTableExists
                        where  trans.AccountNum         == vendTableExists.AccountNum
                           &&  vendTableExists.Party    == vendTable.Party
                           &&  trans.Voucher            == advanceInvoiceLink.Voucher
                           &&  trans.TransDate          == advanceInvoiceLink.TransDate
                           &&  trans.Prepayment
                           && !trans.Closed;
                }
            }

            if (advanceInvoiceTable && trans)
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CzCustVendAdvanceInvoices</ConfigurationKey>
	<CountryRegionCodes>CZ,HU,PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS221106</DeveloperDocumentation>
	<Label>@GLS111702</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>VoucherDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>VoucherDateIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvanceInvoiceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@GLS107927</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvanceInvoiceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCompany</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isPaymentPosted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentCompany</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvanceInvoiceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CzVendAdvanceInvoiceRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AdvanceInvoiceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymentCompany</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CzCustVendAdvanceInvoiceLink</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AdvanceInvoiceRecId</MapField>
					<MapFieldTo>AdvanceInvoiceRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceCompany</MapField>
					<MapFieldTo>InvoiceCompany</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentCompany</MapField>
					<MapFieldTo>PaymentCompany</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustVendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCompany</Name>
					<Field>PaymentCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CzVendAdvanceInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CzVendAdvanceInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvanceInvoiceRecId</Name>
					<SourceEDT>CzVendAdvanceInvoiceRecId</SourceEDT>
					<Field>AdvanceInvoiceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCompany</Name>
					<Field>InvoiceCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InvoiceCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>InvoiceCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCompany</Name>
					<Field>PaymentCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>PaymentCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>