<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventJournalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumberModified</Name>
				<Source><![CDATA[
    public void activityNumberModified()
    {
        this.initFromProjActivity(ProjActivity::find(this.ActivityNumber));

        this.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
        this.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(this.ProjCategoryId,this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assemblyBOMJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the associated assembly journal line.
    /// </summary>
    /// <param name="_forUpdate">
    ///    true if the record should be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    ///    An <c>InventJournalTrans</c> record.
    /// </returns>
    public InventJournalTrans assemblyBOMJournalLine(boolean _forUpdate = false)
    {
        InventJournalTrans  inventJournalTransAssembly;

        if (this.InventTransIdFather && this.bomLine && this.JournalType == InventJournalType::BOM)
        {
            inventJournalTransAssembly = InventJournalTrans::findInventTransId(this.InventTransIdFather, _forUpdate);
        }

        return inventJournalTransAssembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostAmount</Name>
				<Source><![CDATA[
    display public CostAmount calcCostAmount(InventQty  _qty   = intMin())
    {
        InventQty qty = _qty;

        if (qty == intMin())
        {
            qty = this.Qty;
            if (this.ProjUnitID)
            {
                qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                            this.InventDimId,
                                                                                            this.Qty,
                                                                                            this.ProjUnitID,
                                                                                            InventTable::find(this.ItemId).inventUnitId(),
                                                                                            NoYes::Yes);
            }
        }

        return PriceDisc::price2Amount(this.CostPrice,
                                       this.priceUnit(),
                                       0,
                                       qty,
                                       qty,
                                       this.CostMarkup,
                                       0,
                                       '',
                                       this.CostAmount,
                                       true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesAmountBOMLine</Name>
				<Source><![CDATA[
    public SalesAmount calcSalesAmountBOMLine()
    {
        if (this.bomLine)
        {
            return CurrencyExchangeHelper::amount(BOMCostProfit::calcSalesPrice(this.CostAmount, this.ProfitSet, this.inventTable().bomCalcGroup().CalcGroupId));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    private boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAmount</Name>
				<Source><![CDATA[
    public boolean  checkAmount()
    {
        boolean         ok  = true;

        if (this.CostAmount* this.Qty   < 0)
        {
            ok = checkFailed("@SYS3985");
        }

        if (this.CostAmount != CurrencyExchangeHelper::amount(this.CostAmount))
        {
            ok = checkFailed("@SYS2602");
        }

        if (this.CostAmount* this.SalesAmount < 0)
        {
            ok = checkFailed("@SYS15179");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssemblyBOMJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the relations between the BOM journal lines are correct.
    /// </summary>
    /// <returns>
    ///    true if the relations are ok; otherwise, false.
    /// </returns>
    public boolean checkAssemblyBOMJournalLine()
    {
        InventJournalTrans  inventJournalTransAssembly;
        boolean             ret = true;

        if (this.InventTransIdFather)
        {
            if (this.JournalType != InventJournalType::BOM || !this.bomLine)
            {
                return checkFailed(strFmt("@SYS133268",
                            fieldId2pname(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, InventTransIdFather)),
                            fieldId2pname(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, bomLine))));
            }

            inventJournalTransAssembly = InventJournalTrans::findInventTransId(this.InventTransIdFather);
            if (!inventJournalTransAssembly
              || inventJournalTransAssembly.JournalId != this.JournalId
              || inventJournalTransAssembly.bomLine
              || sign(inventJournalTransAssembly.Qty) == sign(this.Qty))
            {
                return checkFailed(strFmt("@SYS79152",
                            fieldId2pname(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, InventTransIdFather))));
            }

            if (inventJournalTransAssembly.TransDate != this.TransDate)
            {
                ret = checkFailed(strFmt("@SYS79153", inventJournalTransAssembly.LineNum));
            }

            if (InventJournalTable::find(this.JournalId).VoucherDraw == JournalVoucherDraw::Entering && this.Voucher != inventJournalTransAssembly.Voucher)
            {
                ret = checkFailed(strFmt("@SYS79154", inventJournalTransAssembly.LineNum));
            }
        }
        else
        {
            if (this.JournalType == InventJournalType::BOM && this.bomLine)
            {
                ret = checkFailed(  strFmt("@SYS50104",
                                    fieldId2pname(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, InventTransIdFather))));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromInventTable</Name>
				<Source><![CDATA[
    public boolean checkInitFromInventTable(InventTable _inventTable, InventDim _inventDim = InventDim::findOrCreateBlank(), boolean _isItemModified = true)
    {
        if (! _inventTable.checkValid(_inventTable.ItemId))
        {
            return false;
        }

        InventDim inventDim;
        inventDim.data(_inventDim);

        inventDim.InventSiteId  = _inventTable.inventInventSiteId('', inventDim.inventDimId);
        inventDim               = InventDim::findOrCreate(inventDim);

        if (! this.inventTableModuleInvent().checkValid()                               ||
            ! _inventTable.inventItemInventSetup(inventDim.InventDimId).checkValid())
        {
            return false;
        }

        if (this.InventTransId && _isItemModified)
        {
            return checkFailed("@SYS10546");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfileId_RU</Name>
				<Source><![CDATA[
    public boolean checkInventProfileId_RU()
    {
        boolean                     ok = true;
        InventProfile_RU            inventProfile;
        InventProfile_RU            inventProfileTo;

        if (this.JournalType == InventJournalType::Transfer &&
            EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)))
        {
            inventProfile = InventProfile_RU::find(this.inventDim().InventProfileId_RU);
            inventProfileTo = InventProfile_RU::find(this.toInventDim().InventProfileId_RU);
            if (inventProfile &&
                inventProfileTo &&
                inventProfile.InventProfileType != inventProfileTo.InventProfileType)
            {
                ok = checkFailed("@GLS113798");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategoryId</Name>
				<Source><![CDATA[
    public boolean checkProjCategoryId()
    {
        ProjCategory        projCategory;
        boolean             ret = true;

        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);

            if (projCategory.CategoryType != ProjCategoryType::Item)
            {
                ret = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
            }

            ret = ret && projCategory.validateIfInactiveAllowed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    public boolean checkProjId()
    {
        ProjTable   projTable = ProjTable::find(this.ProjId);

        if (this.ProjId && !projTable.status().activeInTree())
        {
            if (projTable.Status == ProjStatus::Completed)
            {
                return checkFailed(strFmt("@SYS330350",this.ProjId));
            }
            else
            {
                return checkFailed(strFmt("@SYS96612",this.ProjId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQty</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private boolean checkQty()
    {
        if (this.needCheckQty() && this.Qty == 0)
        {
            // The inventory journal lines cannot have Qty set to zero, except of Counting journal
            return checkFailed("@SYS95148");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCheckQty</Name>
				<Source><![CDATA[
    protected boolean needCheckQty()
    {
        if (this.JournalType != InventJournalType::Count)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the release date against the current date.
    /// </summary>
    /// <returns>
    ///    true if the release date is satisfied, or in the past, and the transaction can be posted;
    ///    otherwise, false
    /// </returns>
    public boolean checkReleaseDate()
    {
        boolean ok = true;
        PostReleaseDate localReleaseDate;

        if (this.ReleaseDate != utcDateTimeNull() && this.ReleaseDate > DateTimeUtil::utcNow())
        {
            localReleaseDate = DateTimeUtil::applyTimeZoneOffset(this.ReleaseDate, DateTimeUtil::getUserPreferredTimeZone());
            ok = checkFailed(strFmt("@SYS114593", datetime2str(localReleaseDate, DateFlags::FormatAll)));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity(InventJournalTrans _inventJournalTrans)
    {
        RequireActivity             requireActivity;
        boolean                     ret = true;

        requireActivity = ProjTable::checkRequireActivity(_inventJournalTrans.ProjId,tableNum(ProjItemTrans));
        if (requireActivity && !_inventJournalTrans.ActivityNumber)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a dimension set that can be applied to the <c>InventJournalTrans.dimension</c> field.
    /// </summary>
    /// <param name="_dimension">
    ///    A dimension set that should be applied to the <c>InventJournalTrans.dimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object previously instantiated using the current <c>InventJournalTrans</c>
    ///    buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>InventJournalTrans.dimension</c> field.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _dimension, DimensionCopy _dimensionCopy = null)
    {
        return InventJournalTrans::copyDimensionOnServer(this, _dimension, _dimensionCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountSecCurStd_RU</Name>
				<Source><![CDATA[
    public Amount costAmountSecCurStd_RU()
    {
        Amount                          ret;
        InventMov_Journal               inventMovement;
        InventTrans                     inventTrans;
        InventTransOriginJournalTrans   inventTransOriginJournalTrans;

        if (!this.RecId)
        {
            return 0;
        }

        inventMovement = this.inventMovement();
        if (inventMovement.inventModelTypeSecCur_RU().stdCostBased())
        {
            while select sum(Qty), ProjId, InventDimId, ItemId, InventTransOrigin, ReturnInventTransOrigin
                from inventTrans
                group by ProjId, InventDimId, ItemId, InventTransOrigin, ReturnInventTransOrigin
                join TableId from inventTransOriginJournalTrans
                where inventTransOriginJournalTrans.InventJournalDataAreaId == this.DataAreaId
                   && inventTransOriginJournalTrans.InventJournalId         == this.JournalId
                   && inventTransOriginJournalTrans.InventJournalLineNum    == this.LineNum
                   && inventTransOriginJournalTrans.InventTransOrigin       == inventTrans.InventTransOrigin
            {
                ret += InventModelType_StdCost::estimatedPhysicalValueStdCostSecCur_RU(inventMovement, inventTrans);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        #isoCountryRegionCodes

        ttsbegin;

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        super();

        if (this.JournalType == InventJournalType::Count)
        {
            InventItemLocation::updateStopCountingJournal(this);
        }

        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this)).updateNow();
        if (this.JournalType == InventJournalType::Transfer && this.ToInventTransId && this.ToInventTransId != this.InventTransId)
        {
            InventUpd_DeleteMovement::newMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt)).updateNow();
        }

        if (this.Voucher)
        {
            if (!this.hasVoucherLines())
            {
                JournalError::deleteVoucher(tableNum(InventJournalTable),this.JournalId,this.Voucher);
            }
        }

        this.deleteLinksToProdBom();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLinksToProdBom</Name>
				<Source><![CDATA[
    private void deleteLinksToProdBom()
    {
        if (this.JournalType == InventJournalType::OwnershipChange && !InventJournalTable::find(this.JournalId).Posted)
        {
            InventTransOriginProdBomOwnershipChangeJournalTransLink link;
            delete_from link
                where link.JournalLine == this.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>derivedLot_RU</Name>
				<Source><![CDATA[
    public display InventTransDerived_RU derivedLot_RU()
    {
        InventTransDerived_RU   ret;
        InventTrans             inventTransPri, inventTransSec;
        TransLink_RU            link;
        InventTransOriginId     fromInventTransOriginId = InventTransOriginJournalTrans::findInventTransOriginId(this.DataAreaId, this.JournalId, this.LineNum);
        InventTransOriginId     toInventTransOriginId   = InventTransOriginJournalTransReceipt::findInventTransOriginId(this.DataAreaId, this.JournalId, this.LineNum);
        InventTransOrigin       inventTransOrigin;

        while select InventTransId from inventTransOrigin
            group by InventTransId
            join TableId from inventTransSec
                where inventTransOrigin.RecId           == inventTransSec.InventTransOrigin
            exists join TableId from link
                where link.RefSec                       == inventTransSec.RecId
                  &&  link.RefTableId                   == inventTransSec.TableId
            exists join TableId from inventTransPri
                where inventTransPri.RecId              == link.RefPri
                  && (inventTransPri.InventTransOrigin  == fromInventTransOriginId
                  ||  inventTransPri.InventTransOrigin  == toInventTransOriginId)
        {
            ret += (ret ? ', ' : '') + inventTransOrigin.InventTransId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    ///    Set to true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    ///    The new reason code when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    ///    The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode  _reasonCode)
    {
        ReasonCode  reasonCode = _reasonCode;

        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRefRecId == 0)
            {
                this.ReasonRefRecId = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                this.ReasonRefRecId = ReasonTableRef::updateCode(reasonCode,this.ReasonRefRecId);
            }

            // Updated the reason comment with the default value for the updated reason code
            this.editReasonComment(_set,ReasonTable::find(reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason comment.
    /// </summary>
    /// <param name="_set">
    ///    Set to true if the reason comment is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonComment">
    ///    The new reason comment when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    ///    The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        ReasonComment   reasonComment = _reasonComment;

        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRefRecId == 0)
            {
                this.ReasonRefRecId = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.ReasonRefRecId = ReasonTableRef::updateComment(reasonComment,this.ReasonRefRecId);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.ReasonRefRecId).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the unit in journal.
    /// </summary>
    /// <param name="_set">
    ///    Set to true if the reason comment is set; otherwise, set to false.
    /// </param>
    /// <param name="_unit">
    ///    The new unit when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    ///    The unit of the record in the <c>InventJournalTrans</c> table.
    /// </returns>
    public edit InventJournalUnit editUnit(boolean _set, InventJournalUnit _unit)
    {
        if (_set)
        {
            this.Unit = _unit;
            this.checkunit();
            this.modifyInventJournalTransUnitQty();
        }
        else
        {
            if (this.Unit) 
            {
                _unit = this.Unit;
            }
            else 
            {
                _unit = this.unitId();
            }
        }

        return _unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUnitQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the quantity of unit in journal.
    /// </summary>
    /// <param name="_set">
    ///    Set to true if the reason comment is set; otherwise, set to false.
    /// </param>
    /// <param name="_unitQty">
    ///    The new quantity of unit when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    ///    The quantity of unit of the record in the <c>InventJournalTrans</c> table.
    /// </returns>
    public edit InventJournalUnitQty editUnitQty(boolean _set, InventJournalUnitQty _unitQty)
    {
        if (_set)
        {
            if (this.JournalType == InventJournalType::Transfer && _unitQty > 0)
            {
                this.UnitQty = -_unitQty;
            }
            else
            {
                this.UnitQty = _unitQty;
            }
            this.modifyInventJournalTransQty();

            if (InventJournalEnsureTransQtyIsAcceptableFlight::instance().isEnabled())
            {
                this.ensureTransQtyIsAcceptable();
            }

        }
        else
        {
            if (this.UnitQty) 
            {
                _unitQty = this.UnitQty;
            }
            else if (this.Unit == this.unitId())
            {
                _unitQty = this.Qty;
            }
            else 
            {
                this.modifyInventJournalTransUnitQty();
                _unitQty = this.UnitQty;
            }
        }
        return _unitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMLineAssembly</Name>
				<Source><![CDATA[
    public container getBOMLineAssembly()
    {
        InventJournalTrans  bomAssembly;
        int                 numAssemblies   = 0;

        if (this.bomLine)
        {
            numAssemblies   = any2int((select count(RecId) from inventJournalTrans
                                        where   inventJournalTrans.JournalId == this.JournalId &&
                                                inventJournalTrans.bomLine   == NoYes::No).RecId);

            if (numAssemblies == 1)
            {
                select firstonly bomAssembly
                        where bomAssembly.JournalId == this.JournalId   &&
                              bomAssembly.bomLine   == NoYes::No;
            }
        }
        return [numAssemblies,bomAssembly];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLogisticsLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default <c>LogisticsLocation</c> location based on the parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The <c>InventLocationId</c> ID used to search for the default locations.
    /// </param>
    /// <param name="_logisticsLocationRoleType">
    /// The <c>LogisticsLocationRoleType</c> role to use to search for the default locations.
    /// </param>
    /// <returns>
    /// A <c>LogisticsLocation</c> record.
    /// </returns>
    private LogisticsLocation getDefaultLogisticsLocation(InventLocationId _inventLocationId, LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        LogisticsLocation       logisticsLocation;
        InventLocation          inventLocation;
        inventLocation      = InventLocation::find(_inventLocationId);

        logisticsLocation   = LogisticsLocation::find(InventLocation::getLocationFromRole(inventLocation.RecId, _logisticsLocationRoleType));

        return logisticsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>InventBatchId</c> ID based on the parameters and the values from the <c>InventDimId</c> and <c>toInventDimId</c> fields.
    /// </summary>
    //// <param name="_inventDim">
    /// An <c>InventDim</c> buffer from which the batch id can be used if it is specified.
    /// </param>
    /// <param name="_toInventDim">
    /// An <c>InventDim</c> buffer for the to-dimension from which the batch id can be used if it is specified.
    /// </param>
    /// <returns>
    /// An <c>InventBatchId</c> ID..
    /// </returns>
    private InventBatchId getInventBatchId(InventDim _inventDim, InventDim  _toInventDim)
    {
        InventBatchId inventBatchId = '';

        if (_toInventDim.inventBatchId)
        {
            inventBatchId = _toInventDim.inventBatchId;
        }
        else if (this.ToInventDimId)
        {
            inventBatchId = this.toInventDim().inventBatchId;
        }
        else if (_inventDim.inventBatchId)
        {
            inventBatchId = _inventDim.inventBatchId;
        }
        else
        {
            inventBatchId = this.inventDim().inventBatchId;
        }

        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition code associated with the <c>InventJournalTrans</c> record.
    /// </summary>
    //// <param name="_inventDim">
    /// An <c>InventDim</c> buffer from which the batch id can be used if it is specified. This parameter is optional.
    /// </param>
    /// <param name="_toInventDim">
    /// An <c>InventDim</c> buffer for the to-dimension from which the batch id can be used if it is specified. This parameter is optional.
    /// </param>
    /// <returns>
    /// The disposition code associated with the <c>InventJournalTrans</c> record.
    /// </returns>
    public display PdsBatchDispositionCode getPdsDispositionCode(
        InventDim   _inventDim      = null,
        InventDim   _toInventDim    = null)
    {
        InventBatchId           inventBatchId;
        PdsBatchDispositionCode dispositionCode = '';

        if (hasFieldAccess(
                tableNum(InventBatch),
                fieldNum(InventBatch,PdsDispositionCode),
                AccessType::View))
        {
            inventBatchId = this.getInventBatchId(_inventDim,_toInventDim);

            if (inventBatchId)
            {
                dispositionCode = InventBatch::find(
                    inventBatchId,
                    this.ItemId).PdsDispositionCode;
            }
        }

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status associated with the <c>InventJournalTrans</c> record.
    /// </summary>
    //// <param name="_inventDim">
    /// An <c>InventDim</c> buffer from which the batch id can be used if it is specified. This parameter is optional.
    /// </param>
    /// <param name="_toInventDim">
    /// An <c>InventDim</c> buffer for the to-dimension from which the batch id can be used if it is specified. This parameter is optional.
    /// </param>
    /// <returns>
    /// The disposition status associated with the <c>InventJournalTrans</c> record.
    /// </returns>
    public display PdsBatchDispositionStatus getPdsDispositionStatus(
        InventDim   _inventDim      = null,
        InventDim   _toInventDim    = null)
    {
        InventBatchId               inventBatchId;
        PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;

        inventBatchId = this.getInventBatchId(_inventDim,_toInventDim);

        if (inventBatchId)
        {
            status = InventBatch::find(
                inventBatchId,
                this.ItemId).pdsDispositionStatus();
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVoucherLines</Name>
				<Source><![CDATA[
    private boolean hasVoucherLines()
    {
        return (select firstfast firstonly RecId from inventJournalTrans
                    where inventJournalTrans.JournalId == this.JournalId
                       && inventJournalTrans.Voucher   == this.Voucher).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    public void initFromBOM(BOM _bom)
    {
        InventDim   inventDim;
        InventTable inventTable;

        this.ItemId = _bom.ItemId;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        inventTable = this.inventTable();
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, InventDim::find(_bom.InventDimId), inventDim);

        inventDim.InventSiteId = inventTable.inventInventSiteId(_bom.inventDim().InventSiteId, InventDim::findOrCreate(inventDim).inventDimId);

        if (inventDim.InventSiteId)
        {
            inventDim.InventLocationId  = inventTable.inventLocationId(_bom.inventDim().InventLocationId,
                                                                       InventDim::findOrCreate(inventDim).InventDimId,
                                                                       inventDim.InventSiteId);
        }
        else
        {
            inventDim.InventLocationId  = inventTable.inventLocationId(_bom.inventDim().InventLocationId);
        }

        if (inventDim.InventLocationId != _bom.inventDim().InventLocationId)
        {
            inventDim.initFromInventLocation(inventDim.inventLocation());
        }

        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMparmReportFinish</Name>
				<Source><![CDATA[
    public void initFromBOMparmReportFinish(BOMParmReportFinish    _bomParmReportFinish)
    {
        this.TransDate              = _bomParmReportFinish.TransDate;
        this.Qty                    = _bomParmReportFinish.Qty;
        this.setInventDimId(_bomParmReportFinish.InventDimId);
        this.ProfitSet              = _bomParmReportFinish.ProfitSet;
        this.InventTransIdReturn    = _bomParmReportFinish.InventTransIdReturn;
        this.modifyInventJournalTransUnitQty();

        if (_bomParmReportFinish.OverrideDimension)
        {
            this.DefaultDimension        = _bomParmReportFinish.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMReturnLot</Name>
				<Source><![CDATA[
    public void initFromBOMReturnLot(InventTransOriginId _returnOriginId)
    {
        InventTransOrigin   inventTransOrigin   = InventTransOrigin::find(_returnOriginId);
        InventTrans         inventTrans         = InventTrans::findByInventTransOrigin(_returnOriginId); // Find any transaction assuming all transactions are posted at same time

        this.ItemId                 =   inventTransOrigin.ItemId;
        this.DefaultDimension       =   this.copyDimension(inventTrans.dimensionFinancialDefaultDimension());
        [this.Qty, this.CostAmount] =   InventTransOrigin::calcInvoicedCostValue(_returnOriginId);
        this.Qty                    =   -this.Qty;
        this.CostAmount             =   -this.CostAmount;
        this.CostPrice              =   inventTrans.costPrice();
        this.PriceUnit              =   1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromForecastSales</Name>
				<Source><![CDATA[
    void initFromForecastSales(ForecastSales _tForecastSales,
                               boolean          _bCopyPriceDisc = true,
                               boolean          _bCopyQty       = true,
                               Qty              _rQty           = _tForecastSales.SalesQty)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.initFromInventTable(InventTable::find(_tForecastSales.ItemId));
            this.ProjId = _tForecastSales.ProjId;
            this.initFromProjTable(ProjTable::find(this.ProjId));

            if (_bCopyQty)
            {
                this.Qty        = _rQty;
                this.ProjUnitID = _tForecastSales.SalesUnitId;
                //copy SalesPrice
                this.ProjSalesPrice = _tForecastSales.SalesPrice;
            }

            if (_bCopyPriceDisc)
            {
                this.CostPrice  = _tForecastSales.CostPrice;
                //calculate CostPrice
                this.CostAmount = _tForecastSales.CostPrice * _tForecastSales.SalesQty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventJournalTable</Name>
				<Source><![CDATA[
    public void initFromInventJournalTable(InventJournalTable _inventJournalTable)
    {
        JournalTableData    journalTableData  = JournalTableData::newTable(_inventJournalTable);

        journalTableData.journalStatic().newJournalTransData(this,journalTableData).initFromJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventJournalTrans</Name>
				<Source><![CDATA[
    public void initFromInventJournalTrans(InventJournalTrans _inventJournalTrans,
    NoYes              _reverse = NoYes::No)
    {
        // <GEERU>
        int sign;
        #isoCountryRegionCodes
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU)
        {
            sign = _reverse && this.JournalType != InventJournalType::Transfer ? -1 : 1;
        }
        // </GEERU>
        this.JournalId              = _inventJournalTrans.JournalId;
        this.LineNum                = _inventJournalTrans.LineNum;
        this.TransDate              = _inventJournalTrans.TransDate;
        this.Voucher                = _inventJournalTrans.Voucher;
        this.ItemId                 = _inventJournalTrans.ItemId;
        // <GEERU>
        if (countryRegion_RU)
        {
            this.Qty                    = _inventJournalTrans.Qty * sign;
        }
        else
        {
            // </GEERU>
            this.Qty                    = _inventJournalTrans.Qty;
            // <GEERU>
        }
        // </GEERU>
        // <GEERU>
        if (countryRegion_RU)
        {
            this.PdsCWQty = _inventJournalTrans.PdsCWQty * sign;
        }
        else
        {
            // </GEERU>
            this.PdsCWQty = _inventJournalTrans.PdsCWQty;
            // <GEERU>
        }
        // </GEERU>
        this.CostPrice              = _inventJournalTrans.CostPrice;
        this.PriceUnit              = _inventJournalTrans.PriceUnit;
        // <GEERU>
        if (countryRegion_RU)
        {
            this.CostMarkup             = _inventJournalTrans.CostMarkup  * sign;
            this.CostAmount             = _inventJournalTrans.CostAmount  * sign;
            this.SalesAmount            = _inventJournalTrans.SalesAmount * sign;
        }
        else
        {
            // </GEERU>
            this.CostMarkup             = _inventJournalTrans.CostMarkup;
            this.CostAmount             = _inventJournalTrans.CostAmount;
            this.SalesAmount            = _inventJournalTrans.SalesAmount;
            // <GEERU>
        }
        // </GEERU>
        this.LedgerDimension        = _inventJournalTrans.LedgerDimension;
        this.InventOnHand           = _inventJournalTrans.InventOnHand;
        this.Counted                = _inventJournalTrans.Counted;
        this.DefaultDimension       = this.copyDimension(_inventJournalTrans.DefaultDimension);
        this.bomLine                = _inventJournalTrans.bomLine;
        this.setInventDimId(_inventJournalTrans.InventDimId);
        this.ToInventDimId          = _inventJournalTrans.ToInventDimId;
        this.ReqPOId                = _inventJournalTrans.ReqPOId;
        this.Worker                 = _inventJournalTrans.Worker;
        this.AssetTransType         = _inventJournalTrans.AssetTransType;
        this.AssetId                = _inventJournalTrans.AssetId;
        this.AssetBookId            = _inventJournalTrans.AssetBookId;
        // <GEERU>
        if (countryRegion_RU
            && _reverse
            && this.JournalType == InventJournalType::Transfer)
        {
            this.setInventDimId(_inventJournalTrans.ToInventDimId);
            this.DefaultDimension = this.copyDimension(_inventJournalTrans.toDimensionDefault(_inventJournalTrans.inventJournalTable(), _inventJournalTrans.toInventDim()));
            this.ToInventDimId    = _inventJournalTrans.InventDimId;
        }
        // </GEERU>

        // project
        this.ProjCategoryId         = _inventJournalTrans.ProjCategoryId;
        this.ProjId                 = _inventJournalTrans.ProjId;
        this.ActivityNumber         = _inventJournalTrans.ActivityNumber;
        this.ProjLinePropertyId     = _inventJournalTrans.ProjLinePropertyId;
        this.ProjSalesCurrencyId    = _inventJournalTrans.ProjSalesCurrencyId;
        this.ProjSalesPrice         = _inventJournalTrans.ProjSalesPrice;
        this.ProjTaxGroupId         = _inventJournalTrans.ProjTaxGroupId;
        this.ProjTaxItemGroupId     = _inventJournalTrans.ProjTaxItemGroupId;
        this.ProjUnitID             = _inventJournalTrans.ProjUnitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSum</Name>
				<Source><![CDATA[
    public void initFromInventSum(InventSum _inventSum)
    {
        InventTable       inventTable           = this.inventTable();
        InventPriceMap    inventPriceMap        = inventTable.inventCostPriceMap(_inventSum.InventDimId,null,null,this.TransDate);

        this.ItemId             = _inventSum.ItemId;
        this.setInventDimId(_inventSum.InventDimId);

        this.DefaultDimension   = this.copyDimension(inventTable.DefaultDimension);

        this.CostPrice          = inventPriceMap.price();
        this.PriceUnit          = inventPriceMap.priceUnit();
        this.CostMarkup         = inventPriceMap.markup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(
        InventTable     _inventTable,
        boolean         _initQty                = true,
        boolean         _initInventDim          = true,
        boolean         _initCostPrice          = true,
        boolean         _initInventoryStatus    = false)
    {
        InventDim   inventDim;
        // <GEEPL>
        PlInventDocType     docType;
        InventMovement      inventMovement;
        // </GEEPL>
        // <GIN>
        InventJournalTransTaxExtensionIN    inventJournalTransTaxExtensionIN;
        // </GIN>

        this.ItemId             = _inventTable.ItemId;
        this.DefaultDimension   = this.copyDimension(_inventTable.DefaultDimension);
        
        // Initialize tax branch dimension from InventSite to the DefaultDimension.
        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
        {
            InventSite          inventSiteLoc;
            InventJournalTable  inventJournalTableLoc;

            select firstOnly TaxBranchRefRecId from inventSiteLoc
                join JournalId from inventJournalTableLoc
                where inventSiteLoc.SiteId == InventJournalTableLoc.InventSiteId
                    && InventJournalTableLoc.JournalId == this.JournalId;

            if (inventSiteLoc.TaxBranchRefRecId)
            {
                this.DefaultDimension = TaxBranchType::getDefaultDimensionFromSite(this.DefaultDimension, inventSiteLoc.TaxBranchRefRecId);
            }         
        }
        
        this.ProjCategoryId     = _inventTable.ProjCategoryId ? _inventTable.ProjCategoryId : this.ProjCategoryId;

        if (_initInventDim)
        {
            if (this.InventDimId)
            {
                inventDim = InventDim::find(this.InventDimId);
            }

            inventDim.initFromInventTable(_inventTable,InventItemOrderSetupType::Invent,inventDim);

            if (_initInventoryStatus && WHSInventEnabled::exist(_inventTable.ItemId))
            {
                inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim);
            }

            inventDim.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            this.setInventDimId(inventDim.InventDimId, inventDim);
        }

        if (_initQty)
        {
            this.Unit = this.unitId();
            if (PdsGlobal::pdsIsCWItem(_inventTable.ItemId))
            {
                this.UnitQty = 0;
            }
            else
            {
                this.UnitQty = this.bomLine ? -_inventTable.inventStandardQty(inventDim.InventDimId) : _inventTable.inventStandardQty(inventDim.InventDimId);
                // <GEEPL>
                #ISOCountryRegionCodes
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    docType        = InventJournalTable::find(this.JournalId).InventDocType_PL;
                    inventMovement = this.inventMovement();

                    if ((docType == PlInventDocType::PW && inventMovement.transSign() < 0) ||
                        (docType == PlInventDocType::RW && inventMovement.transSign() > 0))
                    {
                        this.UnitQty = -this.UnitQty;
                    }
                }
                // </GEEPL>
            }
            this.modifyInventJournalTransQty(this.Unit);
        }

        if (_initCostPrice)
        {
            this.setCostPrice(this.InventDimId, inventDim, this.inventTableModuleInvent());
        }

        if (this.bomLine)
        {
            this.SalesAmount    = this.calcSalesAmountBOMLine();
        }

        // <GIN>
        if ( TaxParameters::checkTaxParameters_IN())
        {
            inventJournalTransTaxExtensionIN = this.inventJournalTransTaxExtensionIN();
            inventJournalTransTaxExtensionIN.MaximumRetailPrice = _inventTable.inventTableModuleSales().MaximumRetailPrice_IN;
            inventJournalTransTaxExtensionIN.AssessableValueTransactionCurrency = this.Qty * _inventTable.inventTableModuleSales().Price;
            this.packInventJournalTrans_IN(inventJournalTransTaxExtensionIN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans_RU</Name>
				<Source><![CDATA[
    void initFromInventTrans_RU(InventTrans _inventTrans)
    {
        InventTable     inventTable    = _inventTrans.inventTable();
        InventPriceMap  inventPriceMap = inventTable.inventCostPriceMap(_inventTrans.InventDimId, null, null, this.TransDate);

        this.ItemId             = _inventTrans.ItemId;
        this.Qty                = _inventTrans.Qty;
        this.CostPrice          = inventPriceMap.price();
        this.PriceUnit          = inventPriceMap.priceUnit();
        this.CostMarkup         = inventPriceMap.markup();
        this.DefaultDimension   = this.copyDimension(inventTable.DefaultDimension);

        this.setInventDimId(_inventTrans.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.ProjTaxItemGroupId = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
            this.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    public void initFromProjTable(ProjTable _projTable)
    {
        this.ProjSalesCurrencyId    = _projTable.currencyId();
        this.DefaultDimension       = this.copyDimension(_projTable.DefaultDimension);
        this.ProjLinePropertyId     = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
        this.ProjTaxGroupId         = ProjParameters::taxGroupInvoice(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpWMSOnlineCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>InventJournalTrans</c> table buffer from <c>TmpWMSOnlineCounting</c> temporary table buffer.
    /// </summary>
    /// <param name="_tmpWMSOnlineCounting">
    /// The <c>TmpWMSOnlineCounting</c> table buffer contains values to initialize <c>InventJournalTrans</c> table buffer.
    /// </param>
    public void initFromTmpWMSOnlineCounting(TmpWMSOnlineCounting _tmpWMSOnlineCounting)
    {
        this.ItemId             = _tmpWMSOnlineCounting.ItemId;
        this.InventDimId        = _tmpWMSOnlineCounting.InventDimId;
        this.InventOnHand       = _tmpWMSOnlineCounting.QtyOnHand;
        this.Counted            = _tmpWMSOnlineCounting.QtyCounted;

        this.PdsCWQty           = _tmpWMSOnlineCounting.PdsCWQtyCounted;
        this.PdsCWInventOnHand  = _tmpWMSOnlineCounting.PdsCWQtyOnHand;
        this.PdsCWInventQtyCounted  = _tmpWMSOnlineCounting.PdsCWQtyCounted;
        this.CountingReasonCode     = _tmpWMSOnlineCounting.CountingReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSiteInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Site and Location of the <c>InventDim</c> Table from <c>InventJournalTable</c>.
    /// </summary>
    /// <param name="_inventJournalTable">
    /// Holds the header information of <c>InventJournalTable</c>.
    /// </param>
    public void initSiteInventory(InventJournalTable _inventJournalTable)
    {
        InventDim   inventDim = this.inventDim();

        if (_inventJournalTable.InventSiteId ||
            _inventJournalTable.InventLocationId)
        {
            inventDim.InventSiteId = _inventJournalTable.InventSiteId;
            inventDim.InventLocationId =  _inventJournalTable.InventLocationId;

            if (!inventDim.InventSiteId)
            {
                inventDim.InventSiteId = InventLocation ::find(inventDim.InventLocationId).InventSiteId;
            }

            inventDim = inventDim::findOrCreate(inventDim);
            this.setInventDimId(inventDim.inventDimId, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        #ISOCountryRegionCodes

        this.TransDate= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            InventJournalTransTaxExtensionIN inventJournalTransTaxExtensionIN = this.inventJournalTransTaxExtensionIN();
            this.packInventJournalTrans_IN(inventJournalTransTaxExtensionIN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(NoYes _dropEstimated = NoYes::No)
    {
        InventUpd_Estimated     estimated;
        InventUpd_Estimated     estimatedTransfer;

        var logger = InventInstrumentationLogger::CreateLogger(tableStr(InventJournalTrans));
        var inventJournalTransActivity = logger.getInventJournalTransActivity();
        using (var activityContext = inventJournalTransActivity.getActivityContext_Insert())
        {                                                                                                                         
            try
            {
                ttsbegin;

                if (this.isRequiredToSetUnitAndQuantity())
                {
                    this.Unit = this.unitId();
                    this.modifyInventJournalTransUnitQty();
                }

                // Ownership journal lines should not create estimated transactions; we don't want on-hand impact from this journal
                if (this.JournalType == InventJournalType::OwnershipChange)
                {
                    _dropEstimated = true;
                }

                if (! this.LineNum)
                {
                    this.LineNum = InventJournalTrans::lastLineNum(this.JournalId) + 1;
                }

                if (this.ProjId && !this.ProjTransId)
                {
                    this.ProjTransId = ProjParameters::newTransId();
                }

				if (!this.InventTransId || !this.ProjId)
                {
					this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                }

                if (this.JournalType == InventJournalType::Transfer)
                {
                    this.ToInventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                }

                if (! _dropEstimated)
                {
                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
                    estimated.updateNow();

                    if (this.JournalType == InventJournalType::Transfer)
                    {
                        estimatedTransfer = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
                        estimatedTransfer.updateNow();
                    }
                }
                
                inventJournalTransActivity.logInventJournalTransInfo(activityContext, this.RecId, this.JournalId, this.InventTransId);

                super();
            
                this.SysExtensionSerializerMap::postInsert();
            
                if (estimated)
                {
                    estimated.updateOwnerRelationship();
                }

                if (estimatedTransfer)
                {
                    estimatedTransfer.updateOwnerRelationship();
                }
                if (estimated)
                {
                    estimated.parmCWForceActualsReservationUpdate(this.canForceCatchWeightActualsReservationUpdate());
                    estimated.updateReservation();
                }

                if (estimatedTransfer)
                {
                    estimatedTransfer.parmCWForceActualsReservationUpdate(this.canForceCatchWeightActualsReservationUpdate());
                    estimatedTransfer.updateReservation();
                }
            
                if (this.isCountingStatusRegistrationEnabled())
                {
                    InventItemLocation::updateStartCounting(this.ItemId,this.inventDim(), this.JournalId);
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                this.InventTransId = '';
                
                inventJournalTransActivity.logInventJournalTransInfo(activityContext, this.RecId, this.JournalId, this.InventTransId, NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canForceCatchWeightActualsReservationUpdate</Name>
				<Source><![CDATA[
    private boolean canForceCatchWeightActualsReservationUpdate()
    {
        return (this.JournalType == InventJournalType::Transfer
            && PdsGlobal::pdsIsCWItem(this.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTable</Name>
				<Source><![CDATA[
    public InventJournalTable inventJournalTable(boolean _forUpdate = false)
    {
        return InventJournalTable::find(this.JournalId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventJournalTransExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventJournalTransExtensionTH</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>InventJournalTransExtensionTH</c> associated with the current record.
    /// </returns>
    public InventJournalTransExtensionTH InventJournalTransExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(InventJournalTransExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>InventJournalTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>InventJournalTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public InventJournalTransTaxExtensionIN inventJournalTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(inventJournalTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public InventMov_Journal inventMovement()
    {
        return InventMovement::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleInvent</Name>
				<Source><![CDATA[
    public InventTableModule inventTableModuleInvent()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display public ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionDisplayValue</Name>
				<Source><![CDATA[
    display DimensionDisplayValue ledgerDimensionDisplayValue()
    {
        return  LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>InventJournalTrans.dimension</c> values, depending on the <c>InventDim</c>
    ///    record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>InventJournalTrans</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record buffer that was previously linked to the current
    ///    <c>InventJournalTrans</c> record buffer.
    /// </param>
    public void linkInventDim2Dimension(
        InventDim   _newInventDim,
        InventDim   _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertFromCode</Name>
				<Source><![CDATA[
    private LineNum mcrInsertFromCode(LineNum  _lastLineNum = 0)
    {
        InventJournalTable        journalTable;
        InventJournalTransData    journalTransData;

        ttsBegin;

        journalTable        = InventJournalTable::find(this.JournalId, true);
        if (!journalTable.RecId)
        {
            throw error(strFmt("@SYS21496", this.JournalId));
        }
        journalTransData = JournalTransData::newTransTableLineNum(this, journalTable, (_lastLineNum ? _lastLineNum: InventJournalTrans::lastLineNum(journalTable.JournalId)));
        journalTransData.create();

        if (journalTable.validateWrite())
        {
            journalTable.update();
        }
        else
        {
            throw error("@SYS21628");
        }

        ttsCommit;

        return journalTransData.parmLastLineNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that holds the merged combination of the current <c>DefaultDimension</c>
    ///    field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    The first dimension set to merge with the current <c>DefaultDimension</c> field of this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    The second dimension set to merge with the current <c>DefaultDimension</c> field of this table;
    ///    optional.
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>DimensionMerge</c> object that was initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    ///    The dimension set that holds the merged combination of the current <c>DefaultDimension</c> field on
    ///    this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when they are merged.
    ///    Additionally, the default entity specifier will be considered.
    /// </remarks>
    public DimensionDefault mergeDimension(
                    DimensionDefault _primaryDefaultDimension,
                    DimensionDefault _secondaryDefaultDimension = 0,
                    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                    this.companyInfo().RecId
                    )
                    )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            // <GIN>
        case fieldNum(InventJournalTrans, ItemId):
            if (TaxParameters::isExciseEnable_IN())
            {
                if (this.RecId)
                {
                    TransTaxInformation transTaxInformation;
                    transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this, true);
                    transTaxInformation.ExciseTariffCodes = InventTable::find(this.ItemId).ExciseTariffCodes_IN;
                    if (!TaxExciseTypeController_IN::isDSAAllowed(transTaxInformation.ExciseType, transTaxInformation.ExciseRecordType, this.ItemId))
                    {
                        transTaxInformation.ExciseDSA = false;
                    }
                    ttsbegin;
                    transTaxInformation.update();
                    ttscommit;
                }
            }
            this.Unit = this.unitId();
            this.modifyInventJournalTransUnitQty(this.Unit);
            break;
        case fieldNum(InventJournalTrans, Qty) :
            if (this.Unit == null)
            {
                this.Unit = this.unitId();
            }
            this.modifyInventJournalTransUnitQty(this.Unit);
            if (InventJournalEnsureTransQtyIsAcceptableFlight::instance().isEnabled() && hasGUI())
            {
                this.ensureTransQtyIsAcceptable();
            }
            this.updateAssessableValue_IN();
            break;
        case fieldNum(InventJournalTrans, Unit) :
        case fieldNum(InventJournalTrans, UnitQty) :
            if (this.Unit == null)
            {
                this.Unit = this.unitId();
            }
            this.modifyInventJournalTransQty(this.Unit);
            if (InventJournalEnsureTransQtyIsAcceptableFlight::instance().isEnabled() && hasGUI())
            {
                this.ensureTransQtyIsAcceptable();
            }
            break;
        case fieldNum(InventJournalTrans, ProjSalesPrice) :
            this.updateAssessableValue_IN();
            break;
            // </GIN>
        case fieldNum(InventJournalTrans, CountingReasonCode):
            this.setLedgerDimensionFromReasonCode();
            break;
        case fieldNum(InventJournalTrans, InventDimId):
            this.modifiedInventDimId();
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field InventDimId
    /// </summary>
    private void modifiedInventDimId()
    {
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            if (this.RecId)
            {
                TransTaxInformationHelper::newHelper().UpdateCompanyLocationFromTransTable(this, LogisticsPostalAddress::findByLocation(TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(this.inventDim().InventLocationId, this.inventDim().InventSiteId)).RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalLot_RU</Name>
				<Source><![CDATA[
    public display InventTransOrig_RU originalLot_RU()
    {
        InventTransOrig_RU      ret;
        InventTrans             inventTransPri, inventTransSec;
        TransLink_RU            link;
        InventTransOriginId     fromInventTransOriginId = InventTransOriginJournalTrans::findInventTransOriginId(this.DataAreaId, this.JournalId, this.LineNum);
        InventTransOriginId     toInventTransOriginId   = InventTransOriginJournalTransReceipt::findInventTransOriginId(this.DataAreaId, this.JournalId, this.LineNum);
        InventTransOrigin       inventTransOrigin;

        while select InventTransId from inventTransOrigin
            group by InventTransId
            join TableId from inventTransPri
                where inventTransOrigin.RecId           == inventTransPri.InventTransOrigin
            exists join TableId from link
                where link.RefPri                       == inventTransPri.RecId
                  &&  link.RefTableId                   == inventTransPri.TableId
            exists join TableId from inventTransSec
                where inventTransSec.RecId              == link.RefSec
                  && (inventTransSec.InventTransOrigin  == fromInventTransOriginId
                  ||  inventTransSec.InventTransOrigin  == toInventTransOriginId)
        {
            ret += (ret ? ', ' : '') + inventTransOrigin.InventTransId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventJournalTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>InventJournalTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_inventJournalTransTaxExtensionIN">
    /// InventJournalTransTaxExtensionIN is packed.
    /// </param>
    public void packInventJournalTrans_IN(InventJournalTransTaxExtensionIN _inventJournalTransTaxExtensionIN)
    {
        _inventJournalTransTaxExtensionIN.InventJournalTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_inventJournalTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCheckCWQty</Name>
				<Source><![CDATA[
    public boolean pdsCWCheckCWQty()
    {
        boolean ret = true;

        if (this.PdsCWQty != 0 || this.PdsCWInventQtyCounted)
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

            if (isCWItem && this.PdsCWQty != 0)
            {
                if (this.Qty == 0)
                {
                    ret = checkFailed("@PDS127");
                }

                if (sign(this.PdsCWQty) != sign(this.Qty))
                {
                    ret = checkFailed("@PDS86");
                }
            }

            if (!isCWItem && this.PdsCWInventQtyCounted)
            {
                ret = checkFailed("@SCM:CannotSetCountedCatchWeightQuantityForNonCatchWeightItems");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition code associated with the <c>InventJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// The disposition code associated with the <c>InventJournalTrans</c> record.
    /// </returns>
    public display PdsBatchDispositionCode pdsDispositionCode()
    {
        return this.getPdsDispositionCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status associated with the <c>InventJournalTrans</c> record.
    /// </summary>

    /// <returns>
    /// The disposition status associated with the <c>InventJournalTrans</c> record.
    /// </returns>
    public display PdsBatchDispositionStatus pdsDispositionStatus()
    {
        return this.getPdsDispositionStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    private PriceUnit  priceUnit()
    {
        return (this.PriceUnit ? this.PriceUnit : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInventCostAmount</Name>
				<Source><![CDATA[
    public SalesCostValue projInventCostAmount(ProjAdjustRefId _projAdjustRefId)
    {
        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(this.InventTransId).RecId;

        return InventTransPackingSlip::projCostAmount(inventTransOriginId, _projAdjustRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueInventTransId</Name>
				<Source><![CDATA[
    public str queryValueInventTransId()
    {
        str     s;

        s = '(';
        s += '((' + fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.InventTransId+'\"))';
        if (this.ToInventTransId && this.ToInventTransId != this.InventTransId)
        {
            s += ' || ';
            s += '((' +fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.ToInventTransId+'\"))';
        }

        s +=')';

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssemblyBOMJournalLine</Name>
				<Source><![CDATA[
    public void setAssemblyBOMJournalLine()
    {
        InventJournalTrans  bomAssembly;
        int                 numAssemblies;

        if (this.bomLine)
        {
            if (this.InventTransIdFather)
            {
                return;
            }

            [numAssemblies,bomAssembly] = this.getBOMLineAssembly();

            if (numAssemblies == 1)
            {
                this.InventTransIdFather = bomAssembly.InventTransId;
            }
        }
        else
        {
            this.InventTransIdFather = nullValue(this.InventTransIdFather);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostPriceForReturn</Name>
				<Source><![CDATA[
    private void initializeCostPriceForReturn(InventMov_Journal _inventMovement)
    {
        if (_inventMovement.inventModelType().stdCostBased())
        {
            this.CostPrice = InventModelType_StdCost::calcReturnFinancialCostPricePcs(_inventMovement.returnInventTransOrigin(), _inventMovement.inventTransOriginId());
        }
        else
        {
            CostAmount returnValue;
            InventQty returnQty;

            [returnQty, returnValue] = InventTransOrigin::calcReturnCostValue(_inventMovement.returnInventTransOrigin(), _inventMovement.inventTransOriginId());
            this.CostPrice = (returnQty && returnValue) ? (returnValue / returnQty) : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cost price.
    /// </summary>
    /// <param name = "_inventMovement">The inventory movement.</param>
    /// <param name = "_inventDimId">The inventory dimension ID.</param>
    /// <param name = "_inventDim">The inventory dimensions.</param>
    /// <param name = "_inventTableModuleInvent">The module.</param>
    [Replaceable]
    protected void initializeCostPrice(
        InventMov_Journal       _inventMovement,
        InventDimId             _inventDimId,
        InventDim               _inventDim,
        InventTableModule       _inventTableModuleInvent)
    {
        if (_inventMovement is InventMov_Jour_Loss_Project)
        {
            InventDimParm       inventDimParmFinancial, inventDimParmActive;
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);

            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
            inventDimGroupSetup.inventDimParmActive(inventDimParmActive);

            InventOnhand inventOnhand = InventOnhand::newParametersActive(this.ItemId, _inventDim, inventDimParmFinancial, inventDimParmActive);

            this.CostPrice  = inventOnhand.costPricePcs();
        }
        else
        {
            InventPriceMap inventPriceMap;
            InventTable inventTable = this.inventTable();
            if (!inventTable)
            {
                inventTable = InventTable::find(Barcode::validateItemBarcode(this, this.ItemId));
            }

            inventPriceMap = inventTable.inventCostPriceMap(_inventDimId, _inventDim, _inventTableModuleInvent, this.TransDate);

            this.CostPrice  = inventPriceMap.price();
            this.PriceUnit  = inventPriceMap.priceUnit();
            this.CostMarkup = inventPriceMap.markup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cost amount.
    /// </summary>
    /// <param name = "inventMovement">The inventory movement.</param>
    [Wrappable, Replaceable]
    internal void initializeCostAmount(InventMov_Journal inventMovement)
    {
        this.CostAmount = this.calcCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPrice</Name>
				<Source><![CDATA[
    public void setCostPrice(
        InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
    InventDim               _inventDim                  = null, // set this parameter for better performance if avail
    InventTableModule       _inventTableModuleInvent    = null  // set this parameter for better performance if avail
    )
    {
        this.PriceUnit = 1;
        this.CostMarkup = 0;
        this.CostPrice = 0;

        InventMov_Journal inventMovement = this.inventMovement();
        if (!inventMovement.mustExcludeFromInventoryValue())
        {
            if (inventMovement.isReturned(this.Qty * inventMovement.transSign()))
            {
                this.initializeCostPriceForReturn(inventMovement);
            }
            else
            {
                this.initializeCostPrice(inventMovement, _inventDimId, _inventDim, _inventTableModuleInvent);
            }
        }

        this.initializeCostAmount(inventMovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>InventJournalTrans.inventDimId</c> field and
    ///    applies default values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>InventJournalTrans.InventDimId</c>
    ///    field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId     _inventDimId,
        InventDim       _inventDim = InventDim::find(_inventDimId))
    {
        if (_inventDimId != '' &&
            _inventDimId != _inventDim.inventDimId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);

        this.modifiedInventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>inventDimId</c> field on the current <c>TmpBOM</c> record.
    /// </summary>
    /// <param name="_bom">
    ///    A BOM record.
    /// </param>
    /// <param name="_parentItemId">
    ///    A string that holds the parent <c>itemID</c>.
    /// </param>
    /// <param name="_parentInventDim">
    ///    A <c>inventDim</c> record that holds the inventory dimensions related to the parent item.
    /// </param>
    /// <param name="_routeId">
    ///    A string that holds the <c>routeID</c> that must be used to make the parent item.
    /// </param>
    public void setInventDimIdFromBOM(
                                        BOM         _bom,
                                        ItemId      _parentItemId,
                                        InventDim   _parentInventDim,
                                        RouteId     _routeId)
    {
        InventDim   inventDimNew;

        inventDimNew = _bom.BOMMap::inventDimFinal(_parentItemId,_parentInventDim,_routeId);

        this.setInventDimId(inventDimNew.InventDimId,inventDimNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> value to the <c>InventJournalTrans.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current
    ///    <c>InventJournalTrans</c> record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    public void setProjSalesPrice(
                                        ProjTable   _projTable,
                                        InventDim   _inventDim)
    {
        PriceMarkup     markUpDummy;
        PriceUnit       salesUnitDummy;
        InventTable     inventTable;

        if ((this.ProjId) && (this.ItemId))
        {
            inventTable = InventTable::find(this.ItemId);

            [this.ProjSalesPrice,
             salesUnitDummy,
             markUpDummy] = inventTable.salesPriceAgreement(
                                            this.TransDate,
                                            _inventDim,
                                            this.Qty,
                                            this.ProjUnitID,
                                            _projTable.CustAccount,
                                            this.ProjSalesCurrencyId,
                                            ProjTable::findPriceGroup(_projTable.ProjId));
            this.updateAssessableValue_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionFromReasonCode</Name>
				<Source><![CDATA[
    public void setLedgerDimensionFromReasonCode()
    {
        if (this.canSetLedgerDimensionFromReasonCode())
        {
            if (this.CountingReasonCode)
            {
                LedgerDimensionDefaultAccount ledgerDimension = InventCountingReasonCode::find(this.CountingReasonCode).LedgerDimension;
            
                if (ledgerDimension)
                {
                    this.LedgerDimension = ledgerDimension;
                }
            }
            else
            {
                this.LedgerDimension = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetLedgerDimensionFromReasonCode</Name>
				<Source><![CDATA[
    private boolean canSetLedgerDimensionFromReasonCode()
    {
        return this.JournalType == InventJournalType::Count;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt_RU</Name>
				<Source><![CDATA[
    public display StornoTxt_RU stornoTxt_RU()
    {
        return this.Storno_RU ? 'V' : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDimensionDefault</Name>
				<Source><![CDATA[
    public DimensionDefault toDimensionDefault(
                                                InventJournalTable  _inventJournalTable,
                                                InventDim           _toInventDim)
    {
        DimensionDefault                        toDimension = this.DefaultDimension;
        // <GEERU>
        InventTrans                             origInventTrans;
        #isoCountryRegionCodes
        // </GEERU>

        if (this.JournalType != InventJournalType::Transfer)
        {
            return toDimension;
        }

        if (_inventJournalTable.Posted)
        {
            if (!this.ToInventTransId || this.ToInventTransId == this.InventTransId)
            {
                return this.DefaultDimension;
            }

            return InventTransPosting::findByNaturalKey(this.initializeInventTransPostingSearchParameters()).DefaultDimension;
        }
        // <GEERU>
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            origInventTrans = TransLink_RU::findInventTransOrig(
                InventTransOriginJournalTransReceipt::findInventTransOriginId(this.DataAreaId, this.JournalId, this.LineNum));
            if (origInventTrans && origInventTrans.Storno_RU != this.Storno_RU)
            {
                if (origInventTrans.DateFinancial)
                {
                    return origInventTrans.dimensionFinancialDefaultDimension();
                }

                return origInventTrans.inventJournalTrans().DefaultDimension;
            }
        }
        // </GEERU>

        if (_toInventDim.InventSiteId)
        {
            toDimension = InventSite::changeDimension(toDimension, _toInventDim.InventSiteId);
        }

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled()
            && !TaxBranchType::isTaxBranchDimCreatedAndBoundWithSite())
        {
            toDimension = TaxBranchType::getDefaultDimensionFromSite(toDimension, this.InventJournalTransExtensionTH().ToTaxBranch);
        }
        //</GTH>

        return toDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransPostingSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>InventTransPosting</c> table.
    /// </summary>
    /// <returns>The search parameters.</returns>
    protected InventTransPosting initializeInventTransPostingSearchParameters()
    {
        InventTransPosting inventTransPosting;

        inventTransPosting.TransDate = this.TransDate;
        inventTransPosting.Voucher = this.Voucher;
        inventTransPosting.InventTransOrigin = InventTransOriginJournalTransReceipt::findInventTransOriginId(this.DataAreaId, this.JournalId, this.LineNum);
        inventTransPosting.InventTransPostingType = InventTransPostingType::Financial;

        return inventTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInventDim</Name>
				<Source><![CDATA[
    public InventDim toInventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.ToInventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    display public UnitOfMeasureSymbol unitId()
    {
        return this.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(NoYes _dropEstimated = NoYes::No)
    {
        InventJournalTrans      this_Orig = this.orig();
        InventUpd_Estimated     estimated;
        InventUpd_Estimated     estimatedTransfer;              

        var logger = InventInstrumentationLogger::CreateLogger(tableStr(InventJournalTrans));
        var inventJournalTransActivity = logger.getInventJournalTransActivity();
        using (var activityContext = inventJournalTransActivity.getActivityContext_Update())
        {
            ttsbegin;

            if (this.isCountingStatusRegistrationEnabled())
            {
                InventItemLocation::updateStopCountingJournal(this_Orig);
            }

            if (this.isRequiredToSetUnitAndQuantity())
            {
                this.Unit = this.unitId();
                this.modifyInventJournalTransUnitQty();
            }

            // Ownership journal lines should not update estimated transactions; we don't want on-hand impact from this journal
            if (this.JournalType == InventJournalType::OwnershipChange)
            {
                _dropEstimated = true;
            }

            if (! _dropEstimated)
            {
                estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
                estimated.updateNow();

                if (this.JournalType == InventJournalType::Transfer)
                {
                    estimatedTransfer = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
                    estimatedTransfer.updateNow();

                    // sync receipt's dimensions after estimation if quantity is reduced
                    if (this_Orig.Qty < this.Qty)
                    {
                        InventMov_TransferTo::syncEstimatedTransactions(this.InventTransId,
                                                                        this.ToInventTransId,
                                                                        InventMovSubType::TransferReceipt,
                                                                        this);
                    }
                }
            }
            
            inventJournalTransActivity.logInventJournalTransInfo(activityContext, this.RecId, this.JournalId, this.InventTransId);

            super();

            //<GTH>
            this.SysExtensionSerializerMap::postUpdate();
            //</GTH>

            if (estimated)
            {
                estimated.updateReservation();
            }

            if (this.isCountingStatusRegistrationEnabled())
            {
                InventItemLocation::updateStartCounting(this.ItemId,this.inventDim(), this.JournalId);
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && this.needRecalculateAssessableValue(this_Orig))
            {
                this.updateAssessableValue_IN();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalLineOwnerEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the journal line is used for an item which is owner enabled and also has
    ///    inventory transaction for an owner who is neither blank nor current legal entity.
    /// </summary>
    /// <returns>
    ///    true if there is at least one inventory transaction for an owner who is not current legal entity; otherwise, false.
    /// </returns>
    public boolean isJournalLineOwnerEnabled()
    {
        #isoCountryRegionCodes

        if (!isConfigurationkeyEnabled(configurationKeyNum(ConsignmentInbound))
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return false;
        }

        if (this.inventTable().isItemInventoryOwnerActivated())
        {
            var ownerId = this.inventDim().InventOwnerId_RU;

            if ((ownerId && ownerId != InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId)
                || (!ownerId && (!this.RecId || !this.hasOwnerEnabledTransactionsForCurrentLegalEntity())))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOwnerEnabledTransactionsForCurrentLegalEntity</Name>
				<Source><![CDATA[
    private boolean hasOwnerEnabledTransactionsForCurrentLegalEntity()
    {
        InventOwnerId currentLegalEntityOwnerId = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;

        InventTransOriginJournalTrans inventTransOriginJournalTrans;
        InventTrans inventTrans;
        InventDim inventDim;

        select firstOnly RecId from inventTrans
            exists join inventTransOriginJournalTrans
            where inventTransOriginJournalTrans.InventJournalDataAreaId == this.DataAreaId
               && inventTransOriginJournalTrans.InventJournalId         == this.JournalId
               && inventTransOriginJournalTrans.InventJournalLineNum    == this.LineNum
               && inventTransOriginJournalTrans.InventTransOrigin       == inventTrans.InventTransOrigin
                    join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                        && inventDim.InventOwnerId_RU == currentLegalEntityOwnerId;

        return inventTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssemblyLineAmounts</Name>
				<Source><![CDATA[
    public void updateAssemblyLineAmounts(boolean _research = true)
    {
        InventJournalTrans  journalTransComponent;
        InventJournalTrans  journalTransAssembly;
        CostAmount          costAmount;
        SalesAmount         salesAmount;

        if (this.bomLine)
        {
            select sum(CostAmount), sum(SalesAmount) from journalTransComponent
                where journalTransComponent.JournalId               == this.JournalId  &&
                      journalTransComponent.bomLine                 == NoYes::Yes      &&
                      journalTransComponent.InventTransIdFather     == this.InventTransIdFather;

            if (journalTransComponent.CostAmount || journalTransComponent.SalesAmount)
            {
                journalTransAssembly = this.assemblyBOMJournalLine(true);

                if (journalTransAssembly
                 && journalTransAssembly.bomLine    ==  NoYes::No           // Must be assembly item in same journal
                && journalTransAssembly.JournalId  ==  this.JournalId)
                {
                    costAmount = CurrencyExchangeHelper::amount(-journalTransComponent.CostAmount);
                    salesAmount = CurrencyExchangeHelper::amount(-journalTransComponent.SalesAmount);

                    if (costAmount  != journalTransAssembly.CostAmount ||
                        salesAmount != journalTransAssembly.SalesAmount)
                    {
                        if (!journalTransAssembly.inventTable().modelGroup().inventModelType().stdCostBased())
                        {
                            journalTransAssembly.CostPrice      =   PriceDisc::amount2Price(costAmount,
                                                                    0,
                                                                    0,
                                                                    journalTransAssembly.Qty,
                                                                    0,
                                                                    journalTransAssembly.PriceUnit,
                                                                    '',
                                                                    0);
                            journalTransAssembly.CostAmount     =   costAmount;
                        }
                        else
                        {
                            journalTransAssembly.setCostPrice(journalTransAssembly.InventDimId, journalTransAssembly.inventDim());
                        }

                        journalTransAssembly.SalesAmount    =   salesAmount;
                        journalTransAssembly.update();

                        if (FormDataUtil::isFormDataSource(this) && _research)
                        {
                            FormDataUtil::getFormDataSource(this).research();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates budget for project-related transactions.
    /// </summary>
    /// <returns>
    /// True if transaction amount is within project budget. False if budget is overrun.
    /// </returns>
    public boolean validateBudget()
    {
        if (ProjParameters::find().EnableBudgetCheckOnLineSave)
        {
            return ProjPost::validateBudget(this);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             ret = super();
        InventJournalTrans  inventJournalTransComponent;

        if ( this.JournalType    == InventJournalType::BOM
         && !this.bomLine
         &&  this.RecId)
        {
            select firstonly RecId from inventJournalTransComponent
                where inventJournalTransComponent.JournalId             == this.JournalId
                   && inventJournalTransComponent.bomLine               == NoYes::Yes
                   && inventJournalTransComponent.InventTransIdFather   == this.InventTransId;

            if (inventJournalTransComponent.RecId)
            {
                ret = checkFailed(strFmt("@SYS128564", tableId2pname(tableNum(InventJournalTrans)), tableId2pname(tableNum(InventJournalTrans))));
            }
        }
        InventJournalTable inventJournalTable = InventJournalTable::find(this.JournalId);
        ret = ret & inventJournalTable.checkJournalCanBeModifiedByCurrentUser();

        if (!inventJournalTable.Posted)
        {
            if (ret && inventJournalTable.isWFApprovalApproved())
            {
                ret = checkFailed("@SYS109636");
            }

            if (ret && inventJournalTable.isWorkflowUsed()
                && !inventJournalTable.editableInWorkflow())
            {
                ret = checkFailed("@SCM:CannotDeleteJournalLinesInWorkflowProcess");
            }
        }
        else if (this.ProjId)
        {
            ret = checkFailed("@SYS21497");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _id)
    {
        boolean ret;

        switch (_id)
        {
            case fieldNum(InventJournalTrans, ItemId):
                this.ItemId = Barcode::validateItemBarcode(this, this.ItemId);
                break;
        }

        ret = super(_id);

        switch (_id)
        {
            case fieldNum(InventJournalTrans,LedgerDimension):
                ret = MainAccount::checkTransactionAccount(this.LedgerDimension) && ret;
                break;

            case fieldNum(InventJournalTrans, ProjId):
                ret = ret && this.checkProjId();
                break;

                case(fieldNum(InventJournalTrans, ProjCategoryId)):
                ret = ret && this.checkProjCategoryId();
                break;

            case fieldNum(InventJournalTrans, ActivityNumber):
                ret = ret && this.checkActivity();
                break;

            case fieldNum(InventJournalTrans, Qty):
                ret = ret && this.checkQty();
                break;
            case fieldNum(InventJournalTrans, ItemId):
                ret = ret && this.validateItemOwnerEnabled();
                break;
            case fieldNum(InventJournalTrans, Unit):
                ret = ret && this.checkUnit();
                break;
        }

        if ((this.JournalType == InventJournalType::project) &&
           (fieldNum(InventJournalTrans, ProjId) ||
           fieldNum(InventJournalTrans, ItemId) ||
           fieldNum(InventJournalTrans, ProjCategoryId) ||
           fieldNum(InventJournalTrans, ActivityNumber) ||
           fieldNum(InventJournalTrans, Qty) ||
           fieldNum(InventJournalTrans, ProjSalesPrice) ||
           fieldNum(InventJournalTrans, ProjSalesCurrencyId)))
        {
            this.validateBudget();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemOwnerEnabled</Name>
				<Source><![CDATA[
    private boolean validateItemOwnerEnabled()
    {
        if (this.JournalType == InventJournalType::OwnershipChange
            && !this.inventTable().isItemInventoryOwnerActivated())
        {
            return checkFailed("@Consignment:MessageValidation_JournalLineItemId_NotOwnerEnabled");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryOwnerFrom</Name>
				<Source><![CDATA[
    private boolean validateInventoryOwnerFrom()
    {
        boolean ret = true;

        if (this.JournalType == InventJournalType::OwnershipChange)
        {
            InventOwnerId inventoryOwnerFrom = this.inventDim().InventOwnerId_RU;

            if (!inventoryOwnerFrom)
            {
                ret = checkFailed("@Consignment:MessageValidation_JournalLineInventoryOwnerFrom_IsRequired");
            }
            if (ret && inventoryOwnerFrom == InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId)
            {
                ret = checkFailed("@Consignment:MessageValidation_JournalLineInventoryOwnerFrom_ShouldNotBeLegalEntity");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateItemCountingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if counting status should be validated to prevent the same item from being counted in multiple journals.
    /// </summary>
    /// <returns>true if counting status should be validated to prevent the same item from being counted in multiple journals; otherwise, false.</returns>
    public boolean mustValidateItemCountingStatus()
    {
        return (this.JournalType == InventJournalType::Count);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             isValid;
        ProjValCheckTrans   projValCheckTrans;
        ReasonTable         reasonTable;
        // Retrieve the Reason code from the reason reference table.
        ReasonCode          reasonCode;
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        isValid = super();

        isValid = isValid && (this.skipCheckNotStopped() || InventItemInventSetup::find(this.ItemId, this.InventDimId).checkNotStopped());

        if (this.ReasonRefRecId)
        {
            reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        }

        if (this.mustValidateItemCountingStatus())
        {
            InventDim inventDim = this.inventDim();
            if (InventItemLocation::isCountingStarted(this.ItemId, inventDim, this.JournalId))
            {
                isValid = checkFailed(strFmt("@SYS59534", this.ItemId, inventDim.InventLocationId));
            }
        }

        if (this.JournalType == InventJournalType::project)
        {
            if (! this.ProjId)
            {
                isValid = checkFailed("@SYS74373");
            }

            if (! this.ProjCategoryId)
            {
                isValid = checkFailed("@SYS76856");
            }

            if (! this.ProjLinePropertyId)
            {
                isValid = checkFailed("@SYS76857");
            }

            if (! this.ProjUnitID)
            {
                isValid = checkFailed("@SYS76858");
            }

            if (! this.ProjSalesCurrencyId)
            {
                isValid = checkFailed("@SYS76866");
            }

            ProjTable projTable = ProjTable::find(this.ProjId);
            if (!projTable.status().validateWriteCreateJournal())
            {
                isValid = false;
            }

            if (isValid && projTable.Type == ProjType::Time)
            {
                isValid = checkFailed(strFmt("@SYS53011", ProjType::Time));
            }

            isValid = isValid && this.checkProjId() && this.checkProjCategoryId();

            isValid = isValid && this.checkActivity();

            if (isValid)
            {
                projValCheckTrans = new ProjValCheckTrans();
                isValid = projValCheckTrans.validateMandatory(this);

                if (this.orig().ProjId != this.ProjId ||
                   this.orig().ProjCategoryId != this.ProjCategoryId ||
                                                        this.orig().ActivityNumber != this.ActivityNumber ||
                   this.orig().ItemId != this.ItemId ||
                   this.orig().Qty != this.Qty ||
                   this.orig().ProjSalesPrice != this.ProjSalesPrice ||
                   this.orig().ProjSalesCurrencyId != this.ProjSalesCurrencyId)
                {
                    this.validateBudget();
                }
            }
        }

        // don't get consistency check errors for old journals
        if (!this.RecId)
        {
            if (this.JournalType == InventJournalType::Count
                && this.inventTable().AutoReportFinished)
            {
                isValid = checkFailed(strFmt("@SYS83913", this.ItemId));
            }

            if (!this.inventTable().isStocked())
            {
                isValid = checkFailed("@SYS190620");
            }
        }

        isValid = isValid && this.checkQty();
        // don't get consistency check errors when unit of measure feature is off
        if (InventJournalUnitOfMeasureFeature::isEnabled())
        {
            isValid = isValid && this.checkInventJournalTransUnitQuantity();
        }

        // General validation if Reason code is used.
        if (isValid && reasonCode != "")
        {
            reasonTable = ReasonTable::find(reasonCode);
            if (reasonTable.RecId == 0)
            {
                isValid = checkFailed(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
            }
        }

        // Validate Reason code for these journals.
        if (isValid && this.JournalType == InventJournalType::Asset)
        {
            if (reasonCode == "")
            {
                if (AssetParameters::transTypeRequiresValidation(this.AssetTransType))
                {
                    // The Reason code required.
                    isValid = checkFailed(strFmt("@SYS110217", "@SYS111246"));
                }
            }
            else
            {
                // If a Reason code is blank then these validations will not occur.
                if (reasonTable.Asset == NoYes::No)
                {
                    // The Reason code is not active for 'Asset' transactions.
                    isValid = checkFailed("@SYS115522");
                }
            }
        }

        isValid = isValid && this.validateInventoryOwnerFrom();

        isValid = isValid && this.checkAssemblyBOMJournalLine();

        isValid = isValid && this.pdsCWCheckCWQty();

        if (isValid && #PmfEnabled)
        {
            isValid = this.inventTable()
                    .pmfInventProductType().validateInventUpd();
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            isValid = this.checkInventProfileId_RU() && isValid;
        }
        // </GEERU>

        InventJournalTable journalTable = InventJournalTable::find(this.JournalId);

        isValid = isValid & journalTable.checkJournalCanBeModifiedByCurrentUser();

        isValid = isValid & journalTable.checkJournalIsNotPosted();

        InventJournalCountSkipCountingReasonCodeValidationContext context = InventJournalCountSkipCountingReasonCodeValidationContext::current();
        if (!context || !context.isSkipCountingReasonCodeValidation)
        {
            isValid = isValid && this.checkCountingReasonCodeIsMandatory();
        }

        if (isValid && InventJournalTable::find(this.JournalId).isWFApprovalApproved())
        {
            isValid = checkFailed("@SYS109636");
        }

        if (isValid && InventJournalTable::find(this.JournalId).isWorkflowUsed() 
            && !InventJournalTable::find(this.JournalId).editableInWorkflow())
        {
            isValid = checkFailed("@SCM:CannotUpdateJournalLinesNotApproved");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryCountingReasonCodeMissing</Name>
				<Source><![CDATA[
    private boolean isMandatoryCountingReasonCodeMissing()
    {
        if (this.JournalType == InventJournalType::Count
            && !this.CountingReasonCode
            && this.isCountingReasonCodeMandatory())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountingReasonCodeIsMandatory</Name>
				<Source><![CDATA[
    private boolean checkCountingReasonCodeIsMandatory()
    {
        if (this.isMandatoryCountingReasonCodeMissing())
        {
            return checkFailed(strFmt("@SYS84378", fieldPName(InventCountingReasonCode, ReasonCode)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountingReasonCodeMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if the counting reason code is mandatory.
    /// </summary>
    /// <returns>
    /// true if the counting reason code is mandatory; otherwise false
    /// </returns>
    public boolean isCountingReasonCodeMandatory()
    {
        InventCountingReasonCodePolicySearchParameters parameters     = InventCountingReasonCodePolicySearchParameters::newfromItemInventDim(this.inventTable(), this.inventDim());
        InventCountingReasonCodePolicy inventCountingReasonCodePolicy = InventCountingReasonCodePolicySearch::defaultSearch(parameters);

        return inventCountingReasonCodePolicy.InventCountingReasonCodeType == InventCountingReasonCodeType::Mandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnit</Name>
				<Source><![CDATA[
    private boolean checkUnit()
    {
        if (this.Unit && !UnitOfMeasure::findBySymbol(this.Unit))
        {
            return checkFailed(
                    strFmt("@SCM:TableFieldValidation",
                    this.Unit,
                    fieldId2Name(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, Unit)),
                    tableId2Name(tableNum(InventJournalTrans))));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroQty</Name>
				<Source><![CDATA[
    display public InventQtyZero zeroQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the ReleaseDate field in the <c>InventJournalTrans</c> table for records with the specified
    ///    journal number and voucher.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> table record to use as a basis for the update.
    /// </param>
    /// <remarks>
    ///    This method updates all <c>InventJournalTrans</c> table records with the same journal ID and
    ///    voucher as those in the <c>InventJournalTrans</c> table record.It also sets the ReleaseDate field
    ///    to the value in the <c>InventJournalTrans</c> table record.
    /// </remarks>
    public static void adjustReleaseDate(InventJournalTrans _inventJournalTrans)
    {
        InventJournalTrans  inventJournalTransLocal;

        // Replace the traditional while select for update statement with update_recordset because
        // this command speeds up database processing because of fewer calls to the database.
        update_recordset inventJournalTransLocal
            setting ReleaseDate = _inventJournalTrans.ReleaseDate
            where ((inventJournalTransLocal.JournalId == _inventJournalTrans.JournalId) &&
                   (inventJournalTransLocal.RecId != _inventJournalTrans.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimensionOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a dimension set that can be applied to the <c>InventJournalTrans.dimension</c> field.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    A <c>InventJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_dimension">
    ///    A dimension set that should be applied to the <c>InventJournalTrans.dimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object previously instantiated using the current <c>InventJournalTrans</c>
    ///    buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>InventJournalTrans.dimension</c> field.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    ///    The method is executed on the server.
    /// </remarks>
    static private DimensionDefault copyDimensionOnServer(
                                        InventJournalTrans      _inventJournalTrans,
                                        DimensionDefault        _dimension,
                                        DimensionCopy           _dimensionCopy = null)
    {
        DimensionCopy dimensionCopy = _dimensionCopy;

        if (!dimensionCopy)
        {
            dimensionCopy = DimensionCopy::newFromTable(_inventJournalTrans, CompanyInfo::findDataArea(curext()).RecId);
        }

        return dimensionCopy.copy(_dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    public static InventJournalTrans findInventTransId(
                InventTransId   _transId,
                boolean         _forUpdate  = false)
    {
        InventJournalTrans inventJournalTrans;

        inventJournalTrans.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select firstonly inventJournalTrans
                where inventJournalTrans.InventTransId == _transId;
        }

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>InventJournalTrans</c> table.
    /// </summary>
    /// <param name="journalId">
    /// Identification of Journal number.
    /// </param>
    /// <param name="itemId">
    /// Identification of Item.
    /// </param>
    /// <param name="inventDimId">
    /// Identification of Inventory dimension.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventJournalTrans</c> table; otherwise, an empty record.
    /// </returns>
    static InventJournalTrans findItemInfo(
            JournalId journalId,
            RetailItemId itemId,
            RetailInventDimId inventDimId,
            boolean _forUpdate = false)
    {
        InventJournalTrans inventJournalTrans;

        inventJournalTrans.selectForUpdate(_forUpdate);

        if (journalId)
        {
            select firstonly inventJournalTrans
                where   inventJournalTrans.JournalId    == journalId
                    &&  inventJournalTrans.ItemId       == itemId
                    &&  inventJournalTrans.InventDimId  == inventDimId;
        }

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(InventJournalId _journalId)
    {
        return (select maxof(LineNum) from inventJournalTrans
                    where inventJournalTrans.JournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventTransIdFather</Name>
				<Source><![CDATA[
    public static void lookupInventTransIdFather(
        FormStringControl   _ctrl,
        JournalId           _journalId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventJournalTrans),_ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource     = query.addDataSource(tableNum(InventJournalTrans));
        QueryBuildRange         queryBuildRangeBOMLine   = queryBuildDataSource.addRange(fieldNum(InventJournalTrans,bomLine));
        QueryBuildRange         queryBuildRangeJournalId = queryBuildDataSource.addRange(fieldNum(InventJournalTrans,JournalId));

        queryBuildRangeBOMLine.value(queryValue(NoYes::No));
        queryBuildRangeJournalId.value(queryValue(_journalId));

        sysTableLookup.addLookupfield(fieldNum(InventJournalTrans,InventTransId),true);
        sysTableLookup.addLookupfield(fieldNum(InventJournalTrans,ItemId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindRecid</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds an <c>InventJournalTrans</c> record given the Rec ID.
    /// </summary>
    /// <param name="_recId">
    /// <c>_recId</c> used to find the <c>InventJournalTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///  <c>Boolean</c> to indicate if the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// <c>InventJournalTrans</c> buffer if one is found.
    /// </returns>
    public static InventJournalTrans mcrFindRecid(RecId _recId, boolean _forUpdate = false)
    {
        InventJournalTrans inventJournalTrans;

        inventJournalTrans.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly inventJournalTrans
                where inventJournalTrans.RecId == _recId;
        }

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventJournalTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given Unit Quantity and Unit of Measure, compute and parm Quantity and Cost Amount.
    /// </summary>
    /// <param name = "_fromUnitSymbol">unit of measure to transfer from.</param>
    public void modifyInventJournalTransQty(UnitOfMeasureSymbol _fromUnitSymbol = this.Unit)
    {
        int unitDecimals = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(this.Unit));
        this.UnitQty = decRound(this.UnitQty, unitDecimals);

        this.Qty = this.convertQty2GivenUnit(this.UnitQty, _fromUnitSymbol, this.unitId());
        this.CostAmount  = this.calcCostAmount();
        
        if (this.BOMLine)
        {
            this.SalesAmount = this.calcSalesAmountBOMLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventJournalTransUnitQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given Quantity and Unit of measure, compute and parm Unit quantity and Cost amount.
    /// </summary>
    /// <param name = "_fromUnitSymbol">unit of measure to transfer from.</param>
    public void modifyInventJournalTransUnitQty(UnitOfMeasureSymbol _toUnitSymbol = this.Unit)
    {
        UnitOfMeasureSymbol     fromUnitSymbol  =   this.unitId();
        UnitOfMeasureSymbol     toUnitSymbol    =   _toUnitSymbol;

        if (toUnitSymbol == '')
        {
            toUnitSymbol = this.unitId();
        }

        this.Qty = decRound(this.Qty, InventTable::inventDecimals(this.ItemId));

        this.UnitQty = this.convertQty2GivenUnit(this.Qty, fromUnitSymbol, toUnitSymbol);

        this.CostAmount  = this.calcCostAmount();
        this.Unit        = toUnitSymbol;
        
        if (this.BOMLine)
        {
            this.SalesAmount = this.calcSalesAmountBOMLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventJournalTransUnitQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate converted quantity of unit based on unit and quantity for the inventory journal transaction record.
    /// </summary>
    /// <param name = "_quantityErrorCorrectionMethods">error correction method.</param>
    /// <returns>check reslut.</returns>
    public boolean checkInventJournalTransUnitQuantity(
        InventMovementQuantityErrorCorrectionMethods    _quantityErrorCorrectionMethods = InventMovementQuantityErrorCorrectionMethods::newStandard())
    {
        boolean         ret = true;

        if (this.mustCheckUnitConversion())
        {
            ret = true;
        }
        else
        {
            InventQty qty = this.convertQty2GivenUnit(this.UnitQty, this.Unit, this.unitId());
            InventJournalUnitQty unitQty = this.convertQty2GivenUnit(this.Qty, this.unitId(), this.Unit);

            if (qty != this.Qty && unitQty != this.UnitQty)
            {
                ret = checkFailed(strFmt("@SCM:InventJournalUnitOfMeasureValidationErrorTrans", this.UnitQty, this.Unit, this.Qty, this.unitId()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequiredToSetUnitAndQuantity</Name>
				<Source><![CDATA[
    public boolean isRequiredToSetUnitAndQuantity()
    {
       return this.JournalType != InventJournalType::Movement
           && this.JournalType != InventJournalType::LossProfit
           && this.JournalType != InventJournalType::Transfer
           && this.JournalType != InventJournalType::BOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvalidUnitAndQuantity</Name>
				<Source><![CDATA[
    public boolean isInvalidUnitAndQuantity()
    {
        return this.Unit == null && this.UnitQty == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckUnitConversion</Name>
				<Source><![CDATA[
    public boolean mustCheckUnitConversion()
    {
        return this.isRequiredToSetUnitAndQuantity() || this.isInvalidUnitAndQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQty2GivenUnit</Name>
				<Source><![CDATA[
    private InventQty convertQty2GivenUnit(
        InventQty           _qty,
        UnitOfMeasureSymbol _fromUnit,
        UnitOfMeasureSymbol _toUnit,
        InventMovementQuantityErrorCorrectionMethods    _quantityErrorCorrectionMethods = InventMovementQuantityErrorCorrectionMethods::newStandard())
    {
        InventQty qtyConverted;

        if (_fromUnit == _toUnit)
        {
            qtyConverted = _qty;
        }
        else if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            if (!InventJournalEnsureTransQtyIsAcceptableFlight::instance().isEnabled())
            {
                InventMovement::ensureTransQtyIsAcceptableForBuffer(this, _quantityErrorCorrectionMethods);
            }

            int toUnitDecimals      = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_toUnit));

            qtyConverted = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    this.ItemId,
                    this.inventDim().InventDimId,
                    _qty,
                    _fromUnit,
                    _toUnit,
                    NoYes::Yes);
            qtyConverted = decRound(qtyConverted, toUnitDecimals);
        }

        return qtyConverted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureTransQtyIsAcceptable</Name>
				<Source><![CDATA[
    public void ensureTransQtyIsAcceptable(InventMovementQuantityErrorCorrectionMethods _quantityErrorCorrectionMethods = InventMovementQuantityErrorCorrectionMethods::newStandard())
    {
        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            InventMovement::ensureTransQtyIsAcceptableForBuffer(this, _quantityErrorCorrectionMethods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUnitAndUnitQtyOnPdsCWQtyModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the Unit & Quantity of unit according to Inventory unit of measure when <c>Qty</c> get changed by <c>PdsCWQty</c>.
    /// </summary>
    public void resetUnitAndUnitQtyOnPdsCWQtyModified()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId) && this.PdsCWQty != 0 && this.Qty != 0)
        {
            this.Unit = this.unitId();
            this.UnitQty = this.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heard table.
    /// </summary>
    /// <returns>The recode for inventJournalTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.inventJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountingStatusRegistrationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if counting status registration is enabled.
    /// </summary>
    /// <param name = "_inventJournalTable">The lines journal header. This can be passed to avoid a lookup of the journal header.</param>
    /// <returns>true if counting status registration is enabled; otherwise, false.</returns>
    public boolean isCountingStatusRegistrationEnabled(InventJournalTable _inventJournalTable = this.inventJournalTable())
    {
        return _inventJournalTable.isCountingStatusRegistrationEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEGAIS_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the journal line is related to EGAIS.
    /// </summary>
    /// <returns>
    /// true, if the the journal line is related to EGAIS; otherwise, false.
    /// </returns>
    public boolean isEGAIS_RU()
    {
        return EGAISAlcoholProduction_RU::findByItemInventDim(
            this.ItemId,
            this.inventDim()).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCheckNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip check not stopped.
    /// </summary>
    /// <returns>Skip not stopped check if true; otherwise, false.</returns>
    public boolean skipCheckNotStopped()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        InventJournalTable inventJournalTable = InventJournalTable::find(this.JournalId);
        if (inventJournalTable.isWFApprovalApproved())
        {
            checkFailed("@SYS109636");
            return;
        }

        if (inventJournalTable.isWorkflowUsed()
            && !inventJournalTable.editableInWorkflow())
        {
            checkFailed("@SCM:CannotUpdateJournalLinesNotApproved");
            return;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsIVAdjustmentOffsetInfo</Name>
				<Source><![CDATA[
    public boolean containsIVAdjustmentOffsetInfo()
    {
        return this.InventoryServiceAdjustmentOffsetDatasource && this.InventoryServiceAdjustmentOffsetPhysicalMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNonBomLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Cost price, Cost amount and sales amount for Non Bom jounal line.
    /// </summary>
    internal void updateNonBomLineAmount()
    {
        InventJournalTrans  journalTransComponent;
        InventJournalTrans  journalTransAssembly;
        CostAmount          costAmount;
        SalesAmount         salesAmount;

        select sum(CostAmount), sum(SalesAmount) from journalTransComponent
            where journalTransComponent.JournalId               == this.JournalId  &&
                    journalTransComponent.bomLine                 == NoYes::Yes      &&
                    journalTransComponent.InventTransIdFather     == this.InventTransId;

        if (journalTransComponent.CostAmount || journalTransComponent.SalesAmount)
        {
            journalTransAssembly = this;

            if (this
            && this.bomLine    ==  NoYes::No           // Must be assembly item in same journal
            && this.JournalId  ==  this.JournalId)
            {
                costAmount = CurrencyExchangeHelper::amount(-journalTransComponent.CostAmount);
                salesAmount = CurrencyExchangeHelper::amount(-journalTransComponent.SalesAmount);

                if (costAmount  != this.CostAmount ||
                    salesAmount != this.SalesAmount)
                {
                    if (!this.inventTable().modelGroup().inventModelType().stdCostBased())
                    {
                        this.CostPrice = PriceDisc::amount2Price(costAmount,
                                            0,
                                            0,
                                            this.Qty,
                                            0,
                                            this.PriceUnit,
                                            '',
                                            0);
                        this.CostAmount = costAmount;
                    }
                    else
                    {
                        this.setCostPrice(this.InventDimId, this.inventDim());
                    }

                    this.SalesAmount = salesAmount;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInsert</Name>
				<Source><![CDATA[
    public void doInsert()
    {    
        var logger = InventInstrumentationLogger::CreateLogger(tableStr(InventJournalTrans));
        var inventJournalTransActivity = logger.getInventJournalTransActivity();
        using (var activityContext = inventJournalTransActivity.getActivityContext_DoInsert())
        {
            inventJournalTransActivity.logInventJournalTransInfo(activityContext, this.RecId, this.JournalId, this.InventTransId);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdate</Name>
				<Source><![CDATA[
    public void doUpdate()
    {  
        var logger = InventInstrumentationLogger::CreateLogger(tableStr(InventJournalTrans));
        var inventJournalTransActivity = logger.getInventJournalTransActivity();
        using (var activityContext = inventJournalTransActivity.getActivityContext_DoUpdate())
        {
            inventJournalTransActivity.logInventJournalTransInfo(activityContext, this.RecId, this.JournalId, this.InventTransId);
        
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates assessable value.
    /// </summary>
    public void updateAssessableValue_IN()
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            InventJournalTransTaxExtensionIN inventJournalTransTaxExtensionIN = this.inventJournalTransTaxExtensionIN();
            inventJournalTransTaxExtensionIN.AssessableValue(this);
            this.packInventJournalTrans_IN(inventJournalTransTaxExtensionIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needRecalculateAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if assessable value needs to be recalculated.
    /// </summary>
    /// <param name = "_origTransactionTable">The original <c>InventJournalTrans</c> record.</param>
    /// <returns>true, if it needs to recalculate assessable value; otherwise, false.</returns>
    protected boolean needRecalculateAssessableValue(InventJournalTrans _origTransactionTable = this.orig())
    {
        InventJournalTrans inventJournalTrans_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        return (this.Qty != inventJournalTrans_Orig.Qty
            || this.ProjSalesPrice != inventJournalTrans_Orig.ProjSalesPrice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123821</DeveloperDocumentation>
	<Label>@SYS22126</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>JournalId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<ReplacementKey>LineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS7916</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdFather</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Counting</Name>
			<Label>@SYS2828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventOnHand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOnHand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventQtyCounted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Counted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Handheld_Counting</Name>
			<Label>@RET1575</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Handheld_ProfitLoss</Name>
			<Label>@RET1575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailInfocodeIdEx2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInformationSubcodeIdEx2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Handheld_Transfer</Name>
			<Label>@RET1575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailInfocodeIdEx2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInformationSubcodeIdEx2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journal</Name>
			<Label>@SYS6790</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalLine</Name>
			<Label>@SYS23949</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editUnitQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OriginalLot_RU</Name>
			<Label>@GLS112466</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Storno_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>originalLot_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>derivedLot_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttrib</Name>
			<Label>@PRO1588</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCopyBatchAttrib</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCatchWeight</Name>
			<Label>@PRO466</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventOnHand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventQtyCounted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingRelease</Name>
			<Label>@sys114594</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjUnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnLot</Name>
			<Label>@SYS53022</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ScrapReason_RU</Name>
			<Label>@GLS102685</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScrapTypeId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transfer</Name>
			<Label>@SYS13891</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountingReasonCode</Name>
			<Label>@SCM:InventCountingReasonCode</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountingReasonCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalLineDisplay</Name>
			<Label>@SYS23949</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editUnitQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookIdPurchSalesInvent</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransTypeJournal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMLine</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMLine</ExtendedDataType>
			<GroupPrompt>@SYS15449</GroupPrompt>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Counted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyCounted</ExtendedDataType>
			<Label>@SYS16439</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DSA_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects73</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<Label>@GLS5341</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventOnHand</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyOnHand</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdFather</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Label>@SYS28922</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdReturn</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventJournalId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@Sys11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsCopyBatchAttrib</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCopyBatchAttrib</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventOnHand</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQtyOnHand</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventQtyCounted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQtyCounted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostalAddress_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfitSet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostProfitSet</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjUnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ReleaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostReleaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInfocodeIdEx2</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeIdEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInformationSubcodeIdEx2</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInformationSubcodeIdEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScrapTypeId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PurchReturnActionId</ExtendedDataType>
			<Label>@SYS21708</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Storno_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Storno_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@SYS54704</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WarehouseLocation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountingReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCountingReasonCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<ExtendedDataType>InventJournalUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitQty</Name>
			<ExtendedDataType>InventJournalUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<Null>Yes</Null>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceAdjustmentOffsetDatasource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceAdjustmentOffsetDataSource</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceAdjustmentOffsetFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceAdjustmentOffsetPhysicalMeasure</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceAdjustmentOffsetPhysicalMeasure</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceAdjustmentOffsetFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceTransactionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceTransactionId</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceTransactionFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ToTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ToInventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalDateItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalTypeJournalIdTransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>JournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>JournalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123822</EntityRelationshipRole>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseLocation_IN</Name>
					<Field>WarehouseLocation_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventRepJournalTrans_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalReportTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventRepJournalTrans_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JournalError</Name>
			<EntityRelationshipRole>@SYS123823</EntityRelationshipRole>
			<RelatedTable>JournalError</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefTableId_Extern</Name>
					<RelatedField>RefTableId</RelatedField>
					<Value>154</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerDimension_InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ParentInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdFather</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransIdFather</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostalAddress_IN</Name>
					<Field>PostalAddress_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailInfocodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInfocodeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailInfocodeIdEx2</Name>
					<SourceEDT>RetailInfocodeIdEx2</SourceEDT>
					<Field>RetailInfocodeIdEx2</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdReturn</Name>
					<SourceEDT>InventTransIdReturn</SourceEDT>
					<Field>InventTransIdReturn</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ScrapTypeId_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnActionDefaults</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>PurchReturnActionId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventPurchSales::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScrapTypeId_RU</Name>
					<SourceEDT>PurchReturnActionId</SourceEDT>
					<Field>ScrapTypeId_RU</Field>
					<RelatedField>ReturnActionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ToInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToInventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>ToInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ToInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToInventTransId</Name>
					<SourceEDT>InventTransIdTo</SourceEDT>
					<Field>ToInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjUnitID</Name>
					<Field>ProjUnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventCountingReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventCountingReasonCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountingReasonCode</Name>
					<Field>CountingReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>