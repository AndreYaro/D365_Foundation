<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDocumentOperation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find an operation according to given operation RecId.
    /// </summary>
    /// <param name = "_requestId">The request id.</param>
    /// <param name = "_forUpdate">true if the found operation can be updated; otherwise, false.</param>
    /// <returns>The operation with corresponding RequestId.</returns>
    [Wrappable(false), Hookable(false)]
    public static RetailDocumentOperation findByRequestId(guid _requestId, boolean _forUpdate = false)
    {
        RetailDocumentOperation table;
        if (_requestId)
        {
            table.selectForUpdate(_forUpdate);
            select firstonly table where table.RequestId == _requestId;
        }

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOperationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find an operation according to given operation RecId.
    /// </summary>
    /// <param name = "_operationRecId">The operation RecId.</param>
    /// <param name = "_forUpdate">true if the found operation can be updated; otherwise, false.</param>
    /// <returns>The operation with corresponding RecId.</returns>
    [Wrappable(false), Hookable(false)]
    public static RetailDocumentOperation findByOperationRecId(int64 _operationRecId, boolean _forUpdate = false)
    {
        RetailDocumentOperation table;
        if (_operationRecId)
        {
            table.selectForUpdate(_forUpdate);
            select firstonly table where table.RecId == _operationRecId;
        }

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOperationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// init operation.
    /// </summary>
    /// <param name = "_requesetId">The request id.</param>
    /// <param name = "_operationName">The operation name.</param>
    /// <param name = "_company">The company name.</param>
    /// <param name = "_requestContainer">The request container.</param>
    /// <returns>The operation with corresponding RecId.</returns>
    [Wrappable(false), Hookable(false)]
    internal static RetailDocumentOperation initOperationRecord(guid _requestId, str _operationName, str _company, container _requestContainer)
    {
        RetailDocumentOperation                retailDocumentOperationTable;

        NumberSeq numSeq 
            = NumberSeq::newGetNum(RetailParameters::numRefRetailDocumentOperationId());
        
        if(numSeq)
        {
            retailDocumentOperationTable.RetailDocumentOperationId = numSeq.num();
        }

        retailDocumentOperationTable.RequestId = _requestId;
        retailDocumentOperationTable.OperationName = _operationName;
        retailDocumentOperationTable.ProcessorClassNumber = RetailDocumentOperationProcessorFactory::getProcessorClassNumberByOperationName(_operationName);
        retailDocumentOperationTable.Status = RetailDocumentOperationStatus::Committed;
        retailDocumentOperationTable.RequestContainer = _requestContainer;
        retailDocumentOperationTable.Company = _company;
        retailDocumentOperationTable.ProcessingErrorCode = RetailDocumentOperationProcessingErrorCode::None;
        retailDocumentOperationTable.CommittedDateTime = DateTimeUtil::utcNow();

        return retailDocumentOperationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Status to processing and start time.
    /// </summary>
    [Wrappable(false), Hookable(false)]
    internal void updateAsProcessing()
    {
        ttsbegin;
        this.Status = RetailDocumentOperationStatus::Processing;
        this.StartDateTime = DateTimeUtil::utcNow();
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsQueued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Status to queued.
    /// </summary>
    [Wrappable(false), Hookable(false)]
    internal void updateAsQueued()
    {
        ttsbegin;
        this.Status = RetailDocumentOperationStatus::Queued;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsRetriableError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Status to retriable error and end time.
    /// </summary>
    /// <param name = "_errorCode">The processing error code.</param>
    /// <param name = "_errorMessage">The processing error message.</param>
    [Wrappable(false), Hookable(false)]
    internal void updateAsRetriableError(RetailDocumentOperationProcessingErrorCode _errorCode, str _errorMessage)
    {
        container                               resultContainer        = [_errorMessage];

        ttsbegin;
        this.Status = RetailDocumentOperationStatus::RetriableError;
        this.EndDateTime = DateTimeUtil::utcNow();
        this.ProcessingErrorCode = _errorCode;
        this.ResultContainer = resultContainer;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsSucceeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status to succeeded, update result and end time.
    /// </summary>
    /// <param name = "_resultContainer">Result to save.</param>
    [Wrappable(false), Hookable(false)]
    internal void updateAsSucceeded(container _resultContainer)
    {
        ttsbegin;
        this.Status = RetailDocumentOperationStatus::Succeeded;
        this.EndDateTime = DateTimeUtil::utcNow();
        this.ResultContainer = _resultContainer;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status to failed, update result and end time and processing 
    /// </summary>
    /// <param name = "_errorCode">Error code.</param>
    /// <param name = "_errorMessage">Error message.</param>
    [Wrappable(false), Hookable(false)]
    internal void updateAsFailed(RetailDocumentOperationProcessingErrorCode _errorCode, str _errorMessage)
    {
        container                               resultContainer        = [_errorMessage];

        ttsbegin;
        this.Status = RetailDocumentOperationStatus::Failed;
        this.EndDateTime = DateTimeUtil::utcNow();
        this.ProcessingErrorCode = _errorCode;
        this.ResultContainer = resultContainer;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetToCommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset operation back to committed status.
    /// Reset the response container to null
    /// Reset the processingg error code to noError.
    /// </summary>
    [Wrappable(false), Hookable(false)]
    internal void resetToCommitted()
    {
        ttsbegin;
        this.Status = RetailDocumentOperationStatus::Committed;
        this.ResultContainer = conNull();
        this.ProcessingErrorCode = RetailDocumentOperationProcessingErrorCode::None;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>CommerceMiscellaneous</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailDocumentOperationId</Name>
			<ExtendedDataType>RetailDocumentOperationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>RequestId</Name>
			<ExtendedDataType>RetailDocumentOperationRequestId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OperationName</Name>
			<ExtendedDataType>RetailDocumentOperationOperationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ProcessorClassNumber</Name>
			<ExtendedDataType>ClassId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>RetailDocumentOperationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RequestContainer</Name>
			<ExtendedDataType>RetailDocumentOperationRequestContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ResultContainer</Name>
			<ExtendedDataType>RetailDocumentOperationResultContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessingErrorCode</Name>
			<EnumType>RetailDocumentOperationProcessingErrorCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RetryCount</Name>
			<ExtendedDataType>RetailDocumentOperationRetries</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CommittedDateTime</Name>
			<ExtendedDataType>RetailDocumentOperationCommittedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDateTime</Name>
			<ExtendedDataType>EndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailStaffId</Name>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>NextRetryTime</Name>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StatusCommitedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CommittedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NextRetryTime</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RequestIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RequestId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailDocumentOperationIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailDocumentOperationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusStartDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>