<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAbsenceCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgAbsenceCalendar extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hrmAbsenceCodeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description of the absence code in this record.
    /// </summary>
    /// <returns>
    ///    The description of the absence code in the chosen record.
    /// </returns>
    public display CCDescription hrmAbsenceCodeDescription()
    {
        HRMAbsenceCode      hrmAbsenceCode;
        HRMAbsenceCodeGroup hrmAbsenceCodeGroup;
        hrmAbsenceCode.recordLevelSecurity(true);
        hrmAbsenceCode = HRMAbsenceCode::findByJobId(this.JobId);

        if (hrmAbsenceCode && hrmAbsenceCode.Description)
        {
            return hrmAbsenceCode.Description;
        }

        hrmAbsenceCodeGroup.recordLevelSecurity(true);
        hrmAbsenceCodeGroup = HRMAbsenceCodeGroup_Extension::findJobId(this.JobId);
        return hrmAbsenceCodeGroup.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hrmAbsenceCodeGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the absence code group the absence code of the selected record should belong to.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether the user wishes to change the absence code group of the
    ///    record.
    /// </param>
    /// <param name="_value">
    ///    The new absence code group of the record.
    /// </param>
    /// <returns>
    ///    The absence code group of the selected record.
    /// </returns>
    public edit HRMAbsenceCodeGroupId hrmAbsenceCodeGroupId(boolean _set, HRMAbsenceCodeGroupId _value)
    {
        HRMAbsenceCodeGroup     hrmAbsenceCodeGroup;
        HRMAbsenceCode          hrmAbsenceCode;
        HRMAbsenceCodeGroupId   ret;
        hrmAbsenceCodeGroup.recordLevelSecurity(true);
        hrmAbsenceCode.recordLevelSecurity(true);
        if (_set)
        {
            hrmAbsenceCodeGroup = HRMAbsenceCodeGroup::find(_value);
            this.JobId = hrmAbsenceCodeGroup.JmgJobId;

            if (!this.JobId)
            {
                select firstonly hrmAbsenceCode where hrmAbsenceCode.HrmAbsenceCodeGroupId == _value;
                this.JobId = hrmAbsenceCode.JmgJobId;
            }
        }

        ret = '';
        if (this.JobId)
        {
            hrmAbsenceCodeGroup = HRMAbsenceCodeGroup_Extension::findJobId(this.JobId);

            ret = hrmAbsenceCodeGroup.HrmAbsenceCodeGroupId;
            if (!ret)
            {
                hrmAbsenceCode = HRMAbsenceCode::findByJobId(this.JobId);
                ret = hrmAbsenceCode.HrmAbsenceCodeGroupId;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hrmAbsenceCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the current absence code of the record.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether the user wishes to change the absence code of the record.
    /// </param>
    /// <param name="_value">
    ///    The new absence code of the record.
    /// </param>
    /// <returns>
    ///    The absence code of the selected record.
    /// </returns>
    public edit HRMAbsenceCodeId hrmAbsenceCodeId(boolean _set, HRMAbsenceCodeId _value)
    {
        HRMAbsenceCode hrmAbsenceCode;

        hrmAbsenceCode.recordLevelSecurity(true);
        if (_set)
        {
            hrmAbsenceCode  = HRMAbsenceCode::find(_value);
            this.JobId      = hrmAbsenceCode.JmgJobId;
        }

        if (this.JobId)
            return HRMAbsenceCode::findByJobId(this.JobId).HrmAbsenceCodeId;

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new record into the <c>JmgAbsenceCalendar</c> table.
    /// </summary>
    /// <remarks>
    ///    The insertion of records is only enabled if the record correctly validates in the <c>validate</c>
    ///    method.
    /// </remarks>
    public void insert()
    {
        if (this.validate())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the month name for the currently selected record.
    /// </summary>
    /// <returns>
    /// The month name as a string.
    /// </returns>
    public display MonthName monthName()
    {
        int     monthInt = mthofyr(DateTimeUtil::date(this.FromDateTime));
        return mthname(monthInt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a record in the <c>JmgAbsenceCalendar</c> table.
    /// </summary>
    /// <remarks>
    ///    Records are only able to update if they correctly validate in the <c>validate</c> method.
    /// </remarks>
    public void update()
    {
        if (this.validate())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a record to ensure the times are valid, that there are not overlaps with absence periods
    ///    already present in the calendar, and that it contains an absence group ID.
    /// </summary>
    /// <returns>
    ///    true if the times, period, and absence code group are all valid; otherwise, false.
    /// </returns>
    boolean validate()
    {
        JmgDateTime         thisFromTime;
        JmgDateTime         thisToTime;
        JmgDateTime         absenceCalFromTime;
        JmgDateTime         absenceCalToTime;
        JmgAbsenceCalendar  jmgAbsenceCalendar;
        boolean             ret = true;

        if (!this.FromDateTime)
        {
            ret = checkFailed("@SYS39559");
        }

        ret = ret && this.validateWorkerTimeRegistrationActiveDate();

        ret = ret && JmgEmployee::validateRegistrationWorker(this.Worker, true, DateTimeUtil::date(this.FromDateTime));

        if (ret && !this.ToDateTime)
        {
            ret = ret && checkFailed("@SYS39563");
        }

        if (ret && (this.FromDateTime > this.ToDateTime))
        {
            ret = ret && checkFailed("@SYS39558");
        }

        if (ret)
        {
            thisFromTime = this.FromDateTime;
            thisToTime = this.ToDateTime;

            // Check for overlap.
            while select RecId, Worker, FromDateTime, ToDateTime, CalculationTrans from jmgAbsenceCalendar
            where jmgAbsenceCalendar.RecId    != this.RecId   &&
                  jmgAbsenceCalendar.Worker   == this.Worker  &&
                  jmgAbsenceCalendar.FromDateTime <= this.ToDateTime  &&
                  jmgAbsenceCalendar.ToDateTime   >= this.FromDateTime &&
                  jmgAbsenceCalendar.CalculationTrans   == this.CalculationTrans
            {
                absenceCalFromTime = jmgAbsenceCalendar.FromDateTime;
                absenceCalToTime = jmgAbsenceCalendar.ToDateTime;

                if ( (thisFromTime > absenceCalFromTime && thisFromTime < absenceCalToTime ) ||
                 (thisToTime > absenceCalFromTime && thisToTime < absenceCalToTime ) ||
                 (thisFromTime <= absenceCalFromTime && thisToTime >= absenceCalToTime ) )
                {
                    ret = ret && checkFailed("@SYS7553");
                    break;
                }
            }
        }

        if (ret && !this.hrmAbsenceCodeGroupId(false, ''))
        {
            ret = ret && checkFailed("@SYS78502");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkerTimeRegistrationActiveDate</Name>
				<Source><![CDATA[
    private boolean validateWorkerTimeRegistrationActiveDate()
    {
        boolean ret = true;

        JmgEmployee jmgEmployee;

        SysDaQueryObject queryEmployee = new SysDaQueryObject(jmgEmployee);
        queryEmployee.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(jmgEmployee, fieldStr(JmgEmployee, Worker)),
                new SysDaValueExpression(this.Worker)));

        SysDaFindObject fo = new SysDaFindObject(queryEmployee);
        new SysDaFindStatement().execute(fo);

        if (jmgEmployee && !jmgEmployee.Active)
        {
            ret = checkFailed(strFmt("@SCM:JmgEmployeeWorkerIsNotActive", HcmWorker::find(this.Worker).PersonnelNumber));
        }
        else if (jmgEmployee.Active && jmgEmployee.ActiveFrom && DateTimeUtil::date(this.FromDateTime) < DateTimeUtil::date(jmgEmployee.ActiveFrom))
        {
            ret = checkFailed(strFmt("@SCM:JmgAbsenceCalendarWrongStartDateTime", jmgEmployee.ActiveFrom,
                    DateTimeUtil::applyTimeZoneOffset(jmgEmployee.ActiveFrom, DateTimeUtil::getUserPreferredTimeZone())));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a record is located in the <c>jmgIpcActivity</c> table with a corresponding job ID
    ///    type of absence.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The corresponding record in the <c>jmgIpcActivity</c> table is not registered as absence.
    /// </exception>
    public void write()
    {
        if (((select firstonly RecId from jmgIpcActivity where
                            jmgIpcActivity.JobId    == this.JobId   &&
                            jmgIpcActivity.Type     != JmgStampTypeEnum::Absence).RecId))
            throw error("@SYS38460");

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>year</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the year for the currently selected record.
    /// </summary>
    /// <returns>
    /// The year as an integer.
    /// </returns>
    public display JmgYear year()
    {
        return year(DateTimeUtil::date(this.FromDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlannedAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an employee has a planned absence on a specific date.
    /// </summary>
    /// <param name="_worker">
    /// The worker ID of the employee for which to check the planned absence.
    /// </param>
    /// <param name="_profileDate">
    /// The date that to check if there is planned absence.
    /// </param>
    /// <returns>
    /// true if there is a planned absence for the employee on the specified date; otherwise, false.
    /// </returns>
    [Replaceable]
    public static boolean isPlannedAbsence(JmgWorkerRecId _worker, JmgProfileDate _profileDate)
    {
        JmgAbsenceCalendar  absenceCalendar;

        select firstonly absenceCalendar order by FromDateTime desc
                where absenceCalendar.FromDateTime <= DateTimeUtil::newDateTime(_profileDate,24*60*60,DateTimeUtil::getUserPreferredTimeZone())  &&
                      absenceCalendar.ToDateTime   >= DateTimeUtil::newDateTime(_profileDate,0,DateTimeUtil::getUserPreferredTimeZone())  &&
                      absenceCalendar.Worker    == _worker;

        if (absenceCalendar)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupHRMAbsenceCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup window to find absence codes.
    /// </summary>
    /// <param name="_control">
    /// The control from which the lookup is performed.
    /// </param>
    /// <param name="_group">
    /// The filtering value for the lookup form.
    /// </param>
    public static void lookupHRMAbsenceCodeId(FormStringControl     _control,
                                              HRMAbsenceCodeGroupId _group = '')
    {
        SysTableLookup          sysTableLookup;
        Query                   q;
        QueryBuildDataSource    qbds;
        q       = new Query();
        qbds    = q.addDataSource(tablenum(HRMAbsenceCode));
        qbds.addRange(fieldnum(HRMAbsenceCode, JmgJobId)).value(SysQuery::valueNot(''));

        if (_group)
        {
            qbds.addRange(fieldnum(HRMAbsenceCode, HrmAbsenceCodeGroupId)).value(queryValue(_group));
        }

        sysTableLookup = SysTableLookup::newParameters(tablenum(HRMAbsenceCode), _control);
        sysTableLookup.parmQuery(q);
        sysTableLookup.addLookupfield(fieldnum(HRMAbsenceCode, HrmAbsenceCodeId), true);
        sysTableLookup.addLookupfield(fieldnum(HRMAbsenceCode, Description));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFromStampJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>JmgAbsenceCalendar</c> based on <c>JmgStampJournalTrans</c> data
    /// </summary>
    /// <param name = "_jmgStampJournalTrans"><c>JmgStampJournalTrans</c> on which the record should be created</param>
    public void populateFromStampJournalTrans(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        this.Worker           = _jmgStampJournalTrans.Worker;
        this.JobId            = (_jmgStampJournalTrans.JobIDAbs ? _jmgStampJournalTrans.JobIDAbs : _jmgStampJournalTrans.JobId);
        this.FromDateTime     = DateTimeUtil::newDateTime(_jmgStampJournalTrans.StartDate, _jmgStampJournalTrans.StartTime, DateTimeUtil::getUserPreferredTimeZone());
        this.ToDateTime       = DateTimeUtil::newDateTime(_jmgStampJournalTrans.StopDate, _jmgStampJournalTrans.StopTime, DateTimeUtil::getUserPreferredTimeZone());
        this.CalculationTrans = NoYes::Yes;
        this.Seconds          = _jmgStampJournalTrans.Seconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317236</DeveloperDocumentation>
	<Label>@SYS38546</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FromDateTime</TitleField1>
	<TitleField2>ToDateTime</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>HcmWorkerIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisableAtSigning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateInterval</Name>
			<Label>@SYS22526</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interrupt</Name>
			<Label>@SYS38547</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisableAtSigning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Job</Name>
			<Label>@SYS1066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hrmAbsenceCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hrmAbsenceCodeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hrmAbsenceCodeGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hrmAbsenceCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hrmAbsenceCodeDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisableAtSigning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalculationTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisableAtSigning</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS38547</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Disabled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS38465</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgAbsenceFromDateTime</ExtendedDataType>
			<Label>@SYS109394</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Seconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgAbsenceToDateTime</ExtendedDataType>
			<Label>@SYS109395</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgAbsenceCalendar</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>