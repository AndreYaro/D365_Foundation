<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransVoucherTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransVoucherTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>LedgerJournalTransVoucherTemplate</c>
    ///    table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_journalType">
    ///    The journal type from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_journalNum">
    ///    The journal number from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise false.
    /// </returns>
    public static boolean checkExist(
        LedgerJournalType   _journalType,
        LedgerJournalId     _journalNum,
        Voucher             _voucher)
    {
        boolean success = true;

        if (!LedgerJournalTransVoucherTemplate::exist(_journalType, _journalNum, _voucher))
        {
            success = checkFailed(strfmt(LedgerJournalTransVoucherTemplate::txtNotExist(), _journalType, _journalNum, _voucher));
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForJournalOrVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the specified records from the <c>LedgerJournalTransVoucherTemplate</c> table.
    /// </summary>
    /// <param name="_journalNum">
    ///    The journal number from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher from the <c>LedgerJournalTransVoucherTemplate</c> record; optional.
    /// </param>
    /// <remarks>
    ///    If voucher is not specified, all <c>LedgerJournalTransVoucherTemplate</c> records with the
    ///    specified journal number are deleted.
    ///    If voucher is specified, all
    ///    <c>LedgerJournalTransVoucherTemplate</c> records with the specified journal number and voucher are
    ///    deleted.
    /// </remarks>
    public static void deleteForJournalOrVoucher(LedgerJournalId _journalNum, Voucher _voucher = '')
    {
        LedgerJournalTransVoucherTemplate ledgerJournalTransVoucherTemplate;
        
        if (LedgerJournalDeleteTransactionSetBasedFlight::instance().isEnabled())
        {
            LedgerJournalTrans::skipTableMethodsOnDelete(ledgerJournalTransVoucherTemplate);
        }

        ttsbegin;

        if (!_voucher)
        {
            delete_from ledgerJournalTransVoucherTemplate
                where   ledgerJournalTransVoucherTemplate.JournalNum == _journalNum;
        }
        else
        {
            delete_from ledgerJournalTransVoucherTemplate
                where   ledgerJournalTransVoucherTemplate.JournalNum == _journalNum &&
                        ledgerJournalTransVoucherTemplate.Voucher == _voucher;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>LedgerJournalTransVoucherTemplate</c> table
    ///    exists.
    /// </summary>
    /// <param name="_journalType">
    ///    The journal type from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_journalNum">
    ///    The journal number from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        LedgerJournalType   _journalType,
        LedgerJournalId     _journalNum,
        Voucher             _voucher)
    {
        boolean found;

        found = (select firstonly
                    RecId
                from
                    ledgerJournalTransVoucherTemplate
                where
                    ledgerJournalTransVoucherTemplate.JournalType == _journalType &&
                    ledgerJournalTransVoucherTemplate.JournalNum == _journalNum &&
                    ledgerJournalTransVoucherTemplate.Voucher == _voucher).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerJournalTransVoucherTemplate</c> table.
    /// </summary>
    /// <param name="_journalType">
    ///    The journal type from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_journalNum">
    ///    The journal number from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_readForUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    Returns a record in the <c>LedgerJournalTransVoucherTemplate</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTransVoucherTemplate find(
        LedgerJournalType   _journalType,
        LedgerJournalId     _journalNum,
        Voucher             _voucher,
        boolean             _readForUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTransVoucherTemplate ledgerJournalTransVoucherTemplate;

        ledgerJournalTransVoucherTemplate.selectForUpdate(_readForUpdate);

        if (_readForUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTransVoucherTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerJournalTransVoucherTemplate
            where
            ledgerJournalTransVoucherTemplate.JournalType == _journalType &&
            ledgerJournalTransVoucherTemplate.JournalNum == _journalNum &&
            ledgerJournalTransVoucherTemplate.Voucher == _voucher;

        return ledgerJournalTransVoucherTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>LedgerJournalTransVoucherTemplate</c>
    ///    table does not exist.
    /// </summary>
    /// <returns>
    ///    Returns a message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS116171";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a <c>LedgerJournalTransVoucherTemplate</c> table record for a change to the journal number
    ///    or voucher values of a <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The changed <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <param name="_oldJournalNum">
    ///    The journal number from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <param name="_oldVoucher">
    ///    The voucher from the <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    public static void updateVoucherTemplate(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalId _oldJournalNum, Voucher _oldVoucher)
    {
        LedgerJournalTransVoucherTemplate    ledgerJournalTransVoucherTemplate;

        ledgerJournalTransVoucherTemplate = LedgerJournalTransVoucherTemplate::find(
                                            _ledgerJournalTrans.ledgerJournalTable().JournalType,
                                            _oldJournalNum,
                                            _oldVoucher,
                                            true);

        if (ledgerJournalTransVoucherTemplate.RecId != 0)
        {
            ttsbegin;

            // if the voucher is being changed to one that already exists, delete the row else update
            if (LedgerJournalTransVoucherTemplate::exist(
                    _ledgerJournalTrans.ledgerJournalTable().JournalType,
                    _ledgerJournalTrans.JournalNum,
                    _ledgerJournalTrans.Voucher))
            {
                ledgerJournalTransVoucherTemplate.delete();
            }
            else
            {
                ledgerJournalTransVoucherTemplate.JournalNum = _ledgerJournalTrans.JournalNum;
                ledgerJournalTransVoucherTemplate.Voucher = _ledgerJournalTrans.Voucher;
                ledgerJournalTransVoucherTemplate.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126196</DeveloperDocumentation>
	<Label>@SYS116170</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>JournalNum</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumVoucherIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>NumVoucherIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherTemplateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TemplateFields</Name>
			<Label>@SYS116170</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherTemplateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>LedgerJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VoucherTemplateType</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS116161</Label>
			<EnumType>PercentAmount</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumVoucherIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>