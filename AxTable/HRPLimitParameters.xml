<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPLimitParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HRPLimitParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the table fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    An instance of the <c>FieldId</c> data type.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        utcdatetime utcNow;
        SysPolicy   policy;
        HRPExpireWorkerLimits expireWorkerLimits;
        HRPLimitParameters  limitParameters;
        HRPAuthorityBasis   origSigningLimitBasis;

        utcNow = DateTimeUtil::utcNow();
        expireWorkerLimits = new HRPExpireWorkerLimits();

        select firstonly SigningLimitBasedOn from limitParameters;
        origSigningLimitBasis = limitParameters.SigningLimitBasedOn;

        super(_fieldId);

        ttsbegin;
        switch (_fieldId)
        {
            case fieldnum(HRPLimitParameters, SigningLimitBasedOn) :
                delete_from policy
                    where   policy.PolicyType == SysPolicyType::findByEnum(SysPolicyTypeEnum::ApprovalPolicy).RecId
                    &&      policy.IsActive == NoYes::Yes;

                expireWorkerLimits.changeInAuthorityBasis(origSigningLimitBasis);
                this.IsRequestRequiredToGetDefaultLimit = NoYes::No;
                this.IsEmployeeOnlyGetSigningLimits = NoYes::No;
                this.write();
                break;

            case fieldnum(HRPLimitParameters, IsEmployeeOnlyGetSigningLimits) :
                expireWorkerLimits.changeInIsEmployeeOnlyGetSL(this.IsEmployeeOnlyGetSigningLimits);
                break;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>HRPLimitParameters</c> table exists.
    /// </summary>
    /// <returns>
    ///    true if the specified record was found; otherwise, false.
    /// </returns>
    public static boolean exist()
    {
        return (select firstonly RecId from hrpLimitParameters).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HRPLimitParameters</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The specified record if found; otherwise, an empty record.
    /// </returns>
    public static HRPLimitParameters find(boolean _forUpdate = false)
    {
        HRPLimitParameters parameter;

        if (_forUpdate)
        {
            parameter.selectForUpdate(_forUpdate);
        }

        select firstonly parameter
            where parameter.Key == 0;

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the number sequence module for the <c>HRMParameters</c> table
    /// </summary>
    /// <returns>the number sequence module for the <c>HRMParameters</c> table</returns>
    static NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::SigningLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefSigningLimitRequestNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>NumberSequenceReference</c> value of the Signing Limit Request
    /// </summary>
    /// <returns>
    ///    The <c>NumberSequenceReference</c> value of the Signing Limit Request
    /// </returns>
    /// <remarks>
    ///    This method calls the <c>NumberSeqReference::findReference</c> method to find the
    ///    <c>NumberSequenceReference</c> value of the applicantion based on the <c>HRPRequestNumber</c> extended
    ///    data type.
    /// </remarks>
    static NumberSequenceReference numRefSigningLimitRequestNumber()
    {
        return NumberSeqReference::findReference(extendedTypeNum(HRPRequestNumber));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS317822</DeveloperDocumentation>
	<Label>@SYS302157</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>SigningLimitBasedOn</TitleField1>
	<TitleField2>IsRequestRequiredToGetDefaultLimit</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>HumanResource</Modules>
	<ReplacementKey>Key</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SigningLimitBasedOn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRequestRequiredToGetDefaultLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEmployeeOnlyGetSigningLimits</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LimitSetup</Name>
			<Label>@SYS302218</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SigningLimitBasedOn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRequestRequiredToGetDefaultLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEmployeeOnlyGetSigningLimits</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEmployeeOnlyGetSigningLimits</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRPIsOnlyEmployeeGetLimits</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRequestRequiredToGetDefaultLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRPIsRequestToGetDefaultLimits</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SigningLimitBasedOn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS302238</Label>
			<EnumType>HRPAuthorityBasis</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>