<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkTemplateLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkTemplateLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Mandatory = NoYes::Yes;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinalPutLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the work template line is the final Put line.
    /// </summary>
    /// <returns>
    /// true if the workTemplateLine is a put and does not have a pick afterward; otherwise, false.
    /// </returns>
    public boolean isFinalPutLine()
    {
        WHSWorkTemplateLine workTemplateLine;

        if (this.WorkType != WHSWorkType::Put)
        {
            return false;
        }

        // Check that a pick line exists after this line
        select firstonly RecId from workTemplateLine
            where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
            &&    workTemplateLine.WorkTransType    == this.WorkTransType
            &&    workTemplateLine.LineNum          >  this.LineNum
            &&    workTemplateLine.WorkType         == WHSWorkType::Pick;

        return workTemplateLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStagingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the work template line is a 'staging' line.
    /// </summary>
    /// <returns>
    /// true if there is a pick both before and after this line in the work template; otherwise, false.
    /// </returns>
    public boolean isStagingLine()
    {
        WHSWorkTemplateLine workTemplateLine;

        // Check that a pick line exists after this line
        select firstonly RecId from workTemplateLine
            where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
            &&    workTemplateLine.WorkTransType    == this.WorkTransType
            &&    workTemplateLine.LineNum          >  this.LineNum
            &&    workTemplateLine.WorkType         == WHSWorkType::Pick;

        // Check that a pick line exists prior to this line
        if (workTemplateLine.RecId != 0)
        {
            select firstonly RecId from workTemplateLine
                where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
                &&    workTemplateLine.WorkTransType    == this.WorkTransType
                &&    workTemplateLine.LineNum          <  this.LineNum
                &&    workTemplateLine.WorkType         == WHSWorkType::Pick;
        }

        return workTemplateLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortingNoArrange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change <c>WHSWorkTemplateLine</c> line numbers with adjacent line numbers based on up or down button click
    /// </summary>
    /// <param name="_up">
    /// Boolean used to determine if the up button or down button was pressed
    /// </param>
    /// <returns>
    /// An instance of <c>WHSWorkTemplateLine</c> that represents the line that was moved
    /// </returns>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public WHSWorkTemplateLine sortingNoArrange(boolean _up)
    {
        WHSWorkTemplateLine workTemplateLineNew;
        WHSWorkTemplateLine workTemplateLineOld;
        WHSWorkTemplateLine cursor;
        real                change;
        LineNum             oldLineNum;

        cursor = this;

        if (this.isTmp() || cursor.validateWrite())
        {
            ttsbegin;

            cursor.write();

            if (this.isTmp())
            {
                workTemplateLineNew.setTmp();
                workTemplateLineNew.setTmpData(this);
                workTemplateLineOld.setTmp();
                workTemplateLineOld.setTmpData(this);
            }
            else
            {
                workTemplateLineNew.data(this);
                workTemplateLineOld.data(this);
            }

            if (_up == true)
            {
                if (cursor.LineNum > 1)
                {
                    change--;
                }
            }
            else
            {
                if (cursor.LineNum < WHSWorkTemplateTable::getMaxLineNum(cursor.WorkTemplateCode, cursor.WorkTransType)
                &&  cursor.LineNum != 0)
                {
                    change++;
                }
            }

            if (change)
            {
                select forupdate workTemplateLineNew
                    where workTemplateLineNew.RecId == cursor.RecId;

                if (workTemplateLineNew)
                {
                    oldLineNum = workTemplateLineNew.LineNum;
                    workTemplateLineNew.LineNum += change;

                    select forupdate firstonly workTemplateLineOld
                        where workTemplateLineOld.LineNum           == workTemplateLineNew.LineNum
                            && workTemplateLineOld.WorkTemplateCode == workTemplateLineNew.WorkTemplateCode
                            && workTemplateLineOld.WorkTransType    == workTemplateLineNew.WorkTransType
                            && workTemplateLineOld.RecId            != workTemplateLineNew.RecId;

                    if (workTemplateLineOld && change)
                    {
                        workTemplateLineOld.LineNum = maxInt(); // Update index conflict during switch of sequence
                        workTemplateLineOld.update();
                    }

                    workTemplateLineNew.update();

                    if (workTemplateLineOld && change)
                    {
                        workTemplateLineOld.LineNum = oldLineNum;
                        workTemplateLineOld.update();
                    }
                }
            }
            ttscommit;
        }
        else
        {
            workTemplateLineNew = cursor;
        }
        return workTemplateLineNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             ret;
        WHSWorkTemplateLine workTemplateLine;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSWorkTemplateLine, LocDirHintCode):
                if (this.isLocDirHintCodeEnabledByWorkTransType()
                && this.WorkType == WHSWorkType::Put
                && this.LocDirHintCode)
                {
                    select maxof(LineNum) from workTemplateLine
                        where workTemplateLine.WorkTemplateCode == this.WorkTemplateCode
                            && workTemplateLine.WorkTransType   == this.WorkTransType
                            && workTemplateLine.WorkType        == this.WorkType;

                    if (this.LineNum >= workTemplateLine.LineNum)
                    {
                        ret = checkFailed(strFmt("@WAX5385", fieldId2pname(tableNum(WHSWorkTemplateLine), fieldNum(WHSWorkTemplateLine, LocDirHintCode))));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocDirHintCodeEnabledByWorkTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isLocDirHintCodeEnabledByWorkTransType()
    {
        return this.WorkTransType == WHSWorkTransType::Purch
            || this.WorkTransType == WHSWorkTransType::ProdPut
            || this.WorkTransType == WHSWorkTransType::ProdProcessPut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the field.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the field to be validated.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index of the field.
    /// </param>
    /// <returns>
    /// True if the field is validated, false otherwise.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSWorkTemplateLine, WorkType):
                if (!this.validateWorkType())
                {
                    ret = checkFailed(strFmt("@WAX5837", this.WorkType));
                }
                else if (!this.validateWorkTypeForWorkTransType())
                {
                    ret = checkFailed(strFmt("@WAX:InvalidWorkTypeForSpecificWorkOrderType", this.WorkTransType));
                }

                break;

            case fieldStr(WHSWorkTemplateLine, QualityCheckTemplateName):
                
                if (!this.validateQualityCheckTemplateForWorkTransType())
                {
                    ret = checkFailed(strFmt("@WAX:InvalidQCTemplateForSpecificWorkOrderType",this.QualityCheckTemplateName, this.WorkTransType));
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQualityCheckTemplateForWorkTransType</Name>
				<Source><![CDATA[
    internal boolean validateQualityCheckTemplateForWorkTransType()
    {
        WHSQualityCheckTemplate qualityCheckTemplate;

        if (this.QualityCheckTemplateName
            && this.WorkTransType == WHSWorkTransType::TransferReceipt)
        {
            select firstonly RecId from qualityCheckTemplate
                where qualityCheckTemplate.QualityCheckTemplateName == this.QualityCheckTemplateName
                   && qualityCheckTemplate.ProcessingPolicy == WHSQualityProcessingPolicy::CreateQualityOrder;
        }

        return qualityCheckTemplate.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkType</Name>
				<Source><![CDATA[
    private boolean validateWorkType()
    {
        switch (this.WorkType)
        {
            case WHSWorkType::Count:
                return this.WorkTransType == WHSWorkTransType::CycleCount;

            case WHSWorkType::Adjustment:
            case WHSWorkType::Quarantine:
            case WHSWorkType::LicensePlateBuild:
            case WHSWorkType::PackToNestedLicensePlate:
                return false;
        }

        WhsWorkTypeHandler handler = WhsWorkTypeHandler::singletonFromType(this.WorkType);

        if (handler)
        {
            return handler.isValidForWorkTemplateLine(this);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTypeForWorkTransType</Name>
				<Source><![CDATA[
    private boolean validateWorkTypeForWorkTransType()
    {
        boolean ret = true;
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(this.WorkTransType);

        if (workTransactionType)
        {
            ret = workTransactionType.isWorkTypeValid(this.WorkType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                 ret;
        WHSWorkTemplateLine     workTemplateLine;

        ret = super();

        if (ret)
        {
            select firstonly workTemplateLine
                order by workTemplateLine.LineNum
                where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode  &&
                      workTemplateLine.WorkTransType     == this.WorkTransType;

            if (!workTemplateLine && this.WorkType == WHSWorkType::Put)
            {
                ret = checkFailed(strFmt("@WAX576", this.WorkType));
            }
        }

        if (ret && !this.WorkStop && this.Freeze)
        {
            ret = checkFailed("@WAX:WHSWarehouseWorkLineFreezeError");
        }

        if (ret && this.AnchoringGroupId && this.WorkType != WHSWorkType::Put)
        {
            ret = checkFailed("@WAX:WHSWorkTemplateLineAnchoringGroupOnPutLineError");
        }

        ret = ret && this.validateWorkClassId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkClassId</Name>
				<Source><![CDATA[
    private boolean validateWorkClassId()
    {
        if (this.WorkTransType != WHSWorkClassTable::findByWorkClassId(this.WorkClassId).WorkTransType)
        {
            return checkFailed("@WAX1459");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsWorkTemplateLine</c> record exists.
    /// </summary>
    /// <param name="_workTemplateCode">
    /// Template code of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Transaction type of the record.
    /// </param>
    /// <param name="_lineNum">
    /// Line number of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSWorkTemplateCode     _workTemplateCode,
                                WHSWorkTransType        _workTransType,
                                LineNum                 _lineNum)
    {
        return _workTemplateCode && _workTransType && _lineNum &&
               (select firstonly RecId from whsWorkTemplateLine
                where whsWorkTemplateLine.WorkTemplateCode == _workTemplateCode &&
                      whsWorkTemplateLine.LineNum == _lineNum &&
                      whsWorkTemplateLine.WorkTransType == _workTransType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkTemplateLine</c> record with given parameters.
    /// </summary>
    /// <param name="_workTemplateCode">
    /// Template code of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Transaction type of the record.
    /// </param>
    /// <param name="_lineNum">
    /// Line number of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkTemplateLine find(WHSWorkTemplateCode  _workTemplateCode,
                                           WHSWorkTransType     _workTransType,
                                           LineNum              _lineNum,
                                           boolean              _forupdate = false)
    {
        WHSWorkTemplateLine    workTemplateLine;

        if (_workTemplateCode && _workTransType)
        {
            workTemplateLine.selectForUpdate(_forupdate);

            select firstonly workTemplateLine
                where workTemplateLine.WorkTemplateCode == _workTemplateCode &&
                      workTemplateLine.LineNum == _lineNum &&
                      workTemplateLine.WorkTransType == _workTransType;
        }

        return workTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkTemplateLine</c> record by id.
    /// </summary>
    /// <param name="_refRecId">
    /// Referenced record id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkTemplateLine findByRecId(RefRecId  _refRecId,
                                                  boolean   _forupdate = false)
    {
        WHSWorkTemplateLine    workTemplateLine;

        if (_refRecId)
        {
            workTemplateLine.selectForUpdate(_forupdate);

            select firstonly workTemplateLine
                where workTemplateLine.RecId == _refRecId;
        }

        return workTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderWorkTemplateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorders the work template lines line numbers so there are no gaps when lines are deleted.
    /// </summary>
    /// <param name="_workTemplateCode">
    /// Work template code used to filter select to find lines for the same template
    /// </param>
    /// <param name="_workTransType">
    /// Work transaction type used to filter select to find lines for the same template
    /// </param>
    public static void reorderWorkTemplateLines(WHSWorkTemplateCode _workTemplateCode,
        WHSWorkTransType _workTransType)
    {
        WHSWorkTemplateLine workTemplateLine;
        LineNum             lineNum;

        ttsbegin;

        while select forupdate workTemplateLine
            order by workTemplateLine.LineNum
            where workTemplateLine.WorkTemplateCode == _workTemplateCode
                && workTemplateLine.WorkTransType   == _workTransType
        {
            lineNum++;

            if (workTemplateLine.LineNum > lineNum)
            {
                workTemplateLine.LineNum = lineNum;
                workTemplateLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStepBetweenPickAndPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether the selected line is between pick and put lines.
    /// </summary>
    /// <returns>
    /// The step is between pick and put lines or not.
    /// </returns>
    public boolean isStepBetweenPickAndPut()
    {
        WHSWorkTemplateLine workTemplateLine;
        boolean ret  = false;

        select firstOnly WorkType, LineNum from workTemplateLine
            order by LineNum desc
            where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode
                && workTemplateLine.WorkTransType    == this.WorkTransType
                && workTemplateLine.LineNum          <  this.LineNum
                && (workTemplateLine.WorkType        == WHSWorkType::Pick
                    || workTemplateLine.WorkType     == WHSWorkType::Put);

        if (workTemplateLine.LineNum && workTemplateLine.WorkType == WHSWorkType::Pick)
        {
            select firstOnly RecId from workTemplateLine
                order by LineNum
                where workTemplateLine.WorkTemplateCode  == this.WorkTemplateCode
                    && workTemplateLine.WorkTransType    == this.WorkTransType
                    && workTemplateLine.LineNum          >  this.LineNum
                    && workTemplateLine.WorkType         == WHSWorkType::Put;

            if (workTemplateLine)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetWorkLineBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the work line breaks field.
    /// </summary>
    /// <returns>true if it should be enabled to set this field; otherwise false.</returns>
    public boolean canSetWorkLineBreaks()
    {
        return (this.RecId && this.WorkTransType == WHSWorkTransType::CycleCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the mandatory field.
    /// </summary>
    /// <returns>true if it should be enabled to set this field; otherwise false.</returns>
    public boolean canSetMandatory()
    {
        return (this.WorkTransType != WHSWorkTransType::CycleCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetWorkStop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the work stop field.
    /// </summary>
    /// <returns>true if it should be enabled to set this field; otherwise false.</returns>
    public boolean canSetWorkStop()
    {
        return (this.WorkTransType != WHSWorkTransType::CycleCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForFirstPickOrLastPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the work template line from first pick or last put line of the work template header.
    /// </summary>
    /// <param name="_templateCode">
    /// Template code of the lines.
    /// </param>
    /// <param name="_workType">
    /// Type indicating pick or put work.
    /// </param>
    /// <param name="_workTransType">
    /// Transaction type of the lines.
    /// </param>
    public static WHSWorkTemplateLine findForFirstPickOrLastPut(
        WHSWorkTemplateCode	_templateCode,
        WHSWorkType			_workType,
        WHSWorkTransType	_workTransType)
    {
        WHSWorkTemplateLine workTemplateLine;

        switch (_workType)
        {
            case WHSWorkType::Pick:
                workTemplateLine = WHSWorkTemplateLine::findFirst(_templateCode, _workTransType);
                break;

            case WHSWorkType::Put:
                workTemplateLine = WHSWorkTemplateLine::findLast(_templateCode, _workTransType);
                break;
        }

        return workTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>WHSWorkTemplateLine</c> record base don the parameters.
    /// </summary>
    /// <param name="_workTemplateCode">
    /// Template code of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Transaction type of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkTemplateLine findFirst(
        WHSWorkTemplateCode  _workTemplateCode,
        WHSWorkTransType     _workTransType,
        boolean              _forupdate = false)
    {
        WHSWorkTemplateLine    workTemplateLine;

        if (_workTemplateCode && _workTransType)
        {
            workTemplateLine.selectForUpdate(_forupdate);

            select firstonly workTemplateLine
                order by workTemplateLine.LineNum asc
                where workTemplateLine.WorkTemplateCode == _workTemplateCode
                    && workTemplateLine.WorkTransType == _workTransType;
        }

        return workTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last <c>WHSWorkTemplateLine</c> record base don the parameters.
    /// </summary>
    /// <param name="_workTemplateCode">
    /// Template code of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Transaction type of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkTemplateLine findLast(
        WHSWorkTemplateCode  _workTemplateCode,
        WHSWorkTransType     _workTransType,
        boolean              _forupdate = false)
    {
        WHSWorkTemplateLine    workTemplateLine;

        if (_workTemplateCode && _workTransType)
        {
            workTemplateLine.selectForUpdate(_forupdate);

            select firstonly workTemplateLine
                order by workTemplateLine.LineNum desc
                where workTemplateLine.WorkTemplateCode == _workTemplateCode
                    && workTemplateLine.WorkTransType == _workTransType;
        }

        return workTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4512</DeveloperDocumentation>
	<FormRef>WHSWorkTemplateTable</FormRef>
	<Label>@WAX430</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkTemplateCode</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkTemplateCodeLineNumWorkTransTypeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkTemplateCodeLineNumWorkTransTypeIdx</PrimaryIndex>
	<ReplacementKey>WorkTemplateCodeLineNumWorkTransTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkStop</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirHintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mandatory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freeze</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkStop</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirHintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mandatory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freeze</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityCheckTemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnchoringGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Freeze</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSFreeze</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocDirHintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirHintCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Mandatory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMandatory</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkClassId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkClassId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkStop</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkStop</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTemplateCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTypeCustomCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTypeCustomCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QualityCheckTemplateName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQualityCheckTemplateName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AnchoringGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAnchoringGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkTemplateCodeLineNumWorkTransTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QualityCheckTemplateNameWorkTypeWorkTransTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QualityCheckTemplateName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSLocDirHint</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLocDirHint</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocDirHintCode</Name>
					<SourceEDT>WHSLocDirHintCode</SourceEDT>
					<Field>LocDirHintCode</Field>
					<RelatedField>LocDirHintCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkClassTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkClassTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkClassId</Name>
					<SourceEDT>WHSWorkClassId</SourceEDT>
					<Field>WorkClassId</Field>
					<RelatedField>WorkClassId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTemplateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkTemplateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTemplateCode</Name>
					<SourceEDT>WHSWorkTemplateCode</SourceEDT>
					<Field>WorkTemplateCode</Field>
					<RelatedField>WorkTemplateCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<RelatedField>WorkTransType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTypeCustom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkTypeCustom</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTypeCustomCode</Name>
					<SourceEDT>WHSWorkTypeCustomCode</SourceEDT>
					<Field>WorkTypeCustomCode</Field>
					<RelatedField>WorkTypeCustomCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSQualityCheckTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSQualityCheckTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QualityCheckTemplateName</Name>
					<Field>QualityCheckTemplateName</Field>
					<RelatedField>QualityCheckTemplateName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSAnchoringGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSAnchoringGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AnchoringGroupId</Name>
					<SourceEDT>WHSAnchoringGroup</SourceEDT>
					<Field>AnchoringGroupId</Field>
					<RelatedField>AnchoringGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>