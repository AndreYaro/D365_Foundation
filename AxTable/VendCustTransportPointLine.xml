<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendCustTransportPointLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendCustTransportPointLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(VendCustTransportPointLine, ToCountryRegionId) :
                this.ToState = '';
                this.ToCounty = '';
                this.ToCity = '';
                this.ToZipCode = '';
                break;
            case fieldnum(VendCustTransportPointLine, ToState) :
                this.ToCounty = '';
                break;
            case fieldnum(VendCustTransportPointLine, ToZipCode) :
                if (this.ToZipCode)
                {
                    LogisticsAddressZipCode logisticsAddressZipCode = LogisticsAddressZipCode::find(this.ToZipCode);
                    if (logisticsAddressZipCode.RecId)
                    {
                        this.ToZipCode = logisticsAddressZipCode.ZipCode;

                        if (logisticsAddressZipCode.County)
                        {
                            this.ToCounty = logisticsAddressZipCode.County;
                        }
                        if (logisticsAddressZipCode.State)
                        {
                            this.ToState = logisticsAddressZipCode.State;
                        }
                        if (logisticsAddressZipCode.CountryRegionId)
                        {
                            this.ToCountryRegionId = logisticsAddressZipCode.CountryRegionId;
                        }
                        if (logisticsAddressZipCode.City)
                        {
                            this.ToCity = logisticsAddressZipCode.City;
                        }
                    }
                }
                break;

            case fieldnum(VendCustTransportPointLine, ToCity) :
                if (this.ToCity)
                {
                    LogisticsAddressCity logisticsAddressCity = LogisticsAddressCity::find(this.ToCity);
                    if (logisticsAddressCity.RecId)
                    {
                        if (logisticsAddressCity.Name)
                        {
                            this.ToCity = logisticsAddressCity.Name;
                        }
                        if (logisticsAddressCity.StateId)
                        {
                            this.ToState = logisticsAddressCity.StateId;
                        }
                        if (logisticsAddressCity.CountyId)
                        {
                            this.ToCounty = logisticsAddressCity.CountyId;
                        }
                        if (logisticsAddressCity.CountryRegionId)
                        {
                            this.ToCountryRegionId = logisticsAddressCity.CountryRegionId;
                        }
                    }
                }
                break;

            case fieldnum(VendCustTransportPointLine, FromAddress):
            case fieldnum(VendCustTransportPointLine, FromCity):
            case fieldnum(VendCustTransportPointLine, FromCountryRegionId):
            case fieldnum(VendCustTransportPointLine, FromCounty):
            case fieldnum(VendCustTransportPointLine, FromState):
            case fieldnum(VendCustTransportPointLine, FromStreet):
            case fieldnum(VendCustTransportPointLine, FromZipCode):
                this.LogisticsPostalAddressMap::modifiedField(_fieldId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (strLRTrim(this.ToCountryRegionId) == '')
            {
                ret = checkFailed("@SCM:VendCustTransportPoint2Point_ReceivingCountryMandatoryError");
            }
            else if (strLRTrim(this.FromCountryRegionId) == '')
            {
                ret = checkFailed("@SCM:VendCustTransportPoint2Point_ShippingCountryMandatoryError");
            }
        }

        if (ret && this.TransportDays != this.orig().TransportDays)
        {
            VendCustTransportTime transportTime = VendCustTransportTime::defaultTransportTime(this.RecId);

            if (transportTime && transportTime.TransportDays != this.TransportDays)
            {
                ret = checkFailed(strFmt("@SCM:VendCustTransportPointLineFieldChangeDefaultDeliveryModeExistsError",
                    new SysDictField(tableNum(VendCustTransportPointLine), fieldNum(VendCustTransportPointLine, TransportDays)).label()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivingPointString</Name>
				<Source><![CDATA[
    display str receivingPointString()
    {
        str result;

        if (this.toZipCode != '')
        {
            result = strfmt( '@WAX:ReceivingPointFormat', this.ToCountryRegionId, this.ToZipCode, this.ToCity);
        }
        else
        {
            result = this.ToCountryRegionId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAddressMapInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LogisticsPostalAddressMapInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsPostalAddressMapInterface</c> object.
    /// </returns>
    public LogisticsPostalAddressMapInterface logisticsPostalAddressMapInterface()
    {
        return LogisticsPostalAddressMapInterface::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.calculateTransportDayAddressPriority();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.calculateTransportDayAddressPriority();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequestedShipAndReceiptDate</Name>
				<Source><![CDATA[
    internal static VendCustTransportPointCalculateOutput calculateRequestedShipAndReceiptDate(VendCustTransportPointCalculateInput _input)
    {
        VendCustTransportPointCalculateOutput output = VendCustTransportPointCalculateOutput::construct();
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled && _input)
        {
            if (_input.CalculateDirection == SchedDirection::Forward && _input.RequestedShipDate)
            {
                output = VendCustTransportPointLine::calculateRequestedDatesWithShipDateAsInput(_input, output);
            }
            else if (_input.CalculateDirection == SchedDirection::Backward)
            {
                if (_input.RequestedReceiptDate)
                {
                    _input.PurchaseCalendarId = '';
                    _input.LeadTime = 0;

                    output = VendCustTransportPointLine::calculateTransportRequestedReceiptDate(_input);
                    if (output.RequestedReceiptDate != _input.RequestedReceiptDate)
                    {
                        _input.RequestedReceiptDate = output.RequestedReceiptDate;
                    }
                    _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);

                    var outputShip = VendCustTransportPointLine::calculateTransportRequestedShipDate(_input);
                    output.RequestedShipDate = outputShip.RequestedShipDate;
                }
                else if (PurchCalculateBackwardBasedOnRequestedShipDateFlight::instance().isEnabled())
                {
                    // switching to Forward to calculate based on requested shipping date,
                    // but setting Backward direction for searching open date in calendar
                    _input.CalculateDirection = SchedDirection::Forward;
                    _input.IsBackwardShippingDateUpdate = true;
                    output = VendCustTransportPointLine::calculateRequestedDatesWithShipDateAsInput(_input, output);
                }
            }
        }

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequestedDatesWithShipDateAsInput</Name>
				<Source><![CDATA[
    private static VendCustTransportPointCalculateOutput calculateRequestedDatesWithShipDateAsInput(VendCustTransportPointCalculateInput _input, VendCustTransportPointCalculateOutput _output)
    {
        VendCustTransportPointCalculateOutput output = _output;

        output = VendCustTransportPointLine::calculateTransportRequestedShipDate(_input);
        if (output.RequestedShipDate != _input.RequestedShipDate)
        {
            _input.RequestedShipDate = output.RequestedShipDate;
        }

        _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);

        var outputReceipt = VendCustTransportPointLine::calculateTransportRequestedReceiptDate(_input);
        output.RequestedReceiptDate = outputReceipt.RequestedReceiptDate;

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateRequestedShipDate</Name>
				<Source><![CDATA[
    internal static VendCustTransportPointCalculateOutput evaluateRequestedShipDate(
        VendCustTransportPointCalculateInput    _input,
        VendCustTransportPointCalculateOutput   _output)
    {
        VendCustTransportPointCalculateOutput output = _output;

        str beforeTodayWarningText;

        if (_output.RequestedShipDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            if (_input.RequestedShipDateInPast == RequestedShipDateInPast::AllowWarning)
            {
                warning(strFmt("@SCM:VendorDispatchDateRequestedShipDateInPastWarning", _output.RequestedShipDate));
            }

            if (_input.RequestedShipDateInPast == RequestedShipDateInPast::DisallowWarning)
            {
                beforeTodayWarningText = strFmt("@SCM:VendorDispatchDateRequestedShipDateTodayWarning", _output.RequestedShipDate);
                _input.LeadTime = 0;
                _input.CalculateDirection = SchedDirection::Forward;
                _input.RequestedShipDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                output = VendCustTransportPointLine::calculateRequestedShipAndReceiptDate(_input);
                warning(strFmt("@SYS311966", beforeTodayWarningText, strFmt("@SCM:VendorDispatchDateRequestedEarliestPossibleDateWarning", output.RequestedShipDate, output.RequestedReceiptDate)));
            }
        }

        if (_input.CalculateDirection == SchedDirection::Backward 
            && !beforeTodayWarningText)
        {
            _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);
            _input.CalculateDirection = SchedDirection::Forward;
            _input.RequestedShipDate = output.RequestedShipDate;
            output = VendCustTransportPointLine::calculateTransportRequestedReceiptDate(_input);
            output.RequestedShipDate = _input.RequestedShipDate;
        }

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateRequestedReceiptDate</Name>
				<Source><![CDATA[
    internal static VendCustTransportPointCalculateOutput evaluateRequestedReceiptDate(
        VendCustTransportPointCalculateInput    _input,
        VendCustTransportPointCalculateOutput   _output)
    {
        VendCustTransportPointCalculateOutput output = _output;
        
        str beforeTodayWarningText;
        if (output.RequestedReceiptDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            if (_input.RequestedShipDateInPast == RequestedShipDateInPast::AllowWarning)
            {
                warning(strFmt("@SCM:VendorDispatchDateRequestedReceiptDateInPastWarning", _output.RequestedShipDate));
            }

            if (_input.RequestedShipDateInPast == RequestedShipDateInPast::DisallowWarning)
            {
                beforeTodayWarningText = strFmt("@SCM:VendorDispatchDateRequestedReceiptDateTodayWarning", output.RequestedReceiptDate);
                _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);
                _input.CalculateDirection = SchedDirection::Forward;
                _input.RequestedShipDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                output = VendCustTransportPointLine::calculateRequestedShipAndReceiptDate(_input);
                warning(strFmt("@SYS311966", beforeTodayWarningText, strFmt("@SCM:VendorDispatchDateRequestedEarliestPossibleDateWarning", output.RequestedShipDate, output.RequestedReceiptDate)));
            }
        }

        if (_input.CalculateDirection == SchedDirection::Backward
            && !beforeTodayWarningText)
        {
            _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);
            _input.CalculateDirection = SchedDirection::Forward;
            _input.RequestedShipDate = output.RequestedShipDate;
            output = VendCustTransportPointLine::calculateTransportRequestedReceiptDate(_input);
            output.RequestedShipDate = _input.RequestedShipDate;
        }

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransportRequestedShipDate</Name>
				<Source><![CDATA[
    private static VendCustTransportPointCalculateOutput calculateTransportRequestedShipDate(VendCustTransportPointCalculateInput _input)
    {
        var output = VendCustTransportPointCalculateOutput::construct();

        if (!PurchParameters::find().IsSupplierShipmentDatesEnabled || !_input)
        {
            return output;
        }

        DlvDate requestedInputDate =
            _input.CalculateDirection == SchedDirection::Forward
                ? _input.RequestedShipDate
                : _input.RequestedReceiptDate;
        
        if (requestedInputDate == dateNull())
        {
            requestedInputDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        SchedDirection schedDirection = _input.IsBackwardShippingDateUpdate ? SchedDirection::Backward : _input.CalculateDirection;

        WorkCalendarSched workCalendarSchedule = new WorkCalendarSched();
        DlvDate requestedCalculatedDate = workCalendarSchedule.schedDate(
                                                schedDirection,
                                                requestedInputDate,
                                                _input.LeadTime,
                                                _input.UseCalendarDays,
                                                _input.PurchaseCalendarId,
                                                _input.VendorShipCalendarId);
                
        output.RequestedShipDate = requestedCalculatedDate;
    
        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransportRequestedReceiptDate</Name>
				<Source><![CDATA[
    private static VendCustTransportPointCalculateOutput calculateTransportRequestedReceiptDate(VendCustTransportPointCalculateInput _input)
    {
        VendCustTransportPointCalculateOutput output = VendCustTransportPointCalculateOutput::construct();

        if (!PurchParameters::find().IsSupplierShipmentDatesEnabled || !_input)
        {
            return output;
        }

        DlvDate requestedInputDate = 
            _input.CalculateDirection == SchedDirection::Forward
                ? _input.RequestedShipDate
                : _input.RequestedReceiptDate;
        
        if (requestedInputDate != dateNull())
        {
            WorkCalendarSched workCalendarSchedule = new WorkCalendarSched();
            DlvDate requestedCalculatedDate = workCalendarSchedule.schedDate(
                                                    _input.CalculateDirection,
                                                    requestedInputDate,
                                                    _input.LeadTime,
                                                    NoYes::No,
                                                    _input.ItemCoverageGroupCalendarId);
                
            output.RequestedReceiptDate = requestedCalculatedDate;
        }
        
        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateConfirmedShipAndReceiptDate</Name>
				<Source><![CDATA[
    internal static VendCustTransportPointCalculateOutput calculateConfirmedShipAndReceiptDate(VendCustTransportPointCalculateInput _input)
    {
        VendCustTransportPointCalculateOutput output = VendCustTransportPointCalculateOutput::construct();
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled && _input)
        {
            if (VendCustTransportPointLineConfirmDateItemCoverageCalendarFlight::instance().isEnabled())
            {
                _input.ItemCoverageGroupCalendarId = '';
            }

            if (_input.CalculateDirection == SchedDirection::Forward && _input.ConfirmedShipDate)
            {                
                output = VendCustTransportPointLine::calculateTransportConfirmedShipDate(_input);
                if (output.ConfirmedShipDate != _input.ConfirmedShipDate)
                {
                    _input.ConfirmedShipDate = output.ConfirmedShipDate;
                }
                _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);

                var outputReceipt = VendCustTransportPointLine::calculateTransportConfirmedReceiptDate(_input);
                output.ConfirmedReceiptDate = outputReceipt.ConfirmedReceiptDate;
            }
            else if (_input.CalculateDirection == SchedDirection::Backward && _input.ConfirmedReceiptDate)
            {
                _input.PurchaseCalendarId = '';
                _input.LeadTime = 0;

                output = VendCustTransportPointLine::calculateTransportConfirmedReceiptDate(_input);
                if (output.ConfirmedReceiptDate != _input.ConfirmedReceiptDate)
                {
                    _input.ConfirmedReceiptDate = output.ConfirmedReceiptDate;
                }
                _input.LeadTime = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_input.ShippingAddress, _input.ReceivingAddress, _input.DeliveryMode);

                var outputShip = VendCustTransportPointLine::calculateTransportConfirmedShipDate(_input);
                output.ConfirmedShipDate = outputShip.ConfirmedShipDate;
            }
        }

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransportConfirmedShipDate</Name>
				<Source><![CDATA[
    private static VendCustTransportPointCalculateOutput calculateTransportConfirmedShipDate(VendCustTransportPointCalculateInput _input)
    {
        VendCustTransportPointCalculateOutput output = VendCustTransportPointCalculateOutput::construct();

        if (!PurchParameters::find().IsSupplierShipmentDatesEnabled || !_input)
        {
            return output;
        }

        DlvDate confirmedInputDate =
            _input.CalculateDirection == SchedDirection::Forward
                ? _input.ConfirmedShipDate
                : _input.ConfirmedReceiptDate;
        

        if (confirmedInputDate == dateNull())
        {
            confirmedInputDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        WorkCalendarSched workCalendarSchedule = new WorkCalendarSched();
        DlvDate requestedCalculatedDate = workCalendarSchedule.schedDate(
                                                _input.CalculateDirection,
                                                confirmedInputDate,
                                                _input.LeadTime,
                                                _input.UseCalendarDays,
                                                _input.PurchaseCalendarId,
                                                _input.VendorShipCalendarId);
                
        output.ConfirmedShipDate = requestedCalculatedDate;
    
        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransportConfirmedReceiptDate</Name>
				<Source><![CDATA[
    private static VendCustTransportPointCalculateOutput calculateTransportConfirmedReceiptDate(VendCustTransportPointCalculateInput _input)
    {
        VendCustTransportPointCalculateOutput output = VendCustTransportPointCalculateOutput::construct();

        if (!PurchParameters::find().IsSupplierShipmentDatesEnabled || !_input)
        {
            return output;
        }

        DlvDate confirmedInputDate =
            _input.CalculateDirection == SchedDirection::Forward
                ? _input.ConfirmedShipDate
                : _input.ConfirmedReceiptDate;

        if (confirmedInputDate)
        {
            WorkCalendarSched workCalendarSchedule = new WorkCalendarSched();
            DlvDate requestedCalculatedDate = workCalendarSchedule.schedDate(
                                                    _input.CalculateDirection,
                                                    confirmedInputDate,
                                                    _input.LeadTime,
                                                    NoYes::No,
                                                    _input.ItemCoverageGroupCalendarId);
                
            output.ConfirmedReceiptDate = requestedCalculatedDate;
        }
    
        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransportDaysByPostalAddress</Name>
				<Source><![CDATA[
    internal static VendCustTransportDays defaultTransportDaysByPostalAddress(
        LogisticsPostalAddress _fromAddress,
        LogisticsPostalAddress _toAddress,
        DlvModeId              _deliveryMode = '')
    {
        return VendCustTransportPointLine::defaultTransportDays(
            _fromAddress.CountryRegionId, _fromAddress.State, _fromAddress.County, _fromAddress.City, _fromAddress.ZipCode,
            _toAddress.CountryRegionId, _toAddress.State, _toAddress.County, _toAddress.City, _toAddress.ZipCode,
            _deliveryMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransportDays</Name>
				<Source><![CDATA[
    internal static VendCustTransportDays defaultTransportDays(AddressCountryRegionId  _fromCountryRegion   = '',
                                                               AddressStateId          _fromState           = '',
                                                               AddressCountyId         _fromCounty          = '',
                                                               AddressCity             _fromCity            = '',
                                                               AddressZipCodeId        _fromZipCode         = '',
                                                               AddressCountryRegionId  _toCountryRegion     = '',
                                                               AddressStateId          _toState             = '',
                                                               AddressCountyId         _toCounty            = '',
                                                               AddressCity             _toCity              = '',
                                                               AddressZipCodeId        _toZipCode           = '',
                                                               DlvModeId               _deliveryMode        = '')
    {
        VendCustTransportPointLine transportPointLine = VendCustTransportPointLine::findBestMatchAddress(_fromCountryRegion, _fromState, _fromCounty, _fromCity, _fromZipCode, _toCountryRegion, _toState, _toCounty, _toCity, _toZipCode);

        VendCustTransportTime transportTime;
        if (transportPointLine)
        {
            if (_deliveryMode)
            {
                transportTime = VendCustTransportTime::findByDeliveryMode(transportPointLine.RecId, _deliveryMode);
            }
            else
            {
                transportTime = VendCustTransportTime::defaultTransportTime(transportPointLine.RecId);
            }
        }

        return (transportTime ? transportTime.TransportDays : transportPointLine.TransportDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBestMatchAddress</Name>
				<Source><![CDATA[
    private static VendCustTransportPointLine findBestMatchAddress(
        AddressCountryRegionId  _fromCountryRegion,
        AddressStateId          _fromState,
        AddressCountyId         _fromCounty,
        AddressCity             _fromCity,
        AddressZipCodeId        _fromZipCode,
        AddressCountryRegionId  _toCountryRegion,
        AddressStateId          _toState,
        AddressCountyId         _toCounty,
        AddressCity             _toCity,
        AddressZipCodeId        _toZipCode)
    {
        VendCustTransportPointLine transportPointLine;

        if (!_toCountryRegion || !_fromCountryRegion)
        {
            return transportPointLine;
        }

        SysDaQueryObject transportPointLineQueryObject = VendCustTransportPointLine::buildTransportPointLineQuery(
                transportPointLine,
                _fromCountryRegion,
                _fromState,
                _fromCounty,
                _fromCity,
                _fromZipCode,
                _toCountryRegion,
                _toState,
                _toCounty,
                _toCity,
                _toZipCode);

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.find(new SysDaFindObject(transportPointLineQueryObject));

        return transportPointLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransportPointLineQuery</Name>
				<Source><![CDATA[
    private static SysDaQueryObject buildTransportPointLineQuery(
        VendCustTransportPointLine  _transportPointLine,
        AddressCountryRegionId      _fromCountryRegion,
        AddressStateId              _fromState,
        AddressCountyId             _fromCounty,
        AddressCity                 _fromCity,
        AddressZipCodeId            _fromZipCode,
        AddressCountryRegionId      _toCountryRegion,
        AddressStateId              _toState,
        AddressCountyId             _toCounty,
        AddressCity                 _toCity,
        AddressZipCodeId            _toZipCode)
    {
        SysDaQueryObject selectQuery = new SysDaQueryObject(_transportPointLine);
        selectQuery.projection()
            .add(fieldStr(VendCustTransportPointLine, TransportDays))
            .add(fieldStr(VendCustTransportPointLine, RecId));
        selectQuery.firstOnlyHint = true;
        
        // Shipping
        selectQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromCountryRegionId)),
            new SysDaValueExpression(_fromCountryRegion)));
        
        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromState)),
                    new SysDaValueExpression(_fromState))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromState)),
                    new SysDaValueExpression('')))));

        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromCounty)),
                    new SysDaValueExpression(_fromCounty))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromCounty)),
                    new SysDaValueExpression('')))));
        
        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromCity)),
                    new SysDaValueExpression(_fromCity))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromCity)),
                    new SysDaValueExpression('')))));

        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromZipCode)),
                    new SysDaValueExpression(_fromZipCode))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, FromZipCode)),
                    new SysDaValueExpression('')))));
        
        // Receiving 
        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToCountryRegionId)),
                    new SysDaValueExpression(_toCountryRegion))));

        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToState)),
                    new SysDaValueExpression(_toState))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToState)),
                    new SysDaValueExpression('')))));

        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToCounty)),
                    new SysDaValueExpression(_toCounty))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToCounty)),
                    new SysDaValueExpression('')))));

        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToCity)),
                    new SysDaValueExpression(_toCity))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToCity)),
                    new SysDaValueExpression('')))));

        selectQuery.whereClause(selectQuery.whereClause()
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToZipCode)),
                    new SysDaValueExpression(_toZipCode))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_transportPointLine, fieldStr(VendCustTransportPointLine, ToZipCode)),
                    new SysDaValueExpression('')))));
        
        selectQuery.orderByClause(
            new SysDaOrderBys().addDescending(fieldStr(VendCustTransportPointLine, TransportDayAddressPriority)));

        return selectQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransportDayAddressPriority</Name>
				<Source><![CDATA[
    private void calculateTransportDayAddressPriority()
    {
        const int PriorityValue         = 10;
        const int CountryRegionValue    = 100;
        const int StateValue            = 200;
        const int CountyValue           = 400;
        const int CityValue             = 800;
        const int ZipCodeValue          = 1600;

        int sumVendCustTransportDayAddressPriority = 0;
        
        if (this.FromCountryRegionId)
        {
            sumVendCustTransportDayAddressPriority += CountryRegionValue + PriorityValue;
        }
        if (this.FromState)
        {
            sumVendCustTransportDayAddressPriority += StateValue + PriorityValue;
        }
        if (this.FromCounty)
        {
            sumVendCustTransportDayAddressPriority += CountyValue + PriorityValue;
        }
        if (this.FromCity)
        {
            sumVendCustTransportDayAddressPriority += CityValue + PriorityValue;
        }
        if (this.FromZipCode)
        {
            sumVendCustTransportDayAddressPriority += ZipCodeValue + PriorityValue;
        }
        
        if (this.ToCountryRegionId)
        {
            sumVendCustTransportDayAddressPriority += CountryRegionValue;
        }
        if (this.ToState)
        {
            sumVendCustTransportDayAddressPriority += StateValue;
        }
        if (this.ToCounty)
        {
            sumVendCustTransportDayAddressPriority += CountyValue;
        }
        if (this.ToCity)
        {
            sumVendCustTransportDayAddressPriority += CityValue;
        }
        if (this.ToZipCode)
        {
            sumVendCustTransportDayAddressPriority += ZipCodeValue;
        }

        this.TransportDayAddressPriority = sumVendCustTransportDayAddressPriority;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:VendCustTransportPointLine_DeveloperDocumentation</DeveloperDocumentation>
	<FormRef>VendCustTransportPoint2Point</FormRef>
	<Label>@SCM:VendCustTransportPointLine_TableCaption</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>FromCountryRegionId</TitleField1>
	<TitleField2>ToCountryRegionId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>SortIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SortIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToCounty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToZipCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToCounty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromCounty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReceivingPoint</Name>
			<Label>@SYS88253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToCity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToCounty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToCountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShippingPoint</Name>
			<Label>@SYS88254</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromCity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromCounty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromCountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transport</Name>
			<Label>@SYS50385</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressing</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ShippingAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromCity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCityName</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ShippingCity</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromCountryRegionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SCM:VendCustTransportPointLine_ShippingCountryRegion</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromCounty</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCountyId</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ShippingCounty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromState</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ShippingStateId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromStreet</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressStreet</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ShippingStreet</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromZipCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressZipCodeId</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ShippingZipCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressing</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ReceivingAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToCity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCityName</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ReceivingCity</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToCountryRegionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SCM:VendCustTransportPointLine_ReceivingCountryRegion</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToCounty</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCountyId</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ReceivingCounty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToState</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ReceivingStateId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToStreet</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressStreet</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ReceivingStreet</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToZipCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressZipCodeId</ExtendedDataType>
			<Label>@SCM:VendCustTransportPointLine_ReceivingZipCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransportDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCustTransportDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransportDayAddressPriority</Name>
			<ExtendedDataType>VendCustTransportDayAddressPrioritySum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SortIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ToCountryRegionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToState</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToCounty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToZipCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromState</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromZipCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromCountryRegionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromCounty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LogisticsPostalAddressMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Address</MapField>
					<MapFieldTo>FromAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Attention</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ZipCode</MapField>
					<MapFieldTo>FromZipCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>County</MapField>
					<MapFieldTo>FromCounty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountryRegionId</MapField>
					<MapFieldTo>FromCountryRegionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>State</MapField>
					<MapFieldTo>FromState</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>City</MapField>
					<MapFieldTo>FromCity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Street</MapField>
					<MapFieldTo>FromStreet</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CityRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>District</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StreetNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BuildingCompliment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostBox</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ZipCodeRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DistrictName</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StreetId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HouseId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FlatId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Apartment_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Building_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CityKana_JP</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegionTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegionTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCountryRegionId</Name>
					<Field>ToCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegionFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegionFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCountryRegionId</Name>
					<Field>FromCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountyTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountyTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCountryRegionId</Name>
					<Field>ToCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToState</Name>
					<Field>ToState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCounty</Name>
					<Field>ToCounty</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountyFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountyFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCountryRegionId</Name>
					<Field>FromCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromState</Name>
					<Field>FromState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCounty</Name>
					<Field>FromCounty</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressStateTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressStateTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCountryRegionId</Name>
					<Field>ToCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToState</Name>
					<Field>ToState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressStateFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressStateFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCountryRegionId</Name>
					<Field>FromCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromState</Name>
					<Field>FromState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressZipCodeTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressZipCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressZipCodeTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToZipCode</Name>
					<SourceEDT>LogisticsAddressZipCodeId</SourceEDT>
					<Field>ToZipCode</Field>
					<RelatedField>ZipCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToState</Name>
					<Field>ToState</Field>
					<RelatedField>State</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCounty</Name>
					<Field>ToCounty</Field>
					<RelatedField>County</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCountryRegionId</Name>
					<Field>ToCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressZipCodeFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressZipCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressZipCodeFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromZipCode</Name>
					<SourceEDT>LogisticsAddressZipCodeId</SourceEDT>
					<Field>FromZipCode</Field>
					<RelatedField>ZipCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromState</Name>
					<Field>FromState</Field>
					<RelatedField>State</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCounty</Name>
					<Field>FromCounty</Field>
					<RelatedField>County</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCountryRegionId</Name>
					<Field>FromCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCityTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddresssCityTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCity</Name>
					<SourceEDT>LogisticsAddressCityName</SourceEDT>
					<Field>ToCity</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToState</Name>
					<Field>ToState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCounty</Name>
					<Field>ToCounty</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToCountryRegionId</Name>
					<Field>ToCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCityFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddresssCityFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseTransportPoints</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCity</Name>
					<SourceEDT>LogisticsAddressCityName</SourceEDT>
					<Field>FromCity</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromState</Name>
					<Field>FromState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCounty</Name>
					<Field>FromCounty</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromCountryRegionId</Name>
					<Field>FromCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>