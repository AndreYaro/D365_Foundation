<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class SalesLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayInventTransQtyReserved</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display Qty displayInventTransQtyReserved()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrig;

        select sum(Qty) from inventTrans
             where inventTrans.StatusReceipt == StatusReceipt::None
                   && inventTrans.StatusIssue > StatusIssue::Picked
                exists join inventTransOrig
                    where inventTransOrig.RecId == inventTrans.InventTransOrigin
                         && inventTransOrig.InventTransId == this.InventTransId;

        return  inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPDSCWInventTransQtyReserved</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display Qty displayPDSCWInventTransQtyReserved()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrig;

        select sum(PdsCWQty) from inventTrans
             where inventTrans.StatusReceipt == StatusReceipt::None
                   && inventTrans.StatusIssue > StatusIssue::Picked
                exists join inventTransOrig
                    where inventTransOrig.RecId == inventTrans.InventTransOrigin
                         && inventTransOrig.InventTransId == this.InventTransId;

        return  inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCTPDeliverySalesLineNoRequirementTransactions</Name>
				<Source><![CDATA[
    internal boolean hasCTPDeliverySalesLineNoRequirementTransactions()
    {
        return this && this.isDeliveryDateControlTypeClassicCTP() && !this.reqTrans() ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineBlockLevel</Name>
				<Source><![CDATA[
    public display str salesLineBlockLevel()
    {
        return enum2Str(this.SoftReserveBlockLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineSoftReserveStatus</Name>
				<Source><![CDATA[
    public display str salesLineSoftReserveStatus()
    {        
        if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled())
        {
            return InventInventoryDataServiceSoftReservationHelper::showSoftReserveStatus(this);
        }
        
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountClearingLedgerDimension</Name>
				<Source><![CDATA[
    public display LedgerDimensionDefaultAccount accountClearingLedgerDimension(SalesTable _salesTable = this.salesTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountClearingLedgerDimension(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountConsumptionLedgerDimension</Name>
				<Source><![CDATA[
    public display LedgerDimensionDefaultAccount accountConsumptionLedgerDimension(InventTable _inventTable = this.inventTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountConsumptionLedgerDimension(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCustLedgerDimension</Name>
				<Source><![CDATA[
    public display LedgerDimensionDefaultAccount accountCustLedgerDimension(SalesTable _salesTable = this.salesTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountCustLedgerDimension(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDiscLedgerDimension</Name>
				<Source><![CDATA[
    public display LedgerDimensionDefaultAccount accountDiscLedgerDimension(InventTable _inventTable = this.inventTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountDiscLedgerDimension(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountGoodsInRouteOffset_RU</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount accountGoodsInRouteOffset_RU(InventTable _inventTable = this.inventTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountGoodsInRouteOffset_RU(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIssueLedgerDimension</Name>
				<Source><![CDATA[
    public display LedgerDimensionDefaultAccount accountIssueLedgerDimension(InventTable _inventTable = this.inventTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountIssueLedgerDimension(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSalesLedgerDimension</Name>
				<Source><![CDATA[
    public display LedgerDimensionDefaultAccount accountSalesLedgerDimension(InventTable _inventTable = this.inventTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.accountSalesLedgerDimension(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the suggested return quantity exceeds the total invoiced quantity for the order line in question.
    /// </summary>
    /// <param name="_totalInvoiced">
    /// A Qty type holding the total invoiced quantity for the order line.
    /// </param>
    /// <param name="_qtyAlreadyReturned">
    /// A Qty type holding the already credited quantity for the order line.
    /// </param>
    /// <param name="_qtySelectForReturn">
    /// A Qty type holding the quantity available for crediting for the order line.
    /// </param>
    /// <returns>
    /// true if the quantity being returned isn't greater than what can be covered by the return lot; otherwise, false.
    /// </returns>
    public static boolean validateReturnQty(
            Qty _totalInvoiced,
            Qty _qtyAlreadyReturned,
            Qty _qtySelectForReturn
            )
    {
        boolean ret = true;
        Qty qtyLeftToReturn = _totalInvoiced - _qtyAlreadyReturned;

        if ((qtyLeftToReturn <= 0 && _qtySelectForReturn < qtyLeftToReturn)
                || (qtyLeftToReturn >= 0 && _qtySelectForReturn > qtyLeftToReturn)
                || (qtyLeftToReturn < 0 && _qtySelectForReturn > 0)
                || (qtyLeftToReturn > 0 && _qtySelectForReturn < 0))
        {
            // The quantity being returned is greater than what can be covered by the return lot.
            ret = checkFailed("@SYS53004");
            //The total invoiced quantity for the order: %1.
            info(strFmt("@SYS310092", _totalInvoiced));
            //The quantity already credited: %1.
            info(strFmt("@SYS310093", _qtyAlreadyReturned));
            //The quantity available for crediting: %1."
            info(strFmt("@SYS310094", qtyLeftToReturn));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the carrier service code based on the delivery mode of the current sales line.
    /// </summary>
    /// <returns>
    /// The carrier service code based on the delivery mode of the current sales line.
    /// If the current sales line has no delivery mode, this method will return an empty string.
    /// </returns>
    public display TMSCarrierServiceCode carrierServiceCode()
    {
        return TMSCarrierService::findByDlvModeId(this.DlvMode).CarrierServiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the carrier code based on the delivery mode of the current sales line.
    /// </summary>
    /// <returns>
    /// The carrier code based on the delivery mode of the current sales line.
    /// If the current sales line has no delivery mode, this method will return an empty string.
    /// </returns>
    public display TMSCarrierCode carrierCode()
    {
        return TMSCarrierService::findByDlvModeId(this.DlvMode).CarrierCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementSkipAutoLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether this line should skip automatic <c>AgreementLine</c> matching.
    /// </summary>
    /// <returns>
    /// True if no automatic matching should be done for this line.
    /// </returns>
    /// <remarks>
    /// For delivery lines auto-linking should be always skipped,
    /// so this method always returns true for delivery lines.
    /// </remarks>
    public boolean agreementSkipAutoLink()
    {
        return (this.AgreementSkipAutoLink || this.LineDeliveryType == LineDeliveryType::DeliveryLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>aiExistsOnOriginalInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if an advance invoice exists for the original invoice being corrected.
    /// </summary>
    /// <returns>
    /// Returns true if an advance invoice exists for the original invoice being corrected.
    /// </returns>
    public boolean aiExistsOnOriginalInvoice()
    {
        SalesLine           reverseLine;
        CustInvoiceTrans    origInvoiceTrans;

        reverseLine      = SalesLine::findRecId(this.CreditNoteInternalRef_PL);
        origInvoiceTrans = CustInvoiceTrans::findRecId(reverseLine.RefReturnInvoiceTrans_W);
        return (CustAdvanceInvoiceSettlement_W::existsCustInvoiceJour(origInvoiceTrans.custInvoiceJour()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxReleaseQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum quantity that can be released to the warehouse.
    /// </summary>
    /// <returns>The maximum quantity that can be released to the warehouse</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the maxReleaseHandlingQuantity method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty maxReleaseQuantity()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.ItemId);
        return this.maximumReleaseHandlingQuantity(this.QtyOrdered);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxReleaseHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum quantity that can be released to the warehouse.
    /// </summary>
    /// <returns>The maximum quantity that can be released to the warehouse</returns>
    public InventHandlingQty maxReleaseHandlingQuantity()
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.ItemId))
        {
            return this.maxReleaseQuantity();
        }
        
        return this.maximumReleaseHandlingQuantity(this.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumReleaseHandlingQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty maximumReleaseHandlingQuantity(InventHandlingQty _inventHandlingQtyOrder)
    {
        return (_inventHandlingQtyOrder + (_inventHandlingQtyOrder * (this.OverDeliveryPct()/100)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateWithQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the update of the sales line is enabled.
    /// </summary>
    /// <returns>
    /// true if the update is enabled; otherwise, false.
    /// </returns>
    public boolean allowUpdateWithQualityOrder()
    {
        SalesLine   salesLine_orig;

        if (!InventParameters::find().UseQualityManagement)
        {
            // Not using quality management for this company
            return true;
        }

        if (this.qualityOrderStatusDisplay() != InventTestOrderStatusDisplay::Open)
        {
            // No open quality order exists
            return true;
        }
        salesLine_orig = this.orig().data();

        // Changing the following fields is allowed so make those equal before comparing
        salesLine_orig.SalesDeliverNow    = this.SalesDeliverNow;
        salesLine_orig.InventDeliverNow   = this.InventDeliverNow;

        return this.equal(salesLine_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur _amountCur, Qty  _qty, TransDate _transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the company currency amount for a given amount.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount to convert.
    /// </param>
    /// <param name="_exchRateDate">
    /// The date used to calculate the exchange rate; optional.
    /// </param>
    /// <param name="_exchRate">
    /// The exchange rate to use, if known; optional.
    /// </param>
    /// <param name="_exchrateSecondary">
    /// The secondary exchange rate to use, if known; optional.
    /// </param>
    /// <param name="_exchRatesTriangulation">
    /// The exchange rate triangulation to use, if known; optional.
    /// </param>
    /// <returns>
    /// The amount in company currency.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST amountMST(AmountCur               _amountCur,
                               TransDate               _exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                               ExchRate                _exchRate                = this.salesTable().fixedExchRate(),
                               ExchrateSecondary       _exchrateSecondary       = this.salesTable().fixedExchRateSecondary(),
                               ExchRatesTriangulation  _exchRatesTriangulation  = this.salesTable().fixedEuroTriangulation())
    {
        return this.salesPurchLineInterface().amountMST(_amountCur, _exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostAmount</Name>
				<Source><![CDATA[
    public CostAmount calcCostAmount(InventQty    _inventQty = this.QtyOrdered)
    {
        CostAmount  costAmount = 0;
        InventQty   costInventQty;
        AmountCur   costInventValue;
        using (var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().calculateCostAmount(this))
        {
            if (_inventQty > 0)
            {
                [costInventQty, costInventValue] = InventTrans::calcCostValue(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
                if (costInventQty)
                {
                    costAmount = CurrencyExchangeHelper::amount(_inventQty * costInventValue / costInventQty);
                }
            }
            else
            {
                costAmount = this.calcReturnCostAmount(_inventQty);
            }
        }
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty    _qty   = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur  calcGrossAmountExclTax(Qty       _qty = this.SalesQty,
                                             TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                             Tax       _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(_qty, this.taxDate(_transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty  _qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty  _qty = this.SalesQty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty,  this.taxDate(_transDate), _tax, _skipRounding);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(
        Qty _qty = this.SalesType == SalesType::ReturnItem ? this.ExpectedRetQty : this.SalesQty,
        PriceDiscPolicyCheckPolicy  _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForcedInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates of line amount forced with user interaction if associated link to agreement order line becomes invalid.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field which changes require recalculation of line amount.
    /// </param>
    /// <param name="_qty">
    /// The sales quantity used for calculating the line amount.
    /// </param>
    /// <param name="_recalcValidLink">
    /// A Boolean value that indicates whether to calculate line amount if the agreement link is valid; optional.
    /// </param>
    /// <returns>
    /// The line amount.
    /// </returns>
    /// <remarks>
    /// Used when there is a need for the option to dissociate agreement order line via prompt if changes will make the existing association to a agreement order line invalid.
    /// </remarks>
    public AmountCur calcLineAmountForcedInteraction(
        FieldId _fieldId,
        Qty     _qty             = this.SalesQty,
        boolean _recalcValidLink = true)
    {
        anytype     FieldValue;
        boolean     isAgreementLinkRefreshed = true;
        AmountCur   localOrigLineAmount  = this.LineAmount; //This variable is needed for the uncommitted scenario as <>.orig.LineAmont returns the database value.

        if (_recalcValidLink && this.salesTable().MatchingAgreement)
        {
            //The impact on line amount should be included in the agreement link validation.
            this.LineAmount      = this.calcLineAmountForced(this.SalesQty);
            isAgreementLinkRefreshed = this.refreshAgreementLink(new AgreementAutolinkHelperSalesLine());
            this.LineAmount      = localOrigLineAmount;
        }

        if (!isAgreementLinkRefreshed)
        {
            if (this.unLinkAgreementLinePrompt(_fieldId))
            {
                if (_fieldId)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }

                if (this.ManualEntryChangepolicy
                    && this.SystemEntryChangePolicy)
                {
                    this.PriceDiscResultFields::mergerPriceDiscPolicies(ModuleSalesPurch::Sales);
                }

                if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                    || (this.LineDeliveryType == LineDeliveryType::OrderLine
                        && this.doReCalcPricesFromBasePrompt()))
                {
                    FieldValue = this.(_fieldId);
                    SalesLine::modifySalesQty(this,this.inventDim());
                    this.(_fieldId) = FieldValue;
                }
                return this.calcLineAmountForced(_qty);
            }
            return this.LineAmount;
        }
        else
        {
            return _recalcValidLink ? this.calcLineAmountForced(_qty) : this.LineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountInclTax_RU</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountInclTax_RU(Qty _qty = this.SalesQty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.salesPurchLineInterface().calcLineAmountInclTax_RU(_qty, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount from a user interaction when the associated link to an agreement order.
    /// line is invalid.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the changed field that requires a recalculation of the line amount.
    /// </param>
    /// <param name="_qty">
    /// The sales quantity for which to calculate the line amount.
    /// </param>
    /// <returns>
    /// The calculated line amount.
    /// </returns>
    /// <remarks>
    /// This method is used when you need the option to dissociate an agreement order line from a prompt.
    /// This behavior may occur if a change will make the existing association with an agreement order line
    /// invalid.
    /// </remarks>
    public AmountCur calcLineAmountInteraction(FieldId _fieldId, Qty _qty = this.SalesQty)
    {
        anytype     FieldValue;

        if (this.RecId && this.salesTable().MatchingAgreement && !this.refreshAgreementLink(new AgreementAutolinkHelperSalesLine()))
        {
            if (this.unLinkAgreementLinePrompt(_fieldId))
            {
                if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                    || (this.LineDeliveryType == LineDeliveryType::OrderLine
                        && this.doReCalcPricesFromBasePrompt()))
                {
                    FieldValue = this.(_fieldId);
                    SalesLine::modifySalesQty(this,this.inventDim());
                    this.(_fieldId) = FieldValue;
                }
                return this.calcLineAmount(_qty);
            }
            return this.LineAmount;
        }
        else
        {
            return this.calcLineAmount(_qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty    _qty   = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineDisc(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty _qty = this.SalesQty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(_qty, this.taxDate(_transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingUnit</Name>
				<Source><![CDATA[
    public void calcPackingUnit(InventDim _inventDim = this.inventDim())
    {
        this.PackingUnit = InventPackagingUnit::findSalesPackingUnit(this.ItemId,
                                                                     _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingUnitQty</Name>
				<Source><![CDATA[
    public void calcPackingUnitQty(InventDim _inventDim = this.inventDim())
    {
        this.PackingUnitQty = InventPackagingUnit::calcPackingUnitQty(this.PackingUnit,
                                                                      this.QtyOrdered,
                                                                      this.ItemId,
                                                                      _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty _salesQty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcQtyOrdered(_salesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReturnCostAmount</Name>
				<Source><![CDATA[
    public CostAmount calcReturnCostAmount(InventQty    _qty)
    {
        return CurrencyExchangeHelper::amount(_qty * this.CostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates cost price using given <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record.
    /// </param>
    private void calculateCostPrice(InventDim _inventDim)
    {
        this.CostPrice = this.inventTable().costPcsPrice(this.InventDimId, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// true if sales order line can be linked to an agreement line; otherwise, false.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return this.type().canAgreementBeLinked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    public boolean canBeInvoiced()
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.canBeInvoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    public boolean canEditDisc()
    {
        return this.salesTable().type().editDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    public boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPromptFixedLineAmount</Name>
				<Source><![CDATA[
    public boolean checkAndPromptFixedLineAmount()
    {
        return this.PriceDiscLine::checkAndPromptFixedLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPriceBeReset</Name>
				<Source><![CDATA[
    public boolean canPriceBeReset()
    {
        if (this.MatchingAgreementLine
            || (this.isInterCompanyOrder()
                && !this.salesTable().interCompanyEndpointActionPolicy().PriceDiscountSearch))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndUpdateLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that the related <c>WHSLoadLine</c> record(s) can be updated.
    /// Update <c>WHSLoadLine</c> record(s) and tracked quantities in <c>WHSSalesLine</c> table.
    /// </summary>
    /// <param name="_origSalesLine">
    /// Original sales line, before the record was updated.
    /// </param>
    public void checkAndUpdateLoadLines(SalesLine _origSalesLine = this.orig())
    {
        if (WHSSalesLineUpdaterRefactoringFlight::instance().isEnabled())
        {
            using(var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().updateLoadLines(this))
            {
                this.WHSOutboundShippableOrderLineMap::checkAndUpdateLoadLines(_origSalesLine, this.mustUpdateLoadLines());
            }
        }
        else
        {
            WHSSalesLineUpdater             salesLineUpdater;
            WHSSrcLineChangeLoadLineUpdater srcLineChangeLoadLineUpdater;
            InventQty                       loadLineDiffQty;
            NoYesId                         autoCreate;
            boolean                         whsEnabled;
            boolean                         tmsEnabled;

            whsEnabled = WHSInventEnabled::exist(this.ItemId);
            tmsEnabled = TMSInventEnabled::exist(this.ItemId);
            using(var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().updateLoadLines(this))
            {
                if (whsEnabled || tmsEnabled)
                {
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

                    autoCreate = (whsEnabled && WHSParameters::find().AutoCreateLoad)
                    || (tmsEnabled && TMSParameters::find().AutoCreateLoadSO);

                    if (this.mustUpdateLoadLines())
                    {
                        if (isCWItem)
                        {
                            srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParameters(this,
                                                                                                                  this.InventTransId,
                                                                                                                  this.InventDimId,
                                                                                                                  _origSalesLine.InventDimId,
                                                                                                                  this.PdsCWRemainInventPhysical,
                                                                                                                  _origSalesLine.PdsCWRemainInventPhysical,
                                                                                                                  this.pdsCWUnitId(),
                                                                                                                  _origSalesLine.pdsCWUnitId(),
                                                                                                                  autoCreate);
                        }
                        else
                        {
                            srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParameters(this,
                                                                                                          this.InventTransId,
                                                                                                          this.InventDimId,
                                                                                                          _origSalesLine.InventDimId,
                                                                                                          this.RemainInventPhysical,
                                                                                                          _origSalesLine.RemainInventPhysical,
                                                                                                          this.SalesUnit,
                                                                                                          _origSalesLine.SalesUnit,
                                                                                                          autoCreate);
                        }

                        if (this.DeliveryPostalAddress != _origSalesLine.DeliveryPostalAddress)
                        {
                            srcLineChangeLoadLineUpdater.parmNewAddress(TMSAddressPhone::initFromSalesLine(this));
                            srcLineChangeLoadLineUpdater.parmOldAddress(TMSAddressPhone::initFromSalesLine(_origSalesLine));
                        }

                        srcLineChangeLoadLineUpdater.updateLoadLines();
                        loadLineDiffQty = srcLineChangeLoadLineUpdater.getloadLineDiffHandlingQty();
                    }

                    salesLineUpdater = WHSSourceLineUpdater::newFromSourceLineTableBuffer(this);
                    UnitOfMeasureSymbol salesLineOrigUnit = isCWItem ? _origSalesLine.pdsCWUnitId() : _origSalesLine.SalesUnit;
            
                    InventHandlingQty origSalesInventHandlingQty = this.origSalesInventHandlingQty(_origSalesLine);
                    salesLineUpdater.setHandlingUpdateQuantities(this, origSalesInventHandlingQty, salesLineOrigUnit, loadLineDiffQty);
                    salesLineUpdater.updateTable();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>origSalesInventHandlingQty</Name>
				<Source><![CDATA[
    protected InventHandlingQty origSalesInventHandlingQty(SalesLine _origSalesLine)
    {
        InventHandlingQty origSalesInventHandlingQty;
        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            UnitOfMeasureSymbol inventHandlingUOM = InventTableModule::find(_origSalesLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

            //in case unit conversion was changed after sales line creation, then we should recalculate original inventory qty according to current conversion.
            origSalesInventHandlingQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_origSalesLine.ItemId,
                                                                                                               _origSalesLine.InventDimId,
                                                                                                               _origSalesLine.RemainSalesPhysical,
                                                                                                               _origSalesLine.SalesUnit,
                                                                                                               inventHandlingUOM,
                                                                                                               NoYes::No);
        }
        else
        {
            origSalesInventHandlingQty = _origSalesLine.PdsCWRemainInventPhysical;
        }

        if (_origSalesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries &&
            this.LineDeliveryType != _origSalesLine.LineDeliveryType)
        {
            origSalesInventHandlingQty = 0;
        }

        return origSalesInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to update the load lines.
    /// </summary>
    /// <returns>true if the load lines must be updated; otherwise, false.</returns>
    protected boolean mustUpdateLoadLines()
    {
        return (this.SalesType == SalesType::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    public boolean  checkCurrencyCode()
    {
        boolean ok = true;

        if (this.CurrencyCode && ! Currency::exist(this.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS1458", this.CurrencyCode));
        }

        if (this.salesTable().CurrencyCode != this.CurrencyCode)
        {
            ok = checkFailed("@SYS20794");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is allowed to delete the sales order line.
    /// </summary>
    /// <param name = "_useWarning">
    /// A Boolean value that indicates whether the user must be notified about the reasons why the changes are not allowed; optional.
    /// </param>
    /// <param name = "_treatInvoicedOrderUpdateWarningAsError">
    /// A Boolean value that indicates whether the "Warning" access level to invoiced orders must be treated as "Locked".
    /// </param>
    /// <returns>true, if it is allowed to delete the sales order line; otherwise, false.</returns>
    public boolean checkDelete(
        boolean _useWarning = true,
        boolean _treatInvoicedOrderUpdateWarningAsError = false)
    {
        return this.type().checkDelete(_useWarning, _treatInvoicedOrderUpdateWarningAsError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMarked</Name>
				<Source><![CDATA[
    public display ImageRes checkIfMarked()
    {
        #resAppl
        InventQtyMarked qtyMarked;

        qtyMarked = this.qtyMarked();

        if (qtyMarked)
        {
            return #ImageWarning;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContextBeforePostingPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the context before posting a packing slip corresponding to a "inventRefId" of a selected line item. 
    /// </summary>
    /// <remarks>
    /// Selected "inventRefId" should also have a "projId" stamped on it along with its posting type as "Consumed", reference type of "Production" and status as "Not Ended". 
    /// </remarks>
    public void setContextBeforePostingPackingSlip()
    {
        ProdTable prodTable;
        select * from prodTable where prodTable.ProdId == this.InventRefId;
        boolean isConsumedOrNot = prodTable.isProjMethodConsumed();
        PackingSlipBeforePostingCheckForQuarantineContext context = new PackingSlipBeforePostingCheckForQuarantineContext();
        if(this.ProjId && this.SalesType == SalesType::ItemReq)
        {
            if(this.InventRefType == InventRefType::Production && 
                isConsumedOrNot == true && prodTable.ProdStatus != ProdStatus::Completed)
            {
                context.parmInventRefId(this.InventRefId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    container checkIfUpdate()
    {
        if(PreventPostingWhenProdOrderNotEndedFlight::instance().isEnabled())
        {
            this.setContextBeforePostingPackingSlip();
        }
        return this.type().checkIfUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromInventTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean checkInitFromInventTable(InventTable _inventTable)
    {
        return this.salesPurchLineInterface().checkInitFromInventTable(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>intrastat</c> setting on the item associated to the order line.
    /// </summary>
    /// <returns>
    /// true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkIntrastat()
    {
        CustTable            custTable;
        IntrastatParameters  intrastatParameters;
        InventTable          inventTable;
        boolean              ret = true;
        boolean              checkIntrastatLT;
        SalesLineForeignTradeCategory   salesLineForeignTradeCategory;
        #ISOCountryRegionCodes

        custTable           = CustTable::find(this.salesTable().InvoiceAccount);
        intrastatParameters = IntrastatParameters::find();
        inventTable         = this.inventTable();

        if (! inventTable.IntrastatExclude   &&
                //only perform check when customer is from an EU country
                IntrastatCountryRegionParameters::isCountryRegionStateInEU(custTable.postalAddress()))
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && ! this.IntrastatFulfillmentDate_HU)
                {
                    ret = checkFailed(strFmt("@SYS4080013", fieldPName(SalesLine, IntrastatFulfillmentDate_HU)));
                }
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                CustInvoiceTrans custInvoiceTrans;
                custInvoiceTrans.initFromSalesLine(this);
                if (this.isCategoryBased())
                {
                    custInvoiceTrans.initFromSalesLineForeignTradeCategory(SalesLineForeignTradeCategory::findSalesLine(this));
                }
                checkIntrastatLT = Intrastat::isIntrastatLine(custInvoiceTrans);

                if (checkIntrastatLT)
                {
                    if (intrastatParameters.State             && ! this.deliveryAddress().State)
                    {
                        ret = checkFailed("@SYS57801");
                    }

                    if (intrastatParameters.TransactionCode   && ! this.TransactionCode)
                    {
                        ret = checkFailed("@SYS27175");
                    }

                    if (intrastatParameters.TransportMode     && ! this.Transport)
                    {
                        ret = checkFailed("@GLS107639");
                    }

                    if (intrastatParameters.Port              && ! this.Port)
                    {
                        ret = checkFailed("@GLS107640");
                    }

                    if (this.ItemId)
                    {
                        if (intrastatParameters.IntrastatItemcode && ! this.IntrastatCommodity)
                        {
                            ret = checkFailed(strFmt("@GLS107643", inventTable.ItemId));
                        }

                        if (intrastatParameters.OrigCountryRegion && ! this.OrigCountryRegionId)
                        {
                            ret = checkFailed(strFmt("@GLS107645", inventTable.ItemId));
                        }

                        if (intrastatParameters.Weight            && ! inventTable.NetWeight)
                        {
                            ret = checkFailed(strFmt("@GLS107646", inventTable.ItemId));
                        }

                        if (intrastatParameters.AdditionalUnit    && !IntrastatUnitUtil::isAdditionalUnitSet(this.IntrastatCommodity))
                        {
                            ret = checkFailed(strFmt("@GLS107644", inventTable.ItemId));
                        }
                    }
                    else
                    {
                        if (intrastatParameters.Weight            && ! salesLineForeignTradeCategory.UnitWeight)
                        {
                            ret = checkFailed(strFmt("@SYS4082090", this.SalesCategory));
                        }

                        if (intrastatParameters.OrigCountryRegion && ! this.OrigCountryRegionId)
                        {
                            ret = checkFailed(strFmt("@SYS4082091", this.SalesCategory));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    public boolean checkItemId()
    {
        boolean ok = true;
        
        if (SalesLineCreationPolicy::newFromSalesOrderCreationMethod(this.SalesSalesOrderCreationMethod).mustCheckItemId())
        {
            // Due to price history record may have an inventTransId before it has a RecId.
            // See SalesLine method createLine.
            if (this.orig().ItemId                      &&
                this.orig().ItemId != this.ItemId       &&
                this.InventTransId                      &&
                this.RecId)
            {
                ok = checkFailed("@SYS19376");
            }

            InventTable            inventTable  = this.inventTable();
            InventDim              inventDim    = this.inventDim();

            if (this.ItemId
                && this.SalesStatus != SalesStatus::Invoiced)
            {
                if (this.mustCheckReturnItem())
                {
                    if (!this.RecId && this.type().mustCheckProductNotStopped())
                    {
                        InventDistinctProductValidator::checkProductNotStopped(this.ItemId, this.type().inventItemOrderSetupType(), inventDim, true);
                        InventDistinctProductValidator::checkProductNotStopped(this.ItemId, InventItemOrderSetupType::Invent, inventDim, true);
                    }
                }
                else
                if (this.ItemId
                    && !inventTable.hasProductDimensions()
                    && this.InventDimId != InventDim::inventDimIdBlank()
                    && (this.type().mustCheckProductNotStopped()
                        && SalesLineCreationPolicy::newFromSalesOrderCreationMethod(this.SalesSalesOrderCreationMethod).mustCheckProductNotStopped()
                        && !InventDistinctProductValidator::checkProductNotStopped(this.ItemId, this.type().inventItemOrderSetupType(), inventDim, false)))
                {
                    SalesOrderLineCheckItemIdContext context = SalesOrderLineCheckItemIdContext::current();

                    ok = false || (SalesOrderLineIgnoreCheckProductNotStoppedFlight::instance().isEnabled() && context != null);
                }
            }

            if (this.salesTable().isInterCompanyOrder()
                && (!this.ItemId
                || inventTable.interCompanyBlockedSales()))
            {
                ok = checkFailed(strFmt("@SYS74812", this.ItemId));
            }

            if (this.ItemId)
            {
                EcoResProductValidator productValidator = EcoResProductValidator::construct(inventTable);
                if (!productValidator.isEssentialFieldValuesSet())
                {
                    if (productValidator.errorFieldList().elements() == 1)
                    {
                        ok = checkFailed(strFmt("@SCM:ProductValidatorErrorListSingular",
                                                productValidator.getErrorFieldList(),
                                                this.ItemId));
                    }
                    else
                    {
                        ok = checkFailed(strFmt("@SCM:ProductValidatorErrorListPlural",
                                                productValidator.getErrorFieldList(),
                                                this.ItemId));
                    }
                }
            }

            if (this.ItemId
                && this.SalesStatus == SalesStatus::Backorder
                && (!SalesLineSkipItemSellDateValidationFlight::instance().isEnabled() || this.salesTable().isRetailSale()))
            {
                MCRInventTable mcrInventTable = MCRInventTable::findByItemId(this.ItemId);
                ok = ok && this.validateItemSellDate(mcrInventTable);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemSellDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item sell date.
    /// </summary>
    /// <param name = "_mcrInventTableLocal">A retail item.</param>
    /// <returns>true if the sell date for the item is valid; otherwise, false.</returns>
    [Replaceable]
    protected boolean validateItemSellDate(MCRInventTable _mcrInventTableLocal)
    {
        TransDate todaysDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (_mcrInventTableLocal.SellStartDate && _mcrInventTableLocal.SellStartDate > todaysDate)
        {
            return checkFailed(strFmt("@MCR34892",this.ItemId, _mcrInventTableLocal.SellStartDate));
        }
        else if (_mcrInventTableLocal.SellEndDate && _mcrInventTableLocal.SellEndDate < todaysDate)
        {
            return checkFailed(strFmt("@MCR34893",this.ItemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckReturnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if sales line contains a return item.
    /// </summary>
    /// <returns>true if return item; otherwise, false.<</returns>
    [Replaceable]
    protected boolean mustCheckReturnItem()
    {
        return this.returnItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDelivery</Name>
				<Source><![CDATA[
    public boolean  checkOverDelivery()
    {
        boolean  ok = true;

        if (this.OverDeliveryPct < 0)
        {
            ok = checkFailed("@SYS26776");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingProfile_RU</Name>
				<Source><![CDATA[
    boolean checkPostingProfile_RU()
    {
        boolean                         ok = true;
        InventProfileCustVendLedger_RU  inventProfileCustVendLedger;
        Set                             inventProfileTypeSet = new Set(Types::Enum);

        if (this.PostingProfile_RU                                  &&
            this.PostingProfile_RU != this.orig().PostingProfile_RU &&
            this.inventDim().InventProfileId_RU)
        {
            while select inventProfileCustVendLedger
                order by InventProfileTypeAll asc
                where inventProfileCustVendLedger.CustPostingProfile == this.PostingProfile_RU
            {
                switch (inventProfileCustVendLedger.InventProfileTypeAll)
                {
                    case InventProfileTypeAll_RU::Profile:
                        inventProfileTypeSet.add(InventProfile_RU::find(inventProfileCustVendLedger.InventProfileId).InventProfileType);
                        break;

                    case InventProfileTypeAll_RU::Type:
                        inventProfileTypeSet.add(inventProfileCustVendLedger.InventProfileType);
                        break;
                }
            }

            if (! inventProfileTypeSet.in(this.inventDim().inventProfile_RU().InventProfileType))
            {
                ok = checkFailed("@GLS113766");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers a price recalculation after a date change according to the price date type setting.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the <c>SalesLine</c> table field that changed.
    /// </param>
    /// <remarks>
    /// The price date type can be set to today, requested shipping date, or requested receipt date.
    /// </remarks>
    public void checkPriceDate(FieldId _fieldId)
    {
        boolean resetPrice  = this.mustResetPrice(_fieldId);

        if (resetPrice)
        {
            SalesLine::modifySalesQty(this, this.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPrice</Name>
				<Source><![CDATA[
    protected boolean mustResetPrice(FieldId _fieldId)
    {
        boolean resetPrice;
        SalesParameters salesParameters = SalesParameters::find();

        // When <c>SalesLine</c> is from a retail sales order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, behave as if PriceDateType is set to Today.
        if (this.salesTable().retailSalesUseSessionDate())
        {
            resetPrice = false;
        }
        else
        {
            switch (salesParameters.PriceDateType)
            {
                case SalesPriceDateType::ReceiptDateRequested :
                case SalesPriceDateType::ShippingDateRequested:
                resetPrice = (_fieldId == fieldNum(SalesLine, ReceiptDateRequested))
                                  || (((_fieldId == fieldNum(SalesLine, ShippingDateRequested)) && !this.isLinkedToAgreement()));
                    resetPrice = resetPrice || (_fieldId == fieldNum(SalesLine, ReceiptDateConfirmed))
                                  || (((_fieldId == fieldNum(SalesLine, ShippingDateConfirmed)) && !this.isLinkedToAgreement()));
                    break;

                case SalesPriceDateType::Today:
                    resetPrice = false;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.mustResetPriceDelegate(this, salesParameters.PriceDateType, _fieldId, result);

                    if (result.hasResult())
                    {
                        resetPrice = result.result();
                    }
                    else
                    {
                        resetPrice = false;
                    }
                    break;
            }
        }

        return resetPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPriceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for which to calculate the price.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    /// <param name = "_salesPriceDateType">A <c>SalesPriceDateType</c> value.</param>
    /// <param name = "_fieldId">The <c>FieldId</c> of the modified field.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void mustResetPriceDelegate(
        SalesLine                   _salesLine,
        SalesPriceDateType          _salesPriceDateType,
        FieldId                     _fieldId,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategory</Name>
				<Source><![CDATA[
    public boolean checkProjCategory()
    {
        ProjCategory    projCategory;
        boolean         ok = true;

        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);

            if (projCategory.CategoryType != ProjCategoryType::Item)
            {
                ok  = checkFailed(strFmt("@SYS56468",ProjCategoryType::Item));
            }

            ok = ok && projCategory.validateIfInactiveAllowed();
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity()
    {
        boolean ret = true;

        RequireActivity requireActivity = ProjTable::checkRequireActivity(this.ProjId, tableNum(SalesLine), this.ProjCategoryId);
        if (requireActivity && (!this.ActivityNumber))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReservationField</Name>
				<Source><![CDATA[
    public boolean checkReservationField()
    {
        boolean  ok = true;

        if (this.InventRefTransId
        &&  this.Reservation == ItemReservation::Explosion)
        {
            ok = checkFailed("@SYS105404");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeliveryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the line is not mixing intercompany direct delivery and not direct delivery lines within the same order.
    /// </summary>
    /// <returns>
    /// true if delivery type for the line is valid; false otherwise.
    /// </returns>
    public boolean checkDeliveryType()
    {
        if (this.SourcingOrigin == SalesSourcingOrigin::Intercompany && this.SourcingVendAccount != '')
        {
            if ((this.isDirectDelivery() && !this.canLineBeDirectDelivery())
                 || (!this.isDirectDelivery() && !this.canLineShipFromInventoryButBeSourcedByVendor()))
            {
                return checkFailed("@Intercompany:ErrorMixingICDeliveryTypes");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjFundingSource</Name>
				<Source><![CDATA[
    public boolean checkProjFundingSource()
    {
        // Check that funding source is valid
        if (!this.ProjFundingSource)
            return true;
        
        SalesTable salesTableLoc = this.salesTable();
        ProjTable projTableLoc = this.projTable();
        
        return salesTableLoc && this.ProjFundingSource == salesTableLoc.FundingSource
            && projTableLoc && ProjFundingSource::existExternalContractFundingSource(projTableLoc.ProjInvoiceProjId, this.ProjFundingSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that the sales category field is filled correctly.
    /// </summary>
    /// <returns>
    /// true if the sales category field is filled correctly; otherwise, false.
    /// </returns>
    public boolean checkSalesCategory()
    {
        // Check that the hierarchy matches the module
        return !this.SalesCategory
            || EcoResCategory::checkCategoryRole(this.SalesCategory, EcoResCategoryNamedHierarchyRole::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesType</Name>
				<Source><![CDATA[
    public boolean  checkSalesType()
    {
        if (this.salesTable().SalesType != this.SalesType)
        {
            return checkFailed("@SYS17570");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesUnit</Name>
				<Source><![CDATA[
    public boolean checkSalesUnit()
    {
        boolean  ok = true;

        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim())
            && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                             this.InventDimId,
                                                                                             InventTable::find(this.ItemId).inventUnitId(),
                                                                                             this.SalesUnit))
        {
            ok = checkFailed(strFmt("@SYS28690", InventTable::find(this.ItemId).inventUnitId(), this.SalesUnit));
        }
        if (this.RecId
            && this.SalesUnit != this.orig().SalesUnit
            && this.orig().SalesQty  != this.RemainSalesPhysical)
        {
            ok = checkFailed(strFmt("@SYS81897", this.ItemId));
        }

        if (this.RecId &&
            this.SalesUnit != this.orig().SalesUnit &&
            (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries ||
             this.LineDeliveryType == LineDeliveryType::DeliveryLine))
        {
            // Unit cannot be changed on a Delivery Schedule.
            ok = checkFailed("@SYS131415");
        }

        if (ok)
        {
            ok = this.type().checkSalesUnit();
        }

        if (ok
            &&  this.SalesUnit != this.orig().SalesUnit)
        {
            ok = !this.interCompanyIsBeingUpdated();
        }

        if (ok)
        {
            ok = PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, false);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the status of an order line can be changed.
    /// </summary>
    /// <param name="origSalesLine">
    /// A buffer of the <c>SalesLine</c> table, optional.
    /// </param>
    /// <returns>
    /// true if the status of an order line can be changed; otherwise, false.
    /// </returns>
    public boolean checkStatusChange(SalesLine origSalesLine = SalesLine::findRecId(this.RecId))
    {
        boolean ok = true;

        if (origSalesLine.RecId
            && this.SalesStatus              == SalesStatus::Backorder
            && (origSalesLine.SalesStatus    == SalesStatus::Invoiced
            ||  origSalesLine.SalesStatus    == SalesStatus::Canceled)
            && origSalesLine.isStocked() != this.getIsStockedSetting())
        {
            ok = checkFailed(strFmt("@SYS324424", fieldPName(InventModelGroup, StockedProduct)));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsStockedSetting</Name>
				<Source><![CDATA[
    private boolean getIsStockedSetting()
    {
        boolean isStocked = this.inventTable().isStocked();

        if (isStocked && this.ProjId && BrazilParameters::isEnabled())
        {
            isStocked = this.salesTable().createInventTrans_BR();
        }

        return isStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the <c>StockedProduct</c> field is not set for category based lines.
    /// </summary>
    /// <returns>
    /// true if the <c>StockedProduct</c> field is set to a valid value; otherwise, false.
    /// </returns>
    public boolean  checkStockedProduct()
    {
        boolean  ok = true;

        if (this.isStocked() && this.isCategoryBased())
        {
            ok = checkFailed("@SYS134348");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxItemGroup</Name>
				<Source><![CDATA[
    public boolean  checkTaxItemGroup()
    {
        if (this.TaxItemGroup   && ! TaxItemGroupHeading::exist(this.TaxItemGroup))
        {
            return checkFailed(strFmt("@SYS21973", this.TaxItemGroup));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnderDelivery</Name>
				<Source><![CDATA[
    public boolean  checkUnderDelivery()
    {
        boolean  ok = true;

        if (this.UnderDeliveryPct > 100)
        {
            ok = checkFailed("@SYS26778");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    public boolean checkUpdatePhysical()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePicked</Name>
				<Source><![CDATA[
    public boolean checkUpdatePicked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllPriceDiscChangePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the price discount change policies for a sales line that have been previously set.
    /// </summary>
    /// <remarks>
    /// This method removes policies from both the manual and system groups.
    /// </remarks>
    public void clearAllPriceDiscChangePolicies()
    {
        SalesLineType salesLineType;

        salesLineType = this.type();
        salesLineType.clearAllPriceDiscChangePolicies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the inventory reference fields on the <c>SalesLine</c> record.
    /// </summary>
    public void clearInventReference()
    {
        this.InventRefTransId  = '';
        this.InventRefId       = '';
        this.InventRefType     = InventRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>configIdChanged</Name>
				<Source><![CDATA[
    void  configIdChanged()
    {
        this.initFromInventTable(this.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode           _currencyCode,
                             TradeCurencyConversion _tradeCurencyConversion = TradeCurencyConversion::ExchRate,
                             TransDate              _exchRateDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                             boolean                _useFixedExchRate      = false,
                             CustExchRate           _fixedExchRate         = 0)
    {
        ttsbegin;

        this.updateMarkupTransBasedOnCurrencyCodeConversion(_currencyCode, _exchRateDate, _useFixedExchRate, _fixedExchRate);

        this.updateRelatedFieldsToCurrencyCodeConversion(_currencyCode, _exchRateDate, _useFixedExchRate, _fixedExchRate);

        // When conversion is based on trade agreements, line amount is handled when applying the trade agreement.
        if (_tradeCurencyConversion == TradeCurencyConversion::TradeAgreements)
        {
            this.updateBasedOnTradeCurrencyConversion(_tradeCurencyConversion);
        }
        else
        {
            this.LineAmount = this.SalesType == SalesType::ReturnItem ? this.returnLineAmount() : this.calcLineAmount();
        }

        this.resetAgreementLink();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransBasedOnCurrencyCodeConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the markup transactions based on the currency code conversion.
    /// </summary>
    /// <param name = "_currencyCode">The code of the currency.</param>
    /// <param name = "_exchRateDate">The date of exchange.</param>
    /// <param name = "_useFixedExchRate">Whether a fixed exchange rate is used or not.</param>
    /// <param name = "_fixedExchRate">The fixed exchange rate.</param>
    protected void updateMarkupTransBasedOnCurrencyCodeConversion(CurrencyCode _currencyCode,
                                                                  TransDate    _exchRateDate,
                                                                  boolean      _useFixedExchRate,
                                                                  CustExchRate _fixedExchRate)
    {
        #ISOCountryRegionCodes

        MarkupTrans markupTrans;
        while select forupdate markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId  == this.TableId
              &&    markupTrans.TransRecId    == this.RecId
              &&    !markupTrans.IsDeleted
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                markupTrans.convertCurrencyCode(_currencyCode, _exchRateDate, _useFixedExchRate, _fixedExchRate);
            }
            else
            {
                markupTrans.convertCurrencyCode(_currencyCode);
            }
            markupTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedFieldsToCurrencyCodeConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line amounts based on the currency code conversion.
    /// </summary>
    /// <param name = "_currencyCode">The code of the currency.</param>
    /// <param name = "_exchRateDate">The date of exchange.</param>
    /// <param name = "_useFixedExchRate">Whether a fixed exchange rate is used or not.</param>
    /// <param name = "_fixedExchRate">The fixed exchange rate.</param>
    protected void updateRelatedFieldsToCurrencyCodeConversion(CurrencyCode _currencyCode,
                                                               TransDate    _exchRateDate,
                                                               boolean      _useFixedExchRate,
                                                               CustExchRate _fixedExchRate)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (_useFixedExchRate)
            {
                this.SalesPrice   = ExchangeRateHelper::mstPrice(this.SalesPrice, this.CurrencyCode, _exchRateDate, UnknownNoYes::No, _fixedExchRate, 0);
                this.LineDisc     = ExchangeRateHelper::mstPrice(this.LineDisc, this.CurrencyCode, _exchRateDate, UnknownNoYes::No, _fixedExchRate, 0);
                this.MultiLnDisc  = ExchangeRateHelper::mstPrice(this.MultiLnDisc, this.CurrencyCode, _exchRateDate, UnknownNoYes::No, _fixedExchRate, 0);
                this.SalesMarkup  = ExchangeRateHelper::mstPrice(this.SalesMarkup, this.CurrencyCode, _exchRateDate, UnknownNoYes::No, _fixedExchRate, 0);
            }
            else
            {
                this.SalesPrice   = ExchangeRateHelper::curPrice2CurPrice(this.SalesPrice, this.CurrencyCode, _currencyCode, _exchRateDate);
                this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode, _exchRateDate);
                this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode, _exchRateDate);
                this.SalesMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.SalesMarkup, this.CurrencyCode, _currencyCode, _exchRateDate);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                MCRSalesLine mcrSalesLine = this.mcrSalesLine();
                mcrSalesLine.convertCurrencyCode_RU(this.CurrencyCode, _currencyCode, _exchRateDate, _useFixedExchRate, _fixedExchRate);
                this.mcrPackMCRSalesLine(mcrSalesLine);
            }
        }
        else
        {
            this.SalesPrice   = ExchangeRateHelper::curPrice2CurPrice(this.SalesPrice, this.CurrencyCode, _currencyCode);
            this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode);
            this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode);
            this.SalesMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.SalesMarkup, this.CurrencyCode, _currencyCode);
        }

        this.updatesDiscountLineAfterCurrencyConversionForRetailOrders();

        if (this.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (_useFixedExchRate)
                {
                    this.LineAmount = CurrencyExchangeHelper::amountCur2MST(this.LineAmount, this.CurrencyCode, _fixedExchRate, _exchRateDate);
                }
                else
                {
                    this.LineAmount = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode, _exchRateDate);
                }
            }
            else
            {
                this.LineAmount = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode);
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxParameters::checkTaxParameters_IN())
        {
            SalesLine_IN salesLine_IN = this.salesLine_IN();
            salesLine_IN.convertCurrencyCode(_currencyCode, this);
            this.packSalesLine_IN(salesLine_IN);
        }

        this.CurrencyCode = _currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatesDiscountLineAfterCurrencyConversionForRetailOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the discount after the currency conversion into the RetailSalesDiscountLine.
    /// </summary>
    public void updatesDiscountLineAfterCurrencyConversionForRetailOrders()
    {
        RetailSalesDiscountLine  retailSalesDiscountLine;

        ttsbegin;
        select forupdate retailSalesDiscountLine
            where retailSalesDiscountLine.InventTransId == this.InventTransId;

        if (retailSalesDiscountLine)
        {
            retailSalesDiscountLine.Amount = this.LineDisc;
            retailSalesDiscountLine.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAgreementLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the agreement link when currency code is converted.
    /// </summary>
    protected void resetAgreementLink()
    {
        // Trade currency conversion can reset the agreement link
        if (this.LineDeliveryType != LineDeliveryType::DeliveryLine
            && this.MatchingAgreementLine)
        {
            // Agreement line should NOT be unlinked if it is Quantity-based AND has IsPriceInformationMandatory set to false!
            AgreementLine linkedAgreementLine = AgreementLine::find(this.MatchingAgreementLine, false);

            if (linkedAgreementLine.RecId
                && ((linkedAgreementLine.isQuantityBased() == false) || linkedAgreementLine.IsPriceInformationMandatory))
            {
                this.unLinkAgreementLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnTradeCurrencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the line amounts, price and discounts based on <c>TradeCurencyConversion</c>.
    /// </summary>
    /// <param name = "_tradeCurrencyConversion">A trade currency conversion value.</param>
    public void updateBasedOnTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion)
    {
        switch (_tradeCurrencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                break;
            case TradeCurencyConversion::TradeAgreements:
                if (this.LineDeliveryType == LineDeliveryType::DeliveryLine)
                {
                    this.LineAmount = this.calcLineAmountForced();
                }
                else
                {
                    this.salesPurchLineInterface().resetPriceAgreement();
                    this.setPriceDisc(this.inventDim());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an order line into a delivery schedule with a single delivery line.
    /// </summary>
    /// <returns>
    /// The order line of the newly created delivery schedule.
    /// </returns>
    /// <remarks>
    /// The order line on which the conversion is called becomes the first delivery line. Markup is
    /// duplicated to the order line of the delivery schedule.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Only order lines without delivery lines can be converted to a delivery schedule.
    /// </exception>
    public SalesLine convertToDeliverySchedule()
    {
        SalesLine localSalesLine;
        #OCCRetryCount
        #ISOCountryRegionCodes

        if (this.LineDeliveryType != LineDeliveryType::OrderLine)
        {
            // Only order lines without delivery lines can be converted to a delivery schedule.
            throw error("@SYS131414");
        }

        try
        {
            ttsbegin;

            localSalesLine = this.createDeliveryScheduleOrderLine();

            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                this.kittingProcessCopy_delegate(this, localSalesLine);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(this.TableId, this.RecId, localSalesLine.TableId, localSalesLine.RecId);
            }
            // </GEEPL>

            Markup::copy(NoYes::No, this, localSalesLine);

            // create the DeliverySchedule relation
            SalesDeliverySchedule   salesDeliverySchedule;

            salesDeliverySchedule.OrderLine = localSalesLine.InventTransId;
            salesDeliverySchedule.DeliveryLine = this.InventTransId;
            salesDeliverySchedule.insert();

            this.LineDeliveryType = LineDeliveryType::DeliveryLine;
            this.ManualEntryChangepolicy = 0;
            this.SystemEntryChangePolicy = 0;
            this.updateWithoutUpdatingDeliveryScheduleLines();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        return localSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a delivery schedule order line.
    /// </summary>
    /// <returns>
    /// The created delivery schedule order line.
    /// </returns>
    protected SalesLine createDeliveryScheduleOrderLine()
    {
        SalesLine deliveryScheduleLine = this.initializeDeliveryScheduleOrderLine();

        this.insertDeliveryScheduleOrderLine(deliveryScheduleLine);

        return deliveryScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a delivery schedule order line.
    /// </summary>
    /// <returns>
    /// The initialized delivery schedule order line.
    /// </returns>
    protected SalesLine initializeDeliveryScheduleOrderLine()
    {
        SalesLine deliveryScheduleLine;

        deliveryScheduleLine.initFromSalesTable(this.salesTable());
        deliveryScheduleLine.initFromSalesLine(this, true, true, true);

        deliveryScheduleLine.LineDeliveryType         = LineDeliveryType::OrderLineWithMultipleDeliveries;
        deliveryScheduleLine.LineAmount               = 0;
        deliveryScheduleLine.RemainSalesPhysical      = 0;
        deliveryScheduleLine.RemainSalesFinancial     = 0;
        deliveryScheduleLine.RemainInventPhysical     = 0;
        deliveryScheduleLine.RemainInventFinancial    = 0;

        deliveryScheduleLine.PdsCWRemainInventFinancial = 0;
        deliveryScheduleLine.PdsCWRemainInventPhysical  = 0;

        deliveryScheduleLine.DeliveryDateControlType  = this.DeliveryDateControlType;
        deliveryScheduleLine.ReceiptDateRequested     = this.ReceiptDateRequested;
        deliveryScheduleLine.ShippingDateRequested    = this.ShippingDateRequested;
        deliveryScheduleLine.ShippingDateConfirmed    = this.ShippingDateConfirmed;
        deliveryScheduleLine.ReceiptDateConfirmed     = this.ReceiptDateConfirmed;
        deliveryScheduleLine.ConfirmedDlv             = this.ConfirmedDlv;

        LineNum lastLineNumBeforeSchedule       = (select maxof(LineNum) from salesLine
                                                        where salesLine.SalesId == this.SalesId
                                                           && salesLine.LineNum <  this.LineNum).LineNum;

        deliveryScheduleLine.LineNum                  = lastLineNumBeforeSchedule ? (this.LineNum + lastLineNumBeforeSchedule) / 2 : this.LineNum - 1;

        deliveryScheduleLine.ManualEntryChangepolicy = this.ManualEntryChangepolicy;
        deliveryScheduleLine.SystemEntryChangePolicy = this.SystemEntryChangePolicy;

        // copying Agreement reference to the order line with multiple deliveries
        deliveryScheduleLine.MatchingAgreementLine =  this.MatchingAgreementLine;

        return deliveryScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the specified delivery schedule order line.
    /// </summary>
    /// <param name="_deliveryScheduleLine">
    /// An initialized delivery schedule order line.
    /// </param>
    protected void insertDeliveryScheduleOrderLine(SalesLine _deliveryScheduleLine)
    {
        _deliveryScheduleLine.insert(true, false, null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the <c>SalesLine</c>
    /// table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyShipCarrierInformation</Name>
				<Source><![CDATA[
    public void copyShipCarrierInformation(SalesLine _salesLine)
    {
        DlvMode     dlvMode = DlvMode::find(_salesLine.DlvMode);

        this.ShipCarrierId          = dlvMode.ShipCarrierId;
        this.ShipCarrierAccountCode = dlvMode.ShipCarrierAccountCode;
        this.ShipCarrierDlvType     = dlvMode.ShipCarrierDlvType;
        this.ShipCarrierAccount     = _salesLine.ShipCarrierAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the current item with an alternative item if an alternative item has been set up.
    /// </summary>
    /// <param name="_inventDim">
    /// A buffer of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_newlyCreatedSalesLine">
    /// A buffer of the <c>SalesLine</c> table.
    /// </param>
    /// <returns>
    /// false if the current item has a alternative item setup; otherwise, true.
    /// </returns>
    /// <remarks>
    /// The user will be prompted for permission to use the alternative item.
    /// </remarks>
    public boolean createAlternativeItem(InventDim _inventDim, SalesLine _newlyCreatedSalesLine)
    {
        SalesAlternativeItem salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(this);
        salesAlternativeItem.parmInventDim(_inventDim);
        
        boolean ret;
        if (salesAlternativeItem.existAlternativeItem())
        {
            ret = true;

            if (!this.mustShowDialogBoxWhenReplacingItem() || (this.mustShowDialogBoxWhenReplacingItem()
                && Box::okCancel(strFmt("@SCM:ItemNumberIsReplacedByAlternativeItemNumber", salesAlternativeItem.alternativeItemId(),
                                                     salesAlternativeItem.alternativeProductDimensionPrefix(),
                                                     this.ItemId), DialogButton::Ok) == DialogButton::Ok))
            {
                SalesQty salesQty                           = this.SalesQty;

                AmountCur origAmount                        = this.SalesPrice;
                ItemId origItem                             = this.ItemId;
                InventDimId origInventDimId                 = this.InventDimId;

                ReturnExpectedRetQty returnExpectedRetQty   = this.ExpectedRetQty;

                if (SalesParameters::find().ReplaceAlternativeItemLineDefaults)
                {
                    ProjId projId = this.ProjId;
                     
                    this.resetSalesLine(_newlyCreatedSalesLine);

                    if (projId && this.SalesType  == SalesType::ItemReq)
                    {
                        this.ProjId = projId;

                        ProjTable projTable = this.projTable();
                        this.CurrencyCode = projTable.currencyId();
                        this.projIdChanged();
                    }
                }

                this.ShippingDateRequested = _newlyCreatedSalesLine.ShippingDateRequested;
                this.ReceiptDateRequested  = _newlyCreatedSalesLine.ReceiptDateRequested;

                this.setAlternativeItem(salesAlternativeItem);

                this.SalesQty         = salesQty;
                this.ExpectedRetQty   = returnExpectedRetQty;

                SalesLine::modifySalesQty(this,_inventDim);

                if (!this.InventTransId && MCROrderEventSetup::find().AlternateItemUsed)
                {
                    this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                    this.SkipAssignInventTransId = true;
                }

                // Insert alternate item event
                MCROrderEventTable mcrOrderEventTable;
                mcrOrderEventTable.insertAlternateItemUsed(this, MCROrderEventType::AlternateItemUsed,
                                                            origItem, origInventDimId, origAmount);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSalesLine</Name>
				<Source><![CDATA[
    private void resetSalesLine(SalesLine _newlyCreatedSalesLine)
    {
        LineNum lineNum = this.LineNum;
        this.data(_newlyCreatedSalesLine);
        this.LineNum = lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowDialogBoxWhenReplacingItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a dialog box must be shown when an item is replaced.
    /// </summary>
    /// <returns>true if the dialog box must be shown; otherwise, false.</returns>
    protected boolean mustShowDialogBoxWhenReplacingItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateSalesTableForProjectQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the sales order for a project quotation line.
    /// </summary>
    /// <param name = "_salesQuotationLine">A sales quotation line record for a project.</param>
    /// <param name = "_projTable">A project record.</param>
    /// <returns>The sales order record.</returns>
    protected SalesTable findOrCreateSalesTableForProjectQuotation(SalesQuotationLine _salesQuotationLine, ProjTable _projTable)
    {
        SalesTable salesTable = _salesQuotationLine.salesQuotationTable().salesTable_ItemReq();

        salesTable = this.createSalesTableForProjectQuotation(salesTable, _salesQuotationLine, _projTable);

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTableForProjectQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SalesTable</c> for a project quotation line.
    /// </summary>
    /// <param name = "_salesTable">
    /// The <c>SalesTable</c> table buffer.
    /// </param>
    /// <param name = "_salesQuotationLine">
    /// The <c> SalesQuotationLine </c> table buffer.
    /// </param>
    /// <param name = "_projTable">
    /// The <c> ProjTable </c> table buffer.
    /// </param>
    /// <returns>
    /// Returns the <c>SalesTable</c> table buffer.
    /// </returns>
    protected SalesTable createSalesTableForProjectQuotation(SalesTable _salesTable, SalesQuotationLine _salesQuotationLine, ProjTable _projTable)
    {
        SalesTable salesTable = _salesTable;

        if (!salesTable)
        {
            salesTable = _projTable.createSalesTable_ItemReqFromSQ(_salesQuotationLine);
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjectQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> record from a <c>SalesQuotationLine</c> record for a project.
    /// </summary>
    /// <param name = "_salesQuotationLine">A <c>SalesQuotationLine</c> record for a project quotation.</param>
    /// <param name = "_salesTable">The <c>SalesTable</c> record containing this <c>SalesLine<c>.</param>
    /// <param name = "_activityNumber">The project activity number to be associated with this <c>SalesLine</c>.</param>
    protected void initFromProjectQuotationLine(SalesQuotationLine _salesQuotationLine, SalesTable _salesTable, smmActivityNumber _activityNumber)
    {
        this.initFromSalesQuotationLine(_salesQuotationLine);

        this.SalesId            = _salesTable.SalesId;
        this.SalesType          = _salesTable.SalesType;
        this.Reservation        = _salesTable.Reservation;
        this.CurrencyCode       = _salesQuotationLine.CurrencyCode;
        this.ProjId             = _salesTable.ProjId;
        this.CustomerRef        = _salesTable.CustomerRef;
        this.PurchorderFormNum  = _salesTable.PurchOrderFormNum;
        this.CustAccount        = _salesTable.CustAccount;
        this.CustGroup          = _salesTable.CustGroup;

        if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
        {
            this.ProjFundingSource = _salesTable.FundingSource;
        }

        this.ItemId = _salesQuotationLine.ItemId;
        if (this.ItemId)
        {
            this.SalesCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                                this.ItemId,
                                                EcoResCategoryNamedHierarchyRole::Sales).Category;
        }
        else
        {
            this.SalesCategory  = _salesQuotationLine.SalesCategory;
        }
        this.setStockedProduct();
        this.ExternalItemId     = _salesQuotationLine.ExternalItemId;

        this.ProjCategoryId     = _salesQuotationLine.ProjCategoryId;
        this.ProjLinePropertyId = _salesQuotationLine.LinePropertyId;

        //Delivery
        this.OverDeliveryPct        = _salesQuotationLine.OverDeliveryPct;
        this.UnderDeliveryPct       = _salesQuotationLine.UnderDeliveryPct;
        this.ShippingDateConfirmed  = _salesTable.ShippingDateConfirmed;
        this.ReceiptDateConfirmed   = _salesTable.ReceiptDateConfirmed;

        //Project - quantity
        this.SalesQty   = _salesQuotationLine.SalesQty;
        this.QtyOrdered = this.calcQtyOrdered();

        //Project - cost amount
        InventDim inventDim = InventDim::find(_salesQuotationLine.InventDimId);
        if (this.ItemId)
        {
            this.calculateCostPrice(inventDim);
        }
        if (this.CostPrice == 0 && _salesQuotationLine.CostPrice != 0)
        {
            this.CostPrice = _salesQuotationLine.CostPrice;
        }

        this.calcPackingUnit(inventDim);
        this.calcPackingUnitQty(inventDim);

        this.ActivityNumber = _activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>SalesLine</c> from the specified <c>SalesQuotationLine</c> for Project.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> used to create the <c>SalesLine</c>.</param>
    /// <param name = "_activityNumber">The activity number.</param>
    /// <remarks>This method creates sales quotation lines related to a project.</remarks>
    public void createFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine, smmActivityNumber _activityNumber = '')
    {
        ProjTable projTable = ProjTable::find(_salesQuotationLine.projId());
        if (projTable && !ProjStatusType::construct(projTable).validateWriteItemRequirement())
        {
            throw error("@SYS18447");
        }

        SalesTable salesTable = this.findOrCreateSalesTableForProjectQuotation(_salesQuotationLine, projTable);

        this.clear();
        this.initValue();
        this.initFromProjectQuotationLine(_salesQuotationLine, salesTable, _activityNumber);
        if (this.ProjId)
        {
            this.DefaultDimension = this.mergeDimension(projTable.DefaultDimension);
        }

        this.createLine(false,  //  validation
                        false,  //  initFromSalesTable
                        false,  //  initFromInventTableModule
                        true,   //  calcInventQty
                        false,  //  searchMarkup
                        false,  //  searchPrice
                        salesTable.Reservation==ItemReservation::Automatic, //  checkReservation
                        true); //  skipCreditLimitCheck
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    public void createFromTmpFrmVirtual(
        SalesTable           _salesTable,
        TmpFrmVirtual        _tmpFrmVirtual,
        SMAServiceOrderTable _smaServiceOrderTable = null,
        InventDimParm        _inventDimParm        = null)
    {
        List list = new List(Types::Record);
        SalesLineCreateFromTmpFrmVirtualContract contract = SalesLineCreateFromTmpFrmVirtualContract::construct();

        contract.parmSalesTable(_salesTable);
        contract.parmSMAServiceOrderTable(_smaServiceOrderTable);
        contract.parmInventDimParm(_inventDimParm);

        while select _tmpFrmVirtual
            where _tmpFrmVirtual.Qty || _tmpFrmVirtual.PdsCWQty
        {
            list.addEnd(_tmpFrmVirtual);
        }

        contract.parmTmpFrmVirtualPacked(list.pack());

        this.createRecordsFromTmp(contract, _tmpFrmVirtual);

        // Recalculate for the whole order after bulk creation: add lines.
        if (RetailPricingKillSwitch::skipOrderCalculationInBulkCreationV2() && _salesTable.isRetailSale())
        {
            RetailSalesOrderCalculator::setPricesDiscountsOnOrderOnServer(_salesTable.SalesId, _salesTable.retailSalesTable().TotalManualDiscountPercentage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordsFromTmp</Name>
				<Source><![CDATA[
    private void createRecordsFromTmp(SalesLineCreateFromTmpFrmVirtualContract _contract, TmpFrmVirtual _tmpFrmVirtual)
    {
        ttsbegin;

        SalesLine::createLinesFromTmpFrmVirtual(_contract);

        delete_from _tmpFrmVirtual
            where _tmpFrmVirtual.Qty;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesLine</c> using the specified <c>SalesLineCreateLineParameters</c> object.
    /// </summary>
    /// <param name = "_salesLineCreateLineParameters">The parameters used to create the <c>SalesLine</c>.</param>
    public void createLineFromParameters(SalesLineCreateLineParameters _salesLineCreateLineParameters)
    {
        SalesTable          salesTable;
        AgreementLine       agreementLine;
        MCRInventTable      mcrInventTableContinuity;
        MCRSourceCodeLine   mcrSourceCodeLine;
        
        boolean             mcrCallCenterEnabled = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));

        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        if (_salesLineCreateLineParameters.initFromSalesOrderTable)
        {
            salesTable = this.salesTable();
            this.initFromSalesTable(salesTable, _salesLineCreateLineParameters.ignoreSalesTableInventDim);
            if (mcrCallCenterEnabled)
            {
                mcrSourceCodeLine = MCRSourceCodeLine::construct(this);
                mcrSourceCodeLine.mcrInitFromSourceCodeSetup(MCRSourceCodeSetup::find(this.mcrSalesLine().SourceId));
            }
        }

        if (_salesLineCreateLineParameters.initFromItemOrCategory)
        {
            this.initLineFromItemOrCategory();

            if (this.ItemId
                && (!RetailStatementFeatureControl::isIgnoreDropShipmentEnabled()
                    || !this.salesTable().isRetailCashAndCarrySales()))
            {
                this.initDropShipAndInstallmentEligible(this.inventTable());
            }
        }

        this.validateSalesLineCreation();

        if (_salesLineCreateLineParameters.calcInventQty)
        {
            this.QtyOrdered = this.calcQtyOrdered();
        }

        this.RemainSalesPhysical        = this.SalesQty;
        this.RemainInventPhysical       = this.QtyOrdered;
        this.PdsCWRemainInventPhysical  = this.PdsCWQty;

        this.RemainSalesFinancial       = 0;
        this.PdsCWRemainInventFinancial = 0;

        //  If price and discounts weren't set by calling initFromInventTable they're set now.
        //  If logic changing the calculation of price and discount after calling initFromInventTable is introduces,
        //  this call to setPriceDisc(....) might be needed.
        if (_salesLineCreateLineParameters.searchPrice && !(_salesLineCreateLineParameters.initFromItemOrCategory && this.ItemId))
        {
            this.setPriceDisc(this.inventDim());
        }

        if (_salesLineCreateLineParameters.checkReservation && !this.SalesCategory)
        {
            InventMovement::setAutoReserving(this, false); // Message to infolog
        }

        if (_salesLineCreateLineParameters.oldAgreementLineRecId)
        {
            this.MatchingAgreementLine = _salesLineCreateLineParameters.oldAgreementLineRecId;
        }
        else if (_salesLineCreateLineParameters.searchAgreementLine && this.canAgreementBeLinked())
        {
            if (!salesTable.RecId)
            {
                salesTable= this.salesTable();
            }

            if (this.mustMatchAgreementLine(salesTable))
            {
                List warningReportList = new List(Types::String);
                agreementLine = AgreementLine::findLineForAutoMatch(this, salesTable.MatchingAgreement, true, warningReportList);

                if (!agreementLine && !warningReportList.empty())
                {
                    ListIterator listIterator = new ListIterator(warningReportList);
                    throw error(listIterator.value());
                }
                if (agreementLine)
                {
                    this.initFromAgreementLine(agreementLine);
                    agreementLine.validateAmount(this);
                }
            }
        }

        if (_salesLineCreateLineParameters.validation && !this.validateWrite(_salesLineCreateLineParameters.skipCreditLimitCheck))
        {
            throw error("@SYS18447");
        }

        if (_salesLineCreateLineParameters.setLineNum && !this.LineNum)
        {
            this.LineNum = SalesLine::lastLineNum(this.SalesId) + 1.0;
        }

        if (_salesLineCreateLineParameters.smaServiceOrderTable)
        {
            this.initFromSMAServiceOrderTable(_salesLineCreateLineParameters.smaServiceOrderTable);
        }

        if (this.checkItemForExchangeOrContinue(mcrCallCenterEnabled))
        {
            // if not replacement, and the item being added is continuity, assign the continuity schedule id to the sales line rec.
            mcrInventTableContinuity = MCRInventTable::findByItemId(this.ItemId);
            InventTransId mcrExchangeInventRefTransId = _salesLineCreateLineParameters.mcrExchangeInventRefTransId;
            if (mcrExchangeInventRefTransId)
            {
                MCRSalesLine mcrSalesLine = this.mcrSalesLine();
                if (mcrSalesLine.ExchangeInventRefTransId != mcrExchangeInventRefTransId)
                {
                    mcrSalesLine.ExchangeInventRefTransId = mcrExchangeInventRefTransId;
                    this.mcrPackMCRSalesLine(mcrSalesLine);
                }
            }
            else if (mcrInventTableContinuity.ContinuityScheduleId)
            {
                MCRSalesLine mcrSalesLine = this.mcrSalesLine();
                if (mcrSalesLine.ContinuityScheduleId != mcrInventTableContinuity.ContinuityScheduleId)
                {
                    mcrSalesLine.ContinuityScheduleId = mcrInventTableContinuity.ContinuityScheduleId;
                    this.mcrPackMCRSalesLine(mcrSalesLine);
                }
            }
        }
        this.insert(_salesLineCreateLineParameters.skipInventoryProcessing, _salesLineCreateLineParameters.searchMarkup, null, _salesLineCreateLineParameters.skipCreditLimitCheck, false, _salesLineCreateLineParameters.interCompanyInventTransId);

        if (B2B2BDataHelper::shouldRespectCatalog(salesTable.RetailChannelTable) && _salesLineCreateLineParameters.catalogFromTmpFrmVirtual)
        {
            ttsbegin;
            RetailSalesLine currentRetailSalesLine = RetailSalesLine::findBySalesLine(this.RecId, true);
            currentRetailSalesLine.Catalog = _salesLineCreateLineParameters.catalogFromTmpFrmVirtual;
            currentRetailSalesLine.update();
            ttscommit;
        }

        // <GEEPL>
        if (_salesLineCreateLineParameters.initFromSalesOrderTable && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(salesTable.TableId, salesTable.RecId, this.TableId, this.RecId);
        }
        // </GEEPL>

        if (mcrInventTableContinuity.ContinuityScheduleId
            && mcrCallCenterEnabled)
        {
            // If the item being added is continuity and sales line record is a data source, launch the continuity form.
            // Otherwise just create the continuity schedule.
            this.mcrCreateContinuityCust(FormDataUtil::isFormDataSource(this));
        }

        if (_salesLineCreateLineParameters.searchPrice)
        {
            this.updateRetailDiscountsInternal(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMatchAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether to retrieve the best agreement line for the sales line.
    /// </summary>
    /// <param name = "_salesTable">
    ///		A <c>SalesTable</c> record.
    /// </param>
    /// <returns>
    ///		true, if the best agreement line must be retrieved; otherwise, false.
    /// </returns>
    protected boolean mustMatchAgreementLine(SalesTable _salesTable)
    {
        if (_salesTable.MatchingAgreement)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemForExchangeOrContinue</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether the item is marked for exchange or continue.
    /// </summary>
    /// <param name = "_mcrCallCenterEnabled">
    ///		A boolean value that indicates whether the <c>MCRCallCenter</c> configuration key is enabled.
    /// </param>
    /// <returns>
    ///		true, if the item check for exchange or continue is ok; otherwise, false.
    /// </returns>
    protected boolean checkItemForExchangeOrContinue(boolean _mcrCallCenterEnabled)
    {
        if (_mcrCallCenterEnabled)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    public void createLine(boolean              _validation                  = false,
                           boolean              _initFromSalesOrderTable     = false,
                           boolean              _initFromItemOrCategory      = false,
                           boolean              _calcInventQty               = false,
                           boolean              _searchMarkup                = true,
                           boolean              _searchPrice                 = false,
                           boolean              _checkReservation            = false,
                           boolean              _skipCreditLimitCheck        = false,
                           boolean              _ignoreSalesTableInventDim   = false,
                           boolean              _setLineNum                  = true,
                           boolean              _searchAgreementLine         = false,
                           SMAServiceOrderTable _smaServiceOrderTable        = null,
                           AgreementLineRecId   _oldAgreementLineRecId       = 0,
                           InventTransId        _mcrExchangeInventRefTransId = '',
                           InventRefTransId     _interCompanyInventTransId   = ''
                           )
    {
        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
        salesLineCreateLineParameters.validation                  = _validation;
        salesLineCreateLineParameters.initFromSalesOrderTable     = _initFromSalesOrderTable;
        salesLineCreateLineParameters.initFromItemOrCategory      = _initFromItemOrCategory;
        salesLineCreateLineParameters.calcInventQty               = _calcInventQty;
        salesLineCreateLineParameters.searchMarkup                = _searchMarkup;
        salesLineCreateLineParameters.searchPrice                 = _searchPrice;
        salesLineCreateLineParameters.checkReservation            = _checkReservation;
        salesLineCreateLineParameters.skipCreditLimitCheck        = _skipCreditLimitCheck;
        salesLineCreateLineParameters.ignoreSalesTableInventDim   = _ignoreSalesTableInventDim;
        salesLineCreateLineParameters.setLineNum                  = _setLineNum;
        salesLineCreateLineParameters.searchAgreementLine         = _searchAgreementLine;
        salesLineCreateLineParameters.smaServiceOrderTable        = _smaServiceOrderTable;
        salesLineCreateLineParameters.oldAgreementLineRecId       = _oldAgreementLineRecId;
        salesLineCreateLineParameters.mcrExchangeInventRefTransId = _mcrExchangeInventRefTransId;
        salesLineCreateLineParameters.interCompanyInventTransId   = _interCompanyInventTransId;

        this.createLineFromParameters(salesLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    public void createMarkupTrans(
        SalesTable  _salesTable,
        boolean _deleteExistingMarkupTrans = true)
    {
        if (this.SkipCreateMarkup == NoYes::No)
        {
            NoYes  returnValue;
            InventTable inventTable;
            InventDim   inventDim;
            using(var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().createMarkupTrans(this))
            {
                //Set the InventDim paramters for Sales Line in <c>Markup</c> class if the feature is enabled
                if (this.InventDimId)
                {
                    inventDim = InventDim::find(this.InventDimId);
                    Markup::parmInventDimParameters(inventDim);
                }

                if (this.markupAllowed(_salesTable))
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                    {
                        // Don't look at MCRIsReturn any more, instead just see if it's type returnItem.
                        if (_salesTable.SalesType == SalesType::ReturnItem)
                        {
                            returnValue = true;
                        }
                        else
                        {
                            returnValue = false;
                        }
                        // Don't look at MCRIsReturn any more, instead just see if it's type returnItem.
                    }

                    ttsbegin;
                    inventTable = this.inventTable();

                    // The flighting key is to be used incase a regression happens.
                    // However the regressed scenario should be attempted to fix as prior to the fix
                    // the code was passing boolean (return value) to a number(totalAmount).
                    if (RetailCallCenterBlindReturnChargesFixToggle::instance().isEnabled())
                    {
                        Markup::insertMarkupTrans(HeadingLine::Line,
                                              MarkupModuleType::Cust,
                                              this,
                                              _salesTable.markupCustomerAccount(),
                                              _salesTable.MarkupGroup,
                                              _salesTable.CurrencyCode,
                                              _salesTable.LanguageId,
                                              this.ItemId,
                                              inventTable.salesMarkupGroup(),
                                              // Don't invert for returns
                                              _salesTable.SalesType == SalesType::ReturnItem ? (!(this.LineAmount < 0)) :
                                                (this.LineAmount < 0),// invert sign on credit notes
                                              _deleteExistingMarkupTrans,
                                              this.DlvMode,
                                              DlvMode::find(this.DlvMode).MarkupGroup,
                                              this.LineAmount,
                                              //  We need to pass in whether the order is a return
                                              //  or regular sales order to determine which auto
                                              //  charges come in for the lines.
                                              returnValue
                                             );
                    }
                    else
                    {
                        Markup::insertMarkupTrans(HeadingLine::Line,
                                              MarkupModuleType::Cust,
                                              this,
                                              _salesTable.markupCustomerAccount(),
                                              _salesTable.MarkupGroup,
                                              _salesTable.CurrencyCode,
                                              _salesTable.LanguageId,
                                              this.ItemId,
                                              inventTable.salesMarkupGroup(),
                                              // Don't invert for returns
                                              _salesTable.SalesType == SalesType::ReturnItem ? (!(this.LineAmount < 0)) :
                                                (this.LineAmount < 0),// invert sign on credit notes
                                              _deleteExistingMarkupTrans,
                                              this.DlvMode,
                                              DlvMode::find(this.DlvMode).MarkupGroup,
                                              //  We need to pass in whether the order is a return
                                              //  or regular sales order to determine which auto
                                              //  charges come in for the lines.
                                              returnValue
                                             );
                    }

                    // Handle delivery charges
                    Markup::insertMarkupTrans(HeadingLine::Line,
                                                MarkupModuleType::Delivery,
                                                this,
                                                _salesTable.markupCustomerAccount(),
                                                _salesTable.MarkupGroup,
                                                _salesTable.CurrencyCode,
                                                _salesTable.LanguageId,
                                                this.ItemId,
                                                inventTable.salesMarkupGroup(),
                                                (this.LineAmount < 0), // invert sign on credit notes
                                                false, //do not delete existing MarkupTrans since they were already deleted (if needed) in previous call
                                                this.DlvMode,
                                                DlvMode::find(this.DlvMode).MarkupGroup
                                            );

                    if (this.isInterCompanyOrder())
                    {
                        Markup::setMarkupKeepForIntercompany(this);
                    }

                    #ISOCountryRegionCodes
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                    {
                        MarkupTrans markupTransLoc = MarkupTrans::findValue(this.TableId, this.RecId);

                        if (markupTransLoc.CustomsAssessableValue_IN)
                        {
                            markupTransLoc.updateAssessableValue_IN();
                        }
                    }

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the replacement lines for each entry in the return replacement table that exist for a sales
    /// or return order line.
    /// </summary>
    /// <remarks>
    /// This method creates a new sales order if a replacement sales order is not specified.
    /// </remarks>
    public void createReplacement()
    {
        SalesReplacementLine salesReplacementLine = SalesReplacementLine::newFromSalesLine(this);
        salesReplacementLine.createReplacement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnMarkupTrans</Name>
				<Source><![CDATA[
    public void createReturnMarkupTrans(SalesTable  _salesTable)
    {
        if (this.markupAllowed(_salesTable))
        {
            Markup::insertReturnMarkupTrans(HeadingLine::Line,
                                           MarkupModuleType::Cust,
                                           this,
                                           _salesTable.CustAccount,
                                           _salesTable.MarkupGroup,
                                           _salesTable.LanguageId);   // invert sign on credit notes
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnMarkupTransForHeader</Name>
				<Source><![CDATA[
    private void createReturnMarkupTransForHeader(SalesTable  _salesTable)
    {
        if (this.markupAllowed(_salesTable))
        {
            Markup::insertReturnMarkupTrans(HeadingLine::Heading,
                                           MarkupModuleType::Cust,
                                           _salesTable,
                                           _salesTable.CustAccount,
                                           _salesTable.MarkupGroup,
                                           _salesTable.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnLineReservationInventDimId</Name>
				<Source><![CDATA[
    private InventDimId getReturnLineReservationInventDimId(InventTrans _inventTransQuarantineRes)
    {
        if (_inventTransQuarantineRes.InventDimId)
        {
            return _inventTransQuarantineRes.InventDimId;
        }
  
        if (SalesReturnReservLineConsiderLatestDimsOnTransFlight::instance().isEnabled())
        {
            return InventTrans::findLatestByTransId(this.InventTransId).InventDimId;
        }
   
        return InventTrans::findTransId(this.InventTransId).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnReservationLine</Name>
				<Source><![CDATA[
    public void createReturnReservationLine()
    {
        SalesLine                   resReturnLine;
        InventTransOrigin           inventTransOrigin;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        InventTransOrigin           inventTransOriginReserved;
        InventTransOrigin           inventTransOriginQuarantine;
        InventTrans                 inventTrans, inventTransReserved;
        InventTrans                 inventTransQuarantine, inventTransQuarantineRes;
        InventUpd_Reservation       reservation;
        InventMovement              movement;

        // <GIN>
        DispositionAction           dispositionAction;
        SalesLine_IN                salesLine_IN;
        SalesLine_IN                salesLineINLoc;
        TaxParameters               taxParameters;
        boolean                     isIndiaEnabled;
        boolean                     isIndianTaxEnabled;
        boolean                     isWithholdParameterEnabled;
        #ISOCountryRegionCodes

        if (this.SalesStatus == SalesStatus::Invoiced)
        {
            return;
        }

        isIndiaEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        if (isIndiaEnabled)
        {
            taxParameters = TaxParameters::find();
            isIndianTaxEnabled = TaxParameters::checkTaxParameters_IN();
            isWithholdParameterEnabled = TaxWithholdParameters_IN::checkTaxParameters();
        }
        // </GIN>

        if (this.isStocked())
        {
            // check that reservation line has not been created for sales line
            select firstonly TableId from inventTransOriginSalesLine
                where inventTransOriginSalesLine.SalesLineDataAreaId            == this.DataAreaId
                   && inventTransOriginSalesLine.SalesLineInventTransId         == this.InventTransId
                 join ReferenceCategory, ReferenceId, InventTransId from inventTransOrigin
                    where inventTransOrigin.RecId                               == inventTransOriginSalesLine.InventTransOrigin
                    join Qty, RecId from inventTrans
                        where inventTrans.InventTransOrigin                     == inventTransOrigin.RecId
                        join ReferenceCategory, ReferenceId, RecId from inventTransOriginReserved
                            where inventTransOriginReserved.RecId               == inventTrans.MarkingRefInventTransOrigin
                               && inventTransOriginReserved.ReferenceCategory   != InventTransType::QuarantineOrder
                            exists join inventTransReserved
                                where inventTransReserved.InventTransOrigin     == inventTransOriginReserved.RecId
                                   && inventTransReserved.StatusIssue           != StatusIssue::None;

            if (inventTrans.RecId)
            {
                if (inventTransOriginReserved.ReferenceId != inventTransOrigin.ReferenceId)
                {
                    // Inventory lot '%1' has been reserved by %2 '%3'.
                    throw error(strFmt("@SYS117212",this.InventTransId, inventTransOriginReserved.ReferenceCategory, inventTransOriginReserved.ReferenceId));
                }
                else
                {
                    if (ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction == DispositionAction::ReturnToCust)
                    {
                        ttsbegin;
                        resReturnLine = InventTransOriginSalesLine::salesLine(inventTransOriginReserved.RecId, true);
                        if (resReturnLine.RecId && resReturnLine.ReturnStatus != this.ReturnStatus)
                        {
                            resReturnLine.ReturnStatus = this.ReturnStatus;
                            resReturnLine.update();
                            this.InventRefTransId = resReturnLine.InventTransId;
                            this.InventRefId      = resReturnLine.SalesId;
                            this.update();
                        }
                        ttscommit;
                    }
                }
            }
            else
            {
                // Create a sales line to make a reservation
                ttsbegin;

                if (this.qtyMarked())
                {
                    while select forupdate inventTransQuarantine
                        where inventTransQuarantine.MarkingRefInventTransOrigin == InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId)
                        exists join inventTransOriginQuarantine
                            where inventTransOriginQuarantine.RecId             == inventTransQuarantine.InventTransOrigin
                               && inventTransOriginQuarantine.ReferenceCategory == InventTransType::QuarantineOrder
                    {
                        InventTransOrigin::deleteMarking(inventTransQuarantine.MarkingRefInventTransOrigin, inventTransQuarantine.InventTransOrigin, -inventTransQuarantine.Qty
                            , false
                            , null
                            , null
                            , false
                            , false
                            , -inventTransQuarantine.PdsCWQty
                        );
                        inventTransQuarantine.clearMarking();

                        if (inventTransQuarantine.RecId && !inventTransQuarantineRes.InventDimId)
                        {
                            select firstonly InventDimId from inventTransQuarantineRes
                                where inventTransQuarantineRes.InventTransOrigin            == inventTransQuarantine.InventTransOrigin
                                   && inventTransQuarantineRes.MarkingRefInventTransOrigin  == 0
                                   && inventTransQuarantineRes.Qty                           >  0; //Receipt
                        }

                        inventTransQuarantine.update();
                    }
                }

                resReturnLine.clear();
                var emptyPackedExtensions = resReturnLine.PackedExtensions;
                resReturnLine.data(this.data()) ;
                // setting the packed extensions of return reservation line back to empty
                // to avoid incorrect mapping to pre-existing return line.
                resReturnLine.PackedExtensions          = emptyPackedExtensions;
                resReturnLine.LineNum                   = 0;
                resReturnLine.InventRefTransId          = this.InventTransId;
                resReturnLine.InventRefType             = InventRefType::Sales;
                // <GIN>
                if (isIndiaEnabled)
                {
                    salesLine_IN = this.salesLine_IN();
                }
                if ((!isIndianTaxEnabled
                     && !isWithholdParameterEnabled)
                    || ((taxParameters.Excise_IN
                         || taxParameters.vat_in
                         || isWithholdParameterEnabled)
                        && !salesLine_IN.TaxAsPerOriginalInvoice))
                {
                    // </GIN>
                    resReturnLine.InventRefId               = this.SalesId;
                    // <GIN>
                }
                // </GIN>
                resReturnLine.InterCompanyInventTransId = '';
                resReturnLine.ExpectedRetQty            = this.ExpectedRetQty * -1;
                resReturnLine.SalesQty                  = this.SalesQty * -1;
                resReturnLine.QtyOrdered                = this.QtyOrdered * -1;
                resReturnLine.LineAmount                = resReturnLine.LineAmount * -1;
                resReturnLine.InventDimId               = this.getReturnLineReservationInventDimId(inventTransQuarantineRes);
                // In the base sales line type insert method we would normally get
                // a new inventTransId but we've conditioned it to only do so if its blank
                // and this new line needs a new inventTransId or it will error, so clear it.
                resReturnLine.InventTransId = '';
                resReturnLine.LineCreationSequenceNumber = 0;
                resReturnLine.PdsCWExpectedRetQty       = this.PdsCWExpectedRetQty * -1;
                resReturnLine.PdsCWQty                  = this.PdsCWQty * -1;

                ReturnDispositionCode returnDispositionCode = ReturnDispositionCode::find(resReturnLine.ReturnDispositionCodeId);
                if (returnDispositionCode.DispositionAction == DispositionAction::ReturnToCust)
                {
                    TaxGroup originalLineTaxGroup = resReturnLine.TaxGroup;
                    resReturnLine.initFromCustTable();
                    resReturnLine.TaxGroup = originalLineTaxGroup;
                }

                if (returnDispositionCode.createScrap())
                {
                    resReturnLine.ReturnStatus = ReturnStatusLine::Awaiting;
                    resReturnLine.SalesPrice   = 0;
                    resReturnLine.LineAmount   = 0;
                    resReturnLine.MatchingAgreementLine = 0;
                    resReturnLine.LineDisc = 0;
                    if (MCRResetMultiLnDiscOnScrapDispostionItemArrival::instance().isEnabled())
                    {
                        resReturnLine.MultiLnDisc = 0;
                    }
  
                }

                //<GIN>
                if (isIndiaEnabled)
                {
                    salesLineINLoc.data(salesLine_IN.data());
                    if (ReturnDispositionCode::find(resReturnLine.ReturnDispositionCodeId).DispositionAction == DispositionAction::ReturnToCust)
                    {
                        salesLineINLoc.AssessableValueTransactionCurrency = salesLine_IN.AssessableValueTransactionCurrency * -1;
                    }
                    resReturnLine.packSalesLine_IN(salesLineINLoc);
                }
                // </GIN>
                resReturnLine.createLine(NoYes::No,         // Validate
                                    NoYes::No,              // initFromSalesTable
                                    NoYes::No,              // initFromInventTable
                                    NoYes::No,              // calcInventQty
                                    NoYes::Yes,             // searchMarkup
                                    NoYes::No               // searchPrice
                                    , false                 //_checkReservation
                                    , false                 // _skipCreditLimitCheck
                                    , false                 // _ignoreSalesTableInventDim
                                    , true                  // _setLineNum
                                    , false                 // _searchAgreementLine
                                    , null                  // _smaServiceOrderTable
                                    , resReturnLine.MatchingAgreementLine   // note that MatchingAgreementLine is set to 0 for a Scraped lines.
                                    , ''                    // _mcrExchangeInventRefTransId = '',
                                    , this.InterCompanyInventTransId        // _interCompanyInventTransId
                                    );

                movement    = InventMovement::construct(resReturnLine);
                reservation = InventUpd_Reservation::newMovement(movement,-resReturnLine.SalesQty,true
                    , false
                    , false
                    , resReturnLine.PdsCWQty
                );
                reservation.updateNow();

                this.InventRefTransId          = resReturnLine.InventTransId;
                this.InventRefType             = InventRefType::Sales;
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    dispositionAction = ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction;
                }

                // Checking DispositionAction for Replace and scrap for which
                // the inventRefId of SalesLine should store original SalesId of Sales Order (Of type return type) instead of the latest SalesId.
                // <GIN>
                if ((!isIndianTaxEnabled
                     && !isWithholdParameterEnabled)
                    || ((taxParameters.Excise_IN
                        || taxParameters.vat_in)
                    && dispositionAction != DispositionAction::ReplaceScrap
                    && !salesLine_IN.TaxAsPerOriginalInvoice))
                {
                    // </GIN>
                    this.InventRefId               = resReturnLine.SalesId;
                    // <GIN>
                }
                // </GIN>
                this.update();

                ttscommit;
            }
        }
        else
        {
            this.createReturnReservationLineNonStocked();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnReservationLineNonStocked</Name>
				<Source><![CDATA[
    public void createReturnReservationLineNonStocked()
    {
        SalesLine                           resReturnLine, salesLineOrig, salesLineReserved;

        // Check that a reservation line has not been created for sales line
        select firstonly InventTransId from salesLineOrig
            where salesLineOrig.DataAreaId              == this.DataAreaId
               && salesLineOrig.InventTransId           == this.InventTransId
         join InventTransId from salesLineReserved
            where salesLineReserved.InventRefId         == salesLineOrig.InventRefId
                && salesLineReserved.InventRefTransId   == salesLineOrig.InventTransId
                && salesLineOrig.InventRefTransId       == salesLineReserved.InventTransId;

        if (!salesLineReserved.InventTransId)
        {
            // Create a sales line to make a reservation
            ttsbegin;

            resReturnLine.clear();
            var emptyPackedExtensions = resReturnLine.PackedExtensions;
            resReturnLine.data(this.data()) ;
            // setting the packed extensions of return reservation line back to empty
            // to avoid incorrect mapping to pre-existing return line.
            resReturnLine.PackedExtensions          = emptyPackedExtensions;
            resReturnLine.LineNum                   = 0;
            resReturnLine.SourceDocumentLine        = 0;
            resReturnLine.InventRefTransId          = this.InventTransId;
            resReturnLine.InventRefType             = InventRefType::Sales;
            resReturnLine.InventRefId               = this.SalesId;
            resReturnLine.InterCompanyInventTransId = '';
            resReturnLine.ExpectedRetQty            = this.ExpectedRetQty * -1;
            resReturnLine.SalesQty                  = this.SalesQty * -1;
            resReturnLine.LineAmount                = resReturnLine.LineAmount * -1;
            resReturnLine.InventDimId               = this.InventDimId;
            // In the base sales line type insert method we would normally get
            // a new inventTransId but we've conditioned it to only do so if its blank
            // and this new line needs a new inventTransId or it will error, so clear it.
            resReturnLine.InventTransId = '';
            resReturnLine.LineCreationSequenceNumber = 0;

            resReturnLine.createLine(NoYes::No,         // Validate
                                    NoYes::No,             // initFromSalesTable
                                    NoYes::No,             // initFromInventTable
                                    NoYes::No,             // calcInventQty
                                    NoYes::Yes,            // searchMarkup
                                    NoYes::No              // searchPrice
                                    );

            //Delete pending registration records for the line
            resReturnLine.type().deletePendingRegistrationsNonStocked();

            this.selectForUpdate(true);
            this.InventRefTransId          = resReturnLine.InventTransId;
            this.InventRefType             = InventRefType::Sales;
            this.InventRefId               = resReturnLine.SalesId;
            this.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates the <c>SourceDocumentLine</c> record if one does not exist.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///   A <c>RecId</c> for the matching <c>SalesTable</c> record; optional.
    /// </param>
    [SysObsolete("@SourceDocumentAccountingFramework:WarningMessageForCompilerForSalesOrderCreatingSourceDocumentRecords", false, 31\03\2021)]
    void createSourceDocumentLine(RefRecId _salesTableRecId = this.salesTable().RecId)
    {
        SourceDocumentLine sourceDocumentLine;

        sourceDocumentLine.SourceDocumentHeader = this.salesTable().SourceDocumentHeader;
        sourceDocumentLine.TypeEnumName = enumStr(SourceDocumentLine_ProductSale);
        sourceDocumentLine.TypeEnumValue = SourceDocumentLine_ProductSale::SalesOrderLine;
        sourceDocumentLine.AccountingStatus = SourceDocumentLineAccountingStatus::Draft;

        ttsbegin;

        this.SourceDocumentLine = SourceDocumentLine::createSourceDocumentLine(tableNum(SalesLine), sourceDocumentLine);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMockUpSourceDocumentLine</Name>
				<Source><![CDATA[
    private void createMockUpSourceDocumentLine()
    {
        if (!this.SourceDocumentLine)
        {
            SystemSequence systemSequence  = new SystemSequence();
            try
            {
                systemSequence.suspendRecIds(tableNum(SourceDocumentLine));
                this.SourceDocumentLine = systemSequence.reserveValues(1, tableNum(SourceDocumentLine));
            }
            finally
            {
                if (systemSequence)
                {
                    systemSequence.removeRecIdSuspension(tableNum(SourceDocumentLine));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWarningIfNotReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a warning if the current sales line is not reserved completely and it should have been.
    /// </summary>
    public void createWarningIfNotReserved()
    {
        InventMovement      movement;

        movement = InventMovement::constructNoThrow(this);

        if (   movement
            && movement.canBeReserved()
            && movement.mustBeAutoReserved()
            && ( (!PdsGlobal::pdsIsCWItem(this.ItemId) && movement.transIdSum().onOrder())
                || movement.transIdSum().pdsCWOnOrder()))
        {
            warning(strFmt("@PDS1469",this.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    public boolean  creditNoteLine(
    SalesTable _salesTable = this.salesTable()
    )
    {
        return this.type(
        _salesTable
        ).creditNoteLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custClassification</Name>
				<Source><![CDATA[
    public display CustClassificationId custClassification()
    {
        return CustTable::find(this.CustAccount).CustClassificationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default delivery name for the sales order line.
    /// </summary>
    /// <returns>
    /// The default delivery name for the sales order line.
    /// </returns>
    public Name defaultDeliveryName()
    {
        return this.DeliveryName ? this.DeliveryName : this.salesTable().DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSupplementarySalesLines</Name>
				<Source><![CDATA[
    private void deleteSupplementarySalesLines()
    {
        SalesLine                   suppItemSalesLine;
        SupplementarySalesLineRef   supplementarySalesLineRef;

        if (MCRCustTable::findByCustAccount(this.CustAccount).AutoCancel)
        {
            // The references will be deleted by delete action when deleting the sales lines
            while select forupdate suppItemSalesLine
                where suppItemSalesLine.SalesId == this.SalesId
                exists join supplementarySalesLineRef
                    where supplementarySalesLineRef.SuppSalesLine == suppItemSalesLine.RecId
                        && supplementarySalesLineRef.SourceSalesLine == this.RecId
            {
                suppItemSalesLine.delete();
            }
        }
        else
        {
            SupplementarySalesLineRef::deleteSuppRef(this.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSourceDocumentLine</Name>
				<Source><![CDATA[
    private void deleteSourceDocumentLine()
    {
        if (this.SourceDocumentLine)
        {
            SourceDocumentLine sourceDocumentLineToDelete;

            if (SalesLineDeleteSourceDocumentLineFlight::instance().isEnabled())
            {
                sourceDocumentLineToDelete.skipDataMethods(true);
                sourceDocumentLineToDelete.skipBusinessEvents(true);
                sourceDocumentLineToDelete.skipEvents(true);
            }

            delete_from sourceDocumentLineToDelete
                where sourceDocumentLineToDelete.RecId == this.SourceDocumentLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete(Common childBuffer = null, boolean updateOrderLineOfDeliverySchedule = true)
    {
        #ISOCountryRegionCodes

        InventInventoryDataServiceSoftReservationHelper::checkSoftReservationForDelete(this);

        if (!updateOrderLineOfDeliverySchedule)
        {
            // The _updateOrderLineOfDeliverySchedule parameter is replaced by the deleteWithoutUpdatingDeliveryScheduleLines method.
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (this.isTmp())
        {
            this.doDelete();
            return;
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        NoYes skipDeliveryScheduleUpdate = this.SkipDeliveryScheduleUpdate;

        if (this.CreditNoteInternalRef_PL && !SalesLine::findRecId(this.RecId))
        {
            return;
        }

        SalesOrderInstrumentationActivities salesOrderActivities = SalesLine::instrumentationLogger().salesOrderActivities();
        
        using (var activityContext = salesOrderActivities.delete(this))
        {
            SalesTable salesTable = this.salesTable(true);

            SalesLineType salesLineType = this.type(salesTable);
        
            salesLineType.deleting();

            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

            if (countryRegion_RU)
            {
                if (this.AssetId_RU && this.SalesStatus != SalesStatus::Invoiced && ! this.creditNoteLine() &&
                    RAssetTable::find(this.AssetId_RU).Status == RAssetStatus::SoldInvoice)
                {
                    RAssetTable::updateStatus(this.AssetId_RU, RAssetStatus::Open);
                    RAssetTable::updateCustInfo(this.AssetId_RU, '', '');
                }
            }

            if (salesLineType.orderEntryStatistics())
            {
                if (this.SalesStatus == SalesStatus::None || this.SalesStatus == SalesStatus::Backorder || this.SalesStatus == SalesStatus::Canceled)
                {
                    if (this.SalesType == SalesType::Sales || this.SalesType == SalesType::ReturnItem)
                    {
                        SalesOrderEntryStatistics::deleteOrderEntry(this);
                    }
                }
            }

            if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
                &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
            {
                salesLineType.interCompanyDelete();
            }

            LedgerCov::deleteTransact(this.TableId, this.RecId);

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
                && RetailSalesTable::find(this.SalesId).RetailChannel)
            {
                RetailKitAssemblyOrder::deleteSalesLineAssemblyOrder(this);
            }

            if (this.isStocked())
            {
                // Update inventory will also take care of updating the project commitments for stocked item.
                salesLineType.updateInventoryOnDelete(childBuffer);
            }
            else
            {
                if (this.ProjId && this.ItemId)
                {
                    // Manually update project commitments for non-stocked item.
                    InventUpd_DeleteMovement inventUpdForProjCommitments = InventUpd_DeleteMovement::newMovement(InventMovement::construct(this, InventMovSubType::None, childBuffer));
                    if (inventUpdForProjCommitments)
                    {
                        inventUpdForProjCommitments.updateCostCommitments();
                    }
                }

                if (this.SalesQty < 0)
                {
                    // Delete the pending registration records for the purchase line.
                    salesLineType.deletePendingRegistrationsNonStocked();
                }
            }

            if (SalesParameters::find().CancelSales == NoYes::Yes
            &&  this.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
            {
                SalesLineDelete::createFromSalesLine(this);
            }

            if (this.mustDeletePurchLine())
            {
                salesLineType.deletePurchLine(this);
            }

            if (this.MatchingAgreementLine)
            {
                this.unLinkAgreementLine();
            }

            if (salesLineType is salesLineType_ProjectItemReq)
            {
                this.detachLinkWithLocalEstimates(this.RecId);
            }

            this.reread();

            // When the parameter TaxAdjustmentInReturn is on, for return order and credit note line, remove the adjustment before deleting.
            if (CustParameters::find().TaxAdjustmentInReturn
                && this.creditNoteLine()
                && (TaxWorkRegulation::exist(tableNum(SalesTable), this.salesTable().RecId)
                    || TaxWorkRegulation::exist(tableNum(SalesLine), this.RecId)))
            {
                TaxRegulation::adjustTaxInvoiceV2(this, this.SalesQty, 0);
            }

            salesOrderActivities.logSalesOrderLine(activityContext, salesTable, this);

            this.deleteSourceDocumentLine();

            super();

            salesTable.reread(); //Reread the record from DB to prevent update conflict

            this.updateSalesTableOnSalesLineDeleted(salesTable);

            salesTable.updateBackStatus();

            salesTable.updateSalesLineDelete();

            if (this.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                if (!skipDeliveryScheduleUpdate)
                {
                    salesLineType.updateOrderLineOfDeliverySchedule();
                }

                SalesDeliverySchedule salesDeliverySchedule;

                delete_from salesDeliverySchedule
                    where salesDeliverySchedule.DeliveryLine == this.InventTransId;
            }

            ReqEventProcessKanban reqEventProcessKanban = ReqEventProcessKanban::newStandard(this);
            reqEventProcessKanban.parmActionMode(ReqEventProcessAction::Delete);
            reqEventProcessKanban.runOperation();

            if (this.CreditNoteInternalRef_PL)
            {
                SalesLine linkedSalesLine;
            
                select firstonly forupdate linkedSalesLine
                    where linkedSalesLine.SalesId                  == this.SalesId &&
                          linkedSalesLine.CreditNoteInternalRef_PL == this.CreditNoteInternalRef_PL;

                if (linkedSalesLine)
                {
                    linkedSalesLine.delete();
                }
            }

            this.deleteSupplementarySalesLines();

            // Delete any line order events when a line is deleted.
            this.mcrDeleteOrderLineEvents();

            if (WHSInventEnabled::exist(this.ItemId) || TMSInventEnabled::exist(this.ItemId))
            {
                using (var parameters = WHSSetSalesOrderReleasedStatusParameters::newLineDeleted(this))
                {
                    SalesTable::setSalesOrderReleasedStatus(this.SalesId);
                }
            }

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }

            salesLineType.deleteTaxUncommitted();

            if (salesLineType.mustConfirmDates(SalesConfirmDatesUIStrategy::construct()))
            {
                InventUpdateOnhandGlobal::instance().inventUpdateOnhand().insertInventSumLogTTS();
                ReqTransUpdate reqTransUpdate = ReqTransUpdate::newItemId(this.ItemId);
                reqTransUpdate.filterByRefIdAndExcludeType(this.SalesId, InventTransType::Sales);
                reqTransUpdate.run();
            }

            salesLineType.deleted();
            activityContext.addCustomProperty(SalesOrderInstrumentationActivities::SalesId, this.SalesId);
            activityContext.addCustomProperty(tableStr(CompanyInfo), int642str(CompanyInfo::current()));

            //Reset header status if there are no open lines.
            if (SalesLineNoOpenLineUpdateReturnOrderStatusFlight::instance().isEnabled()
                && this.SalesType == SalesType::ReturnItem
                && salesTable.ReturnStatus != ReturnStatusHeader::None 
                && !this.returnExistMoreOpenLines())
            {
                salesTable.returnChangeStatus(ReturnStatusHeader::Created);
            }
        }

        // If deleting sales line is the refund record created for external gift card payment.
        // Then delete the sales line reference from <c>MCRCustPaymTable</c> payment record.
        MCRCustPaymTable::removeSalesLineReference(this.RecId);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableOnSalesLineDeleted</Name>
				<Source><![CDATA[
    private void updateSalesTableOnSalesLineDeleted(SalesTable _salesTable)
    {
        #OCCRetryCount

        try
        {
            this.setSalesTableMpsCTPStatusOnSalesLineDeleted(_salesTable);
            this.updateSalesTable(_salesTable);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0
                || SalesLineUpdateSalesTableRetryWhenUpdateConflictFlight::instance().isEnabled())
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    _salesTable.reread();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableOnSalesLineUpdate</Name>
				<Source><![CDATA[
    private void updateSalesTableOnSalesLineUpdate(SalesTable _salesTable)
    {
        #OCCRetryCount

        try
        {
            this.updateSalesTable(_salesTable);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0
                || SalesLineUpdateSalesTableRetryWhenUpdateConflictFlight::instance().isEnabled())
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    _salesTable.reread();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeletePurchLine</Name>
				<Source><![CDATA[
    private boolean mustDeletePurchLine()
    {
        return this.SkipUpdate   != InterCompanySkipUpdate::Internal
            &&  this.SkipUpdate   != InterCompanySkipUpdate::Both
            && (this.DeliveryType == TradeLineDlvType::DropShip
                || this.interCompanySalesLineExist()
                || (this.referencedPurchLine().RecId
                    &&  SalesParameters::find().SalesOrderLineDeletionPolicy == SalesOrderLineDeletionPolicy::DeleteReferencedOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWithoutUpdatingDeliveryScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the sales order line without updating associated delivery schedule lines.
    /// </summary>
    /// <remarks>
    /// When calling this method, it is the responsibility of the caller to update the order line.
    /// This is typically done when updating multiple delivery lines in a single transaction and the order line recalculation is performed only once.
    /// </remarks>
    public void deleteWithoutUpdatingDeliveryScheduleLines()
    {
        try
        {
            this.SkipDeliveryScheduleUpdate = NoYes::Yes;

            this.delete();
        }
        finally
        {
            this.SkipDeliveryScheduleUpdate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the <c>inventTrans</c> related to the current <c>salesLine</c> if order operation is configured to do not create inventory transactions.
    /// </summary>
    public void deleteInventTrans_BR()
    {
        if (!this.salesTable().createInventTrans_BR())
        {
            InventUpd_DeleteMovement::newMovement(InventMovement::construct(this, InventMovSubType::None, this)).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes unused kanbans that are pegged by the sales order line.
    /// </summary>
    public void deleteUnusedKanbans()
    {
        using(var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().deleteKanbans(this))
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing)))
            {
                // Delete kanbans that were created for, and not used by the sales line
                if ((this.SalesStatus == SalesStatus::Delivered || this.SalesStatus == SalesStatus::Invoiced || this.SalesStatus == SalesStatus::Canceled)
                    && this.RemainInventPhysical == 0
                    && !this.returnItem()
                    && this.isStocked())
                {
                    ReqEventProcessDeleteUnusedKanban::newStandard().run(this);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotal</Name>
				<Source><![CDATA[
    public display SalesQty deliveredInTotal()
    {
        return this.type(this.salesTable()).deliveredInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotalServer</Name>
				<Source><![CDATA[
    [SysObsolete('use deliveredInTotal() instead.', false, 30\11\2017)]
    SalesQty deliveredInTotalServer(
        SalesTable _salesTable = this.salesTable()
    )
    {
        return this.type(_salesTable).deliveredInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInventInTotal</Name>
				<Source><![CDATA[
    public display InventQty    deliveredInventInTotal()
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty;

        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }
        inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
        inventQty = -(inventTransIdSum.physical() + inventTransIdSum.financial());
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCNPJCPFNUM_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery CNPJ or CPF for the current record.
    /// </summary>
    /// <returns>
    /// Returns the CNPJ or CPF of the customer if the address is a primary address.
    /// Returns the CNPJ or CPF related to delivery <c>logisticsPostalAddress</c> if the address is not a primary address.
    /// </returns>
    public display CNPJCPFNum_BR deliveryCNPJCPFNUM_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        dirPartyLocation = DirPartyLocation::findByPartyLocation(CustTable::find(this.CustAccount).Party, this.deliveryLocation());

        if (!dirPartyLocation.RecId ||  dirPartyLocation.IsPrimary)
        {
            return CustTable::find(this.CustAccount).cnpjcpfNum_BR;
        }
        else
        {
            return (select cnpjcpfNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == this.deliveryLocation()).cnpjcpfNum_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    public display SalesShippingDate deliveryDate(SalesShippingDate _blankDate = InventOrderEntryDeadlineTable::effectiveOrderDate('',''))
    {
        SalesTable  salesTable;

        if (this.ShippingDateConfirmed)
        {
            return this.ShippingDateConfirmed;
        }

        salesTable = this.salesTable();
        if (salesTable.ShippingDateConfirmed)
        {
            return salesTable.ShippingDateConfirmed;
        }
        if (this.ShippingDateRequested)
        {
            return this.ShippingDateRequested;
        }
        if (salesTable.ShippingDateRequested)
        {
            return salesTable.ShippingDateRequested;
        }
        return _blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the <c>Quantity</c> field as a sum of the <c>Quantity</c> fields on all the delivery
    /// lines and Delivery dates and as a minimum of corresponding dates on delivery lines.
    /// </summary>
    /// <param name="_resetPrice">
    /// A Boolean value indicates whether the price should be recalculated.
    /// </param>
    /// <remarks>
    /// If the <c>Quantity</c> field has to be changed and the line does not have an agreement reference,
    /// it resets the commercial attributes by looking for trade agreements.
    /// </remarks>
    public void recalculateDeliveryScheduleOrderLine(boolean _resetPrice)
    {
        this.type().recalculateDeliveryScheduleOrderLine(this.orig(), _resetPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateRequestedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the requested shipping date and the requested receipt date of this sales line record.
    /// Note that for derived intercompany lines the confirmed dates are updated instead.
    /// </summary>
    private void recalculateRequestedDates()
    {
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this);

        if (this.isDerivedIntercompanyLine())
        {
            [this.ShippingDateConfirmed, this.ReceiptDateConfirmed] = salesCalcAvailableDlvDates.calcEarliestShipReceiptDates();
        }
        else
        {
            [this.ShippingDateRequested, this.ReceiptDateRequested] = salesCalcAvailableDlvDates.calcEarliestShipReceiptDates();
            this.ReceiptDateConfirmed = dateNull();
            this.ShippingDateConfirmed = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves sales line receipt date.
    /// </summary>
    /// <param name = "_blankDate">A default receipt date.</param>
    /// <returns>A sales line receipt date.</returns>
    public SalesReceiptDate receiptDate(SalesShippingDate _blankDate = InventOrderEntryDeadlineTable::effectiveOrderDate('',''))
    {
        SalesTable  salesTable;

        if (this.ReceiptDateConfirmed)
        {
            return this.ReceiptDateConfirmed;
        }

        salesTable = this.salesTable();

        if (salesTable.ReceiptDateConfirmed)
        {
            return salesTable.ReceiptDateConfirmed;
        }

        if (this.ReceiptDateRequested)
        {
            return this.ReceiptDateRequested;
        }

        if (salesTable.ReceiptDateRequested)
        {
            return salesTable.ReceiptDateRequested;
        }

        return _blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryIENum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery IE for the current record.
    /// </summary>
    /// <returns>
    /// Returns the IE of the customer if the address is a primary address.
    /// Returns the IE related to delivery <c>logisticsPostalAddress</c> if the address is not a primary address.
    /// </returns>
    public display IENum_BR deliveryIENum_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        dirPartyLocation = DirPartyLocation::findByPartyLocation(CustTable::find(this.CustAccount).Party, this.deliveryLocation());

        if (!dirPartyLocation.RecId || dirPartyLocation.IsPrimary)
        {
            return CustTable::find(this.CustAccount).ieNum_BR;
        }
        else
        {
            return (select ieNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == this.deliveryLocation()).ieNum_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTerm</Name>
				<Source><![CDATA[
    public DlvTermId  deliveryTerm()
    {
        return this.salesTable().DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTransDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the delivery date at midnight in the time zone of the site on the sales order line.
    /// </summary>
    /// <returns>
    ///    Delivery date and time in UTC when it is midnight on the delivery date on the site on the sales order line.
    /// </returns>
    public TransDateTime deliveryTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.deliveryDate(), 0, this.timeZoneSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public DiscAmount discAmount()
    {
        return PriceDisc::discAmount(SalesParameters::find().Disc, this.LineDisc, this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPct_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the actual discount percentage should be changed by <c>SuframaDiscount_BR</c> field value
    /// </summary>
    /// <param name="_discPct">
    /// The discount to be checked
    /// </param>
    /// <returns>
    /// The discount in percentage.
    /// </returns>
    public DiscPct discPct_BR(DiscPct _discPct)
    {
        return PriceDisc::discPercent(LineMultiLn::LineTimesMultiLn, _discPct, this.salesLine_BR().SuframaDiscount_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the discount percentage.
    /// </summary>
    /// <returns>
    /// The discount percentage.
    /// </returns>
    public display DiscPct discPercent()
    {
        DiscPct discPct = PriceDisc::discPercent(SalesParameters::find().Disc, this.LinePercent, this.MultiLnPercent);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            return this.discPct_BR(discPct);
        }
        // </GBR>

        return discPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReCalcPricesFromBasePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user who has a dialog box whether they wants to recalculate prices, depending on trade
    /// agreements.
    /// </summary>
    /// <returns>
    /// true if the user clicks yes in the prompt box; otherwise, false.
    /// </returns>
    public boolean doReCalcPricesFromBasePrompt()
    {
        // Run the price discount policy dialog in order to let the user determine which agreement values to recalculate.
        return PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPriceAndDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the price and discounts should be reset.
    /// </summary>
    /// <returns>true if the price and discounts should be reset; otherwise false.</returns>
    protected boolean mustResetPriceAndDiscounts()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProductDimensionsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item directions on the line can be edited.
    /// </summary>
    /// <returns>
    /// true for order lines without delivery lines; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean editProductDimensionsAllowed()
    {
        return this.salesPurchLineInterface().editProductDimensionsAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets a reason code.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason code of a <c>ReasonTableRef</c> record.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        RefRecId        originalReasonRefRecID;
        FormDataSource  formSalesLine;

        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CreditNoteReasonCode == 0)
            {
                this.CreditNoteReasonCode = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode != '')
                {
                    //
                    //The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparison.
                    //
                    originalReasonRefRecID = this.CreditNoteReasonCode;
                    this.CreditNoteReasonCode = ReasonTableRef::updateCode(reasonCode, this.CreditNoteReasonCode);

                    if (this.CreditNoteReasonCode == originalReasonRefRecID)
                    {
                        //
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        //
                        formSalesLine = FormDataUtil::getFormDataSource(this);
                        if (formSalesLine)
                        {
                            formSalesLine.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.CreditNoteReasonCode = ReasonTableRef::updateCode(reasonCode, this.CreditNoteReasonCode);
                }
            }

            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.
            //
            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.CreditNoteReasonCode).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason comment of a <c>ReasonTableRef</c> record.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
    {
        ReasonComment   reasonComment = _reasonComment;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CreditNoteReasonCode == 0)
            {
                this.CreditNoteReasonCode = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.CreditNoteReasonCode = ReasonTableRef::updateComment(reasonComment, this.CreditNoteReasonCode);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.CreditNoteReasonCode).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectiveSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the effective sales price.
    /// </summary>
    /// <returns>
    ///     The effective sales price.
    /// </returns>
    /// <remarks>
    ///     The effective sales price is the sales price on the sales order unless attribute based pricing is in effect. In that case, the effective sales price is the adjusted unit price.
    /// </remarks>
    public SalesPrice effectiveSalesPrice()
    {
        SalesPrice effectiveSalesPrice = this.pdsCalculatedUnitPrice();

        if (!effectiveSalesPrice)
        {
            effectiveSalesPrice = this.SalesPrice;
        }

        return effectiveSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventNotificationUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales order line responsible user ID that is used for notification.
    /// </summary>
    /// <returns>
    /// A string value that represents a user ID.
    /// </returns>
    public UserId eventNotificationUserId()
    {
        return this.type().eventNotificationUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpandedBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an expanded BOM line.
    /// </summary>
    /// <param name = "_salesLine">
    ///     The sales line record to create the expanded BOM line on.
    /// </param>
    /// <param name = "_salesTable">
    ///     The sales order header.
    /// </param>
    /// <param name = "_tmpBOM">
    ///     The BOM to expand.
    /// </param>
    /// <param name = "_bomCalcData">
    ///     The BOM calculation data.
    /// </param>
    /// <param name = "_routeNum">
    ///     The <c>Route</c> number.
    /// </param>
    protected void createExpandedBOMLine(
        SalesLine   _salesLine,
        SalesTable  _salesTable,
        BOM         _tmpBOM,
        BOMCalcData _bomCalcData,
        RouteId     _routeNum)
    {
        this.initExpandedBOMLine(_salesLine, _salesTable, _tmpBOM, _bomCalcData, _routeNum);
        
        // Skip credit limit check here - it will be done once all lines are created.
        _salesLine.createLine(true, false, false, false, true, true, false, true, false, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpandedBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes an expanded BOM line.
    /// </summary>
    /// <param name = "_salesLine">
    ///     The sales line record to initialize the expanded BOM line on.
    /// </param>
    /// <param name = "_salesTable">
    ///     The sales order header.
    /// </param>
    /// <param name = "_tmpBOM">
    ///     The BOM to expand.
    /// </param>
    /// <param name = "_bomCalcData">
    ///     The BOM calculation data.
    /// </param>
    /// <param name = "_routeNum">
    ///     The <c>Route</c> number.
    /// </param>
    protected void initExpandedBOMLine(
        SalesLine   _salesLine,
        SalesTable  _salesTable,
        BOM         _tmpBOM,
        BOMCalcData _bomCalcData,
        RouteId     _routeNum)
    {
        _salesLine.initFromSalesTable(_salesTable);
        _salesLine.initFromBOM(_tmpBOM, this);
        _salesLine.setAddressFromSalesLine(this);

        _salesLine.QtyOrdered = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_tmpBOM.ItemId,
                                                                                                      _tmpBOM.InventDimId,
                                                                                                      BOMCalcConsumption::construct(_tmpBOM.Formula, _bomCalcData).calcConsumption(_tmpBOM, Route::accError(_routeNum, _tmpBOM.OprNum)),
                                                                                                      _tmpBOM.UnitId,
                                                                                                      _salesLine.inventTable().inventUnitId(),
                                                                                                      NoYes::Yes);

        _salesLine.SalesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_tmpBOM.ItemId,
                                                                                                    _tmpBOM.InventDimId,
                                                                                                    _salesLine.QtyOrdered,
                                                                                                    _salesLine.inventTable().inventUnitId(),
                                                                                                    _salesLine.SalesUnit,
                                                                                                    NoYes::Yes);
        if (PdsGlobal::pdsIsCWItem(_tmpBOM.ItemId))
        {
            _salesLine.PdsCWQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_tmpBOM.ItemId,
                                                                                                    _tmpBOM.InventDimId,
                                                                                                    _salesLine.SalesQty,
                                                                                                    _salesLine.SalesUnit,
                                                                                                    _salesLine.pdsCWUnitId(),
                                                                                                    NoYes::Yes);
        }

        SalesAlternativeItem salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(_salesLine);

        if (salesAlternativeItem.existAlternativeItem())
        {
            _salesLine.setAlternativeItem(salesAlternativeItem, true);
        }

        _salesLine.ActivityNumber = this.ActivityNumber;
        if (!_salesLine.ProjCategoryId)
        {
            _salesLine.ProjCategoryId = this.ProjCategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBOM</Name>
				<Source><![CDATA[
    void  expandBOM(TmpFrmVirtual  _tmpFrmVirtual, BOM _tmpBOM)
    {
        SalesLine   salesLine;
        int         lineCount   = 0;

        #ISOCountryRegionCodes

        ttsbegin;

        SalesTable  salesTable  = this.salesTable();
        InventTable inventTable = this.inventTable();
        Label       label       = new Label(salesTable.LanguageId);
        BOMCalcData bomCalcData = BOMCalcData::newInventTable(this.QtyOrdered, inventTable);
        RouteId     routeNum    = inventTable.routeId(salesTable.DeliveryDate, this.QtyOrdered, this.inventDim());


        while select _tmpFrmVirtual
        {
            salesLine.clear();
            salesLine.SalesId = this.SalesId;
            select _tmpBOM where _tmpBOM.RecId == _tmpFrmVirtual.RecordNo;

            if (_tmpBOM)
            {
                using (var context = EcoResProductForceInitDimensionDefaultingContext::construct())
                {
                    this.createExpandedBOMLine(salesLine, salesTable, _tmpBOM, bomCalcData, routeNum);
                }

                if (salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                {
                    SalesCalcAvailableDlvDates::initDateFields(this);
                    if (this.ShippingDateConfirmed || this.ReceiptDateConfirmed)
                    {
                        if (salesLine.ShippingDateConfirmed > this.ShippingDateConfirmed ||
                           salesLine.ReceiptDateConfirmed  > this.ReceiptDateConfirmed)
                        {
                            salesLine.DeliveryDateControlType = SalesDeliveryDateControlType::None;
                            checkFailed(strFmt("@SYS88261",salesLine.ItemId,salesLine.InventTransId));
                        }
                    }
                    else
                    {
                        if (salesLine.ShippingDateRequested > this.ShippingDateRequested ||
                            salesLine.ReceiptDateRequested  > this.ReceiptDateRequested)
                        {
                            salesLine.DeliveryDateControlType = SalesDeliveryDateControlType::None;
                            checkFailed(strFmt("@SYS88261",salesLine.ItemId,salesLine.InventTransId));
                        }
                    }
                }

                salesLine.ShippingDateConfirmed = this.ShippingDateConfirmed;
                salesLine.ShippingDateRequested = this.ShippingDateRequested;
                salesLine.ReceiptDateConfirmed  = this.ReceiptDateConfirmed;
                salesLine.ReceiptDateRequested  = this.ReceiptDateRequested;

                lineCount ++;
                salesLine.LineNum       = this.LineNum + 0.001 * lineCount;
                salesLine.LineHeader    = strFmt(label.extractString(literalStr("@SYS25825")), inventTable.defaultProductName());
                salesLine.write();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    TaxServiceTariff::insertTaxServiceTariffForNewParent(salesTable.TableId, salesTable.RecId, salesLine.TableId, salesLine.RecId);
                }
            }
        }

        // Finally DO credit limit check here for all lines at once.
        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }

        if (lineCount)
        {
            this.resetInvent();
            
            if (this.InterCompanyInventTransId)
            {
                changecompany(this.salesTable().InterCompanyCompanyId)
                {
                    PurchLine purchLine = PurchLine::findInventTransId(this.InterCompanyInventTransId);
                    if (purchLine.InterCompanyInventTransId
                        && purchLine.ItemRefType == InventRefType::Sales
                        && purchLine.InventRefTransId)
                    {
                        SalesLine origICSalesLine = SalesLine::findInventTransId(purchLine.InventRefTransId, true);
                        origICSalesLine.resetInventoryAmounts();
                        origICSalesLine.doUpdate();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a field in a <c>SalesLine</c> buffer is changed.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to investigate.
    /// </param>
    /// <returns>
    /// true if the field value is changed in relation; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used in intercompany scenarios for validating whether a field has changed and
    /// whether it must be synchronized to the relating intercompany order line.
    /// </remarks>
    public boolean  fieldChanged(FieldId  _fieldId)
    {
        boolean  ok = false;

        if (!this.RecId)
        {
            ok = true;
        }

        if (this.orig().(_fieldId) != this.(_fieldId))
        {
            ok = true;
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery entity record that is based on the postal address.
    /// </summary>
    /// <returns>
    /// A <c>CustTable</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossVolumePerItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the gross volume per item for the specified <c>SalesLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Volume</c> value that is the gross volume per item on the line.
    /// </returns>
    public Volume getGrossVolumePerItem()
    {
        InventTable         inventTable;
        InventTableModule   inventTableModule;
        Volume              grossVolume;

        if (this.isStocked())
        {
            grossVolume = this.inventTable().grossVolume();
        }
        else
        {
            if (!this.isCategoryBased())
            {
                //Volume of non-stocked item is derived from the volume defined on InventTable, by converting the UnitOfMeasure defined on the sales Line to the UnitOfMeasure defined on InventTable
                inventTable         = this.inventTable();
                inventTableModule   = inventTable.inventTableModuleSales();

                if (this.SalesUnit && inventTableModule.UnitId && this.SalesUnit != inventTableModule.UnitId)
                {
                    grossVolume = inventTable.grossVolume() * this.unitConvertSales2Invent(1);
                }
                else
                {
                    grossVolume = inventTable.grossVolume();
                }
            }
        }
        return grossVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossWeightPerItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the gross weight per item for the specified <c>SalesLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Weight</c> value that is the gross weight per item on the line.
    /// </returns>
    public Weight getGrossWeightPerItem()
    {
        InventTable         inventTable;
        InventTableModule   inventTableModule;
        Weight              grossWeight;

        if (this.isStocked())
        {
            grossWeight = this.inventTable().grossWeight();
        }
        else
        {
            if (this.isCategoryBased())
            {
                grossWeight = SalesLineForeignTradeCategory::findSalesLine(this).UnitWeight;
            }
            else
            {
                //Weight of non-stocked item is derived from the weight defined on InventTable, by converting the UnitOfMeasure defined on the sales Line to the UnitOfMeasure defined on InventTable
                inventTable         = this.inventTable();
                inventTableModule   = inventTable.inventTableModuleSales();

                if (this.SalesUnit && inventTableModule.UnitId && this.SalesUnit != inventTableModule.UnitId)
                {
                    grossWeight = inventTable.grossWeight() * this.unitConvertSales2Invent(1);
                }
                else
                {
                    grossWeight = inventTable.grossWeight();
                }
            }
        }
        return grossWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getICMSSTTaxationCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds taxation code of ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// Taxation code of ICMS-ST tax.
    /// </returns>
    public TaxationCode_BR getICMSSTTaxationCode_BR()
    {
        boolean icmsOverrideICMSSTTaxationCode = BrazilParameters::find().ICMSOverrideICMSSTTaxationCode == NoYes::Yes;
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMSST);

        if (taxOnItem.TaxationCodeTable_BR && icmsOverrideICMSSTTaxationCode)
        {
            taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMSST);
        }

        TaxationCode_BR taxationCode = TaxationCodeTable_BR::findRecId(taxOnItem.TaxationCodeTable_BR).TaxationCode;

        return taxationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN()
    {
        return this.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the quantity to be put into the field <c>PurchQty</c> for creating a new <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    ///     A <c>Qty</c> value.
    /// </returns>
    public Qty getPurchQty()
    {
        if (this.returnItem())
        {
            return this.ExpectedRetQty;
        }
        else
        {
            return this.RemainSalesPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransGoodsInRoute_RU</Name>
				<Source><![CDATA[
    public boolean hasInventTransGoodsInRoute_RU()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select firstonly RecId from inventTrans
            where inventTrans.InventTransOriginTransit_RU
        exists join inventTransOrigin
            where inventTransOrigin.RecId           == inventTrans.InventTransOrigin &&
                  inventTransOrigin.InventTransId   == this.InventTransId;

        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransToDelivery_RU</Name>
				<Source><![CDATA[
    public boolean hasInventTransToDelivery_RU()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select firstonly RecId from inventTrans
            where inventTrans.StatusIssue   == StatusIssue::Deducted
               && inventTrans.StatusReceipt == StatusReceipt::None
        exists join inventTransOrigin
            where inventTransOrigin.InventTransId     == this.InventTransId
               && inventTransOrigin.RecId             == inventTrans.InventTransOriginSales_RU
               && inventTransOrigin.ReferenceCategory == InventTransType::Sales
               && inventTransOrigin.ReferenceId       == this.SalesId;

        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    public boolean hasOnlyLineAmount()
    {
        return this.PriceDiscLine::hasOnlyLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any price discount policies exist for a <c>SalesLine</c> record.
    /// </summary>
    /// <returns>
    /// true if price discount policies exist; otherwise, false.
    /// </returns>
    public boolean hasPriceDiscChangePolicy()
    {
        return this.type().hasPriceDiscChangePolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBarcode</Name>
				<Source><![CDATA[
    void initBarcode(InventDim _inventDim = this.inventDim())
    {
        if (SalesLineCreationPolicy::newFromSalesOrderCreationMethod(this.SalesSalesOrderCreationMethod).mustInitBarcode())
        {
            InventItemBarcode   inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(this.ItemId, _inventDim, '', this.SalesUnit);

            if (!inventItemBarcode.RecId)
            {
                inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(this.ItemId, _inventDim);
            }

            this.BarCode        = inventItemBarcode.ItemBarCode;
            this.BarCodeType    = inventItemBarcode.BarcodeSetupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDropShipAndInstallmentEligible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the drop ship parameters and installment eligible for <c>SalesLine</c> based on the given item table.
    /// </summary>
    /// <param name="_inventTable">
    ///     The <c>InventTable</c> buffer to initialize from.
    /// </param>
    public void initDropShipAndInstallmentEligible(InventTable _inventTable)
    {
        MCRInventTable mcrInventTable;
        MCRSalesLine   mcrSalesLine;
        MCRSalesLineDropShipment mcrSalesLineDropShipment;

        select firstonly DropShipment, InstallmentEligible from mcrInventTable
            where mcrInventTable.InventTable == _inventTable.RecId;

        // Load the drop ship parameters.
        if (mcrInventTable.DropShipment)
        {
            this.initDefaultDropShipmentFields();
            mcrSalesLineDropShipment = this.mcrSalesLineDropShipment();
            if (this.shouldInitDefaultDropShipmentFields())
            {
                mcrSalesLineDropShipment.DropShipment    = NoYes::Yes;
                mcrSalesLineDropShipment.DropShipStatus  = MCRDropShipStatus::ToBeDropShipped;
            }
            this.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
        }
        else if (SalesLineAlternativeItemDeliveryTypeFlight::instance().isEnabled())
        {
            mcrSalesLineDropShipment = this.mcrSalesLineDropShipment();
            mcrSalesLineDropShipment.DropShipment    = NoYes::No;
            mcrSalesLineDropShipment.DropShipStatus  = MCRDropShipStatus::None;
            mcrSalesLineDropShipment.DropShipComment = '';
        }

        mcrSalesLine = this.mcrSalesLine();

        // Set installment eligibility based on the invent table.  Only pack if different.
        if (mcrInventTable.InstallmentEligible != mcrSalesLine.InstallmentEligible)
        {
            mcrSalesLine.InstallmentEligible = mcrInventTable.InstallmentEligible;
            this.mcrPackMCRSalesLine(mcrSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitDefaultDropShipmentFields</Name>
				<Source><![CDATA[
    protected boolean shouldInitDefaultDropShipmentFields()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDropShipmentFields</Name>
				<Source><![CDATA[
    [Hookable(false)]    
    internal void initDefaultDropShipmentFields()
    {
        if (this.shouldInitDefaultDropShipmentFields())
        {
            this.defaultField(fieldNum(SalesLine, DeliveryType));
            this.defaultField(fieldNum(SalesLine, SourcingVendAccount));
            this.defaultField(fieldNum(SalesLine, SourcingOrigin));
            this.defaultField(fieldNum(SalesLine, SourcingCompanyId));
            this.defaultField(fieldNum(SalesLine, SourcingInventSiteId));
            this.defaultField(fieldNum(SalesLine, SourcingInventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a fiscal document type reference for this sales line.
    /// </summary>
    /// <param name="_inventDim">
    /// Inventory dimension
    /// </param>
    /// <param name="_inventTable">
    /// Item details
    /// </param>
    public void initFiscalDocumentType_BR(InventDim _inventDim = this.inventDim(), InventTable _inventTable = this.inventTable())
    {
        SalesLine_BR salesLine_BR;

        salesLine_BR = this.salesLine_BR();

        salesLine_BR.FiscalDocumentType_BR =
            CustFiscalDocumentType_BR::findFiscalDocumentType(
                this.invoiceAccount(),
                _inventDim.inventSite().fiscalEstablishment(),
                _inventTable.ItemType);

        this.packSalesLine_BR(salesLine_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record from the <c>AgreementLine</c> record.
    /// </summary>
    /// <param name="_agreementLine">
    /// The <c>AgreementLine</c> record from which to initialize the <c>SalesLine</c> record.
    /// </param>
    public void  initFromAgreementLine(AgreementLine _agreementLine)
    {
        this.type().initFromAgreementLine(_agreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    public void  initFromBOM(BOM        _bom,
                             SalesLine  _parentLine)
    {
        InventDim   inventDim;
        InventDim   inventDimBom;

        // <GEERU>
        InventProfileType_RU inventProfileTypeRU;

        #ISOCountryRegionCodes
        // </GEERU>
        if (this.InventDimId)
        {
            inventDim = this.inventDim();
        }

        this.ItemId                 = _bom.ItemId;
        this.ServiceOrderId         = _parentLine.ServiceOrderId;

        if (_bom.ItemBOMId)
        {
            this.ItemBOMId          = _bom.ItemBOMId;
        }

        inventDimBom = _bom.inventDim();
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, inventDimBom, inventDim);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)) &&
                ! inventDim.InventProfileId_RU)
            {
                if (! inventDim.InventProfileId_RU)
                {
                    inventDim.InventProfileId_RU = _bom.inventDim().InventProfileId_RU;
                }

                if (! inventDim.InventProfileId_RU)
                {
                    inventDim.InventProfileId_RU = BOMParameters::find().InventProfileId_RU;
                }

                inventProfileTypeRU = _parentLine.salesTable().salesTable_RU().InventProfileType_RU;
                if (inventProfileTypeRU && inventProfileTypeRU != inventDim.inventProfile_RU().InventProfileType)
                {
                    throw error(strFmt("@GLS113739",
                                   this.ItemId,
                                   inventDim.InventProfileId_RU,
                                   inventProfileTypeRU));
                }
            }
        }
        // </GEERU>
        inventDim.InventLocationId  = inventDimBom.InventLocationId;
        inventDim.initFromInventLocation(inventDim.inventLocation());
        this.setInventDimIdFromInventDim(inventDim);

        this.initFromInventTable(this.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustConfirmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on an <c>CustConfirmTrans</c> table buffer.
    /// </summary>
    /// <param name="_custConfirmTrans">
    ///    The <c>CustConfirmTrans</c> table buffer that is to be initialized from.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_cwQty">
    ///    A catch weight quantity; optional.
    /// </param>
    public void  initFromCustConfirmTrans(CustConfirmTrans  _custConfirmTrans, boolean _copyPrecisely = true,
                                                                       boolean _copyPriceDisc = true,
                                                                       boolean _copyQty       = true,
                                                                       Qty     _qty           = _custConfirmTrans.Qty,
                                                                       PdsCWInventQty  _cwQty = 0
        )
    {
        SalesLineType  salesLineType;
        PdsCWInventQty  cwQty = _cwQty;

        if (#PdsCatchWeightEnabled && prmisDefault(_cwQty))
        {
            cwQty = _custConfirmTrans.PdsCWQty;
        }
        salesLineType = this.type();
        salesLineType.initFromCustConfirmTrans(_custConfirmTrans, _copyPrecisely, _copyPriceDisc, _copyQty, _qty, _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustExternalItemDescription</Name>
				<Source><![CDATA[
    public void initFromCustExternalItemDescription(InventDim _inventDim = this.inventDim())
    {
        CustExternalItemDescription custExternalItemDescription = this.salesTable().instantiateCustExternalItemDescription(this.ItemId, _inventDim);

        if (custExternalItemDescription.findExternalDescription())
        {
            this.ExternalItemId = custExternalItemDescription.externalItemId();
            if (custExternalItemDescription.externalItemFreeTxt())
            {
                if (CustFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name =  custExternalItemDescription.externalItemFreeTxt();
                }
                else
                {
                    this.initName(this.inventTable());
                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += custExternalItemDescription.externalItemFreeTxt();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoice4PaymTrans_RU</Name>
				<Source><![CDATA[
    public void initFromCustInvoice4PaymTrans_RU(
        CustInvoice4PaymTrans_RU _custInvoice4PaymTrans,
        boolean                  _copyPrecisely = true,
        boolean                  _copyPriceDisc = true,
        boolean                  _copyQty       = true,
        Qty                      _qty           = _custInvoice4PaymTrans.Qty,
        PdsCWInventQty           _pdsCWQty      = _custInvoice4PaymTrans.PdsCWQty
        )
    {
        this.type().initFromCustInvoice4PaymTrans_RU(_custInvoice4PaymTrans,
                                                     _copyPrecisely,
                                                     _copyPriceDisc,
                                                     _copyQty,
                                                     _qty,
                                                     _pdsCWQty
                                                     );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on an <c>CustInvoiceTrans</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    ///    The <c>CustInvoiceTrans</c> table buffer that is to be initialized from.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_pdsCWQty">
    ///    A catch weight quantity; optional.
    /// </param>
    public void  initFromCustInvoiceTrans(CustInvoiceTrans  _custInvoiceTrans, boolean _copyPrecisely = true,
                                                                               boolean _copyPriceDisc = true,
                                                                               boolean _copyQty       = true,
                                                                               Qty     _qty           = _custInvoiceTrans.Qty,
                                                                               PdsCWInventQty _pdsCWQty = _custInvoiceTrans.PdsCWQty
                                                                                )
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromCustInvoiceTrans(
            _custInvoiceTrans,
            _copyPrecisely,
            _copyPriceDisc,
            _copyQty,
            _qty
            ,
            _pdsCWQty
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on an <c>CustPackingSlipTrans</c> table buffer.
    /// </summary>
    /// <param name="_custPackingSlipTrans">
    ///    The <c>CustPackingSlipTrans</c> table buffer that is to be initialized from.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_cwQty">
    ///    A catch weight quantity; optional.
    /// </param>
    public void  initFromCustPackingSlipTrans(CustPackingSlipTrans _custPackingSlipTrans, boolean _copyPrecisely = true,
                                                                                          boolean _copyPriceDisc = true,
                                                                                          boolean _copyQty       = true,
                                                                                          Qty     _qty           = _custPackingSlipTrans.Qty,
                                                                                          PdsCWInventQty _cwQty  = 0
                                                                                          )
    {
        SalesLineType  salesLineType;
        PdsCWInventQty  cwQty = _cwQty;

        if (#PdsCatchWeightEnabled && prmisDefault(_cwQty))
        {
            cwQty = _custPackingSlipTrans.PdsCWQty;
        }
        salesLineType = this.type();
        salesLineType.initFromCustPackingSlipTrans(_custPackingSlipTrans, _copyPrecisely, _copyPriceDisc, _copyQty, _qty
        ,
        cwQty
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> table buffer that is based on a <c>CustQuotationTrans</c> table
    /// buffer.
    /// </summary>
    /// <param name="_custQuotationTrans">
    /// The <c>CustQuotationTrans</c> table from which to initialize the <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_copyPrecisely">
    /// A Boolean value that indicates whether to exactly copy all of the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    /// A Boolean value that indicates whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    /// A Boolean value that indicates whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    /// A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    /// table buffer to differ from value of the other table buffer; optional.
    /// </param>
    public void  initFromCustQuotationTrans(CustQuotationTrans  _custQuotationTrans, boolean _copyPrecisely = true,
                                                                                     boolean _copyPriceDisc = true,
                                                                                     boolean _copyQty       = true,
                                                                                     Qty     _qty           = _custQuotationTrans.Qty)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromCustQuotationTrans(_custQuotationTrans, _copyPrecisely, _copyPriceDisc, _copyQty, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    public void  initFromCustTable()
    {
        LogisticsLocationEntity location;
        CustTable               custTable = CustTable::find(this.CustAccount);

        this.CustAccount                = custTable.AccountNum;
        this.DeliveryName               = custTable.name();

        location = LogisticsLocationEntity::constructFromLocationRecId(LogisticsLocationDefault::findSimpleDefault(
            custTable, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId);

        this.DeliveryPostalAddress = location.getPostalAddress().RecId;

        this.setTaxGroup(TaxSales::custTaxGroup(custTable.DlvTerm, custTable.TaxGroup));
        this.OverrideSalesTax = custTable.OverrideSalesTax;

        if (location && location.parmLocationRecId())
        {
            this.setLocation(location.parmLocationRecId());
        }

        this.setListCode();
        if (custTable && custTable.TaxWithholdCalculate_TH)
        {
            this.TaxWithholdGroup = custTable.TaxWithholdGroup_TH;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SalesLine</c> based on the given item.
    /// </summary>
    /// <param name="_inventTable">
    ///     The <c>InventTable</c> buffer to initialize from.
    /// </param>
    /// <param name="_resetPrice">
    ///     A Boolean value indicating whether to reset price.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    ///     A Boolean value indicating whether to perform variant validation.
    /// </param>
    public void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, SalesAgreementHeaderRefRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        using(var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().initFromInventTable(this))
        {
            if (!this.RecId)
            {
                SalesPurchLineInterface::flushPriceDiscCache();
            }

            this.initFromReleasedDistinctProduct(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

            if (!RetailStatementFeatureControl::isIgnoreDropShipmentEnabled() || !this.salesTable().isRetailCashAndCarrySales())
            {
                // If the flight is enabled and this is an existing retail line, which has not changed item we should not reset the drop shipment fields.
                if (!RetailDoNotReInitDropShipFlight::instance().isEnabled() ||
                    this.RecId == 0 ||
                    !this.salesTable().isRetailSale() ||
                    this.ItemId != this.orig().ItemId
                )
                {
                    this.initDropShipAndInstallmentEligible(_inventTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemOrCategory</Name>
				<Source><![CDATA[
    public void initFromItemOrCategory(ItemId _itemId, SalesCategory _salesCategory, ItemFreeTxt _name, boolean _searchPriceDisc = true)
    {
        this.type().initFromItemOrCategory(_itemId, _salesCategory, _name, _searchPriceDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a delivery line, depending on the order line.
    /// </summary>
    /// <param name="_salesLine">
    /// The specified order line to use to initialize values.
    /// </param>
    /// <param name="_onlyCommercialAttributes">
    /// A Boolean value that indicates whether only commercial attributes are initialized; optional.
    /// </param>
    /// <remarks>
    /// When the <paramref name="_onlyCommercialAttributes" /> parameter is true it is used to reset
    /// commercial attributes on an existing delivery line. When the <paramref
    /// name="_onlyCommercialAttributes" /> parameter is false it is used to initialize new delivery lines.
    /// </remarks>
    public void initFromOrderLineWithMultipleDeliveries(SalesLine _salesLine, boolean _onlyCommercialAttributes = false)
    {
        if (!_onlyCommercialAttributes)
        {
            this.initFromSalesTable(_salesLine.salesTable());
            this.initFromSalesLine(_salesLine, true, false, false);

            this.SalesUnit               = _salesLine.SalesUnit;
            this.DeliveryDateControlType = _salesLine.DeliveryDateControlType;
            this.ReceiptDateRequested    = _salesLine.ReceiptDateRequested;
            this.ShippingDateRequested   = _salesLine.ShippingDateRequested;
            this.ShippingDateConfirmed   = _salesLine.ShippingDateConfirmed;
            this.ReceiptDateConfirmed    = _salesLine.ReceiptDateConfirmed;
            this.ConfirmedDlv            = _salesLine.ConfirmedDlv;

            this.MatchingAgreementLine   = _salesLine.MatchingAgreementLine;

            this.LineDeliveryType        = LineDeliveryType::DeliveryLine;

            this.InventRefId             = _salesLine.InventRefId;
            this.InventRefTransId        = _salesLine.InventRefTransId;
            this.InventRefType           = _salesLine.InventRefType;
        }

        this.SalesPrice         = _salesLine.SalesPrice;
        this.PriceUnit          = _salesLine.PriceUnit;
        this.LinePercent        = _salesLine.LinePercent;
        this.LineDisc           = _salesLine.LineDisc;
        this.MultiLnDisc        = _salesLine.MultiLnDisc;
        this.MultiLnPercent     = _salesLine.MultiLnPercent;
        this.SalesMarkup        = _salesLine.SalesMarkup;
        this.LineAmount         = this.calcLineAmountForced();

        // <GIN>
        this.updateAndPackAccessableValue_IN();
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    public void initFromPriceDisc(PriceDisc_Price _priceDisc,
        PriceDiscPolicyCheckPolicy _checkPolicy = null,
        boolean _initDateFields = true,
        RetailSalesOrderCalculator _retailCalculator = null)
    {
        using(var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().initFromPriceDisc(this))
        {
            // <GIN>
            SalesLine_IN salesLine_IN;

            if (TaxParameters::checkTaxParameters_IN())
            {
                salesLine_IN = this.salesLine_IN();
                salesLine_IN.MaximumRetailPrice = _priceDisc.maxRetailPrice_IN();
                this.packSalesLine_IN(salesLine_IN);
            }
            // </GIN>

            if (!this.RecId || !this.ShippingDateRequested || !this.ReceiptDateRequested)
            {
                if (!this.ShippingDateRequested)
                {
                    this.ShippingDateRequested = this.salesTable().ShippingDateRequested;
                }

                if (!this.ReceiptDateRequested)
                {
                    this.ReceiptDateRequested = this.salesTable().ReceiptDateRequested;
                }
            }
            if (_initDateFields)
            {
                // Sets the default values for the below fields to make sure that available delivery dates will be calculated correctly.
                // The fields are dependent among them so don't change this order.
                if (!this.RecId)
                {
                    this.initDefaultDropShipmentFields();
                }

                SalesCalcAvailableDlvDates::initDateFields(this,_priceDisc);

                _priceDisc.parmPriceDate(this.priceDate());
            }

            if (this.mustUpdatePrice())
            {
                // Updating price after PriceDate is updated.
                this.salesPurchLineInterface().setPriceDiscPriceUnitMarkup(_priceDisc, _checkPolicy, _retailCalculator);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Indicates whether the price must be updated.
    /// </summary>
    /// <returns>
    ///		A boolean value true, as the price must be updated.
    /// </returns>
    protected boolean mustUpdatePrice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductDimensions</Name>
				<Source><![CDATA[
    public void initFromProductDimensions(InventDim _inventDim = this.inventDim())
    {
        this.initName();
        this.initFromCustExternalItemDescription(_inventDim);
        this.calcPackingUnit(_inventDim);
        this.initBarcode(_inventDim);
        this.initRetailVariantId(_inventDim);
        this.calculateCostPrice(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> table buffer that is based on a <c>ProjInvoiceItem</c> table buffer.
    /// </summary>
    /// <param name="_projInvoiceItem">
    /// The <c>_projInvoiceItem</c> table buffer that will be copied.
    /// </param>
    /// <param name="_copyPrecisely">
    /// A Boolean value that indicates whether to exactly copy all of the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    /// A Boolean value that indicates whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    /// A Boolean value that indicates whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    /// A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    /// table buffer to differ from the value of the other table buffer; optional.
    /// </param>
    public void  initFromProjInvoiceItem(ProjInvoiceItem  _projInvoiceItem, boolean _copyPrecisely = true,
                                                                            boolean _copyPriceDisc = true,
                                                                            boolean _copyQty       = true,
                                                                            Qty     _qty           = _projInvoiceItem.Qty)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromProjInvoiceItem(_projInvoiceItem, _copyPrecisely, _copyPriceDisc, _copyQty, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    public void initFromProjTable(ProjTable             _projTable,
                                  boolean               _setCurrency       = true)
    {
        SalesTable          salesTable;

        if (_setCurrency)
        {
            this.CurrencyCode   = _projTable.currencyId();
        }

        if (! ProjValProjCategorySetUp::checkProjCategory(this.ProjId,this.ProjCategoryId))
        {
            this.ProjCategoryId = '';
        }

        this.setProjLinePropertyId();

        if (this.ProjId)
        {
            SalesLineType_Project salesLineType_Project = this.type();

            // Create a sales order when the salesLine.ProjFundingSource exists, or the project is associated with
            // a single funding source, or is a project associated with multiple funding sources and the <c>ProjItemRequirementMultipleFundingSources</c>
            // feature is turned on.
            if (this.projfundingsource || !_projTable.hasMultipleFundingSourcesWithItemReqMultFundSourcesFeatureEnabled())
            {
                salesTable = salesLineType_Project.salesTableFromProjTable(_projTable);

                this.initFromSalesTable(salesTable);
            }
            
            if (!ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
            {
                this.setAddressFromProjTable(_projTable);
            }

            //<GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                this.initFromProjTable_IN(_projTable);
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializing the India Tax Information related fields of <c> ProjJournalTransTaxExtensionIN </c> table from given <c> projTableTaxExtensionIN </c> record..
    /// </summary>
    /// <param name="_projTable">
    /// Buffer of <c> ProjTable </c>.
    /// </param>
    public void initFromProjTable_IN(ProjTable _projTable)
    {
        SalesLine_IN            salesLine_IN = this.salesLine_IN();

        salesLine_IN.ExportOrder                 = TaxInformationCustTable_IN::findByCustTable(this.CustAccount).IsForeign;
        this.packSalesLine_IN(salesLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> record with values that are based on a <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record from which to initializes the <c>SalesLine</c> record.
    /// </param>
    public void  initFromPurchLine(PurchLine _purchLine)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromPurchLine(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineInterCompany_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializing the <c> TaxInformation_IN </c> field of <c> SalesLine </c> table from given <c> PurchLine </c> record.
    /// </summary>
    /// <param name="_purchLine">
    /// Buffer of <c> PurchLine </c>
    /// </param>
    public void  initFromPurchLineInterCompany_IN(PurchLine _purchLine)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromPurchLineInterCompany_IN(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailStoreTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes India tax information of sales line from retail store table.
    /// </summary>
    /// <param name="_retailStoreTable">
    /// The specified <c>RetailStoreTable</c>.
    /// </param>
    public void  initFromRetailStoreTable_IN(RetailStoreTable _retailStoreTable)
    {
        this.type().initFromRetailStoreTable_IN(_retailStoreTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailChannelTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes India tax information of sales line from retail store table.
    /// </summary>
    /// <param name="_retailChannelTable">
    /// The specified <c>RetailChannelTable</c>.
    /// </param>
    internal void initFromRetailChannelTable_IN(RetailChannelTable _retailChannelTable)
    {
        this.type().initFromRetailChannelTable_IN(_retailChannelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesBasketLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> record with values that are based on a <c>SalesBasketLine</c> record.
    /// </summary>
    /// <param name="_salesBasketLine">
    /// A <c>SalesBasketLine</c> record from which to initializes the <c>SalesLine</c> record.
    /// </param>
    public void  initFromSalesBasketLine(SalesBasketLine _salesBasketLine)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromSalesBasketLine(_salesBasketLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesCreateReleaseOrderLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> record from a <c>SalesCreateReleaseOrderLineTmp</c> record.
    /// </summary>
    /// <param name="_salesCreateReleaseOrderLineTmp">
    /// The <c>SalesCreateReleaseOrderLineTmp</c> record from which to initialize the <c>SalesLine</c>
    /// record.
    /// </param>
    public void initFromSalesCreateReleaseOrderLineTmp(SalesCreateReleaseOrderLineTmp _salesCreateReleaseOrderLineTmp)
    {
        // <GIN>
        SalesLine_IN salesLine_IN;
        // </GIN>

        this.setInventDimId(_salesCreateReleaseOrderLineTmp.InventDimId);
        this.initName();

        this.RetailVariantId         = _salesCreateReleaseOrderLineTmp.VariantId;
        this.SalesUnit               = _salesCreateReleaseOrderLineTmp.Units;
        this.QtyOrdered              = _salesCreateReleaseOrderLineTmp.SalesQty;
        this.SalesQty                = _salesCreateReleaseOrderLineTmp.SalesQty;
        this.ConfirmedDlv            = _salesCreateReleaseOrderLineTmp.ShippingDateRequested;
        this.DlvMode                 = _salesCreateReleaseOrderLineTmp.DlvMode;
        this.DeliveryDateControlType = _salesCreateReleaseOrderLineTmp.DeliveryDateControlType;
        this.ShippingDateRequested   = _salesCreateReleaseOrderLineTmp.ShippingDateRequested;
        this.ReceiptDateRequested    = _salesCreateReleaseOrderLineTmp.ReceiptDateRequested;
        this.DeliveryPostalAddress   = _salesCreateReleaseOrderLineTmp.DeliveryPostalAddress;
        this.DeliveryName            = _salesCreateReleaseOrderLineTmp.DeliveryName;
        this.AddressRefRecId         = _salesCreateReleaseOrderLineTmp.AddressRefRecId;
        this.AddressRefTableId       = _salesCreateReleaseOrderLineTmp.AddressRefTableId;
        this.PdsCWQty                = _salesCreateReleaseOrderLineTmp.PdsCWQty;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            salesLine_IN = this.salesLine_IN();
            this.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on another <c>SalesLine</c> table buffer.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> table buffer that is to be copied.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_cwQty">
    ///    A catch weight quantity; optional.
    /// </param>
    public void  initFromSalesLine(SalesLine  _salesLine, boolean _copyPrecisely = true,
                                                          boolean _copyPriceDisc = true,
                                                          boolean _copyQty       = true,
                                                          Qty     _qty           = _salesLine.SalesQty,
                                                          PdsCWInventQty _cwQty  = 0
                                                          )
    {
        SalesLineType  salesLineType;
        PdsCWInventQty  cwQty = _cwQty;

        if (#PdsCatchWeightEnabled && prmisDefault(_cwQty))
        {
            cwQty = _salesLine.PdsCWQty;
        }
        salesLineType = this.type();
        salesLineType.initFromSalesLine(_salesLine, _copyPrecisely, _copyPriceDisc, _copyQty, _qty
        ,
        cwQty
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields of <c> SalesLine </c> from given <c> SalesLine </c> buffer.
    /// </summary>
    /// <param name="_salesLine">
    /// Buffer of <c> SalesLine </c>.
    /// </param>
    public void initFromSalesLine_IN(SalesLine _salesLine)
    {
        SalesLine_IN    salesLine_INTo;
        SalesLine_IN    salesLine_INFrom;

        salesLine_INTo      = this.salesLine_IN();
        salesLine_INFrom    = _salesLine.salesLine_IN();

        if (TaxParameters::checkTaxParameters_IN())
        {
            salesLine_INTo.AssessableValueTransactionCurrency             = salesLine_INFrom.AssessableValueTransactionCurrency;
            salesLine_INTo.CreditNoteDate              = salesLine_INFrom.CreditNoteDate;
            salesLine_INTo.MaximumRetailPrice          = salesLine_INFrom.MaximumRetailPrice;
            salesLine_INTo.TaxAsPerOriginalInvoice     = salesLine_INFrom.TaxAsPerOriginalInvoice;

            if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
                _salesLine.salesTable().CustomsExportOrder_IN &&
                this.salesTable().CustomsExportOrder_IN)
            {
                salesLine_INTo.CustomsMaxRetailPrice   = salesLine_INFrom.CustomsMaxRetailPrice;
                salesLine_INTo.MaximumRetailPrice      = CurrencyHelper_IN::customsCurAmount_IN(salesLine_INFrom.CustomsMaxRetailPrice,
                                                                                _salesLine.CurrencyCode,
                                                                                Direction_IN::Export,
                                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                false);
            }
        }
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            salesLine_INTo.tdsGroup                    = salesLine_INFrom.tdsGroup;
            salesLine_INTo.tcsGroup                    = salesLine_INFrom.tcsGroup;
            salesLine_INTo.TaxWithholdLineNum          = salesLine_INFrom.TaxWithholdLineNum;
            salesLine_INTo.TaxWithholdVoucher          = salesLine_INFrom.TaxWithholdVoucher;
        }

        this.packSalesLine_IN(salesLine_INTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRetailSalesQuotationAffiliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record in <c> RetailSalesAffiliation </c> from given <c> SalesQuotationLine </c> buffer.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// Buffer of <c> SalesQuotationLine </c>.
    /// </param>
    public void copyRetailSalesQuotationAffiliation(SalesQuotationLine _salesQuotationLine)
    {
        RetailSalesAffiliation              retailSalesAffiliation;
        RetailSalesQuotationAffiliation     retailSalesQuotationAffiliation;
        SalesId                             salesId;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            retailSalesQuotationAffiliation = RetailSalesQuotationAffiliation::findByQuotationId(_salesQuotationLine.QuotationId);
            salesId = this.SalesId;

            insert_recordset  retailSalesAffiliation (SalesId, Affiliation, LoyaltyTier)
                select salesId, Affiliation, LoyaltyTier from retailSalesQuotationAffiliation
                where retailSalesQuotationAffiliation.QuotationId == _salesQuotationLine.QuotationId
                notexists join retailSalesAffiliation where retailSalesAffiliation.Affiliation == retailSalesQuotationAffiliation.Affiliation && retailSalesAffiliation.SalesId == salesId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> record from a <c>SalesQuotationLine</c> record.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record from which to initialize the <c>SalesLine</c> record.
    /// </param>
    public void initFromSalesQuotationLine(SalesQuotationLine      _salesQuotationLine)
    {
        // <GIN>
        SalesLine_IN salesLine_IN;
        // </GIN>
        MCRSalesLine            mcrSalesLine;
        MCRSalesQuotationLine   mcrSalesQuotationLine;

        this.DefaultDimension                  = this.copyDimension(_salesQuotationLine.DefaultDimension);

        this.setInventDimId(_salesQuotationLine.InventDimId);

        this.BarCode                        = _salesQuotationLine.BarCode;
        this.BarCodeType                    = _salesQuotationLine.BarCodeType;
        this.CustomerRef                    = _salesQuotationLine.CustomerRef;

        this.ConfirmedDlv                   = _salesQuotationLine.ConfirmedDlv;

        this.DeliveryName                   = _salesQuotationLine.DeliveryName;
        if (_salesQuotationLine.DeliveryPostalAddress)
        {
            this.DeliveryPostalAddress      = _salesQuotationLine.DeliveryPostalAddress;
            this.AddressRefRecId            = _salesQuotationLine.AddressRefRecId;
            this.AddressRefTableId          = _salesQuotationLine.AddressRefTableId;
        }

        this.ItemBOMId                      = _salesQuotationLine.ItemBOMId;
        this.ItemRouteId                    = _salesQuotationLine.ItemRouteId;

        this.LedgerDimension                = _salesQuotationLine.LedgerDimension;
        this.LineHeader                     = _salesQuotationLine.LineHeader;
        this.LineNum                        = _salesQuotationLine.LineNum;
        this.Name                           = _salesQuotationLine.Name;

        this.SalesPrice                     = _salesQuotationLine.SalesPrice;
        this.PriceUnit                      = _salesQuotationLine.PriceUnit;
        this.SalesUnit                      = _salesQuotationLine.SalesUnit;
        this.LinePercent                    = _salesQuotationLine.LinePercent;
        this.LineDisc                       = _salesQuotationLine.LineDisc;
        this.LineAmount                     = _salesQuotationLine.LineAmount;
        this.MultiLnDisc                    = _salesQuotationLine.MultiLnDisc;
        this.MultiLnPercent                 = _salesQuotationLine.MultiLnPercent;

        this.setPriceDiscChangePolicy(PriceDiscSystemSource::SalesQuotation);

        this.PackingUnit                    = _salesQuotationLine.PackingUnit;
        this.PackingUnitQty                 = _salesQuotationLine.PackingUnitQty;

        this.SalesGroup                     = _salesQuotationLine.SalesGroup;
        this.SalesMarkup                    = _salesQuotationLine.SalesMarkup;

        this.TaxAutogenerated               = _salesQuotationLine.TaxAutoGenerated;
        this.TaxGroup                       = _salesQuotationLine.TaxGroup;
        this.TaxItemGroup                   = _salesQuotationLine.TaxItemGroup;

        this.Port                           = _salesQuotationLine.Port;
        this.StatProcId                     = _salesQuotationLine.StatProcId;
        this.TransactionCode                = _salesQuotationLine.TransactionCode;
        this.Transport                      = _salesQuotationLine.Transport;
        this.CountyOrigDest                 = _salesQuotationLine.CountyOrigDest;
        this.StatTriangularDeal             = _salesQuotationLine.StatTriangularDeal;
        this.IntrastatCommodity             = _salesQuotationLine.IntrastatCommodity;
        this.OrigCountryRegionId            = _salesQuotationLine.OrigCountryRegionId;
        this.OrigStateId                    = _salesQuotationLine.OrigStateId;
        this.OverrideSalesTax               = _salesQuotationLine.OverrideSalesTax;
        this.ExternalItemId                 = _salesQuotationLine.ExternalItemId;

        this.copyRetailSalesQuotationAffiliation(_salesQuotationLine);
        
        this.initFromMCRSalesQuotationLine(_salesQuotationLine);

        if (_salesQuotationLine.DlvMode != "")
        {
            this.DlvMode                    = _salesQuotationLine.DlvMode;
        }
        this.DlvTerm                        = _salesQuotationLine.DlvTerm;

        this.ShippingDateRequested          = _salesQuotationLine.ShippingDateRequested;
        this.ReceiptDateRequested           = _salesQuotationLine.ReceiptDateRequested;
        this.LineDeliveryType               = _salesQuotationLine.LineDeliveryType;
        this.DeliveryDateControlType        = _salesQuotationLine.DeliveryDateControlType;
        this.RetailVariantId                = _salesQuotationLine.RetailVariantId;

        // <GIN>
        this.initFromSalesQuotationLineTaxExtensionIN(_salesQuotationLine);
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.initFromSalesQuotationLine_BR(_salesQuotationLine);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMCRSalesQuotationLine</Name>
				<Source><![CDATA[
    internal void initFromMCRSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Sets the source code ID.
            MCRSalesLine mcrSalesLine                   = this.mcrSalesLine();
            MCRSalesQuotationLine mcrSalesQuotationLine = _salesQuotationLine.mcrSalesQuotationLine();
            mcrSalesLine.SourceId                       = mcrSalesQuotationLine.SourceId;

            this.mcrDlvModeModified();

            if (mcrSalesLine.SourceId != mcrSalesQuotationLine.SourceId)
            {
                this.mcrPackMCRSalesLine(mcrSalesLine);
            }

            if (!RetailStatementFeatureControl::isIgnoreDropShipmentEnabled() || !this.salesTable().isRetailCashAndCarrySales())
            {
                InventTable inventTable = InventTable::find(this.ItemId);
                this.initDropShipAndInstallmentEligible(inventTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLineTaxExtensionIN</Name>
				<Source><![CDATA[
    internal void initFromSalesQuotationLineTaxExtensionIN(SalesQuotationLine _salesQuotationLine)
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine_IN salesLine_IN = this.salesLine_IN();
            SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN   = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(_salesQuotationLine.RecId, true);
            salesLine_IN.AssessableValueTransactionCurrency                     = salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency;
            salesLine_IN.MaximumRetailPrice                                     = salesQuotationLineTaxExtensionIN.MaximumRetailPrice;
            this.packSalesLine_IN(salesLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record from the <c>SalesQuotationLine</c> record.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record from which to initialize the <c>SalesLine</c> record.
    /// </param>
    public void initFromSalesQuotationLine_BR(SalesQuotationLine _salesQuotationLine)
    {
        SalesLine_BR salesLine_BR;

        salesLine_BR                    = this.salesLine_BR();
        salesLine_BR.cfopTable_BR       = _salesQuotationLine.cfopTable_BR;
        salesLine_BR.SuframaDiscount_BR = _salesQuotationLine.SuframaDiscount_BR;

        this.packSalesLine_BR(salesLine_BR);

        this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void  initFromSalesTable(SalesTable _salesTable, boolean _ignoreInventDim = false)
    {
        this.type(
        _salesTable
        ).initFromSalesTable(_salesTable, _ignoreInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSMAServiceOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record with data from the <c>SMAServiceOrderTable</c> record
    /// buffer.
    /// </summary>
    /// <param name="_serviceOrderTable">
    /// A <c>SMAServiceOrderTable</c> record buffer.
    /// </param>
    public void initFromSMAServiceOrderTable(SMAServiceOrderTable _serviceOrderTable)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromSMAServiceOrderTable(_serviceOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    public void  initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.initFromTmpSuppItem(_tmpSuppItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    public void initName(
        InventTable         _inventTable = this.inventTable(),
        EcoResCategoryId    _salesCategory = this.SalesCategory,
        SalesTable          _salesTable = this.salesTable())
    {
        this.Name = SalesParameters::nameAndOrDescription(_inventTable, _salesTable.LanguageId, this.InventDimId, EcoResCategory::find(_salesCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized retail variant ID value based on the sales line released product variant; otherwise - nothing gets set.
    /// </summary>
    /// <param name = "_inventDim"></param>
    public void initRetailVariantId(InventDim _inventDim = this.inventDim())
    {
        InventDimCombination releasedProductVariant;

        releasedProductVariant = InventDimCombination::findByInventDim(this.ItemId, _inventDim);

        if (releasedProductVariant)
        {
            this.RetailVariantId = releasedProductVariant.RetailVariantId;
        }
        else
        {
            this.RetailVariantId = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    public void  initSalesQty()
    {
        SalesLineType  salesLineType;
        salesLineType = this.type();
        salesLineType.initSalesQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue(SalesType _salesType = this.SalesType)
    {
        this.SalesType = _salesType;

        super();

        //InitValue is not utilizing SalesTable, hence passing null to avoid lookup on SalesTable.
        this.type(null).initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineCreationSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the next unique LineCreationSequenceNumber per SalesId.
    /// </summary>
    /// <returns>Next unique LineCreationSequenceNumber</returns>
    public SalesLineCreationSequenceNumber nextLineCreationSequence()
    {
        SalesLineCreationSequenceNumber currentLineCreationSequenceNumber = 0;
        SalesLine salesLine;

        select maxof(LineCreationSequenceNumber)
            from salesLine
            where salesLine.SalesId == this.SalesId;
            
        if (salesLine)
        {
            currentLineCreationSequenceNumber = salesLine.LineCreationSequenceNumber;
        }

        return (currentLineCreationSequenceNumber + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateRetailSalesLine</Name>
				<Source><![CDATA[
    protected boolean shouldCreateRetailSalesLine(SalesTable _salesTable)
    {
        return _salesTable.mcrIsCallCenter() || _salesTable.isRetailSale();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales line to the database.
    /// </summary>
    /// <param name="_dropInvent">
    /// A Boolean value indicating whether inventory processing of the sales line should be skipped.
    /// </param>
    /// <param name="_findMarkup">
    /// A Boolean value indicating whether charges should be automatically created.
    /// </param>
    /// <param name="_childBuffer">
    /// A child buffer for the inventory movement object.
    /// </param>
    /// <param name="_skipCreditLimitCheck">
    /// A Boolean value indicating whether the credit limit check should be skipped.
    /// </param>
    /// <param name="_skipWHSProcesses">
    /// A Boolean value indicating whether the WHS processes should be skipped.
    /// </param>
    /// <param name="_interCompanyInventTransId">
    /// An intercompany inventory transaction Id.
    /// </param>
    public void  insert(boolean     _dropInvent      = false,
                        boolean     _findMarkup      = true,
                        Common      _childBuffer     = null,
                        boolean     _skipCreditLimitCheck = false,
                        boolean     _skipWHSProcesses = false,
                        InventRefTransId _interCompanyInventTransId   = '')
    {
        #OCCRetryCount
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        Debug::assert(_skipWHSProcesses == false);

        SalesInstrumentationLogger salesIntrumentationLogger = SalesLine::instrumentationLogger();

        SalesOrderInstrumentationActivities salesOrderActivities = salesIntrumentationLogger.salesOrderActivities();

        boolean autoUpdateShipmentBeforeAutoReservationFlightEnabled = WHSAutoUpdateShipmentBeforeAutoReservationFlight::instance().isEnabled();
        
        using (var activityContext = salesOrderActivities.insert(this))
        {
            SalesLine                   salesLine_Orig          = this.orig();
            InterCompanySkipUpdate      interCompanySkipUpdate  = this.SkipUpdate;

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().initDimensions(this))
            {
                if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
                {
                    this.initSATUnitDimensions();
                }
            }

            #ISOCountryRegionCodes

            SalesTable salesTable = this.salesTable(true);
            SalesLineType  salesLineType = this.type(salesTable);

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().salesLineTypeInsert(this))
            {
                salesLineType.inserting();

                this.setInventSumLogTTS();
                this.LineCreationSequenceNumber = this.LineCreationSequenceNumber ? this.LineCreationSequenceNumber : this.nextLineCreationSequence();

                salesLineType.parmInterCompanyInventTransId(_interCompanyInventTransId);
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().setReservation(this))
            {
                salesLineType.setReservation();

                if (salesTable.isInterCompanyOrder() && this.inventTable().interCompanyBlockedSales())
                {
                    throw error(strFmt("@SYS74812", this.ItemId));
                }

                if (this.SkipUpdate == InterCompanySkipUpdate::No
                    &&  salesTable.interCompanyAllowIndirectCreationOrig())
                {
                    if (salesTable.InterCompanyOriginalSalesId
                        && InterCompanyAllowIndirectCreationErrorMessageFlight::instance().isEnabled())
                    {
                        throw error(strFmt("@SCM:IntercompanyAllowIndirectCreationSalesError", SalesTable.SalesId, "@SYS95174", salesTable.InterCompanyOriginalSalesId, salesTable.InterCompanyCompanyId));
                    }
                    else
                    {
                        throw error(salesTable.interCompanyAllowIndirectCreationOrig());
                    }
                }
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().createSourceDocumentLine(this))
            {
                if (!this.skipSourceDocumentLineCreation(salesLineType))
                {
                    this.createSourceDocumentLine(salesTable.RecId);
                }
                else
                {
                    this.createMockUpSourceDocumentLine();
                }
            }

            if (salesLineType.creditNoteLine())
            {
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    this.TransactionCode = this.SalesQty >= 0 ? IntrastatParameters::find().DefaultSalePurchase : IntrastatParameters::find().DefaultCreditNote;
                }
                else
                {
                    this.TransactionCode = IntrastatParameters::find().DefaultCreditNote;
                }

                if (this.inventTable().pdsBaseAttributeId)
                {
                    using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().salesLinePricing(this))
                    {
                        this.pdsCopySalesLinePricingCalculation(SalesLine::findInventTransId(this.InventTransIdReturn).pdsSalesLinePricingCalculation());
                    }
                }

                if (!TaxIntegrationManualAddNegativeLineFlight::instance().isEnabled())
                {
                    // For credit note and return order process, override sales tax should be yes to ensure the sales tax is the same as original ones.
                    this.OverrideSalesTax = NoYes::Yes;
                }
            }

            // InventTransId is set when coming from DMF data import or OData.
            if (!this.SkipAssignInventTransId || !this.InventTransId)
            {
                this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            }

            if (!this.CustAccount || !this.CustGroup)
            {
                this.CustAccount  = salesTable.CustAccount;
                this.CustGroup    = salesTable.CustGroup;
            }

            this.TaxAutogenerated = NoYes::Yes;
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().setSalesStatus(this))
            {
                salesLineType.setSalesStatus(this);
            }
            salesLineType.initSourcingOrigin();

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().updateRAsset(this))
            {
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    salesLineType.updateRAssetStatus();
                    this.setPostingProfile_RU();
                }
                // </GEERU>
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().synchronize(this))
            {
                salesLineType.associateWithAgreementLine();

                if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
                    &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
                {
                    salesLineType.interCompanySyncEngine().synchronize();
                }
            }

            this.setFullRunCTPStatusOnSalesLineInsert();
            this.updateSalesTableOnSalesLineInsert(salesTable);

            InventUpd_Estimated estimated;
            MCRSalesLineDropShipment mcrSalesLineDropShipment;
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().updateSalesStatus(this))
            {
                if (salesLineType.needUpdateSalesOrderStatus())
                {
                    salesTable.SalesStatus = this.SalesStatus;
                    salesTable.update();
                }

                InventDimId previousInventDimId = this.InventDimId;
                estimated = this.handleStockedItemsAndProject(salesLineType, _dropInvent, _childBuffer);
                if (this.InventDimId != previousInventDimId
                    && this.isDerivedIntercompanyLine()
                    && InterCompanyTradingPartner::findOrCreateCustomer
                    (this.CustAccount, this.DataAreaId).interCompanyEndpointActionPolicy().PriceDiscountSearch 
                    && IntrcmpSalesPriceAutoUpdFeature::instance().isEnabled()
                    && InterCompanyTradingPartner::findOrCreateCustomer(this.CustAccount, this.DataAreaId).interCompanyEndpointActionPolicy().PriceDiscountSearchDerivedSalesLine)
                {
                    this.setPriceDisc(this.inventDim());
                }
                this.ConfirmedDlv = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().setDropShipment(this))
            {
                if (#PdsRebateEnabled)
                {
                    this.PdsItemRebateGroupId = InventTable::find(this.ItemId).PdsItemRebateGroupId;
                }

                this.setThirdPartyAddressFromSalesTable(salesTable);

                // Reset the drop shipment flag for a negative qty.
                if (this.QtyOrdered < 0)
                {
                    mcrSalesLineDropShipment = this.mcrSalesLineDropShipment();

                    if (mcrSalesLineDropShipment.DropShipStatus)
                    {
                        mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::None;
                        this.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
                    }
                }
            }                    
            boolean isSalesLineCancelledBeforeSuper = this.SalesStatus == SalesStatus::Canceled;
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().insertRetry(this))
            {
                salesOrderActivities.logSalesOrderLine(activityContext, salesTable, this);

                try
                {
                    super();

                    salesLineType.deleteTaxUncommitted();
                }
                catch (Exception::DuplicateKeyException)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        this.LineCreationSequenceNumber = this.nextLineCreationSequence();

                        if (this.DefaultLineNumberFromLineCreationSequenceNumber
                            && SalesDefaultLineNumberFromLineSequenceNumberDuplicateKeyFlight::instance().isEnabled())
                        {
                            this.LineNum = this.LineCreationSequenceNumber;
                        }
                        else
                        {
                            if (!this.LineNum || SalesLine::exist(this.SalesId, this.LineNum))
                            {
                                this.LineNum = SalesLine::lastLineNum(this.SalesId) + 1.0;
                            }
                        }

                        retry;
                    }
                }
            }

            this.logCreateOfCancelledSalesLine(salesIntrumentationLogger, isSalesLineCancelledBeforeSuper);

            this.insertOrderEvent(salesLine_Orig);
            
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().documentType(this))
            {
                if (SalesParameters::find().MCRCopyNotes)
                {
                    DocuType docuType;

                    while select TypeId from docuType
                        where docuType.TypeGroup == DocuTypeGroup::Note
                    {
                        Docu::copy(InventTable::find(this.ItemId), this, docuType.TypeId);
                    }
                }
            }
        
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().insertAfterBaseTable(this))
            {
                this.updateAssessableValueAndWriteForDataSource_IN();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    if (!TaxUpdateAssessableValueWhileWriteBaseTable_INFlight::instance().isEnabled())
                    {
                        // As the SalesLine_IN is used later before its form data source write it to
                        // DB, insert it at here to make it accessible from databases
                        SalesLine_IN salesLine_IN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesLine_IN), false);
                        if (salesLine_IN.RecId == 0 && FormDataUtil::isFormDataSource(salesLine_IN))
                        {
                            salesLine_IN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
                        }
                    }

                    // When the insert method is not called from form, salesLine_IN need update in createMarkupTrans method.
                    if (!this.salesLine_IN())
                    {
                        this.SysExtensionSerializerMap::postInsert();
                    }
                }

                MCRSalesLine mcrSalesLine = this.mcrSalesLine();
                if (mcrSalesLine.RecId == 0 && FormDataUtil::isFormDataSource(mcrSalesLine))
                {
                    mcrSalesLine.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
                }

                if (this.shouldCreateRetailSalesLine(salesTable))
                {
                    RetailSalesLine retailSalesLine = this.retailSalesLine();
                    if (retailSalesLine.RecId == 0 && FormDataUtil::isFormDataSource(retailSalesLine))
                    {
                        retailSalesLine.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
                    }
                }

                mcrSalesLineDropShipment = this.mcrSalesLineDropShipment();
                if (mcrSalesLineDropShipment.DropShipment && mcrSalesLineDropShipment.RecId == 0 && FormDataUtil::isFormDataSource(mcrSalesLineDropShipment))
                {
                    mcrSalesLineDropShipment.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
                }
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().updateRegistrations(this))
            {
                //Create pending registration records for non-stocked return lines.
                if (salesLineType.getPendingRegistrationQuantityToUpdate(true) && !this.isStocked())
                {
                    salesLineType.updatePendingRegistrationsNonStocked(true);
                }
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().updateOwner(this))
            {
                if (this.checkEstimated(estimated))
                {
                    estimated.updateOwnerRelationship();
                }

                if (this.mustAutoCreateIntercompanyChainForSalesLine())
                {
                    if (this.notAlloweDirectDeliveryForOnHoldSalesOrder())
                    {
                        throw error("@Intercompany:DirectDeliveryNotAllowedForOnHoldSalesOrder");
                    }

                    if (this.notAlloweDirectDeliveryForJournalSalesOrder())
                    {
                        throw warning("@Intercompany:DirectDeliveryNotAllowedForJournalSalesOrder");
                    }
                    
                    if (!TradeInterCompany::tryAutoCreateLine(this))
                    {
                        throw error("@Intercompany:ErrorAutomaticCreationCanceled");
                    }
                }
                else if (this.salesTableAllowsIntercompanyCreation(salesTable))
                {
                    TradeInterCompany::autoCreateOrder(this);
                }

                if (salesLineType.orderEntryStatistics())
                {
                    if (this.SalesType == SalesType::Sales || this.SalesType == SalesType::ReturnItem)
                    {
                        SalesOrderEntryStatistics::createOrderEntry(this);
                    }
                }
            }

            if (autoUpdateShipmentBeforeAutoReservationFlightEnabled)
            {
                using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().whsSalesLine(this))
                {
                    if (!_skipWHSProcesses
                    && (WHSInventEnabled::exist(this.ItemId) || TMSInventEnabled::exist(this.ItemId)))
                    {
                        WHSSalesLine::insertForSalesLine(this);
                        WHSAutoCreateLoadLine::newFromSourceLineTableBuffer(this).autoCreateLoadLine();

                        using (WHSSetSalesOrderReleasedStatusParameters setSalesOrderReleasedStatusParameters = WHSSetSalesOrderReleasedStatusParameters::newLineInserted(this))
                        {
                            SalesTable::setSalesOrderReleasedStatus(this.SalesId);
                        }
                    }
                }
            }

            if (this.checkEstimated(estimated))
            {
                if (!SalesLineCreationPolicy::newFromSalesOrderCreationMethod(this.SalesSalesOrderCreationMethod).mustPerformOnHandCheckDuringReservation())
                {
                    InventUpdateReservationParameters inventUpdateReservationParameters = InventUpdateReservationParameters::construct();
                    inventUpdateReservationParameters.SkipOnHandCheck = true;
                    estimated.parmReservationParameters(inventUpdateReservationParameters);
                }

                using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().updateReservation(this))
                {
                    estimated.updateReservation();
                }
            }

            if (salesLineType.createMarkupUponInsert(_findMarkup))
            {
                this.createMarkupTrans(salesTable, false);
            }
            
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().markupMirror(this))
            {
                if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany && this.SkipUpdate != InterCompanySkipUpdate::Both && salesTable.isInterCompanyOrder())
                {
                    salesLineType.interCompanyMarkupMirror();
                }
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().calculateBrokerage(this))
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(TradeBroker)))
                {
                    new MCRBrokerOrder().calcBrokerage(this, false);
                }
            }

            InterCompanySkipUpdate skipUpdateOrig;
            
            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().setMcrMarginPercentUpdate(this))
            {
                // This must be done after the brokerage calculation as the margin calculation is reading from brokerage
                this.setMcrMarginPercent(true);

                skipUpdateOrig = this.SkipUpdate;

                this.SkipUpdate = InterCompanySkipUpdate::No;
                this.doUpdate();
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().intercompanySkipUpdate(this))
            {
                if (skipUpdateOrig == InterCompanySkipUpdate::InterCompany)
                {
                    if (this.mustAutoCreateIntercompanyChainForSalesLine())
                    {
                        if (this.notAlloweDirectDeliveryForOnHoldSalesOrder())
                        {
                            throw error("@Intercompany:DirectDeliveryNotAllowedForOnHoldSalesOrder");
                        }

                        if (this.notAlloweDirectDeliveryForJournalSalesOrder())
                        {
                            throw warning("@Intercompany:DirectDeliveryNotAllowedForJournalSalesOrder");
                        } 
                        
                        if (!TradeInterCompany::tryAutoCreateLine(this))
                        {
                            throw error("@Intercompany:ErrorAutomaticCreationCanceled");
                        }
                    }

                    if (this.SkipUpdate != InterCompanySkipUpdate::No)
                    {
                        this.SkipUpdate = InterCompanySkipUpdate::No;
                        this.doUpdate();
                    }
                }
            }

            using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().syncSalesLine(this))
            {
                // Create kit assembly order if the inventory on hand is low
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && !_dropInvent &&
                (RetailSalesTable::find(this.SalesId).RetailChannel || RetailSalesTable::find(this.SalesId).RetailOrder))
                {
                    RetailKitAssemblyOrder::syncSalesLine(this, true);
                }

                if (KanbanFindRules::ruleMayExist(this.ItemId,LeanReplenishmentStrategy::Event))
                {
                    ReqEventProcessKanban::newStandard(this,false,true).runOperation();
                }
            }
            this.deleteUnusedKanbans();

            boolean isBrazilEnabled = BrazilParameters::isEnabled();
        
            if (isBrazilEnabled)
            {
                salesLineType.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::Inventory);
            }

            if (interCompanySkipUpdate == InterCompanySkipUpdate::No)
            {
                using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().interCompanyCalcDiscInternal(this))
                {
                    salesLineType.interCompanyCalcDiscInternal();
                }

                using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().interCompanyCalcDisc(this))
                {
                    salesLineType.interCompanyCalcDisc();
                }
            }

            if (isBrazilEnabled)
            {
                salesLineType.postInsert_BR();
            }
    
            if (!autoUpdateShipmentBeforeAutoReservationFlightEnabled)
            {
                using(var nestedActivityContext = salesIntrumentationLogger.salesOrderActivities().whsSalesLine(this))
                {
                    if (!_skipWHSProcesses
                    && (WHSInventEnabled::exist(this.ItemId) || TMSInventEnabled::exist(this.ItemId)))
                    {
                        WHSSalesLine::insertForSalesLine(this);
                        WHSAutoCreateLoadLine::newFromSourceLineTableBuffer(this).autoCreateLoadLine();

                        using (WHSSetSalesOrderReleasedStatusParameters setSalesOrderReleasedStatusParameters = WHSSetSalesOrderReleasedStatusParameters::newLineInserted(this))
                        {
                            SalesTable::setSalesOrderReleasedStatus(this.SalesId);
                        }
                    }
                }
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                PlInventPackageParm::updateFromSalesLine(this);
            }

            if (this.shouldCreateRetailSalesLine(salesTable))
            {
                RetailSalesLine retailSalesLineLocal = this.retailSalesLine();
                retailSalesLineLocal.reread();
                this.retailPackRetailSalesLine(retailSalesLineLocal);
            }

            // Skip retail sales line creation during data import since it will be imported later.
            RetailSalesOrderCreationContext context = RetailSalesOrderCreationContext::current();
            if (context == null || !context.parmDataImporting())
            {
                this.writeRetailSalesLine(true);
            }

            using(var activityContext2 = salesIntrumentationLogger.salesOrderActivities().salesLineTypeInserted(this))
            {
                if (TaxIntegrationUtils::isTransitDocumentEnabled())
                {
                    TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();
                    if (transitDocManager.existsAnyTransitDocType() &&
                    transitDocManager.existTransitRuleForTransType(tableNum(SalesTable)))
                    {
                        transitDocManager.transit(salesTable, this);
                    }
                }

                this.SysExtensionSerializerMap::postInsert();

                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }

                if (salesTable.mcrIsCallCenter())
                {
                    Args salesLineArgs = new Args();
                    salesLineArgs.record(this);
                    RetailAttributevalueInstance::main(salesLineArgs);
                }

                this.processQuotationDefaultSalesOrderLine();

                salesLineType.inserted();

                this.EventWriteCallCenterUserEditedSalesOrder(funcName(), salesLine_Orig);
            }

            using(var mpsExcludeSalesLineActivity = salesIntrumentationLogger.salesOrderActivities().mpsExcludeSalesLineInsert(this))
            {
                if (this.MpsExcludeSalesLine)
                {
                    MpsExcludeSpecificSourceDocumentLine::excludeSourceDocumentLine(this.InventTransId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuotationDefaultSalesOrderLine</Name>
				<Source><![CDATA[
    private void processQuotationDefaultSalesOrderLine()
    {
        SalesParameters salesParameters = SalesParameters::find();

        if (this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && salesParameters.IsD365SalesQuotationLifecycleEnabled
            && salesParameters.IsD365SalesDefaultSalesOrderEnabled)
        {
            TradeCDSMessageQueue::processQuotationDefaultSalesOrderLine(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableOnSalesLineInsert</Name>
				<Source><![CDATA[
    private void updateSalesTableOnSalesLineInsert(SalesTable _salesTable)
    {
        #OCCRetryCount

        try
        {
            this.setSalesTableFullRunCTPStatusOnSalesLineInsert(_salesTable);
            this.updateSalesTable(_salesTable);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0
                || SalesLineUpdateSalesTableRetryWhenUpdateConflictFlight::instance().isEnabled())
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    _salesTable.reread();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCreateOfCancelledSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Logs the stack trace when a salesline is created as cancelled. This is diagnostic and will help in investigation in case this is
    ///     not intentional.
    /// </summary>
    /// <param name = "salesIntrumentationLogger">
    ///     The salesInstrumentationLogger object to create the information log.
    /// </param>
    /// <param name = "isSalesLineCancelledBeforeSuper">
    ///     Boolean indicates whether the salesline was already cancelled
    ///     before the call to super that actually creates the sales line in the database.
    /// </param>
    private void logCreateOfCancelledSalesLine(SalesInstrumentationLogger salesIntrumentationLogger, boolean isSalesLineCancelledBeforeSuper)
    {
        if (this.SalesStatus == SalesStatus::Canceled)
        {
            salesIntrumentationLogger.logStackTrace(
                strFmt("SalesLine created as cancelled. SalesLine RecId: %1, isSalesLineCancelledBeforeSuper: %2", int642Str(this.RecId), isSalesLineCancelledBeforeSuper));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether the estimated value is present.
    /// </summary>
    /// <param name = "_estimated">
    ///		A <c>InventUpd_Estimated</c> object.
    /// </param>
    /// <returns>
    ///		true, if the estimated value is present; otherwise, false.
    /// </returns>
    protected boolean checkEstimated(InventUpd_Estimated _estimated)
    {
        if (_estimated)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancellingSalesOrder_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether the sales line belongs to a sales order that is cancelling a previously posted sales order.
    /// </summary>
    /// <returns>
    ///     true if the sales line belongs to a sales order that is cancelling a previously posted sales order; false otherwise.
    /// </returns>
    public boolean isCancellingSalesOrder_BR()
    {
        return this.salesTable().salesTable_BR().InvoiceRefRecID_BR != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatementCancel_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether the sales line belongs to a sales order originated from a Retail statement and is cancelling a previously posted sales order.
    /// </summary>
    /// <returns>
    ///     true if the sales line was originated from a Retail statement and is cancelling a previously posted sales order; false otherwise.
    /// </returns>
    public NoYes isStatementCancel_BR()
    {
        if (this.salesTable().isRetailStatement_BR())
        {
            return this.LineAmount < 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyIsBeingUpdated</Name>
				<Source><![CDATA[
    public boolean interCompanyIsBeingUpdated(boolean _showWarning = true, boolean _checkThis = false)
    {
        PurchLine           purchLine;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        SalesTable          salesTable = this.salesTable();
        boolean             ret = false;

        if (this.RecId)
        {
            if (salesTable.InterCompanyCompanyId || _checkThis)
            {
                if (this.isStocked())
                {
                    inventTransOrigin = null;
                    select firstonly RecId, ReferenceId from inventTransOrigin
                        where inventTransOrigin.InventTransId == this.InventTransId
                        exists join inventTrans
                           where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                             && (((inventTrans.StatusReceipt    == StatusReceipt::Received
                             || inventTrans.StatusReceipt       == StatusReceipt::Registered
                             || inventTrans.StatusReceipt       == StatusReceipt::Arrived)
                             && inventTrans.StatusIssue         == StatusIssue::None)
                             || ((inventTrans.StatusIssue       == StatusIssue::Deducted
                             || inventTrans.StatusIssue         == StatusIssue::Picked)
                             && inventTrans.StatusReceipt       == StatusReceipt::None)
                             || inventTrans.TransChildType      != InventTransChildType::None);

                    if (inventTransOrigin.RecId)
                    {
                        ret = true;
                        if (_showWarning)
                        {
                            salesTable.SalesId = inventTransOrigin.ReferenceId;
                            setPrefix(#PreFixField(salesTable, SalesId));
                            checkFailed("@SYS93839");
                        }
                    }
                    else
                    {
                        if (this.canInvoiceOrderLineFromCurrentSalesStatus())
                        {
                            select TableId from inventTransOrigin
                                where inventTransOrigin.InventTransId == this.InventTransId
                                join sum(Qty) from inventTrans
                                   where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                                      && ((inventTrans.StatusReceipt == StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None)
                                      || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold));

                            if (inventTrans.Qty != 0)
                            {
                                ret = true;
                                if (_showWarning)
                                {
                                    salesTable.SalesId = this.SalesId;
                                    setPrefix(#PreFixField(salesTable, SalesId));
                                    checkFailed("@SYS93839");
                                }
                            }
                        }
                    }
                }
                else
                {
                    ret = this.interCompanyIsBeingUpdatedNonInventoried(_showWarning);
                }
            }

            if (!ret
            &&  this.InventRefType == InventRefType::Purch
            &&  this.InventRefId
            &&  this.InventRefTransId)
            {
                purchLine = PurchLine::findInventTransId(this.InventRefTransId);

                if (purchLine)
                {
                    ret = purchLine.interCompanyIsBeingUpdated(_showWarning);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyIsBeingUpdatedNonInventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the non-stocked intercompany order line is being updated.
    /// </summary>
    /// <param name="_showWarning">
    /// A Boolean value that determines whether failed checks should show warnings; optional.
    /// </param>
    /// <returns>
    /// true if the non-stocked intercompany order line is being updated; otherwise, false.
    /// </returns>
    public boolean interCompanyIsBeingUpdatedNonInventoried(boolean _showWarning = true)
    {
        SalesTable          salesTable = this.salesTable();
        boolean             ret = false;

        if (this.RecId)
        {
            if (salesTable.InterCompanyCompanyId)
            {
                if (this.deliveredInTotal())
                {
                    ret = true;
                    if (_showWarning)
                    {
                        salesTable.SalesId = this.SalesId;
                        setPrefix(#PreFixField(salesTable, SalesId));
                        checkFailed("@SYS93839");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyLineAmount</Name>
				<Source><![CDATA[
    public AmountCur interCompanyLineAmount(SalesQty      _salesQty    = this.SalesQty,
                                            InvoiceDate   _invoiceDate = this.ConfirmedDlv,
                                            Tax           _tax         = null)
    {
        AmountCur       lineAmount;
        PurchLine       purchLine;
        SalesLine       salesLine;
        SalesTable      salesTable = this.salesTable();

        lineAmount = 0;
        if (salesTable.InterCompanyCompanyId)
        {
            changecompany(salesTable.InterCompanyCompanyId)
            {
                purchLine = PurchLine::findInventTransId(this.InterCompanyInventTransId);
                salesLine = SalesLine::findInventTransId(purchLine.InventRefTransId);
                if (salesLine.RecId)
                {
                    lineAmount = salesLine.calcLineAmountExclTax(_salesQty, _invoiceDate, _tax);
                }

                if (salesLine.RecId)
                {
                    lineAmount = CurrencyExchangeHelper::curAmount2CurAmount(lineAmount, salesLine.CurrencyCode, this.CurrencyCode, _invoiceDate);
                }
            }

            if (!salesLine.RecId)
            {
                lineAmount = this.calcLineAmountExclTax(_salesQty,_invoiceDate, _tax);
            }
        }
        else
        {
            lineAmount = this.calcLineAmountExclTax(_salesQty,_invoiceDate, _tax);
        }
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOriginalCustAccount</Name>
				<Source><![CDATA[
    public display CustAccount interCompanyOriginalCustAccount()
    {
        CustAccount custAccount;

        if (this.salesTable().InterCompanyCompanyId)
        {
            custAccount = SalesTable::find(this.SalesId).InterCompanyOriginalCustAccount;
        }
        else
        {
            custAccount = SalesTable::find(this.SalesId).CustAccount;
        }
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOriginDisplay</Name>
				<Source><![CDATA[
    public display InterCompanyOriginDisplay interCompanyOriginDisplay()
    {
        InterCompanyOriginDisplay   interCompanyOriginDisplay;
        DictEnum                    dictEnum = new DictEnum(enumNum(InterCompanyOrigin));

        if (this.InterCompanyInventTransId)
        {
            interCompanyOriginDisplay = dictEnum.value2Name(this.InterCompanyOrigin);
        }
        return interCompanyOriginDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase line that is linked to the sales line through intercompany.
    /// </summary>
    /// <returns>
    /// The purchase line that is linked to the sales line through intercompany.
    /// </returns>
    public PurchLine interCompanyPurchLine()
    {
        SalesTable          salesTable;
        PurchLine           purchLine;

        salesTable = this.salesTable();
        if (salesTable.InterCompanyCompanyId)
        {
            changecompany(salesTable.InterCompanyCompanyId)
            {
                purchLine = PurchLine::findInventTransId(this.InterCompanyInventTransId);
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyReturnItemInventTransId</Name>
				<Source><![CDATA[
    public InventRefTransId interCompanyReturnItemInventTransId()
    {
        CustInvoiceTrans    custInvoiceTrans;
        InventRefTransId    inventRefTransId;

        if (this.InventTransIdReturn)
        {
            custInvoiceTrans = CustInvoiceTrans::findInventTransid(this.InventTransIdReturn);
            if (custInvoiceTrans.InventRefTransId)
            {
                inventRefTransId = VendInvoiceTrans::findInventTransId(custInvoiceTrans.InventRefTransId).InventTransId;
            }
        }

        return inventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesId</Name>
				<Source><![CDATA[
    public display InterCompanySalesId interCompanySalesId()
    {
        PurchLine           purchLineLocal;
        SalesLine           salesLineLocal;
        InterCompanySalesId interCompanySalesId;

        if (this.salesTable().InterCompanyCompanyId)
        {
            changecompany(this.salesTable().InterCompanyCompanyId)
            {
                purchLineLocal      = PurchLine::findInventTransId(this.InterCompanyInventTransId);
                salesLineLocal      = SalesLine::findInventTransId(purchLineLocal.InventRefTransId);
                interCompanySalesId = salesLineLocal.SalesId;
            }
        }
        return interCompanySalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the intercompany <c>SalesLine</c> record related to this <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_forUpdate">If the record should be selected for update.</param>
    /// <returns>The intercompany <c>SalesLine</c> record.</returns>
    public SalesLine interCompanySalesLine(boolean  _forUpdate = false)
    {
        SalesLine icsoLine;
        PurchLine purchLine = this.referencedPurchLine();

        if (purchLine)

        {
            icsoLine = purchLine.interCompanySalesLine(_forUpdate);
        }

        return icsoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesLineExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an intercompany <c>SalesLine</c> record exists for this <c>SalesLine</c> record.
    /// </summary>
    /// <returns>true if an intercompany <c>SalesLine</c> record exists; otherwise: false.</returns>
    public boolean interCompanySalesLineExist()
    {
        PurchLine purchLine = this.referencedPurchLine();
        return purchLine.InterCompanyInventTransId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an intercompany order line should be updated.
    /// </summary>
    /// <returns>
    /// true if the intercompany order line should be updated; otherwise, false.
    /// </returns>
    public boolean  interCompanyUpdateNow()
    {
        boolean      ok;

        // <GIN>
        SalesLine_IN salesLine_IN = this.salesLine_IN();
        // </GIN>

        if (!this.RecId)
        {
            ok = true;
        }

        if (this.orig().ItemId                  != this.ItemId
        ||  this.orig().InventDimId             != this.InventDimId
        ||  this.orig().ConfirmedDlv            != this.ConfirmedDlv
        ||  this.orig().ReceiptDateRequested    != this.ReceiptDateRequested
        ||  this.orig().ReceiptDateConfirmed    != this.ReceiptDateConfirmed
        ||  this.orig().ShippingDateRequested   != this.ShippingDateRequested
        ||  this.orig().ShippingDateConfirmed   != this.ShippingDateConfirmed
        ||  this.orig().LineNum                 != this.LineNum
        ||  this.orig().InventTransId           != this.InventTransId
        ||  this.orig().SalesQty                != this.SalesQty
        ||  this.orig().SalesUnit               != this.SalesUnit
        ||  this.orig().OverDeliveryPct         != this.OverDeliveryPct
        ||  this.orig().UnderDeliveryPct        != this.UnderDeliveryPct
        ||  this.orig().DeliveryPostalAddress   != this.DeliveryPostalAddress
        ||  this.orig().DeliveryName            != this.DeliveryName
        ||  this.orig().SalesPrice              != this.SalesPrice
        ||  this.orig().PriceUnit               != this.PriceUnit
        ||  this.orig().LineAmount              != this.LineAmount
        ||  this.orig().SalesMarkup             != this.SalesMarkup
        ||  this.orig().LineDisc                != this.LineDisc
        ||  this.orig().LinePercent             != this.LinePercent
        ||  this.orig().MultiLnDisc             != this.MultiLnDisc
        ||  this.orig().MultiLnPercent          != this.MultiLnPercent
        ||  this.orig().Complete                != this.Complete
        ||  this.orig().Blocked                 != this.Blocked
        ||  this.orig().ReturnDispositionCodeId != this.ReturnDispositionCodeId
        ||  this.orig().ReturnStatus            != this.ReturnStatus
        ||  this.orig().ExpectedRetQty          != this.ExpectedRetQty
        ||  this.orig().MatchingAgreementLine   != this.MatchingAgreementLine
        ||  this.orig().PlanningPriority        != this.PlanningPriority
        ||  !DimensionDefaultFacade::areEqual(this.orig().DefaultDimension, this.DefaultDimension)
        // <GIN>
        ||  (TaxParameters::checkTaxParameters_IN() && (salesLine_IN.orig().AssessableValueTransactionCurrency      != salesLine_IN.AssessableValueTransactionCurrency
        ||                                              salesLine_IN.orig().MaximumRetailPrice   != salesLine_IN.MaximumRetailPrice))
        // </GIN>
        )
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySourcingCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves sourcing company of this sales line.
    /// </summary>
    /// <returns>A <c>DataAreaId</c> of sales line's sourcing company.</returns>
    public IntercompanySourcingCompanyId intercompanySourcingCompanyId()
    {
        IntercompanySourcingCompanyId sourcingCompanyId;

        if (this.SourcingCompanyId)
        {
            sourcingCompanyId = this.SourcingCompanyId;
        }
        else
        {
            sourcingCompanyId = curExt();
        }

        return sourcingCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySourcingCompanyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>InventDim</c> in the sourcing company of this sales line.
    /// </summary>
    /// <returns>An <c>InventDim</c> record.</returns>
    public InventDim intercompanySourcingCompanyInventDim()
    {
        InventDim inventDim;

        if (this.intercompanyIsSourcedFromOtherCompany())
        {
            InventDim sourcingCompanyInventDim;
            InventDim salesLineCompanyInventDim = this.inventDim();

            sourcingCompanyInventDim.InventDimFieldsMap::initProductDimensionsFrom(salesLineCompanyInventDim);

            changecompany(this.intercompanySourcingCompanyId())
            {
                inventDim = sourcingCompanyInventDim.copySourcingFromSalesLine(this);
            }
        }
        else
        {
            inventDim = this.inventDim();
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyIsSourcedFromOtherCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales line is sourced from other company.
    /// </summary>
    /// <returns>True if sales line is sourced from other company; otherwise, false.</returns>
    public boolean intercompanyIsSourcedFromOtherCompany()
    {
        return this.intercompanySourcingCompanyId() != curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySourcingCompanyItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>ItemId</c> in the sourcing company of this sales line, or of the sourcing company passed in.
    /// </summary>
    /// <param name="_sourcingCompanyId">
    /// Id of sourcing company to retrieve the ItemId from; optional
    /// </param>
    /// <returns>An <c>ItemId</c> in a sales line sourcing company.</returns>
    public ItemId intercompanySourcingCompanyItemId(CompanyId _sourcingCompanyId = '')
    {
        CompanyId sourcingCompanyId = prmIsDefault(_sourcingCompanyId) ? this.intercompanySourcingCompanyId() : _sourcingCompanyId;

        InventTable salesLineCompanyItem = InventTable::find(this.ItemId);
        InventTable sourcingCompanyItem = InventTable::findByProductInCompany(salesLineCompanyItem.Product, sourcingCompanyId);
        return sourcingCompanyItem.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySalesLineInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>InventTransId</c> of an intercompany sales order line that is in relation with this sales line.
    /// </summary>
    /// <returns>An <c>InventTransId</c> of a sales order line.</returns>
    public InventTransId intercompanySalesLineInventTransId()
    {
        InventTransId inventTransId;

        if (this.InventRefType == InventRefType::Purch)
        {
            PurchTable purchTableIc = PurchTable::find(this.InventRefId);

            if (purchTableIc.InterCompanyOrder)
            {
                PurchLine purchLineIc;
                select purchLineIc where purchLineIc.InventRefTransId == this.InventTransId;

                inventTransId = purchLineIc.IntercompanyInventTransId;
            }
        }

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySalesLineCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>CustTable</c> record of an intercompany sales order line that is in relation with this sales line,
    /// or if this order does not exist, based on sourcing vendor.
    /// </summary>
    /// <returns>The customer.</returns>
    public CustTable intercompanySalesLineCustomer()
    {
        CustTable customer;

        InventTransId sourcingCompanySalesLineInventTransId = this.intercompanySalesLineInventTransId();

        if (sourcingCompanySalesLineInventTransId)
        {
            changecompany(this.intercompanySourcingCompanyId())
            {
                customer = CustTable::find(SalesLine::findInventTransId(sourcingCompanySalesLineInventTransId).CustAccount);
            }
        }

        if (!customer)
        {
            VendTable sourcingVendor = VendTable::find(this.SourcingVendAccount);

            if (sourcingVendor)
            {
                customer = sourcingVendor.interCompanyTradingPartnerCustomer().custTable();
            }
        }

        return customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimAllowsWHSProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales line is valid for warehouse management processing based on the inventory dimensions.
    /// </summary>
    /// <returns>
    /// true if the sales line inventDim allow for warehouse management processing; otherwise, false.
    /// </returns>
    public boolean inventDimAllowsWHSProcessing()
    {
        return !WHSReservationHierarchyInventDimUtil::isLocationOrBelowSpecified(this.inventTable(), this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU(boolean _forceGeneral = true)
    {
        InventProfileType_RU inventProfileType = this.inventDim().inventProfile_RU().InventProfileType;

        if (inventProfileType == InventProfileType_RU::NotSpecified && _forceGeneral)
        {
            inventProfileType = InventProfileType_RU::General;
        }

        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(
        ItemId  _itemId       = this.ItemId,
        boolean _forUpdate    = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    public CustInvoiceAccount  invoiceAccount()
    {
        return this.salesTable().InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    public display SalesQty invoicedInTotal()
    {
        return this.invoicedInTotalServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotalServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total invoiced quantity for the line that is in the sales unit.
    /// </summary>
    /// <param name="_salesTable">
    ///  A <c>SalesTable</c> table buffer.
    /// </param>
    /// <returns>
    /// The total invoiced quantity for the line that is in the sales unit.
    /// </returns>
    public SalesQty invoicedInTotalServer(
        SalesTable _salesTable = this.salesTable()
    )
    {
        return this.type(_salesTable).invoicedInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInventInTotal</Name>
				<Source><![CDATA[
    public display InventQty    invoicedInventInTotal()
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty = 0;

        if (this.InventTransId)
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));

            inventQty = -inventTransIdSum.financial();
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAgreementLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the link between agreement line and the sales line is valid.
    /// </summary>
    /// <param name="_showInfolog">
    /// A Boolean value that indicates whether to print the errors in the Infolog; optional.
    /// </param>
    /// <returns>
    /// true if the link between sales order line and agreement line is valid; otherwise, false.
    /// </returns>
    public boolean isAgreementLinkValid(boolean _showInfolog = false)
    {
        if (this.isLinkedToAgreement())
        {
            return AgreementLine::find(this.MatchingAgreementLine).isLinkValid(this,_showInfolog);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is part of a drop shipment.
    /// </summary>
    /// <returns>
    ///    true if the order line is part of a drop shipment; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isDropShipment()
    {
        return this.salesPurchLineInterface().isDropShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDropShipmentPOLineInvoiceMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a related direct delivery purchase order line was partially or fully invoiced.
    /// </summary>
    /// <returns>
    /// true if a related direct delivery purchase order line was partially or fully invoiced; otherwise,
    /// false.
    /// </returns>
    public boolean isDropShipmentPOLineInvoiceMatched()
    {
        return this.isDropShipment()
            && this.InventRefType == InventRefType::Purch
            && PurchLine::findInventTransId(this.InventRefTransId).isInvoiceMatched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an order line is an intercompany order line.
    /// </summary>
    /// <returns>
    /// true if the order line is an intercompany order line; otherwise, false.
    /// </returns>
    public boolean  isInterCompanyOrder()
    {
        boolean  ok;

        if (this.InterCompanyInventTransId  &&  this.salesTable().isInterCompanyOrder())
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDerivedIntercompanyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this <c>SalesLine</c> record is a derived intercompany sales line.
    /// </summary>
    /// <returns>true is this line is a derived intercompany sales line; otherwise, false.</returns>
    public boolean isDerivedIntercompanyLine()
    {
        return this.InterCompanyOrigin == InterCompanyOrigin::Derived
                && this.isInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOriginalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an order line is the Original order line in an intercompany order chain.
    /// </summary>
    /// <returns>
    /// true if the order line is the Original order line in an intercompany order chain; otherwise, false.
    /// </returns>
    public boolean isInterCompanyOriginalLine()
    {
        return this.InventRefType == InventRefType::Purch
            && PurchTable::find(this.InventRefId).InterCompanyOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrderLineInvoiceMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a related intercompany purchase order line was partially or fully invoiced.
    /// </summary>
    /// <returns>
    /// true if the related intercompany purchase order line was partially or fully invoiced; otherwise,
    /// false.
    /// </returns>
    public boolean isInterCompanyOrderLineInvoiceMatched()
    {
        boolean     ret;
        PurchLine   purchLine;
        SalesTable  salesTable = this.salesTable();

        if (salesTable.isInterCompanyOrder() && this.InterCompanyInventTransId)
        {
            select firstonly crosscompany purchLine
                    where purchLine.InventTransId == this.InterCompanyInventTransId
                       && purchLine.DataAreaId    == salesTable.InterCompanyCompanyId;

            ret = purchLine.isInvoiceMatched();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales line is linked to an agreement line.
    /// </summary>
    /// <returns>
    /// true if the sales line is linked to an agreement line; otherwise, false.
    /// </returns>
    public boolean isLinkedToAgreement()
    {
        return this.MatchingAgreementLine != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailPricingUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value indicating whether the retail pricing engine is used.
    /// </summary>
    /// <returns>
    /// True if retail pricing engine is used; otherwise, false;
    /// </returns>
    public boolean isRetailPricingUsed()
    {
        return RetailPricingEngine::useRetailPricing(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToProdConsumed</Name>
				<Source><![CDATA[
    public boolean isLinkedToProdConsumed()
    {
        boolean                     ret = false;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        InventTrans                 inventTrans;
        InventTransOriginProdTable  inventTransOriginProdTable;
        ProdTable                   prodTable;

        if (isConfigurationkeyEnabled(new DictTable(tableNum(ProdTable)).configurationKeyId()))
        {
            select firstonly RecId from inventTransOriginSalesLine
                where   inventTransOriginSalesLine.SalesLineDataAreaId      == this.DataAreaId
                     && inventTransOriginSalesLine.SalesLineInventTransId   == this.InventTransId
            exists join inventTrans
                where inventTrans.InventTransOrigin                         == inventTransOriginSalesLine.InventTransOrigin
                   && inventTrans.MarkingRefInventTransOrigin
                join TableId from inventTransOriginProdTable
                    where inventTransOriginProdTable.InventTransOrigin      == inventTrans.MarkingRefInventTransOrigin
                join TableId from prodTable
                    where prodTable.ProdId                                  == inventTransOriginProdTable.ProdOrderId
                       && prodTable.DataAreaId                              == inventTransOriginProdTable.ProdOrderDataAreaId
                       && prodTable.ProjPostingType                         == ProjProdPostingType::ConsumedMethod
                       && prodTable.ProjLinkedToOrder                       == NoYes::Yes;

            if (inventTransOriginSalesLine.RecId)
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canItemReqBeCancelled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canItemReqBeCancelled()
    {
        boolean ret = false;

        boolean isItemReqAndProjCancelItemReqPackingSlipFeatureEnabled = this.SalesType == SalesType::ItemReq && FeatureStateProvider::isFeatureEnabled(ProjCancelItemReqPackingSlipFeature::instance());
        boolean isLinkedToPurchAndProjCancelPOReceiptWithItemRequirementFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ProjCancelPOReceiptWithItemRequirementFeature::instance()) 
                                                                                            && this.InventRefType == InventRefType::Purch && this.InventRefTransId;

        if (isItemReqAndProjCancelItemReqPackingSlipFeatureEnabled
            && (isLinkedToPurchAndProjCancelPOReceiptWithItemRequirementFeatureEnabled
                || !this.isItemReqReferenced()))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemReqReferenced</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isItemReqReferenced()
    {
        if (this.SalesType == SalesType::ItemReq
            && this.ProjId
            && this.InventRefType
            && this.InventRefTransId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToConfirmedPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales line is linked to a confirmed purchase order.
    /// </summary>
    /// <returns>
    /// true if there is a linked confirmed purchase order.
    /// </returns>
    public boolean isLinkedToConfirmedPurchOrder()
    {
        PurchLine   purchLine;

        purchLine = PurchLine::findInventTransId(this.InventRefTransId);

        if (purchLine
            && (purchLine.isOpenOrder()
                || purchLine.isReceived()
                || purchLine.isInvoiced())
            && purchLine.purchTable().DocumentState <= VersioningDocumentState::Confirmed)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipOrInvoiceUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line has been packing slip or invoice updated.
    /// </summary>
    /// <returns>
    /// true if the line has been packing slip or invoice updated; otherwise, false.
    /// </returns>
    public boolean isPackingSlipOrInvoiceUpdated()
    {
        SalesLine salesOrig = this.orig();

        return this.RecId                                       // Saved?
            && (this.SalesStatus == SalesStatus::Delivered      // Fully delivered?
                || this.RemainSalesFinancial != 0               // Partially delivered?
                || this.SalesStatus == SalesStatus::Invoiced    // Fully invoiced?
                || (this.RemainSalesPhysical != this.SalesQty   // Partially invoiced/delivered;
                    && !(this.RemainSalesPhysical == salesOrig.RemainSalesPhysical && this.SalesQty != salesOrig.SalesQty))  //The 'and' part excludes lines which are being checked during an update before remainSalesPhysical was calculated.
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnLineScrapped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the return line has been scrapped using the quarantine order scrap functionality
    /// </summary>
    /// <returns>
    /// true if the return line has been scrapped; otherwise, false.
    /// </returns>
    public boolean isReturnLineScrapped()
    {
        InventTransOrigin           inventTransOriginQuarantineOrder;
        InventTrans                 inventTransQuarantineOrder;
        InventQuarantineOrder       quarantineOrder;
        boolean                     ret;

        while select sum(PdsCWQty), sum(Qty) from inventTransQuarantineOrder group by InventTransOrigin
        exists join inventTransOriginQuarantineOrder
            where inventTransOriginQuarantineOrder.RecId == inventTransQuarantineOrder.InventTransOrigin
                && inventTransOriginQuarantineOrder.ReferenceCategory == InventTransType::QuarantineOrder
            exists join quarantineOrder
                where quarantineOrder.InventTransId == inventTransOriginQuarantineOrder.InventTransId
                    && quarantineOrder.InventTransIdRef == this.InventTransId
        {
            if (inventTransQuarantineOrder.Qty < 0 || inventTransQuarantineOrder.PdsCWQty < 0)
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>SalesLine</c> record in scope is a return order reservation line.
    /// </summary>
    /// <returns>
    /// true if the line in scope is a return order reservation line; otherwise, false.
    /// </returns>
    public boolean isReturnReservationLine()
    {
        boolean ret;
        SalesLine returnOrderLine;
        ReturnDispositionCode returnDispositionCode;

        if (this.SalesType == SalesType::ReturnItem && this.QtyOrdered > 0 && this.returnCreateScrap() && this.qtyMarked())
        {
            select firstonly SalesId from returnOrderLine where returnOrderLine.InventTransId == this.InventRefTransId &&
                                                                returnOrderLine.SalesId       == this.SalesId
            exists join returnDispositionCode where returnDispositionCode.DispositionCodeId == returnOrderLine.ReturnDispositionCodeId &&
                                                    returnDispositionCode.DispositionAction == DispositionAction::Scrap ||
                                                    returnDispositionCode.DispositionAction == DispositionAction::ReplaceScrap;
            if (returnOrderLine.SalesId)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTangible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item in the order line is tangible.
    /// </summary>
    /// <returns>
    /// A Boolean value that determines whether the line is tangible.
    /// </returns>
    public boolean isTangible()
    {
        boolean isTangible = true;

        //For non-stocked item based lines, where the ItemType is service
        //or for description based lines where the SalesCategory is non-tangible, return false.
        if (!this.isStocked()
            && ((this.ItemId && this.inventTable().ItemType == ItemType::Service)
            || (!this.ItemId && !EcoResCategory::isTangible(this.SalesCategory))))
        {
            isTangible = false;
        }

        return isTangible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SalesLine</c> based on the item change.
    /// </summary>
    /// <param name="_resetPrice">
    /// A Boolean value that specifies whether to reset price; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performProductVariantValidation">
    ///     A Boolean value indicating whether to perform product variant validation.
    /// </param>
    /// <returns>
    /// A packed <c>SalesLineItemIdModifiedDTO</c> data transfer object.
    /// </returns>
    public container itemIdChanged(boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performProductVariantValidation = false)
    {
        SalesTable                  salesTable;
        SalesLineItemIdModifiedDTO  salesLineItemIdModifiedDTO = SalesLineItemIdModifiedDTO::construct();

        this.initFromInventTable(this.inventTable(), _resetPrice, _matchingAgreement, _performProductVariantValidation);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.updateDeliveryCFOPTax_BR();
        }
        // </GBR>

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // If we're adding a new line for a gift cert. blank out the
            // delivery name since it equates the gift cert's recipient
            // name which must be filled in by the user.
            if (!this.RecId
                && this.ItemId == RetailParameters::find().GiftcardItem)
            {
                // change to use new line fields.
                this.DeliveryName = "";
            }

            this.mcrInitFromSourceCodeSetup();
        }

        salesLineItemIdModifiedDTO.initFromSalesLine(this);
        return salesLineItemIdModifiedDTO.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    public LineDiscCode  itemLineDisc()
    {
        return this.inventTable().salesLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display SalesLineShowItemName itemName()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionSales(InventTable _inventTable = this.inventTable())
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.ledgerDimensionSales(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesLineAmount lineAmountExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(this.taxDate(_transDate), _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountForTieredCharge</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal SalesLineAmount lineAmountForTieredCharge()
    {
        return this.shouldUsePriceIncludesTaxFindingTieredCharge() ? this.salesPurchLineInterface().calcLineAmount() : this.lineAmountExclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void lineAmountModified()
    {
        this.salesPurchLineInterface().lineAmountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMST(TransDate               _exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                   ExchRate                _exchRate                = this.salesTable().fixedExchRate(),
                                   ExchrateSecondary       _exchrateSecondary       = this.salesTable().fixedExchRateSecondary(),
                                   ExchRatesTriangulation  _exchRatesTriangulation  = this.salesTable().fixedEuroTriangulation())

    {
        return this.salesPurchLineInterface().lineAmountMST(_exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMSTExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST  lineAmountMSTExclTax(TransDate               _exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           ExchRate                _exchRate                = this.salesTable().fixedExchRate(),
                                           ExchrateSecondary       _exchrateSecondary       = this.salesTable().fixedExchRateSecondary(),
                                           ExchRatesTriangulation  _exchRatesTriangulation  = this.salesTable().fixedEuroTriangulation(),
                                           Tax                     _tax                    = null)

    {
        return this.salesPurchLineInterface().lineAmountMSTExclTax(_exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    public LineDiscCode  lineDisc()
    {
        return this.salesTable().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the value of the <c>SalesLine.dimension</c> field, depending on the <c>InventDim</c>
    /// record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    /// The <c>InventDim</c> record buffer that is linked to the current <c>SalesLine</c> record buffer;
    /// </param>
    /// <param name="_oldInventDim">
    /// The <c>InventDim</c> record buffer that was previously linked to the current <c>SalesLine</c>
    /// record buffer;
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed(SalesTable _salesTable = this.salesTable())
    {
        return this.type(_salesTable).markupAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the indicated record.
    /// </summary>
    /// <returns>
    /// A <c>RefRecId</c> type.
    /// </returns>
    public RefRecId matchingAgreementLine()
    {
        return this.MatchingAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesLine</c> record may be confirmed.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for the sales line to investigate; optional.
    /// </param>
    /// <returns>
    /// true if the <c>SalesLine</c> record may be confirmed; otherwise, false.
    /// </returns>
    public boolean mayConfirmationBeUpdated(SalesTable _salesTable = this.salesTable())
    {
        if (this.SalesId != _salesTable.SalesId)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        return this.type(_salesTable).mayConfirmationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoice4PaymBeUpdated_RU</Name>
				<Source><![CDATA[
    public boolean mayInvoice4PaymBeUpdated_RU()
    {
        return this.type().mayInvoice4PaymBeUpdated_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoiceBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesLine</c> record may be invoiced.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for the sales line to investigate; optional.
    /// </param>
    /// <returns>
    /// true if the <c>SalesLine</c> record may be invoiced; otherwise, false.
    /// </returns>
    public boolean mayInvoiceBeUpdated(SalesTable  _salesTable = this.salesTable())
    {
        if (this.SalesId != _salesTable.SalesId)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        return this.type(_salesTable).mayInvoiceBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesLine</c> record may be packing slip updated.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for the sales line to investigate; optional.
    /// </param>
    /// <returns>
    /// true if the <c>SalesLine</c> record may be packing slip updated; otherwise, false.
    /// </returns>
    public boolean mayPackingSlipBeUpdated(SalesTable _salesTable = this.salesTable())
    {
        if (this.SalesId != _salesTable.SalesId)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        return this.type(_salesTable).mayPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeRegistrated</Name>
				<Source><![CDATA[
    public boolean mayPickingListBeRegistrated()
    {
        return this.type().mayPickingListBeRegistered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesLine</c> record may be picked.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for the sales line to investigate; optional.
    /// </param>
    /// <returns>
    /// true if the <c>SalesLine</c> record may be picked; otherwise, false.
    /// </returns>
    public boolean mayPickingListBeUpdated(SalesTable   _salesTable = this.salesTable())
    {
        if (this.SalesId != _salesTable.SalesId)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        return this.type(_salesTable).mayPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    public boolean mayProjectPackingSlipBeUpdated()
    {
        return this.type().mayProjectPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPickingListBeUpdated</Name>
				<Source><![CDATA[
    public boolean mayProjectPickingListBeUpdated(SalesTable _salesTable = this.salesTable())
    {
        if (this.SalesId != _salesTable.SalesId)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        return this.type(_salesTable).mayProjectPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowPartialPickedEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the partially picked sales line is allowed to be edited.
    /// </summary>
    /// <returns>
    /// true if editable after partial pick; otherwise, false.
    /// </returns>
    public boolean mcrAllowPartialPickedEdit()
    {
        boolean ret = true;
        SalesTable salesTable = SalesTable::find(this.SalesId);

        switch (salesTable.SalesStatus)
        {
            case SalesStatus::None:
            case SalesStatus::Backorder:
                if (this.mcrPickedLineQuantity())
                {
                    // Disable everything except the quantity field
                    ret = false;
                }
                else
                {
                    ret = true;
                }
                break;

            case SalesStatus::Canceled:
            case SalesStatus::Delivered:
            case SalesStatus::Invoiced:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAutoChangeTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the tax group if auto tax search is turned on.///
    /// </summary>
    /// <remarks>
    /// Does nothing if auto tax search is turned off.
    /// </remarks>
    void mcrAutoChangeTaxGroup()
    {
        MCRAutoTaxSearch autoTaxSearch;

        autoTaxSearch = new MCRAutoTaxSearch();

        if (autoTaxSearch.autoSearchActive())
        {
            this.TaxGroup = autoTaxSearch.setSalesTaxGroup(this.deliveryAddress().Street,
                                                           this.deliveryAddress().State,
                                                           this.deliveryAddress().County,
                                                           this.deliveryAddress().ZipCode,
                                                           this.deliveryAddress().CountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCanContinuityLinePick</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Looks at the payment schedules since
    ///     they are the things that would stop it from processing.
    /// </summary>
    /// <returns>
    /// true if the continuity payment schedules are available to be processed by inventory; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Return true if:
    ///     - not a continuity child
    ///     - continuity, bill up front, no schedule.
    ///     - continuity, bill up front, schedule - on account
    ///     - continuity, bill up front, schedule - credit card - all submitted are authorized.
    ///     - continuity, not bill up front, no schedule.
    ///     - continuity, not bill up front, schedule - on account
    ///     - continuity, not bill up front, schedule - credit card - all submitted are authorized.
    ///     Return FALSE if:
    ///     - continuity, bill up front, schedule - credit card - any on hold or denied
    ///     due today or before.
    ///     - continuity, not bill up front, schedule - credit card - any on hold or denied
    ///     due today or before.
    ///     Default return value is true so true conditions skipped.
    /// </remarks>
    public boolean mcrCanContinuityLinePick()
    {
        SalesTable              salesTable =  this.salesTable();
        MCRSalesTable           mcrSalesTable = salesTable.mcrSalesTable();
        CustPaymSched           custPaymSched;
        CustPaymSchedLine       custPaymSchedLine;
        MCRCustPaymTable        mcrCustPaymTable;
        CreditCardAuthTrans     creditCardAuthTrans;
        TableId                 checkTableID;
        RecId                   checkRecID;
        MCRContinuityCustHeader mcrContinuityCustHeader;

        // Order is a continuity child order.
        if (mcrSalesTable.ContinuityChild)
        {
            // Child order has a payment schedule.
            if (salesTable.PaymentSched)
            {
                // Set the fields to check payment schedules with below.
                checkTableID = salesTable.TableId;
                checkRecID = salesTable.RecId;
            }
            else
            {
                // Check to see if it is a bill up front with schedule.  If it is
                // not paid, then it could have a schedule.
                if (mcrSalesTable.ContinuityLineEval !=  MCRContinuityLineEval::Paid)
                {
                    // Get the continuity customer header record for the parent sales order.
                    mcrContinuityCustHeader = MCRContinuityCustHeader::find(
                             SalesTableLinks::find(salesTable.SalesId).mcrMainInventTransId);
                    if (mcrContinuityCustHeader.PaymentScheduleId)
                    {
                        checkTableID = mcrContinuityCustHeader.TableId;
                        checkRecID = mcrContinuityCustHeader.RecId;
                    }
                }
            }
        }
        // Return true since not continuity child order.

        // If payment schedule records to check, check them.
        if (checkTableID && checkRecID)
        {
            // Check the payment schedules to see if billed/processed.
            custPaymSched = CustPaymSched::find(checkTableID, checkRecID);

            select firstonly ParentRecID, DueDate, RecId
                from  custPaymSchedLine
                    where custPaymSchedLine.ParentRecID ==  custPaymSched.RecId
                        && custPaymSchedLine.DueDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                    exists join  RefTableId, RefRecId, RecId
                    from  mcrCustPaymTable
                    where mcrCustPaymTable.RefTableId == tableNum(CustPaymSchedLine)
                        && mcrCustPaymTable.RefRecId == custPaymSchedLine.RecId
                    exists join creditCardAuthTrans
                    where creditCardAuthTrans.mcrPaymRecId == mcrCustPaymTable.RecId
                        && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Declined;
            if (custPaymSchedLine)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCheckComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the ship complete is checked.
    /// </summary>
    /// <returns>
    /// true if the order is ship complete; otherwise, false.
    /// </returns>
    public boolean mcrCheckComplete()
    {
        boolean ok = true;

        if (this.Complete == NoYes::Yes)
        {
            //  Do not allow complete flag to be checked for ship alone items whose
            //  sales quantity is greater than the effective sales multiple quantity.
            if (this.mcrInventTable().ShipAlone
                && this.SalesQty > this.inventTable().inventItemSalesSetup().mcrQuantityEffectiveMultiple())
            {
                ok = checkFailed(strFmt("@MCR22368",
                    fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, Complete))));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCheckSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales line where the item is a gift card.
    /// </summary>
    /// <returns>
    /// true if the order is a gift card; otherwise, false.
    /// </returns>
    public boolean mcrCheckSalesPrice()
    {
        return (RetailParameters::find().GiftcardItem == this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrConvertShipToParentToReg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a Ship To Parent line back to a regular line.
    /// </summary>
    /// <remarks>
    ///     Happens when all the children are
    ///     deleted or their quantity was changed to
    ///     0, which is the same thing.
    /// </remarks>
    private void mcrConvertShipToParentToReg()
    {
        SalesTable salesTableDeliveryAddress;
        // No child lines, set to a regular line.
        this.LineDeliveryType = LineDeliveryType::OrderLine;
        // Set delivery info back to default from the header.
        salesTableDeliveryAddress  = this.salesTable();
        this.DeliveryPostalAddress  = salesTableDeliveryAddress.DeliveryPostalAddress;
        this.DeliveryName           = salesTableDeliveryAddress.DeliveryName;
        this.DeliveryName           = salesTableDeliveryAddress.DeliveryName;

        // Set back to default of 1.
        this.SalesQty            = 1;
        this.RemainSalesPhysical = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateContinuityCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a continuity line through the <c>axSalesLine</c> class.
    /// </summary>
    /// <param name="_interactive">
    /// Identifies if you are running interactively with the user.
    /// </param>
    public void mcrCreateContinuityCust(boolean _interactive = true)
    {
        MCRContinuityCustHeader     mcrContinuityCustHeader;
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;

        MCRLoadContinuityCustInfo   mcrLoadContinuityCustInfo;
        MCRSalesLine                mcrSalesLine = this.mcrSalesLine();

        // Don't create if line is not associated to a continuity schedule or a
        // continuity schedule has already been created.
        if (!mcrSalesLine.ContinuityScheduleId || MCRContinuityCustHeader::find(this.InventTransId))
        {
            return;
        }

        // Launch forms if running interactively w/ user.
        if (_interactive)
        {
            MCRContinuityCustHeader::launchContinuityForms(this);
        }
        else // Create a schedule w/ the best available info for batch mode.
        {
            mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(mcrSalesLine.ContinuityScheduleId);
            mcrContinuityCustHeader = mcrContinuityCustHeader.createDfltContCustHeader(this, mcrContinuityScheduleHeader);

            if (mcrContinuityCustHeader.PaymentScheduleId)
            {
                // Create the payment schedule
                MCRContinuityCustHeader::createPaymentSched(mcrContinuityCustHeader);
            }

            mcrLoadContinuityCustInfo = new MCRLoadContinuityCustInfo();
            mcrLoadContinuityCustInfo.insertLineData(mcrContinuityCustHeader.InventTransId,
                                                   mcrContinuityCustHeader.ScheduleId, this.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDefaultLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default location based on the order entry, item, and quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID.
    /// </param>
    /// <returns>
    /// The default location ID.
    /// </returns>
    private WMSLocationId mcrDefaultLocationId(ItemId  _itemId, InventDimId    _inventDimId)
    {
        InventDim           inventDim = InventDim::find(_inventDimId);
        InventDirection     inventDirection;
        InventDim           inventDimItemLoc;
        WMSLocation         wmsLocation;

        if (!EcoResProductDimGroupSetup::newItemId(_itemId).getFieldSetup(fieldNum(InventDim, wmsLocationId)).isActive())
            return '';

        if (this.salesTable().SalesType != SalesType::ReturnItem)
        {
            if (this.SalesQty < 0)
                inventDirection = InventDirection::Receipt;
            else
                inventDirection = InventDirection::Issue;
        }
        else
        {
            inventDirection = InventDirection::Receipt;
        }

        inventDimItemLoc.data(inventDim.data());
        inventDimItemLoc = InventDim::findOrCreate(inventDimItemLoc);

        wmsLocation = WMSLocation::defaultItemLocation(_itemId, inventDirection, inventDimItemLoc);

        return wmsLocation.wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeleteOrderLineEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any order events that are related to the sales line that is being deleted.
    /// </summary>
    private void mcrDeleteOrderLineEvents()
    {
        MCROrderEventTable orderEventTable;
        ttsbegin;
        delete_from orderEventTable
            where orderEventTable.SalesId == this.SalesId
                && orderEventTable.InventTransId == this.InventTransId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeliverPackedInTotalSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total sales quantity that is packed for the sales line.
    /// </summary>
    /// <returns>
    /// The total <c>SalesQty</c> that was packed for the sales line.
    /// </returns>
    public display SalesQty mcrDeliverPackedInTotalSalesUnit()
    {
        InventTrans inventTrans;
        SalesQty    qty;
        InventTransOrigin inventTransOrigin;

        select sum(Qty) from inventTrans
            exists join  inventTransOrigin
            where inventTransOrigin.InventTransId  == this.InventTransId
            &&    inventTrans.InventTransOrigin     == inventTransOrigin.RecId
            &&    inventTrans.StatusIssue           == StatusIssue::Deducted
            &&    inventTrans.StatusReceipt         == StatusReceipt::None;
        if (inventTrans)
        {
            InventTable	inventTable = this.inventTable();

            qty = -inventTrans.Qty;
            qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                        this.InventDimId,
                                                                                        qty,
                                                                                        inventTable.inventUnitId(),
                                                                                        inventTable.salesUnitId(),
                                                                                        NoYes::Yes);
        }
        else
        {
            qty = 0;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeliverPickedInTotalSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total of the deliver now and picked values.
    /// </summary>
    /// <returns>
    /// The sum of the deliver now and picked values.
    /// </returns>
    public display SalesQty mcrDeliverPickedInTotalSalesUnit()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        SalesQty            qty;

        select firstonly Qty from inventTrans
            exists join inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
            &&    inventTransOrigin.InventTransId  == this.InventTransId
            &&    inventTrans.StatusReceipt         == StatusReceipt::None
            &&   (inventTrans.StatusIssue           == StatusIssue::ReservPhysical
            ||    inventTrans.StatusIssue           == StatusIssue::Picked);

        if (inventTrans)
        {
            qty = -inventTrans.Qty;
            qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                        this.InventDimId,
                                                                                        qty,
                                                                                        this.inventTable().inventUnitId(),
                                                                                        this.SalesUnit,
                                                                                        NoYes::Yes);
        }
        else
        {
            qty = 0;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeliveryAddressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery address.
    /// </summary>
    /// <returns>
    /// The delivery address for the sales line.
    /// </returns>
    public display LogisticsAddressing mcrDeliveryAddressing()
    {
        return this.deliveryAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory configuration.
    /// </summary>
    /// <returns>
    /// Returns the inventory configuration for the item on the sales line.
    /// </returns>
    public display EcoResItemConfigurationName mcrDisplayConfigId()
    {
        return InventDim::find(this.InventDimId).ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the color of the item.
    /// </summary>
    /// <returns>
    /// Returns the color of the item on the sales line.
    /// </returns>
    public display EcoResItemColorName mcrDisplayInventColorId()
    {
        return InventDim::find(this.InventDimId).InventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item size.
    /// </summary>
    /// <returns>
    /// Returns the size of the item on the sales line.
    /// </returns>
    public display EcoResItemSizeName mcrDisplayInventSizeId()
    {
        return InventDim::find(this.InventDimId).InventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item style.
    /// </summary>
    /// <returns>
    /// Returns the style of the item on the sales line.
    /// </returns>
    public display EcoResItemStyleName mcrDisplayInventStyleId()
    {
        return InventDim::find(this.InventDimId).InventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item version.
    /// </summary>
    /// <returns>
    /// Returns the version of the item on the sales line.
    /// </returns>
    public display EcoResItemVersionName mcrDisplayInventVersionId()
    {
        return InventDim::find(this.InventDimId).InventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayLineAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the line association image.
    /// </summary>
    /// <returns>
    /// The display line association image.
    /// </returns>
    /// <remarks>
    /// If the salesLine is associated with another salesLine a resource image is returned.
    /// </remarks>
    public display Integer mcrDisplayLineAssociation()
    {
        SalesLine       salesLine;
        MCRSalesLine    mcrSalesLine;
        #resAppl

        if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            select firstonly RecId from salesLine
                where salesLine.LineDeliveryType  == LineDeliveryType::DeliveryLine
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
                   && mcrSalesLine.ParentLotId     == this.InventTransId;

            if (salesLine)
            {
                return #ImageMenus;
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayMarginPercentStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the margin percentage.
    /// </summary>
    /// <returns>
    /// The margin percentage.
    /// </returns>
    public display MCRMarginPecentStr mcrDisplayMarginPercentStr()
    {
        return MCRMarginAlert::marginPercentToMarginPercentStrExt(this.McrMarginPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMcrMarginPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the margin percentage on the sales line. If there is no price available, then the percentage will be set to value of the realMin() function.
    /// </summary>
    /// <param name="_canSet">
    /// The source code setup; optional;
    /// </param>
    /// <returns>true if a new value was set; otherwise, false.</returns>
    public boolean setMcrMarginPercent(boolean _canSet = (this.RecId != 0))
    {
        boolean ret = false;

        if (_canSet && SalesParameters::find().mcrEnableMarginAlert)
        {
            using(var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().setMcrMarginPercent(this))
            {
                boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

                SalesPrice salesPriceOrig;
                SalesLineAmount lineAmountOrig;
                if (isKittingEnabled)
                {
                    salesPriceOrig = this.SalesPrice;
                    lineAmountOrig = this.LineAmount;
                }

                MCRMarginAlert_Sales mcrMarginAlert_Sales = MCRMarginAlert_Sales::newSalesLine(this);
                mcrMarginAlert_Sales.calcMargin();
            
                McrMarginPercent marginPercent = mcrMarginAlert_Sales.marginPercentToPersist();
                if (marginPercent != this.McrMarginPercent)
                {
                    this.McrMarginPercent = marginPercent;
                    ret = true;
                }
            
                // Indicate that it is not necessary to update as part of the salesLine.Update function
                this.McrMarginUpdated = true;

                if (isKittingEnabled)
                {
                    this.SalesPrice = salesPriceOrig;
                    this.LineAmount = lineAmountOrig;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the delivery customers phone number.
    /// </summary>
    /// <returns>
    /// The phone number of the delivery customer on the sales line.
    /// </returns>
    public display LogisticsElectronicAddressLocator mcrDisplayPhone()
    {
        LogisticsLocation logisticsLocation;
        LogisticsElectronicAddress logisticsElectronicAddress;

        select firstonly RecId, ParentLocation from logisticsLocation
            where logisticsLocation.ParentLocation == this.deliveryAddress().Location
        join Locator, Location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == logisticsLocation.RecId
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;

        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the price override icon.
    /// </summary>
    /// <returns>
    /// The defined  price override icon.
    /// </returns>
    public display MCRDisplayPriceOverride mcrDisplayPriceOverride()
    {
        MCRSalesLinePriceOverride mcrSalesLinePriceOverride;
        #MCRresAppl

        if (this.LineDeliveryType != LineDeliveryType::DeliveryLine)
        {
            select firstOnly PriceOverride from mcrSalesLinePriceOverride
                   where mcrSalesLinePriceOverride.SalesLine == this.RecId;

            if (mcrSalesLinePriceOverride.PriceOverride == NoYes::Yes)
            {
                return #Image_PriceOverride;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPricePerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the price per unit.
    /// </summary>
    /// <returns>
    /// The <c>PriceCur</c> per unit.
    /// </returns>
    public display PriceCur mcrDisplayPricePerUnit()
    {
        PriceCur pricePerUnit;
        if (this.SalesQty != 0)
        {
            pricePerUnit = this.LineAmount / abs(this.SalesQty);
        }
        return pricePerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayUnitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the unit amount.
    /// </summary>
    /// <returns>
    /// The Line amount per sales quantity if sales quantity does not equal zero and
    /// the line amount if <c>salesQty</c> does equal zero.
    /// </returns>
    /// <remarks>
    /// Returns the unit amount by dividing the line amount by the
    /// selling quantity.  If there is no selling quantity, which should not
    /// occur, return line amount.
    /// </remarks>
    public display LineAmount mcrDisplayUnitAmount()
    {
        if (this.SalesQty != 0)
        {
            return this.LineAmount/this.SalesQty;
        }
        else
        {
            return this.LineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderHoldRtw</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display MCROrderStopped orderHoldRtw()
    {
        return ASOHOrderManagement::setOrderStopped(this, ASOHRelatedDocuments::WHSRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDlvModeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>MCRExpedite</c> flag based on the delivery mode.
    /// </summary>
    void mcrDlvModeModified()
    {
        MCRExpedite mcrExpedite;
        MCRSalesLine mcrSalesLine = this.mcrSalesLine();

        mcrExpedite = DlvMode::find(this.DlvMode).mcrExpedite;
        if (mcrExpedite != mcrSalesLine.Expedite)
        {
            mcrSalesLine.Expedite = mcrExpedite;
            this.mcrPackMCRSalesLine(mcrSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetPhoneNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of phone numbers.
    /// </summary>
    /// <returns>
    /// A list of phone numbers that correspond to the delivery address.
    /// </returns>
    public List mcrGetPhoneNumbers()
    {
        List list = new List(Types::String);
        RecId deliveryLocation = this.deliveryAddress().Location;

        if (deliveryLocation != 0)
        {
            LogisticsLocation logisticsLocation;
            LogisticsElectronicAddress logisticsElectronicAddress;
            ListIterator iterator = new ListIterator(list);

            while select RecId, ParentLocation from logisticsLocation
                where logisticsLocation.ParentLocation == deliveryLocation
                    join Locator, Location, Type from logisticsElectronicAddress
                        where logisticsElectronicAddress.Location == logisticsLocation.RecId
                            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone
            {
                list.addEnd(logisticsElectronicAddress.Locator);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetReturnedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the returned quantity.
    /// </summary>
    /// <returns>
    /// The quantity that has been returned from the line.
    /// </returns>
    real mcrGetReturnedQty()
    {
        SalesLine   salesLineReturn;
        real        factor = 0;
        real        retVal;

        if (RetailSalesLineUpdateGetReturnedQtyFlight::instance().isEnabled())
        {
            SalesQty qty;
            PdsCWInventQty cwQty;
            [qty, cwQty] = SalesLine::pdsRemainReturnLotQtyAllCreditNote(this.InventTransId, this.ProjId, this.SalesUnit);

            return qty;
        }

        if (this.QtyOrdered == 0 || this.SalesQty == 0)
        {
            retVal = 0;
        }
        else
        {
            factor = this.QtyOrdered/this.SalesQty;

            select sum(QtyOrdered) from salesLineReturn
                    where  salesLineReturn.InventTransIdReturn == this.InventTransId;

            retVal = decRound(abs(salesLineReturn.QtyOrdered)/factor, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.SalesUnit)));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetSalesLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats the line amount for display and confirmation letter.
    /// </summary>
    /// <returns>
    /// The sales line amount.
    /// </returns>
    public display SalesLineAmount mcrGetSalesLineAmount()
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;
        SalesLineAmount returnAmount;
        // If not a continuity item, return the amount.
        if (!this.mcrSalesLine().ContinuityScheduleId)
        {
            returnAmount =  this.LineAmount;
        }
        else
        {
            // For continuity lines, check the type of continuity.
            mcrContinuityCustHeader = MCRContinuityCustHeader::find(this.InventTransId);
            if (mcrContinuityCustHeader.BillUpFront
              && !mcrContinuityCustHeader.PaymentScheduleId)
            {
                returnAmount = this.LineAmount;
            }
            else
            {
                returnAmount = 0;
            }
        }

        return returnAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the line price for display and confirmation letter.
    /// </summary>
    /// <returns>
    /// The sales price.
    /// </returns>
    /// <remarks>
    /// Continuity items that are billed later effectively have no price.
    /// </remarks>
    public display SalesPrice mcrGetSalesPrice()
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;
        SalesPrice returnPrice;
        // If not a continuity item, return the price.
        if (!this.mcrSalesLine().ContinuityScheduleId)
        {
            returnPrice =  this.SalesPrice;
        }
        else
        {
            // For continuity lines, check the type of continuity.
            mcrContinuityCustHeader = MCRContinuityCustHeader::find(this.InventTransId);
            if (mcrContinuityCustHeader.BillUpFront
              && !mcrContinuityCustHeader.PaymentScheduleId)
            {
                returnPrice = this.SalesPrice;
            }
            else
            {
                returnPrice = 0;
            }
        }

        return returnPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds whether the sales line has a return sales line.
    /// </summary>
    /// <returns>
    /// true if the sales line has a return sales line; otherwise, false.
    /// </returns>
    public boolean mcrHasReturn()
    {
        SalesLine salesLine;
        salesLine.allowIndexHint(true);

        if (this.InventTransId)
        {
            select firstonly RecId from salesLine
                index hint InventTransIdReturnIdx
                    where  salesLine.InventTransIdReturn == this.InventTransId;
        }

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitFromSourceCodeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the source entered on the sales line is effective.
    /// </summary>
    /// <param name="_sourceCodeSetup">
    /// The source code setup; optional;
    /// </param>
    void mcrInitFromSourceCodeSetup(MCRSourceCodeSetup _sourceCodeSetup = null)
    {
        MCRSourceCodeLine   mcrSourceCodeLine;
        MCRSalesLine        mcrSalesLine = this.mcrSalesLine();

        if (mcrSalesLine)
        {
            if (!_sourceCodeSetup)
            {
                _sourceCodeSetup = MCRSourceCodeSetup::find(mcrSalesLine.SourceId);
            }

            mcrSourceCodeLine = MCRSourceCodeLine::construct(this);
            mcrSourceCodeLine.mcrInitFromSourceCodeSetup(_sourceCodeSetup);
        }
        else
        {
            mcrSalesLine.setCatalog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitShipToParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the ship to parent values.
    /// </summary>
    /// <remarks>
    ///     This method is called
    ///     when the line switches from being a regular line to a
    ///     parent ship to line.
    /// </remarks>
    private void mcrInitShipToParent()
    {
        // 0 out or it will be accounted for in the inventory count.
        this.RemainInventPhysical = 0;
        this.LineDeliveryType = LineDeliveryType::OrderLineWithMultipleDeliveries;
        this.Reservation = ItemReservation::None;
        this.DeliveryName = "@MCR12534";

        // Set to 0 such that it does not point to any postal address record;
        // essentially blanking out the delivery address.
        this.DeliveryPostalAddress = 0;

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events.
    /// </summary>
    /// <param name = "_salesLineOrig">
    /// The original sales order line which is updated.
    /// </param>
    protected void insertOrderEvent(SalesLine _salesLineOrig)
    {
        using(var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().mcrInsert(this))
        {
            // On-Update only type order events go in here
            if (_salesLineOrig.RecId)
            {
                MCROrderEventTable  mcrOrderEventTable;
            
                // Write Order event for changing the delivery address
                if (this.DeliveryPostalAddress != _salesLineOrig.DeliveryPostalAddress)
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine( this,
                                                        MCROrderEventType::ModifySLDeliveryAddress,
                                                        _salesLineOrig);
                }

                if (this.SalesPrice != _salesLineOrig.SalesPrice)
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine(this,
                                                       MCROrderEventType::SalesLinePriceOverrideTurnedOn,
                                                       _salesLineOrig);
                }

                if (this.ShippingDateRequested != _salesLineOrig.ShippingDateRequested)
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine(this, MCROrderEventType::ModifySLRequestedShipDate, _salesLineOrig);
                }

                if (this.ReceiptDateRequested != _salesLineOrig.ReceiptDateRequested)
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine(this, MCROrderEventType::ModifySLRequestedReceiptDate, _salesLineOrig);
                }

                if (this.ShippingDateConfirmed != _salesLineOrig.ShippingDateConfirmed)
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine(this, MCROrderEventType::ModifySLConfirmedShipDate, _salesLineOrig);
                }

                if (this.ReceiptDateConfirmed != _salesLineOrig.ReceiptDateConfirmed)
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine(this, MCROrderEventType::ModifySLConfirmedReceiptDate, _salesLineOrig);
                }

                if (this.SalesStatus == SalesStatus::Canceled 
                    && (!SalesLineMCRInsertOrderEventFlight::instance().isEnabled() 
                        || _salesLineOrig.SalesStatus !=  SalesStatus::Canceled))
                {
                    mcrOrderEventTable.clear();
                    mcrOrderEventTable.insertFromSalesLine(this, MCROrderEventType::CancelSalesOrderLine, _salesLineOrig);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInterCompanySalesLineOrig</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the source sales line.
    /// </summary>
    /// <param name="_forUpdate">
    /// <c>Boolean</c> to determine whether the table is selected for update; optional.
    /// </param>
    /// <returns>
    /// The original source sales line.
    /// </returns>
    SalesLine  mcrInterCompanySalesLineOrig(boolean  _forUpdate = false)
    {
        PurchLine   purchLine;
        SalesLine   salesLine;
        if (this.InterCompanyInventTransId)
        {
            changecompany(this.salesTable().InterCompanyCompanyId)
            {
                purchLine = PurchLine::findInventTransId(this.InterCompanyInventTransId, _forUpdate);
                if (purchLine.InventRefTransId)
                {
                    salesLine = SalesLine::findInventTransId(purchLine.InventRefTransId, _forUpdate);
                }
            }
        }
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invent table record for the item.
    /// </summary>
    /// <param name="_itemId">
    /// An item.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The invent table record.
    /// </returns>
    public MCRInventTable mcrInventTable(ItemId _itemId = this.ItemId,
                                   boolean _forUpdate = false)
    {
        return MCRInventTable::findByItemId(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the unit of measure.
    /// </summary>
    /// <returns>
    /// The unit of measure of the sales line.
    /// </returns>
    public UnitOfMeasureClass mcrInventUnitOfMeasureClass()
    {
        return UnitOfMeasure::findBySymbol(this.inventTable().inventUnitId()).UnitOfMeasureClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInvoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales quantity on the sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line.
    /// </param>
    /// <returns>
    /// The sales quantity on the sales line.
    /// </returns>
    public display SalesQty mcrInvoicedQty(SalesLine _salesLine)
    {
        CustInvoiceTrans    custInvoiceTrans;
        MCRSalesLine        mcrSalesLine;

        if (_salesLine.InventTransId)
        {
            select firstonly Qty from custInvoiceTrans
                exists join mcrSalesLine
                where mcrSalesLine.CustInvoiceTransRecId == custInvoiceTrans.RecId
                    && custInvoiceTrans.InventTransId == _salesLine.InventTransId;
        }
        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsAddressElementMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified delivery address field is mandatory, based
    ///     on the country.
    /// </summary>
    /// <param name="_element">
    /// The logistics address.
    /// </param>
    /// <returns>
    /// true if the address is mandatory; otherwise, false.
    /// </returns>
    public boolean mcrIsAddressElementMandatory(LogisticsAddressElement _element)
    {
        boolean retValue;
        if (this.deliveryAddress().PostBox && _element == LogisticsAddressElement::StreetName)
        {
            retValue = false;
        }
        // Multiple Ship To Parent Line does not require an address
        else if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            retValue = false;
        }
        else
        {
            retValue = LogisticsAddressFormatHeading::mcrIsAddresElementMandatory(this.deliveryAddress().CountryRegionId, _element);
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsLineFullyReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if all of the invoiced quantity on the line has been returned.
    /// </summary>
    /// <returns>
    ///     true if the line has been fully returned; otherwise, false.
    /// </returns>
    boolean mcrIsLineFullyReturned()
    {
        boolean fullyReturned = true;
        // Gets all remaining quantity in case it's partially invoiced.
        if (this.mcrTotalQtyNotInvoiced() - this.mcrReturnedExpectedQuantity() > 0)
        {
            fullyReturned = false;
        }

        return fullyReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrNextChildLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a line number for a child line (supplementary item, kit component,
    ///     ship to child) so that they stay grouped together with the parent line.
    /// </summary>
    void mcrNextChildLineNum()
    {
        SalesLine           salesLineLineNum;
        SalesLine           salesLineParent;
        InventTransId       parentlotid;
        real                lineNumIncFactor = 0.001;
        LineNum             maxChildLineNum = 0;
        MCRSalesLine        mcrSalesLineLineNum;
        MCRSalesLine        mcrSalesLineLocal = this.mcrSalesLine();

        // attempt to fetch max line number of children for this records parent
        select maxof(LineNum) from salesLineLineNum
            where salesLineLineNum.SalesId == this.SalesId
                && salesLineLineNum.LineNum != this.LineNum
            exists join mcrSalesLineLineNum
            where mcrSalesLineLineNum.SalesLine == salesLineLineNum.RecId
                && mcrSalesLineLineNum.ParentLotId == mcrSalesLineLocal.ParentLotId;

        if (salesLineLineNum.LineNum)
        {
            maxChildLineNum = salesLineLineNum.LineNum;

            // verify this line doesn't have children
            salesLineLineNum = SalesLine::find(this.SalesId, maxChildLineNum);
            parentlotid = salesLineLineNum.InventTransId;

            select maxof(LineNum) from salesLineLineNum
                where salesLineLineNum.SalesId == this.SalesId
                exists join mcrSalesLineLineNum
                where mcrSalesLineLineNum.SalesLine == salesLineLineNum.RecId
                    && mcrSalesLineLineNum.ParentLotId == parentlotid;

            if (salesLineLineNum.LineNum)
                maxChildLineNum = salesLineLineNum.LineNum;
        }
        else
        {
            salesLineParent = SalesLine::findInventTransId(mcrSalesLineLocal.ParentLotId);
            maxChildLineNum = salesLineParent.LineNum;
        }

        this.LineNum = maxChildLineNum + lineNumIncFactor;

        select minof(LineNum) from salesLineLineNum
        where salesLineLineNum.SalesId == this.SalesId &&
              salesLineLineNum.LineNum > maxChildLineNum;

        if (salesLineLineNum.LineNum != 0 &&
           salesLineLineNum.LineNum <= this.LineNum)
        {
            this.LineNum = maxChildLineNum + ((salesLineLineNum.LineNum - maxChildLineNum) / 2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOriginalInvoicedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales quantity invoiced.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line.
    /// </param>
    /// <returns>
    /// The sales quantity invoiced.
    /// </returns>
    public display SalesQty mcrOriginalInvoicedInTotal(SalesLine _salesLine)
    {
        return SalesLine::findInventTransId(_salesLine.InventTransIdReturn).invoicedInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOriginalMCRReturnedInventInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity of returned inventory.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line.
    /// </param>
    /// <returns>
    /// The sales quantity of the inventory that was returned.
    /// </returns>
    public display SalesQty mcrOriginalMCRReturnedInventInTotal(SalesLine _salesLine)
    {
        return SalesLine::findInventTransId(_salesLine.InventTransIdReturn).mcrReturnedInventInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs retail sales line extension table into <c>MCRSalesLine</c> field.
    /// </summary>
    /// <param name="_mcrSalesLine">
    /// Extension table to be packed.
    /// </param>
    public void mcrPackMCRSalesLine(MCRSalesLine _mcrSalesLine)
    {
        _mcrSalesLine.SalesLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesLineDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs retail sales line drop shipment extension table into <c>MCRSalesLineDropShipment</c> field.
    /// </summary>
    /// <param name="_mcrSalesLineDropShipment">
    /// Extension table to be packed.
    /// </param>
    public void mcrPackMCRSalesLineDropShipment(MCRSalesLineDropShipment _mcrSalesLineDropShipment)
    {
        _mcrSalesLineDropShipment.SalesLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesLineDropShipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesLinePriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs retail sales line price override extension table into <c>MCRSalesLinePriceOverride</c> field.
    /// </summary>
    /// <param name="_mcrSalesLinePriceOverride">
    /// Extension table to be packed.
    /// </param>
    public void mcrPackMCRSalesLinePriceOverride(MCRSalesLinePriceOverride _mcrSalesLinePriceOverride)
    {
        _mcrSalesLinePriceOverride.SalesLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesLinePriceOverride);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPickedLineQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the picked inventory on the line.
    /// </summary>
    /// <returns>
    /// The inventory quantity picked on the line.
    /// </returns>
    /// <remarks>
    /// Inventory quantity is different than the sales quantity.
    /// Number of kits picked is handled separately.
    /// </remarks>
    public InventQty mcrPickedLineQuantity()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select sum(Qty) from inventTrans
        exists join inventTransOrigin
        where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
        &&    inventTransOrigin.InventTransId  == this.InventTransId
        &&    (
              (inventTrans.StatusReceipt    == StatusReceipt::None
                  &&  (inventTrans.StatusIssue    == StatusIssue::Deducted
                      || inventTrans.StatusIssue  == StatusIssue::Picked
                      || inventTrans.StatusIssue  == StatusIssue::Sold))
              || (inventTrans.StatusReceipt == StatusReceipt::Purchased
                  && inventTrans.StatusIssue      == StatusIssue::None));

        return - inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPreviouslyReturnedCreditFromReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity credited from a previous return.
    /// </summary>
    /// <returns>
    /// The quantity from a previously credited return.
    /// </returns>
    public Qty mcrPreviouslyReturnedCreditFromReturn()
    {
        SalesLine           salesLine;
        MCRCustCreditTable  mcrCustCreditTable;

        select sum(ExpectedRetQty) from salesLine
            where salesLine.SalesType == SalesType::ReturnItem
                && (salesLine.SalesStatus == SalesStatus::None
                    || salesLine.SalesStatus == SalesStatus::Backorder
                    || salesLine.SalesStatus == SalesStatus::Delivered
                    || salesLine.SalesStatus == SalesStatus::Invoiced)
            exists join mcrCustCreditTable
                where mcrCustCreditTable.InventTransID == salesLine.InventTransId;

        return abs(salesLine.ExpectedRetQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPreviouslyReturnedNoCreditReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity not credited from a previous return.
    /// </summary>
    /// <returns>
    /// The quantity from a previously not credited return.
    /// </returns>
    public Qty mcrPreviouslyReturnedNoCreditReturn()
    {
        SalesLine           salesLine;
        MCRCustCreditTable  mcrCustCreditTable;

        select sum(ExpectedRetQty) from salesLine
            where salesLine.RecId != this.RecId
                && salesLine.SalesType == SalesType::ReturnItem
                && salesLine.InventTransIdReturn == this.InventTransIdReturn
                && (salesLine.SalesStatus == SalesStatus::None
                    || salesLine.SalesStatus == SalesStatus::Backorder
                    || salesLine.SalesStatus == SalesStatus::Delivered
                    || salesLine.SalesStatus == SalesStatus::Invoiced)
            notexists join mcrCustCreditTable
                where mcrCustCreditTable.InventTransID == salesLine.InventTransId;

        return abs(salesLine.ExpectedRetQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPricePerSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the price per sales quantity.
    /// </summary>
    /// <returns>
    /// The price per quantity.
    /// </returns>
    /// <remarks>
    /// Price per quantity is the net amount divided by the sales quantity,
    /// which would be in the sales unit. This is different than the line's
    /// sales price, because this method takes discounts into consideration.
    /// </remarks>
    public SalesPrice mcrPricePerSalesQty()
    {
        return this.calcLineAmountForced() / (this.SalesQty ? this.SalesQty: 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQtyInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity invoiced.
    /// </summary>
    /// <returns>
    /// The quantity invoiced.
    /// </returns>
    public Qty mcrQtyInvoice()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        select sum(Qty) from inventTrans
            where inventTrans.StatusIssue == StatusIssue::Sold && inventTrans.StatusReceipt == StatusReceipt::None
                exists join inventTransOrigin
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTransOrigin.InventTransId == this.InventTransIdReturn;

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQtyInvoicePerBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity invoiced per batch.
    /// </summary>
    /// <param name="_batchId">
    /// The batch ID.
    /// </param>
    /// <returns>
    /// The quantity invoiced per batch.
    /// </returns>
    private Qty mcrQtyInvoicePerBatch(InventBatchId _batchId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        if (_batchId)
        {
            select sum(Qty) from inventTrans
                where inventTrans.StatusIssue == StatusIssue::Sold && inventTrans.StatusReceipt == StatusReceipt::None
            exists join RecId from inventTransOrigin
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTransOrigin.InventTransId == this.InventTransIdReturn
            exists join RecId from inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
                    && inventDim.InventBatchId == _batchId;
        }

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrQtyInvoicePerBatchOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// The quantity invoiced per original batch.
    /// </summary>
    /// <param name="_batchId">
    /// The batch ID.
    /// </param>
    /// <returns>
    /// The quantity invoiced per original batch.
    /// </returns>
    public Qty mcrQtyInvoicePerBatchOrig(InventBatchId _batchId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        if (_batchId)
        {
            select sum(Qty) from inventTrans
                where inventTrans.StatusIssue == StatusIssue::Sold && inventTrans.StatusReceipt == StatusReceipt::None
                exists join inventTransOrigin
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTransOrigin.InventTransId == this.InventTransId
                exists join inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
                    && inventDim.InventBatchId == _batchId;
        }

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the remaining physical inventory.
    /// </summary>
    /// <returns>
    ///     The remaining physical inventory.
    /// </returns>
    /// <remarks>
    ///     Multiple ship to parent lines do not contain a <c>RemainInventPhysical</c>
    ///     value ever since it would be reflected in inventory.  Therefore,
    ///     if the line is a parent ship to line return the sum if the corresponding
    ///     children lines.
    /// </remarks>
    InventQty mcrRemainInventPhysical()
    {
        SalesLine           salesLineSum;
        InventQty           remainInventPhysical;
        MCRSalesLine        mcrSalesLine;

        if (this.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            select sum(RemainInventPhysical) from salesLineSum
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == salesLineSum.RecId
                && mcrSalesLine.ParentLotId == this.InventTransId;

            remainInventPhysical = salesLineSum.RemainInventPhysical;
        }
        else
        {
            remainInventPhysical = this.RemainInventPhysical;
        }

        return(remainInventPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRepriceChildShipToLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reprices all of the child ship to lines when the parent price changes.
    /// </summary>
    /// <param name="_parentSalesLine">
    ///     The parent sales line.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Child sales line update validation failed.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Child sales line update validation failed.
    /// </exception>
    void mcrRepriceChildShipToLine(SalesLine _parentSalesLine)
    {
        SalesLine           childSalesLine;
        SalesLine           salesLineQtySum;
        real                totalChildLineQuantity = 0;
        real                proportion = 1;
        real                sumLineAmount = 0;
        PriceUnit           priceUnit = 1;
        MCRSalesLine        mcrSalesLine;

        select sum(SalesQty) from salesLineQtySum
            where salesLineQtySum.LineDeliveryType == LineDeliveryType::DeliveryLine
            exists join mcrSalesLine
            where mcrSalesLine.SalesLine == salesLineQtySum.RecId
                && mcrSalesLine.ParentLotId == _parentSalesLine.InventTransId;

        totalChildLineQuantity = salesLineQtySum.SalesQty;

        ttsbegin;

        while select forupdate childSalesLine
            where childSalesLine.SalesId       == _parentSalesLine.SalesId
            exists join mcrSalesLine
            where mcrSalesLine.SalesLine == childSalesLine.RecId
                && mcrSalesLine.ParentLotId == _parentSalesLine.InventTransId
        {
            proportion = childSalesLine.SalesQty/totalChildLineQuantity;

            childSalesLine.LineAmount = CurrencyExchangeHelper::amount(_parentSalesLine.LineAmount * proportion, childSalesLine.CurrencyCode);

            childSalesLine.SalesPrice = CurrencyExchangeHelper::price(childSalesLine.LineAmount / childSalesLine.SalesQty * priceUnit, childSalesLine.CurrencyCode);

            sumLineAmount += childSalesLine.LineAmount;

            if (childSalesLine.validateWrite())
            {
                childSalesLine.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            if (this.RecId == childSalesLine.RecId)
            {
                this.LineAmount = childSalesLine.LineAmount;
                this.SalesPrice = childSalesLine.SalesPrice;
            }
        }

        // If the sum of the line amounts for each sales line does not add up to
        // the parent price then one of the child line amounts needs adjusted.
        if (sumLineAmount != _parentSalesLine.LineAmount)
        {
            select firstonly forupdate childSalesLine
                order by LineNum desc
                where childSalesLine.SalesId        == _parentSalesLine.SalesId
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == childSalesLine.RecId
                    && mcrSalesLine.ParentLotId == _parentSalesLine.InventTransId;

            if (childSalesLine)
            {
                childSalesLine.LineAmount = CurrencyExchangeHelper::amount(childSalesLine.LineAmount + _parentSalesLine.LineAmount - sumLineAmount, childSalesLine.CurrencyCode);

                childSalesLine.SalesPrice = CurrencyExchangeHelper::price(childSalesLine.LineAmount / childSalesLine.SalesQty * priceUnit, childSalesLine.CurrencyCode);

                if (childSalesLine.validateWrite())
                {
                    childSalesLine.update();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRetailGiftCardTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailGiftCardTable</c> for the current record.
    /// </summary>
    /// <returns>
    /// The related <c>RetailGiftCardTable</c> record.
    /// </returns>
    public RetailGiftCardTable mcrRetailGiftCardTable()
    {
        RetailGiftCardTable retailGiftCardTable;
        if (this.InventTransId && this.ItemId == RetailParameters::find().GiftcardItem)
        {
            retailGiftCardTable = RetailGiftCardTable::find(RetailGiftCardTransactions::mcrFindInventTransId(this.InventTransId).CardNumber);
        }
        return retailGiftCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrReturnedExpectedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total quantity expected to be returned for the sales line.
    /// </summary>
    /// <returns>
    ///     The total expected quantity to be returned for the sales line.
    /// </returns>
    public InventQty mcrReturnedExpectedQuantity()
    {
        SalesLine   salesLine;
        Qty         ret;

        select sum(ExpectedRetQty) from salesLine
            where salesLine.InventTransIdReturn == this.InventTransId;

        ret = -salesLine.ExpectedRetQty;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrReturnedInventInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total quantity returned for the sales line.
    /// </summary>
    /// <returns>
    /// The total returned quantity for the sales line.
    /// </returns>
    public display InventQty mcrReturnedInventInTotal()
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty = 0;
        InventTransOriginId originId;
        originId = InventTransOrigin::findByInventTransId(this.InventTransId).RecId;

        // Check if originId exists.
        if (this.InventTransId && originId)
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(originId);

            inventQty = inventTransIdSum.mcrCalcSOReturnQtySum();
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the retail sales line record.
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// A record of <c>MCRSalesLine</c>
    /// </returns>
    public MCRSalesLine mcrSalesLine(boolean _packNewExtensionTable = false)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesLine), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesLineDetailedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales line's detailed status.
    /// </summary>
    /// <returns>
    /// The sales line's detailed status.
    /// </returns>
    public display MCRSalesLineDetailedStatus mcrSalesLineDetailedStatus()
    {
        return MCRSalesDetailedStatus::salesLineDetailedStatus(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesLineDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the retail sales line drop shipment record.
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// A record of <c>MCRSalesLineDropShipment</c>
    /// </returns>
    public MCRSalesLineDropShipment mcrSalesLineDropShipment(boolean _packNewExtensionTable = false)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesLineDropShipment), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesLinePriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the retail sales line price override record.
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// A record of <c>MCRSalesLinePriceOverride</c> if one exists; otherwise empty buffer.
    /// </returns>
    public MCRSalesLinePriceOverride mcrSalesLinePriceOverride(boolean _packNewExtensionTable = false)
    {
        MCRSalesLinePriceOverride mcrSalesLinePriceOverride;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrSalesLinePriceOverride =  this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesLinePriceOverride), _packNewExtensionTable);
        }
        return mcrSalesLinePriceOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQtyDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the delivered sales quantity.
    /// </summary>
    /// <returns>
    /// The sales unit quantity that has been delivered, deducted, or beyond
    /// on this line.
    /// </returns>
    /// <remarks>
    /// For a sales line with a non-negative quantity, the return value is the
    /// quantity that have been picked, packed, or invoiced.
    /// For a sales line with a negative quantity, the return value is the
    /// quantity that have been invoiced (which will be zero or negative).
    /// The result is calculated in the sales unit, not the inventory unit.
    /// </remarks>
    public display SalesQty mcrSalesQtyDelivered()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select sum(Qty) from inventTrans
            where ((inventTrans.StatusReceipt    == StatusReceipt::Purchased
            && inventTrans.StatusIssue         == StatusIssue::None)
            || ((inventTrans.StatusIssue       == StatusIssue::Deducted
            || inventTrans.StatusIssue         == StatusIssue::Sold)
            && inventTrans.StatusReceipt       == StatusReceipt::None))
            exists join inventTransOrigin
            where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
            &&    inventTransOrigin.InventTransId  == this.InventTransId;

        InventTable	inventTable = this.inventTable();

        // Convert from inventory unit to sales unit.
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                     this.InventDimId,
                                                                                     -inventTrans.Qty,
                                                                                     inventTable.salesUnitId(),
                                                                                     inventTable.inventUnitId(),
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQtyNotDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the sales unit quantity that has not been delivered.
    /// </summary>
    /// <returns>
    /// The sales unit quantity that has not been delivered, deducted, or beyond on this line.
    /// </returns>
    /// <remarks>
    /// We simply subtract what is considered delivered from the original sales quantity.
    /// </remarks>
    public display SalesQty mcrSalesQtyNotDelivered()
    {
        return this.SalesQty - this.mcrSalesQtyDelivered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQtyOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the on order quantity for the sales line.
    /// </summary>
    /// <returns>
    /// The on order quantity in sales unit of measure for this line.
    /// </returns>
    /// <remarks>
    /// This method negates the quantity from <c>inventTrans</c>, which means that
    /// a positive quantity on the sales line will also return a positive quantity here.
    /// </remarks>
    public display SalesQty mcrSalesQtyOnOrder()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventQty           inventQty;
        SalesQty            salesQty;
        select sum(Qty) from inventTrans
            exists join inventTransOrigin
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                  inventTransOrigin.InventTransId == this.InventTransId &&
                  inventTrans.StatusReceipt == StatusReceipt::None &&
                  inventTrans.StatusIssue   == StatusIssue::OnOrder;

        inventQty = - inventTrans.Qty;
        salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                         this.InventDimId,
                                                                                         inventQty,
                                                                                         this.inventTable().inventUnitId(),
                                                                                         this.SalesUnit,
                                                                                         NoYes::Yes);
        return salesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQtyReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reserved quantity of the sales line.
    /// </summary>
    /// <returns>
    /// The quantity of the item that is reserved, in the sales unit.
    /// </returns>
    /// <remarks>
    /// This method negates the quantity from <c>inventTrans</c>, which means that
    /// a positive quantity on the sales line will also return a positive quantity here.
    /// This method is also used in the batch reservation process.
    /// </remarks>
    SalesQty mcrSalesQtyReserved()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        InventQty   inventQty;
        SalesQty    salesQty;

        select sum(Qty) from inventTrans
            exists join inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
            &&    inventTransOrigin.InventTransId  == this.InventTransId
            &&    inventTrans.StatusReceipt         == StatusReceipt::None
            &&   (inventTrans.StatusIssue           == StatusIssue::ReservPhysical
            ||    inventTrans.StatusIssue           == StatusIssue::ReservOrdered);

        inventQty = - inventTrans.Qty;
        salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                         this.InventDimId,
                                                                                         inventQty,
                                                                                         this.inventTable().inventUnitId(),
                                                                                         this.SalesUnit,
                                                                                         NoYes::Yes);
        return salesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetShipToParentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the sale status to canceled on the ship
    ///     to parent when the all child sales lines are cancelled.
    /// </summary>
    /// <remarks>
    ///     Will also update the parent's status to invoiced if
    ///     some child line(s) are at an invoiced status and the
    ///     remaining ones are at a cancelled status.
    /// </remarks>
    public void mcrSetShipToParentStatus()
    {
        SalesLine           childSalesLine;
        MCRSalesLine        mcrSalesLine;

        // Look for a child line that is not at a canceled status
        select firstonly childSalesLine
            where (childSalesLine.SalesStatus == SalesStatus::None
                    || childSalesLine.SalesStatus == SalesStatus::Backorder
                    || childSalesLine.SalesStatus == SalesStatus::Delivered
                    || childSalesLine.SalesStatus == SalesStatus::Invoiced)
                && childSalesLine.LineDeliveryType == LineDeliveryType::DeliveryLine
            exists join mcrSalesLine
                where mcrSalesLine.SalesLine == childSalesLine.RecId
                    && mcrSalesLine.ParentLotId == this.InventTransId;

        // If there is not a child sales line at any status other then canceled
        // then set the parent ship to line to canceled.
        if (!childSalesLine)
        {
            this.SalesStatus = SalesStatus::Canceled;
        }
        else
        {
            // Look for a child line that is not at a canceled or invoiced status
            select firstonly childSalesLine
                where childSalesLine.LineDeliveryType == LineDeliveryType::DeliveryLine
                    && (childSalesLine.SalesStatus == SalesStatus::None
                        || childSalesLine.SalesStatus == SalesStatus::Backorder
                        || childSalesLine.SalesStatus == SalesStatus::Delivered)
                exists join mcrSalesLine
                    where mcrSalesLine.SalesLine == childSalesLine.RecId
                        && mcrSalesLine.ParentLotId == this.InventTransId;

            // If all child sales lines are either canceled or invoiced update the
            // parent status to invoiced.
            if (!childSalesLine)
            {
                this.SalesStatus = SalesStatus::Invoiced;
            }
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrTotalQtyCredited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total quantity credited.
    /// </summary>
    /// <returns>
    /// The total quantity that was credited.
    /// </returns>
    public Qty mcrTotalQtyCredited()
    {
        MCRCustCreditTable mcrCustCreditTable;

        select sum(CreditQty), sum(CreditedQty) from mcrCustCreditTable
        where mcrCustCreditTable.InventTransID == this.InventTransIdReturn;

        return (mcrCustCreditTable.CreditQty-mcrCustCreditTable.CreditedQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrTotalQtyNotInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total quantity not cancelled or invoiced.
    /// </summary>
    /// <returns>
    /// The total quantity not cancelled or invoiced.
    /// </returns>
    public display InventQty mcrTotalQtyNotInvoiced()
    {
        return this.invoicedInventInTotal() + this.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateContCustLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the quantity of the continuity customer lines
    /// to match the new sales line quantity.
    /// </summary>
    /// <remarks>
    /// If more fields are allowed to be modified
    /// suggest adding a parameter to determine which
    /// fields can be modified.
    /// </remarks>
    void mcrUpdateContCustLines()
    {
        MCRContinuityCustHeader      mcrContinuityCustHeader;
        MCRContinuityCustLine        mcrContinuityCustLine;
        MCRContinuityScheduleID      mcrContinuityCustScheduleId;
        MCRContinuityScheduleLine    mcrContinuityCustScheduleLine;

        boolean ret = true;

        if (this.RecId && this.mcrSalesLine().LineType == MCRLineType::ContinuityParent)
        {
            mcrContinuityCustScheduleId = MCRInventTable::findByItemId(this.ItemId).ContinuityScheduleId;

            mcrContinuityCustHeader = MCRContinuityCustHeader::find(this.InventTransId);

            if (!mcrContinuityCustHeader.PaymentScheduleId)
            {
                ttsbegin;
                while select firstonly forupdate mcrContinuityCustLine
                    where mcrContinuityCustLine.InventTransId == this.InventTransId
                        &&    !mcrContinuityCustLine.SalesId
                {
                    mcrContinuityCustScheduleLine = MCRContinuityScheduleLine::findSchedIdEventId(mcrContinuityCustScheduleId, mcrContinuityCustLine.ScheduleEventID);
                    mcrContinuityCustLine.QuantityOrdered = this.SalesQty * mcrContinuityCustScheduleLine.SalesQty;
                    mcrContinuityCustLine.SalesQty = this.SalesQty * mcrContinuityCustScheduleLine.SalesQty;
                    if (mcrContinuityCustLine.validateWrite())
                    {
                        mcrContinuityCustLine.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdatePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the updated prices.
    /// </summary>
    /// <remarks>
    /// If the market values change, update the price of the item based on the
    /// market values and rules.
    /// </remarks>
    public void mcrUpdatePrices()
    {
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetFulfillmentStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the fulfillment retail store id based on invent location Id.
    /// </summary>
    /// <returns>Retail store Id.</returns>
    public RetailStoreId mcrGetFulfillmentStore()
    {
        // If the warehouse is not related to a store, fulfillStore will be blank
        RetailStoreId fulfillStore = '';

        InventDim locInventDim = InventDim::find(this.InventDimId);

        if (locInventDim)
        {
            fulfillStore = RetailStoreTable::getFirstStoreIdByPickupLocation(locInventDim.InventLocationId);
        }

        return fulfillStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateReturnCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates charges based on the quantity on the line.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order header record associated with the current sales order line.
    /// </param>
    /// <param name = "_salesLineOrig">
    /// The original sales order line which is updated.
    /// </param>
    /// <remarks>
    /// Remove associated charges to a return sales line when changes
    /// to 0 (line is unselected for return).
    /// Add auto charges when it changes from 0 (line is selected
    /// for return).
    /// </remarks>
    private void mcrUpdateReturnCharges(SalesTable _salesTable, SalesLine _salesLineOrig)
    {
        using(var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().mcrUpdateReturnCharges(this))
        {
            // If the user has zeroed out the quantity for a return remove
            // any associated charges from the return line.
            if (this.ExpectedRetQty == 0 && _salesLineOrig.ExpectedRetQty != 0)
            {
                Markup::delete(this);
            }
            else if (_salesLineOrig.ExpectedRetQty != this.ExpectedRetQty)
            {
                // Deletes all the markuptrans records that were not user created.
                Markup::mcrDeleteNonUser(this);
                Markup::mcrDeleteNonUser(_salesTable);

                SalesTable salesTableOrig = SalesTable::find(_salesTable.mcrReturnSalesTable().OriginalSalesId);

                this.createReturnMarkupTrans(_salesTable);
                this.createReturnMarkupTransForHeader(_salesTable);
                Markup::mcrCopyForReturn(salesTableOrig, _salesTable);
                SalesLine returnSalesLine = SalesLine::findInventTransId(this.InventTransIdReturn);
                Markup::mcrCopyForReturn(returnSalesLine, this);

                this.createMarkupTrans(_salesTable);

                // If the original sales line was price matched, create the offsetting
                // charge so the customer will not get extra money.

                MCRCustCreditTable mcrCustCreditTable = MCRCustCreditTable::findByInventTransID(this.InventTransIdReturn);
                if (mcrCustCreditTable)
                {
                    mcrCustCreditTable.generateMiscCharge(this.InventTransId, this.InventTransIdReturn, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the source Id to proper fields.
    /// </summary>
    public void mcrUpdateSourceId(MCRSourceId sourceId)
    {
        MCRSalesLine            mcrSalesLine;
        RetailSalesLine         retailSalesLine;
        boolean                 needRecal = false;

        ttsbegin;

        mcrSalesLine = MCRSalesLine::findSalesLine(this.RecId, true);

        // Only update if the source id on line is changed.
        if (mcrSalesLine && (mcrSalesLine.SourceId != sourceId))
        {
            mcrSalesLine.SourceId = sourceId;
            mcrSalesLine.update();

            needRecal = true;
        }
        else if (!mcrSalesLine)
        {
            // Create a new mcrSalesLine if not already there.
            mcrSalesLine.SourceId = sourceId;
            mcrSalesLine.SalesLine = this.RecId;
            mcrSalesLine.insert();

            needRecal = true;
        }

        // re-calculate the price on sales line.
        if (needRecal)
        {
            // Set the catalog on retailSalesLine.
            retailSalesLine = RetailSalesLine::findBySalesLine(this.RecId, true);
            if (retailSalesLine)
            {
                // If source Id exist, set the corresponding catalog; Otherwise, set catalog to 0.
                retailSalesLine.Catalog = sourceId ? MCRSourceCodeSetup::find(sourceId).Catalog : 0;
                retailSalesLine.update();
            }

            this.setPriceDisc(inventDim::find(this.InventDimId));
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on the <c>SalesLine</c> table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform any necessary initialization or validation when the given field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field which was modified.
    /// </param>
    /// <remarks>
    /// If delivery mode changed, default in expedite flag.
    /// If potent unit modified
    /// If user picked new potent unit, then initialize potency from that.
    /// If price by potency modified reload prices and recalculate line amount
    /// If potency modified recalculate line amount
    /// If special pricing id blanked out then reload price and recalculate line
    /// If the table is a data source on a form, refresh that data source.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (FormDataUtil::isFormDataSource(this))
        {
            this.modifyField(_fieldId);
            
            this.modifiedFieldDDC(_fieldId);
            
            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.postModifiedField_BR(_fieldId);
            }
            // </GBR>

            this.postModifiedField();
        }
        else
        {
            AxSalesLine axSalesLine = AxSalesLine::newSalesLine(this);
            axSalesLine.setFieldAsTouched(_fieldId);
            axSalesLine.modify();

            if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                SalesCalcAvailableDlvDates::initDateFields(this);
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            switch (_fieldId)
            {
                // Default in the MCRExpedite flag based on the delivery mode.
                case fieldNum(SalesLine, DlvMode):
                    this.mcrDlvModeModified();
                    break;
            }

            // If this is a data source on a form, then refresh.
            if (FormDataUtil::isFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for delivery date control fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed.
    /// </param>
    public void modifiedFieldDDC(FieldId _fieldId, boolean _uiEnabled = true) //Enhanced Delivery Date Control
    {
        SalesCalcAvailableDlvDates  salesCalcAvailableDlvDates;

        // on-demand loading of salesCalcAvailableDlvDates variable, to mitigate performance
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates()
        {
            if (!salesCalcAvailableDlvDates)
            {
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this, _fieldId);
            }

            return salesCalcAvailableDlvDates;
        }

        if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None && !this.shouldSkipCheckDeliveryDateControl())
        {
            switch (_fieldId)
            {
                case fieldNum(SalesLine, DeliveryPostalAddress):    //fall through
                case fieldNum(SalesLine, DlvMode):                  //fall through
                    if (!this.RecId)
                    {
                        salesCalcAvailableDlvDates().modifiedFieldBeforeInsert(this);
                    }
                    break;

                case fieldNum(SalesLine, DeliveryDateControlType):
                    if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                    {
                        salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);
                    }

                    if (this.ReceiptDateRequested != this.orig().ReceiptDateRequested)
                    {
                        this.checkPriceDate(fieldNum(SalesLine, ReceiptDateRequested));
                    }

                    if (this.ShippingDateRequested != this.orig().ShippingDateRequested)
                    {
                        this.checkPriceDate(fieldNum(SalesLine, ShippingDateRequested));
                    }
                    break;

                case fieldNum(SalesLine, ReceiptDateRequested):
                    salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ShippingDateRequested = this.ReceiptDateRequested;
                        this.checkPriceDate(fieldNum(SalesLine, ShippingDateRequested));
                    }

                    this.checkPriceDate(_fieldId);
                    break;

                case fieldNum(SalesLine, ShippingDateRequested):
                    salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ReceiptDateRequested = this.ShippingDateRequested;
                        this.checkPriceDate(fieldNum(SalesLine, ReceiptDateRequested));
                    }

                    this.checkPriceDate(_fieldId);
                    break;

                case fieldNum(SalesLine, ShippingDateConfirmed):
                    salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);

                    if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
                        this.ReceiptDateConfirmed = this.ShippingDateConfirmed;
                    break;

                case fieldNum(SalesLine, ReceiptDateConfirmed):
                    salesCalcAvailableDlvDates().modifiedField(this, _uiEnabled);

                    if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
                        this.ShippingDateConfirmed = this.ReceiptDateConfirmed;
                    break;

                default:
            }
        }

        if (SalesLineModifiedFieldDDCPerfOptimizationFlight::instance().isEnabled())
        {
            if (!_uiEnabled && salesCalcAvailableDlvDates && salesCalcAvailableDlvDates.parmErrorText())
            {
                throw error(salesCalcAvailableDlvDates.parmErrorText());
            }
        }
        else
        {
            if (!_uiEnabled && salesCalcAvailableDlvDates().parmErrorText())
            {
                throw error(salesCalcAvailableDlvDates().parmErrorText());
            }
        }

        this.ConfirmedDlv = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCheckDeliveryDateControl</Name>
				<Source><![CDATA[
    public boolean shouldSkipCheckDeliveryDateControl()
    {
        return this.isNewRecord()
            && this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && this.SalesOrderIntegrationCreationType == SalesOrderIntegrationCreationType::WinQuote
            && SalesTableSkipDeliveryDateControlWhenWonInD365Flight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to modify.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        // <GIN>
        SalesLine_IN salesLine_IN;
        #ISOCountryRegionCodes
        // </GIN>

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            // <GEERU> <GIN>
            case fieldStr(SalesLine, ItemId):
                // </GIN> </GEERU>
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    salesLine_IN = this.salesLine_IN();
                    this.packSalesLine_IN(salesLine_IN);
                }
                // </GIN>
                // <GEERU>
                if (! this.isStocked())
                {
                    this.CountryRegionName_RU   = '';
                    this.InvoiceGTDId_RU        = '';
                }
                // </GEERU>
                // <GEERU> <GIN>
                break;
            // </GIN> </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when an inventory dimension field is modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldId">
    /// The ID of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset.
    /// </param>
    public boolean modifyInventDim(
        InventDim            _inventDim,
        FieldId              _dimFieldId,
        boolean              _resetPrice = true)
    {
        Set dimFieldIdSet = new Set(Types::Integer);
        dimFieldIdSet.add(_dimFieldId);

        return this.modifyInventDimSet(_inventDim, dimFieldIdSet, _resetPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when multiple inventory dimension fields are modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldIdSet">
    /// A set containing the ID's of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset.
    /// </param>
    public boolean modifyInventDimSet(
        InventDim            _inventDim,
        Set                  _dimFieldIdSet,
        boolean              _resetPrice = true,
        boolean              _skipInventDimDefaulting = false)
    {
        SalesOrderInstrumentationActivities activities = SalesLine::instrumentationLogger().salesOrderActivities();

        using (var activityContext = activities.modifyInventDimSet(this))
        {
            InventDim                   inventDimLocal      = InventDim::findOrCreate(_inventDim);
            AgreementHeaderRecId        matchingSalesAgreementHeaderRecId;
            SalesLine_IN                salesLine_IN;
            
            using (var nestedActivityContext = activities.modifyInventDimSetTax(this))
            {
                if (TaxIntegrationUtils::isTaxInformationEnabled())
                {
                    LogisticsPostalAddressRecId logisticsPostalAddressRecId = LogisticsPostalAddress::findByLocation(
                        TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(
                            inventDimLocal.InventLocationId, inventDimLocal.InventSiteId)).RecId;

                    TransTaxInformationHelper::newHelper().updateCompanyLocationFromTransTable(this, logisticsPostalAddressRecId);
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }

                this.type().deleteTaxUncommitted();
            }

            if (!this.ItemId)
            {
                return false;
            }

            if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDimLocal))
            {
                return false;
            }

            SalesTable salesTable = this.salesTable();

            var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgsSalesLine::construct(InventTable::find(this.ItemId), _resetPrice, salesTable.MatchingAgreement, true);
            var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldSet(_dimFieldIdSet);

            if (!_skipInventDimDefaulting)
            {
                inventDimLocal = inventDistinctProductOrderDefaultingController.inventDimModified(  this.type(),
                                                                                                    inventDimLocal,
                                                                                                    defaultingArguments);
            }

            FieldId             dimFieldId;
            SetEnumerator       enumerator = _dimFieldIdSet.getEnumerator();

            while (enumerator.moveNext())
            {
                dimFieldId = enumerator.current();

                if (InventDim::isFieldIdInventItemSetupRelevant(dimFieldId))
                {
                    this.setDeliveryDateControlType(inventDimLocal.InventDimId);
                    break;
                }
            }

            //For import entity, we need to get original dimension from database
            //So that AX will judge whether the imported dimension is changed
            if(this.RecId)
            {
                using (var nestedActivityContext = activities.modifyInventDimSetInventDimId(this))
                {
                    Salesline salesline;
                    select firstonly salesLine
                        where salesLine.RecId == this.RecId;
        
                    if(salesline)
                    {
                        this.InventDimId = salesLine.InventDimId;
                    }
                }
            }

            this.setInventDimId(inventDimLocal.InventDimId, inventDimLocal);

            if (RetailParameters::isRetailEnabledAndInUse() && !this.Blocked)
            {
                this.Blocked = RetailReturnPolicyHelper_SalesLine::isInBlockedLocation(this);
            }
        
            if (this.DeliveryDateControlType == SalesDeliveryDateControlType::ATP
                || this.DeliveryDateControlType == SalesDeliveryDateControlType::ATPPlusIssueMargin)
            {
                using (var nestedActivityContext = activities.modifyInventDimSetATP(this))
                {
                    // For derived intercompany sales lines we need to make sure that either the shipping date
                    // or the receipt date is confirmed. This will ensure that only the confirmed dates are updated
                    // for derived intercompany sales order lines.
                    if (this.isDerivedIntercompanyLine()
                        && !this.ReceiptDateConfirmed
                        && !this.ShippingDateConfirmed)
                    {
                        this.ReceiptDateConfirmed = this.ReceiptDateRequested;
                        this.ShippingDateConfirmed = this.ShippingDateRequested;
                    }

                    RetailPricingCacheManager::cacheSalesLineModifySalesQtyFieldId(
                        this.SalesId, this.LineNum, fieldNum(SalesLine, InventDimId));
                    SalesLine::modifySalesQty(this, inventDimLocal, _resetPrice);
                }
            }

            if (inventDistinctProductOrderDefaultingController.isProductDimensionModified())
            {
                using (var nestedActivityContext = activities.modifyInventDimSetDimensionModified(this))
                {
                    this.ExternalItemId = '';
                    this.initFromProductDimensions(inventDimLocal);

                    // If product dimensions change then it is possible that invent quantity is also changing.
                    if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, inventDimLocal))
                    {
                        RetailPricingCacheManager::cacheSalesLineModifySalesQtyFieldId(
                            this.SalesId, this.LineNum, fieldNum(SalesLine, InventDimId));
                        SalesLine::modifySalesQty(this, inventDimLocal, _resetPrice);
                        InventMovement::bufferSetTransQtyUnit(this);
                        this.setInventDeliverNow();
                    }
                }
            }

            boolean isReturnItem = this.returnItem();

            if (inventDistinctProductOrderDefaultingController.isSiteModified() || (ProjSalesItemReqCostPriceSetWarehouseSelectedFlight::instance().isEnabled() && inventDistinctProductOrderDefaultingController.isLocationModified() && !isReturnItem))
            {
                using (var nestedActivityContext = activities.modifyInventDimSetCalculateCostPrice(this))
                {
                    this.calculateCostPrice(inventDimLocal);
                }
            }

            if (_dimFieldIdSet.in(fieldNum(InventDim,InventLocationId)) ||
                _dimFieldIdSet.in(fieldNum(InventDim,InventSiteId))     ||
                Set::intersection(_dimFieldIdSet, InventDim::dimProductDimFieldSet()).elements() > 0)
            {
                this.modifyWMSLocation(inventDimLocal, true, InventDirection::Issue, InventDirection::Issue);
            }

            this.updatePricingOnInventDimSetModified(enumerator, inventDimLocal, _resetPrice);

            if (BrazilParameters::isEnabled())
            {
                this.postModifyInventDimBR(inventDimLocal, _dimFieldIdSet, _resetPrice);
            }

            if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
            {
                salesLine_IN = this.salesLine_IN();
                this.packSalesLine_IN(salesLine_IN);
            }

            // Only look for a matching agreement if this is NOT a return order or credit note line, with reference to a sales order.
            if (!(this.InventTransIdReturn && (this.returnItem() || this.creditNoteLine())))
            {
                using (var nestedActivityContext = activities.modifyInventDimSetAgreementLine(this))
                {
                    // ONLY if Sales Order (header) is linked to agreement
                    // call a server method to handle auto-link to agreement line:
                    // if retail pricing engine is used, then the SA is already calculated, and do not need to calculate again.
                    matchingSalesAgreementHeaderRecId = salesTable.MatchingAgreement;
                    if (matchingSalesAgreementHeaderRecId && !(RetailParameters::isRetailEnabledAndInUse() && RetailPricingEngine::useRetailPricing(this)))
                    {
                        this.salesPurchLineInterface().autoMatchAgreementLine(matchingSalesAgreementHeaderRecId);
                    }
                }
            }

            using (var nestedActivityContext = activities.modifyInventDimSetCPTStatus(this))
            {
                this.setFullRunCTPStatusOnSalesLineModifiedInventDim(_dimFieldIdSet);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePricingOnInventDimSetModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the pricing related fields when multiple inventory dimension fields are modified.
    /// </summary>
    /// <param name="_enumerator">
    /// A set enumerator of the set containing the ID's of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset.
    /// </param>
    protected void updatePricingOnInventDimSetModified(SetEnumerator _enumerator, InventDim _inventDim, boolean _resetPrice)
    {
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);

        _enumerator.reset();

        while (_enumerator.moveNext())
        {
            FieldId dimFieldId = _enumerator.current();

            if (_resetPrice
                && (InventDim::mustUseFieldSalesPriceDisc(dimFieldId, inventDimGroupSetup)
                    || !InventDim::isInventDimEqual(_inventDim, _inventDim.orig(), inventDimGroupSetup.activeSalesPriceFields()))
                && this.LineDeliveryType != LineDeliveryType::DeliveryLine)
            {
                SalesReceiptDateRequested   receiptDateRequestedOrig;
                SalesReceiptDateConfirmed   receiptDateConfirmedOrig;
                SalesShippingDateRequested  shippingDateRequestedOrig;
                SalesShippingDateConfirmed  shippingDateConfirmedOrig;
                
                if (this.RecId && this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                {
                    receiptDateRequestedOrig  = this.ReceiptDateRequested;
                    receiptDateConfirmedOrig  = this.ReceiptDateConfirmed;
                    shippingDateRequestedOrig = this.ShippingDateRequested;
                    shippingDateConfirmedOrig = this.ShippingDateConfirmed;
                }

                this.salesPurchLineInterface().resetPriceAgreement();

                if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, _inventDim))
                {
                    this.setPriceDisc(_inventDim);
                }

                if (this.RecId && this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                {
                    // No update of delivery date fields for existing records. SalesCalcAvailableDlvDates::validateWritePrompt catches illegal changes.
                    this.ReceiptDateRequested  = receiptDateRequestedOrig;
                    this.ShippingDateRequested = shippingDateRequestedOrig;

                    this.ReceiptDateConfirmed  = receiptDateConfirmedOrig;
                    this.ShippingDateConfirmed = shippingDateConfirmedOrig;
                }

                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies an <c>InventDim</c> record with WMS values.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record to modify.
    /// </param>
    /// <param name="_resetWMSLocationId">
    /// A Boolean value that indicates whether the <c>wMSLocationId</c> field is to be reset even when the
    /// <c>LocationId</c> field is unchanged.
    /// </param>
    /// <param name="_defaultInventDirection">
    ///    Indicates whether it is per default an issue or a receipt transaction. Obsolete.
    /// </param>
    /// <param name="_positiveInventDirection">
    ///    Indicates whether it is an issue or a receipt transaction for a positive quantity ordered amount. Obsolete.
    /// </param>
    /// <remarks>
    /// When changing the warehouse on a sales order line, the location is updated with default WMS values
    /// for items where the attached dimension group has the location set to active.
    /// </remarks>
    [Hookable(false), Wrappable(false)]
    public void modifyWMSLocation(
        InventDim           _inventDim,
        boolean             _resetWMSLocationId,
        InventDirection     _defaultInventDirection,
        InventDirection     _positiveInventDirection)
    {
        this.salesPurchLineInterface().modifyWMSLocation(_inventDim, _resetWMSLocationId, this.defaultInventDirection(), this.positiveInventDirection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDirection</Name>
				<Source><![CDATA[
    private InventDirection defaultInventDirection()
    {
        return this.type().defaultInventDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positiveInventDirection</Name>
				<Source><![CDATA[
    private InventDirection positiveInventDirection()
    {
        return this.type().positiveInventDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAutoCreateIntercompanyChainForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an intercompany chain must be created for the sales line.
    /// </summary>
    /// <returns>true if an intercompany chain must be created for the sales line; otherwise, false.</returns>
    protected boolean mustAutoCreateIntercompanyChainForSalesLine()
    {
        return this.SkipUpdate == InterCompanySkipUpdate::No
               && (this.SourcingOrigin == SalesSourcingOrigin::ExternalVendor || this.SourcingOrigin == SalesSourcingOrigin::Intercompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAlloweDirectDeliveryForJournalSalesOrder</Name>
				<Source><![CDATA[
    private boolean notAlloweDirectDeliveryForJournalSalesOrder()
    {
        return SalesLineNotCreateInterCompChainForSalesJournalFlight::instance().isEnabled()
                && this.SalesType == SalesType::Journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    public boolean  mustBeCovPlanned()
    {
        return this.RemainSalesPhysical
        ||     this.RemainSalesFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    public LineNum nextLineNum()
    {
        return (select firstonly LineNum
                    from salesLine
                    order by LineNum
                    where salesLine.SalesId == this.SalesId
                       && salesLine.LineNum >  this.LineNum).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCFOPChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fires several actions as a result of a change in <c>CFOPTable_BR</c> field in <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_modifiedFieldId">
    /// The field that caused the change in <c>CFOPTable_BR</c> field.
    /// </param>
    public void onCFOPChange_BR(FieldId _modifiedFieldId = fieldNum(SalesLine_BR, cfopTable_BR))
    {
        if (this.salesLine_BR().cfopTable_BR)
        {
            this.updateDeliveryCFOP_BR();
            this.setTaxGroupAndTaxItemGroupFields_BR();
            this.onTaxChange_BR(_modifiedFieldId);
        }

        this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeliveryPostalAddressChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates CFOP as a consequence of address change if state and country differs from the previous address.
    /// </summary>
    /// <remarks>
    /// It is not executed when item is not defined yet in the sales line.
    /// </remarks>
    public void onDeliveryPostalAddressChange_BR()
    {
        CFOPValidation_BR       cfopValidation;
        LogisticsPostalAddress  currentAddress, originAddress;
        SalesLine_BR            salesLine_BR;

        if (this.ItemId)
        {
            currentAddress      = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
            originAddress       = LogisticsPostalAddress::findRecId(this.orig().DeliveryPostalAddress);

            if (currentAddress.State != originAddress.State || currentAddress.CountryRegionId != originAddress.CountryRegionId)
            {
                cfopValidation      = CFOPValidation_BR::construct(this);

                salesLine_BR = this.salesLine_BR();
                salesLine_BR.cfopTable_BR = cfopValidation.getDefaultCFOP();

                this.packSalesLine_BR(salesLine_BR);

                this.onCFOPChange_BR(fieldNum(SalesLine, DeliveryPostalAddress));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the on order quantity for the line in sales unit.
    /// </summary>
    /// <returns>
    /// The on order quantity for the line in inventory unit.
    /// </returns>
    public display InventQtyOnOrder onOrder()
    {
        InventQtyOnOrder qtyOnOrder;

        if (!this.InventTransId)
        {
            qtyOnOrder = 0;
        }
        else if (this.isStocked())
        {
            qtyOnOrder = -InventTransIdSumSingleStatus::qtyOnOrder(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
        }
        else
        {
            qtyOnOrder = this.salesPurchLineInterface().calculateQuantityOrdered(TradeNonStockedRegistrationHelper::getInventPendingRegistration(this.SourceDocumentLine).Quantity);
        }

        return qtyOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOrderInSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an on order quantity for a line in sales unit.
    /// </summary>
    /// <returns>
    /// The on order quantity for the line in sales unit.
    /// </returns>
    public display SalesQtyOnOrder onOrderInSalesUnit()
    {
        InventQtyOnOrder    inventQtyOnOrder;

        inventQtyOnOrder = this.onOrder();

        if (!inventQtyOnOrder)
        {
            return 0;
        }

        return this.unitConvertInvent2Sales(inventQtyOnOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTaxChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax information of sales line.
    /// </summary>
    /// <param name="_fieldId">
    /// Field identifier.
    /// </param>
    public void onTaxChange_BR(FieldId _fieldId)
    {
        this.setSuframaDiscount_BR(_fieldId);

        if (this.TaxGroup != this.orig().TaxGroup
            || this.TaxItemGroup != this.orig().TaxItemGroup)
        {
            this.updateMarkupTransTaxGroups_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    public CustAccount orderAccount()
    {
        return this.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInvoiceId_W</Name>
				<Source><![CDATA[
    display InvoiceId originalInvoiceId_W(SalesLine _salesLine)
    {
        InvoiceId ret;

        if (_salesLine.RefReturnInvoiceTrans_W)
        {
            if (_salesLine.ProjId)
            {
                ret = ProjInvoiceItem::findRecId(_salesLine.RefReturnInvoiceTrans_W).ProjInvoiceId;
            }
            else
            {
                ret = CustInvoiceTrans::findRecId(_salesLine.RefReturnInvoiceTrans_W).InvoiceId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the over delivery percent that is allowed.
    /// </summary>
    /// <returns>
    /// The over delivery percent that is defined on the sales order line if over delivery is enabled;
    /// otherwise, zero.
    /// </returns>
    public Percent overDeliveryPct()
    {
        if (!SalesParameters::find().OverDelivery)
        {
            return 0;
        }

        return this.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventDirectDeliveryAdditionWhenOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether to prevent direct delivery addition when on hold.
    /// </summary>
    /// <returns>True to prevent it, other wise allow it.</returns>
    protected boolean preventDirectDeliveryAdditionWhenOnHold()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAlloweDirectDeliveryForOnHoldSalesOrder</Name>
				<Source><![CDATA[
    private boolean notAlloweDirectDeliveryForOnHoldSalesOrder()
    {
        return this.preventDirectDeliveryAdditionWhenOnHold() && MCRHoldCodeTrans::findActiveOrderHolds(this.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs Brazilian extension table into <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_salesLine_BR">
    /// Extension table to be packed
    /// </param>
    public void packSalesLine_BR(SalesLine_BR _salesLine_BR)
    {
        _salesLine_BR.SalesLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_salesLine_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales line information.
    /// </summary>
    /// <param name="_salesLine_IN">
    /// The sales line reference.
    /// </param>
    public void packSalesLine_IN(SalesLine_IN _salesLine_IN)
    {
        _salesLine_IN.SalesLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_salesLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesLine_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>SalesLine_Intrastat</c> extension table record.
    /// </summary>
    /// <param name="_salesLine_Intrastat">
    /// The extension table record to pack.
    /// </param>
    public void packSalesLine_Intrastat(SalesLine_Intrastat _salesLine_Intrastat)
    {
        _salesLine_Intrastat.SalesLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_salesLine_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales line information.
    /// </summary>
    /// <param name="_salesLine_W">
    /// The sales line.
    /// </param>
    public void packSalesLine_W(SalesLine_W _salesLine_W)
    {
        _salesLine_W.SalesLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_salesLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesLinePricingCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>PDSSalesLinePricingCalculation</c> extension table record.
    /// </summary>
    /// <param name="_salesLinePricingCalculation">
    /// The extension table record to pack.
    /// </param>
    public void packSalesLinePricingCalculation(PDSSalesLinePricingCalculation _salesLinePricingCalculation)
    {
        _salesLinePricingCalculation.SalesLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_salesLinePricingCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalculatedLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the adjusted net amount  if the related item is potency enabled and has an an advanced-based pricing calculation.
    /// </summary>
    /// <returns>
    ///     The adjusted net amount.
    /// </returns>
    public PDSCalculatedLineAmount pdsCalculatedLineAmount()
    {
        PDSCalculatedLineAmount         pdsCalculatedLineAmount;
        PDSSalesLinePricingCalculation  pdsSalesLinePricingCalculation;

        if (this.inventTable().pdsBaseAttributeId)
        {
            pdsSalesLinePricingCalculation = this.pdsSalesLinePricingCalculation();
            if (pdsSalesLinePricingCalculation.PriceCalculation)
            {
                pdsCalculatedLineAmount = pdsSalesLinePricingCalculation.displayCalculatedLineAmount();
            }
        }

        return pdsCalculatedLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalculatedUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the adjusted unit price if the related item is potency enabled and has an an advanced-based pricing calculation.
    /// </summary>
    /// <returns>
    ///     The adjusted unit price.
    /// </returns>
    public PDSCalculatedUnitPrice pdsCalculatedUnitPrice()
    {
        PDSCalculatedUnitPrice          pdsCalculatedUnitPrice;
        PDSSalesLinePricingCalculation  pdsSalesLinePricingCalculation;

        if (this.inventTable().pdsBaseAttributeId)
        {
            pdsSalesLinePricingCalculation = this.pdsSalesLinePricingCalculation();
            if (pdsSalesLinePricingCalculation.PriceCalculation)
            {
                pdsCalculatedUnitPrice = pdsSalesLinePricingCalculation.displayCalculatedUnitedPrice();
            }
        }

        return pdsCalculatedUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and displays the calculation ID if the related item is potency enabled and has an an advanced-based pricing calculation.
    /// </summary>
    /// <returns>
    ///     The calculation ID.
    /// </returns>
    public PDSCalculationId pdsCalculationId()
    {
        PDSCalculationId                pdsCalculationId;
        PDSSalesLinePricingCalculation  pdsSalesLinePricingCalculation;

        if (this.inventTable().pdsBaseAttributeId)
        {
            pdsSalesLinePricingCalculation = this.pdsSalesLinePricingCalculation();
            if (pdsSalesLinePricingCalculation.PriceCalculation)
            {
                pdsCalculationId = pdsSalesLinePricingCalculation.calculationTable().CalculationId;
            }
        }

        return pdsCalculationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCancelRemainWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the remaining sales inventory quantity to 0 if the
    /// catch weight quantity of a catch weight item goes to 0
    /// </summary>
    public void pdsCancelRemainWeight()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && this.RemainInventPhysical != 0
            && this.PdsCWRemainInventPhysical == 0)
        {
            this.RemainInventPhysical = 0;
            this.RemainSalesPhysical = 0;
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCopySalesLinePricingCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies a <c>PDSSalesLinePricingCalculation</c> buffer to the one associated with this sales order line.
    /// </summary>
    /// <param name="_source">
    ///     The <c>PDSSalesLinePricingCalculation</c> buffer to copy from.
    /// </param>
    /// <remarks>
    ///     This sales order line must pertain to an item configured for attribute-based pricing.
    /// </remarks>
    public void pdsCopySalesLinePricingCalculation(PDSSalesLinePricingCalculation _source)
    {
        PDSSalesLinePricingCalculation salesLinePricingCalculation;

        if (this.inventTable().pdsBaseAttributeId)
        {
            salesLinePricingCalculation                     = this.pdsSalesLinePricingCalculation();
            salesLinePricingCalculation.PriceCalculation    = _source.PriceCalculation;
            this.packSalesLinePricingCalculation(salesLinePricingCalculation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeliveredInTotal</Name>
				<Source><![CDATA[
    public display PdsCWDelivered pdsCWDeliveredInTotal()
    {
        PdsCWDelivered  pdsCWDelivered = 0;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && this.InventTransId)
        {
            pdsCWDelivered = this.pdsCWDeliveredInTotalServer();
        }

        return pdsCWDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeliveredInTotalServer</Name>
				<Source><![CDATA[
    public PdsCWDelivered pdsCWDeliveredInTotalServer()
    {
        return this.type().pdsCWDeliveredInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWExpRetQtyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the expected return quantity if this record's item is a catch weight item.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void pdsCWExpRetQtyConversion()
    /// </syntax>
    /// </remarks>
    public void pdsCWExpRetQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.ExpectedRetQty = PdsCatchWeight::inventQty(
                                        this.ItemId,
                                        this.PdsCWExpectedRetQty,
                                        this.SalesUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInvoicedInTotal</Name>
				<Source><![CDATA[
    display PdsCWInvoiced pdsCWInvoicedInTotal()
    {
        PdsCWInvoiced  pdsCWInvoiced = 0;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && this.InventTransId)
        {
            pdsCWInvoiced = this.type().pdsCWInvoicedInTotal();
        }

        return pdsCWInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that is on order for a given sales line.
    /// </summary>
    /// <returns>
    /// The catch weight on order quantity.
    /// </returns>
    display PdsCWOnOrder pdsCWOnOrder()
    {
        if (!this.InventTransId)
            return 0;

        return -InventTransIdSumSingleStatus::pdsCWQtyOnOrder(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPickedInTotal</Name>
				<Source><![CDATA[
    display PdsCWPicked pdsCWPickedInTotal()
    {
        PdsCWPicked pdsCWPicked = 0;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && this.InventTransId)
        {
            pdsCWPicked = this.type().pdsCWPickedInTotal();
        }

        return pdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyActivateRemainder</Name>
				<Source><![CDATA[
    display PdsCWQtyActivateRemainder pdsCWQtyActivateRemainder()
    {
        return (this.pdsCWOnOrder()
            + this.pdsCWReservedPhysical()
            + this.pdsCWReservedOnOrder())
            - (this.pdsCWReservedOnPick()
                + this.pdsCWQtyOnPickNotReserved());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    private void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.SalesQty = PdsCatchWeight::inventQty(
                                this.ItemId,
                                this.PdsCWQty,
                                this.SalesUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyOnPickNotReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that is on warehouse management order but not reserved physical.
    /// </summary>
    /// <returns>
    /// The catch weight quantity that is not reserved physical.
    /// </returns>
    display PdsCWQtyOnPickNotReserved pdsCWQtyOnPickNotReserved()
    {
        InventTrans                 inventTrans;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        select sum(PdsCWQty) from inventTrans
            where inventTrans.TransChildType    == InventTransChildType::WMSOrder
                && inventTrans.StatusReceipt == StatusReceipt::None
                && inventTrans.StatusIssue   >  StatusIssue::ReservPhysical
            exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.InventTransOrigin      == inventTrans.InventTransOrigin
                   && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId
                   && inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId;

        return -inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainInventFinancial_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets remain financial quantity in pdsCW units.
    /// </summary>
    /// <param name="_inventDimCriteria">
    ///     <c>InventDim</c> select criteria.
    /// </param>
    /// <param name="_inventDimParm">
    ///     <c>InventDimParm</c> select criteria.
    /// </param>
    /// <returns>
    ///     Remaining quantity for financial.
    /// </returns>
    public PdsCWInventQty pdsCWRemainInventFinancial_RU(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        InventTransOriginSalesLine inventTransOriginSalesLine;
        InventTrans inventTrans;
        InventDim   inventDim;

        if (_inventDimParm.isAllFlagNo())
        {
            return this.PdsCWRemainInventFinancial;
        }

        select TableId from inventTransOriginSalesLine
            where inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId
               && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId
        join sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOriginSalesLine.InventTransOrigin
               && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
        #InventDimExistsJoin(InventTrans.InventDimId, inventDim, _inventDimCriteria, _inventDimParm);

        return -inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainInventPhysical_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets remain physical quantity in pdsCW units.
    /// </summary>
    /// <param name="_inventDimCriteria">
    ///     <c>InventDim</c> select criteria.
    /// </param>
    /// <param name="_inventDimParm">
    ///     <c>InventDimParm</c> select criteria.
    /// </param>
    /// <returns>
    ///     Remaining quantity for physical.
    /// </returns>
    public PdsCWInventQty pdsCWRemainInventPhysical_RU(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        InventTransOriginSalesLine inventTransOriginSalesLine;
        InventTrans inventTrans;
        InventDim   inventDim;

        if (_inventDimParm.isAllFlagNo())
        {
            return this.PdsCWRemainInventPhysical;
        }

        select TableId from inventTransOriginSalesLine
            where inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId
               && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId
        join sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOriginSalesLine.InventTransOrigin
               && ((inventTrans.StatusReceipt > StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue > StatusIssue::Deducted))
        #InventDimExistsJoin(InventTrans.InventDimId, inventDim, _inventDimCriteria, _inventDimParm);

        return -inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservedOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on expected receipts for a given sales order line.
    /// </summary>
    /// <returns>
    /// The catch weight reserved quantity.
    /// </returns>
    display PdsCWReservOrdered pdsCWReservedOnOrder()
    {
        if (!this.InventTransId)
            return 0;

        return -InventTransIdSumSingleStatus::pdsCWQtyReserveOrdered(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservedOnPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for the sales order line
    /// and where the reservation is related to an output order.
    /// </summary>
    /// <returns>
    /// The reserved catch weight quantity.
    /// </returns>
    display PdsCWReservOrdered pdsCWReservedOnPick()
    {
        if (!this.InventTransId)
            return 0;

        return -InventTransIdSumSingleStatus::pdsCWQtyReservPhysicalAnyWMSOrder(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for the sales order line.
    /// </summary>
    /// <returns>
    /// The reserved catch weight quantity.
    /// </returns>
    display PdsCWReservPhysical pdsCWReservedPhysical()
    {
        if (!this.InventTransId)
            return 0;

        return -InventTransIdSumSingleStatus::pdsCWQtyReservPhysical(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWReserveQty()
    {
        PdsCWInventQty pdsCWReserveQty = -this.PdsCWRemainInventPhysical;

        if (! this.Reservation)
        {
            pdsCWReserveQty = 0;
        }

        if (pdsCWReserveQty
            && this.PdsCWRemainInventPhysical < 0)
        {
            pdsCWReserveQty = 0;
        }

        return pdsCWReserveQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSalesDeliverNowConversion</Name>
				<Source><![CDATA[
    private void pdsCWSalesDeliverNowConversion(boolean _fromCW = false)
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (_fromCW)
            {
                this.SalesDeliverNow = PdsCatchWeight::inventQty(
                                            this.ItemId,
                                            this.PdsCWInventDeliverNow,
                                            this.SalesUnit);
            }
            else if (!this.PdsCWInventDeliverNow)
            {
                this.PdsCWInventDeliverNow = PdsCatchWeight::cwQty(
                                                this.ItemId,
                                                this.InventDeliverNow);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSalesLinePricingCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the <c>PDSSalesLinePricingCalculation</c> table.
    /// </summary>
    /// <returns>
    ///     The table <c>PDSSalesLinePricingCalculation</c> associated with the current record.
    /// </returns>
    public PDSSalesLinePricingCalculation pdsSalesLinePricingCalculation()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PDSSalesLinePricingCalculation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSellableDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of days from the sales line's shipping date that the product must be sellable.
    /// </summary>
    /// <param name="_inventDim">
    /// An alternative dimension to use for the check instead of the sales orders' dimension; optional.
    /// </param>
    /// <returns>
    /// The number of days from the shipping date that the product must be sellable.
    /// </returns>
    /// <remarks>
    /// This can be used for adjusting a required date for planning purposes
    /// into the date needed by the receipt point. It should only be used in shelf-life enabled scenarios.
    /// </remarks>
    public PdsSellableDays pdsSellableDays(InventDim _inventDim = this.inventDim())
    {
        PdsSellableDays     sellDays;

        sellDays = PdsCustSellableDays::findValidRec(this.ItemId,
                                                    this.CustAccount,
                                                    _inventDim).SellableDays;

        sellDays += this.ReceiptDateRequested - this.ShippingDateRequested;

        return sellDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetPricingCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the pricing calculation extension table with the specified attribute pricing ID.
    /// </summary>
    /// <param name="_calculationId">
    ///     The attribute pricing ID.
    /// </param>
    /// <remarks>
    ///     The modified pricing calculation extension table is packed and made part of the sales line record.
    /// </remarks>
    public void pdsSetPricingCalculation(PDSCalculationId _calculationId)
    {
        PDSSalesLinePricingCalculation priceCalc = this.pdsSalesLinePricingCalculation();

        priceCalc.PriceCalculation = PDSCalculationTable::find(_calculationId).RecId;
        this.packSalesLinePricingCalculation(priceCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateReservationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the field update in progress requires a re-reservation of inventory.
    /// </summary>
    /// <param name="_fieldBeingUpdated">
    /// The ID of the field being updated.
    /// </param>
    /// <returns>
    /// false if the validation does not allow the field being updated; otherwise, true.
    /// </returns>
    public boolean pdsUpdateReservationRequired(FieldId _fieldBeingUpdated)
    {
        boolean ret = true;
        // the fetch hits the cache so can return in the same tier if its not a shelf life item.
        if (this.inventTable().isShelfLifeItem())
        {
            ret = this.pdsUpdateReservationServer(_fieldBeingUpdated, FormDataUtil::isFormDataSource(this));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateReservationServer</Name>
				<Source><![CDATA[
    private boolean pdsUpdateReservationServer(FieldId _fieldBeingUpdated, boolean _calledFromDataSource, PdsShelfLifeDateChangeValidatorFactory _factory = PdsShelfLifeDateChangeValidatorFactory::construct())
    {
        PdsShelfLifeIDateChangeValidator dateValidator = _factory.createDateValidatorFromOrderLine(this);
        return dateValidator.validateDateValueChanged(_fieldBeingUpdated, !_calledFromDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalInventUnit</Name>
				<Source><![CDATA[
    public display SalesQty pickedInTotalInventUnit()
    {
        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }

        return this.pickedInTotalInventUnitServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalInventUnitServer</Name>
				<Source><![CDATA[
    public SalesQty pickedInTotalInventUnitServer(
        SalesTable _salesTable = this.salesTable()
    )
    {
        return this.type(
        _salesTable
        ).pickedInTotalInventUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalSalesUnit</Name>
				<Source><![CDATA[
    public display SalesQty pickedInTotalSalesUnit()
    {
        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }

        return this.pickedInTotalSalesUnitServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalSalesUnitServer</Name>
				<Source><![CDATA[
    public SalesQty pickedInTotalSalesUnitServer(
        SalesTable _salesTable = this.salesTable()
    )
    {
        return this.type(
        _salesTable
        ).pickedInTotalSalesUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReplaceLineTaxInfo_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates replace line tax info.
    /// </summary>
    /// <param name="_replaceItemRef">
    /// The ReturnReplaceItemRef instance
    /// </param>
    public void populateReplaceLineTaxInfo_IN(ReturnReplaceItemRef _replaceItemRef)
    {
        SalesLine_IN salesLine_IN = this.salesLine_IN();

        this.packSalesLine_IN(salesLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingGoodsInRouteOffset_RU</Name>
				<Source><![CDATA[
    public LedgerPostingType postingGoodsInRouteOffset_RU()
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.postingGoodsInRouteOffset_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.postingOperations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales</Name>
				<Source><![CDATA[
    public LedgerPostingType postingSales()
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        return salesLineType.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModifiedField_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after a modification in a Brazilian field.
    /// </summary>
    /// <param name="_fieldId">The modified field ID.</param>
    public void postModifiedField_BR(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesLine, DeliveryPostalAddress):
                this.onDeliveryPostalAddressChange_BR();
                break;

            case fieldNum(SalesLine, TaxItemGroup):
            case fieldNum(SalesLine, TaxGroup):
                this.onTaxChange_BR(_fieldId);
                break;

            case fieldNum(SalesLine, ReturnDispositionCodeId):
                if (this.ReturnDispositionCodeId)
                {
                    if (Box::yesNo("@GLS50989", DialogButton::Yes) == DialogButton::No)
                    {
                        this.ReturnDispositionCodeId = '';
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModifyInventDimBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fiscal document type for passed invent dim.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record.
    /// </param>
    /// <param name="_dimFieldIdSet">
    /// The set of <c>FieldId</c> values of the modified dimension fields.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates if price should be reset; optional.
    /// </param>
    public void postModifyInventDimBR(
        InventDim            _inventDim,
        Set                  _dimFieldIdSet,
        boolean              _resetPrice = true)
    {
        if (_dimFieldIdSet.in(fieldNum(InventDim, InventSiteId)))
        {
            this.setCFOP_BR();
            this.onCFOPChange_BR();

            this.initFiscalDocumentType_BR(_inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date for which price must be calculated according to the price date type setting.
    /// </summary>
    /// <returns>
    /// The date for which to calculate price.
    /// </returns>
    /// <remarks>
    /// Price date type can be set up to use either today, requested shipping, or requested receipt date as
    /// the price date.
    /// </remarks>
    public PriceDate priceDate()
    {
        #ISOCountryRegionCodes

        if (this.PriceAgreementDate_RU &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            return this.PriceAgreementDate_RU;
        }

        SalesParameters salesParameters = SalesParameters::find();
        PriceDate priceDate;

        // When <c>SalesLine</c> is from a retail sales order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, set price date to user preferred time zone
        // disregarding PriceDateType parameter.
        if (this.salesTable().retailSalesUseSessionDate())
        {
            priceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            switch (salesParameters.PriceDateType)
            {
                case SalesPriceDateType::ShippingDateRequested:
                    priceDate = this.ShippingDateRequested;
                    break;

                case SalesPriceDateType::ReceiptDateRequested:
                    priceDate = this.ReceiptDateRequested;
                    break;

                case SalesPriceDateType::Today:
                    priceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.retrievePriceDateDelegate(this, salesParameters.PriceDateType, result);

                    if (result.hasResult())
                    {
                        priceDate = result.result();
                    }
                    else
                    {
                        throw error(strFmt("@SCM:PriceDateNotFound", salesParameters.PriceDateType));
                    }
                    break;
            }
        }

        return priceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePriceDateDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for price calculations.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> value.</param>
    /// <param name = "_salesPriceDateType">A <c>SalesPriceDateType</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void retrievePriceDateDelegate(
        SalesLine                   _salesLine,
        SalesPriceDateType          _salesPriceDateType,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId  priceGroupId()
    {
        return this.salesTable().PriceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodConsumedInventTransOriginIds</Name>
				<Source><![CDATA[
    public ListIterator prodConsumedInventTransOriginIds(NoYesCombo _endedProductionsOnly = NoYesCombo::No)
    {
        List                        il = new List(Types::Int64);
        ListIterator                it;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        InventTrans                 inventTrans;
        InventTransOriginProdTable  inventTransOriginProdTable;
        ProdTable                   prodTable;

        while select TableId from inventTransOriginSalesLine
            group by inventTrans.MarkingRefInventTransOrigin
            where   inventTransOriginSalesLine.SalesLineDataAreaId      == this.DataAreaId
                 && inventTransOriginSalesLine.SalesLineInventTransId   == this.InventTransId
            join MarkingRefInventTransOrigin from inventTrans
                where inventTrans.InventTransOrigin                     == inventTransOriginSalesLine.InventTransOrigin
                   && inventTrans.MarkingRefInventTransOrigin
            exists join TableId from inventTransOriginProdTable
                where inventTransOriginProdTable.InventTransOrigin      == inventTrans.MarkingRefInventTransOrigin
            join TableId from prodTable
                where prodTable.ProdId                                  == inventTransOriginProdTable.ProdOrderId
                   && prodTable.DataAreaId                              == inventTransOriginProdTable.ProdOrderDataAreaId
                   && prodTable.ProjPostingType                         == ProjProdPostingType::ConsumedMethod
                   && prodTable.ProjLinkedToOrder                       == NoYes::Yes
                   && (_endedProductionsOnly == NoYesCombo::No  || prodTable.ProdStatus == ProdStatus::Completed)
        {
            il.addEnd(inventTrans.MarkingRefInventTransOrigin);
        }

        it = new ListIterator (il);

        return it;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIdChanged</Name>
				<Source><![CDATA[
    public void projIdChanged()
    {
        SalesShippingDateConfirmed      shippingDateConfirmed = this.ShippingDateConfirmed;
        SalesShippingDateRequested      shippingDateRequested = this.ShippingDateRequested;
        SalesReceiptDateConfirmed       receiptDateConfirmed  = this.ReceiptDateConfirmed;
        SalesReceiptDateRequested       receiptDateRequested  = this.ReceiptDateRequested;
        SalesDeliveryDateControlType    deliveryDateControl   = this.DeliveryDateControlType;
        SalesShippingDate               shippingDate          = this.ConfirmedDlv;

        this.initFromProjTable(this.projTable(),false);

        this.ShippingDateConfirmed   = shippingDateConfirmed;
        this.ShippingDateRequested   = shippingDateRequested;
        this.ReceiptDateConfirmed    = receiptDateConfirmed;
        this.ReceiptDateRequested    = receiptDateRequested;
        this.DeliveryDateControlType = deliveryDateControl;
        this.ConfirmedDlv            = shippingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the project id has been modified.
    /// </summary>
    /// <returns>true if the project id has been modified; otherwise, false.</returns>
    protected boolean isProjIdModified()
    {
        boolean modifyProjId = true;

        if (this.RecId && !this.refreshAgreementLink(new AgreementAutolinkHelperSalesLine()))
        {
            if (!this.unLinkAgreementLinePrompt(fieldNum(SalesLine, ProjId)))
            {
                modifyProjId = false;
            }
        }

        return modifyProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the sales line, depending on the changes in the project ID unit field.
    /// </summary>
    /// <remarks>
    /// This method is called from the <c>modifiedField</c> method.
    /// </remarks>
    public void projIdModified()
    {
        boolean modifyProjId = this.isProjIdModified();

        if (modifyProjId)
        {
            if (this.SalesType  == SalesType::ItemReq)
            {
                ProjTable projTable = this.projTable();
                this.CurrencyCode       = projTable.currencyId();
                this.projIdChanged();
                this.LineDisc          = 0;
                this.LinePercent       = 0;
                this.SalesMarkup       = 0;
                if (ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Item))
                {
                    this.SalesPrice    = 0;
                }
            }

            this.setTaxItemGroup(this.TaxItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalId</Name>
				<Source><![CDATA[
    public display ProjProposalId projProposalId()
    {
        return ProjTrans::newSalesLine(this).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _update = false)
    {
        return ProjTable::find(this.ProjId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcedPurchLineExist</Name>
				<Source><![CDATA[
    internal boolean sourcedPurchLineExist()
    {
        PurchLine sourcedPurchLine;

        select firstonly RecId from sourcedPurchLine
            where sourcedPurchLine.ItemRefType == InventRefType::Sales
               && sourcedPurchLine.InventRefId
               && sourcedPurchLine.InventRefTransId == this.InventTransId;

        return sourcedPurchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencedPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>PurchLine</c> record related to this <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>The <c>PurchLine</c> record related to this <c>SalesLine</c> record.</returns>
    public PurchLine referencedPurchLine(boolean _forUpdate = false)
    {
        PurchLine purchLine;

        if (this.InventRefType == InventRefType::Purch &&  this.InventRefTransId)
        {
            purchLine = PurchLine::findInventTransId(this.InventRefTransId, _forUpdate);
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcingPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the purchase line which was created to source the current sales line.
    /// </summary>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>PurchLine</c> record.</returns>
    public PurchLine sourcingPurchLine(boolean _forUpdate = false)
    {
        PurchLine referencedPurchLine = this.referencedPurchLine();

        if (referencedPurchLine && this.isPurchLineCreatedFromThisSalesLine(referencedPurchLine))
        {
            return referencedPurchLine;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyActivateRemainder</Name>
				<Source><![CDATA[
    public display InventQty qtyActivateRemainder()
    {
        return this.qtyEstimatedIssue() - this.qtyOnPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyEstimatedIssue</Name>
				<Source><![CDATA[
    private InventQty qtyEstimatedIssue()
    {
        InventTransOriginId inventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId);
        InventTransIdSum    inventTransIdSum = InventTransIdSum::newTransOriginId(inventTransOriginId);

        return -inventTransIdSum.estimatedIssue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount of the inventory items that are marked for the sales order line.
    /// </summary>
    /// <returns>
    /// The amount of the inventory that is marked for the inventory transaction that is related to the
    /// sales order line.
    /// </returns>
    public InventQtyMarked qtyMarked()
    {
        InventTransOriginId     inventTransOriginId;
        InventQtyMarked         inventQtyMarked;

        if (this.isStocked())
        {
            inventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId);
            if (inventTransOriginId)
            {
                inventQtyMarked = InventTransOrigin::qtyMarked(inventTransOriginId);
            }
        }

        return inventQtyMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyOnPick</Name>
				<Source><![CDATA[
    private InventQty qtyOnPick()
    {
        InventTrans inventTrans;

        SalesLineQueryBuilder salesLineQueryBuilder = SalesLineQueryBuilder_QtyOnPick::newFromParameters(this.InventTransId, this.DataAreaId, inventTrans);
        SysDaQueryObject inventTransQueryObject = salesLineQueryBuilder.buildQueryObject();

        SysDaFindObject findObject = new SysDaFindObject(inventTransQueryObject);
        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.executeQuery(findObject);

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyOnPickNotReserved</Name>
				<Source><![CDATA[
    public display InventQty qtyOnPickNotReserved()
    {
        InventTrans                 inventTrans;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        select sum(Qty) from inventTrans
            where inventTrans.TransChildType    == InventTransChildType::WMSOrder
            &&    inventTrans.StatusIssue       >  StatusIssue::ReservPhysical
            &&    inventTrans.StatusReceipt     == StatusReceipt::None
            exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.InventTransOrigin      == inventTrans.InventTransOrigin
                   && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId
                   && inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId;

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the status of the associated quality orders if the quality management is being used.
    /// </summary>
    /// <returns>
    /// The current quality order status.
    /// </returns>
    public display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return InventTestOrderStatusDisplay::None;
        }

        return InventQualityOrderTable::referenceDocumentStatusDisplay(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWarningTxtDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the warning text for the record.
    /// </summary>
    /// <param name = "_currentRecord">The <c>SalesLine</c> record for which this delegate is called.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the expected result of type <c>str</c>.</param>
    delegate void generateWarningTxtDelegate(SalesLine _currentRecord, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWarningTxtDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscriber for getting the warning text for the record.
    /// </summary>
    /// <param name = "_currentRecord">The <c>SalesLine</c> record for which this delegate is called.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the expected result of type <c>str</c>.</param>
    [SubscribesTo(tableStr(SalesLine), delegateStr(SalesLine, generateWarningTxtDelegate))]
    public static void generateWarningTxtDelegateHandler(SalesLine _currentRecord, EventHandlerResult _result)
    {
        switch (_currentRecord.InventRefType)
        {
            case InventRefType::Production:

                ProdTable prodTable = ProdTable::find(_currentRecord.InventRefId);
                if (prodTable)
                {
                    _result.result(strFmt("@SYS27052", prodTable.ProdId, prodTable.ProdStatus, _currentRecord.ItemId));
                }
                break;

            case InventRefType::Sales:

                SalesLine salesLine = SalesLine::findInventTransId(_currentRecord.InventRefTransId);
                if (salesLine)
                {
                    _result.result(strFmt("@SYS75609", salesLine.SalesId, salesLine.SalesStatus, _currentRecord.ItemId));
                }
                break;

            case InventRefType::Purch:

                PurchLine purchLine = PurchLine::findInventTransId(_currentRecord.InventRefTransId);
                if (purchLine)
                {
                    _result.result(strFmt("@SYS75607", purchLine.PurchId, purchLine.PurchStatus, _currentRecord.ItemId));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceWarningTxt</Name>
				<Source><![CDATA[
    public str referenceWarningTxt()
    {
        if (this.InventRefId)
        {
            var eventHandlerResult = EventHandlerResult::newSingleResponse();
            this.generateWarningTxtDelegate(this, eventHandlerResult);
            if (eventHandlerResult.hasResult())
            {
                return eventHandlerResult.result();
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAgreementLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the link between the <c>AgreementLine</c> and the <c>SalesLine</c>. If the current link has
    /// become invalid, or if there is no current link, this will search for the best matching <c>AgreementLine</c>
    /// and possibly update the <c>PurchLine</c> if a new match is found.
    /// </summary>
    /// <param name="_helper">
    /// An implementation of the <c>AgreementAutolinkHelper</c> interface suitable for the concrete <c>SalesPurchLine</c> type.
    /// </param>
    /// <param name="_showInfolog">
    /// A flag that indicates whether to print the errors in the Infolog; optional.
    /// </param>
    /// <returns>
    /// false if the link could not be refreshed; this happens when the current link is invalid and no better match could be found
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean refreshAgreementLink(AgreementAutolinkHelper _helper, boolean _showInfolog = true)
    {
        return this.salesPurchLineInterface().refreshAgreementLink(_helper, _showInfolog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredInSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the registered quantity for the sales line in the sales unit.
    /// </summary>
    /// <returns>
    /// The registered quantity for the sales line in the sales unit.
    /// </returns>
    public SalesQty registeredInSalesUnit()
    {
        SalesQty salesQtyRegistered;

        if (this.isStocked())
        {
            salesQtyRegistered = this.unitConvertInvent2Sales(InventTransIdSumSingleStatus::qtyRegistered(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId)));
        }
        else
        {
            salesQtyRegistered = TradeNonStockedRegistrationHelper::qtyRegistered(this.SourceDocumentLine);
        }

        return salesQtyRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredInInventUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the registered quantity for the sales line in the inventory unit.
    /// </summary>
    /// <returns>
    /// The registered quantity for the sales line in the inventory unit.
    /// </returns>
    private InventQtyRegistered registeredInInventUnit()
    {
        if (this.InventTransId && this.isStocked())
        {
            return InventTransIdSumSingleStatus::qtyRegistered(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainInventFinancial_RU</Name>
				<Source><![CDATA[
    InventQty remainInventFinancial_RU(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        InventTransOriginSalesLine inventTransOriginSalesLine;
        InventTrans       inventTrans;
        InventDim         inventDim;

        if (_inventDimParm.isAllFlagNo())
        {
            return this.RemainInventFinancial;
        }

        select TableId from inventTransOriginSalesLine
            where inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId
               && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId
        join sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOriginSalesLine.InventTransOrigin
               && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
        #InventDimExistsJoin(InventTrans.InventDimId, inventDim, _inventDimCriteria, _inventDimParm);

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainInventPhysical_RU</Name>
				<Source><![CDATA[
    InventQty remainInventPhysical_RU(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        InventTransOriginSalesLine inventTransOriginSalesLine;
        InventTrans inventTrans;
        InventDim   inventDim;

        if (_inventDimParm.isAllFlagNo())
        {
            return this.RemainInventPhysical;
        }

        select TableId from inventTransOriginSalesLine
            where inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId
               && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId
        join sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOriginSalesLine.InventTransOrigin
               && ((inventTrans.StatusReceipt > StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue > StatusIssue::Deducted))
        #InventDimExistsJoin(InventTrans.InventDimId, inventDim, _inventDimCriteria, _inventDimParm);

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainReturnLotQty</Name>
				<Source><![CDATA[
    public ReturnExpectedRetQty remainReturnLotQty(SalesLine _salesLine)
    {
        SalesLine salesLineReturn;
        select sum(ExpectedRetQty) from salesLineReturn where
                        salesLineReturn.InventTransIdReturn == this.InventTransId
                     && salesLineReturn.InventTransId != _salesLine.InventTransId;

        SalesLine salesLineCreditNote;
        select sum(SalesQty) from salesLineCreditNote where
                        salesLineCreditNote.InventTransIdReturn == this.InventTransId
                    &&  salesLineCreditNote.InventTransId != _salesLine.InventTransId
                    &&  !salesLineCreditNote.ExpectedRetQty;

        return abs(salesLineReturn.ExpectedRetQty) + abs(salesLineCreditNote.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainSalesFinancial_RU</Name>
				<Source><![CDATA[
    SalesQty remainSalesFinancial_RU(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        if (_inventDimParm.isAllFlagNo())
        {
            return this.RemainSalesFinancial;
        }

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                     this.InventDimId,
                                                                                     this.remainInventFinancial_RU(_inventDimCriteria, _inventDimParm),
                                                                                     this.inventTable().inventUnitId(),
                                                                                     this.SalesUnit,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainSalesPhysical_RU</Name>
				<Source><![CDATA[
    SalesQty remainSalesPhysical_RU(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        if (_inventDimParm.isAllFlagNo())
        {
            return this.RemainSalesPhysical;
        }

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                     this.InventDimId,
                                                                                     this.remainInventPhysical_RU(_inventDimCriteria, _inventDimParm),
                                                                                     this.inventTable().inventUnitId(),
                                                                                     this.SalesUnit,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding record in the <c>ReqTrans</c> table for the current sales line record.
    /// </summary>
    /// <param name="_reqPlanVersionRefRecId">
    /// The record ID of the record in the <c>ReqPlanVersion</c> table to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ReqTrans</c> table; otherwise, an empty record.
    /// </returns>
    public ReqTrans reqTrans(
        RefRecId _reqPlanVersionRefRecId = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
        boolean  _forupdate              = false)
    {
        ReqTrans                    reqTrans;
        InventTransOriginSalesLine  inventTransOriginSalesLine;

        reqTrans.selectForUpdate(_forupdate);

        select firstonly reqTrans
            where reqTrans.PlanVersion  == _reqPlanVersionRefRecId
               && reqTrans.RefType      == ReqRefType::Sales
               && reqTrans.RefId        == this.SalesId
            exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.InventTransOrigin      == reqTrans.InventTransOrigin
                   && inventTransOriginSalesLine.SalesLineDataAreaId    == this.DataAreaId
                   && inventTransOriginSalesLine.SalesLineInventTransId == this.InventTransId;

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedOnOrder</Name>
				<Source><![CDATA[
    public display InventQtyReservOrdered reservedOnOrder()
    {
        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }

        return -InventTransIdSumSingleStatus::qtyReserveOrdered(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedOnOrderInSalesUnit</Name>
				<Source><![CDATA[
    public display SalesQtyReservOrdered reservedOnOrderInSalesUnit()
    {
        InventQtyReservOrdered  inventQtyReservOrdered;

        inventQtyReservOrdered = this.reservedOnOrder();

        if (!inventQtyReservOrdered)
        {
            return 0;
        }

        return this.unitConvertInvent2Sales(inventQtyReservOrdered);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedOnPick</Name>
				<Source><![CDATA[
    public display InventQtyReservOrdered reservedOnPick()
    {
        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }

        return -InventTransIdSumSingleStatus::qtyReservPhysicalAnyWMSOrder(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedPhysical</Name>
				<Source><![CDATA[
    public display InventQtyReservPhysical reservedPhysical()
    {
        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }

        return -InventTransIdSumSingleStatus::qtyReservPhysical(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedPhysicalInSalesUnit</Name>
				<Source><![CDATA[
    public display SalesQtyReservPhysical reservedPhysicalInSalesUnit()
    {
        SalesQtyReservPhysical  salesQtyReservPhysical;

        salesQtyReservPhysical = this.reservedPhysical();

        if (!salesQtyReservPhysical)
        {
            return 0;
        }

        return this.unitConvertInvent2Sales(salesQtyReservPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public InventQty   reserveQty()
    {
        if (! this.Reservation)
        {
            return 0;
        }

        if (this.RemainInventPhysical < 0)
        {
            return 0;
        }

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return -this.PdsCWRemainInventPhysical
                * PdsCatchWeight::minInventQty(this.ItemId, 1);
        }

        return -this.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInventoryAmounts</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private void resetInventoryAmounts()
    {
        this.resetInventoryQuantitiesAndAmounts();

        InventMovement::bufferSetTransQtyUnit(this);
        this.setInventDeliverNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInvent</Name>
				<Source><![CDATA[
    private void resetInvent()
    {
        this.resetInventoryAmounts();
        this.update();
        this.SalesStatus   = SalesStatus::Canceled;
        this.doUpdate();

        InterCompanyUpdateStatus::synchronize(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInventoryQuantitiesAndAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets inventory amounts and quantities on the current sales line.
    /// </summary>
    protected void resetInventoryQuantitiesAndAmounts()
    {
        this.SalesQty   = 0;
        this.PdsCWQty   = 0;
        this.QtyOrdered = 0;
        this.SalesPrice = 0;
        this.LineAmount = 0;

        this.RemainSalesPhysical        = 0;
        this.RemainSalesFinancial       = 0;
        this.RemainInventPhysical       = 0;
        this.PdsCWRemainInventPhysical  = 0;

        // Reset line discount and percent during BOM expansion.
        if (RetailPricingEngine::useRetailPricing(this))
        {
            this.LineDisc = 0;
            this.LinePercent = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCreateReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a replacement order should be created for the sales line in scope.
    /// </summary>
    /// <returns>
    /// true if a replacement order should be created; otherwise, false.
    /// </returns>
    public boolean returnCreateReplacement()
    {
        boolean    ret;

        ret = this.salesTable().returnCreateReplacement() &&
              this.returnDispositionCode().createReplacement();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCreateScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the items returned on the <c>SalesLine</c> record in scope should be scrapped.
    /// </summary>
    /// <returns>
    /// true if the lot should be scrapped; otherwise, false.
    /// </returns>
    public boolean returnCreateScrap()
    {
        boolean ret;

        if (this.interCompanySalesLineExist())
        {
            ret = false;
        }
        else
        {
            ret = this.isStocked() && this.returnDispositionCode().createScrap();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnDeleteReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the return reservation lines.
    /// </summary>
    /// <returns>
    /// true if the reservation has been removed; otherwise, false.
    /// </returns>
    public boolean returnDeleteReservationLine()
    {
        InventTransOriginId salesLineInventTransOriginId;
        SalesLine           reservationLine;
        boolean             ret;

        if (this.isStocked()
        && this.qtyMarked())
        {
            salesLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId);
            InventTransOrigin::deleteMarking(salesLineInventTransOriginId, salesLineInventTransOriginId, this.QtyOrdered *-1
                    , false
                    , null
                    , null
                    , false
                    , false
                    , -this.PdsCWQty
            );

            select forupdate firstonly reservationLine where reservationLine.InventRefTransId == this.InventTransId;
            if (reservationLine.isReturnReservationLine())
            {
                reservationLine.delete();
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ReturnDispositionCode</c> record related to the <c>SalesLine</c> record in scope.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether the <c>ReturnDispositionCode</c> code should be selected
    /// with the <c>forupdate</c> flag; uses false.
    /// </param>
    /// <returns>
    /// A <c>ReturnDispositionCode</c> table buffer identified by the <c>ReturnDispositionCodeId</c>
    /// applied to the <c>SalesLine</c> record in scope.
    /// </returns>
    public ReturnDispositionCode returnDispositionCode(boolean _forupdate = false)
    {
        return ReturnDispositionCode::find(this.ReturnDispositionCodeId,_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnExistMoreOpenLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any more open return lines exist for a sales order.
    /// </summary>
    /// <returns>
    /// true if more open return lines exist; otherwise, false.
    /// </returns>
    public boolean returnExistMoreOpenLines()
    {
        SalesLine salesLineMore;

        select firstonly RecId from salesLineMore
            where salesLineMore.SalesId         == this.SalesId
               && salesLineMore.RecId           != this.RecId
               && salesLineMore.SalesType       == SalesType::ReturnItem
               && salesLineMore.ReturnStatus    != ReturnStatusLine::Awaiting
               && salesLineMore.ExpectedRetQty  < 0;

        return salesLineMore.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current item is a return item.
    /// </summary>
    /// <returns>
    /// true when the current item is a return item; otherwise false.
    /// </returns>
    public boolean returnItem()
    {
        //ReturnItem() is using the order type and not salesTable to determine whether the order is a return order, passing null to avoid lookup on salesTable.
        return this.type(null).returnItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount for the return of items.
    /// </summary>
    /// <param name="_returnQty">
    /// The quantity of items being returned. By default the full expected return quantity is used in the
    /// calculation.
    /// </param>
    /// <returns>
    /// The calculated line amount for the return of items.
    /// </returns>
    public LineAmount returnLineAmount(Qty _returnQty = this.ExpectedRetQty)
    {
        if (SalesLineReturnLineAmountForZeroPriceFlight::instance().isEnabled())
        {
            return this.calcLineAmount(_returnQty);
        }
        else
        {
            return this.SalesPrice ? this.calcLineAmount(_returnQty) : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnActionReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the applied disposition code has a disposition action requiring a reservation line.
    /// </summary>
    /// <returns>
    /// true, if a reservation line is required; otherwise, false.
    /// </returns>
    public boolean returnActionReservationLine()
    {
        DispositionAction dispositionAction = this.returnDispositionCode().DispositionAction;
    
        return dispositionAction == DispositionAction::ReplaceScrap
            || dispositionAction == DispositionAction::ReturnToCust
            || dispositionAction == DispositionAction::Scrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineArrivalUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines based on the sign of the parameter if called as part of a registration or a cancellation and call the appropriate instance method.
    /// </summary>
    /// <param name="_inventQty">
    /// An <c>InventQtyRegistered</c> data type.
    /// </param>
    /// <param name="_cwQty">
    /// An arrived quantity in catch weight unit.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table buffer, optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Function returnLineArrivalUpdate has been incorrectly called.
    /// </exception>
    public void returnLineArrivalUpdate(InventQtyRegistered _inventQty, PdsCWQtyRegistered _cwQty, InventDim _inventDim = null)
    {
        if (!this.RecId
            || !_inventQty
            || (PdsGlobal::pdsIsCWItem(this.ItemId) && !_cwQty)
            || !this.returnItem())
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        if (_inventQty > 0) //Registration.
        {
            if (this.InventTransIdReturn
                && _inventDim)
            {
                // In this scenario we're inside a transaction scope and the inventory transaction to be registered is already created hence no quantity should be passed.
                if (!SalesLine::canRegisterReturnQtyTrackingDim(this.InventTransIdReturn, _inventDim))
                {
                    //The quantity that you have entered exceeds the quantity that it is possible to return for the batch or serial number.
                    throw error("@SYS341821");
                }
            }

            this.returnLineRegisterUpdate(_inventQty, _cwQty);
        }
        else if (_inventQty < 0) //Cancellation.
        {
            if (this.ReturnStatus == ReturnStatusLine::Registered)
            {
                SalesLine  reservationLine;
                select forupdate firstonly reservationLine where reservationLine.InventRefTransId == this.InventTransId;
    
                if (reservationLine || this.qtyMarked())
                {
                    if (this.returnActionReservationLine())
                    {
                        if (reservationLine.SalesQty == reservationLine.RemainSalesPhysical)
                        {
                            InventTransOriginId reservationLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(reservationLine.DataAreaId, reservationLine.InventTransId);
                            InventTransOriginId salesLineInventTransOriginId       = InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId);
                            InventTransOrigin::deleteMarking(salesLineInventTransOriginId, reservationLineInventTransOriginId, -this.QtyOrdered);
                            reservationLine.delete();
                        }
                    }
                    else
                    {
                        throw error("@SYS332911");
                    }
                }
            }
            this.returnLineResetToExpected(_inventQty, _cwQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineHasReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current return line has a reservation line.
    /// </summary>
    /// <returns>
    /// true if a reservation line exists; otherwise, false.
    ///</returns>
    public boolean returnLineHasReservationLine()
    {
        SalesLine reservationLine;
        boolean   ret;

        while select reservationLine
            where reservationLine.InventRefTransId == this.InventTransId
               && reservationLine.InventRefId      == this.SalesId
        {
            if (reservationLine.isReturnReservationLine())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineRegisterUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates return related fields in the product registration scenario.
    /// </summary>
    /// <param name="_qtyRegistered">
    /// A <c>InventQtyRegistered</c> data type.
    /// </param>
    /// <param name="_cwQtyRegistered">
    /// A registered quantity in catch weight unit.
    /// </param>
    public void returnLineRegisterUpdate(InventQtyRegistered _qtyRegistered, PdsCWQtyRegistered _cwQtyRegistered)
    {
        ReturnDispositionCodeId returnDispositionCodeId = this.ReturnDispositionCodeId;

        if (!this.ReturnDispositionCodeId)
        {
            throw error("@SYS332910");
        }

        //Convert expected return quantity to same unit as registered quantity which is always in inventory unit before comparison
        Qty expectedRetQty = this.calcQtyOrdered(this.ExpectedRetQty);

        if (SalesParameters::find().SalesReturnDeliverRemainderPolicy == SalesReturnDeliverRemainderPolicy::EnforceValidate)
        {
            if ((!PdsGlobal::pdsIsCWItem(this.ItemId) && -_qtyRegistered > expectedRetQty)
                || -_cwQtyRegistered > this.PdsCWExpectedRetQty)
            {
                SalesLine::splitReturnLine(this.InventTransId, _qtyRegistered + expectedRetQty, _cwQtyRegistered + this.PdsCWExpectedRetQty);
                this.data(SalesLine::findInventTransId(this.InventTransId));
            }
        }
        else if (-_qtyRegistered > expectedRetQty ||  -_cwQtyRegistered > this.PdsCWExpectedRetQty)
        {
            InventTransId newLineInventTransId = SalesLine::splitReturnLine(this.InventTransId, _qtyRegistered + expectedRetQty, _cwQtyRegistered + this.PdsCWExpectedRetQty);
            this.data(SalesLine::findInventTransId(this.InventTransId));

            SalesLine::deleteSplitReturnLineWithZeroExpectedReturnQty(newLineInventTransId);
        }

        this.ReturnDispositionCodeId = returnDispositionCodeId;
        this.ReturnStatus            = ReturnStatusLine::Registered;
        this.ReturnArrivalDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.createReturnMarkupTrans(this.salesTable());
        this.update();

        DispositionAction dispositionAction = ReturnDispositionCode::find(returnDispositionCodeId).DispositionAction;

        // Process the disposition code
        if (dispositionAction == DispositionAction::Scrap
            || dispositionAction == DispositionAction::ReplaceScrap
            || dispositionAction == DispositionAction::ReturnToCust)
        {
            this.createReturnReservationLine();
            this.data(SalesLine::findInventTransId(this.InventTransId));
        }

        SalesTable salesTableUpdate = this.salesTable(true);

        // Set the delivery address to customer
        if (dispositionAction == DispositionAction::ReturnToCust)
        {
            salesTableUpdate.initFromCustTableMandatoryFields();
            salesTableUpdate.update();
        }
        if (ReturnOrderHasRegisteredLineCalcEstimateFlight::instance().isEnabled())
        {
            salesTableUpdate.setEstimate();
        }
        salesTableUpdate.returnChangeStatus(ReturnStatusHeader::Open);

    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineResetToExpected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the return related fields in the product cancel registration scenario.
    /// </summary>
    /// <param name="_qtyRegistered">
    /// An <c>InventQtyRegistered</c> data type.
    /// </param>
    /// <param name="_cwQtyRegistered">
    /// A registered quantity in catch weight unit.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Only lines that have return status registered can be reset to status open.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// Only negative quantities can be register canceled.
    /// </exception>
    public void returnLineResetToExpected(InventQtyRegistered _qtyRegistered, PdsCWQtyRegistered _cwQtyRegistered)
    {
        DispositionAction dispositionAction = this.returnDispositionCode().DispositionAction;

        void processDispositionCode()
        {
            if (dispositionAction == DispositionAction::ReplaceScrap
                || dispositionAction == DispositionAction::ReturnToCust
                || dispositionAction == DispositionAction::Scrap)
            {
                SalesLine reservationLine;

                //If the reservationLine hasn't been posted, it was deleted earlier.
                //Otherwise it's a ReturnToCust scenario and it needs special attention from the user.
                select forupdate firstonly reservationLine where reservationLine.InventRefTransId == this.InventTransId;

                if (reservationLine)
                {
                    warning(strFmt("@SYS332346", this.returnDispositionCode().Description));
                }

                //In this case partial cancellation is done and a reservation line for the remaining quantity should be created.
                if (this.SalesQty)
                {
                    this.createReturnReservationLine();
                    this.data(SalesLine::findInventTransId(this.InventTransId));
                }
            }
        }

        if (this.ReturnStatus != ReturnStatusLine::Registered)
        {
            throw error(strFmt("@SYS332322", ReturnStatusLine::Registered));
        }

        if (_qtyRegistered > 0 || _cwQtyRegistered > 0)
        {
            throw error("@SYS332323");
        }

        boolean updateLine = true;
        boolean isEnforceValidate = SalesParameters::find().SalesReturnDeliverRemainderPolicy == SalesReturnDeliverRemainderPolicy::EnforceValidate;

        if (isEnforceValidate)
        {
            if (this.registeredInInventUnit())
            {
                SalesLine::splitReturnLine(this.InventTransId, _qtyRegistered, _cwQtyRegistered);
                this.data(SalesLine::findInventTransId(this.InventTransId));

                processDispositionCode();
                updateLine = false;
            }
        }
        else
        {
            Qty expectedRetQty;

            //Convert expected return qty to same unit as qtyregistered which is always in inventory unit before comparison
            if (this.isStocked())
            {
                expectedRetQty = this.calcQtyOrdered(this.ExpectedRetQty);
            }

            if (_qtyRegistered > expectedRetQty || _cwQtyRegistered > this.PdsCWExpectedRetQty)
            {
                InventTransId newLineInventTransId = SalesLine::splitReturnLine(this.InventTransId, _qtyRegistered, _cwQtyRegistered);
                this.data(SalesLine::findInventTransId(this.InventTransId));

                SalesLine newLine = SalesLine::findInventTransId(newLineInventTransId, true);
                if (newLine && PdsGlobal::pdsIsCWItem(newLine.ItemId) && !newLine.PdsCWQty)
                {
                    newLine.delete();
                }

                processDispositionCode();
                updateLine = false;
            }
        }

        if (updateLine)
        {
            if (!this.ReturnAllowReservation)
            {
                this.SalesQty = 0;
                this.PdsCWQty = 0;

                if (isEnforceValidate && PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    this.QtyOrdered = 0;
                    this.RemainSalesPhysical = 0;
                    this.RemainInventPhysical = 0;
                    this.PdsCWRemainInventPhysical = 0;
                }
                else
                {
                    this.salesQtyModified();
                }

                this.LineAmount = this.returnLineAmount();

                if (!this.isStocked())
                {
                    this.RemainSalesPhysical = 0;
                }
            }

            processDispositionCode();

            this.ReturnStatus            = ReturnStatusLine::Awaiting;
            this.ReturnDispositionCodeId = '';
            this.ReturnArrivalDate       = dateNull();
            Markup::delete(this);
            this.update();
        }

        if (dispositionAction == DispositionAction::ReplaceScrap
            || dispositionAction == DispositionAction::ReplaceCredit)
        {
            ReturnReplaceItemRef::deleteReplaceSetup(this.SalesId, this.LineNum);
        }

        // Set delivery address to self company
        if (dispositionAction == DispositionAction::ReturnToCust
            && !this.salesTable().returnExistReturnToCustLines())
        {
            SalesTable salesTableUpdate = this.salesTable(true);
            salesTableUpdate.setReturnAddressFromInventLocationId(salesTableUpdate.InventLocationId);
            salesTableUpdate.update();
        }

        //Reset header status if this was the only open line.
        if (this.ReturnStatus == ReturnStatusLine::Awaiting
            && !this.returnExistMoreOpenLines())
        {
            this.salesTable(true).returnChangeStatus(ReturnStatusHeader::Created);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransNotPackingSlipReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Get a record from the <c>InventTrans</c> table.
    /// </summary>
    /// <param name="_transId">
    ///   The inventTransId of inventTrans.
    /// </param>
    /// <returns>
    ///   An <c>InventTrans</c> record.
    /// </returns>
    private InventTrans findInventTransNotPackingSlipReturned(InventTransId   _transId)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;

        select firstonly inventTrans
            exists join inventTransOrigin
                where inventTransOrigin.RecId         ==  inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId == _transId
                   && !inventTrans.PackingSlipReturned;

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Scraps the lot that is returned on the <c>SalesLine</c> in scope.
    /// </summary>
    /// <remarks>
    /// If a reservation line exists it will be deleted and if other markings exists they will be
    /// canceled.The lot in question is send to quarantine and then scrapped.
    /// </remarks>
    public void returnLineScrap()
    {
        InventTrans                     inventTrans;
        InventTransOrigin               inventTransOriginQuarantine;
        InventTransOriginId             salesLineInventTransOriginId;
        InventTransOriginId             quarantineInventTransOriginId;
        InventDim                       inventDimQuarantine, inventDim;
        InventQuarantineOrder           quarantineOrder;
        InventParmQuarantineOrder       inventParmQuarantineOrder;
        InventQuarantineOrder_Scrap     inventQuarantineOrder_Scrap = InventQuarantineOrder_Scrap::construct();
        InventQuarantineUpdStartUp      inventQuarantineUpdStartUp;
        InventLocation                  inventLocation;
        InventQuarantineOrder           inventQuarantineOrder = InventQuarantineOrder::findInventTransIdRef(this.InventTransId);

        using (var context = new InventQuarantineOrderFromScrapReturnOrderContext())
        {

            if (inventQuarantineOrder && inventQuarantineOrder.Status != InventQuarantineStatus::Ended)
            {
                this.returnDeleteReservationLine();
                return;
            }

            ttsbegin;
            this.returnDeleteReservationLine();

            salesLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId);

            // Create the Quarantine order.
             
            while select sum(PdsCWQty), sum(Qty) from inventTrans
                group by InventTransOrigin, ItemId, InventDimId
                where inventTrans.InventTransOrigin == salesLineInventTransOriginId
                   && !inventTrans.PackingSlipReturned
                   && inventTrans.InvoiceReturned
                notexists join inventTransOriginQuarantine
                where inventTransOriginQuarantine.RecId             == inventTrans.MarkingRefInventTransOrigin
                   && inventTransOriginQuarantine.ReferenceCategory == InventTransType::QuarantineOrder
                   && inventQuarantineOrder.Status != InventQuarantineStatus::Ended
            {
                quarantineOrder.clear();
                quarantineOrder.initFromInventTable(InventTable::find(inventTrans.ItemId));
                quarantineOrder.initFromInventTrans(inventTrans);
                quarantineOrder.initValue();
                quarantineOrder.InventDimId = inventTrans.InventDimId;
                inventDim.data(InventDim::find(quarantineOrder.InventDimId));
                inventDimQuarantine.data(inventDim);
                inventLocation                        = InventLocation::find(inventDim.InventLocationId);
                inventDimQuarantine.InventSiteId      = inventLocation.InventSiteId;
                inventDimQuarantine.InventLocationId  = inventLocation.InventLocationIdQuarantine;
                inventDimQuarantine.wmsLocationId     = WMSLocation::defaultItemLocation(this.ItemId, InventDirection::Receipt, inventDimQuarantine).wmsLocationId;
                // Quarantine warehouse cannot have license plate controlled locations.
                inventDimQuarantine.LicensePlateId    = '';

                quarantineOrder.InventDimId           = InventDim::findOrCreate(inventDim).InventDimId;
                quarantineOrder.InventDimIdQuarantine = InventDim::findOrCreate(inventDimQuarantine).InventDimId;
                quarantineOrder.InventTransIdRef      = this.InventTransId;
                quarantineOrder.DefaultDimension      = this.DefaultDimension;
                quarantineOrder.QuarantineId          = InventQuarantineOrder::numberSeq().num();
                quarantineOrder.TransType  = InventTransType::Sales;
                quarantineOrder.TransRefId = this.SalesId;

                // Scrap is the only scenario where quarantine orders are allowed for WHS items so skip WHS checks
                if (quarantineOrder.validateWrite(true))
                {
                    quarantineOrder.insert();
                }
                else
                {
                    throw error("@SCM:QuarantineOrderCannotBeCreated");
                }
                quarantineInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(quarantineOrder.DataAreaId, quarantineOrder.QuarantineId);

                //Establish hard marking between this Return order line and the Quarantine order which will scrap the lot in question.
                InventTransOrigin::updateMarking(quarantineInventTransOriginId, salesLineInventTransOriginId, -quarantineOrder.Qty
                    , ''
                    , SortOrder::Ascending
                    , false
                    , null
                    , null
                    , -quarantineOrder.PdsCWQty
                    );
                InventTransOrigin::updateMarking(salesLineInventTransOriginId, quarantineInventTransOriginId, quarantineOrder.Qty
                    , ''
                    , SortOrder::Ascending
                    , false
                    , null
                    , null
                    , quarantineOrder.PdsCWQty
                    );

                // Start the Quarantine order.
                inventParmQuarantineOrder.clear();
                inventParmQuarantineOrder.QuarantineId = quarantineOrder.QuarantineId;
                inventParmQuarantineOrder.TransDate    = quarantineOrder.QuarantineDate;
                inventQuarantineUpdStartUp             = InventQuarantineUpdStartUp::newParmBuffer(inventParmQuarantineOrder);
                inventQuarantineUpdStartUp.run();

                // Scrap the Quarantine order.
                inventQuarantineOrder_Scrap.parmInventQuarantineId(quarantineOrder.QuarantineId);
                inventQuarantineOrder_Scrap.parmScrapQty(quarantineOrder.RemainQty);
                inventQuarantineOrder_Scrap.parmCWScrapQty(quarantineOrder.PdsCWRemainQty);
                inventQuarantineOrder_Scrap.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                inventQuarantineOrder_Scrap.runOperation();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the special actions that are needed for return orders.
    /// </summary>
    /// <param name="_documentStatus">
    /// A <c>DocumentStatus</c> base enumeration value.
    /// </param>
    /// <returns>
    /// A buffer of the <c>SalesLine</c> table;
    /// </returns>
    /// <remarks>
    /// This method handles the special actions that are needed for return orders.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// A replacement order setup is missing.
    /// </exception>
    public SalesLine returnLineUpdate(DocumentStatus _documentStatus)
    {
        DispositionAction           dispositionAction;
        ReturnReplaceItemRef        replaceItemRef;

        if (_documentStatus == DocumentStatus::PackingSlip && this.ReturnStatus == ReturnStatusLine::Received)
        {
            // packing slip was corrected
            dispositionAction = this.returnDispositionCode().DispositionAction;

            if (dispositionAction    == DispositionAction::ReplaceScrap
                || dispositionAction == DispositionAction::ReplaceCredit)
            {
                while select forupdate replaceItemRef
                    where replaceItemRef.OrigSalesId        == this.SalesId
                        && replaceItemRef.OrigSalesLineNum  == this.LineNum
                {
                    if (replaceItemRef.ReplaceSalesId != '')
                    {
                        info(strFmt("@SYS334605", replaceItemRef.ReplaceSalesId));
                    }
                    replaceItemRef.delete();
                }
            }
        }
        else
        {
            if ( this.mustScrapReturnLine(_documentStatus))
            {
                this.returnLineScrap();
                this.data(SalesLine::findInventTransId(this.InventTransId));
                this.setSalesStatus();
            }

            if (this.returnCreateReplacement())
            {
                if (ReturnReplaceItemRef::existOrigSalesLine(this.SalesId, this.LineNum))
                {
                    this.createReplacement();
                }
                else
                {
                    // Replacement order setup is missing for return order number %1, line number %2.
                    throw error(strFmt("@SYS123029", this.salesTable().ReturnItemNum, this.LineNum));
                }
            }
        }

        return this.setReturnLineStatus(_documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustScrapReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales line must be scrapped.
    /// </summary>
    /// <param name = "_documentStatus">The current document status.</param>
    /// <returns>true if the sales line must be scrapped; otherwise, false.</returns>
    protected boolean mustScrapReturnLine(DocumentStatus _documentStatus)
    {
        #ISOCountryRegionCodes
        return (_documentStatus == DocumentStatus::Invoice
               || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && _documentStatus == DocumentStatus::Facture_RU)
               && this.returnCreateScrap()
               && !this.isReturnLineScrapped());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustScrapReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the return should be handled as scrap.
    /// </summary>
    /// <returns>true if the return must be scrapped; otherwise, false.</returns>
    protected boolean mustScrapReturn()
    {
        return ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction == DispositionAction::CreditOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnUpdateBasedOnDispcode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the return status on both <c>SalesTable</c> and <c>SalesLine</c> records.
    /// </summary>
    /// <remarks>
    ///     This method is only used when the credit only disposition code (NoItem) is manually applied or cleared in the <c>ReturnTable</c> form.
    /// </remarks>
    public void returnUpdateBasedOnDispcode()
    {
        boolean             scrap = this.mustScrapReturn();
        ReturnStatusHeader  statusHeader = ReturnStatusHeader::None;

        if (scrap)
        {
            this.ReturnAllowReservation = false;
        }

        if (!this.interCompanySalesLineExist())
        {
            this.RemainSalesPhysical    = scrap ? this.ExpectedRetQty : 0;
            this.SalesQty               = scrap ? this.ExpectedRetQty : 0;
            this.QtyOrdered             = scrap ? this.calcQtyOrdered(this.ExpectedRetQty) : 0;
            this.RemainInventPhysical   = this.QtyOrdered;
            this.Scrap                  = scrap;
            this.PdsCWQty                  = scrap ? this.PdsCWExpectedRetQty : 0;
            this.PdsCWRemainInventPhysical = scrap ? this.PdsCWExpectedRetQty : 0;
        }

        this.ReturnArrivalDate  = this.ReturnStatus == ReturnStatusLine::Awaiting && !this.ReturnArrivalDate && scrap ? DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) : dateNull();

        this.setWMSLocation();
        this.setReturnTrackingDim();

        if (scrap)
        {
            this.ReturnStatus = ReturnStatusLine::Received;
            statusHeader      = ReturnStatusHeader::Open;
        }
        else
        {
            this.ReturnStatus = ReturnStatusLine::Awaiting;

            boolean resetHeaderStaus = (select firstonly RecId from salesLine
                                            where salesLine.SalesId                 == this.SalesId
                                               && salesLine.RecId                   != this.RecId
                                               && salesLine.ReturnDispositionCodeId != '').RecId == 0;
            if (resetHeaderStaus)
            {
                statusHeader = ReturnStatusHeader::Created;
            }
        }

        if (statusHeader != ReturnStatusHeader::None &&
            statusHeader != this.salesTable().ReturnStatus)
        {
            ttsbegin;
            SalesTable salesTable = this.salesTable(true);
            salesTable.ReturnStatus = statusHeader;
            salesTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnUpdateLinePrePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the posting of preliminary updates to a record.
    /// </summary>
    /// <param name="_documentStatus">
    /// A <c>DocumentStatus</c> enumeration.
    /// </param>
    /// <returns>
    /// true if the record has been updated; otherwise, false.
    /// </returns>
    public boolean returnUpdateLinePrePosting(DocumentStatus _documentStatus)
    {
        DispositionAction   dispositionAction;
        boolean             ret;

        if (this.returnItem()
            && _documentStatus  == DocumentStatus::PackingSlip
            && this.ReturnStatus == ReturnStatusLine::Received)
        {
            // In process of packing correction

            dispositionAction = this.returnDispositionCode().DispositionAction;

            if (dispositionAction    == DispositionAction::ReplaceScrap
                    || dispositionAction == DispositionAction::Scrap)
            {
                ret = this.returnDeleteReservationLine();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPriceDiscPolicyDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog.
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field in question.
    /// </param>
    /// <param name="_showLineItem">
    /// An optional Boolean controlling if item and line number should be displayed in the dialog. Default value is false.
    /// </param>
    /// <param name="_skipTriggerFieldCheck">
    /// A Boolean specifying whether changes to price discount trigger fields should be verified; optional.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>
    [SysObsolete("Method is moved to PriceDiscPolicyRule as launchPolicyDialogForSingleField or launchPolicyDialogForAllFields.", false, 31\03\2018), Hookable(false)]
    public boolean runPriceDiscPolicyDialog(
        RefFieldId  _fieldId                = 0,
        boolean     _showLineItem           = false,
        boolean     _skipTriggerFieldCheck  = false)
    {
        return this.PriceDiscResultFields::runPriceDiscPolicyDialog(_fieldId, _showLineItem, _skipTriggerFieldCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers Brazilian extension table
    /// </summary>
    /// <returns>
    /// A record of <c>SalesLine_BR</c>
    /// </returns>
    public SalesLine_BR salesLine_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesLine_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>SalesLine_IN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>SalesLine_IN</c> associated with the current record.
    /// </returns>
    public SalesLine_IN salesLine_IN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesLine_IN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>SalesLine_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public SalesLine_Intrastat salesLine_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesLine_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>SalesLine_W</c> extension table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesLine_W</c> record associated with the current record.
    /// </returns>
    public SalesLine_W salesLine_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesLine_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyModified</Name>
				<Source><![CDATA[
    public void salesQtyModified()
    {
        this.initSalesQty();

        this.LineAmount = this.calcLineAmount();

        InventMovement::bufferSetTransQtyUnit(this);

        this.setInventDeliverNow();
        InventMovement::bufferSetRemainQty(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyModifiedInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the code that relates to changes in the sales line when the sales quantity is changed by
    /// user interaction when the associated link to an agreement line is invalid.
    /// </summary>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed; optional.
    /// </param>
    /// <remarks>
    /// A prompt is displayed if the linked sales agreement line is set to enforce a maximum quantity.
    /// </remarks>
    public void salesQtyModifiedInteraction(boolean _uiEnabled = true)
    {
        boolean     isAgreementLinkRefreshed;
        AmountCur   localOrigLineAmount = this.LineAmount; //This variable is needed for the uncommitted scenario.

        if (!this.isTmp() && this.salesTable().MatchingAgreement)
        {
            //The impact on line amount should be included in the agreement link validation.
            this.LineAmount      = this.calcLineAmountForced(this.SalesQty);
            isAgreementLinkRefreshed = this.refreshAgreementLink(new AgreementAutolinkHelperSalesLine());
            this.LineAmount      = localOrigLineAmount;

            if (isAgreementLinkRefreshed)
            {
                SalesLine::modifySalesQty(this, this.inventDim(), true, _uiEnabled);
            }
            else
            {
                if (this.unLinkAgreementLinePrompt(fieldNum(SalesLine,SalesQty)))
                {
                    if (this.LineDeliveryType != LineDeliveryType::DeliveryLine
                        && this.doReCalcPricesFromBasePrompt())
                    {
                        SalesLine::modifySalesQty(this,this.inventDim(), true, _uiEnabled);
                    }
                    else
                    {
                        SalesLine::modifySalesQty(this,this.inventDim(), false, _uiEnabled);
                    }
                }
                else
                {
                    this.SalesQty = this.orig().SalesQty;
                }
            }
        }
        else
        {
            SalesLine::modifySalesQty(this,this.inventDim(), this.mustResetPriceAndDiscounts(), _uiEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    public SalesTable salesTable(boolean  _update = false)
    {
        return SalesTable::find(this.SalesId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableAllowsIntercompanyCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales order header allows intercompany chain creation.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order header record associated with the current sales order line.
    /// </param>
    /// <returns>true if the sales order header allows intercompany chain creation; otherwise, false.</returns>
    private boolean salesTableAllowsIntercompanyCreation(SalesTable _salesTable)
    {
        return this.SkipUpdate != InterCompanySkipUpdate::InterCompany
               && this.SkipUpdate != InterCompanySkipUpdate::Both
               && _salesTable.InterCompanyAutoCreateOrders
               && (this.AutoCreateInterCompanyOrders || _salesTable.existInterCompanySales());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the sales line, depending on changes in the sales unit field.
    /// </summary>
    /// <remarks>
    /// Called from the <c>modifiedField</c> method.
    /// </remarks>
    public void salesUnitModified()
    {
        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            RetailPricingCacheManager::cacheSalesLineModifySalesQtyFieldId(
                this.SalesId, this.LineNum, fieldNum(SalesLine, SalesUnit));
            SalesLine::modifySalesQty(this,this.inventDim(), !this.isLinkedToAgreement());
            InventMovement::bufferSetTransQtyUnit(this);
            this.setInventDeliverNow();
        }

        InventItemBarcode inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(this.ItemId,  this.inventDim(), '', this.SalesUnit);

        if (inventItemBarcode.RecId)
        {
            this.BarCode     = inventItemBarcode.ItemBarCode;
            this.BarCodeType = inventItemBarcode.BarcodeSetupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromProjTable</Name>
				<Source><![CDATA[
    public void setAddressFromProjTable(ProjTable _projTable)
    {
        LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(_projTable.DeliveryLocation);

        this.DeliveryName               = _projTable.DlvName;
        this.DeliveryPostalAddress      = location.getPostalAddress().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromSalesLine</Name>
				<Source><![CDATA[
    public void setAddressFromSalesLine(SalesLine  _salesLine)
    {
        this.DeliveryPostalAddress      = _salesLine.DeliveryPostalAddress;
        this.DeliveryName               = _salesLine.DeliveryName;
        this.AddressRefRecId            = _salesLine.AddressRefRecId;
        this.AddressRefTableId          = _salesLine.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromSalesTable</Name>
				<Source><![CDATA[
    public void  setAddressFromSalesTable(SalesTable  _salesTable = this.salesTable())
    {
        this.DeliveryPostalAddress   = _salesTable.DeliveryPostalAddress;

        this.DeliveryName               = _salesTable.DeliveryName;
        this.AddressRefRecId            = _salesTable.AddressRefRecId;
        this.AddressRefTableId          = _salesTable.AddressRefTableId;
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Copy tax group to the sales line.
            this.TaxGroup                   = _salesTable.TaxGroup;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.setAddressFromSalesTable_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromSalesTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the execution of the original setAddressFromSalesTable_BR method.
    /// </summary>
    public void setAddressFromSalesTable_BR()
    {
        this.onDeliveryPostalAddressChange_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementSkipAutoLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the AgreementSkipAutoLink field of <c>SalesLine</c>
    /// </summary>
    /// <param name="_agreementSkipAutoLink">
    /// Value for the AgreementSkipAutoLink field to be set on the instance of <c>SalesLine</c>
    /// </param>
    /// <remarks>
    /// This value determines whether or not automatic attempt to link this line to agreement line should take place or not
    /// in case when agreement specific information is changed for this instance of <c>SalesLine</c>
    /// </remarks>
    public void setAgreementSkipAutoLink(AgreementSkipAutoLink _agreementSkipAutoLink)
    {
        this.AgreementSkipAutoLink = _agreementSkipAutoLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encapsulates the logic that replaces the items with an alternative item setup.
    /// </summary>
    /// <param name="_salesAlternativeItem">
    /// An instance of a <c>SalesAlternativeItem</c> class.
    /// </param>
    /// <param name="_showInfo">
    /// A Boolean value that determines whether information should be given to the user.
    /// </param>
    /// <remarks>
    /// The default value of the <paramref name="_showInfo" /> parameter is false, and no information is
    /// exposed.
    /// </remarks>
    public void setAlternativeItem(SalesAlternativeItem _salesAlternativeItem, boolean _showInfo = false)
    {
        ItemId                          itemId, itemIdOrig;
        InventDim                       localInventDim;
        EcoResProductDimGroupSetup      dimSetup;

        itemIdOrig              = this.ItemId;
        itemId                  = _salesAlternativeItem.alternativeItemId();
        localInventDim          = _salesAlternativeItem.parmInventDim();
        dimSetup                = EcoResProductDimGroupSetup::newItemId(itemId);

        dimSetup.copyProductDimensions(_salesAlternativeItem.alternativeProductDimension(dimSetup, localInventDim), localInventDim);
        this.setInventDimIdFromInventDim(localInventDim);
        this.ItemId             = itemId;
        this.itemIdChanged();
        this.initBarcode();
        

        localInventDim.data(this.inventDim());

        if (_showInfo)
        {
            info(strFmt("@SYS79522", itemIdOrig, this.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for setting CFOP code
    /// </summary>
    /// <param name="_askToUser">
    /// Boolean to define if should request user interaction
    /// </param>
    public void setCFOP_BR(boolean _askToUser = false)
    {
        SalesLine_BR salesLine_BR;

        salesLine_BR = this.salesLine_BR();
        salesLine_BR.cfopTable_BR = CFOPValidation_BR::construct(this).getDefaultCFOP(_askToUser);

        this.packSalesLine_BR(salesLine_BR);

        this.updateDeliveryCFOP_BR();
        this.setTaxGroupAndTaxItemGroupFields_BR();
        this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOPFromSalesTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///  It sets CFOP field based on SalesTable
    /// </summary>
    /// <param name="_salesTable">
    /// Sales order used to get CFOP data
    /// </param>
    public void setCFOPFromSalesTable_BR(SalesTable  _salesTable = this.salesTable())
    {
        this.updateDeliveryCFOP_BR();
        this.setTaxGroupAndTaxItemGroupFields_BR();
        this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery date control type for the current sales line.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension to use to find the delivery date control type.
    /// </param>
    /// <remarks>
    /// For category based lines, delivery date control type is defaulted from the sales table.
    /// </remarks>
    public void setDeliveryDateControlType(InventDimId _inventDimId = this.InventDimId)
    {
        SalesATPSettingsMap             salesATPSettingsMap;
        SalesDeliveryDateControlType    deliveryDateControlType;

        if (this.isCategoryBased())
        {
            deliveryDateControlType = this.salesTable().DeliveryDateControlType;
        }
        else
        {
            salesATPSettingsMap = SalesATPCalculation::findSalesOrderSettings(this.ItemId, _inventDimId);

            deliveryDateControlType = salesATPSettingsMap.IsItemSpecific ?
                salesATPSettingsMap.DeliveryDateControlType
                : this.salesTable().DeliveryDateControlType;
        }

        if ((deliveryDateControlType == SalesDeliveryDateControlType::ATP || deliveryDateControlType == SalesDeliveryDateControlType::ATPPlusIssueMargin)
            && (!this.isStocked() || this.inventTable().inventItemType().isServiceItem()) )
        {
            deliveryDateControlType = SalesDeliveryDateControlType::None;
        }

        this.DeliveryDateControlType = deliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpectedReturnQuantityFromCWQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the expected return quantity from the CW return quantity.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension to use for finding expected return quantity from.
    /// </param>
    public void setExpectedReturnQuantityFromCWQuantity(InventDim _inventDim)
    {
        ReturnExpectedRetQty                    returnExpectedRetQty;
        InventQty                               inventQty;
        InventTable                             inventTable;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            inventQty = -SalesLine::getInventQtyFromCWUnit(this,this.PdsCWExpectedRetQty,_inventDim,true);
            inventTable = this.inventTable();

            if (SalesParameters::find().SalesReturnDeliverRemainderPolicy == SalesReturnDeliverRemainderPolicy::EnforceValidate)
            {
                returnExpectedRetQty = decRound(inventQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(this.SalesUnit)));
            }
            else
            {
                returnExpectedRetQty = UnitOfMeasureConverter::convert(inventQty,
                    UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()),
                    UnitOfMeasure::unitOfMeasureIdBySymbol(this.SalesUnit),
                    NoYes::Yes,
                    inventTable.Product);
            }

            if (returnExpectedRetQty)
            {
                this.ExpectedRetQty = returnExpectedRetQty;
            }
            else
            {
                this.pdsCWExpRetQtyConversion();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDeliverNow</Name>
				<Source><![CDATA[
    public void  setInventDeliverNow()
    {
        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(this.ItemId, this.inventDim()))
        {
            this.InventDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                          this.InventDimId,
                                                                                                          this.SalesDeliverNow,
                                                                                                          this.SalesUnit,
                                                                                                          this.inventTable().inventUnitId(),
                                                                                                          NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <paramref name="InventDimId" /> parameter to the <c>SalesLine.inventDimId</c> field and
    /// defaults, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>SalesLine.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <paramref name="InventDimId" /> parameters;
    /// optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the given <c>InventDim</c> table and applies the
    /// found <c>InventDimId</c> to the <c>SalesLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current <c>SalesLine</c> record
    /// buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSumLogTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic to control whether changes to the sales line are tracked.
    /// </summary>
    /// <remarks>
    /// The records are inserted into the <c>InventSumLogTTS</c> table when changes are tracked.
    /// </remarks>
    public void setInventSumLogTTS()
    {
        if (   this.Reservation             == ItemReservation::Explosion
           && !this.isDeliveryDateControlTypeClassicCTP())
        {
            // If DeliveryDateControlType == SalesDeliveryDateControlType::CTP the explosion is done after commit
            InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().parmSkipInventSumLogTTS(ReqPlanManager::allowSkipTTS()); // Skip inventSumLogTTS because reqTrans(es) deleted and inserted directly
        }
        else
        {
            InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().parmSkipInventSumLogTTS(false); // to make sure that inventSumLogTTS is not skipped, if it was skipped earlier
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    void  setListCode()
    {
        //    this.listcode = EUSalesList::resolveListCode(this.deliveryCountry, this.payer().country);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery address information and the related information.
    /// </summary>
    /// <param name="_location">
    /// The record ID of the logistics location.
    /// </param>
    /// <remarks>
    /// If the <c>SalesType</c> is <c>ReturnItem</c>, the address will be set to a default value by using a
    /// receiving address.
    /// </remarks>
    public void  setLocation(LogisticsLocationRecId _location)
    {
        LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(_location);
        Common transferFromTable;

        if (location.parmLocationDescription())
        {
            this.DeliveryName = location.parmLocationDescription();
        }

        this.DeliveryPostalAddress = location.getPostalAddress().RecId;

        if (this.SalesType == SalesType::ReturnItem)
        {
            transferFromTable = this.getDeliveryEntityRecord();
            this.AddressRefRecId = transferFromTable.RecId;
            this.AddressRefTableId = transferFromTable.TableId;
        }
        else
        {
            this.AddressRefRecId            = location.parmLocationRecId();
            this.AddressRefTableId          = tableNum(LogisticsLocation);
        }

        this.setListCode();
        this.setTaxGroup(TaxSales::custTaxGroup(this.deliveryTerm(), this.TaxGroup, _location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the same batch parameter for the sales line.
    /// </summary>
    public void setPdsSameLot()
    {
        this.type().setPdsSameLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostingProfile_RU</Name>
				<Source><![CDATA[
    void setPostingProfile_RU()
    {
        InventProfileId_RU inventProfile = this.inventDim().InventProfileId_RU;

        if (inventProfile && (! this.RecId || inventProfile != this.orig().inventDim().InventProfileId_RU))
        {
            this.PostingProfile_RU = InventProfileCustVendLedger_RU::custPostingProfile(inventProfile);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    /// A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields
    /// should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true,
        PriceDiscPriceAgreementParameters _parameters   = this.createPriceDiscPriceAgreementParameterInstance())
    {
        using(var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().setPriceAgreement(this))
        {
            this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields, _parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets prices and discounts on the <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    /// <param name = "_initDateFields">A <c>boolean</c> value.</param>
    /// <param name = "_parameters">An instance of the <c>PriceDiscPriceAgreementParameters</c> class, used to pass any additional parameters.</param>
    [Hookable(false), Wrappable(false)]
    public void setPriceDisc(InventDim _inventDim, boolean _initDateFields = true, PriceDiscPriceAgreementParameters _parameters = this.createPriceDiscPriceAgreementParameterInstance())
    {
        if (this.SkipPriceDiscCalc == NoYes::Yes)
        {
            return;
        }

        using(SysInstrumentationActivityContext activityContext = SalesLine::instrumentationLogger().salesOrderActivities().setPriceDisc(this))
        {
            if (this.salesTable().isRetailSale())
            {
                RetailSalesOrderCreationContext context = RetailSalesOrderCreationContext::current();
                RetailParameters retailParameters = RetailParameters::find();
                boolean isDelayedCalculationEnabled = retailParameters.EnableDelayedPriceAndDiscountCalculation;

                // When delayed calculation is enabled, skip line-by-line pricing calculation only for data import via data management.
                // Calculation still required for other data import (e.g. via OData).
                boolean isDataImportInDataManagementContext = context != null && context.parmDataImporting() && context.parmIsInDataManagementContext();
                if (isDelayedCalculationEnabled && isDataImportInDataManagementContext)
                {
                    return;
                }
            }
            
            if (SalesLinePriceDiscLookupCacheFlight::instance().isEnabled()
                && !this.SkipPriceDiscCalcInBulkCreation)
            {
                InventDimSHA3HashHex SHA3Hash;

                SalesLinePriceDiscLookupCacheContext context = SalesLinePriceDiscLookupCacheContext::current();

                if (context != null)
                {
                    SHA3Hash = InventDim::computeSHA3Hash(this.salesPurchLineInterface().priceDiscLookupCacheKey(_inventDim));

                    boolean skipPriceDiscLookup = SHA3Hash && this.PriceDiscLookupCacheKey == SHA3Hash;

                    activityContext
                        .addCustomProperty('SkipPriceDiscLookup', any2Str(skipPriceDiscLookup));

                    if (skipPriceDiscLookup)
                    {
                        return;
                    }
                }

                DiscPct origLineDiscPercent = this.LinePercent;
                DiscAmount origLineDisc = this.LineDisc;

                this.salesPurchLineInterface().setPriceDisc(_inventDim, _initDateFields, _parameters);

                if (SHA3Hash)
                {

                    boolean discountChanged = 
                        origLineDiscPercent != this.LinePercent
                        || origLineDisc != this.LineDisc;

                    activityContext
                        .addCustomProperty('DiscountChanged', any2Str(discountChanged));
                    
                    if (discountChanged)
                    {
                        this.PriceDiscLookupCacheKey = InventDim::computeSHA3Hash(this.salesPurchLineInterface().priceDiscLookupCacheKey(_inventDim));
                    }
                    else
                    {
                        this.PriceDiscLookupCacheKey = SHA3Hash;
                    }
                }
            }
            else
            {
                this.salesPurchLineInterface().setPriceDisc(_inventDim, _initDateFields, _parameters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscPriceAgreementParameterInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>PriceDiscPriceAgreementParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscPriceAgreementParameters</c> class.</returns>
    protected PriceDiscPriceAgreementParameters createPriceDiscPriceAgreementParameterInstance()
    {
        return PriceDiscPriceAgreementParameters::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>createPriceDiscChangePolicy</c> method of the <c>PriceDiscResultFields</c> table.
    /// </summary>
    /// <param name="_policySource">
    /// A <c>PriceDiscSystemSource</c> enumeration value that indicates the source of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
    {
        this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Sales, _policySource, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setManualEntryChangePolicyFromPurchLine</Name>
				<Source><![CDATA[
    internal void setManualEntryChangePolicyFromPurchLine(PurchLine _purchLine)
    {
        if (this.ManualEntryChangepolicy || _purchLine.ManualEntryChangepolicy)
        {
            this.ManualEntryChangepolicy = 0;

            PriceDiscPolicyCheckPolicy checkPolicy = PriceDiscPolicyCheckPolicy::newFromParm(_purchLine);
            container priceDiscChangePolicyFieldIds = checkPolicy.getPolicyFields();
            
            for (int i = 1; i <= conLen(priceDiscChangePolicyFieldIds); i++)
            {
                RefFieldId purchLinePolicyField = conPeek(priceDiscChangePolicyFieldIds, i);
                if (purchLinePolicyField)
                {
                    PriceDiscPolicyField policyField = PriceDiscResultFields::tableFieldMapping().tableField2PolicyField(_purchLine.TableId, purchLinePolicyField);

                    if (policyField && checkPolicy.hasManualPolicyField(policyField))
                    {
                        RefFieldId salesLineManualPolicyField = PriceDiscResultFields::tableFieldMapping().policyField2TableField(this.TableId, policyField);
                        
                        this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, salesLineManualPolicyField);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscMarkup</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_priceDisc">
    /// An instance of the <c>PriceDisc</c> class.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceDiscMarkup(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy)
    {
        this.salesPurchLineInterface().setPriceDiscMarkup(_priceDisc, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscPriceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscPriceUnit</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_priceDisc">
    /// An instance of the <c>PriceDisc</c> class.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class.
    /// </param>
    /// <param name="_retailCalculator">
    ///    A <c>RetailSalesOrderCalculator</c> object.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceDiscPriceUnit(
        PriceDisc_Price             _priceDisc,
        PriceDiscPolicyCheckPolicy  _checkPolicy,
        RetailOrderCalculator       _retailCalculator = null)
    {
        this.salesPurchLineInterface().setPriceDiscPriceUnit(_priceDisc, _checkPolicy, _retailCalculator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjLinePropertyId</Name>
				<Source><![CDATA[
    void setProjLinePropertyId()
    {
        this.ProjLinePropertyId    = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a return line status that is based on an update document.
    /// </summary>
    /// <param name="_documentStatus">
    /// A <c>DocumentStatus</c> enumeration value.
    /// </param>
    /// <returns>
    /// The <c>SalesLine</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The return order lines do not have a <c>Registered</c> or <c>Received</c> enumeration value return
    /// status.
    /// </exception>
    public SalesLine setReturnLineStatus(DocumentStatus _documentStatus)
    {
        switch (_documentStatus)
        {
            case DocumentStatus::PackingSlip :
                if (this.ReturnStatus == ReturnStatusLine::Registered)
                {
                    this.ReturnStatus = ReturnStatusLine::Received;
                    this.doUpdate();
                }
                else if (this.ReturnStatus == ReturnStatusLine::Awaiting
                    && InventTrans::findTransId(this.InventTransId).StatusReceipt == StatusReceipt::Received)
                {
                    this.ReturnStatus = ReturnStatusLine::Received;
                    this.doUpdate();
                    SalesTable::returnUpdatedHeaderStatus(this.SalesId,_documentStatus);
                }
                else if (this.ReturnStatus == ReturnStatusLine::Received)
                {
                    if (SalesReturnPackingSlipCancelSetAwaitingStatusFlight::instance().isEnabled())
                    {
                        this.ReturnDispositionCodeId = '';
                        this.ReturnStatus = ReturnStatusLine::Awaiting;
                        this.doUpdate();

                        if (this.salesTable().InterCompanyCompanyId)
                        {
                            changecompany(this.salesTable().InterCompanyCompanyId)
                            {
                                PurchLine purchLine = PurchLine::findInventTransId(this.InterCompanyInventTransId);

                                if (purchLine)
                                {
                                    purchLine.selectForUpdate(true);
                                    purchLine.ReturnStatus = ReturnStatusLine::Awaiting;
                                    purchLine.doUpdate();
                                }
                            }
                        }

                        if (!this.ReturnAllowReservation)
                        {
                            this.resetReturnLine();
                        }
                    }
                    else
                    {
                        this.ReturnStatus = ReturnStatusLine::Registered;
                        this.doUpdate();
                    }
                }
                break;

            case DocumentStatus::Invoice :
            // <GEERU>
            case DocumentStatus::Facture_RU  :
                // </GEERU>
                if (this.ReturnStatus == ReturnStatusLine::Registered || this.ReturnStatus == ReturnStatusLine::Received )
                {
                    if (this.RemainSalesPhysical == 0 && this.RemainSalesFinancial == 0)
                    {
                        this.ReturnStatus = ReturnStatusLine::Invoiced;
                        this.ReturnClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        this.doUpdate();
                        SalesTable::returnUpdatedHeaderStatus(this.SalesId, _documentStatus);
                    }
                }
                else
                {
                    throw error(strFmt("@SYS120281", enum2str(ReturnStatusLine::Registered), enum2str(ReturnStatusLine::Received)));
                }
                break;
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatus</Name>
				<Source><![CDATA[
    public void  setSalesStatus()
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.setSalesStatus(this);
        //  Process Drop shipment and set the drop shipment status.
        if (this.mcrSalesLineDropShipment())
        {
            salesLineType.mcrSetDropShipStatus(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setServiceCodeId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls the method to set <c>TaxServiceCode_BR</c> field in its extension table and packs it.
    /// </summary>
    /// <param name="_serviceCodeOnDlvAddress">
    ///     Defines the which method will be called to search <c>TaxServiceCode_BR</c>
    /// </param>
    /// <param name="_inventTable">
    ///     Item details.
    /// </param>
    void setServiceCodeId_BR(boolean _serviceCodeOnDlvAddress, InventTable _inventTable = this.inventTable())
    {
        this.packSalesLine_BR(this.salesLine_BR().setServiceCodeId_BR(_serviceCodeOnDlvAddress, _inventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>StockedProduct</c> field for the line, depending on line type and item model group for
    /// the associated item.
    /// </summary>
    public void setStockedProduct()
    {
        this.type().setStockedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuframaDiscount_BR</Name>
				<Source><![CDATA[
    private void setSuframaDiscount_BR(FieldId _fieldId)
    {
        TaxValue    discICMS;
        TaxValue    discPIS;
        TaxValue    discCOFINS;

        if (this.TaxGroup != this.orig().TaxGroup
            || this.TaxItemGroup != this.orig().TaxItemGroup)
        {
            [discICMS, discPIS, discCOFINS] = Tax::getSuframaDiscount_BR(   this.TaxGroup,
                                                                            this.TaxItemGroup,
                                                                            this.salesTable().custTable_InvoiceAccount().Suframa_BR,
                                                                            this.salesTable().custTable_InvoiceAccount().SuframaPISCOFINS_BR);
            this.packSalesLine_BR(this.salesLine_BR().setSuframaDiscount_BR(discICMS + discPIS + discCOFINS));
            this.LineAmount         = this.calcLineAmountForcedInteraction(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    public void setTaxGroup(TaxGroup _taxGroup)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.setTaxGroup(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set SalesQuotationLine.TaxGroup and SalesQuotationLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup            taxGroup, taxMatrixTaxGroup;
        TaxItemGroup        taxItemGroup, taxMatrixTaxItemGroup;

        [taxMatrixTaxGroup, taxMatrixTaxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.salesLine_BR().cfopTable_BR,
                                                                               this.salesTable().salesTable_BR().SalesPurchOperationType_BR,
                                                                               SalesPurchTrntype_BR::Sales,
                                                                               CustVendType_BR::Customer,
                                                                               this.salesTable().CustAccount,
                                                                               this.ItemId,
                                                                               this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());

        taxGroup = taxMatrixTaxGroup == '' ? this.salesTable().TaxGroup : taxMatrixTaxGroup;
        if (taxGroup != '')
        {
            this.TaxGroup = taxGroup;
        }

        taxItemGroup = taxMatrixTaxItemGroup == '' ? this.inventTable().salesTaxItemGroupId() : taxMatrixTaxItemGroup;
        if (taxItemGroup != '')
        {
            this.TaxItemGroup = taxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    public void setTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        SalesLineType  salesLineType;

        salesLineType = this.type();
        salesLineType.setTaxItemGroup(_taxItemGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThirdPartyAddressFromSalesTable</Name>
				<Source><![CDATA[
    public void setThirdPartyAddressFromSalesTable(SalesTable  _salesTable = this.salesTable())
    {
        if (_salesTable.ShipCarrierPostalAddress)
        {
            this.ShipCarrierPostalAddress = _salesTable.ShipCarrierPostalAddress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the location field based on a warehouse and disposition code.
    /// </summary>
    private void setWMSLocation()
    {
        InventDim           inventDim = this.inventDim();
        InventLocation      inventLocation = inventDim.inventLocation();
        WMSLocationId       wmsLocationId = inventDim.wmsLocationId;
        DispositionAction   dispositionAction;

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim,wmsLocationId)))
        {
            dispositionAction = ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction;

            if (inventLocation.whsEnabled)
            {
                if (dispositionAction == DispositionAction::CreditOnly)
                {
                    wmsLocationId = inventDim.wmsLocationId ? inventDim.wmsLocationId : inventLocation.DefaultReturnCreditOnlyLocation;
                    if (!wmsLocationId)
                    {
                        warning("@SYP4881165");
                    }
                }
                else if (inventDim.wmsLocationId == inventLocation.DefaultReturnCreditOnlyLocation)
                {
                    wmsLocationId = '';
                }

                if (inventDim.wmsLocationId != wmsLocationId)
                {
                    inventDim.wmsLocationId = wmsLocationId;
                    inventDim.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

                    this.setInventDimId(inventDim.InventDimId, inventDim);
                }
            }
            else if (dispositionAction == DispositionAction::CreditOnly
                  && !wmsLocationId)
            {
                warning("@SYP4881165");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnTrackingDim</Name>
				<Source><![CDATA[
    private void setReturnTrackingDim()
    {
        if (this.InventTransIdReturn)
        {
            InventDim inventDim = this.inventDim();
            InventBatchId inventBatchId = inventDim.InventBatchId;
            InventSerialId inventSerialId = inventDim.InventSerialId;

            if (ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction == DispositionAction::CreditOnly)
            {
                if (!inventBatchId && EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventBatchId)))
                {
                    inventBatchId =  this.getReturnInventBatchId(this.InventTransIdReturn);
                }

                if (!inventSerialId && EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventSerialId)))
                {
                    inventSerialId = this.getReturnInventSerialId(this.InventTransIdReturn);
                }
            }

            if (inventDim.InventBatchId != inventBatchId
                || inventDim.InventSerialId != inventSerialId)
            {
                inventDim.InventBatchId = inventBatchId;
                inventDim.InventSerialId = inventSerialId;
                inventDim.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                this.setInventDimId(inventDim.InventDimId, inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnInventBatchId</Name>
				<Source><![CDATA[
    private InventBatchId getReturnInventBatchId(InventTransId _inventTransId)
    {
        InventDim inventDim;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId == _inventTransId
            join TableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            join InventBatchId from inventDim
                where inventDim.inventDimId == inventTrans.InventDimId
                    && inventDim.InventBatchId != '';

        return inventDim.InventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnInventSerialId</Name>
				<Source><![CDATA[
    private InventSerialId getReturnInventSerialId(InventTransId _inventTransId)
    {
        InventDim inventDim;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId == _inventTransId
            join TableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            join InventSerialId from inventDim
                where inventDim.inventDimId == inventTrans.InventDimId
                    && inventDim.InventSerialId != '';

        return inventDim.InventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the <c>LogisticsLocationRecId</c> value that is associated with the selected
    /// <c>ShipCarrierPostalAddress</c> field value.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>LogisticsLocationRecId</c> value that is associated with the selected
    /// <c>ShipCarrierPostalAddress</c> field value.
    /// </returns>
    public LogisticsLocationRecId shipCarrierLocation()
    {
        return LogisticsPostalAddress::getLocation(this.ShipCarrierPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPriceMatchIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the icon if the sales line contains the credit voucher ID.
    /// </summary>
    /// <returns>
    /// The icon number if the sales line contains the credit voucher ID; otherwise, false.
    /// </returns>
    public display smmNoteItIconNum showPriceMatchIcon()
    {
        if (MCRCustCreditTable::findByInventTransID(this.InventTransId))
        {
            return 1030;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockedProductChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values or sets the inventory related field values to null when the <c>StockedProduct</c> field value is changed.
    /// </summary>
    public void stockedProductChanged()
    {
        if (this.isStocked())
        {
            // default inventory fields
            this.QtyOrdered             = this.calcQtyOrdered();
            this.RemainInventPhysical   = this.QtyOrdered;
            this.RemainInventFinancial  = 0;
            this.Scrap                  = NoYes::No;
            this.setInventDeliverNow();
            TradeNonStockedRegistrationHelper::newFromSalesPurchLine(this).deletePendingRegistration();
        }
        else
        {
            // blank out inventory fields
            this.QtyOrdered             = 0;
            this.InventDeliverNow      = 0;
            this.RemainInventPhysical   = 0;
            this.RemainInventFinancial  = 0;
            this.Scrap                  = NoYes::No;
            this.ItemBOMId              = '';
            this.ItemRouteId            = '';
            this.Reservation            = ItemReservation::None;
            this.DeliveryDateControlType    = SalesDeliveryDateControlType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    public TransDate taxDate(TransDate _transDate)
    {
        TaxCalculationDateType taxCalculationDateType = TaxParameters::find().TaxCalculationDateType;
        if (taxCalculationDateType == TaxCalculationDateType::DocumentDate && this.salesTable().CreatedDateTime)
        {
            return DateTimeUtil::date(this.salesTable().CreatedDateTime);
        }
        else
        {
            return taxCalculationDateType == TaxCalculationDateType::DeliveryDate ? this.deliveryDate(_transDate) : _transDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(_transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the time zone associated with the site on the current sales order line.
    /// </summary>
    /// <returns>
    ///    The site time zone.
    /// </returns>
    public display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(InventDim::find(this.InventDimId).InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the volume of the inventory associated with the Sales line.
    /// </summary>
    /// <returns>
    /// The gross volume of the Sales line.
    /// </returns>
    public Volume tmsVolume()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return this.PdsCWQty * this.inventTable().UnitVolume;
        }

        return this.QtyOrdered * this.inventTable().UnitVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the weight of the inventory associated with the Sales line.
    /// </summary>
    /// <returns>
    /// The gross weight of the Sales line.
    /// </returns>
    public Weight tmsWeight()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return this.PdsCWQty * this.inventTable().grossWeight();
        }

        return this.QtyOrdered * this.inventTable().grossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public SalesLineType  type(SalesTable salesTable = this.salesTable())
    {
        return SalesLineType::construct(this, salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLineTypeFactoryAttributeFieldsFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the fields needed by the <c>SalesLineTypeFactoryAttribute</c> attribute to instantiate
    /// the <c>SalesLineType</c> class associated with this buffer.
    /// </summary>
    /// <param name = "_salesTable">The header record from which to initialize the fields.</param>
    [Hookable(false)]
    internal void setSalesLineTypeFactoryAttributeFieldsFromSalesTable(SalesTable _salesTable)
    {
        this.SalesType = _salesTable.SalesType;
        this.ProjId = _salesTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the under delivery percent that is allowed.
    /// </summary>
    /// <returns>
    /// The under delivery percent that is defined on the sales order line if under delivery is enabled;
    /// otherwise, zero.
    /// </returns>
    public Percent underDeliveryPct()
    {
        if (!SalesParameters::find().SubDelivery)
        {
            return 0;
        }

        return this.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertInvent2Sales</Name>
				<Source><![CDATA[
    public SalesQty unitConvertInvent2Sales(InventQty _inventQty)
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                     this.InventDimId,
                                                                                     _inventQty,
                                                                                     this.inventTable().inventUnitId(),
                                                                                     this.SalesUnit,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertInventHandlingQty2Sales</Name>
				<Source><![CDATA[
    private SalesQty unitConvertInventHandlingQty2Sales(InventHandlingQty _inventHandlingQty)
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                     this.InventDimId,
                                                                                     _inventHandlingQty,
                                                                                     WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId),
                                                                                     this.SalesUnit,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertSales2Invent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified quantity from a sales unit to an inventory unit.
    /// </summary>
    /// <param name="_salesQty">
    /// The quantity to be converted.
    /// </param>
    /// <returns>
    /// The quantity in an inventory unit.
    /// </returns>
    public SalesQty unitConvertSales2Invent(SalesQty _salesQty)
    {
        if (this.ItemId)
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                         this.InventDimId,
                                                                                         _salesQty,
                                                                                         this.SalesUnit,
                                                                                         this.inventTable().inventUnitId(),
                                                                                         NoYes::Yes);
        }
        else
        {
            return _salesQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreementDeliveryDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the link to the agreement line is valid after the changes and gives the user an
    /// option to remove the link to the associated agreement line to make the changes valid.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the delivery date field that has been changed.
    /// </param>
    public void unlinkAgreementDeliveryDates(FieldId _fieldId)
    {
        if (this.RecId
            && !this.isTmp()
            && this.salesTable().MatchingAgreement
            && !this.refreshAgreementLink(new AgreementAutolinkHelperSalesLine()))
        {
            this.unlinkAgreementLineDeliveryDates(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreementLineDeliveryDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gives the user an option to remove the link to the associated agreement line to make the changes valid.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field ID for the delivery date field that has been changed.
    /// </param>
    private void unlinkAgreementLineDeliveryDates(FieldId _fieldId)
    {
        anytype                             FieldValue;
        boolean                             canRecalculatePrices = true;
        SalesTable                          salesTable;
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        if (this.unLinkAgreementLinePrompt(_fieldId)
            && this.LineDeliveryType != LineDeliveryType::DeliveryLine)
        {
            salesTable = this.salesTable();
            if (salesTable.isInterCompanyOrder())
            {
                interCompanyEndpointActionPolicy = salesTable.interCompanyEndpointActionPolicy();

                canRecalculatePrices = interCompanyEndpointActionPolicy.PriceDiscountSearch ? true : false;
            }

            if (canRecalculatePrices
                && this.doReCalcPricesFromBasePrompt())
            {
                FieldValue = this.(_fieldId);
                SalesLine::modifySalesQty(this,this.inventDim());
                this.(_fieldId) = FieldValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the link between the sales order line and an agreement line.
    /// </summary>
    /// <param name="_updateLine">
    /// A Boolean value that indicates whether to execute an update for the <c>SalesLine</c> buffer;
    /// optional.
    /// </param>
    public void unLinkAgreementLine(boolean _updateLine = false)
    {
        AgreementLineReleasedLine agreementLineReleasedLine;

        // Set Price Discount Change Policy originated by PriceDiscSystemSource::Agreement.
        boolean shouldSetPriceDiscChangePolicy = !RetailPricingAvoidRepeatedPriceCalcFeatureFlight::instance().isEnabled()
            || RetailPricingSalesDocumentHelper::shouldLaunchPolicyDialogForSalesDocument(this.TableId, this.SalesId);

        if (shouldSetPriceDiscChangePolicy)
        {
            this.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
        }

        using (var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().unLinkAgreementLine(this))
        {
            if (this.ManualEntryChangepolicy
                && this.SystemEntryChangePolicy)
            {
                this.PriceDiscResultFields::mergerPriceDiscPolicies(ModuleSalesPurch::Sales);
            }

            switch (this.LineDeliveryType)
            {
                case LineDeliveryType::OrderLineWithMultipleDeliveries:
                    AgreementLineReleasedLine::unlinkSalesDeliverySchedule(this.InventTransId);
                    this.reread();
                    break;
                case LineDeliveryType::DeliveryLine:
                    AgreementLineReleasedLine::unlinkSalesDeliverySchedule(this.InventTransId);
                    break;
                default:
                    ttsbegin;

                    if (this.RecId)
                    {
                        delete_from agreementLineReleasedLine
                            where agreementLineReleasedLine.SalesLineInventTransId == this.InventTransId
                               && agreementLineReleasedLine.SalesLineDataAreaId    == this.DataAreaId
                               && agreementLineReleasedLine.ReferenceRelationType  == tableNum(SalesLine);
                    }

                    this.MatchingAgreementLine = 0;

                    if (_updateLine)
                    {
                        this.update();
                    }

                    ttscommit;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkAgreementLinePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a text box that asks the user whether to delete the link between the agreement line and
    /// sales order line.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the field that has the changes that have introduced conflict with regard to the
    /// linked agreement line; optional.
    /// </param>
    /// <param name="_tableId">
    /// The table ID for the field that has the changes that have introduced conflict with regard to the
    /// linked agreement line; optional.
    /// </param>
    /// <param name="_doUpdate">
    /// Boolean indicating if an update of the sales order line should be performed when unlinking the agreement line; optional.
    /// </param>
    /// <returns>
    /// true if the user wants to delete the link between the agreement line and the sales order line;
    /// otherwise, false.
    /// </returns>
    public boolean unLinkAgreementLinePrompt(FieldId _fieldId = 0, TableId _tableId = tableNum(SalesLine), boolean _doUpdate = true)
    {
        boolean     unlink;
        DictField   dictField;
        boolean     restorePriceDiscChagnePolicy = true;
        SalesLine   localSalesLine;

        void unlink()
        {
            this.unLinkAgreementLine();
            unlink = true;
        }

        if (_fieldId)
        {
            dictField = new DictField(_tableId,_fieldId);
            unlink = this.canUnlinkAgreementLineByField(dictField);

            if (unlink)
            {
                this.unLinkAgreementLine();
                PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, true);
            }
            else
            {
                if (_tableId == tableNum(InventDim))
                {
                    _fieldId = fieldNum(SalesLine, InventDimId);
                }

                if (this.RecId)
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
                else
                {
                    localSalesLine.con2buf(this.buf2con());
                    localSalesLine.initFromAgreementLine(AgreementLine::find(localSalesLine.MatchingAgreementLine));
                    this.(_fieldId) = localSalesLine.(_fieldId);
                }
            }
        }
        else
        {
            if (this.canUnlinkAgreementLine())
            {
                // The price discount fixed policies will block recalculation of certain TA values when a sales line is related to an agreement hence, we need to unlink before recalculation.
                unlink();

                // Run the price discount policy dialog in order to let the user determine which agreement values to recalculate.
                PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForAllPolicyFields(false, true);

                SalesLine::modifySalesQty(this,this.inventDim());

                if (_doUpdate)
                {
                    ttsbegin;
                    this.update();
                    ttscommit;
                }
            }
        }

        return unlink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnlinkAgreementLineByField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an agreement line can be unlinked based on a specific field.
    /// </summary>
    /// <param name="_field">The field being considered for unlinking the agreement line.</param>
    /// <returns>True if the agreement line can be unlinked by the specified field; otherwise, false.</returns>
    [Replaceable]
    protected boolean canUnlinkAgreementLineByField(DictField _field)
    {
        if(_field == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return Box::okCancel(strFmt("@SYS305713", _field.label()),DialogButton::No,"@SYS135154") == DialogButton::Ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnlinkAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an agreement line can be unlinked.
    /// </summary>
    /// <returns>True if the agreement line can be unlinked; otherwise, false.</returns>
    [Replaceable]
    protected boolean canUnlinkAgreementLine()
    {
        return Box::yesNo("@SYS305714",DialogButton::No) == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkReleasedAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the links between a sales order line and an agreement line.
    /// </summary>
    /// <remarks>
    /// Deleting the link to the agreement line from the forms might require a research on the
    /// <c>AgreementLineReleasedLine</c> data source of the form.
    /// </remarks>
    public void unLinkReleasedAgreementLine()
    {
        AgreementLineReleasedLine   agreementLineReleasedLine;

        ttsbegin;

        switch (this.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                AgreementLineReleasedLine::unlinkSalesDeliverySchedule(this.InventTransId);
                break;
            case LineDeliveryType::DeliveryLine:
                AgreementLineReleasedLine::unlinkSalesDeliverySchedule(SalesDeliverySchedule::findOrderLineForDeliveryLine(this.InventTransId).InventTransId);
                break;
            default:
                delete_from agreementLineReleasedLine
                    where agreementLineReleasedLine.SalesLineInventTransId == this.InventTransId
                       && agreementLineReleasedLine.SalesLineDataAreaId    == this.DataAreaId;
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertReadonlyFieldsAreUnchanged</Name>
				<Source><![CDATA[
    private void assertReadonlyFieldsAreUnchanged(SalesLine _salesLineOrig)
    {
        //Create dedicated methods for each assert statement to get the informatio in the call stack about which field was changed
        this.assertInventTransIdIsUnchanged(_salesLineOrig);
        this.assertItemIdIsUnchanged(_salesLineOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertInventTransIdIsUnchanged</Name>
				<Source><![CDATA[
    private void assertInventTransIdIsUnchanged(SalesLine _salesLineOrig)
    {
        Debug::assert(_salesLineOrig.InventTransId == this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertItemIdIsUnchanged</Name>
				<Source><![CDATA[
    private void assertItemIdIsUnchanged(SalesLine _salesLineOrig)
    {
        Debug::assert(_salesLineOrig.ItemId == this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventWriteCallCenterUserEditedSalesOrder</Name>
				<Source><![CDATA[
    private void EventWriteCallCenterUserEditedSalesOrder(str funcName, SalesLine _salesLineOrig)
    {
        MCRChannelUser mcrChannelUser = MCRChannelUser::find();
        if (mcrChannelUser)
        {
            RefRecId retailChannelOrig = RetailSalesTable::find(_salesLineOrig.SalesId).RetailChannel;
            RetailCallCenterEventLog::EventWriteCallCenterUserEditedSalesOrder(funcName, mcrChannelUser.RecId, retailChannelOrig, this.salesTable().RecId, this.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomLinesCreated</Name>
				<Source><![CDATA[
    private boolean bomLinesCreated()
    {
        boolean ret;

        if (this.SalesStatus == SalesStatus::Canceled
        && !this.deliveredInventInTotal() && !this.pickedInTotalInventUnit())
        {
            container conBOM = BOMSearch::bomTreePackLevelConfig(this.ItemBOMId ? this.ItemBOMId :
                this.inventTable().bomId(this.deliveryDate(), true, this.inventDim()),
                this.deliveryDate(),
                this.ItemId,
                this.inventDim().ConfigId,
                true,
                true);
            
            for (int i = 1; i <= conLen(conBOM); i++)
            {
                BOM tmpBOM = conpeek(conBOM, i);

                if (SalesLine::existByItemId(this.salesTable().SalesId, tmpBOM.ItemId))
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanyDropShipmentWithoutBom</Name>
				<Source><![CDATA[
    private boolean isIntercompanyDropShipmentWithoutBom(SalesLine _origSalesLine)
    {
        if (this.SkipUpdate     != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate     != InterCompanySkipUpdate::Both
        &&  this.SalesQty       == 0
        &&  this.ExpectedRetQty == 0
        && (this.DeliveryType   == TradeLineDlvType::DropShip || PurchTable::find(_origSalesLine.InventRefId).InterCompanyOrder)
        && !this.bomLinesCreated())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void  update(boolean  _dropInvent     = false,
                        Common   _childBuffer    = null,
                        boolean  _updateOrderLineOfDeliverySchedule  = true,
                        boolean  _mcrAutoallocate = false,
                        boolean  _cameFromCreate = false,
                        boolean  _promptSuppItem = false
                        )
    {        
        boolean autoUpdateShipmentBeforeAutoReservationFlightEnabled = WHSAutoUpdateShipmentBeforeAutoReservationFlight::instance().isEnabled();

        this.checkInventInventoryDataServiceSoftReservation();

        if (!_updateOrderLineOfDeliverySchedule || _mcrAutoallocate || _cameFromCreate || _promptSuppItem)
        {
            // The _updateOrderLineOfDeliverySchedule parameter is replaced by the updateWithoutUpdatingDeliveryScheduleLines method.
            // The other parameters are no longer supported.
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        if (!this.checkUpdateParameters(_dropInvent, _childBuffer))
        {
            throw error("@SYS93835");
        }

        var salesOrderInstrumentationLogger = SalesLine::instrumentationLogger();

        if (this.shouldSkipUpdateLogic(salesOrderInstrumentationLogger))
        {
            super();
            return;
        }

        SalesOrderInstrumentationActivities salesOrderActivities = salesOrderInstrumentationLogger.salesOrderActivities();

        using (var activityContext = salesOrderActivities.update(this))
        {
            SalesLine               salesLineOrig               = this.orig();
            InterCompanySkipUpdate  interCompanySkipUpdate      = this.SkipUpdate;
            NoYes                   skipDeliveryScheduleUpdate  = this.SkipDeliveryScheduleUpdate;

            #ISOCountryRegionCodes

            this.assertReadonlyFieldsAreUnchanged(salesLineOrig);

            if (this.SalesType          == SalesType::Journal
            &&  salesLineOrig.SalesType == SalesType::Sales
            &&  WHSLoadLine::existsForInventTransId(this.InventTransId))
            {
                throw error("@WAX4659");
            }

            if (this.SalesType          == SalesType::Sales
            &&  salesLineOrig.SalesType == SalesType::Journal
            &&  this.type().pdsMRCCheckRestricted())
            {
                throw error(strFmt("@PDS908", this.ItemId));
            }

            ReqEventProcessParm	reqEventProcessParm = ReqEventProcessParm::newInventMovement(InventMovement::construct(this));

            SalesTable salesTable = this.salesTable(true);
            SalesLineType salesLineType = this.type(salesTable);

            using (var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().salesLineTypeUpdating(this))
            {
                salesLineType.updating();

                this.setInventSumLogTTS();
            }

            if (!this.allowUpdateWithQualityOrder())
            {
                throw error("@SYS113930");
            }

            using (var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().setReservation(this))
            {
                salesLineType.setReservation();
            }

            CostAmount  orgCostAmount;
            boolean		salesOrderEntryStats = salesLineType.orderEntryStatistics();

            if (salesOrderEntryStats)
            {
                orgCostAmount = salesLineOrig.calcCostAmount(salesLineOrig.RemainSalesPhysical);
            }
            
            this.ConfirmedDlv = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
            
            using (var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().setSalesStatus(this))
            {
                salesLineType.setSalesStatus(this);
            }

            if (this.CustAccount      != salesLineOrig.CustAccount &&
            this.LineDeliveryType != LineDeliveryType::DeliveryLine &&
            this.MatchingAgreementLine)
            {
                this.unLinkAgreementLine();
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                using (var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().updateRAsset(this))
                {
                    salesLineType.updateRAssetStatus();
                    this.setPostingProfile_RU();
                    if (!this.MatchingAgreementLine && this.MatchingAgreementLine != salesLineOrig.MatchingAgreementLine)
                    {
                        this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
                    }
                }
            }

            if (this.MatchingAgreementLine != salesLineOrig.MatchingAgreementLine)
            {
                if (this.MatchingAgreementLine)
                {
                    salesLineType.associateWithAgreementLine();
                }
                else
                {
                    this.unLinkAgreementLine();
                }
            }
            
            if (this.SkipUpdate   != InterCompanySkipUpdate::Internal
            &&  this.SkipUpdate   != InterCompanySkipUpdate::Both
            &&  this.SalesType    == SalesType::ReturnItem
            &&  this.SalesQty     != this.ExpectedRetQty
            && (this.DeliveryType == TradeLineDlvType::DropShip || PurchTable::find(this.InventRefId).InterCompanyOrder))
            {
                this.SalesQty            = this.ExpectedRetQty;
                this.salesQtyModified();
                this.LineAmount          = this.returnLineAmount();
            }
            
            if (this.SyncIntercompanyPurchLine
            || (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
            &&  this.SkipUpdate != InterCompanySkipUpdate::Both))
                {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().synchronize(this))
                {
                    var syncEngine = salesLineType.interCompanySyncEngine();
                    syncEngine.forceSync(this.SyncIntercompanyPurchLine);
                    syncEngine.synchronize();
                }
            }

            if (this.mustUpdateSalesTable())
            {
                this.updateSalesTableOnSalesLineUpdate(salesTable);
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.updateFiscalInfo_BR(salesLineOrig);
            }
            // </GBR>

            boolean isTaxRecalculationNeeded = this.taxRecalculationNeeded(salesLineOrig);
            if (isTaxRecalculationNeeded)
            {
                this.TaxID = 0;
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && RetailSalesTable::find(this.SalesId).RetailChannel
            && (this.InventDimId != salesLineOrig.InventDimId
                || this.RemainInventPhysical <= this.reservedPhysical() + this.pickedInTotalInventUnit())
            && !RetailKitOrderRestrictDeletionInSalesLineFlight::instance().isEnabled())
            {
                RetailKitAssemblyOrder::deleteSalesLineAssemblyOrder(this);
            }

            InventUpd_Estimated	estimated;

            boolean isStockedItem = this.isStocked();

            using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().updateInventory(this))
            {
                // For category based lines we do not have an item and inventory transaction may never be created.
                // For non-inventoried items InventUpd should still be invoked since it deletes transactions when QtyOrdered is set to 0.
                if (!_dropInvent && isStockedItem)
                {
                    // Update inventory will also take care of updating the project commitments for stocked item.
                    estimated = salesLineType.updateInventoryOnUpdate(_childBuffer);
                }
                else if (this.ProjId && this.ItemId && !isStockedItem)
                {
                    // Manually update project commitments for non-stocked item.
                    InventUpd_Estimated inventUpdForProjCommitments = salesLineType.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::None);
                    if (inventUpdForProjCommitments)
                    {
                        inventUpdForProjCommitments.updateCostCommitments();
                    }
                }
            }
            
            // Reset the drop shipment flag for a negative qty.
            if (this.QtyOrdered < 0)
            {
                MCRSalesLineDropShipment mcrSalesLineDropShipment = this.mcrSalesLineDropShipment();

                if (mcrSalesLineDropShipment.DropShipStatus)
                {
                    mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::None;
                    this.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
                }
            }

            // For non-inventoried lines, the Quantity being updated should be checked.
            if (!this.isStocked())
            {
                if (!salesLineType.checkQuantityUpdateNonStocked())
                {
                    throw error("@SYS18447");
                }
            }

            boolean isPurchLineMasterPlan = false;

            if (salesLineOrig.InventRefId && !this.InventRefId && this.SalesQty == 0)
            {
                isPurchLineMasterPlan = this.isPurchLineMasterPlan(salesLineOrig.InventRefTransId, salesLineOrig.InventRefType);
                if (isPurchLineMasterPlan)
                {
                    this.setInventReferences(salesLineOrig.InventRefId, salesLineOrig.InventRefTransId, salesLineOrig.InventRefType);
                }
            }

            if (this.SkipUpdate != InterCompanySkipUpdate::Internal
                && this.SkipUpdate != InterCompanySkipUpdate::Both)
            {
                if  (this.DeliveryType == TradeLineDlvType::DropShip        ||
                    PurchTable::find(this.InventRefId).InterCompanyOrder   ||
                    this.SyncPurchLine)
                {
                    using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().syncPurchLine(this))
                    {
                        salesLineType.syncPurchLineSave(this);
                        this.syncMCRSalesDropShipment();
                    }
                }
                else if (this.isStockLineUpdateAllowed())
                {
                    using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().saveStockPurchaseLine(this))
                    {
                        salesLineType.saveStockPurchaseLine(this);
                    }
                }
            }

            if (this.isIntercompanyDropShipmentWithoutBom(salesLineOrig)
                && !this.existsSalesLineByInventRefId(salesLineOrig.InventRefId, isPurchLineMasterPlan))
            {
                salesLineType.interCompanyDropPurchLine(this,salesLineOrig);
            }

            if (isPurchLineMasterPlan)
            {
                this.setInventReferences();
            }
            if (!this.isStocked())
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().updateRegistrations(this))
                {
                    salesLineType.updatePendingRegistrationsNonStocked(salesLineType.isPendingRegistrationsToBeCreated());
                }
            }

            if (reqEventProcessParm)
            {
                reqEventProcessParm.parmOrigInventDimId(salesLineOrig.InventDimId);
            }

            // If the type has changed recalculate the discounts
            // for the line or remove the off-invoice
            // discounts in the case of item requirement or subscription
            if (this.mustRecalcDiscOnSalesTypeChanged(salesLineOrig))
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().recalculatePrices(this))
                {
                    boolean  initDateFields = true;

                    if (this.DeliveryDateControlType == SalesDeliveryDateControlType::None
                    &&  this.ShippingDateRequested == salesLineOrig.ShippingDateRequested
                    &&  this.ShippingDateConfirmed == salesLineOrig.ShippingDateConfirmed
                    &&  this.ReceiptDateRequested  == salesLineOrig.ReceiptDateRequested
                    &&  this.ReceiptDateConfirmed  == salesLineOrig.ReceiptDateConfirmed)
                    {
                        initDateFields = false;
                    }

                    // Price calculation is cached, when the type is changed need to clear it
                    // so a new price is calculated
                    this.salesPurchLineInterface().flushPriceDisc_LineDiscCacheForCurrentSessionAndCompany();
                    this.setPriceDisc(this.inventDim(), initDateFields);
                }
            }

            if (this.MCROrderLine2PriceHistoryRef != salesLineOrig.MCROrderLine2PriceHistoryRef)
            {
                MCROrderLine2PriceHistoryRef::deleteRef(salesLineOrig.MCROrderLine2PriceHistoryRef);
            }

            // This needs to be called after the inventory transactions get updated.
            this.updateReqTransDatesAndStatusForFullRunCTP();
            
            using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().markCurrentTaxDocument(this))
            {
                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    if (this.SalesPurchJournalLine::taxRecalculationNeeded())
                    {
                        if (this.LineAmount != salesLineOrig.LineAmount)
                        {
                            this.updateAndPackAccessableValue_IN();
                        }

                        this.markCurrentTaxDocumentTaxStatusDirty();
                    }
                }
                // </GTE>
        
                salesOrderActivities.logSalesOrderLine(activityContext, salesTable, this);

                super();
            }

            this.updateAssessableValueAndWriteForDataSource_IN(this.LineAmount != salesLineOrig.LineAmount);

            // This has to be called after the sales line changes get commited as it checks committed sales lines.
            if (this.mustUpdateSalesTable())
            {
                this.updateSalesTableFullRunCTPStatusOnSalesLineUpdated(salesTable, salesLineOrig);
            }

            if (this.mustAutoCreateIntercompanyChainForSalesLine() && !PurchTable::find(this.InventRefId))
            {
                if (this.notAlloweDirectDeliveryForOnHoldSalesOrder())
                {
                    this.data(salesLineOrig);
                    throw error("@Intercompany:DirectDeliveryNotAllowedForOnHoldSalesOrder");
                }

                if (this.notAlloweDirectDeliveryForJournalSalesOrder())
                {
                    throw warning("@Intercompany:DirectDeliveryNotAllowedForJournalSalesOrder");
                }

                // The call to TradeInterCompany::tryAutoCreateLine must occur after the doUpdate call,
                // since during chain creation values from the salesLine will be read using SalesLine::Find().
                if (!TradeInterCompany::tryAutoCreateLine(this))
                {
                    // Reset the table buffer to reflect the old values. This is needed because doUpdate() has updated the recVersion of the salesLine.
                    // The recVersion will however not be written to the DB because the error thrown below results in an automatic ttsabort, causing the buffer to be out of sync with the DB.
                    // If the recVersion is not reset then the user will not be able to save the record again because of an update conflict.
                    this.data(salesLineOrig);
                    throw error("@Intercompany:ErrorAutomaticCreationCanceled");
                }
            }

            this.SkipUpdate = InterCompanySkipUpdate::No;

            // Write an order event if the delivery address was modified.
            // Only create line events when something changes
            if (this.checkRecordHistory(salesLineOrig, salesLineType))
            {
                this.insertOrderEvent(salesLineOrig);
            }

            if (this.DlvMode != salesLineOrig.DlvMode)
            {
                this.createMarkupTrans(salesTable, true);
            }

            if (salesTable.mcrIsCallCenter())
            {
                // Check for type returnItem.
                if (salesTable.SalesType == SalesType::ReturnItem &&  salesTable.SalesStatus == SalesStatus::Backorder)
                {
                    this.mcrUpdateReturnCharges(SalesTable, salesLineOrig);
                }

                // Flag the sales stats as dirty.
                if (salesLineOrig.SalesStatus != this.SalesStatus && this.SalesStatus == SalesStatus::Invoiced)
                {
                    // Sales order line has been completed which will affect the current stored statistics.
                    MCRSalesStatsCustTable::salesStatsAffected(this.CustAccount);
                }
            }

            if (this.SalesStatus == SalesStatus::Canceled && this.SalesStatus != salesLineOrig.SalesStatus)
            {
                salesLineType.mcrSetDropShipStatus(this);
            }
            this.SysExtensionSerializerMap::postUpdate();

            if (salesOrderEntryStats)
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().salesOrderEntry(this))
                {
                    if (this.SalesType == SalesType::Sales || this.SalesType == SalesType::ReturnItem)
                    {
                        if (salesLineOrig.SalesType == SalesType::Sales || salesLineOrig.SalesType == SalesType::ReturnItem)
                        {
                            if (this.SalesStatus == SalesStatus::Canceled)
                            {
                                SalesOrderEntryStatistics::deleteOrderEntry(salesLineOrig, orgCostAmount);
                            }
                            else
                            {
                                SalesOrderEntryStatistics::updateOrderEntry(this, salesLineOrig, orgCostAmount);
                            }
                        }
                        else
                        {
                            SalesOrderEntryStatistics::createOrderEntry(this);
                        }
                    }
                    else
                    {
                        if (salesLineOrig.SalesType == SalesType::Sales || salesLineOrig.SalesType == SalesType::ReturnItem)
                        {
                            SalesOrderEntryStatistics::deleteOrderEntry(salesLineOrig, orgCostAmount);
                        }
                    }
                }
            }

            if (autoUpdateShipmentBeforeAutoReservationFlightEnabled)
            {
                this.checkAndUpdateLoadLines(salesLineOrig);
            }

            if (this.checkEstimated(estimated))
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().updateReservation(this))
                {
                    estimated.updateReservation();
                }
            }

            // Checks the status of the <c>SalesLine</c> record
            // Compares the <c>SalesStatus</c> of updated <SalesTable> and local <SalesTable> when the <c>SalesType</c> is item requirement.
            if (this.checkSalesLineStatus(salesLineOrig)
                || (this.ProjId
                && this.SalesType == SalesType::ItemReq
                && this.salesTable().SalesStatus != salesTable.SalesStatus))
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().updateBackStatus(this))
                {
                    salesTable.updateBackStatus();
                }
            }

            // Note: this should not be moved further down in this method, because then the MpsUpdateExcludeSalesLine field will be set to null and the code will break
            using(var mpsExcludeSalesLineActivity = salesOrderInstrumentationLogger.salesOrderActivities().mpsExcludeSalesLineUpdate(this))
            {
                if (this.MpsUpdateExcludeSalesLine)
                {
                    MpsExcludeSpecificSourceDocumentLine::updateMpsExcludeSourceDocumentLine(this.MpsExcludeSalesLine, this.InventTransId);
                    this.MpsUpdateExcludeSalesLine = NoYes::No;
                }
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && !_dropInvent
            && RetailSalesTable::find(this.SalesId).RetailChannel
            && (this.QtyOrdered != salesLineOrig.QtyOrdered || this.InventDimId != salesLineOrig.InventDimId))
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().syncSalesLine(this))
                {
                    RetailKitAssemblyOrder::syncSalesLine(this);
                }
            }

            if (this.LineDeliveryType == LineDeliveryType::DeliveryLine
            && !skipDeliveryScheduleUpdate
            && (   this.SalesQty               != salesLineOrig.SalesQty
                || this.SalesStatus            != salesLineOrig.SalesStatus
                || this.ShippingDateRequested  != salesLineOrig.ShippingDateRequested
                || this.ShippingDateConfirmed  != salesLineOrig.ShippingDateConfirmed
                || this.ReceiptDateRequested   != salesLineOrig.ReceiptDateRequested
                || this.ReceiptDateConfirmed   != salesLineOrig.ReceiptDateConfirmed
                ))
            {
                salesLineType.updateOrderLineOfDeliverySchedule();
            }

            if (KanbanFindRules::ruleMayExist(this.ItemId,LeanReplenishmentStrategy::Event))
            {
                ReqEventProcessKanban::newStandard(this, false, true, reqEventProcessParm).runOperation();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(TradeBroker)))
            {
                // Reread the record before the next line.
                this.reread();

                new MCRBrokerOrder().calcBrokerage(this);
            }

            this.SkipPriceDiscCalc = this.mustSkipPriceDiscCalc(salesLineOrig);

            if (!this.McrMarginUpdated && this.hasMarginDependantFieldValueChanged(salesLineOrig))
            {
                // The margin calculation must happen after brokerage calculation, as it is dependent on the value set there
                if (this.setMcrMarginPercent())
                {
                    // If the margin calculation changed the value, then it must be saved again
                    this.doUpdate();
                }
            }

            if (interCompanySkipUpdate  == InterCompanySkipUpdate::No
            && (salesLineOrig.SalesQty  != this.SalesQty ||  salesLineOrig.SalesUnit != this.SalesUnit))
            {
                using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().interCompanyCalcDisc(this))
                {
                    salesLineType.interCompanyCalcDiscInternal();
                    salesLineType.interCompanyCalcDisc();
                }
            }

            if (!autoUpdateShipmentBeforeAutoReservationFlightEnabled)
            {
                this.checkAndUpdateLoadLines(salesLineOrig);
            }
            
            using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().updateFromSalesLine(this))
            {
                PlInventPackageParm::updateFromSalesLine(this);

                RetailTransactionServiceFulfillment::updateFulfillmentStatusFromEditSalesLine(this);
            }
            
            this.writeRetailSalesLine();

            this.SysExtensionSerializerMap::postUpdate();

            salesLineType.updated(salesLineOrig);

            if (this.salesTable().InterCompanyDirectDelivery
            && (this.ReceiptDateRequested != salesLineOrig.ReceiptDateRequested || this.ShippingDateRequested != salesLineOrig.ShippingDateRequested))
            {
                InterCompanyTradingPartner               interCompanyTradingPartnerVendor         = InterCompanyTradingPartner::findOrCreateVendor(this.defaultIntercompanyVendorAccountNumber(), this.DataAreaId);
                InterCompanyEndpointActionPolicy         interCompanyEndpointActionPolicyPurch    = interCompanyTradingPartnerVendor.interCompanyEndpointActionPolicy();
                InterCompanyEndpointActionPolicyTransfer interCompanyEndpointActionPolicyTransfer = interCompanyEndpointActionPolicyPurch.getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::Internal);

                if (interCompanyEndpointActionPolicyTransfer.UpdateRequestedReceiptDate)
                {
                    SalesLine intercompanySalesLine = this.interCompanySalesLine();

                    if (intercompanySalesLine && (intercompanySalesLine.ReceiptDateRequested != this.ReceiptDateRequested || intercompanySalesLine.ShippingDateRequested != this.ShippingDateRequested))
                    {
                        changecompany(intercompanySalesLine.DataAreaId)
                        {
                            intercompanySalesLine.selectForUpdate(true);
                            intercompanySalesLine.ReceiptDateRequested = this.ReceiptDateRequested;
                            intercompanySalesLine.ShippingDateRequested = this.ShippingDateRequested;
                            intercompanySalesLine.SkipUpdate = InterCompanySkipUpdate::Both;
                            intercompanySalesLine.update();
                        }
                    }
                }
            }

            if (isTaxRecalculationNeeded)
            {
                salesLineType.deleteTaxUncommitted();
            }

            if (this.shouldUpdateTaxWorkRegulation(salesLineOrig))
            {
                TaxRegulation::adjustTaxInvoiceV2(this, salesLineOrig.SalesQty, this.SalesQty);
            }

            this.EventWriteCallCenterUserEditedSalesOrder(funcName(), salesLineOrig);
        }

        if (this.SalesStatus != SalesStatus::Invoiced && this.SalesStatus != SalesStatus::Canceled)
        {
            using(var nestedActivityContext = salesOrderInstrumentationLogger.salesOrderActivities().mcrPriceHistoryUpdate(this))
            {
                RetailSalesTable retailSales;
                retailSales = RetailSalesTable::findSalesTable(this.salesTable());
                if (retailSales && retailSales.RetailChannel)
                {
                    MCRPriceHistoryUpdate mcrPriceHistoryUpdate = MCRPriceHistoryUpdate::constructNoThrow(this);
                    if (mcrPriceHistoryUpdate)
                    {
                        SalesPurchLineInterface tempSalesPurchLine = this.salesPurchLineInterface();
                        PriceDisc_Price priceDisc_Price = tempSalesPurchLine.priceDisc_PriceCache();
                        PriceDisc_LineDisc priceDisc_LineDisc = tempSalesPurchLine.priceDisc_LineDiscCache();
                        mcrPriceHistoryUpdate.parmUseRetailPricing(true);
                        mcrPriceHistoryUpdate.update(priceDisc_Price, priceDisc_LineDisc);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockLineUpdateAllowed</Name>
				<Source><![CDATA[
    private boolean isStockLineUpdateAllowed()
    {
        return SalesPurchSyncDeliveryInfoFeature::instance().isEnabled()
                    && this.DeliveryType == TradeLineDlvType::None
                    && PurchParameters::find().DeliveryInfoSyncOnUpdateStock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventInventoryDataServiceSoftReservation</Name>
				<Source><![CDATA[
    private void checkInventInventoryDataServiceSoftReservation()
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            if (InventInventoryDataServiceSoftReservationHelper::isV1Enabled())
            {
                boolean isReservationIdOrAutoOffsetChanged = (this.InventoryServiceReservationId != this.orig().InventoryServiceReservationId) || (this.InventoryServiceAutoOffset != this.orig().InventoryServiceAutoOffset);
                boolean isInventDimChanged = this.InventDimId != this.orig().InventDimId;
                boolean isSalesQtyChanged = this.SalesQty != this.orig().SalesQty;

                if (isReservationIdOrAutoOffsetChanged || isInventDimChanged || isSalesQtyChanged)
                {
                    InventInventoryDataServiceSoftReserveHistory softReserveHistory = InventInventoryDataServiceSoftReserveHistory::findInventTransId(this.InventTransId, true);

                    // old version imported salesline, which don't support to update inventdim or quantity
                    if (this.IsSoftReservedExternally && softReserveHistory && softReserveHistory.existsNonZereSoftReservedQuantity())
                    {
                        throw error("@SCM:InventoryServiceBlockEditQuantityOrChangeDimensionsReservationIdAfterSoftReservationExternallyError");
                    }
                    else
                    {
                        if (isReservationIdOrAutoOffsetChanged && softReserveHistory)
                        {
                            if (softReserveHistory.existsNonZereSoftReservedQuantity())
                            {
                                throw error("@SCM:InventoryServiceBlockEditReservationIdAfterSoftReservationError");
                            }
                            else
                            {
                                if (this.orig().InventoryServiceReservationId == "" && this.InventoryServiceReservationId != "")
                                {
                                    this.IsSoftReservedExternally = true;
                                    softReserveHistory.delete();
                                }
                                else
                                {
                                    if (this.InventoryServiceReservationId == "")
                                    {
                                        softReserveHistory.cleanOffsetRelatedQuantity();
                                    }
                                    else
                                    {
                                        throw error("@SCM:InventoryServiceCleanInternalReservationIdInfo");
                                    }
                                }
                            }
                        }

                        if (softReserveHistory && softReserveHistory.existsNonZereSoftReservedQuantity())
                        {
                            if (isInventDimChanged)
                            {
                                throw error('@SCM:InventoryServiceBlockChangeSalesLineDimensionAfterSoftReserveError');
                            }

                            if (isSalesQtyChanged)
                            {
                                if (this.unitConvertSales2Invent(this.SalesQty) < softReserveHistory.getMaxPossiblePostedQty())
                                {
                                    throw error('@SCM:InventoryServiceBlockDecreaseQuantityAfterSoftReservationError');
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled() && InventInventoryDataServiceSoftReservationHelper::isSoftReserved(this))
            {
                if (this.InventDimId != this.orig().InventDimId)
                {
                    throw error('@SCM:InventoryServiceBlockChangeSalesLineDimensionAfterSoftReserveError');
                }

                if (this.SalesQty != this.orig().SalesQty)
                {
                    InventInventoryDataServiceSoftReserveHistory softReserveHistory = InventInventoryDataServiceSoftReserveHistory::findInventTransId(this.InventTransId);

                    if (this.unitConvertSales2Invent(this.SalesQty) < softReserveHistory.getPostedQty())
                    {
                        throw error('@SCM:InventoryServiceBlockDecreaseQuantityAfterSoftReservationError');
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateTaxWorkRegulation</Name>
				<Source><![CDATA[
    private boolean shouldUpdateTaxWorkRegulation(SalesLine _salesLineOrig)
    {
        if (this.creditNoteLine() && CustParameters::find().TaxAdjustmentInReturn)
        {
            // Return order initiation is handled by this function when disposition got assigned and then update the line.
            // Credit note initiation does not trigger line update, hence handled by SalesCopying_CreditNote.updateInvoiceCreditCopy().
            DispositionAction origDispositionAction = ReturnDispositionCode::find(_salesLineOrig.ReturnDispositionCodeId).DispositionAction;
            DispositionAction newDispositionAction = ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction;
            if (origDispositionAction != DispositionAction::ReturnToCust
                && newDispositionAction != DispositionAction::ReturnToCust)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSalesLineByInventRefId</Name>
				<Source><![CDATA[
    private boolean existsSalesLineByInventRefId(InventRefId _inventRefId, boolean _isPurchLineMasterPlan)
    {
        return _isPurchLineMasterPlan && (select firstonly RecId from salesLine
            where salesLine.RecId != this.RecId
               && salesLine.InventRefId == _inventRefId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchLineMasterPlan</Name>
				<Source><![CDATA[
    private boolean isPurchLineMasterPlan(InventRefTransId _inventRefTransId,
        InventRefType    _inventRefType)
    {
        return _inventRefType == InventRefType::Purch
            && _inventRefTransId
            && PurchLine::findInventTransId(_inventRefTransId).ReqPlanIdSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReferences</Name>
				<Source><![CDATA[
    private void setInventReferences(InventRefId _inventRefId = '',
        InventRefTransId _inventRefTransId = '',
        InventRefType    _inventRefType    = InventRefType::None)
    {
        this.InventRefId      = _inventRefId;
        this.InventRefTransId = _inventRefTransId;
        this.InventRefType    = _inventRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecalcDiscOnSalesTypeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if recaculate discounts when sales type has changed.
    /// <param name="_salesLineOrig">
    /// The original sales order line which is updated.
    /// </summary>
    /// <returns>true it will recaculate discounts; otherwise, false.</returns>
    protected boolean mustRecalcDiscOnSalesTypeChanged(SalesLine _salesLineOrig)
    {
        return this.SalesType != _salesLineOrig.SalesType
            && this.LineDeliveryType != LineDeliveryType::DeliveryLine
            && isConfigurationkeyEnabled(configurationKeyNum(TAMPromotionsManagement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Indicates whether <c>SalesTable</c> record must be updated.
    /// </summary>
    /// <returns>
    ///		A boolean value true, as <c>SalesTable</c> record must be updated.
    /// </returns>
    protected boolean mustUpdateSalesTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecordHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Checks the version history of the sales line record.
    /// </summary>
    /// <param name = "_salesLineOrig">
    ///		The original version of the sales line record.
    /// </param>
    /// <param name = "_salesLineType">
    ///		An instance of <c>SalesLineType</c> class.
    /// </param>
    /// <returns>
    ///		true, if the sales line record version history check is ok; otherwise, false.
    /// </returns>
    protected boolean checkRecordHistory(SalesLine _salesLineOrig, SalesLineType _salesLineType)
    {
        if (this.RecVersion != _salesLineOrig.RecVersion)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Checks the line status of the sales line record.
    /// </summary>
    /// <param name = "_salesLineOrig">
    ///		The original version of the sales line record.
    /// </param>
    /// <returns>
    ///		true, if the sales line status check is ok; otherwise, false.
    /// </returns>
    protected boolean checkSalesLineStatus(SalesLine _salesLineOrig)
    {
        if (this.SalesStatus != _salesLineOrig.SalesStatus)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMarginDependantFieldValueChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any field that margin calculation depends on has changed.
    /// </summary>
    /// <param name="_salesLineOrig">
    /// The original version of the sales line to compare with.
    /// </param>
    /// <returns>true if a field has changed; otherwise, false.</returns>
    public boolean hasMarginDependantFieldValueChanged(SalesLine _salesLineOrig)
    {
        return (   _salesLineOrig.CustAccount != this.CustAccount
                || _salesLineOrig.CurrencyCode != this.CurrencyCode
                || _salesLineOrig.InventDimId != this.InventDimId
                || _salesLineOrig.ItemId != this.ItemId
                || _salesLineOrig.LineAmount != this.LineAmount
                || _salesLineOrig.LineDisc != this.LineDisc
                || _salesLineOrig.LinePercent != this.LinePercent
                || _salesLineOrig.SalesMarkup != this.SalesMarkup
                || _salesLineOrig.SalesPrice != this.SalesPrice
                || _salesLineOrig.PriceUnit != this.PriceUnit
                || _salesLineOrig.SalesUnit != this.SalesUnit
                || _salesLineOrig.SalesQty != this.SalesQty);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the parameter values of the update method to ensure the update operation will be correctly executed.
    /// </summary>
    /// <param name="_dropInvent">
    /// A Boolean value that indicates whether the inventory movement that is associated with the line must
    /// be updated; optional.
    /// </param>
    /// <param name="_childBuffer">
    /// The child record that is associated with the line; optional.
    /// </param>
    /// <returns>
    /// true, if the parameters are valid for the given update; otherwise, false.
    /// </returns>
    private boolean checkUpdateParameters(boolean _dropInvent, Common _childBuffer)
    {
        return this.type().checkUpdateParameters(_dropInvent, _childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceIntercompanySynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Force intercompany synchronization of sales order line.
    /// </summary>
    public void forceIntercompanySynchronization()
    {
        try
        {
            this.SyncIntercompanyPurchLine = NoYes::Yes;

            this.update();
        }
        finally
        {
            this.SyncIntercompanyPurchLine = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithoutUpdatingDeliveryScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update sales order line without updating the associated delivery schedule lines.
    /// </summary>
    /// <param name="dropInvent">
    /// A Boolean value that indicates whether the inventory movement that is associated with the line must
    /// be updated; optional.
    /// </param>
    /// <remarks>
    /// When calling this method, it is the responsibility of the caller to update the order line.
    /// This is typically done when updating multiple delivery lines in a single transaction and the order line recalculation is performed only once.
    /// </remarks>
    public void updateWithoutUpdatingDeliveryScheduleLines(boolean _dropInvent = false)
    {
        try
        {
            this.SkipDeliveryScheduleUpdate = NoYes::Yes;

            this.update(_dropInvent);
        }
        finally
        {
            this.SkipDeliveryScheduleUpdate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPackAccessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// 	Update and pack the AccessableValue_IN
    /// </summary>
    /// <param name="_updateExciseFields">
    /// 	Indicator of whether to set excise fields
    /// </param>
    public void updateAndPackAccessableValue_IN(boolean _updateExciseFields = false)
    {
        SalesLine_IN salesLine_IN;

        if (TaxParameters::checkTaxParameters_IN())
        {
            salesLine_IN = this.salesLine_IN();
            salesLine_IN.assessableValue(this);
            this.packSalesLine_IN(salesLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValueAndWriteForDataSource_IN</Name>
				<Source><![CDATA[
    private void updateAssessableValueAndWriteForDataSource_IN(boolean _updateAssessableValue = true)
    {
        if (TaxParameters::checkTaxParameters_IN()
            && TaxUpdateAssessableValueWhileWriteBaseTable_INFlight::instance().isEnabled())
        {
            if (_updateAssessableValue && this.isInterCompanyOrder())
            {
                this.updateAndPackAccessableValue_IN();
            }

            this.writeExtensionTableForDataSource_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeExtensionTableForDataSource_IN</Name>
				<Source><![CDATA[
    private void writeExtensionTableForDataSource_IN()
    {
        SalesLine_IN salesLine_IN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesLine_IN), false);

        // Explicitly save the extension table when it's a form data source.
        // Current table extension mechanisms assume that the form's default save operation includes the extension table.
        // See SysExtensionSerializerMap::packExtensionTable for the underlying assumptions.
        // The save order between the extension table and the base table is not guaranteed.
        // Saving the extension table first may result in lost updates if the base table modifies it during its save operation.
        // Conversely, the base table may access the extension table's record before it's written to the database by the form data source.
        // To ensure database accessibility, insert the extension table record here.
        if (FormDataUtil::isFormDataSource(salesLine_IN))
        {
            if (salesLine_IN.RecId == 0)
            {
                salesLine_IN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(this);
            }
            else if (this.isInterCompanyOrder())
            {
                FormDataSource dataSource = FormDataUtil::getFormDataSource(salesLine_IN);
                if(dataSource.validateWrite())
                {
                    dataSource.write();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditNoteMarking_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the inventory marking for the current credit note transaction.
    /// </summary>
    /// <param name="_origSalesQty">
    ///     Sales quantity of the original transaction line
    /// </param>
    public void updateCreditNoteMarking_PL(SalesQty _origSalesQty)
    {
        SalesLine           origSalesLine;
        Qty                 markingQty;
        InventTransOrigin   inventTransOrigin_Current;
        InventTransOrigin   inventTransOrigin_Orig;
        InventTrans         inventTrans;

        if (this.CreditNoteInternalRef_PL && !this.InventTransIdReturn)
        {
            select firstonly SalesQty, InventTransId from origSalesLine
                where origSalesLine.SalesId                 == this.SalesId                     &&
                    origSalesLine.CreditNoteInternalRef_PL  == this.CreditNoteInternalRef_PL    &&
                    origSalesLine.RecId                     != this.RecId;

            markingQty = min(this.SalesQty, -origSalesLine.SalesQty) - _origSalesQty;

            if (origSalesLine.InventTransId && markingQty > 0)
            {
                inventTransOrigin_Current = InventTransOrigin::findByInventTransId(this.InventTransId);
                inventTransOrigin_Orig = InventTransOrigin::findByInventTransId(origSalesLine.InventTransId);

                ttsbegin;
                // we should clear marking in case they refer to absent InventTransOrigin, otherwise new marking will fail
                InventTransOrigin::clearUnboundMarking(inventTransOrigin_Orig.RecId);

                inventTrans = InventTrans::findTransId(this.InventTransId, true);
                inventTrans.InventDimId = InventTrans::findTransId(origSalesLine.InventTransId).InventDimId;
                inventTrans.update();

                InventTransOrigin::updateMarking(inventTransOrigin_Current.RecId, inventTransOrigin_Orig.RecId, -markingQty);
                InventTransOrigin::updateMarking(inventTransOrigin_Orig.RecId, inventTransOrigin_Current.RecId, markingQty);

                InventTrans::findTransId(this.InventTransId, true).updateSumUp();
                InventTrans::findTransId(origSalesLine.InventTransId, true).updateSumUp();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryCFOP_BR</Name>
				<Source><![CDATA[
    public void updateDeliveryCFOP_BR()
    {
        this.packSalesLine_BR(this.salesLine_BR().updateDeliveryCFOP_BR());
        this.updateDeliveryCFOPTax_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryCFOPTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the taxgroup and taxitemgroup from CFOPMatrix_BR table
    /// updates it to the salesline tax groups for Sales and itemRequirement cases.
    /// </summary>
    public void updateDeliveryCFOPTax_BR()
    {
        TaxGroup                taxGroup;
        TaxItemGroup            taxItemGroup;
        SalesLine_BR            salesLine_BR;
        SalesPurchTrntype_BR    salesPurchTrntype;

        switch (this.SalesType)
        {
            case SalesType::Sales:

                salesPurchTrntype = SalesPurchTrntype_BR::Sales;

                break;

            case SalesType::ItemReq:

                salesPurchTrntype = SalesPurchTrntype_BR::ItemRequirement;

                break;

            default:

                return;
        }

        salesLine_BR = this.salesLine_BR();

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.salesLine_BR().DeliveryCFOPTable_BR,
                                                                               this.salesTable().salesTable_BR().SalesPurchOperationType_BR,
                                                                               salesPurchTrntype,
                                                                               CustVendType_BR::Customer,
                                                                               this.salesTable().CustAccount,
                                                                               this.ItemId,
                                                                               this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());

        this.DeliveryTaxGroup_BR      = taxGroup;
        this.DeliveryTaxItemGroup_BR  = taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after update is executed on original method.
    /// </summary>
    /// <param name="_salesLineOrig">
    /// The original sales order line which is updated.
    /// </param>
    private void updateFiscalInfo_BR(SalesLine _salesLineOrig)
    {
        if (this.salesLine_BR().cfopTable_BR != _salesLineOrig.salesLine_BR().cfopTable_BR)
        {
            this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
        }

        if (this.ItemId != _salesLineOrig.ItemId)
        {
            this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::Inventory);
        }

        if (this.InventDimId != _salesLineOrig.InventDimId)
        {
            this.initFiscalDocumentType_BR(this.inventDim());
            this.setCFOP_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTransTaxGroups_BR</Name>
				<Source><![CDATA[
    private void updateMarkupTransTaxGroups_BR()
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        ttsbegin;
        while select forupdate markupTrans
            where markupTrans.TransTableId == this.TableId
               && markupTrans.TransRecId   == this.RecId
               && (markupTrans.TaxGroup != '' || markupTrans.TaxItemGroup != '')
            exists join markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.ModuleType == markupTrans.ModuleType
                        && markupTable.CustType   == MarkupType::CustVend
                        && markupTable.VendType   == MarkupType::LedgerAccount
        {
            markupTrans.TaxGroup = this.TaxGroup;
            markupTrans.TaxItemGroup = this.TaxItemGroup;
            markupTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete(boolean _interCompanyForce = false
                            , boolean _mcrCancel = false
                            )
    {
        boolean         ok = true;
        SalesLineType   salesLineType;

        if (RetailInvoicedSalesLinesDeletionErrorFlight::instance().isEnabled())
        {
            SalesTableForm salesTableForm = new SalesTableForm(this.salesTable());

            if (salesTableForm.isMcrOrderCompletionEnabled() && this.SalesStatus == SalesStatus::Invoiced)
            {
                return checkFailed('Invoiced lines cannot be deleted');
            }
        }

        ok = super();

        if (this.validateOk(ok))
        {
            salesLineType = this.type();
            // Pass cancel flag
            ok = salesLineType.validateDelete(_interCompanyForce
                                            , _mcrCancel
                                            );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Validates the ok value.
    /// </summary>
    /// <param name = "_ok">
    ///		A boolean value to validate.
    /// </param>
    /// <returns>
    ///		true if validation is ok; otherwise, false.
    /// </returns>
    protected boolean validateOk(boolean _ok)
    {
        if (_ok)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>salesLine</c> fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Before validation replace alternate source code with matching primary source code
    /// (call to getSourceCode does this).
    /// A user may not turn on a price override via the checkbox (MCRPriceOverride),
    /// they may only turn off the price override via the checkbox.
    /// </remarks>
    public boolean  validateField(FieldId  _fieldId)
    {
        boolean         ok = true;

        ok = super(_fieldId);

        ok = ok && this.validateField_Server(_fieldId);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField_Server</Name>
				<Source><![CDATA[
    boolean  validateField_Server(FieldId  fieldId)
    {
        boolean         ok;
        SalesLineType   salesLineType;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        // <GBR>
        SalesLine_BR salesLine_BR;
        // </GBR>

        salesLineType = this.type();
        ok = salesLineType.validateField(fieldId);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (ok && fieldId == fieldNum(SalesLine, AssetId_RU) && this.AssetId_RU)
            {
                ok = RAssetTable::find(this.AssetId_RU).isOkToSell(this.creditNoteLine());
            }
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled() && this.SalesType == SalesType::ItemReq)
        {
            salesLine_BR = this.salesLine_BR();

            if (CFOPMatrix_BR::findCfopMatrixRegardlessOperationType(salesLine_BR.DeliveryCFOPTable_BR, SalesPurchTrntype_BR::ItemRequirement))
            {
                ok = true;
            }
            else if (salesLine_BR.DeliveryCFOPTable_BR)
            {
                throw error(strFmt("@GLS510089"
                                    ,CFOPTable_BR::find(salesLine_BR.DeliveryCFOPTable_BR).cfopId));
            }
        }
        // </GBR>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDim</Name>
				<Source><![CDATA[
    public boolean validateModifyInventDim(
        InventDim           _inventDim,
        FieldId             _dimFieldId)
    {
        return this.type().validateModifyInventDim(_inventDim, _dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDimOrderCommittedReservation</Name>
				<Source><![CDATA[
    public boolean validateModifyInventDimOrderCommittedReservation(InventDim _inventDim)
    {
        InventDim inventDim = InventDim::findOrCreate(_inventDim);

        return this.type().validateModifyInventDimOrderCommittedReservation(this, inventDim.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean  validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean         ok = true;

        ok = super();

        ok = ok && this.validateWrite_server(_skipCreditLimitCheck);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_server</Name>
				<Source><![CDATA[
    boolean validateWrite_server(boolean _skipCreditLimitCheck = false)
    {
        boolean         ok = true;
        SalesLineType   salesLineType;

        // <GEERU>
        RAssetTable      rAssetTable;
        #ISOCountryRegionCodes
        // </GEERU>
        SalesParameters             salesParameters = SalesParameters::find();
        InventItemSalesSetup        inventItemSalesSetup;
        InventDim                   inventDimSalesSetup;
        MCRInventTable              mcrInventTable;

        salesLineType = this.type();
        ok = salesLineType.validateWrite(_skipCreditLimitCheck);
        // _skipCreditLimitCheck is passed as true from the SalesQuickQuote form

        // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
        ok = ok
            && (CheckTaxGroups::Error != Tax::isValidTaxGroupIntersectionV2(
                                            this.TaxGroup,
                                            this.TaxItemGroup,
                                            Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales)));

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && ok)
        {
            if (this.inventTable().AssetGroupId_RU &&
                ! this.AssetId_RU)
            {
                ok = checkFailed(strFmt("@SYS50104", fieldPName(SalesLine, AssetId_RU)));
            }
            if (! this.creditNoteLine() && this.AssetId_RU)
            {
                if (abs(this.SalesQty) != 1)
                {
                    ok = checkFailed("@GLS116228");
                }
                rAssetTable = RAssetTable::find(this.AssetId_RU, true);
                if (! rAssetTable)
                {
                    ok = checkFailed("@GLS116398");
                }

                ok = ok && rAssetTable.isOkToSell(false);
            }
        }
        // </GEERU>

        // Check Activity is not completed
        ok = ok && this.checkActivity();

        if (ok &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU]) &&
            this.salesTable().InclTax)
        {
            ok = this.salesPurchLineInterface().validateExcludeTaxFromInvoice(this.salesTable().InclTax);
        }

        if (ok && this.salesTable().mcrIsCallCenter())
        {
            // Validate item cancellation rules.
            // find the override setup
            select firstonly inventItemSalesSetup where
                    inventItemSalesSetup.ItemId == this.ItemId
                    && (inventItemSalesSetup.InventDimId == this.InventDimId || inventItemSalesSetup.InventDimId == "")
                    && inventItemSalesSetup.Override == NoYes::Yes;

            // No override found, find the normal setup
            if (!inventItemSalesSetup)
            {
                inventItemSalesSetup = InventItemSalesSetup::find(this.ItemId, this.InventDimId);
            }

            if (this.isItemDiscontinued(inventItemSalesSetup))
            {
                // If inventory exists for the item, warn the user that the item has been cancelled.
                if (inventItemSalesSetup.inventDim().InventSiteId)
                {
                    warning(strFmt("@MCR35906", this.ItemId, inventItemSalesSetup.inventDim().InventSiteId));
                }
                else
                {
                    warning(strFmt("@MCR35907", this.ItemId));
                }
            }

            mcrInventTable = MCRInventTable::findByItemId(this.ItemId);

            if (mcrInventTable.SellStartDate)
            {
                if (mcrInventTable.SellStartDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    ok = checkFailed(strFmt("@MCR34892", this.ItemId, mcrInventTable.SellStartDate));
                }
            }

            if (mcrInventTable.SellEndDate
                && mcrInventTable.SellEndDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                && this.ReturnStatus == ReturnStatusLine::Awaiting)
            {
                // Allow insertion if it is a return item or has a return id (for credit notes) and has already been sold before
                // If it is not allowed, then enter the IF, generate an error, and do not allow insert
                if (this.SalesType != SalesType::ReturnItem
                    && !this.InventTransIdReturn)
                {
                    //Return error and do not allow insert
                    ok = checkFailed(strFmt("@MCR35439",this.ItemId));
                }
            }

            if (this.ReturnStatus != ReturnStatusLine::Awaiting)
            {
                if (this.ShippingDateConfirmed && this.ShippingDateConfirmed < mcrInventTable.ShipStartDate)
                {
                    ok = checkFailed(strFmt("@MCR35410", this.ItemId, mcrInventTable.ShipStartDate));
                }
                else if (this.ShippingDateRequested && this.ShippingDateRequested < mcrInventTable.ShipStartDate)
                {
                    checkFailed(strFmt("@MCR35410", this.ItemId, mcrInventTable.ShipStartDate));
                }
                else if (this.ReceiptDateConfirmed && this.ReceiptDateConfirmed < mcrInventTable.ShipStartDate)
                {
                    ok = checkFailed(strFmt("@MCR35410", this.ItemId, mcrInventTable.ShipStartDate));
                }
                else if (this.ReceiptDateRequested && this.ReceiptDateRequested < mcrInventTable.ShipStartDate)
                {
                    checkFailed(strFmt("@MCR35410", this.ItemId, mcrInventTable.ShipStartDate));
                }

                // Ensure that the shipping date is within the allowed dates
                if (mcrInventTable.SellStartDate)
                {
                    if (this.ShippingDateRequested < mcrInventTable.ShipStartDate)
                    {
                        if (this.RecId !=0)
                        {
                            ttsbegin;
                            this.ShippingDateRequested = mcrInventTable.ShipStartDate;
                            this.update();
                            ttscommit;
                        }
                        else
                        {
                            this.ShippingDateRequested = mcrInventTable.ShipStartDate;
                        }
                        this.modifiedField(fieldnum(SalesLine, ShippingDateRequested));
                        info(strFmt("@MCR34894", this.ItemId));
                    }
                }

                if (ok)
                {
                    // Validation for the available timeslots of the salesline.
                    SalesLine salesLineOrig = this.orig();
                    RetailStoreId storeId = this.mcrGetFulfillmentStore();
                    RetailSalesLine retailSalesLine = this.retailSalesLine();
                    if (this.DlvMode == salesLineOrig.DlvMode
                        && this.ShippingDateRequested == salesLineOrig.ShippingDateRequested
                        && storeId == salesLineOrig.mcrGetFulfillmentStore()
                        && retailSalesLine.PickupStartTime == salesLineOrig.retailSalesLine().PickupStartTime
                        && retailSalesLine.PickupEndTime == salesLineOrig.retailSalesLine().PickupEndTime)
                    {
                        // If nothing changed in the delivery mode, requested shipping date and inventLocationId, then nothing needs to be verified
                        ok = true;
                    }
                    else
                    {
                        // Verify the timeslot availability
                        ok = this.validateModifyTimeslotRelatedFields();
                    }
                }
            }
        }

        if (this.DeliveryType == TradeLineDlvType::DropShip || this.mcrSalesLineDropShipment().DropShipment)
        {
            boolean skipDirectDeliveryWHSCheck = this.salesTable().RetailChannelTable && RetailInventorySkipDirectDeliveryWHSCheckFlight::instance().isEnabled();
            if (this.inventDim().inventLocation().WHSEnabled && !skipDirectDeliveryWHSCheck)
            {
                ok = checkFailed(strFmt("@SYS4009754", this.inventDim().InventLocationId));
            }

            ok = ok & PurchCreateFromSalesOrderDropShipment::checkInventTable(this.inventTable());
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            // Delivery mode "Pick-up" can only be assigned to lines where the warehouse points to a valid Retail Store.
            // Inform user to re-assign the Warehouse or change the delivery mode for the sales item.
            if (ok && this.DlvMode != ""
                && RetailDlvMode::isPickupDeliveryMode(this.DlvMode)
                && this.SalesQty > 0)
            {
                if (!RetailStoreTable::getFirstStoreIdByPickupLocation(InventDim::find(this.InventDimId).InventLocationId))
                {
                    ok = checkFailed("@Retail:RetailPickupOrderWithNoStoreAssigned");
                }
            }
        }

        SalesTable salesTable = this.salesTable();
        if ((salesTable.mcrIsCallCenter() || salesTable.isRetailSale()) && this.isCategoryBased())
        {
            warning("@Retail:SalesCategoryIsNotSupportedForRetailSalesQuotationsAndOrders");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyTimeslotRelatedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify when the timeslot related field (Delivery Mode/Requested Ship Date/Warehouse) are modified then if the timeslot had been selected the modify should be failed.
    /// </summary>
    /// <returns>
    /// true: not call center order/delivery mode,request shipping date,store is matched with pickupstarttime and pickupendtime
    /// fales: Not matched.
    /// </returns>
    public boolean validateModifyTimeslotRelatedFields()
    {
        if (this.salesTable().mcrIsCallCenter())
        {
            return RetailPickupTimeslotHandler::validateSalesLinesWithTimeslots(this.DlvMode, this.ShippingDateRequested, this.mcrGetFulfillmentStore(), this.retailSalesLine().PickupStartTime, this.retailSalesLine().PickupEndTime);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemDiscontinued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is discontinued.
    /// </summary>
    /// <param name = "_inventItemSalesSetup">A <c>InventItemSalesSetup</c> record.</param>
    /// <returns>true if it is discontinued; otherwise, false.</returns>
    [Replaceable]
    protected boolean isItemDiscontinued(InventItemSalesSetup _inventItemSalesSetup)
    {
        return (_inventItemSalesSetup && _inventItemSalesSetup.Stopped == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningForReference</Name>
				<Source><![CDATA[
    public boolean warningForReference()
    {
        str         warningTxt;

        if (this.InventRefId)
        {
            warningTxt = this.referenceWarningTxt();
            if (warningTxt)
            {
                return Box::yesNo(warningTxt+'\n\n'+"@SYS27060",DialogButton::Yes) == DialogButton::Yes;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayCustAvailCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a customer's available credit.
    /// </summary>
    /// <returns>
    /// The available credit of the customer associated with the sales order.
    /// </returns>
    public display AmountMST whsDisplayCustAvailCredit()
    {
        CustCreditLimit custCreditLimit;

        custCreditLimit = new CustCreditLimit(CustTable::find(this.CustAccount));

        return custCreditLimit.calcCreditAvailable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayCustName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the name of the customer associated with the Sales order.
    /// </summary>
    /// <returns>
    /// The name of the customer.
    /// </returns>
    public display Name whsDisplayCustName()
    {
        return CustTable::find(this.CustAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the name of the item on the Sales order line.
    /// </summary>
    /// <returns>
    /// The name of the item.
    /// </returns>
    public display ItemName whsDisplayItemName()
    {
        return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(this.ItemId), Global::currentUserLanguage()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplaySalesOrgin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Sales origin ID.
    /// </summary>
    /// <returns>
    /// The manner in which the sales order was received.
    /// </returns>
    public display SalesOriginId whsDisplaySalesOrgin()
    {
        return SalesTable::find(this.SalesId).SalesOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsGetLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the load tied to a sales line.
    /// </summary>
    /// <returns>
    /// The load tied to a sales line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSLoadId whsGetLoads()
    {
        WHSLoadLine     loadLine;
        WHSLoadId       ret;
        int             counter;

        if (this.InventTransId
        &&  (WHSInventEnabled::exist(this.ItemId)
        ||  TMSInventEnabled::exist(this.ItemId)))
        {
            while select firstOnly10 LoadId from loadLine
            where loadLine.InventTransId == this.InventTransId
            {
                ++counter;

                if (counter > 1)
                {
                    break;
                }

                ret = loadLine.LoadId;
            }

            switch (counter)
            {
                case 0:
                    ret = '';
                    break;

                case 1:
                    break;

                default:
                    ret = "@WAX402";
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsHasLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>SalesLine</c> is linked to <c>WHSLoadTable</c>.
    /// </summary>
    /// <returns>
    /// true, if a link <c>SalesLine</c> is linked to <c>WHSLoadTable</c>; otherwise, false.
    /// </returns>
    public boolean whsHasLoadTable()
    {
        WHSLoadLine     loadLine;

        select firstOnly LoadId from loadLine
            where loadLine.InventTransId == this.InventTransId
                && loadLine.LoadId != '';

        return loadLine.LoadId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsIsInLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current sales order line is inside any load line of a given load.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the WHSLoadTable that may contain a WHSLoadLine for the current sales line.
    /// </param>
    /// <returns>
    /// True if the current sales order line is associated with a load line of the load; otherwise; false.
    /// </returns>
    public boolean whsIsInLoad_BR(WHSLoadid _loadId)
    {
        WHSLoadLine loadLine;

        if (!_loadId)
        {
            return false;
        }

        select firstOnly RecId from loadLine
            where loadLine.LoadId == _loadId
                && loadLine.InventTransId == this.InventTransId
                && loadLine.InventTransType == InventTransType::Sales;

        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsIsInLoadAndNotInvoiced_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current sales order line is inside any load line of a given load and that
    /// the load line has not been invoiced.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the WHSLoadTable that may contain a WHSLoadLine for the current sales line.
    /// </param>
    /// <param name="_jourTableId">
    /// The load line that refers to the sales order line should not have been invoiced for this journal table.
    /// </param>
    /// <returns>
    /// True if the current sales order line is associated with a load line of the load
    /// and has not been invoiced; otherwise; false.
    /// </returns>
    public boolean whsIsInLoadAndNotInvoiced_BR(WHSLoadid _loadId, TableId _jourTableId)
    {
        WHSLoadLine                  loadLine;
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;
        FiscalDocument_BR            fiscalDocument;

        if (!_loadId)
        {
            return false;
        }

        select firstOnly RecId from loadLine
            where loadLine.LoadId == _loadId
                && loadLine.InventTransId == this.InventTransId
                && loadLine.InventTransType == InventTransType::Sales
            notexists join loadLineFiscalDocument
                where loadLineFiscalDocument.WHSLoadLine == loadLine.RecId
                exists join fiscalDocument
                    where fiscalDocument.RecId == loadLineFiscalDocument.FiscalDocument_BR
                        && fiscalDocument.RefTableId == _jourTableId;

        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsItemGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the volume of the item on the order line.
    /// </summary>
    /// <returns>
    /// The volume of the specified item.
    /// </returns>
    public display ItemGrossWeight whsItemGrossWeight()
    {
        return this.inventTable().grossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsItemUnitVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the unit volume for the item on the order line.
    /// </summary>
    /// <returns>
    /// The volume of the item.
    /// </returns>
    public display Volume whsItemUnitVolume()
    {
        return this.inventTable().UnitVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsNotFullyReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the quantity that has not been completely reserved.
    /// </summary>
    /// <returns>
    /// -1 if the quantity has been fully reserved; otherwise return 0.
    /// </returns>
    public display Integer whsNotFullyReserved()
    {
        // If quantity reserved Physical + Picked + Delivered is greater than or equal to quantity ordered than return -1 else 0
        return -(this.whsResPhyPickedDeliveredQty() >= this.QtyOrdered);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsQtyInWorkSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the work quantity for the sales order line.
    /// </summary>
    /// <returns>
    /// The work quantity in sales units.
    /// </returns>
    public display WHSQtyInWork whsQtyInWorkSalesUnit()
    {
        if (!this.InventTransId)
        {
            return 0;
        }

        return this.unitConvertInventHandlingQty2Sales(this.type().whsInWorkTotal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsResPhyPickedDeliveredQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the picked reserved inventory amount.
    /// </summary>
    /// <returns>
    /// The inventory amount.
    /// </returns>
    public InventQty whsResPhyPickedDeliveredQty()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        if (!this.InventTransId)
        {
            return 0;
        }

        select sum(Qty) from inventTrans
            join InventTransId, RecId from inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId      &&
                  inventTransOrigin.InventTransId   == this.InventTransId           &&
                  inventTrans.StatusReceipt         == StatusReceipt::None          &&
                  inventTrans.StatusIssue           <= StatusIssue::ReservPhysical  &&
                  inventTrans.StatusIssue           != StatusIssue::None;

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsWHSEAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the warehouse address for display.
    /// </summary>
    /// <returns>
    /// The warehouse address.
    /// </returns>
    public display Addressing whsWHSEAddress()
    {
        return this.inventDim().inventLocation().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>RetailSalesLine</c> record if necessary conditions are met.
    /// </summary>
    /// <param name="_forceInsert">
    /// Forces insert of <c>RetailSalesLine</c> without checking does its record exist.
    /// </param>
    final protected void writeRetailSalesLine(boolean _forceInsert = false)
    {
        SalesTable salesTable = this.salesTable();
        RetailSalesLine     retailSalesLineLocal;
        MCRSourceCodeSetup  mcrSourceCodeSetupLocal;
        MCRSourceIdForm     sourceId;
        MCRSalesLine        mcrSalesLine;
        boolean isCallCenterOrder = salesTable.mcrIsCallCenter();

        retailSalesLineLocal = this.retailSalesLine();
        mcrSalesLine         = this.mcrSalesLine();
        
        SalesInstrumentationLogger salesIntrumentationLogger = SalesLine::instrumentationLogger();
        using(var activityContext = salesIntrumentationLogger.salesOrderActivities().writeRetailSalesLine(this))
        {
            if (this.shouldCreateRetailSalesLine(salesTable))
            {
                if (isCallCenterOrder)
                {
                    // use line source id if exist.
                    sourceId = (mcrSalesLine && mcrSalesLine.SourceId) ?
                                mcrSalesLine.SourceId : salesTable.mcrSalesTable().SourceId;
                    if (sourceId)
                    {
                        mcrSourceCodeSetupLocal = MCRSourceCodeSetup::find(sourceId);
                        retailSalesLineLocal.Catalog = mcrSourceCodeSetupLocal.Catalog;
                    }
                }

                if (_forceInsert)
                {
                    retailSalesLineLocal.SalesLine = this.RecId;
                    retailSalesLineLocal.FulfillmentStoreId = this.mcrGetFulfillmentStore();

                    if (isCallCenterOrder && this.isInterCompanyOrder() && this.SalesType == SalesType::ReturnItem)
                    {
                        changecompany(salesTable.InterCompanyCompanyId)
                        {
                            retailSalesLineLocal.ReturnReasonCodeId = SalesLine::find(salesTable.InterCompanyOriginalSalesId, this.LineNum).retailSalesLine().ReturnReasonCodeId;
                        }
                    }

                    RetailTransactionServiceFulfillment::updateFulfillmentStatusFromCreatedSalesLine(this, retailSalesLineLocal);
                    retailSalesLineLocal.write();
                }
            }

            if (retailSalesLineLocal.SalesLine)
            {
                retailSalesLineLocal.FulfillmentStoreId = this.mcrGetFulfillmentStore();
                this.retailPackRetailSalesLine(retailSalesLineLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRegisterReturnQtyTrackingDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a quantity can be returned for a given batch or serial number.
    /// </summary>
    /// <param name="_inventTransId">
    /// A <c>TradeInventTransId</c> data type.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table buffer.
    /// </param>
    /// <param name="_inventQty">
    /// An <c>InventQtyRegistered</c> data type.
    /// </param>
    /// <returns>
    /// true if the quantity can be registered; otherwise, false.
    /// </returns>
    /// <remarks>
    /// In certain scenarios the inventory transaction to be registered is already created hence no
    /// quantity should be passed.
    /// </remarks>
    public static boolean canRegisterReturnQtyTrackingDim(
        TradeInventTransId  _inventTransId,
        InventDim           _inventDim,
        InventQtyRegistered _inventQty = 0)
    {
        InventTrans         inventTransSales;
        InventTrans         inventTransReturn;
        InventTransOriginId inventTransOriginId;
        boolean             ret = true;
        InventDim           inventDim;

        #InventDimDevelop
        if (_inventDim.InventSerialId
            || _inventDim.InventBatchId)
        {
            inventTransOriginId = InventTransOrigin::findByInventTransId(_inventTransId).RecId;

            select sum(Qty) from inventTransSales
                where   inventTransSales.InventTransOrigin          == inventTransOriginId
                    &&  inventTransSales.StatusIssue == StatusIssue::Sold
                exists join inventDim
                    where inventDim.InventDimId    == inventTransSales.InventDimId
                       && ( inventDim.InventSerialId == _inventDim.InventSerialId
                            || !_inventDim.InventSerialId )
                       && ( inventDim.InventBatchId  == _inventDim.InventBatchId
                            || !_inventDim.InventBatchId )
                ;
            select sum(Qty) from inventTransReturn
                    where   inventTransReturn.ReturnInventTransOrigin == inventTransOriginId
                        &&  inventTransReturn.PackingSlipReturned   == NoYes::No
                        &&  (inventTransReturn.StatusReceipt == StatusReceipt::Registered
                            || inventTransReturn.StatusReceipt == StatusReceipt::Received
                            || inventTransReturn.StatusReceipt == StatusReceipt::Arrived
                            || inventTransReturn.StatusReceipt == StatusReceipt::Purchased)
                exists join inventDim
                    where inventDim.InventDimId    == inventTransReturn.InventDimId
                       && ( inventDim.InventSerialId == _inventDim.InventSerialId
                            || !_inventDim.InventSerialId )
                       && ( inventDim.InventBatchId  == _inventDim.InventBatchId
                            || !_inventDim.InventBatchId )
                ;
            ret = (inventTransSales.Qty + inventTransReturn.Qty + _inventQty) <= 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSourcingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// When the purchase order line has been created from the sales order header (new purchase order, new direct delivery or automatic creation)
    /// then sourcing and delivery type information needs to be updated on the original sales order line.
    /// </summary>
    /// <param name = "_purchTable">The purchase table record.</param>
    /// <param name = "_purchLine">The purhcase line.</param>
    /// <param name = "_tradeLineDlvType">The trade delivery type.</param>
    /// <param name = "_vendAccount">The vendor account.</param>
    internal void populateSourcingFields(PurchTable _purchTable, PurchLine _purchLine, TradeLineDlvType _tradeLineDlvType, IntercompanySourcingVendAccount _vendAccount)
    {
        this.SourcingVendAccount = _vendAccount;
        this.SourcingOrigin = _purchTable.InterCompanyOrder ? SalesSourcingOrigin::Intercompany : SalesSourcingOrigin::ExternalVendor;
        this.DeliveryType = _tradeLineDlvType;
        SalesLine icsoLine = _purchLine.interCompanySalesLine();

        if (icsoLine)
        {
            InventDim icsoInventDim = InventDim::findInLegalEntity(icsoLine.inventDimId, icsoLine.DataAreaId);
            this.SourcingCompanyId = icsoLine.DataAreaId;
            this.SourcingInventSiteId = icsoInventDim.inventSiteId;;
            this.SourcingInventLocationId = icsoInventDim.inventLocationId;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDatesForDirectDelivery</Name>
				<Source><![CDATA[
    internal void recalculateDatesForDirectDelivery()
    {
        boolean needRecalculation = !this.salesTable().ReceiptDateConfirmed;

        if (!needRecalculation && this.isIntercompanyOrigin())
        {
            InterCompanyTradingPartner               interCompanyTradingPartnerVendor         = InterCompanyTradingPartner::findOrCreateVendor(this.defaultIntercompanyVendorAccountNumber(), this.DataAreaId);
            InterCompanyEndpointActionPolicy         interCompanyEndpointActionPolicyPurch    = interCompanyTradingPartnerVendor.interCompanyEndpointActionPolicy();
            InterCompanyEndpointActionPolicyTransfer interCompanyEndpointActionPolicyTransfer = interCompanyEndpointActionPolicyPurch.getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::Internal);
            needRecalculation = interCompanyEndpointActionPolicyTransfer.UpdateRequestedReceiptDate;
        }

        if (needRecalculation && !this.isDerivedIntercompanyLine())
        {
            this.recalculateRequestedDates();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeReturnOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or deletes inventory transactions related to Return orders.
    /// </summary>
    /// <param name="_inventTransId">
    /// An inventory transaction ID which identifies the sales lines.
    /// </param>
    /// <param name="_wmsJournalTrans">
    /// A <c>WMSJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_reverse">
    /// A flag controlling whether inventory transactions should be created or deleted.
    /// </param>
    /// <remarks>
    /// By default, Return order lines are created without corresponding inventory trans actions. This method creates the transactions when
    /// they're needed for item arrival purpose and deletes them if they are created by mistake.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The specified Sales Order line could not be found. The operation is aborted.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The specified Sales order could not be found. The operation is aborted.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The specified Sales order is not of type Return order. The operation is aborted.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    ///
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    ///
    /// </exception>

    static void changeReturnOrderType(TradeInventTransId _inventTransId, WMSJournalTrans _wmsJournalTrans = null, boolean _reverse = false)
    {
        #OCCRetryCount
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        InventTrans                 inventTrans;
        WMSJournalTrans             wmsJournalTrans;
        InventTransOriginSalesLine  inventTransOriginSalesLine;

        // Retail return process creates inventTrans early.
        if (SalesLine::findInventTransId(_inventTransId).returnItem() || _reverse)
        {
            try
            {
                ttsbegin;

                if (_inventTransId)
                {
                    salesLine = SalesLine::findInventTransId(_inventTransId, true);
                }
                else
                {
                    salesLine = SalesLine::findInventTransId(_wmsJournalTrans.InventTransId, true);
                }

                if (!salesLine && !_reverse)
                {
                    //The specified Sales Order line could not be found. The operation is aborted.
                    throw error("@SYS115232");
                }

                salesTable  = SalesTable::find(salesLine.SalesId, true);

                if (!salesTable && !_reverse)
                {
                    //The specified Sales order could not be found. The operation is aborted.
                    throw error("@SYS115230");
                }

                if (salesTable.returnItem() || _reverse)
                {
                    if (_reverse && salesLine)
                    {
                        select firstonly inventTrans
                            where inventTrans.StatusReceipt != StatusReceipt::Ordered
                            exists join inventTransOriginSalesLine
                                where inventTransOriginSalesLine.InventTransOrigin      == inventTrans.InventTransOrigin
                                   && inventTransOriginSalesLine.SalesLineInventTransId == _inventTransId
                                   && inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId;

                        if (!inventTrans)
                        {
                            select firstonly wmsJournalTrans where wmsJournalTrans.InventTransId == _wmsJournalTrans.InventTransId
                                                            && wmsJournalTrans.RecId         != _wmsJournalTrans.RecId;
                        }

                        if (!wmsJournalTrans && !inventTrans)
                        {
                            salesLine.resetReturnLine();
                        }
                    }
                    else
                    if (salesLine)
                    {
                        salesLine.SalesQty = salesLine.ExpectedRetQty;
                        salesLine.QtyOrdered = salesLine.calcQtyOrdered(salesLine.ExpectedRetQty);
                        salesLine.RemainInventPhysical   = salesLine.QtyOrdered;
                        salesLine.RemainSalesPhysical    = salesLine.SalesQty;
                        salesLine.LineAmount             = salesLine.returnLineAmount();

                        salesLine.PdsCWQty                  = salesLine
                            .PdsCWExpectedRetQty;
                        salesLine.PdsCWRemainInventPhysical = salesLine.PdsCWQty;

                        salesLine.update();

                        if (salesTable.SalesType != SalesType::ReturnItem)
                        {
                            salesTable.SalesType = SalesType::ReturnItem;
                            salesTable.update();
                        }
                    }
                }
                else
                {
                    //The specified Sale order is not of type Return order. The operation is aborted.
                    throw error("@SYS115231" );
                }
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReturnLine</Name>
				<Source><![CDATA[
    private void resetReturnLine()
    {
        this.RemainSalesPhysical = 0;
        this.SalesQty = 0;
        this.RemainInventPhysical = 0;
        this.QtyOrdered = 0;

        this.PdsCWRemainInventPhysical = 0;
        this.PdsCWQty = 0;

        this.update();

        SalesLine salesLineMore;
        InventTransOriginSalesLine inventTransOriginSalesLineMore;

        select firstonly RecId from salesLineMore
            where salesLineMore.SalesId == this.SalesId
                && salesLineMore.LineNum != this.LineNum
                && salesLineMore.RecId != this.RecId
            exists join inventTransOriginSalesLineMore
                where inventTransOriginSalesLineMore.SalesLineDataAreaId == this.DataAreaId
                    && inventTransOriginSalesLineMore.SalesLineInventTransId == salesLineMore.InventTransId;

        if (!salesLineMore.RecId)
        {
            SalesTable salesTable = this.salesTable(true);
            salesTable.ReturnStatus = ReturnStatusHeader::Created;
            salesTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnedInTotalQty</Name>
				<Source><![CDATA[
    private container returnedInTotalQty()
    {
        SalesLine salesLine;

        select sum(QtyOrdered), sum(ExpectedRetQty) from salesLine
                where salesLine.InventTransIdReturn == this.InventTransIdReturn
                    && salesLine.RecId != this.RecId
                    && salesLine.SalesQty != 0
                    && salesLine.QtyOrdered != 0;

        return [salesLine.ExpectedRetQty, salesLine.QtyOrdered];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReturnQtyOrdered</Name>
				<Source><![CDATA[
    private InventQty calcReturnQtyOrdered(ReturnExpectedRetQty _returnQty = this.ExpectedRetQty)
    {
        InventQty qtyOrdered;
        ReturnExpectedRetQty returnedInTotalQty;
        SalesQty orderedInTotalQty;

        [returnedInTotalQty, orderedInTotalQty] = this.returnedInTotalQty();

        SalesLine returnSalesLine = SalesLine::findInventTransId(this.InventTransIdReturn);

        if (returnSalesLine && returnedInTotalQty + _returnQty == - returnSalesLine.deliveredInTotal())
        {
            qtyOrdered = - returnSalesLine.deliveredInventInTotal() - orderedInTotalQty;
        }
        else
        {
            qtyOrdered = this.salesPurchLineInterface().calcQtyOrdered(_returnQty);
        }

        return qtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromTmpFrmVirtualDelegateHandler_RU</Name>
				<Source><![CDATA[
    [SubscribesTo(tableStr(SalesLine), staticDelegateStr(SalesLine, createLinesFromTmpFrmVirtualDelegate))]
    public static void createLinesFromTmpFrmVirtualDelegateHandler_RU(SalesLineCreateFromTmpFrmVirtualContract _contract, EventHandlerResult _result)
    {
        #ISOCountryRegionCodes

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return;
        }

        _result.booleanResult(true);
        SalesTable              salesTable = _contract.parmSalesTable();
        SMAServiceOrderTable    smaServiceOrderTable = _contract.parmSMAServiceOrderTable();
        InventDimParm           inventDimParm = _contract.parmInventDimParm();
        ListEnumerator          tmpFrmVirtualEnumerator = List::create(_contract.parmTmpFrmVirtualPacked()).getEnumerator();
        boolean     doSearchForAgreementLine = (salesTable.MatchingAgreement != 0);

        SalesQty                    salesQty, salesQtyRelated;
        InventTable                 inventTable;
        InventDim                   inventDim;
        InventProfile_RU            inventProfile, inventProfileRelated;
        InventProfileRelation_RU    inventProfileRelation;
        InventProfileId_RU          inventProfileIdSelected;
        SalesTable_RU               salesTableRU;
        Map                         inventProfileQtyMap;
        boolean                     inventProfileSplitLines = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
                                                              SalesParameters::find().InventProfileSplitLines_RU == NoYes::Yes;
        TmpFrmVirtual           tmpFrmVirtual;
        SalesLine               salesLine;

        void createSalesLine_RU(SalesQty _salesQty, InventDimId _inventDimId)
        {
            try
            {
                ttsbegin;

                salesLine.clear();
                salesLine.ProjId            = salesTable.ProjId;
                salesLine.SalesType         = salesTable.SalesType;
                salesLine.initValue();
                salesLine.SalesId           = salesTable.SalesId;
                salesLine.ItemId            = tmpFrmVirtual.ItemId;
                salesLine.SalesQty          = _salesQty;
                salesLine.setInventDimId(_inventDimId);

                salesLine.createLine( true,       //  validation
                true,  //  initFromSalesTable
                true,  //  initFromInventTableModule
                true,  //  calcInventQty
                true,  //  searchMarkup
                true,  //  searchPrice
                salesTable.Reservation == ItemReservation::Automatic, //  checkReservation
                true,  //  skipCreditLimitCheck
                true,  //  ignoreSalesTableInventDim
                true,  //  setlinenum
                doSearchForAgreementLine, //  searchAgreementLine
                smaServiceOrderTable);

                ttscommit;
            }

            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }
        }

        SalesQty calcLineAvailQty_RU(InventTable _inventTable, InventDim _inventDimCriteria, SalesQty _lineQty)
        {
            InventOnHandQty inventOnhand;
            InventDimParm   inventDimParmCriteria;

            inventOnhand = InventOnHandQty::construct();
            inventOnhand.parmItemId(_inventTable.ItemId);
            inventDimParmCriteria.ItemIdFlag = NoYes::Yes;
            inventDimParmCriteria.initFromInventDim(inventDim);
            inventOnhand.parmInventDimParm(inventDimParmCriteria);
            inventOnhand.parmInventDim(_inventDimCriteria);
            return min(max(0,
                           EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_inventTable.ItemId,
                                                                                                 _inventDimCriteria.InventDimId,
                                                                                                 inventOnhand.availPhysical(),
                                                                                                 _inventTable.inventUnitId(),
                                                                                                 _inventTable.salesUnitId(),
                                                                                                 NoYes::Yes)), _lineQty);
        }
        // </GEERU>

        // <GEERU>
        setPrefix("@GLS113789");
        while (tmpFrmVirtualEnumerator.moveNext())
        {
            tmpFrmVirtual = tmpFrmVirtualEnumerator.current();

            inventTable = InventTable::find(tmpFrmVirtual.ItemId);
            setPrefix(strFmt("@SYS14077", inventTable.itemName(InventDim::find(tmpFrmVirtual.InventDimId))));

            if (inventProfileSplitLines &&
                    tmpFrmVirtual.Qty > 0  &&
                    EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(inventTable.ItemId,
                                                                                 fieldNum(InventDim, InventProfileId_RU))
                )
            {
                inventProfileQtyMap = new Map(Types::String, Types::Real);

                salesLine.setInventDimId(tmpFrmVirtual.InventDimId);
                inventDim = salesLine.inventDim();

                inventProfileIdSelected = '';
                if (inventDimParm.InventProfileIdFlag_RU == NoYes::Yes)
                {
                    inventProfileIdSelected = salesLine.inventDim().InventProfileId_RU;
                }

                salesTableRU = salesTable.salesTable_RU();

                if (! inventProfileIdSelected)
                {
                    inventProfileIdSelected = salesTableRU.InventProfileId_RU;
                }

                salesQty = 0;
                salesQtyRelated = 0;
                while select inventProfile
                        order by SelectionPriority
                        where ((inventProfileIdSelected && inventProfile.InventProfileId == inventProfileIdSelected) ||
                               (!inventProfileIdSelected && inventProfile.SelectionSkip   == NoYes::No &&
                                (salesTableRU.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
                                  inventProfile.InventProfileType == salesTableRU.InventProfileType_RU)))
                {
                    inventDim.InventProfileId_RU = inventProfile.InventProfileId;
                    salesQty = calcLineAvailQty_RU(inventTable, inventDim, tmpFrmVirtual.Qty);
                    if (salesQty > 0)
                    {
                        tmpFrmVirtual.Qty -= salesQty;
                        break;
                    }
                }

                if (salesQty           > 0 &&
                        tmpFrmVirtual.Qty > 0)
                {
                    if (salesTableRU.InventProfileUseRelated_RU == NoYes::Yes)
                    {
                        // loop through related inventory profiles
                        while select inventProfileRelation
                                order by SelectionPriority
                                where inventProfileRelation.InventProfileId == inventProfile.InventProfileId
                            join inventProfileRelated
                                where inventProfileRelated.InventProfileId == inventProfileRelation.InventProfileIdRelated
                                   && inventProfileRelated.SelectionSkip   == NoYes::No
                                   && (salesTableRU.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
                                       inventProfileRelated.InventProfileType == salesTableRU.InventProfileType_RU)
                        {
                            inventDim.InventProfileId_RU = inventProfileRelation.InventProfileIdRelated;
                            salesQtyRelated = calcLineAvailQty_RU(inventTable, inventDim, tmpFrmVirtual.Qty);
                            if (salesQtyRelated)
                            {
                                inventDim = InventDim::findOrCreate(inventDim);
                                createSalesLine_RU(salesQtyRelated, inventDim.InventDimId);
                                tmpFrmVirtual.Qty -= salesQtyRelated;
                            }
                            if (! tmpFrmVirtual.Qty)
                            {
                                break;
                            }
                        }
                    }
                    else
                        if (! inventProfileIdSelected)
                    {
                        while select inventProfileRelated
                                order by SelectionPriority
                                where inventProfileRelated.SelectionPriority > inventProfile.SelectionPriority
                                   && inventProfileRelated.SelectionSkip   == NoYes::No
                                   && (salesTableRU.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
                                       inventProfileRelated.InventProfileType == salesTableRU.InventProfileType_RU)
                        {
                            inventDim.InventProfileId_RU = inventProfileRelated.InventProfileId;
                            salesQtyRelated = calcLineAvailQty_RU(inventTable, inventDim, tmpFrmVirtual.Qty);
                            if (salesQtyRelated)
                            {
                                inventDim = InventDim::findOrCreate(inventDim);
                                createSalesLine_RU(salesQtyRelated, inventDim.InventDimId);
                                tmpFrmVirtual.Qty -= salesQtyRelated;
                            }
                            if (! tmpFrmVirtual.Qty)
                            {
                                break;
                            }
                        }
                    }
                }

                if (salesQty + tmpFrmVirtual.Qty > 0)
                {
                    if (inventProfile.InventProfileId)
                    {
                        inventDim.InventProfileId_RU = inventProfile.InventProfileId;
                        inventDim = InventDim::findOrCreate(inventDim);
                        createSalesLine_RU(salesQty + tmpFrmVirtual.Qty, inventDim.InventDimId);
                    }
                    else
                    {
                        checkFailed("@GLS113719");
                    }
                }
            }
            else
            {
                createSalesLine_RU(tmpFrmVirtual.Qty, tmpFrmVirtual.InventDimId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromTmpFrmVirtualDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to create lines based on the <c>TmpFrmVirtual</c> records.
    /// </summary>
    /// <param name = "_contract">A <c>SalesLineCreateFromTmpFrmVirtualContract</c> object.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> to provide the result if the lines were created; respond with true if the lines were created.</param>
    static delegate void createLinesFromTmpFrmVirtualDelegate(SalesLineCreateFromTmpFrmVirtualContract _contract, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    public static void createLinesFromTmpFrmVirtual(SalesLineCreateFromTmpFrmVirtualContract _contract)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        SalesLine::createLinesFromTmpFrmVirtualDelegate(_contract, result);

        if (result && result.result() == true)
        {
            return;
        }
       
        SalesTable              salesTable = _contract.parmSalesTable();
        SMAServiceOrderTable    smaServiceOrderTable = _contract.parmSMAServiceOrderTable();
        ListEnumerator          tmpFrmVirtualEnumerator = List::create(_contract.parmTmpFrmVirtualPacked()).getEnumerator();
        boolean                 doSearchForAgreementLine = (salesTable.MatchingAgreement != 0);
        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        while (tmpFrmVirtualEnumerator.moveNext())
        {
            TmpFrmVirtual tmpFrmVirtual = tmpFrmVirtualEnumerator.current();
            SalesLine               salesLine;
            salesLine.clear();
            salesLine.ProjId            = salesTable.ProjId;
            salesLine.SalesType         = salesTable.SalesType;
            salesLine.initValue();
            salesLine.SalesId           = salesTable.SalesId;
            salesLine.initializeFromTmpFrmVirtual(tmpFrmVirtual);

            if (isKittingEnabled)
            {
                salesLine.ItemBOMId = salesLine.kittingKitIdForItemAndInventDim(salesLine.ItemBOMId);
            }

            SalesLineType salesLineType;
            salesLineType = salesLine.type();
            salesLineType.setStockedProduct();
            salesLine.QtyOrdered = salesLine.calcQtyOrdered(salesLine.SalesQty);

            if (!salesLine)
            {
                salesLine.createAlternativeItem(salesLine.inventDim(), salesLine);
            }

            SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
            salesLineCreateLineParameters.validation                  = true;
            salesLineCreateLineParameters.initFromSalesOrderTable     = true;
            salesLineCreateLineParameters.initFromItemOrCategory      = true;
            salesLineCreateLineParameters.calcInventQty               = true;
            salesLineCreateLineParameters.searchMarkup                = true;
            salesLineCreateLineParameters.searchPrice                 = true;
            salesLineCreateLineParameters.checkReservation            = salesTable.Reservation == ItemReservation::Automatic;
            salesLineCreateLineParameters.skipCreditLimitCheck        = true;
            salesLineCreateLineParameters.ignoreSalesTableInventDim   = false;
            salesLineCreateLineParameters.setLineNum                  = true;
            salesLineCreateLineParameters.searchAgreementLine         = doSearchForAgreementLine;
            salesLineCreateLineParameters.smaServiceOrderTable        = smaServiceOrderTable;
            salesLineCreateLineParameters.catalogFromTmpFrmVirtual    = tmpFrmVirtual.Catalog;

            if (isKittingEnabled)
            {
                salesLine.kittingSetKitPrice_delegate(salesLine);
            }

            SalesLine::writeLineFromTmpFrmVirtual(salesLine, salesTable, tmpFrmVirtual, salesLineCreateLineParameters);
        }

        salesTable.reread();

        salesTable.selectForUpdate(true);

        if (salesTable.setEstimate())
        {
            salesTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initilizes sales order line based on <c>TmpFrmVirtual</c> table.
    /// </summary>
    /// <param name = "_tmpFrmVirtual">A <c>TmpFrmVirtual</c> table buffer.</param>
    protected void initializeFromTmpFrmVirtual(TmpFrmVirtual _tmpFrmVirtual)
    {
        this.ItemId            = _tmpFrmVirtual.ItemId;
        this.SalesQty          = _tmpFrmVirtual.Qty;
        this.PdsCWQty          = _tmpFrmVirtual.PdsCWQty;
        this.setInventDimId(_tmpFrmVirtual.InventDimId);
        this.initRetailVariantId(this.inventDim());

        // When add lines for retail sales order, should skip price calculation.
        if (RetailPricingKillSwitch::skipOrderCalculationInBulkCreationV2() && this.salesTable().isRetailSale())
        {
            this.SkipPriceDiscCalcInBulkCreation = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLineFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a <c>SalesLine</c> based on the <c>TmpFrmVirtual</c> record.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record that was initialized from the <c>TmpFrmVirtual</c> record.</param>
    /// <param name = "_salesTable">A <c>SalesTable</c> record for which the sales lines are being created or updated.</param>
    /// <param name = "_tmpFrmVirtual">The <c>TmpFrmVirtual</c> record.</param>
    /// <param name = "_salesLineCreateLineParameters">An instance of the <c>SalesLineCreateLineParameters</c>.</param>
    [Replaceable]
    protected static void writeLineFromTmpFrmVirtual(SalesLine _salesLine, SalesTable _salesTable, TmpFrmVirtual _tmpFrmVirtual, SalesLineCreateLineParameters _salesLineCreateLineParameters)
    {
        _salesLine.createLineFromParameters(_salesLineCreateLineParameters);

        InventUpdateOnhandGlobal::instance().inventUpdateOnhand().insertInventSumLogTTS();

        SalesLine::setConfirmedDatesUsingUIStrategy(_salesLine, _salesTable, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemRequirementFromPOLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesLine</c> record of type item requirement.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record to base the item requirement upon.
    /// </param>
    /// <returns>
    /// The <c>SalesLine</c> record.
    /// </returns>
    public static SalesLine createItemRequirementFromPOLine(PurchLine _purchLine)
    {
        ProjTable                       projTable;
        InventTableModule               inventTableModule;

        SalesTableForm_ProjectSalesItem salesTableForm;
        SalesLine                       salesLine;

        inventTableModule = InventTableModule::find(_purchLine.ItemId, ModuleInventPurchSales::Sales);
        projTable = _purchLine.projTable();

        salesTableForm = SalesTableForm::construct(SalesTableFormId::ProjectSalesItem, projTable);

        salesLine.clear();
        salesLine.SalesType = SalesType::ItemReq;
        
        if(ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
        {
            salesLine.ProjFundingSource = projTable.getProjectDefaultInvoiceAccount(false);

            salesTableForm.salesLine_initValue(salesLine);

            salesTableForm.salesLine_Create(salesLine);
        }
        else
        {
            salesTableForm.salesLine_initValue(salesLine);

            salesLine.initFromProjTable(projTable);
        
            salesTableForm.salesLine_Create(salesLine);
        
            salesTableForm.resetSalesLine(salesLine);
        }

        salesLine.TaxGroup = projTable.TaxGroupId ? projTable.TaxGroupId : salesLine.TaxGroup;

        salesLine.ItemId    = _purchLine.ItemId;
        salesLine.setInventDimId(_purchLine.InventDimId);

        salesLine.SalesUnit             = inventTableModule.UnitId;
        salesLine.QtyOrdered            = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                salesLine.InventDimId,
                                                                                                                _purchLine.PurchQty,
                                                                                                                _purchLine.PurchUnit,
                                                                                                                salesLine.SalesUnit,
                                                                                                                NoYes::Yes);
        salesLine.SalesQty              = salesLine.QtyOrdered;

        salesLine.itemIdChanged();

        salesLine.ProjCategoryId        = _purchLine.ProjCategoryId;
        salesLine.OverDeliveryPct       = _purchLine.OverDeliveryPct;

        salesLine.itemIdChanged();

        salesLine.OverDeliveryPct       = _purchLine.OverDeliveryPct;

        if (_purchLine.ActivityNumber)
        {
            salesLine.ActivityNumber = _purchLine.ActivityNumber;
        }
        if (_purchLine.ProjLinePropertyId)
        {
            salesLine.ProjLinePropertyId = _purchLine.ProjLinePropertyId;
        }

        salesLine.DefaultDimension = salesLine.copyDimension(_purchLine.DefaultDimension);

        salesLine.InventRefId           = _purchLine.PurchId;
        salesLine.InventRefTransId      = _purchLine.InventTransId;
        salesLine.InventRefType         = InventRefType::Purch;

        if (_purchLine.PurchQty)
        {
            salesLine.CostPrice = _purchLine.getPurchPriceInSalesCurrencyPerSalesUnit(salesLine);
        }

        // Set return lot ID on return sales order to track cost of return order correctly.
        if (_purchLine.PurchQty < 0 && _purchLine.isStocked() && !ProjReturnOrderCorrectionFlight::instance().isEnabled())
        {
            InventTransOrigin inventTransOrigin;
            InventTrans inventTrans;
            DirPartyRecId party = CustTable::find(salesLine.CustAccount).Party;

            // look for suitable return lot IDs based on the return order qty and assign it to return order line.
            while select InventTransId, ItemId, ItemInventDimId from inventTransOrigin
                group by InventTransId, ItemId, ItemInventDimId
                    where inventTransOrigin.ItemId == salesLine.ItemId
                        && inventTransOrigin.Party == party
            join sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.inventDimId == salesLine.InventDimId
                    && inventTrans.StatusIssue == StatusIssue::Sold
                    && inventTrans.StatusReceipt == StatusReceipt::None
                    && inventTrans.ReturnInventTransOrigin == 0
            {
                InventTableModule inventTableModuleLoc = InventTableModule::find(_purchLine.ItemId, ModuleInventPurchSales::Invent);

                PurchQty qty;

                if (_purchLine.PurchUnit != inventTableModuleLoc.UnitId && ProjPurchUnitToInventUnitConversionFlight::instance().isEnabled())
                {
                    qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTransOrigin.ItemId,
                                                                                                inventTransOrigin.ItemInventDimId,
                                                                                                _purchLine.PurchQty,
                                                                                                _purchLine.PurchUnit,
                                                                                                inventTableModuleLoc.UnitId,
                                                                                                NoYes::Yes);
                }
                else
                {
                    qty = _purchLine.PurchQty;
                }

                if (inventTrans.Qty <= qty)
                {
                    salesLine.InventTransIdReturn = inventTransOrigin.InventTransId;
                    break;
                }
            }
        }

        AxSalesLine::newSalesLine(salesLine);

        salesLine.LineNum = SalesLine::lastLineNum(salesLine.SalesId) + 1.0;

        salesTableForm.salesLine_Write(salesLine);

        salesLine.write();

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpFrmVirtual</Name>
				<Source><![CDATA[
    protected void initFromTmpFrmVirtual(
        SalesTable              _salesTable,
        TmpFrmVirtual           _tmpFrmVirtual,
        ModuleInventPurchSales  _moduleInventPurchSales)
    {
        this.SalesId = _salesTable.SalesId;
        this.ItemId = _tmpFrmVirtual.ItemId;

        // Set qtyOrdered field (used to check availability and
        // whether alternate should be used)
        this.QtyOrdered = _tmpFrmVirtual.Qty;

        // convert the quantity to the sales unit of measure
        if (_moduleInventPurchSales != ModuleInventPurchSales::Sales)
        {
            _tmpFrmVirtual.Qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_tmpFrmVirtual.ItemId,
                                                                                                       _tmpFrmVirtual.InventDimId,
                                                                                                       _tmpFrmVirtual.Qty,
                                                                                                       InventTableModule::find(_tmpFrmVirtual.ItemId,
                                                                                                                               _moduleInventPurchSales).UnitId,
                                                                                                       InventTableModule::find(_tmpFrmVirtual.ItemId,
                                                                                                                               ModuleInventPurchSales::Sales).UnitId,
                                                                                                       NoYes::Yes);
        }
        this.SalesQty = _tmpFrmVirtual.Qty;
        this.SalesUnit = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).UnitId;

        InventDim inventDim = InventDim::find(_tmpFrmVirtual.InventDimId);
        if (!inventDim.InventLocationId && !inventDim.InventSiteId)
        {
            inventDim.InventLocationId     = _salesTable.InventLocationId;
            inventDim.InventSiteId         = _salesTable.InventSiteId;
        }
        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates sales lines from passed in temporary table.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order record to add the sales lines to.
    /// </param>
    /// <param name="_tmpFrmVirtual">
    /// The temporary table containing the sales line information to add.
    /// </param>
    /// <param name="_moduleInventPurchSales">
    /// The unit of the quantity in the temporary table.
    /// </param>
    /// <returns>
    /// The updated temporary table.
    /// </returns>
    public static TmpFrmVirtual createSalesLine(
        SalesTable              _salesTable,
        TmpFrmVirtual           _tmpFrmVirtual,
        ModuleInventPurchSales  _moduleInventPurchSales)
    {
        SalesLine               salesLine;
        Set                     salesLineSet;
        SetEnumerator           setEnum;
        ItemId                  prevItemId;

        salesLineSet = new Set(Types::Record);
        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        // Process the records and put them in a map set.
        // Note that launching a form for upsell or optional supplemental items causes
        // the loop to terminate unexpectedly (i.e, if other records exist to fetch they
        // aren't retrieved).  Load them in a set and loop on the map set the while select.
        while select _tmpFrmVirtual
                where _tmpFrmVirtual.Qty
        {
            salesLine.clear();
            salesLine.ProjId = _salesTable.ProjId;
            salesLine.SalesType = _salesTable.SalesType;
            salesLine.initValue();

            // When create from item list for retail sales order, should skip price calculation.
            if (RetailPricingKillSwitch::skipOrderCalculationInBulkCreationV2() && _salesTable.isRetailSale())
            {
                salesLine.SkipPriceDiscCalcInBulkCreation = NoYes::Yes;
            }

            salesLine.initFromTmpFrmVirtual(_salesTable, _tmpFrmVirtual, _moduleInventPurchSales);

            if (isKittingEnabled)
            {
                salesLine.InventDimId = salesLine.kittingInitInventDim(salesLine.InventDimId);
                salesLine.ItemBOMId = salesLine.kittingKitIdForItemAndInventDim(salesLine.ItemBOMId);
            }

            if (!salesLine.RecId)
            {
                salesLine.createAlternativeItem(salesLine.inventDim(), salesLine);
            }

            salesLineSet.add(salesLine);

            _tmpFrmVirtual.delete();
        }

        setEnum = salesLineSet.getEnumerator();

        while (setEnum.moveNext())
        {
            try
            {
                ttsbegin;

                salesLine.clear();
                salesLine = setEnum.current();
                
                if (!salesLine.interCompanyIsBeingUpdated())
                {
                    InventMovement::ensureTransQtyIsAcceptableForBuffer(salesLine, salesLine.parmQuantityErrorCorrectionMethods());
                    salesLine.initSalesQty();
                }

                salesLine.createLine(
                    true,                                                       // validation
                    true,                                                       // initFromSalesTable
                    true,                                                       // initFromInventTableModule
                    true,                                                       // calcInventQty
                    true,                                                       // searchMarkup
                    true,                                                       // searchPrice
                    _salesTable.Reservation == ItemReservation::Automatic,      // checkReservation
                    false,                                                      // skipCreditLimitCheck
                    false,                                                      // ignoreSalesTableInventDim
                    true,                                                       // setLineNum
                    _salesTable.MatchingAgreement != 0);                        // searchAgreementLine

                
                if (SalesLineCTPDeliveryDateControlRecalculateFeature::instance().isEnabled()
                    && SalesParameters::find().DeliveryDateCTPCalculateOnAddLines)
                {
                    salesLine.recalculateSalesLineCTPDeliveryDate();
                }

                ttscommit;

                salesLine.updateSalesLineAfterCreate(prevItemId);

                if (isKittingEnabled)
                {
                    salesLine.kittingSetKitPrice_delegate(salesLine);
                }

                prevItemId = salesLine.ItemId;
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }
        }

        // Recalculate for the whole order after bulk creation scenario: create from item list.
        if (RetailPricingKillSwitch::skipOrderCalculationInBulkCreationV2() && _salesTable.isRetailSale())
        {
            RetailSalesOrderCalculator::setPricesDiscountsOnOrderOnServer(_salesTable.SalesId, _salesTable.retailSalesTable().TotalManualDiscountPercentage);
        }

        return _tmpFrmVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineAfterCreate</Name>
				<Source><![CDATA[
    public void updateSalesLineAfterCreate(ItemId _prevItemId)
    {
        // Prevent the upsell form from opening more than once for the same item.
        if (_prevItemId != this.ItemId
                    && MCRUpSellItem::existItem(this.ItemId))
        {
            TmpMCRUpSellOrderEntry::mcrJumpRef(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateSalesLineCTPDeliveryDate</Name>
				<Source><![CDATA[
    internal void recalculateSalesLineCTPDeliveryDate()
    {
        InventUpdateOnhandGlobal::instance().inventUpdateOnhand().insertInventSumLogTTS();
        SalesLine::setConfirmedDatesUsingUIStrategy(this, this.salesTable(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByItemId</Name>
				<Source><![CDATA[
    static boolean existByItemId(SalesId _salesId, ItemId _itemId, LineNum _lineNum = naReal())
    {
        if (!_salesId)
        {
            return false;
        }

        if (_lineNum == naReal())
        {
            return (select firstonly RecId from salesLine
                        index hint SalesLineIdx
                        where salesLine.SalesId == _salesId
                           && salesLine.ItemId == _itemId).RecId != 0;
        }

        return (select firstonly RecId from salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId == _salesId
                       && SalesLine.ItemId == _itemId
                       && salesLine.LineNum == _lineNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean  exist(SalesId   _salesId,
                          LineNum   _lineNum = naReal())
    {
        if (!_salesId)
        {
            return false;
        }

        if (_lineNum == naReal())
        {
            return (select firstonly RecId from salesLine
                        index hint SalesLineIdx
                        where salesLine.SalesId     == _salesId).RecId != 0;
        }

        return (select firstonly RecId from salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId  == _salesId
                    &&     salesLine.LineNum == _lineNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDifferentCurrency</Name>
				<Source><![CDATA[
    static boolean  existDifferentCurrency(SalesId   _salesId, CurrencyCode _currencyCode)
    {
        if (!_salesId || !_currencyCode)
        {
            return false;
        }

        return (select firstonly RecId from salesLine
                       index hint SalesLineIdx
                       where salesLine.SalesId      == _salesId
                       &&    salesLine.CurrencyCode != _currencyCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesLine find(SalesId   _salesId,
                                 LineNum   _lineNum     = 0,
                                 boolean   _update      = false)
    {
        SalesLine salesLine;

        if (_salesId)
        {
            if (_update)
            {
                salesLine.selectForUpdate(_update);
            }
            if (_lineNum)
            {
                select firstonly salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId  == _salesId
                    &&    salesLine.LineNum  == _lineNum;
            }
            else
            {
                select firstonly salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId == _salesId;
            }
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    static SalesLine findInventTransId(TradeInventTransId _transId,
                                       boolean            _update = false )
    {
        SalesLine salesLine;

        if (_transId)
        {
            if (_update)
            {
                salesLine.selectForUpdate(_update);
            }

            select firstonly salesLine
                index hint TransIdIdx
                where salesLine.InventTransId == _transId;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineCreationSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record in <c>SalesLine</c> table based on SalesId and LineCreationSequence
    /// </summary>
    /// <param name = "_salesId">Sales order number to retrieve the record for</param>
    /// <param name = "_lineCreationSequence">Line creation sequence number to retrieve the record for</param>
    /// <param name = "_update">A boolean value that indicates whether the record is selected for update or not; optional</param>
    /// <returns>The <c>SalesLine</c> record</returns>
    public static SalesLine findLineCreationSequence(SalesId                        _salesId,
                                                    SalesLineCreationSequenceNumber _lineCreationSequence,
                                                    boolean                         _update = false )
    {
        SalesLine salesLine;

        if (_salesId && _lineCreationSequence)
        {
            if (_update)
            {
                salesLine.selectForUpdate(_update);
            }

            select firstonly salesLine
                index hint SalesLineCreationSequenceIdx
                where salesLine.SalesId == _salesId
                    && salesLine.LineCreationSequenceNumber == _lineCreationSequence;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDateControlType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SalesDeliveryDateControlType getDeliveryDateControlType(SalesLine _salesLine)
    {
        return SalesCalcDeliveryDateControlTypeForcedToggle::instance().isEnabled() &&
            SalesCalcDeliveryDateControlTypeForcedContext::deliveryDateControlIsForced() ?
            SalesCalcDeliveryDateControlTypeForcedContext::getDeliveryDateControlTypeForced() :
            _salesLine.DeliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemIdInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesLine</c> table.
    /// </summary>
    /// <param name="salesId">
    /// A <c>SalesId</c> value.
    /// </param>
    /// <param name="itemId">
    /// An <c>ItemId</c> value.
    /// </param>
    /// <param name="inventDimId">
    /// An <c>InventDimId</c> value.
    /// </param>
    /// <param name="lineNum">
    /// A line number; optional.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesLine</c> table; otherwise, an empty record.
    /// </returns>
    static SalesLine findItemIdInventDimId(SalesId          salesId,
                                           ItemId           itemId,
                                           InventDimId      inventDimId,
                                           LineNum          lineNum = naReal(),
                                           boolean          update  = false)
    {
        SalesLine   salesLine;

        if (salesId)
        {
            salesLine.selectForUpdate(update);

            if (lineNum == naReal())
            {
                select firstonly salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId      == salesId &&
                          salesLine.ItemId       == itemId  &&
                          salesLine.InventDimId  == inventDimId;
            }
            else
            {
                select firstonly salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId      == salesId &&
                          salesLine.LineNum      == lineNum &&
                          salesLine.ItemId       == itemId  &&
                          salesLine.InventDimId  == inventDimId;
            }
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemIdVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesLine</c> table.
    /// </summary>
    /// <param name="salesId">
    /// A <c>SalesId</c> value.
    /// </param>
    /// <param name="itemId">
    /// An <c>ItemId</c> value.
    /// </param>
    /// <param name="variantId">
    /// A <c>RetailVariantId</c> value.
    /// </param>
    /// <param name="lineNum">
    /// A line number; optional.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesLine</c> table; otherwise, an empty record.
    /// </returns>
    static SalesLine findItemIdVariantId(SalesId          salesId,
                                         ItemId           itemId,
                                         RetailVariantId     variantId,
                                         LineNum          lineNum = naReal(),
                                         boolean          update  = false)
    {
        SalesLine   salesLine;

        if (salesId)
        {
            salesLine.selectForUpdate(update);

            if (lineNum == naReal())
            {
                select firstonly salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId      == salesId &&
                          salesLine.ItemId       == itemId  &&
                          salesLine.RetailVariantId == variantId;
            }
            else
            {
                select firstonly salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId      == salesId &&
                          salesLine.LineNum      == lineNum &&
                          salesLine.ItemId       == itemId  &&
                          salesLine.RetailVariantId == variantId;
            }
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SalesLine findRecId(RecId       _recId,
                               boolean     _update = false)
    {
        SalesLine salesLine;

        if (_recId)
        {
            if (_update)
            {
                salesLine.selectForUpdate(_update);
            }

            select salesLine
                where salesLine.RecId == _recId;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The record ID of the <c>SourceDocumentLine</c> table that is used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesLine</c> table; otherwise, an empty record.
    /// </returns>
    static SalesLine findSourceDocumentLine(
        SourceDocumentLineRefRecId _sourceDocumentLineRefRecId,
        boolean                    _forUpdate = false)
    {
        SalesLine salesLine;

        if (_sourceDocumentLineRefRecId)
        {
            salesLine.selectForUpdate(_forUpdate);

            select firstonly salesLine
                where salesLine.SourceDocumentLine  == _sourceDocumentLineRefRecId;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventQtyFromCWUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory quantity for an <c>PdsCWInventQty</c> based on inventory transactions.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> to find the inventory quantity for.
    /// </param>
    /// <param name="_cWquantity">
    /// The <c>PdsCWInventQty</c> to find the inventory quantity for.
    /// </param>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> buffer.
    /// </param>
    /// <param name="isReturn">
    /// Indicates whether the inventory quantity is found for an return order.
    /// </param>
    /// <returns>
    /// A <c>InventQty</c>.
    /// </returns>
    public static InventQty getInventQtyFromCWUnit(SalesLine      _salesLine,
                                                   PdsCWInventQty _cWquantity,
                                                   InventDim      _inventDim,
                                                   boolean        isReturn)
    {
        SalesLine salesLineCW;
        InventQty inventQty;

        if (isReturn)
        {
            salesLineCW = SalesLine::findInventTransId(_salesLine.InventTransIdReturn);
            _cWquantity = -_cWquantity;
        }
        else
        {
            salesLineCW = _salesLine;
        }

        if (salesLineCW)
        {
            PdsCatchWeightMovementQtyAdjustment movement = PdsCatchWeightMovementQtyAdjustment::newBuffer(salesLineCW);
            movement.parmInventDimCriteria(_inventDim);
            movement.parmInventDimParm(SalesLine::inventDimParmForCatchWeightMovementQuantityAdjustment(_salesLine.ItemId, _inventDim));
            inventQty = movement.returnOrderIssueTransactionQty(_cWquantity, salesLineCW.SalesUnit);
        }
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmForCatchWeightMovementQuantityAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the dimensions for a catch weight quantity adjustment movement for a given item.
    /// </summary>
    /// <param name = "_itemId">The ID for the item.</param>
    /// <param name = "_inventDim">The dimension values for the movement.</param>
    /// <returns>The dimensions.</returns>
    protected static InventDimParm inventDimParmForCatchWeightMovementQuantityAdjustment(ItemId _itemId, InventDim _inventDim)
    {
        #InventDimDevelop
        InventDimParm inventDimParm;

        inventDimParm.setActiveProductDim(EcoResProductDimGroupSetup::newItemId(_itemId));

        if (_inventDim.InventBatchId)
        {
            inventDimParm.InventBatchIdFlag  = NoYes::Yes;
        }
        if (_inventDim.InventSerialId)
        {
            inventDimParm.InventSerialIdFlag = NoYes::Yes;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLinePotencyPricingDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the potency pricing details of the sales line with the specified ID.
    /// </summary>
    /// <param name="_salesLineRecId">
    ///     An ID of a sales line.
    /// </param>
    /// <returns>
    ///    A <c>container</c> with:
    ///    <list type="bullet">
    ///       <item><description>The ID of the Pricing Calculation used.</description></item>
    ///       <item><description>The calculated line amount.</description></item>
    ///       <item><description>The calculated unit price.</description></item>
    ///    </list>.
    /// </returns>
    public static container getSalesLinePotencyPricingDetails(SalesLineRefRecId _salesLineRecId)
    {
        PDSCalculationId        calculationId           = '';
        PDSCalculatedLineAmount calculatedLineAmount    = 0;
        PDSCalculatedUnitPrice  calculatedUnitPrice     = 0;

        SalesLine salesLine = SalesLine::findRecId(_salesLineRecId);
        if (#PDSPotencyEnabled && salesLine.ItemId)
        {
            calculationId           = salesLine.pdsCalculationId();
            calculatedLineAmount    = salesLine.pdsCalculatedLineAmount();
            calculatedUnitPrice     = salesLine.pdsCalculatedUnitPrice();
        }
        return [calculationId, calculatedLineAmount, calculatedUnitPrice];
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestSalesStatus</Name>
				<Source><![CDATA[
    static SalesStatus highestSalesStatus(SalesId _salesId)
    {
        SalesLine               salesLine;
        Set                     salesOrderStatusesSet = new Set(Types::Enum);
        SalesStatusOrderedList  salesStatusOrderedList = SalesStatusOrderedList::newFromOrder(SortOrder::Descending);

        while select SalesStatus from salesLine
            group by SalesStatus
            where salesLine.SalesId == _salesId
                && salesLine.SalesStatus != SalesStatus::None
        {
            salesOrderStatusesSet.add(salesLine.SalesStatus);
        }

        ListEnumerator salesStatusHighToLowEnumerator = salesStatusOrderedList.getEnumerator();
        while (salesStatusHighToLowEnumerator.moveNext())
        {
            if (salesOrderStatusesSet.in(salesStatusHighToLowEnumerator.current()))
            {
                return salesStatusHighToLowEnumerator.current();
            }
        }

        return SalesStatus::Backorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReleasedDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> table buffer based on a distinct product.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that is used to initialize the sales record.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price should be reset; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesLine</c> record.
    /// </returns>
    /// <remarks>
    /// If all product dimensions are not specified on the sales line no initialization will happen.
    /// </remarks>
    private void initFromReleasedDistinctProduct(InventTable _inventTable, boolean _resetPrice, AgreementHeaderRecId _matchingAgreement, boolean _performVariantValidation)
    {
        using(var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().initFromReleasedDistinctProduct(this))
        {
            SalesLineType	salesLineType;

            salesLineType = this.type();
            salesLineType.initFromInventTable(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxExist</Name>
				<Source><![CDATA[
    static boolean isTaxExist(TradeInventTransId _inventTransId, TaxCode _taxCode)
    {
        SalesLine       salesLineloc;
        TaxOnItem       taxOnItem;

        if (_inventTransId && _taxCode)
        {
            select firstonly RecId from taxOnItem
                where taxOnItem.TaxCode == _taxCode
                exists join salesLineloc
                    where salesLineloc.InventTransId == _inventTransId
                       && salesLineloc.TaxItemGroup == taxOnItem.TaxItemGroup;
        }
        return taxOnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefInventTransIdSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a sales order form by using jump reference.
    /// </summary>
    /// <param name="_inventTransId">
    /// A <c>InventTransId</c> value that specifies a sales order line of the sales order to open.
    /// </param>
    public static void jumpRefInventTransIdSalesOrder(InventTransId _inventTransId)
    {
        Args args = new Args();

        args.record(SalesTable::find(SalesLine::findInventTransId(_inventTransId).SalesId));

        new MenuFunction(menuitemDisplayStr(SalesTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDeliveryScheduleLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last line number that is used by the delivery lines linked to the specified order
    /// line.
    /// </summary>
    /// <param name="_orderLine">
    /// The order line of the delivery for which to schedule to find the maximum line number.
    /// </param>
    /// <returns>
    /// The maximum line number of the delivery lines that are linked to the specified order line or zero
    /// when no such line exists.
    /// </returns>
    /// <remarks>
    /// This method is used to guarantee that the delivery lines will not be interlaced with the order
    /// lines.
    /// </remarks>
    static LineNum lastDeliveryScheduleLineNum(TradeInventTransId _orderLine)
    {
        SalesLine               salesLine;
        SalesDeliverySchedule   salesDeliverySchedule;

        select maxof(LineNum) from salesLine
            exists join salesDeliverySchedule
                where salesDeliverySchedule.OrderLine    == _orderLine
                   && salesDeliverySchedule.DeliveryLine == salesLine.InventTransId;

        return salesLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum  lastLineNum(SalesId _salesId)
    {
        return (select maxof(LineNum) from salesLine
                    index hint SalesLineIdx
                    where salesLine.SalesId == _salesId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last packing slip ID.
    /// </summary>
    /// <returns>The last packing slip ID.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    display PackingSlipId lastPackingSlip()
    {
        CustPackingSlipTrans custPackingSlipTrans;
        return (select firstfast PackingSlipId from custPackingSlipTrans
                    order by DeliveryDate desc, CreatedDateTime desc, PackingSlipId desc
                    where custPackingSlipTrans.InventTransId == this.InventTransId).PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineCreationSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last line creation sequence number.
    /// </summary>
    /// <param name="_salesId">The sales Id of the sales order to find the last line creation sequence number.</param>
    /// <returns>Last line creation sequence number</returns>
    static SalesLineCreationSequenceNumber lastLineCreationSequenceNumber(SalesId _salesId)
    {
        return (select maxof(LineCreationSequenceNumber) from salesLine
                    where salesLine.SalesId == _salesId).LineCreationSequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCalcContinuityLineTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates line tax.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line record.
    /// </param>
    /// <returns>
    ///     The continuity line tax amount.
    /// </returns>
    public static TaxAmountCur mcrCalcContinuityLineTax(SalesLine _salesLine)
    {
        MCRSalesTotals_OnlyLine mcrSalesTotals_OnlyLine;
        mcrSalesTotals_OnlyLine = new MCRSalesTotals_OnlyLine(_salesLine);
        mcrSalesTotals_OnlyLine.prepareTotalAmountCalculation();

        return(mcrSalesTotals_OnlyLine.totalTaxAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExistOpenReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for open return lines.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID.
    /// </param>
    /// <returns>
    /// true if return lines exist; otherwise false.
    /// </returns>
    public static boolean mcrExistOpenReturnLine(InventTransId _inventTransId)
    {
        SalesLine       salesLineReturn;
        if (_inventTransId)
        {
            select firstonly RecId from salesLineReturn
                where salesLineReturn.InventTransIdReturn == _inventTransId
                   && salesLineReturn.ReturnStatus        == ReturnStatusLine::Awaiting;
        }

        return (salesLineReturn.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindReturnLineForExchange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>SalesLine</c> record that is being returned for exchange.
    /// </summary>
    /// <param name="_exchangeInventTransId">
    /// The <c>InventTransId</c> associated with the sales order.
    /// </param>
    /// <param name="_update">
    /// A Boolean that determines whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>SalesLine</c> record marked for return and exchange.
    /// </returns>
    public static SalesLine mcrFindReturnLineForExchange(InventTransId _exchangeInventTransId,
                                                 boolean       _update = false )
    {
        SalesLine           salesLineReturn;
        MCRSalesLine        mcrSalesLine;

        if (_exchangeInventTransId)
        {
            salesLineReturn.selectForUpdate(_update);

            select firstonly salesLineReturn
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == salesLineReturn.RecId
                    && mcrSalesLine.ExchangeInventRefTransId == _exchangeInventTransId;
        }

        return salesLineReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInvoiceShipToChildExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if any invoiced lines exist for a
    ///     given multiple ship to parent so that we can lock down
    ///     fields that may affect the price.
    /// </summary>
    /// <param name="_parentLotId">
    /// The parent inventory transaction ID.
    /// </param>
    /// <returns>
    /// true if the record does not exist; otherwise, false.
    /// </returns>
    public static boolean mcrInvoiceShipToChildExists(InventTransId _parentLotId)
    {
        SalesLine           invChildShipToLine;
        MCRSalesLine        mcrSalesLine;

        if (_parentLotId)
        {
            select firstonly RecId from invChildShipToLine
                where invChildShipToLine.LineDeliveryType == LineDeliveryType::DeliveryLine
                    && invChildShipToLine.SalesStatus == SalesStatus::Invoiced
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == invChildShipToLine.RecId
                    && mcrSalesLine.ParentLotId == _parentLotId;
        }

        return invChildShipToLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total weight.
    /// </summary>
    /// <param name="_salesId">
    /// The sales Id of the sales order to get the total weight.
    /// </param>
    /// <returns>
    /// The total weight.
    /// </returns>
    public static Weight mcrTotalWeight(SalesId _salesId)
    {
        InventTable     inventTable;
        SalesLine       salesLine;
        Weight          totalWeight;

        while select QtyOrdered from salesLine
            where salesLine.SalesId == _salesId
           join NetWeight from inventTable
           where inventTable.ItemId == salesLine.ItemId
        {
            totalWeight += salesLine.QtyOrdered * inventTable.NetWeight;
        }
        return totalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyExpectedRetQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the expected return quantity according to the unit setup.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales order line that is updated.
    /// </param>
    /// <param name="_inventDim">
    /// The Inventory dimension for the updated sales line.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the sales line prices and discounts should be read again
    /// according to the new quantity.
    /// </param>
    static void modifyExpectedRetQty(SalesLine    _salesLine,
                                     InventDim    _inventDim,
                                     boolean      _resetPrice = true)
    {
        Qty     transQty = _salesLine.ExpectedRetQty;
        SalesTable salesTable;

        transQty = decRound(transQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(
            UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.SalesUnit)));

        if (transQty != _salesLine.ExpectedRetQty)
        {
            _salesLine.ExpectedRetQty = transQty;
        }

        if (_resetPrice)
        {
            salesTable = SalesTable::find(_salesLine.SalesId);
            if (salesTable.SalesType != SalesType::ReturnItem
                || !salesTable.mcrIsCallCenter())
            {
                _salesLine.salesPurchLineInterface().resetPriceAgreement();
                _salesLine.setPriceDisc(_inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>SalesLine</c> table buffer based on changed sales quantity.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> table buffer.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that specifies whether to reset price and discounts; optional.
    /// </param>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed.
    /// </param>
    public static void modifySalesQty(SalesLine    _salesLine,
                               InventDim    _inventDim,
                               boolean      _resetPrice = true,
                               boolean      _uiEnabled = true)
    {
        SalesReceiptDateRequested   receiptDateRequestedOrig  = _salesLine.ReceiptDateRequested;
        SalesReceiptDateConfirmed   receiptDateConfirmedOrig  = _salesLine.ReceiptDateConfirmed;
        SalesShippingDateRequested  shippingDateRequestedOrig = _salesLine.ShippingDateRequested;
        SalesShippingDateConfirmed  shippingDateConfirmedOrig = _salesLine.ShippingDateConfirmed;

        SalesInstrumentationLogger instrumentationLogger = SalesLine::instrumentationLogger();
        using (var activityContext = instrumentationLogger.salesLineUpdateActivities().updateSalesQuantityFromSalesLine(_salesLine))
        {
            if (!_salesLine.interCompanyIsBeingUpdated())
            {
                if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_salesLine.ItemId, _salesLine.inventDim()))
                {
                    _salesLine.initSalesQty();
                    InventMovement::ensureTransQtyIsAcceptableForBuffer(_salesLine, _salesLine.parmQuantityErrorCorrectionMethods());
                }

                if (_salesLine.LineDeliveryType == LineDeliveryType::DeliveryLine
                || !_resetPrice) //we should recalculate amount even though we do not reset price
                {
                    _salesLine.LineAmount = _salesLine.calcLineAmountForced();
                }
                else if (_resetPrice
                    &&   EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_salesLine.ItemId, _inventDim))
                {
                    SalesTable salesTable = _salesLine.salesTable();
                    boolean isCallCenterOrder = salesTable.mcrIsCallCenter();
                    if (!isCallCenterOrder
                    || !_salesLine.mcrSalesLinePriceOverride().PriceOverride)
                    {
                        // GEEU
                        if (!_salesLine.CreditNoteInternalRef_PL)
                        {
                            _salesLine.salesPurchLineInterface().resetPriceAgreement();
                        }
                    }

                    boolean skipCaculationForCallCenterOrder = isCallCenterOrder
                        && salesTable.SalesType == SalesType::ReturnItem;
                    if (skipCaculationForCallCenterOrder)
                    {
                        FieldId modifiedFieldId = RetailPricingCacheManager::removeCachedSalesLineModifySalesQtyFieldId(
                            _salesLine.SalesId, _salesLine.LineNum);
                        skipCaculationForCallCenterOrder = skipCaculationForCallCenterOrder
                            && (modifiedFieldId == 0);
                    }

                    // do not recalculate price for call center returns and it is qty which changes.
                    if (!skipCaculationForCallCenterOrder)
                    {
                        _salesLine.setPriceDisc(_inventDim);
                    }
                }

                if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_salesLine.ItemId, _inventDim))
                {
                    //  _salesLine.initSalesQty();
                    _salesLine.calcPackingUnitQty(_inventDim);
                    InventMovement::bufferSetTransQtyUnit(_salesLine);

                    _salesLine.setInventDeliverNow();
                }

                if (_salesLine.RecId != 0
                    && (_salesLine.ReceiptDateRequested != receiptDateRequestedOrig
                        || _salesLine.ReceiptDateConfirmed != receiptDateConfirmedOrig
                        || _salesLine.ShippingDateRequested != shippingDateRequestedOrig
                        || _salesLine.ShippingDateConfirmed != shippingDateConfirmedOrig))
                {
                    System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                    sw.Reset();
                    sw.Start();


                    if (_uiEnabled
                        && (!_salesLine.shouldUpdateDeliveryDatesOnQtyModified()
                            || Box::yesNo(isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl))? "@SYS88260": "@SYS344846",DialogButton::Yes) == DialogButton::No))
                    {
                        sw.Stop();
                        _salesLine.ReceiptDateRequested  = receiptDateRequestedOrig;
                        _salesLine.ReceiptDateConfirmed  = receiptDateConfirmedOrig;
                        _salesLine.ShippingDateRequested = shippingDateRequestedOrig;
                        _salesLine.ShippingDateConfirmed = shippingDateConfirmedOrig;

                        InterCompanyOrderSyncContext context = InterCompanyOrderSyncContext::instance();
                        if (   context
                            && context.parmInterCompanyOrderSyncParameter()
                            && _salesLine.DeliveryType == TradeLineDlvType::DropShip)
                        {
                            context.parmInterCompanyOrderSyncParameter().keepOrigShipAndReceiptDate = true;
                        }
                    }
                    else
                    {
                        sw.Stop();
                    }

                    activityContext.addCustomProperty(SalesLineUpdateInstrumentationActivities::DialogInteractionDuration, any2Str(sw.get_ElapsedMilliseconds()));
                }
            }
            else
            {
                _salesLine.SalesQty = _salesLine.orig().SalesQty;
            }

            _salesLine.setPdsSameLot();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateDeliveryDatesOnQtyModified</Name>
				<Source><![CDATA[
    private boolean shouldUpdateDeliveryDatesOnQtyModified()
    {
        return !this.isDeliveryDateControlTypeMpsCTP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWFullVisItemStdQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the full visibility catch weight quantity picked.
    /// </summary>
    /// <param name="_inventMovement">
    /// An <c>InventMovement</c> related to the salesLine.
    /// </param>
    /// <returns>
    /// Returns the full visibility catch weight quantity picked.
    /// </returns>
    public static InventQty pdsCWFullVisItemStdQty(
        InventMovement _inventMovement)
    {
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransIdNoChildType(_inventMovement.inventTransOriginId());
        return - inventTransIdSum.onOrder() + inventTransIdSum.reserveOrdered() + inventTransIdSum.reservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCCheckRestrictedForAllSalesLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the regulatory compliance of all sales lines in the current sales order.
    /// </summary>
    /// <param name="_salesTable">Sales order to check.</param>
    /// <returns>true if and lines on the _salestable are restricted.</returns>
    public static boolean pdsMRCCheckRestrictedForAllSalesLines(
        SalesTable _salesTable)
    {
        SalesLine       salesLine;
        SalesLineType   salesLineType;
        boolean         isRestricted = false;

        while select salesLine
            where salesLine.SalesId == _salesTable.SalesId
        {
            salesLineType = salesLine.type();
            if (salesLineType.pdsMRCCheckRestricted())
            {
                isRestricted = true;
                break;
            }
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalcRemainQtyForReturnCustInvoiceTrans_BR</Name>
				<Source><![CDATA[
    private static boolean shouldCalcRemainQtyForReturnCustInvoiceTrans_BR(SalesLineRemainReturnLotQtyAllCreditNoteContext_BR _context)
    {
        if (SalesCopyingSalesLineQuantityForReturnCustInvoiceTrans_BRFlight::instance().isEnabled()
            && _context 
            && _context.parmCustInvoiceTransRecId()
            && BrazilParameters::isEnabled())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRemainReturnLotQtyAllCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the returned quantities for a sales order line.
    /// </summary>
    /// <param name="_inventTransId">
    /// A <c>TradeInventTrans</c> object that identifies a sales order line.
    /// </param>
    /// <param name="_projId">
    /// A project ID; optional.
    /// </param>
    /// <param name="_salesUnit">
    /// A sales unit used for return quantity.
    /// </param>
    /// <returns>
    /// A container that contains the <c>SalesOrderedQty</c> and <c>PdsCWQty</c> type specifying the sum of
    /// returned items.
    /// </returns>
    /// <remarks>
    /// Both sales return orders and sales credit notes are included in the calculation.
    /// </remarks>
    public static container pdsRemainReturnLotQtyAllCreditNote(
        InventTransId   _inventTransId,
        ProjId          _projId = SalesLine::findInventTransId(_inventTransId).ProjId,
        SalesUnit       _salesUnit = CustInvoiceTrans::findInventTransid(_inventTransId).SalesUnit)
    {
        if (!_inventTransId)
        {
            return [0, 0];
        }

        // Finds CreditNotes & ReturnOrders lines with no inventory transactions.
        SalesLine                   salesLine;
        InventTrans                 inventTransSales, inventTransReturn;
        InventTransOriginId         inventTransOriginId         = InventTransOrigin::findByInventTransId(_inventTransId).RecId;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        SalesQty                    retQty;
        PdsCWInventQty              cwRetQty;
		
		if (!inventTransOriginId && SalesLinePDSRemainReturnLotQtyNoZeroInventIdFlight::instance().isEnabled())
        {
            return [0, 0];
        }
		
        SalesLineRemainReturnLotQtyAllCreditNoteContext_BR context = SalesLineRemainReturnLotQtyAllCreditNoteContext_BR::current();
        boolean shouldCalcRemainQtyForReturnCustInvoiceTrans_BR = SalesLine::shouldCalcRemainQtyForReturnCustInvoiceTrans_BR(context);

        if (SalesLinePDSRemainReturnLotQtyQueryFlight::instance().isEnabled())
        {
            if (SalesLinePDSQueryAllowIndexHintFlight::instance().isEnabled())
            {
                salesLine.allowIndexHint(true);
            }

            if (shouldCalcRemainQtyForReturnCustInvoiceTrans_BR)
            {

                while select SalesQty, ExpectedRetQty, PdsCWQty, PdsCWExpectedRetQty, SalesStatus, SalesType
                    from salesLine
                    index hint InventTransIdReturnIdx
                    where salesLine.InventTransIdReturn == _inventTransId
                        && salesLine.ProjId == _projId
                        && salesLine.RefReturnInvoiceTrans_W == context.parmCustInvoiceTransRecId()
                    notexists join inventTransOriginSalesLine
                        where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                            && inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                        exists join inventTransSales
                        where   inventTransSales.InventTransOrigin          == inventTransOriginSalesLine.InventTransOrigin
                        &&  inventTransSales.ReturnInventTransOrigin    == inventTransOriginId
                {
                    if (salesLine.SalesStatus != SalesStatus::Canceled
                    && (salesLine.SalesType == SalesType::ReturnItem
                        || salesLine.SalesType == SalesType::Sales))
                    {
                        retQty += salesLine.SalesQty < 0 ? abs(salesLine.SalesQty) : abs(salesLine.ExpectedRetQty);
                        //PI start
                        cwRetQty += salesLine.PdsCWQty && salesLine.SalesQty < 0 ? abs(salesLine.PdsCWQty):abs(salesLine.PdsCWExpectedRetQty);
                        //PI end
                    }
                }
            }
            else
            {
                while select SalesQty, ExpectedRetQty, PdsCWQty, PdsCWExpectedRetQty, SalesStatus, SalesType
                    from salesLine
                    index hint InventTransIdReturnIdx
                    where salesLine.InventTransIdReturn == _inventTransId
                        && salesLine.ProjId == _projId
                    notexists join inventTransOriginSalesLine
                        where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                            && inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                        exists join inventTransSales
                        where   inventTransSales.InventTransOrigin          == inventTransOriginSalesLine.InventTransOrigin
                        &&  inventTransSales.ReturnInventTransOrigin    == inventTransOriginId
                {
                    if (salesLine.SalesStatus != SalesStatus::Canceled
                    && (salesLine.SalesType == SalesType::ReturnItem
                        || salesLine.SalesType == SalesType::Sales))
                    {
                        retQty += salesLine.SalesQty < 0 ? abs(salesLine.SalesQty) : abs(salesLine.ExpectedRetQty);
                        //PI start
                        cwRetQty += salesLine.PdsCWQty && salesLine.SalesQty < 0 ? abs(salesLine.PdsCWQty):abs(salesLine.PdsCWExpectedRetQty);
                        //PI end
                    }
                }
            }
        }
        else 
        {
            if (shouldCalcRemainQtyForReturnCustInvoiceTrans_BR)
            {
                while select DataAreaId, InventTransId, SalesQty, ExpectedRetQty, PdsCWQty, PdsCWExpectedRetQty, SalesStatus
                    from salesLine
                    where (salesLine.SalesType == SalesType::ReturnItem || salesLine.SalesType == SalesType::Sales)
                        && salesLine.InventTransIdReturn == _inventTransId
                        && salesLine.ProjId == _projId
                        && salesLine.RefReturnInvoiceTrans_W == context.parmCustInvoiceTransRecId()
                    notexists join inventTransOriginSalesLine
                        where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                            && inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                        exists join inventTransSales
                        where   inventTransSales.InventTransOrigin          == inventTransOriginSalesLine.InventTransOrigin
                            &&  inventTransSales.ReturnInventTransOrigin    == inventTransOriginId
                {
                    if (salesLine.SalesStatus != SalesStatus::Canceled)
                    {
                        retQty += salesLine.SalesQty < 0 ? abs(salesLine.SalesQty) : abs(salesLine.ExpectedRetQty);
                        //PI start
                        cwRetQty += salesLine.PdsCWQty && salesLine.SalesQty < 0 ? abs(salesLine.PdsCWQty):abs(salesLine.PdsCWExpectedRetQty);
                        //PI end
                    }
                }
            }
            else
            {
                while select DataAreaId, InventTransId, SalesQty, ExpectedRetQty, PdsCWQty, PdsCWExpectedRetQty, SalesStatus
                    from salesLine
                    where (salesLine.SalesType == SalesType::ReturnItem || salesLine.SalesType == SalesType::Sales)
                        && salesLine.InventTransIdReturn == _inventTransId
                        && salesLine.ProjId == _projId
                    notexists join inventTransOriginSalesLine
                        where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                            && inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                        exists join inventTransSales
                        where   inventTransSales.InventTransOrigin          == inventTransOriginSalesLine.InventTransOrigin
                            &&  inventTransSales.ReturnInventTransOrigin    == inventTransOriginId
                {
                    if (salesLine.SalesStatus != SalesStatus::Canceled)
                    {
                        retQty += salesLine.SalesQty < 0 ? abs(salesLine.SalesQty) : abs(salesLine.ExpectedRetQty);
                        //PI start
                        cwRetQty += salesLine.PdsCWQty && salesLine.SalesQty < 0 ? abs(salesLine.PdsCWQty):abs(salesLine.PdsCWExpectedRetQty);
                        //PI end
                    }
                }
            }
        }
        
        return SalesLine::pdsRemainReturnLotQtyAllInventTrans(inventTransOriginId, _salesUnit, retQty, cwRetQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRemainReturnLotQtyAllInventTrans</Name>
				<Source><![CDATA[
    private static container pdsRemainReturnLotQtyAllInventTrans(InventTransOriginId _inventTransOriginId,
        SalesUnit _salesUnit, SalesQty _retQty, PdsCWInventQty _cwRetQty)
    {
        //InventTrans related to both CreditNotes and ReturnOrders (with and without related salesLines).
        InventTrans                 inventTransSales, inventTransReturn;
        InventTable                 inventTable;
        InventDim                   inventDim;
        InventQty                   inventQty;
        Set                         recIdSet = new Set(Types::Int64);

        while select TableId from inventTransSales
            where   inventTransSales.InventTransOrigin          == _inventTransOriginId
                &&  inventTransSales.ReturnInventTransOrigin
            join Qty, RecId, ItemId, PdsCWQty, InventDimId
            from inventTransReturn
                where   inventTransReturn.InventTransOrigin     == inventTransSales.ReturnInventTransOrigin
                    &&  inventTransReturn.Qty                    >  0
                    &&  inventTransReturn.PackingSlipReturned   == NoYes::No
        {
            if (!recIdSet.in(inventTransReturn.RecId))
            {
                recIdSet.add(inventTransReturn.RecId);
                inventQty += abs(inventTransReturn.Qty);
                _cwRetQty += abs(inventTransReturn.PdsCWQty);
                if (!inventTable)
                {
                    inventTable = inventTransReturn.inventTable();
                    inventDim = inventTransReturn.inventDim();
                }
            }
        }

        if (inventQty)
        {
            _retQty += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                            inventDim.InventDimId,
                                                                                            inventQty,
                                                                                            inventTable.inventUnitId(),
                                                                                            _salesUnit,
                                                                                            NoYes::Yes);
        }

        return [_retQty, _cwRetQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyDeliveryToCreditNote_RU</Name>
				<Source><![CDATA[
    static InventQty qtyDeliveryToCreditNote_RU(InventTransId _inventTransId)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;

        select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId == _inventTransId
        join sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
               && inventTrans.StatusIssue           == StatusIssue::Sold
               && inventTrans.StatusReceipt         == StatusReceipt::None
               && inventTrans.PackingSlipReturned   == NoYes::No
               && inventTrans.InvoiceReturned       == NoYes::No;

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainReturnLotQtyAllCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the returned quantity for a sales order line.
    /// </summary>
    /// <param name="_inventTransId">
    /// A <c>TradeInventTrans</c> object that identifies a sales order line.
    /// </param>
    /// <returns>
    /// A <c>SalesOrderedQty</c> object that specifies the sum of returned items.
    /// </returns>
    /// <remarks>
    /// Both sales return orders and sales credit notes are included in the calculation.
    /// </remarks>
    public static SalesOrderedQty remainReturnLotQtyAllCreditNote(TradeInventTransId _inventTransId)
    {
        return conPeek(SalesLine::pdsRemainReturnLotQtyAllCreditNote(_inventTransId), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAxSalesLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the price discount policies.
    /// </summary>
    /// <param name="_axSalesLine">
    /// An <c>AxSalesLine</c> object that represents the order line that should have the policies reset.
    /// </param>
    /// <param name="_source">
    /// A <c>PriceDiscSystemSource</c> enumeration value that indicates the source of the policy.
    /// </param>
    /// <param name="_policySystem">
    /// A <c>PriceDiscPolicySystem</c> data type value that represents the record ID of a record in the <c>PriceDiscChangePolicy</c> table.
    /// </param>
    /// <param name="_policyManual">
    /// A <c>PriceDiscPolicyManual</c> data type value that represents the record ID of a record in the <c>PriceDiscChangePolicy</c> table.
    /// </param>
    public static void resetAxSalesLinePolicies(AxSalesLine _axSalesLine,
                                                PriceDiscSystemSource _source       = PriceDiscSystemSource::None,
                                                PriceDiscPolicySystem _policySystem = 0,
                                                PriceDiscPolicyManual _policyManual = 0)
    {
        _axSalesLine.parmSystemEntrySource(_source);
        _axSalesLine.parmSystemEntryChangePolicy(_policySystem);
        _axSalesLine.parmManualEntryChangepolicy(_policyManual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDatesUsingUIStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and updates the confirmed dates of a <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    /// <param name="_salesTable">
    /// A <c>SalesTable</c> record.
    /// </param>
    /// <param name="_updateSalesLineOnSuccess">
    /// Determines if update should be called on passed sales line
    /// in case the method succeeds.
    /// </param>
    /// <returns>
    /// true if the confirmed dates are set; otherwise, false.
    /// </returns>
    public static boolean setConfirmedDatesUsingUIStrategy(
        SalesLine   _salesLine,
        SalesTable  _salesTable = _salesLine.salesTable(),
        boolean     _updateSalesLineOnSuccess = false)
    {
        boolean res = _salesLine.type(_salesTable).setConfirmedDates(SalesConfirmDatesUIStrategy::construct());

        if (res && _updateSalesLineOnSuccess)
        {
            ttsbegin;
            _salesLine.update();
            ttscommit;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransDatesFromShippingDateConfirmed</Name>
				<Source><![CDATA[
    internal void updateReqTransDatesFromShippingDateConfirmed()
    {
        if (!this.ShippingDateConfirmed
            || !this.isDeliveryDateControlTypeMpsCTP())
        {
            return;
        }

        ReqPlanVersion dynamicPlanVersion = ReqPlanVersion::findActiveReqPlanIdDynamic();
        if (!dynamicPlanVersion)
        {
            return;
        }

        ReqPlanData reqPlanData = ReqPlanData::newReqPlanId(dynamicPlanVersion.ReqPlanId);
        ReqSetup setup = reqPlanData.newReqSetup(this.ItemId);
        
        ttsbegin;
        InventTransOrigin inventTransOrigin;
        ReqTrans ReqTrans;

        while select forupdate reqTrans
            where reqTrans.PlanVersion          == dynamicPlanVersion.RecId
                && reqTrans.RefId               == this.SalesId
                && reqTrans.RefType             == ReqRefType::Sales
                && reqTrans.ItemId              == this.ItemId
                && reqTrans.ReqDateDlvOrig      != this.ShippingDateConfirmed
                && reqTrans.FuturesDate         <= this.ShippingDateConfirmed
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == this.InventTransId
                    && inventTransOrigin.RecId == reqTrans.InventTransOrigin
        {
            reqTrans.ReqDateDlvOrig = this.ShippingDateConfirmed;
            reqTrans.ReqDate = this.calculateReqDateFromReqDateDlvOrig(reqPlanData, setup, reqTrans);
            reqTrans.FuturesDays = 0;
            reqTrans.FuturesTime = 0;
            reqTrans.FuturesMarked = NoYes::No;

            reqTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReqDateFromReqDateDlvOrig</Name>
				<Source><![CDATA[
    private ReqDate calculateReqDateFromReqDateDlvOrig(ReqPlanData _reqPlanData, ReqSetup _setup, ReqTrans _reqTrans)
    {
        ReqSetupDim setupDim = _reqPlanData.newReqSetupDim(_setup, _reqTrans.CovInventDimId);

        return _reqPlanData.schedReqDateIssue(_reqTrans.ReqDateDlvOrig, setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a return order line into two return order lines.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID of the original return order line.
    /// </param>
    /// <param name="_newQtyOrdered">
    /// The quantity for a new return order line.
    /// </param>
    /// <param name="_newCWQty">
    /// The catch-weight quantity for the new return order line.
    /// </param>
    /// <returns>
    /// The inventory transaction ID for a new return order line.
    /// </returns>
    /// <remarks>
    /// A split can only be done on a return order line.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The specified sales order line could not be found, or is not a return order.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An update conflict exception occurred and the action was not registered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An update conflict occurred.
    /// </exception>
    public static InventTransId splitReturnLine(TradeInventTransId _inventTransId, SalesQty _newQtyOrdered, PdsCWInventQty _newCWQty = 0)
    {

        SalesLineSplitReturnLineParameters salesLineSplitReturnLineParameters = SalesLineSplitReturnLineParameters::construct();
        salesLineSplitReturnLineParameters.origInventTransId    = _inventTransId;
        salesLineSplitReturnLineParameters.newQtyOrdered        = _newQtyOrdered;
        salesLineSplitReturnLineParameters.newCWQty             = _newCWQty;

        SalesLineSplitReturnLine salesLineSplitReturnLine = SalesLineSplitReturnLine::newFromSalesLineSplitReturnLineParameters(salesLineSplitReturnLineParameters);
        return salesLineSplitReturnLine.split();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLine_IN</Name>
				<Source><![CDATA[
    static void updateSalesLine_IN(SalesIdBase  _salesId,
                                   NoYesId      _custExportOrder)
    {
        SalesLine                       salesLineLoc;
        SalesLine_IN                    salesLine_IN;
        CustomsExportAssessableValue_IN customsExportAssessableValue;

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            if (salesLineLoc.hasIndirectTaxFieldChanged_IN())
            {
                salesLineLoc.markCurrentTaxDocumentTaxStatusDirty();
            }
        }
        // </GTE>

        while select forupdate salesLineLoc
            where salesLineLoc.SalesId == _salesId
        {
            salesLine_IN = salesLineLoc.salesLine_IN();

            ttsbegin;
            if (_custExportOrder == NoYes::Yes)
            {
                customsExportAssessableValue = CustomsExportAssessableValue_IN::findInventTransId(salesLineLoc.InventTransId);
                if (customsExportAssessableValue.RecId != 0)
                {
                    ttsbegin;
                    customsExportAssessableValue.selectForUpdate(true);
                    customsExportAssessableValue.Amount = salesLineLoc.LineAmount;
                    customsExportAssessableValue.Value  = CustomsExportAssessableValue_IN::getMarkupValue(salesLineLoc.TableId, salesLineLoc.RecId, salesLineLoc.InventTransId);
                    customsExportAssessableValue.update();
                    ttscommit;
                    salesLine_IN.AssessableValueTransactionCurrency = CustomsExportAssessableValue_IN::findInventTransId(salesLineLoc.InventTransId).invoiceAssessableValue();
                }
                else
                {
                    salesLine_IN.AssessableValueTransactionCurrency = salesLineLoc.LineAmount - CustomsExportAssessableValue_IN::getMarkupValue(salesLineLoc.TableId, salesLineLoc.RecId, salesLineLoc.InventTransId);
                }
            }
            else
            {
                salesLine_IN.AssessableValueTransactionCurrency = salesLineLoc.getMiscChargesAmount_IN();
            }

            salesLineLoc.packSalesLine_IN(salesLine_IN);
            salesLineLoc.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableWithExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update updateSalesTable method for extension.
    /// </summary>
    /// <param name = "_salesTable">The record of <c>SalesTable</c>.</param>
    /// <param name = "_saveRecord">True if the update is saved; otherwise, false.</param>
    protected void updateSalesTableWithExtension(SalesTable _salesTable, Boolean _saveRecord = false)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTable</Name>
				<Source><![CDATA[
    private void updateSalesTable(SalesTable _salesTable)
    {
        using(var nestedActivityContext = SalesLine::instrumentationLogger().salesOrderActivities().updateSalesTable(this))
        {
            if (this.isIntercompanyOrigin()
                && ((this.DeliveryType == TradeLineDlvType::None && _salesTable.InterCompanyDirectDelivery == NoYes::Yes)
                || (this.DeliveryType == TradeLineDlvType::DropShip && _salesTable.InterCompanyDirectDelivery == NoYes::No))
                && this.SkipUpdate == InterCompanySkipUpdate::No)
            {
                // The direct delivery flag in the header should be set to yes if there is at least one intercompany line marked as direct delivery
                // and to no if no intercompany lines remain as direct delivery
                _salesTable.updateDirectDeliveryFlagHeader(this.DeliveryType);
            }

            _salesTable.CovStatus = 0;
            _salesTable.SkipUpdate = InterCompanySkipUpdate::Both;

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                MCRSalesTable mcrSalesTableLocal = _salesTable.mcrSalesTable();
                MCRSalesLine mcrSalesLine = this.mcrSalesLine();
                // If all continuity order lines have been removed change the
                // MCRContinuityOrder property to no.
                if (mcrSalesLine.ContinuityScheduleId
                    && this.RecId
                    && !this.selectForUpdate())
                {
                    SalesLine continuitySalesLineCount;
                    MCRSalesLine mcrSalesLineCount;

                    select count(RecId) from continuitySalesLineCount
                        where continuitySalesLineCount.SalesId == this.SalesId
                        exists join mcrSalesLineCount
                            where mcrSalesLineCount.SalesLine == this.RecId
                                && mcrSalesLineCount.ContinuityScheduleId;

                    if (!continuitySalesLineCount.RecId && mcrSalesTableLocal.ContinuityOrder)
                    {
                        mcrSalesTableLocal.ContinuityOrder = NoYes::No;
                        _salesTable.mcrPackMCRSalesTable(mcrSalesTableLocal);
                    }
                }
                // Creating a continuity line via the AX class.
                else if (mcrSalesLine.ContinuityScheduleId && mcrSalesTableLocal.ContinuityOrder == NoYes::No)
                {
                    mcrSalesTableLocal.ContinuityOrder = NoYes::Yes;
                    _salesTable.mcrPackMCRSalesTable(mcrSalesTableLocal);
                }
            }

            // <GIN>
            this.updateSalesTableWithCustomsExportOrderIN(_salesTable, false);
            // </GIN>

            if (CustVendCreditInvoicingTable::useCreditInvoicingReporting())
            {
                SalesLine salesLineCount;

                select firstOnly RecId from salesLineCount
                    where salesLineCount.SalesId == this.SalesId;

                if (!salesLineCount.RecId)
                {
                    CustVendCreditInvoicingTable custVendCreditInvoicingTable;

                    delete_from custVendCreditInvoicingTable
                        where custVendCreditInvoicingTable.RefTableId == _salesTable.TableId
                            && custVendCreditInvoicingTable.RefRecId == _salesTable.RecId
                            && custVendCreditInvoicingTable.IsSalesPurchCopying == NoYes::Yes;
                }
            }

            this.updateSalesTableWithExtension(_salesTable, true);
            
            _salesTable.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPartOfProjInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales order line is a part of project invoice proposal.
    /// </summary>
    /// <returns>
    ///  true if the project invoice proposal exists; otherwise, false.
    /// </returns>
    public boolean isPartOfProjInvoiceProposal()
    {
        ProjProposalItem projProposalItem;
        boolean includedInProposal = false;

        if (this.ProjTransId)
        {
            select firstOnly RecId from projProposalItem
                where projProposalItem.SalesId == this.SalesId
                    && projProposalItem.ProjTransId == this.ProjTransId;

            if (projProposalItem.RecId)
            {
                includedInProposal = true;
            }
        }

        return includedInProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchLineCreatedFromThisSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines if the specified <c>PurchLine</c> record is created from this <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_purchLine">The <c>PurchLine</c> record.</param>
    /// <returns>true if the specified <c>PurchLine</c> record is created from this <c>SalesLine</c> record; otherwise, false.</returns>
    public boolean isPurchLineCreatedFromThisSalesLine(PurchLine _purchLine)
    {
        // Make sure that the PurchLine is referencing this SalesLine (which does not need to be true for marking)
        if (_purchLine && _purchLine.InventRefTransId == this.InventTransId)
        {
            // Make sure that the PurchTable record and the SalesTable are referenced (not true for marking)
            if (InterCompanyPurchSalesReference::find(this.SalesId, _purchLine.PurchId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for table fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    /// <param name="_userInput">
    /// Controls whether the fields are set by the user, for example via the form or an entity.
    /// </param>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed; optional.
    /// </param>
    public void modifyField(FieldId _fieldId, boolean _userInput = true, boolean _uiEnabled = true)
    {
        InventQty                   inventQty;
        CostAmount                  costAmount;
        DlvMode                     dlvMode;
        InventDim                   inventDim;
        InventDimParm               inventDimParm;

        switch (_fieldId)
        {
            case fieldNum(SalesLine, SalesCategory):
                // Clear all dimensions except site and location
                inventDim = this.inventDim();
                inventDimParm.setActiveSiteAndWarehouseDimensions();
                inventDim.clearNotSelectedDim(inventDimParm);
                this.setInventDimIdFromInventDim(inventDim);
                this.initFromItemOrCategory(this.ItemId, this.SalesCategory, this.Name);
                this.initName();
                this.setProjLinePropertyId();
                break;

            case fieldNum(SalesLine, SalesDeliverNow):
                this.pdsCWSalesDeliverNowConversion(false);
                this.setInventDeliverNow();
                break;

            case fieldNum(SalesLine, SalesPrice):
                if (_userInput)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }
                if (this.ReturnStatus != ReturnStatusLine::None)
                {
                    this.LineAmount = this.calcLineAmountForced(this.ExpectedRetQty);
                }
                else
                {
                    this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                }
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;
            case fieldNum(SalesLine, PdsCWInventDeliverNow):
                this.pdsCWSalesDeliverNowConversion(true);
                this.setInventDeliverNow();
                break;

            case fieldNum(SalesLine, ItemId):
                using (var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().modifyFieldItemId(this))
                {
                    if (PdsGlobal::pdsIsCWItem(this.ItemId))
                    {
                        this.pdsCWQtyConversion();
                        SalesLine::modifySalesQty(this,this.inventDim(), true, _uiEnabled);
                        this.pdsCWSalesDeliverNowConversion(true);
                        this.setInventDeliverNow();
                        if (this.ReturnStatus != ReturnStatusLine::None)
                        {
                            this.pdsCWExpRetQtyConversion();
                        }
                    }
                    else
                    {
                        this.PdsCWQty = 0;
                        this.PdsCWInventDeliverNow = 0;
                        this.PdsCWRemainInventFinancial = 0;
                        this.PdsCWRemainInventPhysical = 0;
                    }

                    if (TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
                    {
                        SalesTable salesTable = this.salesTable();
                        this.StatProcId = salesTable.StatProcId ? salesTable.StatProcId : InventTable::find(this.ItemId).IntrastatProcId_CZ;
                    }
                }
                break;

            case fieldNum(SalesLine, LinePercent):
                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, LineDisc):
                if (_userInput)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, LineAmount):
                if (_userInput)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                    if (this.isLineAmountModified())
                    {
                        this.lineAmountModified();
                    }
                }
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId, this.SalesQty, false);
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, SalesUnit):
                this.pdsCWQtyConversion();
                this.pdsCWSalesDeliverNowConversion(true);
                if (this.ReturnStatus != ReturnStatusLine::None)
                {
                    this.pdsCWExpRetQtyConversion();
                }
                this.salesUnitModified();
                break;

            case fieldNum(SalesLine, PriceUnit):
                if (_userInput)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }
                this.LineAmount = this.calcLineAmountInteraction(_fieldId);
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, PdsCWExpectedRetQty):
                this.pdsCWExpRetQtyConversion();
            //fall through
            case fieldNum(SalesLine, ExpectedRetQty):
                SalesLine::modifyExpectedRetQty(this, this.inventDim());
                if (this.ReturnStatus != ReturnStatusLine::None)
                {
                    this.LineAmount = this.calcLineAmount(this.ExpectedRetQty);

                    if (this.SalesQty)
                    {
                        this.SalesQty = this.ExpectedRetQty;
                        if (this.ReturnStatus == ReturnStatusLine::Awaiting && this.ReturnAllowReservation)
                        {
                            this.PdsCWQty = this.PdsCWExpectedRetQty;
                        }
                        SalesLine::modifySalesQty(this,this.inventDim(), true, _uiEnabled);
                    }
                }
                break;

            case fieldNum(SalesLine, SalesQty):
                using (var activityContext = SalesLine::instrumentationLogger().salesOrderActivities().modifyFieldSalesQty(this))
                {
                    this.salesQtyModifiedInteraction(_uiEnabled);
                    // <GIN>
                    this.updateAndPackAccessableValue_IN(true);
                    // </GIN>
                }
                break;

            case fieldNum(SalesLine, QtyOrdered):
                if (this.ProjId)
                {
                    this.SalesQty = this.QtyOrdered;
                    SalesLine::modifySalesQty(this,this.inventDim(), true, _uiEnabled);
                }
                break;

            case fieldNum(SalesLine, PdsCWQty):
                this.pdsCWQtyConversion();
                SalesLine::modifySalesQty(this,this.inventDim(), true, _uiEnabled);
                break;
            case fieldNum(SalesLine, SalesMarkup):
                if (_userInput)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }
                this.LineAmount = this.calcLineAmountForced();
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, MultiLnDisc):
                this.LineAmount = this.calcLineAmountForced();
                this.type().setPriceDiscChangePolicyMultiLine();
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, MultiLnPercent):
                this.LineAmount = this.calcLineAmountForced();
                this.type().setPriceDiscChangePolicyMultiLine();
                // <GIN>
                this.updateAndPackAccessableValue_IN();
                // </GIN>
                break;

            case fieldNum(SalesLine, InventTransIdReturn):
                [inventQty, costAmount] = InventTransOrigin::calcInvoicedCostValue(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransIdReturn));
                if (inventQty)
                {
                    this.CostPrice = costAmount/inventQty;
                }
                break;

            case fieldNum(SalesLine, ProjCategoryId):
                this.setTaxItemGroup(this.TaxItemGroup);
                this.setProjLinePropertyId();
                break;

            case fieldNum(SalesLine, ActivityNumber):
                this.initFromProjActivity(ProjActivity::find(this.ActivityNumber));
                this.setTaxItemGroup(this.TaxItemGroup);
                this.setProjLinePropertyId();
                break;

            case fieldNum(SalesLine, ProjId):
                this.projIdModified();
                break;

            case fieldNum(SalesLine, PackingUnit):
                this.calcPackingUnitQty();
                break;

            case fieldNum(SalesLine, DeliveryPostalAddress):
                LogisticsLocationSelectForm_SalesLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(),
                    this.DeliveryPostalAddress);

                if (TaxIntegrationUtils::isTaxInformationEnabled())
                {
                    TransTaxInformationHelper::newHelper().updateCustomerLocationFromTransTable(this);
                }

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    this.onDeliveryPostalAddressChange_BR();
                }
                // </GBR>
                break;

            case fieldNum(SalesLine, DeliveryType):
            case fieldNum(SalesLine, SourcingVendAccount):
                // Try deleting the chain
                PurchLine referencedPurchLine = this.referencedPurchLine(true);
                if (this.isPurchLineCreatedFromThisSalesLine(referencedPurchLine))
                {
                    this.tryDeleteLinkedPurchLine(referencedPurchLine);
                }

                if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                {
                    boolean needRecalculation = true;

                    if (this.isDirectDelivery())
                    {
                        needRecalculation = !this.salesTable().ReceiptDateConfirmed;
                        if (this.isIntercompanyOrigin())
                        {
                            InterCompanyTradingPartner               interCompanyTradingPartnerVendor         = InterCompanyTradingPartner::findOrCreateVendor(this.defaultIntercompanyVendorAccountNumber(), this.DataAreaId);
                            InterCompanyEndpointActionPolicy         interCompanyEndpointActionPolicyPurch    = interCompanyTradingPartnerVendor.interCompanyEndpointActionPolicy();
                            InterCompanyEndpointActionPolicyTransfer interCompanyEndpointActionPolicyTransfer = interCompanyEndpointActionPolicyPurch.getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::Internal);
                            needRecalculation = needRecalculation || interCompanyEndpointActionPolicyTransfer.UpdateRequestedReceiptDate;
                        }
                    }

                    if (needRecalculation)
                    {
                        this.recalculateRequestedDates();
                    }
                }
                break;

            case fieldNum(SalesLine, ReceiptDateRequested):
                this.unlinkAgreementDeliveryDates(_fieldId);
                if (this.ShippingDateRequested > this.ReceiptDateRequested)
                {
                    this.ShippingDateRequested = this.ReceiptDateRequested;
                    this.ConfirmedDlv          = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
                    this.checkPriceDate(fieldNum(SalesLine, ShippingDateRequested));
                }
                this.pdsUpdateReservationRequired(fieldNum(SalesLine, ReceiptDateRequested));
                this.checkPriceDate(_fieldId);
                break;

            case fieldNum(SalesLine, ShippingDateRequested):
                this.unlinkAgreementDeliveryDates(_fieldId);
                this.ConfirmedDlv = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;

                if (this.ShippingDateRequested > this.ReceiptDateRequested)
                {
                    this.ReceiptDateRequested = this.ShippingDateRequested;
                    this.pdsUpdateReservationRequired(fieldNum(SalesLine, ReceiptDateRequested));

                    this.checkPriceDate(fieldNum(SalesLine, ReceiptDateRequested));
                }
                this.checkPriceDate(_fieldId);

                // When the shpping date requested updated , the timeslot should be cleared
                this.clearPickupTimeslot();
                break;

            case fieldNum(SalesLine, ShippingDateConfirmed):
                this.ConfirmedDlv = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;

                if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
                {
                    this.ReceiptDateConfirmed = this.ShippingDateConfirmed;
                    this.pdsUpdateReservationRequired(fieldNum(SalesLine, ReceiptDateConfirmed));
                    this.checkPriceDate(fieldNum(SalesLine, ReceiptDateConfirmed));
                }
                this.checkPriceDate(_fieldId);
                break;

            case fieldNum(SalesLine, Reservation):
                if (this.Reservation != ItemReservation::Automatic
                    && this.PdsBatchAttribAutoRes)
                {
                    this.PdsBatchAttribAutoRes = NoYes::No;
                }
                break;

            case fieldNum(SalesLine, ReceiptDateConfirmed):
                if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
                {
                    this.ShippingDateConfirmed = this.ReceiptDateConfirmed;
                    this.ConfirmedDlv          = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
                }
                this.pdsUpdateReservationRequired(fieldNum(SalesLine, ReceiptDateConfirmed));
                break;

            // Return - begin
            case fieldNum(SalesLine, ReturnDispositionCodeId):
                Markup::deleteMarkupTrans(this, true, !MarkupTransDeleteOnlyNotCopiedRecordsFlight::instance().isEnabled());
                this.createReturnMarkupTrans(this.salesTable());
                this.returnUpdateBasedOnDispcode();
                // <GBR>
                if (this.ReturnDispositionCodeId && BrazilParameters::isEnabled())
                {
                    if (_uiEnabled &&
                        Box::yesNo("@GLS50989", DialogButton::Yes) == DialogButton::No)
                    {
                        this.ReturnDispositionCodeId = '';
                    }
                }
                // </GBR>
                break;

            case fieldNum(SalesLine, ReturnAllowReservation):
                if (this.ReturnStatus == ReturnStatusLine::Awaiting)
                {
                    if (this.ReturnAllowReservation)
                    {
                        this.SalesQty = this.ExpectedRetQty;
                        this.PdsCWQty = this.PdsCWExpectedRetQty;
                    }
                    else
                    {
                        this.SalesQty = 0;
                        this.PdsCWQty = 0;
                    }
                    SalesLine::modifySalesQty(this,this.inventDim(), true, _uiEnabled);
                }
                break;
            // Return - end

            case fieldNum(SalesLine, DlvMode):
                dlvMode = DlvMode::find(this.DlvMode);
                this.ShipCarrierId          = dlvMode.ShipCarrierId;
                this.ShipCarrierDlvType     = dlvMode.ShipCarrierDlvType;
                this.ShipCarrierAccountCode = dlvMode.ShipCarrierAccountCode;
                this.Transport              = dlvMode.Transport;
                // When the shpping date requested updated , the timeslot should be cleared
                this.clearPickupTimeslot();
                break;

            case fieldNum(SalesLine, DlvTerm):
                this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, this.deliveryLocation()));
                break;

            // <GEERU>
            case fieldNum(SalesLine, PriceAgreementDate_RU):
                SalesLine::modifySalesQty(this, this.inventDim());
                break;
            // </GEERU>

            case fieldNum(SalesLine, OrigCountryRegionId) :
                this.OrigStateId = '';
                break;
            case fieldNum(SalesLine, SourcingVendAccount):
                SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);
                break;

            case fieldNum(SalesLine, Consignment_MX):
                if(this.Consignment_MX)
                {
                    this.LineDisc = this.LineAmount;
                }
                else
                {
                    this.LineDisc = 0;
                    this.Samples_MX = NoYes::No;
                }

                this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                this.LineAmount = this.calcLineAmountForcedInteraction(_fieldId);
                break;

            case fieldNum(SalesLine, MpsExcludeSalesLine):
                this.MpsUpdateExcludeSalesLine = NoYes::Yes;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModifiedField</Name>
				<Source><![CDATA[
    private void postModifiedField()
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            this.setFullRunCTPStatusOnSalesLineModifiedField();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPickupTimeslot</Name>
				<Source><![CDATA[
    /// <summary>
    /// When it is a call center order, then the timeslot related fields (Delivery Mode/Requested Ship Date/Warehouse) are updated, the pickup timeslot should be cleared.
    /// </summary>
    private void clearPickupTimeslot()
    {
        if (this.salesTable().mcrIsCallCenter())
        {
            if (!this.retailSalesLine() || (this.retailSalesLine().PickupStartTime == 0 && this.retailSalesLine().PickupEndTime == 0))
            {
                return;
            }
            info("@Retail:RetailSalesOrderTimeslotRelatedControlChangedWarning");
            this.retailSalesLine().PickupEndTime = 0;
            this.retailSalesLine().PickupStartTime = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineAmountModified</Name>
				<Source><![CDATA[
    private boolean isLineAmountModified()
    {
        return (this.isInterCompanyOrder()
            && this.SourcingOrigin == SalesSourcingOrigin::Intercompany
            && this.salesTable().interCompanyEndpointActionPolicy().PriceDiscountSearch  == false
            && this.RecId
            && this.LineAmount != this.orig().LineAmount)
            || this.LineAmount != this.calcLineAmount(this.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInitializeFromSalesLineSourcingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// When we enter the sourcing vendor the order automatically becomes intercompany sourcing origin,
    /// and it is impossible to previously had the non-intercompany with entered sourcing vendor that we would like to remove,
    /// we are only able to have either Intercompany stock scenario or Intercompany direct delivery when sourcing vendor is set up.
    /// In case of Intercompany stock scenario after removing sourcing vendor the sourcing sales line automatically becomes Inventory stock.
    /// </summary>
    /// <param name = "_salesLineSourcingFields">Sourcing sales line fields.</param>
    /// <returns>true if there is sourcing vendor or sourcing sales line is not intercompany direct delivery,
    /// otherwise false.
    /// </returns>
    private boolean canInitializeFromSalesLineSourcingFields(SalesLineSourcingFields _salesLineSourcingFields)
    {
        if (_salesLineSourcingFields.SourcingVendAccount
            || !(_salesLineSourcingFields.deliveryType == TradeLineDlvType::DropShip
                && _salesLineSourcingFields.sourcingOrigin == SalesSourcingOrigin::Intercompany))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryDeleteLinkedPurchLine</Name>
				<Source><![CDATA[
    private void tryDeleteLinkedPurchLine(PurchLine _purchLine)
    {
        try
        {
            if (this.orig().SourcingOrigin == SalesSourcingOrigin::ExternalVendor // If SourcingVendor changes, SourcingOrigin may too, we need to look at original
             && PurchTable::find(_purchLine.purchId).DocumentState >= VersioningDocumentState::InExternalReview)
            {
                throw error("@Intercompany:ErrorExtVendorPOProcessed");
            }

            // SalesLine buffer may be obsolete after returning from deleting PurchLine and a clean state (default sourcing values) in the database
            // for the sourcing fields is necessary to avoid inconsistencies. At the same time, user selected values should be kept.
            SalesLineSourcingFields salesLineSourcingFields = SalesLineSourcingFields::construct();
            salesLineSourcingFields.initFromSalesLine(this);

            ttsbegin;
            
            this.type().deletePurchLine(this);

            // Inform the user that changing the delivery type caused the sourcing vendor to be changed
            if (this.orig().DeliveryType != this.DeliveryType
                && this.orig().SourcingVendAccount != this.SourcingVendAccount)
            {
                info(strFmt("@Intercompany:IntercompanySourcingVendorChanged", this.orig().SourcingVendAccount, this.SourcingVendAccount));
            }

            this.reread();
            this.clearInventReference();
            this.clearSourcingFields();
            this.doUpdate();
            
            ttscommit;

            if (this.canInitializeFromSalesLineSourcingFields(salesLineSourcingFields))
            {
                this.initFromSalesLineSourcingFields(salesLineSourcingFields);
            }
        }
        catch
        {
            this.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSourcingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the sourcing fields on the <c>SalesLine</c> record.
    /// </summary>
    public void clearSourcingFields()
    {
        this.DeliveryType = TradeLineDlvType::None;
        this.SourcingOrigin = SalesSourcingOrigin::Inventory;
        this.SourcingVendAccount = "";
        this.SourcingCompanyId = "";
        this.SourcingInventSiteId = "";
        this.SourcingInventLocationId = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLineSourcingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sourcing fields on the <c>SalesLine</c> record from the given <c>SalesLineSourcingFields</c> object.
    /// </summary>
    /// <param name = "_salesLineSourcingFields">
    /// The <c>SalesLineSourcingFields</c> object to initialize from.
    /// </param>
    protected void initFromSalesLineSourcingFields(SalesLineSourcingFields _salesLineSourcingFields)
    {
        this.DeliveryType = _salesLineSourcingFields.deliveryType;
        this.SourcingOrigin = _salesLineSourcingFields.sourcingOrigin;
        this.SourcingVendAccount = _salesLineSourcingFields.sourcingVendAccount;
        this.SourcingCompanyId = _salesLineSourcingFields.sourcingCompanyId;
        this.SourcingInventSiteId = _salesLineSourcingFields.sourcingInventSiteId;
        this.SourcingInventLocationId = _salesLineSourcingFields.sourcingInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks Retail extension table from <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// The unpacked <c>RetailSalesLine</c> record
    /// </returns>
    public RetailSalesLine retailSalesLine(boolean _packNewExtensionTable = true)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailSalesLine), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailPackRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the retail sales table extension table into <c>RetailSalesLine</c> field.
    /// </summary>
    /// <param name="_retailSalesLine">
    /// Extension table to be packed.
    /// </param>
    public void retailPackRetailSalesLine(RetailSalesLine _retailSalesLine)
    {
        _retailSalesLine.SalesLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_retailSalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRetailSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a matching sales line given the item info and sales Id.
    /// </summary>
    public static SalesLine findByRetailSalesTrans(
        SalesIdBase _salesId,
        CustAccount _custAccount,
        Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ItemInfo _itemInfo)
    {
        SalesLine salesLine;
        RetailSalesLine retailSalesLine;
        InventDim inventDim = InventDim::FindOrCreateInventDim(_itemInfo);
        TaxGroup taxGroup = RetailTransactionServiceOrders::getTaxGroup_W(_itemInfo.Quantity, _custAccount, _itemInfo.FulfillmentStoreId, _itemInfo.SalesTaxGroup);

        boolean useDateWhenFindingSalesLine = RetailStatementFeatureControl::isUseDateWhenFindingSalesLineEnabled();

        DiscPct lineDiscountCriteria;
        boolean applyLinePercentageDiscount = ReflectionHelper::hasObjectProperty(_itemInfo, 'LinePercentageDiscount');

        if (applyLinePercentageDiscount)
        {
            // Line percentage discount should be used instead of manual percentage
            // This percentage includes manual or trade agreement discounts
            lineDiscountCriteria = ReflectionHelper::getObjectProperty(_itemInfo, 'LinePercentageDiscount');
        }
        
        select firstonly salesLine
                index hint aggregationIdx
                where
                    salesLine.SalesId == _salesId &&
                    salesLine.ItemId == _itemInfo.ItemId &&
                    salesLine.SalesUnit == _itemInfo.Unit &&
                    salesLine.SalesPrice == _itemInfo.Price &&
                    salesLine.LinePercent == _itemInfo.DiscountPercent &&
                    salesLine.DlvMode == _itemInfo.DeliveryMode &&
                    salesLine.TaxGroup == taxGroup &&
                    salesLine.TaxItemGroup == _itemInfo.ItemTaxGroup &&
                    salesLine.InventDimId == inventDim.InventDimId &&
                    salesLine.SalesGroup == _itemInfo.CommissionSalesGroup &&
                    (!useDateWhenFindingSalesLine ||
                        salesLine.ReceiptDateRequested == str2Date(_itemInfo.RequestedDeliveryDateString, 321)) &&
                    ( (_itemInfo.Quantity >= 0 && salesLine.SalesQty >= 0) || (_itemInfo.Quantity < 0 && salesLine.SalesQty < 0) )
            exists join retailSalesLine
                where retailSalesLine.SalesLine == salesLine.RecId &&
                      retailSalesLine.PeriodicPercentageDiscount == _itemInfo.PeriodicPercentageDiscount &&
                      retailSalesLine.TotalPctDiscount == _itemInfo.TotalPctDiscount &&
                      retailSalesLine.LineManualDiscountPercentage == _itemInfo.LineManualDiscountPercentage &&
                      (     !applyLinePercentageDiscount
                        ||  (applyLinePercentageDiscount && retailSalesLine.LinePercentageDiscount == lineDiscountCriteria));

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyRegistedAndNotCancelledReturn</Name>
				<Source><![CDATA[
    public boolean isAlreadyRegistedAndNotCancelledReturn()
    {
        if (this.ReturnStatus == ReturnStatusLine::Registered
        ||  this.ReturnStatus == ReturnStatusLine::Received
        ||  this.ReturnStatus == ReturnStatusLine::Invoiced)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SalesPurchModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityErrorCorrectionMethods</Name>
				<Source><![CDATA[
    public InventMovementQuantityErrorCorrectionMethods parmQuantityErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethods _errorCorrectionMethods = null)
    {
        if (!prmIsDefault(_errorCorrectionMethods))
        {
            // setter
            this.QuantityErrorCorrectionMethods = _errorCorrectionMethods.pack();
            return _errorCorrectionMethods;
        }

        // getter
        if (this.QuantityErrorCorrectionMethods)
        {
            return InventMovementQuantityErrorCorrectionMethods::newFromPacked(this.QuantityErrorCorrectionMethods);
        }

        return InventMovementQuantityErrorCorrectionMethods::newStandard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditPdsRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is allowed to edit the sales line rebate.
    /// </summary>
    /// <returns>true, if it is allowed to edit the sales line rebate; otherwise, false.</returns>
    public boolean canEditPdsRebate()
    {
        return !this.RecId
            || !(this.invoicedInTotal() && this.onOrderInSalesUnit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditPdsBatchAttribAutoRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is allowed to edit the batch attribute auto reservation field.
    /// </summary>
    /// <returns>true, if it is allowed to edit the batch attribute auto reservation field; otherwise, false.</returns>
    public boolean canEditPdsBatchAttribAutoRes()
    {
        return #PdsBatchAttribEnabled && this.Reservation == ItemReservation::Automatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCheckInventDimChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs warehouse management specific check of the inventory dimensions change.
    /// </summary>
    /// <param name="_salesLineOrig">The original state of the <c>SalesLine</c> record before the change.</param>
    /// <returns>true, if the check succeeded; otherwise, false.</returns>
    public boolean whsCheckInventDimChange(SalesLine _salesLineOrig = this.orig())
    {
        boolean ret = true;

        if (this.InventDimId != _salesLineOrig.InventDimId)
        {
            InventDim inventDimLocal = this.inventDim();

            if (WHSInventEnabled::exist(this.ItemId)
                && inventDimLocal.InventLocationId
                && inventDimLocal.inventLocation().WHSEnabled
                && !this.inventDimAllowsWHSProcessing())
            {
                // If a load line already exists for the sales line then we need to prevent the change and not just warn the user.
                if (WHSLoadLine::existsForInventTransId(this.InventTransId))
                {
                    ret = checkFailed("@WAX5689");
                }
                else
                {
                    //For retail sale, should hide the warning.
                    if (this.showWarningOnWHSCheckInventDimChange())
                    {
                        this.hideWarningForRetailSales();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningOnWHSCheckInventDimChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display a warning message when check inventDim change in warehouse process.
    /// </summary>
    /// <returns>True to display a warning message.</returns>
    protected boolean showWarningOnWHSCheckInventDimChange()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideWarningForRetailSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide a warning message for retail sales.
    /// </summary>
    protected void hideWarningForRetailSales()
    {
        if (!this.salesTable().isRetailSale())
        {
            warning("@WAX5690");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineBeDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if line can be marked as direct delivery.
    /// </summary>
    /// <remarks>
    /// Mixing direct delivery lines with lines shipped from inventory but sourced by a supplier is not allowed.
    /// </remarks>
    public boolean canLineBeDirectDelivery()
    {
        return !this.salesTable().existICLinesMarkedAsNotDirectDelivery(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineShipFromInventoryButBeSourcedByVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if line can be marked as shipped from inventory sourced by a supplier.
    /// </summary>
    /// <remarks>
    /// Mixing direct delivery lines with lines shipped from inventory but sourced by a supplier is not allowed.
    /// </remarks>
    public boolean canLineShipFromInventoryButBeSourcedByVendor()
    {
        return !this.salesTable().existICLinesMarkedAsDirectDelivery(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectDelivery</Name>
				<Source><![CDATA[
    public boolean isDirectDelivery()
    {
        return this.DeliveryType == TradeLineDlvType::DropShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanyOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this <c>SalesLine</c> record is sourced through an intercompany vendor.
    /// </summary>
    /// <returns>true if this <c>SalesLine</c> record is sourced through an intercompany vendor; otherwise false.</returns>
    public boolean isIntercompanyOrigin()
    {
        return this.SourcingOrigin == SalesSourcingOrigin::Intercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExternalVendorOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this <c>SalesLine</c> record is sourced through an external vendor.
    /// </summary>
    /// <returns>true if this <c>SalesLine</c> record is sourced through an external vendor; otherwise false.</returns>
    public boolean isExternalVendorOrigin()
    {
        return this.SourcingOrigin == SalesSourcingOrigin::ExternalVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourcedViaProcurement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales order line is sourced by procuring goods from an external or an internal vendor.
    /// </summary>
    /// <returns>true if the sales order line is sourced by procuring goods from an external or an internal vendor; otherwise, false.</returns>
    public boolean isSourcedViaProcurement()
    {
        return this.SourcingOrigin == SalesSourcingOrigin::Intercompany || this.SourcingOrigin == SalesSourcingOrigin::ExternalVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(SalesLine, DeliveryType),
                [fieldNum(SalesLine, ItemId)]],

            [fieldNum(SalesLine, SourcingVendAccount),
                [fieldNum(SalesLine, DeliveryType)]],

            [fieldNum(SalesLine, SourcingOrigin),
                [fieldNum(SalesLine, SourcingVendAccount)]],

            [fieldNum(SalesLine, SourcingCompanyId),
                [fieldNum(SalesLine, SourcingOrigin)]],

            [fieldNum(SalesLine, SourcingInventSiteId),
                [fieldNum(SalesLine, SourcingCompanyId)]],

            [fieldNum(SalesLine, SourcingInventLocationId),
                [fieldNum(SalesLine, SourcingInventSiteId)]],

            [fieldNum(SalesLine, PlanningPriority),
                [fieldNum(SalesLine, ItemId),
                 fieldNum(SalesLine, InventDimId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesLine, DeliveryType):
                this.defaultDeliveryType();
                break;
            case fieldNum(SalesLine, SourcingVendAccount):
                this.defaultSourcingVendAccount();
                break;
            case fieldNum(SalesLine, SourcingOrigin):
                this.defaultSourcingOrigin();
                break;
            case fieldNum(SalesLine, SourcingCompanyId):
                this.defaultSourcingCompanyId();
                break;
            case fieldNum(SalesLine, SourcingInventSiteId):
                this.defaultSourcingInventSiteIdAndLocationId();
                break;
            case fieldNum(SalesLine, SourcingInventLocationId):
                this.defaultSourcingInventLocationId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryType</Name>
				<Source><![CDATA[
    private void defaultDeliveryType()
    {
        boolean deferDirectDeliveryCreation = SalesParameters::find().DeferDirectDeliveryCreation;
        MCRInventTable mcrInventTable = MCRInventTable::findByItemId(this.ItemId);

        if (RetailStatementFeatureControl::isIgnoreDropShipmentEnabled() && this.salesTable().isRetailCashAndCarrySales())
        {
            this.DeliveryType = TradeLineDlvType::None;
        }
        else
        {
            this.DeliveryType = (!deferDirectDeliveryCreation && mcrInventTable.DropShipment) ? TradeLineDlvType::DropShip : TradeLineDlvType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSourcingVendAccount</Name>
				<Source><![CDATA[
    private void defaultSourcingVendAccount()
    {
        if (!this.SkipDefaultingSourcingVendor)
        {
            this.SourcingVendAccount = this.getDefaultSourcingVendAccount();
        }
        else
        {
            this.SkipDefaultingSourcingVendor = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSourcingVendAccount</Name>
				<Source><![CDATA[
    public IntercompanySourcingVendAccount getDefaultSourcingVendAccount()
    {
        return this.isDirectDelivery() ? this.inventTable().primaryVendorId(this.InventDimId, this.inventDim()) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIntercompanyVendorAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default vendor account number when creating an intercompany purchase orders for the current line.
    /// </summary>
    /// <returns>
    /// The default intercompany vendor account number.
    /// </returns>
    [Replaceable]
    public VendAccount defaultIntercompanyVendorAccountNumber()
    {
        return this.inventTable().primaryVendorId(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIntercompanyVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default vendor when creating an intercompany purchase orders for the current line.
    /// </summary>
    /// <returns>
    /// The default intercompany vendor.
    /// </returns>
    [Hookable(false)]
    public VendTable defaultIntercompanyVendor()
    {
        return VendTable::find(this.defaultIntercompanyVendorAccountNumber());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSourcingOrigin</Name>
				<Source><![CDATA[
    private void defaultSourcingOrigin()
    {
        if (this.SourcingVendAccount)
        {
            this.SourcingOrigin = VendTable::find(this.SourcingVendAccount).interCompanyTradingRelationActive() ?
                SalesSourcingOrigin::Intercompany :
                SalesSourcingOrigin::ExternalVendor;
        }
        else if (!this.isDirectDelivery()) // If the sourcing vendor is blank and we are delivering from stock, revert to Inventory
        {
            this.SourcingOrigin = SalesSourcingOrigin::Inventory;
        }
        else
        {
            // SourcingOrigin has to be set for the rest of the depending default logic to be executed
            this.SourcingOrigin = this.SourcingOrigin;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSourcingCompanyId</Name>
				<Source><![CDATA[
    private void defaultSourcingCompanyId()
    {
        this.SourcingCompanyId = this.isIntercompanyOrigin() ?
                VendTable::find(this.SourcingVendAccount).interCompanyTradingPartnerCompanyID() :
                '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSourcingInventSiteIdAndLocationId</Name>
				<Source><![CDATA[
    private void defaultSourcingInventSiteIdAndLocationId()
    {
        if (this.SourcingCompanyId && this.isIntercompanyOrigin())
        {
            this.defaultSiteIdAndLocationIdForItemInICSOCompany();
        }
        else
        {
            this.SourcingInventSiteId = '';
            this.SourcingInventLocationId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSourcingInventLocationId</Name>
				<Source><![CDATA[
    private void defaultSourcingInventLocationId()
    {
        if (this.SourcingInventSiteId && this.isIntercompanyOrigin() && !this.SourcingInventLocationId)
        {
            this.defaultSiteIdAndLocationIdForItemInICSOCompany();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSiteIdAndLocationIdForItemInICSOCompany</Name>
				<Source><![CDATA[
    private void defaultSiteIdAndLocationIdForItemInICSOCompany()
    {
        boolean inventTableIsDropShipment = false;
        InventTable itemInCurrentCompany = InventTable::find(this.ItemId);
        InventTable itemInICSOCompany    = InventTable::findByProductInCompany(itemInCurrentCompany.Product, this.SourcingCompanyId);
        
        changecompany(this.SourcingCompanyId)
        {
            MCRInventTable mcrInventTable = MCRInventTable::findByItemId(itemInICSOCompany.ItemId);
            inventTableIsDropShipment = mcrInventTable.DropShipment && mcrInventTable.DefaultDropShipmentWarehouse;
            if (inventTableIsDropShipment)
            {
                this.SourcingInventLocationId = mcrInventTable.DefaultDropShipmentWarehouse;
                this.SourcingInventSiteId     = InventLocation::find(this.SourcingInventLocationId).InventSiteId;
            }
        }

        if (!inventTableIsDropShipment)
        {
            CustTable intercompanySalesLineCustomer = this.intercompanySalesLineCustomer();
            this.SourcingInventSiteId     = intercompanySalesLineCustomer.InventSiteId;
            this.SourcingInventLocationId = intercompanySalesLineCustomer.InventLocation;
        }

        InventDim inventDimProductDimensionsSiteAndWarehouse;
        InventDim inventDim = InventDim::find(this.InventDimId);
        inventDimProductDimensionsSiteAndWarehouse.copyProductDimensions(inventDim, this.ItemId);
        
        changecompany(this.SourcingCompanyId)
        {
            inventDimProductDimensionsSiteAndWarehouse.InventSiteId = this.SourcingInventSiteId;
            inventDimProductDimensionsSiteAndWarehouse.InventLocationId = this.SourcingInventLocationId;
        
            InventDim inventDimInICSOCompany =  InventDim::findOrCreate(inventDimProductDimensionsSiteAndWarehouse);
            inventDimInICSOCompany.initFromInventTable(itemInICSOCompany, InventItemOrderSetupType::Sales, inventDimInICSOCompany);
        
            this.SourcingInventSiteId = inventDimInICSOCompany.InventSiteId;
            this.SourcingInventLocationId = inventDimInICSOCompany.InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> SalesTable </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxEngineProjItemSOTransHeader  taxEngineProjItemSOTransHeader;
        ProjProposalItem                projProposalItem;
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.salesTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);

        if (this.ProjId)
        {
            projProposalItem = ProjProposalItem::findInvent(this.InventTransId);

            if (projProposalItem)
            {
                taxEngineProjItemSOTransHeader  = TaxEngineProjItemSOTransHeader::findByProjProposalJour(ProjProposalJour::find(projProposalItem.ProposalId));
                descriptor                      = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(taxEngineProjItemSOTransHeader);
                taxableDocument                 = TaxableDocumentObject::construct(descriptor);

                TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleStockedItemsAndProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle inventory update for stocked items and project.
    /// </summary>
    /// <param name = "_salesLineType">
    ///	An instance of <c>SalesLineType</c> class.
    /// </param>
    /// <param name="_dropInvent">
    /// A Boolean value indicating whether inventory processing of the sales line should be skipped.
    /// </param>
    /// <param name="_childBuffer">
    /// A child buffer for the sales line object.
    /// </param>
    /// <returns>
    /// A <c>InventUpd_Estimated</c> object.
    /// </returns>
    protected InventUpd_Estimated handleStockedItemsAndProject(SalesLineType _salesLineType, boolean _dropInvent, Common _childBuffer)
    {
        InventUpd_Estimated estimated;
        boolean isStockedItem = this.isStocked();

        boolean isSalesQty = (!this.orig().SalesQty && !this.SalesQty) ? false : true;

        if (isSalesQty)
        {
            // For category based lines we do not have an item and inventory transaction may never be created.
            // For non-inventoried items InventUpd should still be invoked since it deletes transactions when QtyOrdered is set to 0.
            if (!_dropInvent && isStockedItem)
            {
                // Update inventory will also take care of updating the project commitments for stocked item.
                estimated = _salesLineType.updateInventoryOnInsert(_childBuffer);
            }
            else if (this.ProjId && this.ItemId && !isStockedItem)
            {
                // Manually update project commitments for non-stocked item.
                InventUpd_Estimated inventUpdForProjCommitments = _salesLineType.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::None);
                if (inventUpdForProjCommitments)
                {
                    inventUpdForProjCommitments.updateCostCommitments();
                }
            }
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasICMSSTTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current line has ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// True if current line has ICMS-ST tax; otherwise false.
    /// </returns>
    public boolean hasICMSSTTax_BR()
    {
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMSST);
        return TaxOnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesLine</c> table buffer on India fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(Common _origTransactionTable = this.orig())
    {
        boolean         indirectTaxChanged = false;
        SalesLine_IN    salesLine_IN;
        SalesLine_IN    salesLine_Orig_IN;
        SalesLine       salesLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        if (TaxParameters::checkTaxParameters_IN())
        {
            salesLine_IN        = this.salesLine_IN();
            salesLine_Orig_IN   = salesLine_Orig.salesLine_IN();

            indirectTaxChanged =
                salesLine_IN.AssessableValueTransactionCurrency != salesLine_Orig_IN.AssessableValueTransactionCurrency
                || salesLine_IN.CustomsMaxRetailPrice           != salesLine_Orig_IN.CustomsMaxRetailPrice
                || salesLine_IN.MaximumRetailPrice              != salesLine_Orig_IN.MaximumRetailPrice;
        }
        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesLine</c> table will update the tax.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>true if current line tax should be recalculated; otherwise false </returns>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        SalesLine salesLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        return (this.taxRecalculationNeededForTaxIntegration(salesLine_Orig)
            || (this.ItemId                != salesLine_Orig.ItemId)
            || (this.PriceUnit             != salesLine_Orig.PriceUnit)
            || (this.LinePercent           != salesLine_Orig.LinePercent)
            || (this.LineDisc              != salesLine_Orig.LineDisc)
            || (this.SalesQty              != salesLine_Orig.SalesQty)
            || (this.TaxItemGroup          != salesLine_Orig.TaxItemGroup)
            || (this.TaxGroup              != salesLine_Orig.TaxGroup)
            || (this.MultiLnDisc           != salesLine_Orig.MultiLnDisc)
            || (this.MultiLnPercent        != salesLine_Orig.MultiLnPercent)
            || (this.LineAmount            != salesLine_Orig.LineAmount)
            || (this.ProjId                != salesLine_Orig.ProjId)
            || (this.ActivityNumber        != salesLine_Orig.ActivityNumber)
            || (this.ProjCategoryId        != salesLine_Orig.ProjCategoryId)
            || (this.ProjLinePropertyId    != salesLine_Orig.ProjLinePropertyId)
            || (this.CurrencyCode          != salesLine_Orig.CurrencyCode)
            || (this.DeliveryPostalAddress != salesLine_Orig.DeliveryPostalAddress
                || (this.RemainSalesPhysical + this.RemainSalesFinancial) != (salesLine_Orig.RemainSalesPhysical + salesLine_Orig.RemainSalesFinancial))
            || (!DimensionDefaultFacade::areEqual(this.DefaultDimension, salesLine_Orig.DefaultDimension)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeededForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesLine</c>table will update the tax when the tax calculation service is enabled.
    /// </summary>
    /// <param name="_salesLine_Orig">
    /// The original <c>SalesLine</c> record.
    /// </param>
    /// <returns>true if current line tax should be recalculated; otherwise false.</returns>
    protected boolean taxRecalculationNeededForTaxIntegration(SalesLine _salesLine_Orig)
    {
        if (TaxIntegrationCacheCalculationResultFlight::instance().isEnabled()
            && Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            return (this.OverrideSalesTax  != _salesLine_Orig.OverrideSalesTax
            || this.InventDimId        != _salesLine_Orig.InventDimId
            || this.InventTransId      != _salesLine_Orig.InventTransId
            || this.RetailVariantId    != _salesLine_Orig.RetailVariantId
            || this.CostPrice          != _salesLine_Orig.CostPrice
            || this.SalesCategory      != _salesLine_Orig.SalesCategory
            || this.SalesDeliverNow    != _salesLine_Orig.SalesDeliverNow
            || this.IntrastatCommodity != _salesLine_Orig.IntrastatCommodity
            || this.DlvTerm            != _salesLine_Orig.DlvTerm
            || (this.deliveryDate()    != _salesLine_Orig.deliveryDate()
                && TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate)
            || !LedgerDimensionFacade::areEqual(this.LedgerDimension, _salesLine_Orig.LedgerDimension));
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDeliveryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line based on the specified delivery type.
    /// </summary>
    /// <param name="_sourcingSpecification">The delivery type.</param>
    public void initFromDeliveryType(TradeLineDlvType _deliveryType)
    {
        if (this.DeliveryType != _deliveryType)
        {
            this.DeliveryType = _deliveryType;
            this.modifiedField(fieldNum(SalesLine, DeliveryType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSourcingVendorAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line based on the specified sourcing vendor account number.
    /// </summary>
    /// <param name="_sourcingVendorAccountNumber">The sourcing vendor account number.</param>
    public void initFromSourcingVendorAccountNumber(IntercompanySourcingVendAccount _sourcingVendorAccountNumber)
    {
        if (this.SourcingVendAccount != _sourcingVendorAccountNumber)
        {
            this.SourcingVendAccount = _sourcingVendorAccountNumber;
            this.modifiedField(fieldNum(SalesLine, SourcingVendAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSourcingSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line based on the sourcing specification.
    /// </summary>
    /// <param name="_sourcingSpecification">The sourcing specification.</param>
    public void initFromSourcingSpecification(IntercompanySourcingSpecification _sourcingSpecification)
    {
        this.initFromDeliveryType(_sourcingSpecification.DeliveryType);
        this.initFromSourcingVendorAccountNumber(_sourcingSpecification.SourcingVendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this sales line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineSalesLineImpl</c> object </returns>
    public TaxModelDocLineSalesLineImpl initTaxModelDocLine()
    {
        TaxModelDocLineSalesLineImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineSalesLineImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this sales line record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineSalesLineImpl_IN</c> object </returns>
    public TaxModelDocLineSalesLineImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLineSalesLineImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineSalesLineImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemNumberDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to look up the item number from the sales order line.
    /// </summary>
    /// <param name = "_formControl">Form control to open the lookup on.</param>
    /// <param name = "_salesLine">Sales order line data source record.</param>
    /// <param name = "_filterStr">Filter conditions to apply on the lookup data.</param>
    /// <param name = "_eventHandlerResult">
    /// An instance of <c>EventHandlerResult</c> subscribers can
    /// use to notify the calling code that they took care of the lookup.
    /// </param>
    static delegate void lookupItemNumberDelegate(FormControl _formControl, SalesLine _salesLine, str _filterStr, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up the item number from the sales order line.
    /// </summary>
    /// <param name = "_formControl">Form control to open the lookup on.</param>
    /// <param name = "_salesLine">Sales order line data source record.</param>
    /// <param name = "_filterStr">Filter conditions to apply on the lookup data.</param>
    public static void lookupItemNumber(FormControl _formControl, SalesLine _salesLine, str _filterStr)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        SalesLine::lookupItemNumberDelegate(_formControl, _salesLine, _filterStr, result);

        if (!result.hasResult())
        {
            InventTable::lookupItem(_formControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoiceOrderLineFromCurrentSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales order line can be invoiced from the current status it is in.
    /// </summary>
    /// <returns>true, if the order line can be invoiced; otherwise, false.</returns>
    public boolean canInvoiceOrderLineFromCurrentSalesStatus()
    {
        switch (this.SalesStatus)
        {
            case SalesStatus::None:
            case SalesStatus::Backorder:
            case SalesStatus::Delivered:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The record for SalesTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates retail discounts.
    /// </summary>
    /// <remarks>
    /// If delayed pricing calculation is enabled, recalculation of the entire order will not be triggered.
    /// </remarks>
    public void updateRetailDiscounts()
    {
        RetailParameters retailParameters = RetailParameters::find();
        this.updateRetailDiscountsInternal(!retailParameters.EnableDelayedPriceAndDiscountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsIVAdjustmentOffsetInfo</Name>
				<Source><![CDATA[
    public boolean containsIVAdjustmentOffsetInfo()
    {
        return this.InventoryServiceAdjustmentOffsetDatasource && this.InventoryServiceAdjustmentOffsetPhysicalMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateRetailDiscountsInternal</Name>
				<Source><![CDATA[
    protected boolean shouldUpdateRetailDiscountsInternal(RetailSalesTable _retailSales)
    {
        return _retailSales && _retailSales.RetailChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailDiscountLines</Name>
				<Source><![CDATA[
    protected void updateRetailDiscountLines(RetailSalesOrderCalculatorResult _result, SalesLine _locSalesLine)
    {
        RetailSalesDiscountLine discountLine;
        ListEnumerator discountLineEn;

        delete_from discountLine
            where discountLine.InventTransId == _locSalesLine.InventTransId;

        discountLineEn = _result.getRetailSalesDiscountLineList().getEnumerator();

        while (discountLineEn.moveNext())
        {
            discountLine = discountLineEn.current();
            if (!discountLine.InventTransId)
            {
                discountLine.InventTransId = _locSalesLine.InventTransId;
            }

            if (discountLine.InventTransId == _locSalesLine.InventTransId
                // Don't create a discount line if discount is empty.
                && (discountLine.Amount || discountLine.DiscountAmount || discountLine.DealPrice))
            {
                discountLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesPriceAdjustmentLine</Name>
				<Source><![CDATA[
    protected void updateRetailSalesPriceAdjustmentLine(RetailSalesOrderCalculatorResult _result, SalesLine _locSalesLine)
    {
        RetailSalesPriceAdjustmentLine adjustmentLine;
        ListEnumerator adjustmentLineEn;

        delete_from adjustmentLine where adjustmentLine.InventTransId == _locSalesLine.InventTransId;

        // Creates new record in retail sales price adjustment line when price adjustment is applied.
        adjustmentLineEn = _result.getRetailSalesPriceAdjustmentLineList().getEnumerator();

        RecordInsertList adjustmentLineInsertList = new RecordInsertList(tableNum(RetailSalesPriceAdjustmentLine));

        while (adjustmentLineEn.moveNext())
        {
            adjustmentLine = adjustmentLineEn.current();

            if (!adjustmentLine.InventTransId || adjustmentLine.InventTransId == _locSalesLine.InventTransId)
            {
                adjustmentLine.InventTransId = _locSalesLine.InventTransId;

                adjustmentLineInsertList.add(adjustmentLine);
            }
        }

        adjustmentLineInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailDiscountsInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates retail discounts.
    /// </summary>
    /// <param name = "_recalcOrderIfNeeded">recalculate the whole order if needed.</param>
    protected void updateRetailDiscountsInternal(boolean _recalcOrderIfNeeded)
    {
        RetailSalesTable retailSales;
        container retailCalculatorResultContainer;
        RetailSalesOrderCalculatorResult result = new RetailSalesOrderCalculatorResult();

        RetailSalesLine retailSalesLineFromCalculation;

        if (!RetailParameters::isRetailEnabledAndInUse())
        {
            return;
        }

        retailSales = RetailSalesTable::findSalesTable(this.salesTable());
        if (this.shouldUpdateRetailDiscountsInternal(retailSales))
        {
            retailCalculatorResultContainer = retailSales.TmpPriceDiscountData;
            // If the result is empty, do nothing. MCR may result in calling write() twice.
            if (retailCalculatorResultContainer)
            {
                result.unpack(retailCalculatorResultContainer);

                if (result.parmNeedsRecalculateWholeOrder() && _recalcOrderIfNeeded)
                {
                    retailSales = this.salesTable().retailSalesTable();
                    RetailSalesOrderCalculator::setPricesDiscountsOnOrderOnServer(this.salesTable().SalesId, retailSales.TotalManualDiscountPercentage);
                }
                else
                {
                    InventTransId inventTransId = result.parmInventTransId();
                    if (!inventTransId)
                    {
                        inventTransId = this.InventTransId;
                    }
                    SalesLine locSalesLine = SalesLine::findInventTransId(inventTransId);

                    if (locSalesLine)
                    {
                        locSalesLine.selectForUpdate(true);
                        ttsbegin;

                        retailSalesLineFromCalculation = locSalesLine.retailSalesLine();
                        retailSalesLineFromCalculation.LineDscAmount = result.parmRetailSalesQuotationLine().LineDscAmount;
                        retailSalesLineFromCalculation.LinePercentageDiscount = result.parmRetailSalesQuotationLine().LinePercentageDiscount;
                        retailSalesLineFromCalculation.LineManualDiscountAmount = result.parmRetailSalesQuotationLine().LineManualDiscountAmount;
                        retailSalesLineFromCalculation.LineManualDiscountPercentage = result.parmRetailSalesQuotationLine().LineManualDiscountPercentage;
                        retailSalesLineFromCalculation.PeriodicDiscount = result.parmRetailSalesQuotationLine().PeriodicDiscount;
                        retailSalesLineFromCalculation.PeriodicPercentageDiscount = result.parmRetailSalesQuotationLine().PeriodicPercentageDiscount;
                        retailSalesLineFromCalculation.TotalDiscount = result.parmRetailSalesQuotationLine().TotalDiscount;
                        retailSalesLineFromCalculation.TotalPctDiscount = result.parmRetailSalesQuotationLine().TotalPctDiscount;
                        locSalesLine.retailPackRetailSalesLine(retailSalesLineFromCalculation);

                        // Do not call SalesLine.update() since it is expensive. Instead, call postUpdate to update extension table and pakcedExtension in SalesLine.
                        locSalesLine.SysExtensionSerializerMap::postUpdate();

                        this.updateRetailDiscountLines(result, locSalesLine);

                        this.updateRetailSalesPriceAdjustmentLine(result, locSalesLine);

                        retailSales = RetailSalesTable::findSalesTable(this.salesTable(), true);
                        retailSales.TmpPriceDiscountData = conNull();
                        retailSales.update();

                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineFromItemOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current record's values, e.g. quantity or inventory dimensions, based on item or sales category.
    /// </summary>
    public void initLineFromItemOrCategory()
    {
        if (this.ItemId)
        {
            if (!this.checkInitFromInventTable(this.inventTable()))
            {
                throw error("@SYS18447");
            }
        }
            
        this.initFromItemOrCategory(this.ItemId, this.SalesCategory, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachLinkWithLocalEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the link between the sales order line and an estimate line.
    /// </summary>
    /// <param name="_salesLineRefRecId">
    ///  A <c>SalesLineRefRecId</c> for the matching <c>PSAActivityEstimates</c> record.
    /// </param>
    private void detachLinkWithLocalEstimates(RefRecId _salesLineRefRecId)
    {
        PSAActivityEstimates localEstimates;
        
        ttsBegin;
        select firstonly forUpdate localEstimates
                where localEstimates.SalesLineRefRecId == _salesLineRefRecId;
            
        if (localEstimates)
        {
            localEstimates.SalesLineRefRecId = 0;
            localEstimates.doUpdate();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the sales lines can be created.
    /// </summary>
    /// <remarks>
    /// Throws an error if the sales line cannot be created.
    /// </remarks>
    private void validateSalesLineCreation()
    {
        if (!WHSFilter::custFilterMatch(this.CustAccount, this.ItemId))
        {
            throw error(strFmt("@WAX:CustomerFiltersMatchingMessage", this.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesPrice_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for the sales line price.
    /// </summary>
    /// <returns>
    ///     true if sales line price exists; otherwise, false.
    /// </returns>
    public boolean checkSalesPrice_PL()
    {
        return this.SalesPrice != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableWithCustomsExportOrderIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// updated update SalesTable for CustomsExportOrderIN field
    /// </summary>
    /// <param name = "salesTable">SalesTable table</param>
    /// <param name = "salesLine">SalesLine table</param>
    /// <param name = "update">if update</param>
    internal void updateSalesTableWithCustomsExportOrderIN(SalesTable _salesTable, boolean _saveRecord = false)
    {
        if (TaxParameters::isCustomsEnable_IN() && !_salesTable.CustomsExportOrder_IN && this.salesLine_IN().ExportOrder)
        {
            _salesTable.CustomsExportOrder_IN = this.salesLine_IN().ExportOrder;
            if (_saveRecord)
            {
                ttsbegin;
                _salesTable.selectForUpdate(true);
                _salesTable.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncMCRSalesDropShipment</Name>
				<Source><![CDATA[
    private void syncMCRSalesDropShipment()
    {
        if (this.DeliveryType == TradeLineDlvType::DropShip)
        {
            //Need refresh <c>MCRSalesLineDropShipment</c> after sync intercompany purchase order.
            MCRSalesLineDropShipment mcrSalesLineDropShipment = MCRSalesLineDropShipment::findSalesLine(this.RecId, true);
            this.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>LedgerDimensionDefaultAccount</c> value that is used to specify the main account.
    /// </summary>
    /// <param name="_inventTable">The inventory table cursor.</param>
    /// <param name="_creditNote">Determines if the invoice is credit note.</param>
    /// <returns>A <c>LedgerDimensionDefaultAccount</c> value.</returns>
    public LedgerDimensionDefaultAccount ledgerDimensionSales_IT(InventTable _inventTable = this.inventTable(), boolean _creditNote = false)
    {
        SalesLineType salesLineType = this.type();
        return salesLineType.ledgerDimensionSales_IT(_inventTable, _creditNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>LedgerPostingType</c> value that is used to post an invoice line.
    /// </summary>
    /// <param name="_creditNote">Determines if the invoice is credit note.</param>
    /// <returns>A <c>LedgerPostingType</c> value.</returns>
    public LedgerPostingType postingSales_IT(boolean _creditNote = false)
    {
        SalesLineType salesLineType = this.type();
        return salesLineType.postingSales_IT(_creditNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSATUnitDimensions</Name>
				<Source><![CDATA[
    private void initSATUnitDimensions()
    {
        UnitOfMeasure_W unitOfMeasure_W = UnitOfMeasure_W::findByUnitOfMeasure(UnitOfMeasure::findBySymbol(this.SalesUnit).RecId);
        this.SATUnitCode_MX = this.SATUnitCode_MX ? this.SATUnitCode_MX : unitOfMeasure_W.SATCodeId_MX;
        this.SATCustomUnitOfMeasure_MX = this.SATCustomUnitOfMeasure_MX ? this.SATCustomUnitOfMeasure_MX : unitOfMeasure_W.SATCustomUnitOfMeasure;

        InventTable invTable = this.inventTable();
        this.SATTariffFraction_MX = this.SATTariffFraction_MX ? this.SATTariffFraction_MX : invTable.SATTariffFraction_MX;
        this.SATProductCode_MX = this.SATProductCode_MX ? this.SATProductCode_MX : invTable.SATCodeId_MX;
        this.SATCustomsQty_MX = this.SATCustomsQty_MX ? this.SATCustomsQty_MX : this.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingProcessCopy_delegate</Name>
				<Source><![CDATA[
    delegate void kittingProcessCopy_delegate(SalesLine _origSalesLine, SalesLine _salesLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSetKitPrice_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSetKitPrice_delegate(SalesLine _salesLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingKitIdForItemAndInventDim_delegate</Name>
				<Source><![CDATA[
    delegate void kittingKitIdForItemAndInventDim_delegate(ItemId _itemId, InventDim _inventDim, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingKitIdForItemAndInventDim</Name>
				<Source><![CDATA[
    private ItemIdBase kittingKitIdForItemAndInventDim(ItemIdBase _default)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingKitIdForItemAndInventDim_delegate(this.ItemId, this.inventDim(), resultValue);
        return resultValue.hasResult() ? resultValue.result() : _default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingInitInventDim_delegate</Name>
				<Source><![CDATA[
    delegate void kittingInitInventDim_delegate(SalesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingInitInventDim</Name>
				<Source><![CDATA[
    private InventDimId kittingInitInventDim(InventDimId _default)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingInitInventDim_delegate(this, resultValue);
        return resultValue.hasResult() ? resultValue.result() : _default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiryCheckDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines the date, to check against for the expiry date.
    /// </summary>
    /// <returns>The date to check against for the expiry date.</returns>
    [Hookable(false)]
    internal TransDate getExpiryCheckDate()
    {
        TransDate expDate;
        
        switch(true)
        {
            case (this.ReceiptDateConfirmed != dateNull()):
                expDate = this.ReceiptDateConfirmed;
                break;

            case (this.ReceiptDateRequested != dateNull()):
                expDate = this.ReceiptDateRequested;
                break;

            case (this.ShippingDateConfirmed != dateNull()):
                expDate = this.ShippingDateConfirmed;
                break;

            case (this.ShippingDateRequested != dateNull()):
                expDate = this.ShippingDateRequested;
                break;
        }

        return expDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipPriceDiscCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method returns the skipPriceDisc Flag state
    /// </summary>
    /// <param name = "_salesLineOrig">
    ///		The original version of the sales line record.
    /// </param>
    /// <returns>
    ///     Returns true if the sales order line price calculation should be skipped,
    ///     otherwise false.
    /// </returns>
    protected boolean mustSkipPriceDiscCalc(SalesLine _salesLineOrig)
    {
        return this.SkipPriceDiscCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedProjectPOStatusOpenOrReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales order or item requirement is linked to purchase order which is in open or received status.
    /// </summary>
    /// <param name = "_salesLine">
    /// The sales order line record.
    /// </param>
    /// <returns>
    /// A container that contains the <c>isLinkedToPO</c> and <c>PurchId</c> specifying true if the sales order or item requirement
    /// is linked to purchase order, otherwise false.
    /// </returns>
    internal static container isLinkedProjectPOStatusOpenOrReceived(SalesLine _salesLine)
    {
        PurchTable purchTableLocal;
        boolean isLinkedToPO = false;

        ProjId projIdAssocWithSalesLine = _salesLine.ProjId ? _salesLine.ProjId : _salesLine.salesTable().ProjId;

        if (projIdAssocWithSalesLine)
        {
            PurchLine purchLineLocal;
            InterCompanyPurchSalesReference interCompanyPurchSalesReference;

            select firstonly RecId, PurchId from purchTableLocal
                where purchTableLocal.InterCompanyOriginalSalesId == _salesLine.SalesId
                    && purchTableLocal.ProjId == projIdAssocWithSalesLine
                    && (purchTableLocal.PurchStatus == PurchStatus::Backorder || purchTableLocal.PurchStatus == PurchStatus::Received)
                exists join purchLineLocal
                    where purchLineLocal.PurchId == purchTableLocal.PurchId
                exists join interCompanyPurchSalesReference
                    where interCompanyPurchSalesReference.PurchId == purchLineLocal.PurchId
                        && interCompanyPurchSalesReference.SalesId == _salesLine.SalesId;

            if (purchTableLocal)
            {
                isLinkedToPO = true;
            }
        }

        return [isLinkedToPO, purchTableLocal.PurchId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBySalesIdAndDeliveryName</Name>
				<Source><![CDATA[
    public static boolean existBySalesIdAndDeliveryName(SalesId _salesId, LogisticsDeliveryName _deliverName)
    {
        return _salesId &&
            (select firstonly RecId from salesLine
                where salesLine.SalesId       == _salesId
                    && salesLine.DeliveryName == _deliverName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineManualDiscountPercentageAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the item prevents manual discount, then user should not be allowed to set line manual discount percentage on the sales line.
    /// </summary>
    /// <param name = "salesLine">The sales line.</param>
    /// <returns>true if the line manual discount percentage is allowed on the sales line; otherwise, false.</returns>
    internal boolean isLineManualDiscountPercentageAllowed(SalesLine salesLine)
    {
        // The configuration parameter aims to control the behavior change of how manual line discount replaces system discount in retail pricing engine calculation.
        // It's reused here for UI enhancement in HQ side, i.e. prevent user from editing line manual discount percentage.
        if (!RetailConfigurationParameters::getRetailRemoveSystemDiscountWhenManualDiscountIsBlocked() && salesLine.ItemId != null)
        {
            RetailInventTable retailInventTable = RetailInventTable::find(salesLine.ItemId);

            if (retailInventTable.noManualDiscountAllowed == NoYes::Yes)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalInventUnitPerDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesQty pickedInTotalInventUnitPerDim(InventDim _inventDim)
    {
        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }

        return -InventTransIdSumSingleStatus::qtyPickedPhysicalDimension(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId),
                                                                        _inventDim,
                                                                        _inventDim.toDimParm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInventInTotalPerDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesQty deliveredInventInTotalPerDim(InventDim _inventDim)
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty;

        if (!this.InventTransId || !this.isStocked())
        {
            return 0;
        }
        inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        inventTransIdSum.parmInventDimCriteria(_inventDim);
        inventTransIdSum.parmInventDimParmCriteria(_inventDim.toDimParm());
        
        inventQty = -(inventTransIdSum.physical() + inventTransIdSum.financial());

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPickedInTotalPerDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesQty pdsCWPickedInTotalPerDim(InventDim _inventDim)
    {
        if (!this.InventTransId)
        {
            return 0;
        }

        return -InventTransIdSumSingleStatus::pdsCWQtyPickedPhysicalDimension(InventTransOriginSalesLine::findInventTransOriginId(this.DataAreaId, this.InventTransId),
                                                                                _inventDim,
                                                                                _inventDim.toDimParm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeliveredInTotalPerDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesQty pdsCWDeliveredInTotalPerDim(InventDim _inventDim)
    {
        PdsCWDelivered          pdsCWDelivered;
        InventDim               inventDimTest;
        CustInvoiceTrans        custInvoiceTrans;
        CustPackingSlipTrans    custPackingSlipTrans;

        if (!this.InventTransId)
        {
            return 0;
        }

        if (hasFieldAccess(tableNum(CustInvoiceTrans),
                           fieldNum(CustInvoiceTrans, PdsCWQtyPhysical),
                           AccessType::View)
            && hasFieldAccess(tableNum(CustInvoiceTrans),
                              fieldNum(CustInvoiceTrans, PdsCWQty),
                              AccessType::View))
        {
            select sum(PdsCWQtyPhysical)
                    from custInvoiceTrans
                    where custInvoiceTrans.InventTransId
                            == this.InventTransId
                #InventDimExistsJoin(custInvoiceTrans.inventDimId, inventDimTest, _inventDim, _inventDim.toDimParm());

            pdsCWDelivered = custInvoiceTrans.PdsCWQtyPhysical;

            select sum(PdsCWQty)
                    from custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId
                            == this.InventTransId
                #InventDimExistsJoin(custPackingSlipTrans.inventDimId, inventDimTest, _inventDim, _inventDim.toDimParm());

            pdsCWDelivered += custPackingSlipTrans.PdsCWQty;
        }

        return pdsCWDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSourceDocumentLineCreation</Name>
				<Source><![CDATA[
    protected boolean skipSourceDocumentLineCreation(SalesLineType _salesLineType)
    {
        boolean skipCreationOfSourceDocumentLine = true;

        // Still create sourceDocumentLine for salesLine when this is a non-stocked item                
        if (!this.isStocked() || 
            !SalesTable::disableCreationOfSDAFImplementationDataForSalesOrders())
        {
            skipCreationOfSourceDocumentLine = false;
        }

        //Check for Kanban setup and create the SDL if Kanban is used for the Sales order line
        if (KanbanFindRules::ruleMayExist(this.ItemId,LeanReplenishmentStrategy::Event) && skipCreationOfSourceDocumentLine)
        {
            skipCreationOfSourceDocumentLine = false;
        }

        return skipCreationOfSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSplitReturnLineWithZeroExpectedReturnQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void deleteSplitReturnLineWithZeroExpectedReturnQty(InventTransId _inventTransId)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesLine newLine = SalesLine::findInventTransId(_inventTransId, true);

        if (newLine && ((PdsGlobal::pdsIsCWItem(newLine.ItemId) && !newLine.PdsCWExpectedRetQty) || !newLine.ExpectedRetQty))
        {
            newLine.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnOrder</Name>
				<Source><![CDATA[
    internal boolean isReturnOrder()
    {
        return this.SalesQty < 0 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialQuantity</Name>
				<Source><![CDATA[
    internal InventQty getFinancialQuantity()
    {
        InventTrans relatedInventTrans;
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(this.InventTransId);

        if (!this.isReturnOrder())
        {
            select sum(Qty) from relatedInventTrans
                    where relatedInventTrans.StatusIssue == StatusIssue::Deducted
                       && relatedInventTrans.StatusReceipt == StatusReceipt::None
                       && relatedInventTrans.InventTransOrigin == inventTransOrigin.RecId;
        }
        else
        {
            select sum(Qty) from relatedInventTrans
                    where relatedInventTrans.StatusIssue == StatusIssue::None
                       && relatedInventTrans.StatusReceipt == StatusReceipt::Received
                       && relatedInventTrans.InventTransOrigin == inventTransOrigin.RecId;
        }

        return -relatedInventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoicedPackingSlipQuantityMatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesQty totalInvoicedPackingSlipQuantityMatch()
    {
        CustInvoicePackingSlipQuantityMatch custInvoicePackingSlipQuantityMatch;
        CustInvoiceTrans custInvoiceTrans;
        CustPackingSlipTrans custPackingSlipTrans;

        select sum(Quantity) from custInvoicePackingSlipQuantityMatch
            exists join custInvoiceTrans 
                where custInvoiceTrans.SourceDocumentLine == custInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine
                    && custInvoiceTrans.InventTransId == this.InventTransId
            exists join custPackingSlipTrans 
                where custPackingSlipTrans.SourceDocumentLine == custInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine;

        return custInvoicePackingSlipQuantityMatch.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysicalQuantity</Name>
				<Source><![CDATA[
    internal InventQty getPhysicalQuantity()
    {
        InventTrans relatedInventTrans;
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(this.InventTransId);

        if (!this.isReturnOrder())
        {
            select sum(Qty) from relatedInventTrans
                    where relatedInventTrans.StatusIssue > StatusIssue::Deducted
                       && relatedInventTrans.StatusReceipt == StatusReceipt::None
                       && relatedInventTrans.InventTransOrigin == inventTransOrigin.RecId;
        }
        else
        {
            select sum(Qty) from relatedInventTrans
                    where relatedInventTrans.StatusIssue == StatusIssue::None
                       && relatedInventTrans.StatusReceipt > StatusReceipt::Received
                       && relatedInventTrans.InventTransOrigin == inventTransOrigin.RecId;
        }

        return -relatedInventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipUpdateLogic</Name>
				<Source><![CDATA[
    private boolean shouldSkipUpdateLogic(SalesInstrumentationLogger _logger)
    {       
        using (var activityContext = _logger.salesOrderActivities().skipUpdateValidation(this))
        {
            SalesLineSkipBusinessLogicContext salesLineSkipBusinessLogicContext = SalesLineSkipBusinessLogicContext::current();

            if (salesLineSkipBusinessLogicContext && salesLineSkipBusinessLogicContext.parmSkipUpdate())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static SalesInstrumentationLogger instrumentationLogger()
    {
        return SalesInstrumentationLogger::createLogger(tableStr(SalesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>impliedDataAreaFieldNameDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageTableReferenceProcessor), delegatestr(DimensionObjectStorageTableReferenceProcessor, impliedDataAreaFieldNameDelegate))]
    static void impliedDataAreaFieldNameDelegate(TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(SalesLine))
        {
            switch(_fieldId)
            {
                case(fieldNum(SalesLine, LedgerDimension)):
                case(fieldNum(SalesLine, DefaultDimension)):
                    _result.result(fieldStr(SalesLine, SourcingCompanyId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearConfirmedDates</Name>
				<Source><![CDATA[
    internal void clearConfirmedDates()
    {
        this.ShippingDateConfirmed = dateNull();
        this.ReceiptDateConfirmed = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryDateControlTypeClassicCTP</Name>
				<Source><![CDATA[
    internal boolean isDeliveryDateControlTypeClassicCTP()
    {
        return MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(this.DeliveryDateControlType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryDateControlTypeMpsCTP</Name>
				<Source><![CDATA[
    internal boolean isDeliveryDateControlTypeMpsCTP()
    {
        return MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeMpsCTP(this.DeliveryDateControlType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransDatesAndStatusForFullRunCTP</Name>
				<Source><![CDATA[
    private void updateReqTransDatesAndStatusForFullRunCTP()
    {
        this.updateReqTransDatesFromShippingDateConfirmed();

        this.setFullRunCTPStatusOnSalesLineUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesCalculateAvailableDeliveryDateControl</Name>
				<Source><![CDATA[
    internal void validateSalesCalculateAvailableDeliveryDateControl(FieldId _fieldId = 0)
    {
        SalesCalcAvailableDlvDates_SalesLine salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates_SalesLine::newSalesCalcAvailableDlvDates_SalesLine(this, _fieldId);
        salesCalcAvailableDlvDates.modifiedField(this, false, false, true);

        if (salesCalcAvailableDlvDates.parmErrorText())
        {
            warning(salesCalcAvailableDlvDates.parmErrorText());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFullRunCTPStatusOnSalesLineModifiedField</Name>
				<Source><![CDATA[
    private void setFullRunCTPStatusOnSalesLineModifiedField()
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            MPSFullRunCTPStatus newStatus = MpsFullRunCtpStatusResolver::getFullRunCTPStatusOnSalesLineModifiedField(this);

            if (MpsDeliveryDateControlTypeCTPHelper::isMpsOnlineCTPFeatureEnabled())
            {
                this.setMPSFullRunCTPStatus(newStatus);
            }
            else
            {
                this.MPSFullRunCTPStatus = newStatus;

                if (newStatus == MPSFullRunCTPStatus::NotReady)
                {
                    this.clearConfirmedDates();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFullRunCTPStatusOnSalesLineModifiedInventDim</Name>
				<Source><![CDATA[
    private void setFullRunCTPStatusOnSalesLineModifiedInventDim(Set modifiedInventDimFields)
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            MPSFullRunCTPStatus newStatus = MpsFullRunCtpStatusResolver::getFullRunCTPStatusOnModifiedInventDim(this, modifiedInventDimFields);

            if (MpsDeliveryDateControlTypeCTPHelper::isMpsOnlineCTPFeatureEnabled())
            {
                this.setMPSFullRunCTPStatus(newStatus);
            }
            else
            {
                this.MPSFullRunCTPStatus = newStatus;

                if (newStatus == MPSFullRunCTPStatus::NotReady)
                {
                    this.clearConfirmedDates();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFullRunCTPStatusOnSalesLineUpdate</Name>
				<Source><![CDATA[
    private void setFullRunCTPStatusOnSalesLineUpdate()
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            MPSFullRunCTPStatus newStatus = MpsFullRunCtpStatusResolver::getFullRunCTPStatusOnSalesLineUpdate(this);

            if (MpsDeliveryDateControlTypeCTPHelper::isMpsOnlineCTPFeatureEnabled())
            {
                this.setMPSFullRunCTPStatus(newStatus);

                if (newStatus == MPSFullRunCTPStatus::NotReady)
                {
                    // Show warning on changing status to Not ready.
                    if (this.orig().MPSFullRunCTPStatus == MPSFullRunCTPStatus::Ready && this.DeliveryDateControlType == SalesDeliveryDateControlType::FullRunCTP)
                    {
                        warning("@SCM:MPSFullRunCTP_SalesLineNotInSyncWithPlanResult_CalculateConfirmedDates_Warning");
                    }
                }
            }
            else
            {
                this.MPSFullRunCTPStatus = newStatus;

                if (newStatus == MPSFullRunCTPStatus::NotReady)
                {
                    this.clearConfirmedDates();

                    // Show warning on changing status to Not ready.
                    if (this.orig().MPSFullRunCTPStatus == MPSFullRunCTPStatus::Ready)
                    {
                        warning("@SCM:MPSFullRunCTP_SalesLineNotInSyncWithPlanResult_CalculateConfirmedDates_Warning");
                    }
                }
            }

            

            this.MPSFullRunCTPStatus = newStatus;
        }
        else
        {
            // For non FullRunCTP lines, the MPSFullRunCTPStatus should always be Ready.
            this.MPSFullRunCTPStatus = MPSFullRunCTPStatus::Ready;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFullRunCTPStatusOnSalesLineInsert</Name>
				<Source><![CDATA[
    private void setFullRunCTPStatusOnSalesLineInsert()
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            if (MpsDeliveryDateControlTypeCTPHelper::isMpsOnlineCTPFeatureEnabled())
            {
                this.setMPSFullRunCTPStatus(MPSFullRunCTPStatus::NotReady);
            }
            else
            {
                this.MPSFullRunCTPStatus = MPSFullRunCTPStatus::NotReady;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTableFullRunCTPStatusOnSalesLineInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sales order header 'Batch CTP status' field after a sales line got inserted.
    /// </summary>
    /// <param name="_salesTable">The sales order record of the sales line.</param>
    /// <remarks>
    /// The only insertion that can affect the 'Batch CTP status' of the sales order header is the insertion
    /// of a 'Batch CTP' line. In this case, the sales order header 'Batch CTP status'
    /// will always have to be updated to Not Ready, as a newly created 'Batch CTP' line is always Not Ready.
    /// </remarks>
    private void setSalesTableFullRunCTPStatusOnSalesLineInsert(SalesTable _salesTable)
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            _salesTable.MPSFullRunCTPStatus = MpsFullRunCTPStatus::NotReady;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTableMpsCTPStatusOnSalesLineDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sales order header 'Batch CTP status' field after a sales line got deleted.
    /// </summary>
    /// <param name="_salesTable">The sales order record of the sales line.</param>
    /// <remarks>
    /// The only lines that affect the 'Batch CTP status' of the header are 'Batch CTP' lines.
    /// So, this logic will only be executed if a 'Batch CTP' sales line got deleted.
    /// The status on the header can change to Ready or Not Ready.
    /// </remarks>
    private void setSalesTableMpsCTPStatusOnSalesLineDeleted(SalesTable _salesTable)
    {
        if (this.isDeliveryDateControlTypeMpsCTP())
        {
            _salesTable.MPSFullRunCTPStatus = MpsFullRunCtpStatusResolver::getSalesTableFullRunCTPStatusFromAllSalesLines(_salesTable.SalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableFullRunCTPStatusOnSalesLineUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales order header 'Batch CTP status' field after a sales line got updated.
    /// </summary>
    /// <param name="_salesTable">The sales order record of the sales line.</param>
    /// <param name="_salesLineOrig">The original sales line.</param>
    /// <remarks>
    /// The only lines that affect the 'Batch CTP status' of the header are 'Batch CTP' lines.
    /// So, this logic will only be executed if a 'Batch CTP' sales line got updated.
    /// That includes changes on a 'Batch CTP' sales line's delivery date control type change,
    /// that's why we check the original record as well.
    /// The status on the header can change to Ready or Not Ready.
    /// </remarks>
    private void updateSalesTableFullRunCTPStatusOnSalesLineUpdated(SalesTable _salesTable, SalesLine _salesLineOrig)
    {
        if (this.isDeliveryDateControlTypeMpsCTP() || _salesLineOrig.isDeliveryDateControlTypeMpsCTP())
        {
            _salesTable.updateFullRunCTPStatusOnSalesLineUpdated();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUsePriceIncludesTaxFindingTieredCharge</Name>
				<Source><![CDATA[
    private boolean shouldUsePriceIncludesTaxFindingTieredCharge()
    {
        if (this.salesTable().InclTax)
        {
            boolean isFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(RetailImprovedTieredChargeFindingFeature::instance());

            if (isFeatureEnabled)
            {
                CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
                eventSource.EventWriteFeatureUsed(
                    'RetailImprovedTieredChargeFindingFeature',
                    'SalesLine',
                    'shouldUsePriceIncludesTaxFindingTieredCharge',
                    '');
            }

            return isFeatureEnabled;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMPSFullRunCTPStatus</Name>
				<Source><![CDATA[
    public void setMPSFullRunCTPStatus(MPSFullRunCTPStatus _newStatus)
    {
        this.MPSFullRunCTPStatus = _newStatus;

        if (_newStatus == MPSFullRunCTPStatus::NotReady)
        {
            this.clearConfirmedDates();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124481</DeveloperDocumentation>
	<Label>@SYS508</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SalesLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>TransIdIdx</PrimaryIndex>
	<ReplacementKey>TransIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCROrderLine2PriceHistoryRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRContinuityCustLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRContinuityCustLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxServiceTariff</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxServiceTariff</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustomsExportAssessableValue_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsExportAssessableValue_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustomsExportOrderTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsExportOrderTable_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximSalesLine_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximSalesLine_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventQualityOrderTable</Name>
			<Relation></Relation>
			<Table>InventQualityOrderTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesLineForeignTradeCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesLineForeignTradeCategory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AgreementLine</Name>
			<Label>@SYS184156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingAgreementLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailVariantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllVar</Name>
			<Label>@MCR36253</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Barcode</Name>
			<Label>@SYS24296</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BarCodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Block</Name>
			<Label>@SYS28075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMRoute</Name>
			<Label>@SYS22227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CarrierInfo</Name>
			<Label>@SYS50722</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Commission</Name>
			<Label>@SYS2489</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerRef</Name>
			<Label>@SYS23010</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchorderFormNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateConfirmed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDeliveryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliverySalesTax_BR</Name>
			<Label>@GLS510094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryTaxItemGroup_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryTaxGroup_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineReference_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EletronicInvoice_MX</Name>
			<Label>@SYS341961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsDocNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsDocDate_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsName_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Consignment_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Samples_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATProductCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATUnitCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATTariffFraction_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATCustomUnitOfMeasure_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATCustomsQty_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalReference</Name>
			<Label>@SYS21697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets_RU</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatTriangularDeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceGTDId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticValue_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intercompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>interCompanyOriginDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyReference</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyInventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribAutoRes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsSameLot</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemProject</Name>
			<Label>@SYS70466</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Market</Name>
			<Label>@MCR22789</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRBroker</Name>
			<Label>@MCR21408</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRGift</Name>
			<Label>@MCR10262</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRPotencies</Name>
			<Label>@MCR20146</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRPriceGroup</Name>
			<Label>@SYS4707</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRTemplateLines</Name>
			<Label>@SYS31797</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRUngrouped</Name>
			<Label>@MCR37131</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderLine</Name>
			<Label>@SYS22920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderLines</Name>
			<Label>@SYS508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierDlvType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackagingMaterial</Name>
			<Label>@SYS72995</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingUnitQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWInventory</Name>
			<Label>@PDS83</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventDeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWInvoicedInTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWDeliveredInTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWPickedInTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWReservedPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWReservedOnOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWOnOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWQty</Name>
			<Label>@PDS1059</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWExpectedRetQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsItemRebateGroup</Name>
			<Label>@PRO1317</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsItemRebateGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsRebate</Name>
			<Label>@PDS1053</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsExcludeFromRebate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsSameLot</Name>
			<Label>@PDS551</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsSameLot</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Personalization</Name>
			<Label>@SYS94527</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceAgreementDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectAmount</Name>
			<Label>@SYS67870</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS9408</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAProjProposalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjProposalInventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Retail</Name>
			<Label>@RET3014</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailVariantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailInventoryBlocking</Name>
			<Label>@REX4520131</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailBlockQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnGroup</Name>
			<Label>@SYS101133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scrap</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnGroupRMA</Name>
			<Label>@SYS101133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnAllowReservation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOrderProject</Name>
			<Label>@SYS7806</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesQuantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainSalesPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainSalesFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceOrder</Name>
			<Label>@SYS79077</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS16512</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemReplaced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDeadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedRetQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnArrivalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnClosedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>originalInvoiceId_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralItemInfo</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MpsExcludeSalesLine</Name>
			<Label>@SCMPlanning:MpsMasterPlanning</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementSkipAutoLink</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementSkipAutoLink</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RAssetIdOpen</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesBarCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaseTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDCaseTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Complete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionName_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AddressCountryRegionName</ExtendedDataType>
			<Label>@GLS101550</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditNoteInternalRef_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditNoteInternalRef_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditNoteReasonCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReasonTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS302</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS3815</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CustomerLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRefLine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CustomsDocDate_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDocDate_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomsDocNumber_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDocNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomsName_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsName_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>TradeMultiShipTo</ConfigurationKey>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryTaxGroup_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS510088</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryTaxItemGroup_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS510092</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineDlvTypeId</ExtendedDataType>
			<EnumType>TradeLineDlvType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedRetQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnExpectedRetQty</ExtendedDataType>
			<Label>@SCM:ExpectedRetQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>TradeInterCompany</ConfigurationKey>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>InterCompanyOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS17214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransIdReturn</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceGTDId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreeInvoiceGTDId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemReplaced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnItemReplaced</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDItemTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineDeliveryType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LineDeliveryType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineHeader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MatchingAgreementLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOverDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingUnitQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PalletTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDPalletTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribAutoRes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribAutoRes</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWExpectedRetQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWExpectedRetQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS73</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS75</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS96</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsExcludeFromRebate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsExcludeFromRebate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsItemRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsItemRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsSameLot</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSameLot</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsSameLotOverride</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSameLotOverride</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PriceAgreementDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceAgreementDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyNumber_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>String30</ExtendedDataType>
			<Label>@PSA10946</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAProjProposalInventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SCM:PSAProjProposalInventQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAProjProposalQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SCM:PSAProjProposalQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchorderFormNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SCM:QtyOrdered</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateConfirmed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateConfirmed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefReturnInvoiceTrans_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefReturnInvoiceTrans_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainSalesFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS22380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainSalesPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemReservation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailBlockQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBlockQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailVariantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnAllowReservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnAllowReservation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnArrivalDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnArrivalDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnClosedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnClosedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnDeadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDeadline</ExtendedDataType>
			<Label>@SYS106124</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnDispositionCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReturnStatusLine</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS17214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS7161</Label>
			<EnumType>SalesStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1201</Label>
			<EnumType>SalesType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Scrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24894</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccountCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierDlvType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<EnumType>ShipCarrierDlvType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsShipCarrierName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipCarrierPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateConfirmed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateConfirmed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StatisticValue_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtIntrastatStatisticValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatTriangularDeal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTriangularDeal</ExtendedDataType>
			<FeatureClass>IntrastatTriangularDealToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StockedProduct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeStockedProduct</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnderDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnderDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>QuantityErrorCorrectionMethods</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCreateMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSkipCreateMarkup</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourcingCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntercompanySourcingCompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourcingInventSiteId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSourcingInventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourcingInventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSourcingInventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourcingVendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntercompanySourcingVendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourcingOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSourcingOriginType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>SalesSourcingOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderLineReference_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrderLineReference_NO</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDefaultingSourcingVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipIntercompanyPurchOrderAccountingDistribution</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineCreationSequenceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineCreationSequenceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SyncPurchLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SyncIntercompanyPurchLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDeliveryScheduleUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATProductCode_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATProductCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATUnitCode_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATUnitCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipAssignInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSkipCreateMarkup</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoCreateInterCompanyOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SalesOrderSourceDocumentExtension</ConfigurationKey>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPriceDiscCalc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SATCustomsQty_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATCustomsQty_MX</ExtendedDataType>
			<Label>@MexicoCFDI:SATCustomsQuantity</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Consignment_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Consignment_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Samples_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Samples_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATCustomUnitOfMeasure_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATCustomUnitOfMeasure_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATTariffFraction_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATTariffFraction_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>McrMarginPercent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>McrMarginPercent</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>McrMarginUpdated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>McrMarginUpdated</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesSalesOrderCreationMethod</Name>
			<EnumType>SalesSalesOrderCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
			<FeatureClass>ProjItemRequirementMultipleFundingSources</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceReservationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceReservationId</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryServiceAutoOffset</Name>
			<FeatureClass>InventInventoryDataServiceFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MPSFullRunCTPStatus</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<FeatureClass>MpsFullRunCTPFeature</FeatureClass>
			<HelpText>@SCM:MPSFullRunCTPStatusSalesLineHelpText</HelpText>
			<EnumType>MPSFullRunCTPStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SoftReserveBlockLevel</Name>
			<FeatureClass>InventInventoryDataServiceSoftReservationFeature</FeatureClass>
			<Label>@SCM:InventoryServiceSoftReserveSalesLineBlockLevelLabel</Label>
			<EnumType>SoftReserveBlockLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSoftReservedExternally</Name>
			<AllowEdit>No</AllowEdit>
			<FeatureClass>InventInventoryDataServiceSoftReservationFeature</FeatureClass>
			<Label>@SCM:InventoryServiceSalesLineReservedExternalLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPriceDiscCalcInBulkCreation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>TradeIntegrationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>SalesOrderFinTagFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceAdjustmentOffsetDatasource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceAdjustmentOffsetDataSource</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceAdjustmentOffsetFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceAdjustmentOffsetPhysicalMeasure</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceAdjustmentOffsetPhysicalMeasure</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceAdjustmentOffsetFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MpsExcludeSalesLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>MpsExcludeSalesLine</ExtendedDataType>
			<FeatureClass>MpsExcludeSpecificSalesOrdersAndSalesLinesFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MpsUpdateExcludeSalesLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<FeatureClass>MpsExcludeSpecificSalesOrdersAndSalesLinesFeature</FeatureClass>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPriceDiscCalcOnImport</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesOrderIntegrationCreationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>SalesOrderIntegrationCreationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceDiscLookupCacheKey</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>InventDimSHA3HashHex</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<HelpText>@TaxTrans:TaxIDHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultLineNumberFromLineCreationSequenceNumber</Name>
			<ExtendedDataType>SalesDefaultLineNumberFromLineCreationSequenceNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventRefTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventRefTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MatchingAgreementLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdReturnIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesQty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PSAContractLineItemsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>aggregationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesUnit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DlvMode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesPrice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LinePercent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustTimeStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailVariantId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesType</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesLineCreationSequenceIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesStatusDeliverNowIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesDeliverNow</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdSalesQtyIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesQty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DlvMode</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesStatusAndDelivery</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShippingDateConfirmed</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShippingDateRequested</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DlvModeStatusShippingDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DlvMode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreditNoteReasonCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditNoteReasonCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventoryServiceReservationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventoryServiceReservationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjSalesStatusBockedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Project</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Blocked</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>MCRHistSalesLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefRecId</MapField>
					<MapFieldTo>AddressRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefTableId</MapField>
					<MapFieldTo>AddressRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BarCode</MapField>
					<MapFieldTo>BarCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BarCodeType</MapField>
					<MapFieldTo>BarCodeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Blocked</MapField>
					<MapFieldTo>Blocked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CaseTagging</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Complete</MapField>
					<MapFieldTo>Complete</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
					<MapFieldTo>ConfirmedDlv</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPrice</MapField>
					<MapFieldTo>CostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountyOrigDest</MapField>
					<MapFieldTo>CountyOrigDest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustGroup</MapField>
					<MapFieldTo>CustGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerLineNum</MapField>
					<MapFieldTo>CustomerLineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
					<MapFieldTo>DeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EInvoiceAccountCode</MapField>
					<MapFieldTo>EInvoiceAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExpectedRetQty</MapField>
					<MapFieldTo>ExpectedRetQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyInventTransId</MapField>
					<MapFieldTo>InterCompanyInventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOrigin</MapField>
					<MapFieldTo>InterCompanyOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDeliverNow</MapField>
					<MapFieldTo>InventDeliverNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefId</MapField>
					<MapFieldTo>InventRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefTransId</MapField>
					<MapFieldTo>InventRefTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefType</MapField>
					<MapFieldTo>InventRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdReturn</MapField>
					<MapFieldTo>InventTransIdReturn</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
					<MapFieldTo>ItemBOMId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemReplaced</MapField>
					<MapFieldTo>ItemReplaced</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
					<MapFieldTo>ItemRouteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemTagging</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
					<MapFieldTo>LineDeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineHeader</MapField>
					<MapFieldTo>LineHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangepolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MatchingAgreementLine</MapField>
					<MapFieldTo>MatchingAgreementLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRBrokerContractID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRBrokerID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRContinuityScheduleId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCreateReplacement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustInvoiceTransRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDropShipComment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDropShipment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDropShipStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRExpedite</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRInstallmentEligible</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRInventDimIdOrig</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRInvoicedInTotal</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRItemIdOrig</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRLineDiscGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRLineType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRListPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRListPriceCurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRParentLotId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPickWaveRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPriceGroupId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPriceOverride</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRSalesUOM</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipToAccountRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRSourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRUpSellOrigin</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRUpSellOriginRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRWMSStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverDeliveryPct</MapField>
					<MapFieldTo>OverDeliveryPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackingUnit</MapField>
					<MapFieldTo>PackingUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackingUnitQty</MapField>
					<MapFieldTo>PackingUnitQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PalletTagging</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
					<MapFieldTo>Port</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchorderFormNum</MapField>
					<MapFieldTo>PurchorderFormNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
					<MapFieldTo>ReceiptDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainInventFinancial</MapField>
					<MapFieldTo>RemainInventFinancial</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainInventPhysical</MapField>
					<MapFieldTo>RemainInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainSalesFinancial</MapField>
					<MapFieldTo>RemainSalesFinancial</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainSalesPhysical</MapField>
					<MapFieldTo>RemainSalesPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Reservation</MapField>
					<MapFieldTo>Reservation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnAllowReservation</MapField>
					<MapFieldTo>ReturnAllowReservation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnArrivalDate</MapField>
					<MapFieldTo>ReturnArrivalDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnClosedDate</MapField>
					<MapFieldTo>ReturnClosedDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnDeadline</MapField>
					<MapFieldTo>ReturnDeadline</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnDispositionCodeId</MapField>
					<MapFieldTo>ReturnDispositionCodeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnStatus</MapField>
					<MapFieldTo>ReturnStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesDeliverNow</MapField>
					<MapFieldTo>SalesDeliverNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesGroup</MapField>
					<MapFieldTo>SalesGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesLineRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesMarkup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesStatus</MapField>
					<MapFieldTo>SalesStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesType</MapField>
					<MapFieldTo>SalesType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Scrap</MapField>
					<MapFieldTo>Scrap</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceOrderId</MapField>
					<MapFieldTo>ServiceOrderId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
					<MapFieldTo>ShipCarrierAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
					<MapFieldTo>ShipCarrierAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
					<MapFieldTo>ShipCarrierDlvType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierId</MapField>
					<MapFieldTo>ShipCarrierId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierName</MapField>
					<MapFieldTo>ShipCarrierName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierPostalAddress</MapField>
					<MapFieldTo>ShipCarrierPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
					<MapFieldTo>SkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>StatProcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatTriangularDeal</MapField>
					<MapFieldTo>StatTriangularDeal</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAutogenerated</MapField>
					<MapFieldTo>TaxAutogenerated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdGroup</MapField>
					<MapFieldTo>TaxWithholdGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
					<MapFieldTo>Transport</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnderDeliveryPct</MapField>
					<MapFieldTo>UnderDeliveryPct</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>MCRMarginAlertMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
					<MapFieldTo>LineDeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscResultFields</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangePolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDiscCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecieptDeliveryDate</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntryChangePolicy</MapField>
					<MapFieldTo>SystemEntryChangePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjProposalTransMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesDeliveryDateControlMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
					<MapFieldTo>ReceiptDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
					<MapFieldTo>ShipCarrierAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
					<MapFieldTo>ShipCarrierAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
					<MapFieldTo>ShipCarrierDlvType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierID</MapField>
					<MapFieldTo>ShipCarrierId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
					<MapFieldTo>SkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipPriceDiscCalcInBulkCreation</MapField>
					<MapFieldTo>SkipPriceDiscCalcInBulkCreation</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine_W</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile_RU</MapField>
					<MapFieldTo>PostingProfile_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAgreementDate_RU</MapField>
					<MapFieldTo>PriceAgreementDate_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesShipCarrierMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
					<MapFieldTo>ShipCarrierAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
					<MapFieldTo>ShipCarrierAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
					<MapFieldTo>ShipCarrierDlvType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierId</MapField>
					<MapFieldTo>ShipCarrierId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierName</MapField>
					<MapFieldTo>ShipCarrierName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierPostalAddress</MapField>
					<MapFieldTo>ShipCarrierPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TMSLoadLineSource</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdIssue</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdReceive</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasureSymbol</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RetailOrderLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariant</MapField>
					<MapFieldTo>RetailVariantId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesGroup</MapField>
					<MapFieldTo>SalesGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesMarkup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderCreationMethod</MapField>
					<MapFieldTo>SalesSalesOrderCreationMethod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>IntercompanySourcingSpecification</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
					<MapFieldTo>DeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourcingCompanyId</MapField>
					<MapFieldTo>SourcingCompanyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourcingInventLocationId</MapField>
					<MapFieldTo>SourcingInventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourcingInventSiteId</MapField>
					<MapFieldTo>SourcingInventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourcingOrigin</MapField>
					<MapFieldTo>SourcingOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourcingVendAccount</MapField>
					<MapFieldTo>SourcingVendAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>WarrantySalesLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesLineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>WHSOutboundShippableOrderLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderedQuantity</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainInventPhysical</MapField>
					<MapFieldTo>PdsCWRemainInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainInventQuantity</MapField>
					<MapFieldTo>RemainInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainOrderedQuantity</MapField>
					<MapFieldTo>RemainSalesPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasureSymbol</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementLine_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MatchingAgreementLine</Name>
					<Field>MatchingAgreementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BarcodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BarcodeSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarCodeType</Name>
					<Field>BarCodeType</Field>
					<RelatedField>barcodeSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BarcodeSetupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBOMId</Name>
					<Field>ItemBOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesGroup</Name>
					<Field>SalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroup</Name>
					<Field>CustGroup</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefReturnInvoiceTrans_W</Name>
					<Field>RefReturnInvoiceTrans_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile_RU</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile_RU</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DeliveryTaxGroupHeading_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryTaxGroupHeading_BR_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DeliveryTaxGroupHeading_BR_1_SalesLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryTaxGroup_BR</Name>
					<Field>DeliveryTaxGroup_BR</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DeliveryTaxItemGroupHeading_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryTaxItemGroupHeading_BR_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DeliveryTaxItemGroupHeading_BR_1_SalesLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryTaxItemGroup_BR</Name>
					<Field>DeliveryTaxItemGroup_BR</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemBarcode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemBarcode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarCode</Name>
					<Field>BarCode</Field>
					<RelatedField>itemBarCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::InventTransfer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOriginReturn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOriginReturn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdReturn</Name>
					<Field>InventTransIdReturn</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRContinuityCustLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRContinuityCustLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransIDChild</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRCustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MCRCustInvoiceTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInveoiceTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MCROrderLine2PriceHistoryRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCROrderLine2PriceHistoryRef</Name>
					<Field>MCROrderLine2PriceHistoryRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRPurchLineRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventRefTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PackingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PackingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackingUnit</Name>
					<Field>PackingUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsItemRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsItemRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsItemRebateGroupId</Name>
					<Field>PdsItemRebateGroupId</Field>
					<RelatedField>PdsItemRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId_RU</Name>
					<SourceEDT>RAssetIdOpen</SourceEDT>
					<Field>AssetId_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditNoteReasonCode</Name>
					<Field>CreditNoteReasonCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailVariantId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailVariantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>RetailVariantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnDispositionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnDispositionCodeId</Name>
					<Field>ReturnDispositionCodeId</Field>
					<RelatedField>DispositionCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_1_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierPostalAddress</Name>
					<Field>ShipCarrierPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ShipCarrierTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierId</Name>
					<Field>ShipCarrierId</Field>
					<RelatedField>CarrierId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAServiceOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceOrderTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceOrderId</Name>
					<Field>ServiceOrderId</Field>
					<RelatedField>ServiceOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ServiceOrderIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentLine_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTrans_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefReturnInvoiceTrans_W</Name>
					<Field>RefReturnInvoiceTrans_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressState_SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourcingCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcingCompanyId</Name>
					<Field>SourcingCompanyId</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourcingSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcingCompanyId</Name>
					<Field>SourcingCompanyId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcingInventSiteId</Name>
					<Field>SourcingInventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourcingWarehouse</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcingCompanyId</Name>
					<Field>SourcingCompanyId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcingInventLocationId</Name>
					<Field>SourcingInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourcingVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourcingVendAccount</Name>
					<Field>SourcingVendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATProductCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTableProductCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATProductCode_MX</Name>
					<Field>SATProductCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATUnitCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTableUnitCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATUnitCode_MX</Name>
					<Field>SATUnitCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATCustomUnitOfMeasure</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATCustomUnitOfMeasure_MX</Name>
					<Field>SATCustomUnitOfMeasure_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>7</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATTariffFraction_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATTariffFraction_MX</Name>
					<Field>SATTariffFraction_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>6</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDistributionTemplate_SalesLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_SalesLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>