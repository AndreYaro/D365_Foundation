<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleaseSessionProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResReleaseSessionProduct extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existByReleaseSessionProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>EcoResReleaseSessionProduct</c> table.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productRecId">
    /// A product ID.
    /// </param>
    /// <returns>
    /// true if the specified record exists in the <c>EcoResReleaseSessionProduct</c> table; otherwise,
    /// false.
    /// </returns>
    public static boolean existByReleaseSessionProduct(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductRecId          _productRecId)
    {
        EcoResReleaseSessionProduct ecoResReleaseSessionProduct;

        select firstonly RecId from ecoResReleaseSessionProduct
            where   ecoResReleaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                &&  ecoResReleaseSessionProduct.Product         == _productRecId;

        return (ecoResReleaseSessionProduct.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVariantForMasterInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a distinct product variant for a product master exists in a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productMasterRecId">
    /// A product master ID.
    /// </param>
    /// <returns>
    /// true if a distinct product variant for a product master exists in a release session; otherwise,
    /// false.
    /// </returns>
    public static boolean existVariantForMasterInSession(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductMasterRecId    _productMasterRecId)
    {
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResDistinctProductVariant    distinctProductVariant;

        select firstonly RecId from distinctProductVariant
            where distinctProductVariant.ProductMaster          == _productMasterRecId
            exists join releaseSessionProduct
                where   releaseSessionProduct.Product           == distinctProductVariant.RecId
                    &&  releaseSessionProduct.ReleaseSession    == _releaseSessionRecId;

        return (distinctProductVariant.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReleaseSessionProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResReleaseSessionProduct</c> table.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productRecId">
    /// A product ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResReleaseSessionProduct</c> table if it exists; otherwise, an empty record.
    /// </returns>
    public static EcoResReleaseSessionProduct findByReleaseSessionProduct(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductRecId          _productRecId,
        boolean                     _forUpdate = false)
    {
        EcoResReleaseSessionProduct ecoResReleaseSessionProduct;

        ecoResReleaseSessionProduct.selectForUpdate(_forUpdate);

        select firstonly ecoResReleaseSessionProduct
            where   ecoResReleaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                &&  ecoResReleaseSessionProduct.Product         == _productRecId;

        return ecoResReleaseSessionProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductInReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a product is in a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productRecId">
    /// A product ID.
    /// </param>
    /// <returns>
    /// true if a product is in a release session; otherwise, false.
    /// </returns>
    public static boolean isProductInReleaseSession(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductRecId          _productRecId)
    {
        EcoResReleaseSessionProduct ecoResReleaseSessionProduct;

        select firstonly RecId from ecoResReleaseSessionProduct
            where   ecoResReleaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                &&  ecoResReleaseSessionProduct.Product         == _productRecId
                &&  ecoResReleaseSessionProduct.SystemAdded     == NoYes::No;

        return (ecoResReleaseSessionProduct.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfProductsInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of products in a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// The number of products in a release session.
    /// </returns>
    public static int64 numberOfProductsInSession(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct ecoResReleaseSessionProduct;

        select count(RecId) from ecoResReleaseSessionProduct
            where   ecoResReleaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                &&  ecoResReleaseSessionProduct.SystemAdded     == NoYes::No;

        return ecoResReleaseSessionProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfProductVariantForAProductMasterInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of products variants for a product master in a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// The number of products in a release session.
    /// </returns>
    public static int64 numberOfProductVariantForAProductMasterInSession(
        EcoResReleaseSessionRecId _releaseSessionRecId,
        EcoResProductMasterRecId  _productMasterRecId)
    {
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResDistinctProductVariant    distinctProductVariant;

        select count(RecId) from releaseSessionProduct
            where releaseSessionProduct.ReleaseSession  ==  _releaseSessionRecId
            exists join distinctProductVariant
                where   distinctProductVariant.RecId            == releaseSessionProduct.Product
                    &&  distinctProductVariant.ProductMaster    == _productMasterRecId;

        return releaseSessionProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseSessionAddProductsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for all products to be displayed in the add products to release form for the specified release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID
    /// </param>
    /// <returns>
    /// A query for all products to be displayed in the add products to release form for the specified release session.
    /// </returns>
    public static Query releaseSessionAddProductsQuery(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        Query query = new Query(queryStr(EcoResProductReleaseAddProduct));

        query.dataSourceName(queryDataSourceStr(EcoResProductReleaseAddProduct, EcoResProduct)).rangeField(
            fieldNum(EcoResProduct, InstanceRelationType)).value(
                SysQuery::valueNot(DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProductVariant))));

        query.dataSourceName(
            queryDataSourceStr(EcoResProductReleaseAddProduct, EcoResReleaseSessionProductNotInSession)).rangeField(
                fieldNum(EcoResReleaseSessionProduct, ReleaseSession)).value(queryValue(_releaseSessionRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseSessionProductsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for all products to be displayed in the release products form for the specified release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID
    /// </param>
    /// <returns>
    /// A query for all products to be displayed in the release products form for the specified release session.
    /// </returns>
    public static Query releaseSessionProductsQuery(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        Query query = new Query(queryStr(EcoResProductRelease));

        query.dataSourceName(queryDataSourceStr(EcoResProductRelease, EcoResProduct)).rangeField(
            fieldNum(EcoResProduct, InstanceRelationType)).value(
                SysQuery::valueNot(DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProductVariant))));

        query.dataSourceName(
            queryDataSourceStr(EcoResProductRelease, EcoResReleaseSessionProduct)).rangeField(
                fieldNum(EcoResReleaseSessionProduct, ReleaseSession)).value(queryValue(_releaseSessionRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseSessionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for all products to be displayed in the open release sessions form.
    /// </summary>
    /// <returns>
    /// A query for all products to be displayed in the open release sessions form.
    /// </returns>
    public static Query releaseSessionQuery()
    {
        Query query = new Query(queryStr(EcoResProductReleaseSession));

        query.dataSourceName(queryDataSourceStr(EcoResProductReleaseSession, EcoResProduct)).rangeField(
            fieldNum(EcoResProduct, InstanceRelationType)).value(
                SysQuery::valueNot(DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProductVariant))));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314046</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS321269</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ReleaseSession</TitleField1>
	<TitleField2>Product</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ReleaseSessionProductIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ReleaseSessionProductIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResReleaseProductLegalEntity</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResReleaseProductLegalEntity</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseSession</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseSession</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReleaseSession</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResReleaseSessionRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemAdded</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReleaseSessionProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReleaseSession</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResProduct_EcoResReleaseSessionProduct</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResReleaseSession</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResReleaseSession</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResReleaseSession</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResReleaseSession_EcoResReleaseSessionProduct</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReleaseSession</Name>
					<Field>ReleaseSession</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>