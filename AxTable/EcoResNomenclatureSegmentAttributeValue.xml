<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclatureSegmentAttributeValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResNomenclatureSegmentAttributeValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSegmentValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentValue(EcoResNomenclatureInput _input)
    {
        EcoResNomenclatureOutput result;
        str attributeName = PCSolverVariable::findByAttribute(this.Attribute).Name;
        Map attributeMap = _input.parmAttributeMap();

        if (attributeMap.exists(attributeName))
        {
            PCAdaptorAttribute adaptorAttribute = attributeMap.lookup(attributeName);
            result = adaptorAttribute.parmParsedValue();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentAttributeName</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentAttributeName()
    {
        EcoResAttribute attribute = EcoResAttribute::find(this.Attribute);
        
        if (attribute)
        {
            return attribute.getAttributeFriendlyName();
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentSampleValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentSampleValue(EcoResNomenclatureInput _input)
    {
        EcoResNomenclatureOutput toRet = "@SYS77030";
        if (this.Attribute)
        {
            EcoResAttributeValue attributeValue;
            select firstonly attributeValue where attributeValue.Attribute == this.Attribute;
            if (attributeValue)
            {
                toRet = attributeValue.valueText();
            }
        }

        return toRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSegmentAllowedForNomenclatureType</Name>
				<Source><![CDATA[
    public static boolean isSegmentAllowedForNomenclatureType(TableId _nomenclatureType)
    {
        return (_nomenclatureType == tableNum(PCConfigurationNomenclature));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSegmentAllowedForNomenclatureType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds the two segments, for the specified nomenclature type, that are related with the
    ///   <c>EcoResNomenclatureSegmentAttributeValue</c> table: Attribute name anf attribute value segment.
    /// </summary>
    /// <param name = "_nomenclatureType">
    ///   A nomenclature type of the caller.
    /// </param>
    /// <param name = "_segments">
    ///   A segments' map which keeps which segments are valid for each nomenclature type.
    /// </param>
    public static void addSegmentAllowedForNomenclatureType(TableId _nomenclatureType, Map _segments)
    {
        _segments.insert("@SCM:EcoResNomenclatureSegmentAttributeValue", _nomenclatureType);
        _segments.insert("@SCM:EcoResNomenclatureSegmentAttributeName", _nomenclatureType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>segmentTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table name of the specific sub type.
    /// </summary>
    /// <returns>A table name.</returns>
    public display Name segmentTypeName()
    {
        if (this.AttributeSegmentType == EcoResNomenclatureAttributeSegmentType::Value)
        {
            return tableId2PName(int642int(this.InstanceRelationType));
        }

        return "@SCM:EcoResNomenclatureSegmentAttributeName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResNomenclatureSegmentAttributeValueDevDoc</DeveloperDocumentation>
	<Label>@SCM:EcoResNomenclatureSegmentAttributeValue</Label>
	<Extends>EcoResNomenclatureSegment</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResAttributeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeSegmentType</Name>
			<Visible>No</Visible>
			<EnumType>EcoResNomenclatureAttributeSegmentType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResNomenclatureSegment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResNomenclatureSegment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>