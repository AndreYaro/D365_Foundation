<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDispositionTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSDispositionTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSDispositionTable, ReturnDispositionCodeId):
                    if (this.ReturnDispositionCodeId)
                    {
                        if (!ReturnDispositionCode::exist(this.ReturnDispositionCodeId)
                        || ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction == DispositionAction::CreditOnly)
                        {
                            ret = checkFailed(strFmt("@SYS121768", this.ReturnDispositionCodeId));
                        }
                        else if (this.WorkTemplateCode
                        && !WHSWorkTemplateTable::find(this.WorkTemplateCode, WHSWorkTransType::ReturnOrder))
                        {
                            ret = checkFailed(strFmt("@WAX4793", this.ReturnDispositionCodeId));
                        }

                        ret = ret && this.checkInventoryStatus();
                    }
                    break;

                case fieldNum(WHSDispositionTable, InventStatusId):
                    ret = this.checkInventoryStatus();
                    break;

                case fieldNum(WHSDispositionTable, WorkTemplateCode):
                    if (this.WorkTemplateCode
                    && this.WorkTemplateCode != this.orig().WorkTemplateCode
                    && (!WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::ReturnOrder)
                    && this.ReturnDispositionCodeId))
                    {
                        // Work template for disposition code must use the Return Order transaction type
                        ret = checkFailed(strFmt("@WAX4788", this.ReturnDispositionCodeId));
                    }

                    if (WHSDispositionTableUseSupportedTransTypesFlight::instance().isEnabled())
                    {
                        if (this.WorkTemplateCode
                            && !this.workTemplateDoesNotExistForAnySupportedTransTypes())
                        {
                            ret = checkFailed(strFmt("@WAX:DispositionCodeWorkTemplateNotExists", this.WorkTemplateCode));
                        }
                    }
                    else
                    {
                        if (this.WorkTemplateCode
                            &&  !WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::Purch)
                            &&  !WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::ProdPut)
                            &&  !WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::ReturnOrder))
                        {
                            ret = checkFailed(strFmt("@WAX:DispositionCodeWorkTemplateNotExists", this.WorkTemplateCode));
                        }
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateDoesNotExistForAnySupportedTransTypes</Name>
				<Source><![CDATA[
    private boolean workTemplateDoesNotExistForAnySupportedTransTypes()
    {
        SetEnumerator se = WHSDispositionTable::supportedTransTypesSet().getEnumerator();

        boolean foundWorkTemplate;

        while (se.moveNext())
        {
            foundWorkTemplate = WHSWorkTemplateTable::exist(this.WorkTemplateCode, se.current());

            if (foundWorkTemplate)
            {
                break;
            }
        }

        return foundWorkTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedTransTypesSet</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static Set supportedTransTypesSet()
    {
        Set set = new Set(Types::Enum);
        set.add(WHSWorkTransType::Purch);
        set.add(WHSWorkTransType::ProdPut);
        set.add(WHSWorkTransType::ReturnOrder);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>whsDispositionTable</c> record exists.
	/// </summary>
	/// <param name="_whsDispositionCode">
	/// Disposition code of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSDispositionCode _whsDispositionCode)
    {
        return (_whsDispositionCode) &&
               (select firstonly whsDispositionTable
                where whsDispositionTable.DispositionCode == _whsDispositionCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>whsDispositionTable</c> record with given parameters.
	/// </summary>
	/// <param name="_whsDispositionCode">
	/// Disposition code of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSDispositionTable find(WHSDispositionCode _whsDispositionCode,
                                           boolean            _forupdate = false)
    {
        WHSDispositionTable    whsDispositionTable;

        if (_whsDispositionCode)
        {
            whsDispositionTable.selectForUpdate(_forupdate);

            select firstonly whsDispositionTable
                where whsDispositionTable.DispositionCode == _whsDispositionCode;
        }

        return whsDispositionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWHSWorkTemplateCode</Name>
				<Source><![CDATA[
	/// <summary>
	/// Contains code to lookup by work template code.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control.
	/// </param>
	/// <param name="_setTransTypes">
	/// Set containing transaction types
	/// </param>
    public static void lookupWHSWorkTemplateCode(FormStringControl _ctrl, Set _setTransTypes)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        SetEnumerator           setEnumerator;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(WHSWorkTemplateTable), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(WHSWorkTemplateTable));

        sysTableLookup.addLookupfield(fieldNum(WHSWorkTemplateTable, WorkTemplateCode));
        sysTableLookup.addLookupfield(fieldNum(WHSWorkTemplateTable, WorkTemplateDesc));

        if (_setTransTypes)
        {
            setEnumerator = _setTransTypes.getEnumerator();
            while (setEnumerator.moveNext())
            {
                queryBuildDataSource.addRange(fieldNum(WHSWorkTemplateTable, WorkTransType)).value(queryValue(setEnumerator.current()));
            }
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the <c>InventoryStatus</c> field allows inventory blocking based on the disposition action.
    /// </summary>
    /// <returns>
    /// true if the <c>InventoryStatus</c> field is set to a valid value; otherwise, false.
    /// </returns>
    private boolean checkInventoryStatus()
    {
        boolean ret = true;

        if (!this.isInventoryStatusValid())
        {
            // Status %1 must not allow inventory blocking to be tied to Disposition code
            ret = checkFailed(strFmt("@WAX4779", this.InventStatusId));
        }

        if (ret
            && this.InventStatusId
            && this.WorkTemplateCode
            && WHSInventStatus::find(this.InventStatusId).InventStatusBlocking
            && WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::ProdPut)
            && !WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::Purch)
            && !WHSWorkTemplateTable::exist(this.WorkTemplateCode, WHSWorkTransType::ReturnOrder))
        {
            ret = checkFailed(strFmt("@WAX:DispositionCodeBlockingStatusProdWorkTemplateError", this.InventStatusId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryStatusValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>InventoryStatus</c> allows inventory blocking based on the disposition action.
    /// </summary>
    /// <returns>
    /// true if the <c>InventoryStatus</c> is valid; otherwise, false.
    /// </returns>
    public boolean isInventoryStatusValid()
    {
        DispositionAction   dispositionAction = ReturnDispositionCode::find(this.ReturnDispositionCodeId).DispositionAction;

        if (this.InventStatusId
            && WHSInventStatus::find(this.InventStatusId).InventStatusBlocking
            && (dispositionAction == DispositionAction::Scrap
            || dispositionAction  == DispositionAction::ReplaceScrap
            || dispositionAction  == DispositionAction::ReturnToCust))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super() && this.checkInventoryStatus();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnDispositionCodeSupportingLicensePlateLabelCreation</Name>
				<Source><![CDATA[
    internal static boolean isReturnDispositionCodeSupportingLicensePlateLabelCreation(WHSDispositionCode _dispositionCode)
    {
        WHSDispositionTable dispositionTable = WHSDispositionTable::find(_dispositionCode);
        ReturnDispositionCode returnDispositionCode = ReturnDispositionCode::find(dispositionTable.ReturnDispositionCodeId);

        if (!returnDispositionCode.RecId)
        {
            return true;
        }

        return !WHSDispositionTable::nonSupportedDispositionActions().in(returnDispositionCode.DispositionAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonSupportedDispositionActions</Name>
				<Source><![CDATA[
    internal static Set nonSupportedDispositionActions()
    {
        Set nonSupportedDispositionActionsSet = new Set(Types::Enum);
        nonSupportedDispositionActionsSet.add(DispositionAction::ReplaceScrap);
        nonSupportedDispositionActionsSet.add(DispositionAction::Scrap);
        nonSupportedDispositionActionsSet.add(DispositionAction::ReturnToCust);
        return nonSupportedDispositionActionsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonSupportedDispositionActionsStr</Name>
				<Source><![CDATA[
    internal static str nonSupportedDispositionActionsStr()
    {
        Set notSupported = WHSDispositionTable::nonSupportedDispositionActions();
        str result = '';

        SetEnumerator se = notSupported.getEnumerator();
        while (se.moveNext())
        {
            str current = queryValue(se.current());

            if (result == '')
            {
                result += '!' + current;
            }
            else
            {
                result += ',!' + current;
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4351</DeveloperDocumentation>
	<Label>@WAX1844</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>DispositionCode</TitleField1>
	<TitleField2>InventStatusId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>DispositionCodeIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>DispositionCodeIdx</PrimaryIndex>
	<ReplacementKey>DispositionCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispositionCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDispositionCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnDispositionCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTemplateCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DispositionCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DispositionCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnDispositionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnDispositionCodeId</Name>
					<SourceEDT>ReturnDispositionCodeId</SourceEDT>
					<Field>ReturnDispositionCodeId</Field>
					<RelatedField>DispositionCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSInventStatus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSInventStatus</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventStatusId</Name>
					<SourceEDT>WHSInventStatusId</SourceEDT>
					<Field>InventStatusId</Field>
					<RelatedField>InventStatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>