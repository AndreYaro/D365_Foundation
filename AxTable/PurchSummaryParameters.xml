<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSummaryParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchSummaryParameters extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(DocumentStatus   _documentStatus,
                         fieldId          _fieldId)

    {
        if (!_documentStatus || !_fieldId)
        {
            return false;
        }

        return (select firstonly RecId
                    from purchSummaryParameters
                        where purchSummaryParameters.DocumentStatus == _documentStatus  &&
                              purchSummaryParameters.FieldId        == _fieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    static boolean fieldEnabled(fieldId _fieldId)
    {
        boolean                 enabled                 = true;
        TableId                 tableId                 = PurchTable::internalFieldIdToTableId_W(_fieldId);
        FieldId                 fieldId                 = PurchTable::internalFieldIdToFieldId_W(_fieldId);
        DictField               dictField               = new DictField(tableId, fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());
        // <GBR>
        container               fieldCountryRegionCodes = dictField.getCountryRegionCodes();
        // </GBR>

        if (dictConfigurationKey)
        {
            enabled = dictConfigurationKey.enabled();
        }

        // <GBR>
        if (conLen(fieldCountryRegionCodes) > 0)
        {
            enabled = enabled && SysCountryRegionCode::isLegalEntityInCountryRegion(fieldCountryRegionCodes);
        }
        // </GBR>

        if (enabled && tableId != tableNum(PurchTable))
        {
            enabled = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableId);
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    static str fieldName(fieldId _fieldId)
    {
        str name;
        TableId extensionTableId = PurchTable::internalFieldIdToTableId_W(_fieldId);
        FieldId extensionFieldId = PurchTable::internalFieldIdToFieldId_W(_fieldId);

        #isoCountryRegionCodes

        // <GEERU>
        if (extensionTableId == tableNum(PurchTable_RU))
        {
            return fieldid2pname(tablenum(PurchTable_RU), extensionFieldId);
        }
        // </GEERU>
        // <GBR>
        else if (extensionTableId == tableNum(PurchTable_BR))
        {
            return fieldid2pname(tablenum(PurchTable_BR), extensionFieldId);
        }
        // </GBR>
        else if (extensionTableId == tableNum(PurchTable_W))
        {
            return fieldid2pname(tablenum(PurchTable_W), extensionFieldId);
        }

        if (fieldExt2Id(new SysDictField(tablenum(PurchTable), fieldnum(PurchTable, ContactPersonId), 1).id()) == _fieldId)
        {
            name = "@SYS14559";
        }
        else
        {
            name = fieldid2pname(tablenum(PurchTable), _fieldId);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchSummaryParameters find(DocumentStatus   _documentStatus,
                                       fieldId          _fieldId,
                                       boolean          _update = false)
    {
        PurchSummaryParameters purchSummaryParameters;

        if (_documentStatus && _fieldId)
        {
            purchSummaryParameters.selectForUpdate (_update);

            select firstonly purchSummaryParameters
                where purchSummaryParameters.DocumentStatus == _documentStatus  &&
                      purchSummaryParameters.FieldId        == _fieldId;
        }

        return purchSummaryParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    static void initiate(DocumentStatus _documentStatus)
    {
        PurchSummaryParameters  purchSummaryParameters;
        container               mandatorySummaryFieldIds;
        int                     pos = 1;

        if (!PurchSummaryParameters::initiated(_documentStatus))
        {
            mandatorySummaryFieldIds = PurchSummaryParameters::mandatorySummaryFieldIds();

            ttsbegin;

            while (pos <= conlen(mandatorySummaryFieldIds))
            {
                purchSummaryParameters.clear();
                purchSummaryParameters.initValue();
                purchSummaryParameters.DocumentStatus   = _documentStatus;
                purchSummaryParameters.FieldId          = conpeek(mandatorySummaryFieldIds, pos);
                purchSummaryParameters.insert();

                pos++;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateAll</Name>
				<Source><![CDATA[
    static void initiateAll()
    {
        // <GEERU>
        PurchSummaryParameters::initiate(DocumentStatus::Invoice4Paym_RU);
        // </GEERU>
        PurchSummaryParameters::initiate(DocumentStatus::PurchaseOrder);
        PurchSummaryParameters::initiate(DocumentStatus::PackingSlip);
        PurchSummaryParameters::initiate(DocumentStatus::ReceiptsList);
        PurchSummaryParameters::initiate(DocumentStatus::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    static boolean initiated(DocumentStatus _documentStatus)
    {
        PurchSummaryParameters purchSummaryParameters;

        select count(RecId)
            from purchSummaryParameters
            where purchSummaryParameters.DocumentStatus == _documentStatus;

        return purchSummaryParameters.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryFieldMandatory</Name>
				<Source><![CDATA[
    static boolean isSummaryFieldMandatory(fieldId _fieldId)
    {
        return confind(PurchSummaryParameters::mandatorySummaryFieldIds(), _fieldId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatorySummaryFieldIds</Name>
				<Source><![CDATA[
    static container mandatorySummaryFieldIds()
    {
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            return [fieldExt2Id(new SysDictField(tablenum(PurchTable),fieldnum(PurchTable, InvoiceAccount),1).id()),
                    fieldExt2Id(new SysDictField(tablenum(PurchTable),fieldnum(PurchTable, currencyCode),1).id()),
                    PurchTable::fieldIdToInternalFieldId_W(
                        fieldExt2Id(new SysDictField(tablenum(PurchTable_BR),fieldnum(PurchTable_BR, SalesPurchOperationType_BR),1).id()),
                        tableNum(PurchTable_BR)),
                    PurchTable::fieldIdToInternalFieldId_W(
                        fieldExt2Id(new SysDictField(tablenum(PurchTable_BR),fieldnum(PurchTable_BR, VendFinalUser_BR),1).id()),
                        tableNum(PurchTable_BR)),
                    PurchTable::fieldIdToInternalFieldId_W(
                        fieldExt2Id(new SysDictField(tablenum(PurchTable_BR),fieldnum(PurchTable_BR, PresenceType),1).id()),
                        tableNum(PurchTable_BR))];
        }
        else
        {
        // </GBR>
            return [fieldExt2Id(new SysDictField(tablenum(PurchTable),fieldnum(PurchTable, InvoiceAccount),1).id()),
                    fieldExt2Id(new SysDictField(tablenum(PurchTable),fieldnum(PurchTable, CurrencyCode),1).id())];
        // <GBR>
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>notSelectedFieldIdList</Name>
				<Source><![CDATA[
    static container notSelectedFieldIdList(DocumentStatus _documentStatus)
    {
        fieldId         fieldId                 = 0;
        int             notSelectedNumber       = 1;
        container       summaryFieldIdList      = PurchSummaryParameters::summaryFieldIdList();
        container       notSelectedFieldIdList;

        while (notSelectedNumber <= conlen(summaryFieldIdList))
        {
            fieldId = conpeek(summaryFieldIdList, notSelectedNumber);
            if (!PurchSummaryParameters::exist(_documentStatus, fieldId) && PurchSummaryParameters::fieldEnabled(fieldId))
            {
                notSelectedFieldIdList += fieldId;
            }
            notSelectedNumber ++;
        }

        return notSelectedFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFieldIdList</Name>
				<Source><![CDATA[
    static container selectedFieldIdList(DocumentStatus _documentStatus)
    {
        PurchSummaryParameters  purchSummaryParameters;
        container               selectedFieldIdList;

        while select purchSummaryParameters
            where purchSummaryParameters.DocumentStatus == _documentStatus
        {
            if (PurchSummaryParameters::fieldEnabled(purchSummaryParameters.FieldId))
            {
                selectedFieldIdList += purchSummaryParameters.FieldId;
            }
        }

        return selectedFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryFieldIdList</Name>
				<Source><![CDATA[
    static container summaryFieldIdList()
    {
        int             i,h,j;
        container       fList;
        SysDictField    sysDictField;
        DictFieldGroup  dictFieldGroup;
        DictTable       dictTable = new DictTable(tablenum(PurchTable));

        for (i=1; i<=dictTable.fieldGroupCnt(); i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable, SummaryUpdate))
            {
                dictFieldGroup = new DictFieldGroup(tablenum(PurchTable),dictTable.fieldGroup(i));
                for (h=1; h<=dictFieldGroup.numberOfFields(); h++)
                {
                    sysDictField = new SysDictField(tablenum(PurchTable), dictFieldGroup.field(h));
                    for (j=1; j <= sysDictField.arraySize(); j++)
                    {
                        fList += fieldExt2Id(new SysDictField(tablenum(PurchTable), dictFieldGroup.field(h), j).id());
                    }
                }
                break;
            }
        }

        // <GEERU>
        if (PurchTable_RU::isExtensionEnabled())
        {
            dictTable = new DictTable(tablenum(PurchTable_RU));

            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable_RU, SummaryUpdate))
                {
                    dictFieldGroup = new DictFieldGroup(tablenum(PurchTable_RU),dictTable.fieldGroup(i));
                    for (h = 1; h <= dictFieldGroup.numberOfFields(); h++)
                    {
                        sysDictField = new SysDictField(tablenum(PurchTable_RU), dictFieldGroup.field(h));
                        for (j = 1; j <= sysDictField.arraySize(); j++)
                        {
                            fList += PurchTable::fieldIdToInternalFieldId_W(
                                fieldExt2Id(new SysDictField(tablenum(PurchTable_RU), dictFieldGroup.field(h), j).id()),
                                tableNum(PurchTable_RU));
                        }
                    }
                    break;
                }
            }
        }
        // </GEERU>

        // <GBR>
        if (PurchTable_BR::isExtensionEnabled())
        {
            dictTable = new DictTable(tablenum(PurchTable_BR));

            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable_BR, SummaryUpdate))
                {
                    dictFieldGroup = new DictFieldGroup(tablenum(PurchTable_BR),dictTable.fieldGroup(i));
                    for (h = 1; h <= dictFieldGroup.numberOfFields(); h++)
                    {
                        sysDictField = new SysDictField(tablenum(PurchTable_BR), dictFieldGroup.field(h));
                        for (j = 1; j <= sysDictField.arraySize(); j++)
                        {
                            fList += PurchTable::fieldIdToInternalFieldId_W(
                                fieldExt2Id(new SysDictField(tablenum(PurchTable_BR), dictFieldGroup.field(h), j).id()),
                                tableNum(PurchTable_BR));
                        }
                    }
                    break;
                }
            }
        }
        // </GBR>

        // <GFM>
        if (PurchTable_W::isExtensionEnabled())
        {
            dictTable = new DictTable(tablenum(PurchTable_W));

            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable_W, SummaryUpdate))
                {
                    dictFieldGroup = new DictFieldGroup(tablenum(PurchTable_W),dictTable.fieldGroup(i));
                    for (h = 1; h <= dictFieldGroup.numberOfFields(); h++)
                    {
                        sysDictField = new SysDictField(tablenum(PurchTable_W), dictFieldGroup.field(h));
                        for (j = 1; j <= sysDictField.arraySize(); j++)
                        {
                            fList += PurchTable::fieldIdToInternalFieldId_W(
                                fieldExt2Id(new SysDictField(tablenum(PurchTable_W), dictFieldGroup.field(h), j).id()),
                                tableNum(PurchTable_W));
                        }
                    }
                    break;
                }
            }
        }
        // </GFM>

        return fList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124512</DeveloperDocumentation>
	<FormRef>PurchSummaryParameters</FormRef>
	<Label>@SYS57802</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>DocumentStatus</TitleField1>
	<TitleField2>FieldId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PurchSummaryParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>PurchSummaryParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentStatus</Name>
			<Label>@SYS22101</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>PurchTable</RelatedTable>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchSummaryParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>