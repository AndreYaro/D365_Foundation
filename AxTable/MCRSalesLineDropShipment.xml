<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesLineDropShipment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRSalesLineDropShipment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a field in a <c>MCRSalesLineDropShipment</c> buffer is changed.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to investigate.
    /// </param>
    /// <returns>
    /// True if the field value is changed in relation; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used in intercompany scenarios for validating whether a field has changed and
    /// whether it must be synchronized to the relating intercompany order line.
    /// </remarks>
    internal boolean fieldChanged(FieldId _fieldId)
    {
        boolean hasChanged = false;

        if (!this.RecId)
        {
            hasChanged = true;
        }

        if (this.orig().(_fieldId) != this.(_fieldId))
        {
            hasChanged = true;
        }
        return hasChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.SalesLine)
        {
            // only update if the FK is valid
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.SalesLine)
        {
            ttsbegin;
            // only update if the FK is valid
            super();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean         ret = true;
        PurchLine       purchLine;
        SalesLine       salesLine;

        MCRSalesLineDropShipment mcrDropShipOrig;

        if (this.SalesLine)
        {
            mcrDropShipOrig = this.orig();

            ret = super();

            // If the drop shipment field is being set from Yes to No
            // need to make sure the related purchase order line can be deleted, if it exists
            // deletion will take place in update
            if ( ret
                && !this.DropShipment
                && mcrDropShipOrig.DropShipment)
            {
                // If the user unchecked the drop shipment flag, verify if deletion of the related purchase line is possible
                select firstonly salesLine
                    where salesLine.RecId == this.SalesLine
                    join purchLine
                        where salesLine.InventRefTransId == purchLine.InventTransId;

                if ((purchLine && !purchLine.validateDelete(true))
                    || salesLine.isPackingSlipOrInvoiceUpdated())
                {
                    ret = checkFailed("@MCR4410701");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that attempts to delete a purchase order.
    /// </summary>
    /// <param name="_purchId">
    /// <c>PurchId</c> value of the purchase order to delete.
    /// </param>
    static void deleteRelatedPurchaseOrder(PurchId _purchId)
    {
        PurchTable purchTable;

        ttsBegin;
        purchTable = PurchTable::find(_purchId, true);

        if (purchTable
                && !PurchTableVersion::findLatest(purchTable.PurchId, purchTable.dataAreaId)
                && purchTable.validateDelete(true)) // true to skip ckeck on the PO being derived intercompany
        {
            purchTable.delete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to delete a related purchase order direct delivery line.
    /// </summary>
    /// <param name="_salesLineRecId">
    /// The <c>RecId</c> value of the sales line.
    /// </param>
    /// <param name="_deletePurchaseOrder">
    /// true if purchase order should be attempted to be deleted as well; Otherwise false; Optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Related purchase order line cannot be deleted.
    /// </exception>
    static void deleteRelatedPurchaseOrderLine(RecId _salesLineRecId, boolean _deletePurchaseOrder = true)
    {
        SalesLine salesLine;
        PurchLine purchLine;
        MCRsalesLineDropShipment salesLineDropShipment;

        ttsBegin;
         select firstonly forupdate RecId from salesLine
                    where salesLine.RecId == _salesLineRecId
                    join forupdate purchLine
                        where salesLine.InventRefTransId == purchLine.InventTransId;

        if (purchLine)
        {
            if (purchLine.validateDelete(true))
            {
                // Avoid PO line delete causing sales line in same company to be deleted too
                purchLine.SkipUpdate = InterCompanySkipUpdate::Internal;
                purchLine.delete();

                // If the drop shipment line was the only one then delete the purchase order as well
                if (_deletePurchaseOrder
                    && !PurchLine::exist(purchLine.PurchId))
                {
                    MCRSalesLineDropShipment::deleteRelatedPurchaseOrder(purchLine.PurchId);
                }

                salesLine.reread(); // SalesLine record may have been updated by deletion of the PurchLine
                salesLine.clearInventReference();
                salesLine.clearSourcingFields();
                salesLine.doUpdate();

                // Set the direct delivery flag
                salesLineDropShipment = MCRSalesLineDropShipment::findSalesLine(salesLine.RecId, true);
                salesLineDropShipment.DropShipment = NoYes::No;
                salesLineDropShipment.DropShipStatus = MCRDropShipStatus::None;
                salesLineDropShipment.update();
            }
            else
            {
                throw error("@MCR4410701");
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRSalesLineDropShipment</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The identification value of the sales line.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>MCRSalesLineDropShipment</c> record if found; otherwise, an empty record.
    /// </returns>
    static MCRSalesLineDropShipment findSalesLine(SalesLineRefRecId       _recId,
                               boolean     _update = false)
    {
        MCRSalesLineDropShipment mcrSalesLineDropShipment;

        if (_recId)
        {
            if (_update)
            {
                mcrSalesLineDropShipment.selectForUpdate(_update);
            }

            select firstonly mcrSalesLineDropShipment
                where mcrSalesLineDropShipment.SalesLine == _recId;
        }

        return mcrSalesLineDropShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the drop shipment status of a line.
    /// </summary>
    /// <param name="_salesLineRecID">
    /// The record ID of the sales line.
    /// </param>
    /// <returns>
    /// The drop shipment status.
    /// </returns>
    static public MCRDropShipStatus getDropShipStatus(RecId _salesLineRecID)
    {
        MCRSalesLineDropShipment mcrSalesLineDropShipment;

        select firstonly DropShipStatus from mcrSalesLineDropShipment
            where mcrSalesLineDropShipment.SalesLine == _salesLineRecID;

        return mcrSalesLineDropShipment.DropShipStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesOrderDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all sales line records with the sent in drop shipment status.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase table record ID.
    /// </param>
    /// <param name="_mcrDropShipStatus">
    /// The drop shipment status.
    /// </param>
    static void updateSalesOrderDropShipStatus(PurchId _purchId, MCRDropShipStatus _mcrDropShipStatus)
    {
        SalesLine                   salesLine;
        PurchLine                   purchLine;
        MCRSalesLineDropShipment    mcrSalesLineDropShipment;
        
        MCRDropShipStatusInstrumentationActivities dropShipStatusActivities = MCRDropShipInstrumentationLogger::createLogger(tableStr(MCRSalesLineDropShipment)).dropShipStatusActivities();
        PurchTable purchTable = PurchTable::find(_purchId);
        mcrSalesLineDropShipment.skipDataMethods(true);

        if (MCRDropShipStatusUpdatPurchLineFlight::instance().isEnabled())
        {
            using (var activityContext = dropShipStatusActivities.updateDropShipStatus(purchTable))
            {
                while select forupdate mcrSalesLineDropShipment
                    join salesLine
                        where mcrSalesLineDropShipment.SalesLine == salesLine.RecId
                    join purchLine
                        where salesLine.InventRefTransId == purchLine.InventTransId
                            && purchLine.PurchId == _purchId
                {
                    mcrSalesLineDropShipment.DropShipStatus = _mcrDropShipStatus;
                    mcrSalesLineDropShipment.update();
                }
            }
        }
        else
        {
            using (var activityContext = dropShipStatusActivities.updateRecordSetDropShipStatus(purchTable))
            {
                update_recordset mcrSalesLineDropShipment
                    setting DropShipStatus = _mcrDropShipStatus
                        join salesLine
                            where mcrSalesLineDropShipment.SalesLine == salesLine.RecId
                        join purchLine
                            where salesLine.InventRefTransId == purchLine.InventTransId
                                && purchLine.PurchId == _purchId;
            }
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124481</DeveloperDocumentation>
	<Label>@SYS508</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>DropShipStatus</TitleField1>
	<TitleField2>DropShipComment</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SalesLineIdx</ClusteredIndex>
	<DisableDatabaseLogging>Yes</DisableDatabaseLogging>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>SalesLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropShipStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropShipComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DropShipStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropShipComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS104938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DropShipComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDropShipComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DropShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDropShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DropShipStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRDropShipStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>SalesLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLine</Name>
					<Field>SalesLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesLineIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>