<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodEmpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPeriodEmpl extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calenderHours</Name>
				<Source><![CDATA[
    display ProjQty calenderHours()
    {
        CapacityValue capacity(TransDate fromDate, TransDate toDate, ResourceRecId _resource)
        {
            CalendarRecId           calendar;
            date                    tmpDateFrom;
            date                    tmpDateTo;
            date                    incrDate;
            CapacityValue           capacity;

            calendar = ResourceFacade::getCalendar(_resource);
            tmpDateFrom = fromDate ? fromDate   : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            tmpDateTo   = toDate   ? toDate     : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + 50;

            incrDate = tmpDateFrom;

            while (incrDate <= tmpDateTo)
            {
                capacity += ResourceCalendarFacade::getCapacity(calendar, incrDate);
                incrDate += 1;
            }

            return capacity;
        }

        return capacity(this.PeriodFrom, this.periodTo(), this.Resource)/3600;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodTo</Name>
				<Source><![CDATA[
    display ProjPeriodTo periodTo()
    {
        return (select firstonly reverse projPeriodLine
                order by PeriodFrom
                where projPeriodLine.PeriodId   == this.PeriodId        &&
                      projPeriodLine.PeriodFrom <= this.PeriodFrom).PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedHours</Name>
				<Source><![CDATA[
    display ProjQty postedHours()
    {
        ProjQty             qty;
        DictTable           dictTableProjEmplTrans;

        dictTableProjEmplTrans = new DictTable(tableNum(ProjEmplTrans));

        if (dictTableProjEmplTrans.rights() >= AccessType::View)
        {
            qty = (select sum(Qty) from projEmplTrans
                    where   projEmplTrans.Resource      == this.Resource
                    &&      projEmplTrans.TransDate   <= this.periodTo()
                    &&      projEmplTrans.TransDate   >= this.PeriodFrom).Qty;
            return qty;
        }
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        if (this.Posted)
        {
            return checkFailed("@SYS50096");
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(ProjPeriodEmpl, Resource))
        {
            ret = ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ResourceRecId _resourceRecId, ProjPeriodFrom _periodFrom)
    {
        boolean ret;

        if (ProjPeriodEmpl::find(_resourceRecId, _periodFrom))
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ProjPeriodEmpl find(ResourceRecId   _resourceRecId,
                           ProjPeriodFrom  _periodFrom,
                           boolean         _forUpdate = false)
    {
        ProjPeriodEmpl projPeriodEmpl = null;

        projPeriodEmpl.selectForUpdate(_forUpdate);

        if (_resourceRecId && _periodFrom)
        {
            select projPeriodEmpl
            where projPeriodEmpl.Resource    == _resourceRecId &&
                  projPeriodEmpl.PeriodFrom  == _periodFrom;
        }

        return projPeriodEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransdate</Name>
				<Source><![CDATA[
    public static ProjPeriodEmpl findTransdate(ResourceRecId _resourceRecId, TransDate _transDate, boolean _forUpdate = false)
    {
        ProjPeriodEmpl projPeriodEmpl = null;

        projPeriodEmpl.selectForUpdate(_forUpdate);

        if (_resourceRecId && _transDate)
        {
            select firstonly reverse projPeriodEmpl
            order by PeriodFrom
            where projPeriodEmpl.Resource    == _resourceRecId &&
                  projPeriodEmpl.PeriodFrom  <= _transDate;
        }

        return projPeriodEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePeriods</Name>
				<Source><![CDATA[
    public static void generatePeriods(ProjPeriodId      _periodId,
                                          ResourceRecId     _resourceRecId,
                                          date              _fromDate,
                                          date              _toDate,
                                          RealBase              _normBillable,
                                          RealBase              _normEfficiency)
    {
        ProjPeriodLine     projPeriodLine;
        ProjPeriodEmpl     projPeriodEmpl = null;
        #OCCRetryCount

        _normBillable = max(0, _normBillable);
        _normEfficiency = max(0, _normEfficiency);

        try
        {
            ttsbegin;

            while select PeriodFrom from projPeriodLine
            where  projPeriodLine.PeriodId   == _periodId   &&
                   projPeriodLine.PeriodFrom >= _fromDate   &&
                   projPeriodLine.PeriodFrom <= _toDate
            {
                if (! ProjPeriodEmpl::find(_resourceRecId, projPeriodLine.PeriodFrom))
                {
                    projPeriodEmpl.clear();

                    projPeriodEmpl.PeriodId    = _periodId;
                    projPeriodEmpl.Resource      = _resourceRecId;
                    projPeriodEmpl.PeriodFrom  = projPeriodLine.PeriodFrom;
                    projPeriodEmpl.NormBillable = _normBillable;
                    projPeriodEmpl.NormEfficiency = _normEfficiency;

                    projPeriodEmpl.insert();
                }
                else
                {
                    projPeriodEmpl = ProjPeriodEmpl::find(_resourceRecId, projPeriodLine.PeriodFrom, true);
                    if (projPeriodEmpl.PeriodId == _periodId)
                    {
                        projPeriodEmpl.NormBillable = _normBillable;
                        projPeriodEmpl.NormEfficiency = _normEfficiency;

                        projPeriodEmpl.update();
                    }
                }
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                projPeriodLine.reread();
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodEmplDisplayCache</Name>
				<Source><![CDATA[
    public static container projPeriodEmplDisplayCache(container _conMapProjPeriodEmpl, container _conMapPeriodTo)
    {
        Map             mapProjPeriodEmpl          = Map::create(_conMapProjPeriodEmpl);
        Map             mapPeriodTo                = Map::create(_conMapPeriodTo);
        ProjPeriodEmpl  projPeriodEmpl;
        MapIterator     mi = new MapIterator(mapProjPeriodEmpl);

        mi.begin();

        while (mi.more())
        {
            projPeriodEmpl  = mapProjPeriodEmpl.lookup(mi.key());

            mapPeriodTo.insert(projPeriodEmpl.PeriodFrom,projPeriodEmpl.periodTo());

            mi.next();
        }

        return [mapPeriodTo.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPosted</Name>
				<Source><![CDATA[
    static void setPosted(ResourceRecId         _resourceRecId,
                             ProjPeriodFrom        _periodFrom,
                             TransDate             _postedDate)
    {
        if (_resourceRecId != 0)
        {
            ProjPeriodEmpl projPeriodEmpl = ProjPeriodEmpl::find(_resourceRecId, _periodFrom);
            if (projPeriodEmpl && projPeriodEmpl.Posted == NoYes::No)
            {
                ttsbegin;
                projPeriodEmpl.selectForUpdate(true);
                projPeriodEmpl.Posted = NoYes::Yes;
                projPeriodEmpl.PostedDate = _postedDate;
                projPeriodEmpl.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124948</DeveloperDocumentation>
	<Label>@SYS55270</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>PeriodFrom</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PeriodIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>PeriodIdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormBillable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormEfficiency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectPeriods</Name>
			<Label>@SYS50475</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormBillable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormEfficiency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DEL_EmplId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects60</ConfigurationKey>
			<ExtendedDataType>DEL_EmplId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NormBillable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@SYS102373</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NormEfficiency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@SYS102374</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<Label>@SYS23329</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjEmplPeriodPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22062</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmplPeriodFromIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjPeriodEmpl</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodId</Name>
					<SourceEDT>ProjPeriodId</SourceEDT>
					<Field>PeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>