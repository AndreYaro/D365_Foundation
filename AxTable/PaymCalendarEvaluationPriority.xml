<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarEvaluationPriority</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymCalendarEvaluationPriority extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createForPaymCalendarRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the records in the table for a <c>PaymCalendarEvaluationPriority</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>PaymCalendarEvaluationPriority</c> record to create records for.
    /// </param>
    public void createForPaymCalendarRule(PaymCalendarRuleId _recId)
    {
        // Maximun number of location supported types
        const int MaxLocationCount = 3;

        PaymCalendarEvaluationPriority paymCalendarEvaluationPriority;
        int numberOfLocations;

        ttsbegin;

        for (numberOfLocations = 1; numberOfLocations <= MaxLocationCount; numberOfLocations++)
        {
            paymCalendarEvaluationPriority.PaymCalendarRule = _recId;
            paymCalendarEvaluationPriority.Priority = numberOfLocations;
            paymCalendarEvaluationPriority.AddressProcess = numberOfLocations - 1;
            paymCalendarEvaluationPriority.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record down in the <c>PaymCalendarEvaluationPriority</c> table by increasing the priority value.
    /// </summary>
    /// <returns>
    /// The updated record in the <c>PaymCalendarEvaluationPriority</c> table.
    /// </returns>
    public PaymCalendarEvaluationPriority moveDown()
    {
        PaymCalendarEvaluationPriority afterPaymCalendarEvaluationPriority;
        PaymCalendarEvaluationPriority currentPaymCalendarEvaluationPriority;
        PaymCalendarPriority priority, afterPriority;
        RecId currentRuleId;

        if (this)
        {
            ttsbegin;

            select firstonly forupdate afterPaymCalendarEvaluationPriority
                order by Priority asc
                where afterPaymCalendarEvaluationPriority.PaymCalendarRule == this.PaymCalendarRule
                    && afterPaymCalendarEvaluationPriority.Priority > this.Priority;

            if (afterPaymCalendarEvaluationPriority)
            {
                select firstonly forupdate currentPaymCalendarEvaluationPriority
                    where currentPaymCalendarEvaluationPriority.RecId == this.RecId;

                priority = this.Priority;
                currentRuleId = currentPaymCalendarEvaluationPriority.RecId;

                currentPaymCalendarEvaluationPriority.Priority = maxInt();
                currentPaymCalendarEvaluationPriority.update();

                afterPriority = afterPaymCalendarEvaluationPriority.Priority;
                afterPaymCalendarEvaluationPriority.Priority = priority;
                afterPaymCalendarEvaluationPriority.update();

                currentPaymCalendarEvaluationPriority = PaymCalendarEvaluationPriority::find(currentRuleId, true);
                currentPaymCalendarEvaluationPriority.Priority = afterPriority;
                currentPaymCalendarEvaluationPriority.update();
            }
            else
            {
                currentPaymCalendarEvaluationPriority = this;
            }

            ttscommit;
        }

        return currentPaymCalendarEvaluationPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record up in the <c>PaymCalendarEvaluationPriority</c> table by reducing the priority value.
    /// </summary>
    /// <returns>
    /// The updated record in the <c>PaymCalendarEvaluationPriority</c> table.
    /// </returns>
    public PaymCalendarEvaluationPriority moveUp()
    {
        PaymCalendarEvaluationPriority beforePaymCalendarEvaluationPriority;
        PaymCalendarEvaluationPriority currentPaymCalendarEvaluationPriority;
        PaymCalendarPriority priority, beforePriority;
        RecId currentRuleId;

        if (this)
        {
            ttsbegin;

            select firstonly forupdate beforePaymCalendarEvaluationPriority
                order by Priority desc
                where beforePaymCalendarEvaluationPriority.PaymCalendarRule == this.PaymCalendarRule
                    && beforePaymCalendarEvaluationPriority.Priority < this.Priority;

            if (beforePaymCalendarEvaluationPriority)
            {
                select firstonly forupdate currentPaymCalendarEvaluationPriority
                    where currentPaymCalendarEvaluationPriority.RecId == this.RecId;

                priority = currentPaymCalendarEvaluationPriority.Priority;
                currentRuleId = currentPaymCalendarEvaluationPriority.RecId;

                currentPaymCalendarEvaluationPriority.Priority = maxInt();
                currentPaymCalendarEvaluationPriority.update();

                beforePriority = beforePaymCalendarEvaluationPriority.Priority;
                beforePaymCalendarEvaluationPriority.Priority = priority;
                beforePaymCalendarEvaluationPriority.update();

                currentPaymCalendarEvaluationPriority = PaymCalendarEvaluationPriority::find(currentRuleId, true);
                currentPaymCalendarEvaluationPriority.Priority = beforePriority;
                currentPaymCalendarEvaluationPriority.update();
            }
            else
            {
                currentPaymCalendarEvaluationPriority = this;
            }

            ttscommit;
        }

        return currentPaymCalendarEvaluationPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in the <c>PaymCalendarEvaluationPriority</c> table.
    /// </summary>
    public void update()
    {
        PaymCalendarEvaluationPriority origPaymCalendarEvaluationPriority;
        boolean isFlush;

        // Flush if Priority changed
        origPaymCalendarEvaluationPriority = this.orig();
        isFlush = (this.Priority != origPaymCalendarEvaluationPriority.Priority);

        super();

        // Flush cache
        if (isFlush)
        {
            PaymCalendarProcessor::paymCalendarRuleChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRulesForPaymCalendarRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the records in the table for a <c>PaymCalendarEvaluationPriority</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>PaymCalendarEvaluationPriority</c> record to create records for.
    /// </param>
    /// <param name="_ruleType">
    /// The rule type of the <c>PaymCalendarEvaluationPriority</c> record to create records for.
    /// </param>
    public static void createRulesForPaymCalendarRule(PaymCalendarRuleId _recId, PaymCalendarRuleType _ruleType)
    {
        PaymCalendarEvaluationPriority paymCalendarEvaluationPriority;

        paymCalendarEvaluationPriority.createForPaymCalendarRule(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForPaymCalendarRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PaymCalendarEvaluationPriority</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>PaymCalendarEvaluationPriority</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existForPaymCalendarRule(PaymCalendarRuleId _recId)
    {
        PaymCalendarEvaluationPriority paymCalendarEvaluationPriority;

        select firstonly RecId from paymCalendarEvaluationPriority
            where paymCalendarEvaluationPriority.PaymCalendarRule == _recId;

        return paymCalendarEvaluationPriority != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PaymCalendarEvaluationPriority</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>PaymCalendarEvaluationPriority</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarEvaluationPriority</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarEvaluationPriority find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarEvaluationPriority paymCalendarEvaluationPriority;

        if (_recId)
        {
            paymCalendarEvaluationPriority.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                paymCalendarEvaluationPriority.concurrencyModel(_concurrencyModel);
            }

            select firstonly paymCalendarEvaluationPriority
                where paymCalendarEvaluationPriority.RecId == _recId;
        }

        return paymCalendarEvaluationPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocationType</Name>
				<Source><![CDATA[
    public static PaymCalendarEvaluationPriority findByLocationType(
        PaymCalendarRuleId _paymCalendarRuleId,
        PaymCalendarLocationType _paymCalendarLocationType,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarEvaluationPriority paymCalendarEvaluationPriority;

        if (_paymCalendarRuleId)
        {
            paymCalendarEvaluationPriority.selectForUpdate(_forupdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                paymCalendarEvaluationPriority.concurrencyModel(_concurrencyModel);
            }

            select firstonly paymCalendarEvaluationPriority
                where paymCalendarEvaluationPriority.PaymCalendarRule == _paymCalendarRuleId
                    && paymCalendarEvaluationPriority.AddressProcess == _paymCalendarLocationType;
        }

        return paymCalendarEvaluationPriority;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:GLS220428</DeveloperDocumentation>
	<Label>@CashManagement:GLS220427</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Priority</TitleField1>
	<Modules>Bank</Modules>
	<ReplacementKey>EvaluationPriorityIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymCalendarRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressProcess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymCalendarRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymCalendarRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressProcess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddressProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@CashManagement:GLS220461</Label>
			<EnumType>PaymCalendarLocationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymCalendarRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymCalendarRuleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymCalendarPriority</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AddressProcessIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymCalendarRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AddressProcess</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EvaluationPriorityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymCalendarRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymCalendarLocationRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PaymCalendarLocationRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymCalendarRule</Name>
					<Field>PaymCalendarRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>