<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalName</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalName extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWorkflowApprovalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that an active <c>LedgerJournalName</c> workflow approval configuration is enabled.
    /// </summary>
    /// <param name="_displayInfoLog">
    ///    A Boolean value that specifies whether to display the Infolog when an invalid state is detected;
    ///    optional.
    /// </param>
    /// <returns>
    ///    true if all of the validations are successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method will also validate the configuration information about the
    ///    <c>WorkflowConfigurationTable</c> table.Unless all validations are met the method will not return
    ///    true and the configuration will not be considered to have workflow approval.
    /// </remarks>
    public boolean checkWorkflowApprovalEnabled(boolean _displayInfoLog = false)
    {
        boolean                     isWorkflowApprovalEnabled = false;
        WorkflowVersionTable        workflowVersionTable;

        //  Is the "Approval" active and is there a "Configuration"
        if (this.WorkflowApproval &&
            this.Configuration)
        {
            //  Find the "Configuration".
            workflowVersionTable = WorkflowVersionTable::findSequenceNumber(this.Configuration);

            //  Does it exist, and is it correct for the JournalType\Workflow Template, and is it enabled?
            if (workflowVersionTable.RecId        != 0 &&
                workflowVersionTable.workflowTable().TemplateName == LedgerJournalName::findJournalTemplate(this.JournalType) &&
                workflowVersionTable.Enabled)
            {
                isWorkflowApprovalEnabled = true;
            }
            else
            {
                if (_displayInfoLog)
                {
                    info("@SYS112225");
                }
            }
        }

        return isWorkflowApprovalEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysModuleForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the module of the ledger journal table.
    /// </summary>
    /// <returns>
    /// The module value of a ledger journal.
    /// </returns>
    public SysModule getSysModuleForJournal()
    {
        SysModule sysModule = SysModule::None;

        switch (this.JournalType)
        {
            case LedgerJournalType::VendInvoicePool,
                LedgerJournalType::VendInvoiceRegister,
                LedgerJournalType::VendPaymRemittance,
                LedgerJournalType::VendPromissoryNoteDraw,
                LedgerJournalType::VendPromissoryNoteRedraw,
                LedgerJournalType::VendPromissoryNoteSettle,
                LedgerJournalType::PurchaseLedger,
                LedgerJournalType::Approval,
                LedgerJournalType::Netting,
                LedgerJournalType::Payment:

                sysModule = SysModule::Vend;
                break;

            case LedgerJournalType::CustBillOfExchangeAccept,
                LedgerJournalType::CustBillOfExchangeDraw,
                LedgerJournalType::CustBillOfExchangeProtest,
                LedgerJournalType::CustBillOfExchangeRedraw,
                LedgerJournalType::CustBillOfExchangeSettle,
                LedgerJournalType::CustPayment,
                LedgerJournalType::CustPaymRemittance:

                sysModule = SysModule::Cust;
                break;

            case LedgerJournalType::Daily,
                LedgerJournalType::Allocation,
                LedgerJournalType::Elimination,
                LedgerJournalType::Budget,
                // <GEERU>
                LedgerJournalType::RDeferrals,
                // </GEERU>
                LedgerJournalType::ReportingCurrencyAdjustment:

                sysModule = SysModule::Ledger;
                break;

            case LedgerJournalType::Assets,
                LedgerJournalType::AssetBudgets:

                sysModule = SysModule::FixedAssets;
                break;

            case LedgerJournalType::BankChequeReversal,
                LedgerJournalType::BankDepositPaymCancel:

                sysModule = SysModule::Bank;
                break;

            case LedgerJournalType::Cost:

                sysModule = SysModule::Project;
                break;

            default:
                sysModule = SysModule::None;
                break;
        }

        return sysModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalInclTax</Name>
				<Source><![CDATA[
    public void initLedgerJournalInclTax()
    {
        if (!this.RecId)
        {
            if (this.JournalType == LedgerJournalType::Payment ||
                this.JournalType == LedgerJournalType::CustPayment)
            {
                this.LedgerJournalInclTax = true;
            }
            else
            {
                this.LedgerJournalInclTax = TaxParameters::find().JournalInclTax;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDelayTaxCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init DelayTaxCalculation from <c>TaxParameters</c> to <c>LedgerJornalName</c>.
    /// </summary>
    public void initDelayTaxCalculation()
    {
        if (!this.RecId)
        {
            this.DelayTaxCalculation = TaxParameters::find().DelayTaxCalculation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxBookTypeJournal</Name>
				<Source><![CDATA[
    public void initTaxBookTypeJournal()
    {
        // Italian functionality of VAT books and VAT book sections
        if (this.JournalType == LedgerJournalType::VendInvoiceRegister ||
            this.JournalType == LedgerJournalType::PurchaseLedger      ||
            this.JournalType == LedgerJournalType::Cost)
        {
            this.TaxBookTypeJournal = TaxBookTypeJournal::Purchase;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initLedgerJournalInclTax();
        this.initTaxBookTypeJournal();
        this.initDelayTaxCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        // <GJP>
        #ISOCountryRegionCodes
        // </GJP>

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            // <GJP>
            case fieldStr(LedgerJournalName, JournalType):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                    && this.JournalType != LedgerJournalType::Daily)
                {
                    this.PositiveDRCROnly_JP = false;
                }

                break;
            // </GJP>

            case fieldStr(LedgerJournalName, NewVoucher):
                if (this.NewVoucher == NewVoucher::Manually && this.VoucherAllocatedAtPosting == NoYes::Yes)
                {
                    this.VoucherAllocatedAtPosting = NoYes::No;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccount</Name>
				<Source><![CDATA[
    public LedgerJournalAC parmOffsetAccount(LedgerJournalAC _account = '', LedgerJournalACType _accountType = this.OffsetAccountType)
    {
        LedgerJournalAC                     account;

        if (!prmisDefault(_accountType))
        {
            this.OffsetAccountType = _accountType;
        }

        // If account has been changed, update the backing ledger dimension value
        if (!prmisDefault(_account))
        {
            if (_account)
            {
                this.OffsetLedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_account, _accountType);
                account = _account;
            }
            else
            {
                account = '';
                this.OffsetLedgerDimension = 0;
            }
        }
        else if (this.OffsetLedgerDimension)
        {
            account = DimensionAttributeValueCombination::find(this.OffsetLedgerDimension).DisplayValue;
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicDefaultAccount parmOffsetLedgerDimension(DimensionDynamicDefaultAccount _ledgerDimension = this.OffsetLedgerDimension)
    {
        this.OffsetLedgerDimension = _ledgerDimension;
        return this.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBookSectionId</Name>
				<Source><![CDATA[
    public display TaxBookSectionId taxBookSectionId()
    {
        return TaxBookSection::findVoucherSeries(
            NumberSequenceTable::find(this.NumberSequenceTable).RecId).TaxBookSectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId p1)
    {
        boolean ret;
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceReference numberSequenceReference;
        // <GEERU>
        #ISOCountryRegionCodes
        LedgerJournalName       ledgerJournalName;
        // </GEERU>

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(LedgerJournalName, NumberSequenceTable) :
                    numberSequenceTable = NumberSequenceTable::find(this.NumberSequenceTable);

                    if (LedgerParameters::find().CheckContinuous)
                    {
                        if (numberSequenceTable != null && !numberSequenceTable.Continuous)
                        {
                            ret = checkFailed("@SYS70988", '', SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(LedgerParameters), 'general_checkcontinuous', "@SYS24215"));
                        }
                    }
                    //
                    // The Cheque reversal and Deposit cancellation type journals always
                    // require vouchers with continuous numbering.
                    //
                    else if (this.JournalType == LedgerJournalType::BankChequeReversal ||
                             this.JournalType == LedgerJournalType::BankDepositPaymCancel ||
                             this.JournalType == LedgerJournalType::Budget)
                    {
                        if (numberSequenceTable != null && !numberSequenceTable.Continuous)
                        {
                            ret = checkFailed(strFmt("@SYS26207", numberSequenceTable.NumberSequence));
                        }
                    }
                    break;

                case fieldNum(LedgerJournalName, VoucherAllocatedAtPosting) :
                    numberSequenceReference = LedgerParameters::numRefLedgerTempVoucher();

                    if (! numberSequenceReference.NumberSequenceId)
                    {
                        ret = checkFailed("@SYS79638");
                    }

                    if (ret && (this.VoucherAllocatedAtPosting == NoYes::Yes) && this.NewVoucher == NewVoucher::Manually)
                    {
                        ret = checkFailed(strFmt("@SYS79639", fieldId2pname(tableNum(LedgerJournalName), fieldNum(LedgerJournalName, NewVoucher))));
                    }

                    if (ret && LedgerParameters::find().CheckContinuous)
                    {
                        numberSequenceTable = NumberSequenceTable::find(this.NumberSequenceTable);
                        if (!numberSequenceTable.Continuous)
                        {
                            ret = checkFailed("@SYS70988", '', SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(LedgerParameters), 'general_checkcontinuous', "@SYS24215"));
                        }
                    }
                    break;

                case fieldNum(LedgerJournalName, LinesLimitBeforeDistribution) :
                    if (this.LinesLimitBeforeDistribution > LedgerJournalName::maxLimitOfLinesBeforeDistribution())
                    {
                        ret = checkFailed(strFmt("@SYS86512", LedgerJournalName::maxLimitOfLinesBeforeDistribution()));
                    }
                    break;
                case fieldNum(LedgerJournalName, JournalType):
                    this.initLedgerJournalInclTax();
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        if ((this.JournalType == LedgerJournalType::RTax25TaxDiffByBalance
                                || this.JournalType == LedgerJournalType::RTax25
                                || this.JournalType == LedgerJournalType::Payroll_RU
                                || this.JournalType == LedgerJournalType::RAssetTransportTax
                                || this.JournalType == LedgerJournalType::RAssetAssessedTax
                                || this.JournalType == LedgerJournalType::RAssetLandTax)
                            && (select firstonly RecId from ledgerJournalName
                                    where ledgerJournalName.JournalType == this.JournalType
                                    && ledgerJournalName.RecId != this.RecId).RecId)
                        {
                            ret = checkFailed(strFmt("@GLS111574", this.JournalType));
                        }
                    }
                    break;

                case fieldNum(LedgerJournalName, Configuration):
                    ret = LedgerJournalName::validateWorkflowApprovalConfig(this.Configuration, this.JournalType);
                    break;

                case fieldNum(LedgerJournalName, OffsetLedgerDimension):
                    if (this.OffsetAccountType == LedgerJournalACType::Bank)
                    {
                        if (this.parmOffsetAccount())
                        {
                            ret = BankAccountTable::checkIsActive(this.parmOffsetAccount());
                        }
                    }
                    break;

                case fieldNum(LedgerJournalName, BankTransSummarizationEnabled):
                    if (this.BankTransSummarizationEnabled == NoYes::Yes)
                    {
                        if (this.NewVoucher != NewVoucher::BalanceSheet)
                        {
                            ret = checkFailed("@CashManagement:SummarizationErrorMessage");
                        }

                        NumberSequenceReference reference = BankParameters::numRefSummarizationID();
                        if (!reference || !reference.NumberSequenceId)
                        {
                            ret = checkFailed(strfmt("@SYS26165", "@CashManagement:BankTransSummarizationID"));
                        }
                    }
                    break;

                // <GEERU><GEEU>
                case fieldNum(LedgerJournalName, CashAccount_W):
                    if (RCashParameters::isCashModuleEnabled())
                    {
                        ledgerJournalName = LedgerJournalName::findByCashAccount_W(this.CashAccount_W);
                        if (ledgerJournalName.JournalName && ledgerJournalName.JournalName != this.JournalName)
                        {
                            ret = checkFailed(strFmt("@GLS114100", this.CashAccount_W, ledgerJournalName.JournalName));
                        }
                    }
                    break;
                // </GEERU></GEEU>
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid)
        {
            if (!this.checkOffsetAccountForJournalType())
            {
                isValid = checkFailed(strFmt("@SYS27049", this.JournalType));
            }
        }

        if (isValid)
        {
            if (!this.checkNumberSequenceForBankCancellation())
            {
                NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(this.NumberSequenceTable);
                isValid = checkFailed(strFmt("@SYS26207", numberSequenceTable.NumberSequence));
            }
        }

        if (isValid)
        {
            if (!this.checkApprovalGroup())
            {
                isValid = checkFailed("@SYS29085");
            }
        }

        if (isValid)
        {
            if ((!this.checkPostingLayer()) && (this.JournalType != LedgerJournalType::Elimination))
            {
                isValid = checkFailed("@SYS56281");
            }
        }

        if (isValid)
        {
            if (!this.checkApprovalAndWorkflowApprovalStatus())
            {
                isValid = checkFailed("@SYS109577");
            }
        }

        if (isValid &&
            this.WorkflowApproval)
        {
            if (!this.Configuration)
            {
                isValid = checkFailed("@SYS109578");
            }

            if (isValid)
            {
                isValid = LedgerJournalName::validateWorkflowApprovalConfig(this.Configuration, this.JournalType);
            }
        }

        isValid = LedgerJournalName::validatePayrollDisbursementJournal(this.JournalType, this.OffsetAccountType, this.DetailSummary, this.LinesLimitBeforeDistribution) && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOffsetAccountForJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal is of type PurchaseLedger or Approval and if so, if the offset account is specified.
    /// </summary>
    /// <returns>
    /// true if the offset account is not set for the PurchaseLedger or Approval journal type or the journal is not those types; otherwise, false.
    /// </returns>
    public boolean checkOffsetAccountForJournalType()
    {
        boolean returnValue = true;

        if ((this.JournalType == LedgerJournalType::PurchaseLedger || this.JournalType == LedgerJournalType::Approval) &&
               (this.OffsetLedgerDimension || this.OffsetAccountType))
        {
            returnValue = false;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSequenceForBankCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal is of type Cheque reversal or Deposit cancellation and if so, if the number sequence is continuous.
    /// </summary>
    /// <returns>
    /// true if the number sequence is continuous for the bank cancellation journal or the journal is not a bank cancellation; otherwise, false.
    /// </returns>
    public boolean checkNumberSequenceForBankCancellation()
    {
        boolean returnValue = true;

        if (this.JournalType == LedgerJournalType::BankChequeReversal ||
                this.JournalType == LedgerJournalType::BankDepositPaymCancel)
        {
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(this.NumberSequenceTable);

            if (numberSequenceTable != null
                    && !numberSequenceTable.Continuous)
            {
                // The Cheque reversal and Deposit cancellation type journals always require vouchers with continuous numbering.
                returnValue = false;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkApprovalGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal approval is active and if so, if the approval group is specified.
    /// </summary>
    /// <returns>
    /// true if journal approval is not active or approval is active and the approval group is specified; otherwise, false.
    /// </returns>
    public boolean checkApprovalGroup()
    {
        boolean returnValue = true;

        if (this.ApproveActive && !this.ApproveGroupId)
        {
            returnValue = false;
        } 

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the posting layer is valid for the journal type.
    /// </summary>
    /// <returns>
    /// true if the posting layer is Current or if the journal type is Daily, Assets, or AssetBudgets; otherwise, false.
    /// </returns>
    public boolean checkPostingLayer()
    {
        boolean returnValue = true;

        if (this.CurrentOperationsTax != CurrentOperationsTax::Current &&
                this.JournalType != LedgerJournalType::Daily      &&
                this.JournalType != LedgerJournalType::Assets     &&
                this.JournalType != LedgerJournalType::AssetBudgets)
        {
            returnValue = false;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkApprovalAndWorkflowApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if both workflow approval and journal approval are active.
    /// </summary>
    /// <returns>
    /// true if both workflow approval and journal approval are not active; otherwise, false.
    /// </returns>
    public boolean checkApprovalAndWorkflowApprovalStatus()
    {
        boolean returnValue = true;

        if (this.WorkflowApproval && this.ApproveActive)
        {
            returnValue = false;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(LedgerJournalNameId _ledgerJournalName)
    {
        boolean ret = true;

        if (!LedgerJournalName::exist(_ledgerJournalName))
        {
            ret = checkFailed(strFmt(LedgerJournalName::txtNotExist(), _ledgerJournalName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(LedgerJournalNameId _ledgerJournalName)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalName
                 where
                     ledgerJournalName.JournalName == _ledgerJournalName).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerJournalName find(
        LedgerJournalNameId _ledgerJournalName ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalName ledgerJournalName;

        ledgerJournalName.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalName.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerJournalName
            where
            ledgerJournalName.JournalName == _ledgerJournalName;

        return ledgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCashAccount_W</Name>
				<Source><![CDATA[
    public static LedgerJournalName findByCashAccount_W(RCashAccount _rCashAccount)
    {
        LedgerJournalName ledgerJournalName;

        if (_rCashAccount)
        {
            select firstonly
                ledgerJournalName
                where
                ledgerJournalName.CashAccount_W == _rCashAccount;
        }
        return ledgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the workflow approval template name associated to a <c>JournalType</c> table.
    /// </summary>
    /// <param name="_journalType">
    ///    A <c>Journaltype</c> value for which to find the associated template name.
    /// </param>
    /// <returns>
    ///    A <c>WorkflowTemplateName</c> value that is associated to the specified table.
    /// </returns>
    /// <remarks>
    ///    An empty <c>WorkflowTemplateName</c> will be returned if the <paramref name="_journalType" /> does
    ///    not have an associated template name.The <c>LedgerJournalWFApprovalTemplates</c> macro contains the
    ///    list of all currently supported workflow approval templates.It is the responsibility of the calling
    ///    method to evaluate the returned value.
    /// </remarks>
    public static WorkflowTypeName findJournalTemplate(LedgerJournalType _journalType)
    {
        #LedgerJournalWFApprovalTemplates

        WorkflowTypeName templateName;

        switch (_journalType)
        {
            //  Ledger templates:
            case LedgerJournalType::Daily:
                templateName = #LedgerDailyTemplate;
                break;
            case LedgerJournalType::Assets:
                templateName = #LedgerPostFixedAssetsTemplate;
                break;
            case LedgerJournalType::AssetBudgets:
                templateName = #LedgerFixedAssetsBudgetTemplate;
                break;
            case LedgerJournalType::Allocation:
                templateName = #LedgerAllocationsTemplate;
                break;
            case LedgerJournalType::Elimination:
                templateName = #LedgerEliminationsTemplate;
                break;

            //  Customer templates:
            case LedgerJournalType::CustPayment:
                templateName = #CustPaymentTemplate;
                break;
            case LedgerJournalType::CustBillOfExchangeDraw:
                templateName = #CustDrawBillofExchangeTemplate;
                break;
            case LedgerJournalType::CustBillOfExchangeProtest:
                templateName = #CustProtestBillofExchangeTemplate;
                break;
            case LedgerJournalType::CustBillOfExchangeRedraw:
                templateName = #CustRedrawBillofExchangeTemplate;
                break;
            case LedgerJournalType::CustPaymRemittance:
                templateName = #CustBankRemittanceTemplate;
                break;
            case LedgerJournalType::CustBillOfExchangeSettle:
                templateName = #CustSettleBillofExchangeTemplate;
                break;

            //  Vendor templates:
            case LedgerJournalType::VendInvoiceRegister:
                templateName = #VendInvoiceRecordingTemplate;
                break;
            case LedgerJournalType::Approval:
                templateName = #VendInvoiceApprovalJournalTemplate;
                break;
            case LedgerJournalType::PurchaseLedger:
                templateName = #VendInvoiceRegisterTemplate;
                break;
            case LedgerJournalType::Payment:
                templateName = #VendDisbursementTemplate;
                break;
            case LedgerJournalType::VendPromissoryNoteDraw:
                templateName = #VendDrawPromissoryNoteTemplate;
                break;
            case LedgerJournalType::VendPromissoryNoteRedraw:
                templateName = #VendRedrawPromissoryNoteTemplate;
                break;
            case LedgerJournalType::VendPaymRemittance:
                templateName = #VendBankRemittanceTemplate;
                break;
            case LedgerJournalType::VendPromissoryNoteSettle:
                templateName = #VendSettlePromissoryNoteTemplate;
                break;
            case LedgerJournalType::Netting:
                templateName = #CustVendNetTemplate;
                break;

            //  Journal type does not have a supporting template.
            default:
                templateName = '';
                break;
        }

        return templateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkflowApprovalModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines to which <c>LedgerJournalWFApprovalModule</c> enumeration value the specified journal
    ///    type is associated. Not all journal type values support workflow approvals.
    /// </summary>
    /// <param name="_journalType">
    ///    The <c>Journaltype</c> value for which to find the associated module.
    /// </param>
    /// <returns>
    ///    The <c>LedgerJournalWFApprovalModule</c> enumeration value that is associated with the specified
    ///    journal type.
    /// </returns>
    /// <remarks>
    ///    This method is used to evaluate the journal type for workflow approvals.This method will be
    ///    modified as additional journals begin to support workflow approvals.
    /// </remarks>
    public static LedgerJournalWFApprovalModule findWorkflowApprovalModule(LedgerJournalType _journalType)
    {
        LedgerJournalWFApprovalModule module;

        switch (_journalType)
        {
            //  Ledger types:
            case LedgerJournalType::Allocation,
                LedgerJournalType::Daily,
                LedgerJournalType::Elimination:
                module = LedgerJournalWFApprovalModule::Ledger;
                break;

            // Fixed Assets types:
            case LedgerJournalType::AssetBudgets,
                LedgerJournalType::Assets:
                module = LedgerJournalWFApprovalModule::FixedAssets;
                break;

            //  Customer types:
            case LedgerJournalType::CustBillOfExchangeDraw,
                LedgerJournalType::CustBillOfExchangeProtest,
                LedgerJournalType::CustBillOfExchangeRedraw,
                LedgerJournalType::CustBillOfExchangeSettle,
                LedgerJournalType::CustPayment,
                LedgerJournalType::CustPaymRemittance:
                module = LedgerJournalWFApprovalModule::Customer;
                break;

            //  Vendor types:
            case LedgerJournalType::Payment,
                LedgerJournalType::PurchaseLedger,
                LedgerJournalType::Approval,
                LedgerJournalType::VendInvoiceRegister,
                LedgerJournalType::VendPaymRemittance,
                LedgerJournalType::VendPromissoryNoteDraw,
                LedgerJournalType::VendPromissoryNoteRedraw,
                LedgerJournalType::VendPromissoryNoteSettle,
                LedgerJournalType::Netting:
                module = LedgerJournalWFApprovalModule::Vendor;
                break;

            // Not supported types:
            default:
                module = LedgerJournalWFApprovalModule::None;
                break;
        }

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveRefsToWFApprConfig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the <c>LedgerJournalName</c> table has workflow approval-active records that hold a
    ///    reference to the specified record in the <c>WorkflowTable</c> table.
    /// </summary>
    /// <param name="_workflowTable">
    ///    The <c>WorkflowTable</c> table record for which the records in the <c>LedgerJournalName</c> table
    ///    may hold a reference.
    /// </param>
    /// <returns>
    ///    true if workflow approval-active records have references to the specified record in the
    ///    <c>WorkflowTable</c> table; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Please notice that this method only returns true if the existing records are workflow-active.
    /// </remarks>
    public static boolean hasActiveRefsToWFApprConfig(WorkflowTable _workflowTable)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalName
                 where
                    ledgerJournalName.WorkflowApproval == NoYes::Yes &&
                    ledgerJournalName.Configuration == _workflowTable.SequenceNumber &&
                    ledgerJournalName.Configuration != '').RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRefsToWFApprConfig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the <c>LedgerJournalName</c> table has records that hold a reference to the specified
    ///    record in the <c>WorkflowTable</c> table.
    /// </summary>
    /// <param name="_workflowTable">
    ///    The <c>WorkflowConfigurationTable</c> table record for which records in the
    ///    <c>LedgerJournalName</c> table may hold a reference.
    /// </param>
    /// <returns>
    ///    true if any references exist; otherwise, false.
    /// </returns>
    public static boolean hasRefsToWFApprConfig(WorkflowTable _workflowTable)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalName
                 where
                    ledgerJournalName.Configuration == _workflowTable.SequenceNumber &&
                    ledgerJournalName.Configuration != '').RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegotiableInstrumentJournal</Name>
				<Source><![CDATA[
    public static boolean isNegotiableInstrumentJournal(LedgerJournalType  _ledgerJournalType)
    {
        return LedgerJournalName::negotiableInstrumentJournalTypes().in(_ledgerJournalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType2ModuleCustVend</Name>
				<Source><![CDATA[
    public static ModuleCustVend journalType2ModuleCustVend(LedgerJournalType _ledgerJournalType)
    {
        ModuleCustVend  moduleCustVend;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::CustPayment,
                 LedgerJournalType::CustPaymRemittance,
                 LedgerJournalType::CustBillOfExchangeAccept,
                 LedgerJournalType::CustBillOfExchangeDraw,
                 LedgerJournalType::CustBillOfExchangeProtest,
                 LedgerJournalType::CustBillOfExchangeRedraw,
                 LedgerJournalType::CustBillOfExchangeSettle :
                moduleCustVend = ModuleCustVend::Cust;
                break;

            case LedgerJournalType::Payment,
                 LedgerJournalType::VendPaymRemittance,
                 LedgerJournalType::VendPromissoryNoteDraw,
                 LedgerJournalType::VendPromissoryNoteRedraw,
                 LedgerJournalType::VendPromissoryNoteSettle :
                moduleCustVend = ModuleCustVend::Vend;
                break;

            default :
                throw error("@SYS68235");
        }

        return moduleCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the journal name form for the specified journal name.
    /// </summary>
    /// <param name="_journalName">
    ///    The name of the journal to open.
    /// </param>
    /// <param name="_referenceCompany">
    ///    The company associated with the specified journal name.
    /// </param>
    public static void jumpRef(LedgerJournalNameId _journalName, CompanyId _referenceCompany)
    {
        FormRun run;
        Args e;

        appl.setDefaultCompany(_referenceCompany, false);

        e = new Args();
        // do not set Args.Record because the form will get confused
        e.lookupField(fieldNum(LedgerJournalName, JournalName));
        e.lookupValue(_journalName);

        run = new MenuFunction(menuitemDisplayStr(LedgerJournalSetup), MenuItemType::Display).create(e);
        run.run();
        run.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a lookup for the <c>LedgerJournalName</c> table.
    /// </summary>
    /// <param name="_stringControl">
    ///    The control for the field that has the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///    The filter string entered by the user.
    /// </param>
    /// <param name="_company">
    ///    The company associated with the journal.
    /// </param>
    public static void lookupJournalName(FormStringControl _stringControl, str _filterStr, CompanyId _company)
    {
        Args e;
        CompanyId company;
        FormRun run;

        company = _company;

        if (company == '')
        {
            company = curext();
        }
        if (xDataArea::exist(company))
        {
            changecompany(company)
            {
                e = new Args();
                e.name(formStr(LedgerJournalNameLookup));
                e.lookupField(fieldNum(LedgerJournalName, JournalName));
                e.lookupValue(_filterStr);
                e.caller(_stringControl);

                run = classfactory.formRunClass(e);
                run.init();

                _stringControl.performFormLookup(run);
            }
        }
        else
        {
            checkFailed(strFmt("@SYS10666",company));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupJournalNameByJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the <c>LedgerJournalName</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The control for the field that has the lookup.
    /// </param>
    /// <param name="_journalType">
    /// The type of journals you want to filter.
    /// </param>
    public static void lookupJournalNameByJournalType(FormStringControl _formControl, LedgerJournalType _journalType)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerJournalName),_formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(LedgerJournalName));
        QueryBuildRange         queryBuildRangeJournalType = queryBuildDataSource.addRange(fieldNum(LedgerJournalName, JournalType));
        QueryBuildRange         queryBuildRangeUserGroupId = queryBuildDataSource.addRange(fieldNum(LedgerJournalName, BlockUserGroupId));

        sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, JournalName));
        sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, Name));

        queryBuildRangeJournalType.value(queryValue(_journalType));
        queryBuildRangeUserGroupId.value(UserGroupList::groupsForUser());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxLimitOfLinesBeforeDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the maximum number of lines a user can set up for each journal.
    /// </summary>
    /// <returns>
    ///    The maximum number of lines that should be in a single journal.
    /// </returns>
    public static Counter maxLimitOfLinesBeforeDistribution()
    {
        if (LedgerJournalForcedJournalSplitFeature::isEnabled())
        {
            return LedgerJournalMaxLineLimit::getMaxLineLimit();
        }
        else
        {
            #define.max(30000)

            return #max;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>negotiableInstrumentJournalTypes</Name>
				<Source><![CDATA[
    public static Set negotiableInstrumentJournalTypes()
    {
        Set set = new Set(Types::Enum);

        set.add(LedgerJournalType::CustBillOfExchangeAccept);
        set.add(LedgerJournalType::CustBillOfExchangeDraw);
        set.add(LedgerJournalType::CustBillOfExchangeProtest);
        set.add(LedgerJournalType::CustBillOfExchangeRedraw);
        set.add(LedgerJournalType::CustBillOfExchangeSettle);
        set.add(LedgerJournalType::CustPaymRemittance);
        set.add(LedgerJournalType::VendPaymRemittance);
        set.add(LedgerJournalType::VendPromissoryNoteDraw);
        set.add(LedgerJournalType::VendPromissoryNoteRedraw);
        set.add(LedgerJournalType::VendPromissoryNoteSettle);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWFApprConfigRefs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Remove all references to the specified record of the <c>WorkflowTable</c> table from the
    ///    <c>LedgerJournalName</c> table.
    /// </summary>
    /// <param name="_workflowTable">
    ///    The record of the <c>WorkflowTable</c> table for which to remove <c>LedgerJournalName</c> table
    ///    references.
    /// </param>
    public static void removeWFApprConfigRefs(WorkflowTable _workflowTable)
    {
        #OCCRetryCount
        LedgerJournalName ledgerJournalName;

        try
        {
            update_recordset ledgerJournalName
                setting Configuration = '', WorkflowApproval = NoYes::No
                where ledgerJournalName.Configuration == _workflowTable.SequenceNumber;
        }
        catch(Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }

            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }

            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS22462";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowApprovalConfig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that an active and enabled configuration exists and uses the correct ledger journal
    ///    workflow approval template for the specified journal type.
    /// </summary>
    /// <param name="_configuration">
    ///    A <c>Configuration</c> value to validate.
    /// </param>
    /// <param name="_journalType">
    ///    A <c>JournalType</c> value to validate.
    /// </param>
    /// <returns>
    ///    true if all of the validations are successful; otherwise, false.
    /// </returns>
    public static boolean validateWorkflowApprovalConfig(WorkflowSequenceNumber _configuration, LedgerJournalType _journalType)
    {
        WorkflowTable      workflowTable;
        boolean ret = true;

        if (_configuration)
        {
            //  Find the _configuration
            //
            //  The findSequenceNumber() API only returns "Enable\Active" configurations of WorkflowConfigurationType::Definition
            //
            workflowTable = WorkflowTable::findSequenceNumber(_configuration);
            //  Does it exist?
            if (workflowTable.RecId == 0)
            {
                ret = checkFailed(strFmt("@SYS109579", _configuration));
            }
            //  Is it correct for the JournalType/Workflow Template?
            else if (workflowTable.TemplateName != LedgerJournalName::findJournalTemplate(_journalType))
            {
                ret = checkFailed(strFmt("@SYS109580", _configuration));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayrollDisbursementJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a journal of type PayrollDisbursement.
    /// </summary>
    /// <param name = "_journalType">
    ///    The <c>LedgerJournalType</c> enumeration value.
    /// </param>
    /// <param name = "_offsetAccountType">
    ///    The <c>LedgerJournalACType</c> enumeration value.
    /// </param>
    /// <param name = "_detailSummary">
    ///    The <c>DetailSummary</c> enumeration value.
    /// </param>
    /// <param name = "_linesLimitBeforeDistribution">
    ///    The limit of the number of lines.
    /// </param>
    /// <returns>
    ///    true if all of the validations are successful; otherwise, false.
    /// </returns>
    public static boolean validatePayrollDisbursementJournal(LedgerJournalType _journalType, LedgerJournalACType _offsetAccountType, DetailSummary _detailSummary, LedgerJournalLinesLimit _linesLimitBeforeDistribution)
    {
        boolean isValid = true;

        if (_journalType == LedgerJournalType::PayrollDisbursement)
        {
            if (_offsetAccountType != LedgerJournalACType::Bank)
            {
                isValid = checkFailed("@GLS94415");
            }

            if (_detailSummary != DetailSummary::Detail)
            {
                isValid = checkFailed("@GLS94416");
            }

            if (_linesLimitBeforeDistribution != 0)
            {
                isValid = checkFailed("@GLS94417");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125932</DeveloperDocumentation>
	<FormRef>LedgerJournalSetup</FormRef>
	<Label>@SYS1436</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>JournalName</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>JournalNameIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>JournalNameIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetParameters</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BudgetParameters</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerJournalControlHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerJournalControlHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerJournalPostControlUser</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerJournalPostControlUser</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerJournalPostControlUserGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerJournalPostControlUserGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerJournalTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerJournalTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>LedgerJournalName</Relation>
			<Table>LedgerJournalName_Customs_IT</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproveGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ApprovalProcedure</Name>
			<Label>@SYS28125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApproveActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproveGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ApprovalWorkflow</Name>
			<Label>@SYS109575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkflowApproval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Configuration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Asset</Name>
			<Label>@SYS25653</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Blocking</Name>
			<Label>@SYS50247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BlockUserGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashAccounts_W</Name>
			<Label>@GLS107826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAccount_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateInit_RU</Name>
			<Label>@GLS109297</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateInitType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryDate_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneratePayments</Name>
			<Label>@SYS24287</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GeneratePayments_IT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Japan</Name>
			<Label>@SYS83475</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositiveDRCROnly_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalType</Name>
			<Label>@SYS22453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerJournalName</Name>
			<Label>@SYS22449</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetAccount</Name>
			<Label>@SYS11162</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedOffsetAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndBalanceControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DetailSummary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentOperationsTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalFeePosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinesLimitBeforeDistribution</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneratePayments_IT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prepayment_RU</Name>
			<Label>@SYS59473</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Prepayment_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalInclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBookTypeJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxHideAmountFields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelayTaxCalculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherAllocatedAtPosting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApproveActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<Label>@SYS15744</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApproveGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>UserGroupId</ExtendedDataType>
			<Label>@SYS16449</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BlockUserGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalBlockUserGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashAccount_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RCashAccount</ExtendedDataType>
			<Label>@GLS114098</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Configuration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>WorkflowSequenceNumber</ExtendedDataType>
			<Label>@SYS103643</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrentOperationsTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CurrentOperationsTax</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DateInitType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalDateInitType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DetailSummary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DetailSummary</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndBalanceControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerEndBalanceControl</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedExchRate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FixedOffsetAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedOffsetAccount</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GeneratePayments_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<Label>@SYS99760</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerJournalFeePosting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalFeePosting</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerJournalInclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalInclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LinesLimitBeforeDistribution</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalLinesLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS113707</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NewVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24286</Label>
			<EnumType>NewVoucher</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS22059</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PositiveDRCROnly_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerPositiveDRCROnly_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prepayment_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<CountryRegionCodes>RU,CZ,HU,PL</CountryRegionCodes>
			<Label>@SYS59473</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RemoveLineAfterPosting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalDelLine</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxBookTypeJournal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<EnumType>TaxBookTypeJournal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxHideAmountFields</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxGST:TaxHideAmountFieldsHelpText</HelpText>
			<Label>@SYS330728</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VoucherAllocatedAtPosting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VoucherAllocatedAtPosting</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowApproval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<Label>@SYS109575</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DelayTaxCalculation</Name>
			<HelpText>@TaxDelayTaxCalculation:DelayTaxCalculationDescription</HelpText>
			<Label>@TaxDelayTaxCalculation:DelayTaxCalculation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueCombination_Le</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_LedgerJour</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>JournalNameMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VoucherDraw</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VoucherSeqId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DetailSummary</MapField>
					<MapFieldTo>DetailSummary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeletePostedLines</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalNameId</MapField>
					<MapFieldTo>JournalName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VoucherChange</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalType</MapField>
					<MapFieldTo>JournalType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BlockUserGroupId</MapField>
					<MapFieldTo>BlockUserGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VoucherNumberSeq</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalName</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalName</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RCashTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RCashTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashAccount_W</Name>
					<SourceEDT>RCashAccount</SourceEDT>
					<Field>CashAccount_W</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserGroupInfo_ApproveGroupId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserGroupInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserGroupInfo_ApproveGroupId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApproveGroupId</Name>
					<SourceEDT>UserGroupId</SourceEDT>
					<Field>ApproveGroupId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserGroupInfo_BlockUserGroupId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserGroupInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserGroupInfo_BlockUserGroupId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BlockUserGroupId</Name>
					<SourceEDT>JournalBlockUserGroupId</SourceEDT>
					<Field>BlockUserGroupId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkflowTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WorkflowTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Configuration</Name>
					<SourceEDT>WorkflowSequenceNumber</SourceEDT>
					<Field>Configuration</Field>
					<RelatedField>SequenceNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>WorkflowSequenceNumber</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>WorkflowConfigurationType::Definition</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerParameters</Name>
			<RelatedTable>LedgerParameters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalName</Name>
					<Field>JournalName</Field>
					<RelatedField>MCRUploadJournalName</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>LedgerJournalType::Daily</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>