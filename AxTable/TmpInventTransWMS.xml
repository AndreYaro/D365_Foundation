<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpInventTransWMS</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpInventTransWMS extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bufferPdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a buffer that contains the vendor batch information that is attached to the current
    /// posting line.
    /// </summary>
    /// <returns>
    /// A buffer of the <c>PdsVendBatchInfo</c> table.
    /// </returns>
    public PdsVendBatchInfo bufferPdsVendBatchInfo()
    {
        PdsVendBatchInfo bufferPdsVendBatchInfo;

        bufferPdsVendBatchInfo.CountryOfOrigin1 = this.PdsCountryOfOrigin1;
        bufferPdsVendBatchInfo.CountryOfOrigin2 = this.PdsCountryOfOrigin2;
        bufferPdsVendBatchInfo.UseVendBatchDate = this.PdsUseVendBatchDate;
        bufferPdsVendBatchInfo.UseVendBatchExp  = this.PdsUseVendBatchExp;
        bufferPdsVendBatchInfo.VendBatchDate    = this.PdsVendBatchDate;
        bufferPdsVendBatchInfo.VendExpiryDate   = this.PdsVendExpiryDate;
        bufferPdsVendBatchInfo.VendBatchId      = this.PdsVendBatchId;

        return bufferPdsVendBatchInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record based on the specified <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDim">
    /// The record to initialize from.
    /// </param>
    [Hookable(false)]
    public void initFromInventDim(InventDim _inventDim)
    {
        this.initInventDimId(_inventDim.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record based on the specified <c>InventDimId</c>.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID to initialize from.
    /// </param>
    [Hookable(false)]
    public void initInventDimId(InventDimId _inventDimId)
    {
        this.InventDimId = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record based on the specified <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The record to initialize from.
    /// </param>
    public void initFromInventTrans(InventTrans _inventTrans)
    {
        this.initInventDimId(_inventTrans.InventDimId);
        this.UnitId            = _inventTrans.inventUnit();
        this.InventTrans       = _inventTrans.RecId;
        this.InventTransOrigin = _inventTrans.InventTransOrigin;
        this.initInventQty(_inventTrans.Qty,_inventTrans.StatusReceipt,_inventTrans.StatusIssue);

        this.initPdsCWQty(_inventTrans.PdsCWQty,_inventTrans.StatusReceipt,_inventTrans.StatusIssue);

        this.pdsInitFromInventTrans(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record based on the specified <c>InventTransOrigin</c> record.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// The record from which to initialize the current record.
    /// </param>
    public void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        this.ItemId            = _inventTransOrigin.ItemId;
        this.ReferenceCategory = _inventTransOrigin.ReferenceCategory;
        this.ReferenceId       = _inventTransOrigin.ReferenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the quantity on the current record.
    /// </summary>
    /// <param name="_inventQty">
    /// The quantity.
    /// </param>
    /// <param name="_statusReceipt">
    /// A <c>StatusReceipt</c> enumeration type that represents the receipt status of the related inventory
    /// transaction.
    /// </param>
    /// <param name="_statusIssue">
    /// A <c>StatusIssue</c> enumeration type that represents the issue status of the related inventory
    /// transaction.
    /// </param>
    public void initInventQty(
        InventQty     _inventQty,
        StatusReceipt _statusReceipt,
        StatusIssue   _statusIssue)
    {
        if (   _statusIssue   == StatusIssue::Picked
            || _statusReceipt == StatusReceipt::Ordered
            || _statusIssue == StatusIssue::Deducted )
        {
            this.InventQty = _inventQty;
        }
        else
        {
            this.InventQty = -_inventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the quantity on the current record.
    /// </summary>
    /// <param name="_pdsCWInventQty">
    /// The quantity to initialize.
    /// </param>
    /// <param name="_statusReceipt">
    /// A <c>StatusReceipt</c> enumeration value that represents the receipt status of the related
    /// inventory transaction.
    /// </param>
    /// <param name="_statusIssue">
    /// A <c>StatusIssue</c> enumeration value that represents the issue status of the related inventory
    /// transaction.
    /// </param>
    public void initPdsCWQty(
        PdsCWInventQty _pdsCWInventQty,
        StatusReceipt _statusReceipt,
        StatusIssue   _statusIssue)
    {
        if (   _statusIssue   == StatusIssue::Picked
            || _statusReceipt == StatusReceipt::Ordered)
        {
            this.PdsCWQty = _pdsCWInventQty;
        }
        else
        {
            this.PdsCWQty = -_pdsCWInventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record into the <c>TmpInventTransWMS</c> table.
    /// </summary>
    public void insert()
    {
        if (!this.LineNum)
        {
            this.LineNum = this.lastLineNum() + 1;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the highest used line number in the current instance of the <c>TmpInventTransWMS</c> table.
    /// </summary>
    /// <returns>
    /// The highest used line number.
    /// </returns>
    public LineNum lastLineNum()
    {
        TmpInventTransWMS   tmpInventTransWMSLocal;

        tmpInventTransWMSLocal.setTmpData(this);
        select maxof(LineNum) from tmpInventTransWMSLocal;

        return tmpInventTransWMSLocal.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specific actions when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has been modified.
    /// </param>
    /// <remarks>
    /// This is overridden to allow for specific actions when a field is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TmpInventTransWMS,ItemId):
                this.UnitId = InventTable::find(this.ItemId).inventUnitId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsInitFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>TmpInventTransWMS</c> record with values that are based on a <c>InventTrans</c>
    /// record.
    /// </summary>
    /// <param name="_inventTrans">
    /// A record of the <c>InventTrans</c> table.
    /// </param>
    public void pdsInitFromInventTrans(InventTrans _inventTrans)
    {
        if (_inventTrans.inventTable().isShelfLifeItem()
            && _inventTrans.inventTransOrigin().ReferenceCategory == InventTransType::Purch)
        {
            PurchLine purchLine = PurchLine::findInventTransId(_inventTrans.inventTransOrigin().InventTransId);

            if (purchLine.RecId != 0)
            {
                this.initFromVendorBatchInfo(purchLine.pdsVendBatchInfo());
            }
        }

        this.PDSBaseValue = _inventTrans.pdsGetPotencyValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendorBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from vendor batch information.
    /// </summary>
    /// <param name = "_vendBatchInfo">
    /// A <c>PdsVendBatchInfo</c> record containing vendor batch information.
    /// </param>
    protected void initFromVendorBatchInfo(PdsVendBatchInfo _vendBatchInfo)
    {
        this.PdsVendBatchDate       = _vendBatchInfo.VendBatchDate;
        this.PdsUseVendBatchDate    = _vendBatchInfo.UseVendBatchDate;
        this.PdsVendExpiryDate      = _vendBatchInfo.VendExpiryDate;
        this.PdsUseVendBatchExp     = _vendBatchInfo.UseVendBatchExp;
        this.PdsCountryOfOrigin1    = _vendBatchInfo.CountryOfOrigin1;
        this.PdsCountryOfOrigin2    = _vendBatchInfo.CountryOfOrigin2;
        this.PdsVendBatchId         = _vendBatchInfo.VendBatchId;
        this.PdsUpdateBatchDate     = PdsUpdateBatchDate::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceCategoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the reference category.
    /// </summary>
    /// <returns>
    /// The reference category name
    /// </returns>
    public display Name referenceCategoryName()
    {
        Name    name;

        if (this.ReferenceId)
        {
            name = enum2str(this.ReferenceCategory);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamDeductedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the deducted qty for a given inventory movement.
    /// </summary>
    /// <param name="_movement">
    /// Movement journal
    /// </param>
    /// <returns>
    /// Deducted qty for a given inventory movement.
    /// </returns>
    public InventQtyDeducted tamDeductedQty(InventMovement _movement)
    {
        InventDimParm   inventDimParm;

         _movement.inventDimGroupSetup().inventDimParmActive(inventDimParm);
        return InventTransSum::newChildTypeInventDim().originDeducted(_movement.inventTransOriginId(),_movement.transChildType(),_movement.transChildRefId(),InventDim::find(this.InventDimId),inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the current record into the <c>TmpInventTransWMS</c> table.
    /// </summary>
    public void write()
    {
        TmpInventTransWMS   tmpInventTransWMS;

        if (!this.LineNum)
        {
            tmpInventTransWMS.setTmpData(this);
            select maxof(LineNum) from tmpInventTransWMS;
            this.LineNum = tmpInventTransWMS.LineNum + 1;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the instance of the temporary table to be created on the server.
    /// </summary>
    /// <returns>
    /// The new instance of the temporary table.
    /// </returns>
    public static TmpInventTransWMS forceOnServer()
    {
        TmpInventTransWMS   tmpInventTransWMS;

        select firstonly tmpInventTransWMS;
        return tmpInventTransWMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeTableEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all of the records from the instance of the temporary table.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    /// The instance of the temporary table that is to have all of the records removed.
    /// </param>
    public static void makeTableEmpty(TmpInventTransWMS _tmpInventTransWMS)
    {
        TmpInventTransWMS       tmpInventTransWMS;

        tmpInventTransWMS.setTmpData(_tmpInventTransWMS);

        ttsbegin;
        delete_from tmpInventTransWMS;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if BatchId used on another InventTransWMS line.
    /// </summary>
    /// <param name="_transWMS">
    /// Current TmpInventTransWMS record
    /// </param>
    /// <returns>
    /// True, if batchId is used on another line; otherwise false
    /// </returns>
    /// <remarks>
    /// Method searches to see if the batchId listed on the provided record is already
    /// used on any other record.
    /// </remarks>
    public static boolean pdsBatchExist(TmpInventTransWMS _transWMS)
    {
        InventDim           inventDim;
        InventDim           transDim;
        TmpInventTransWMS   tmpTransWMS;

        if (_transWMS)
        {
            transDim = InventDim::find(_transWMS.InventDimId);

            select firstonly RecId
                from tmpTransWMS
                where  tmpTransWMS.RecId        != _transWMS.RecId
                join RecId
                from inventDim
                where  inventDim.InventDimId    == tmpTransWMS.InventDimId
                    && inventDim.InventBatchId  == transDim.InventBatchId;
        }

        return tmpTransWMS.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInventoryOwnerFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the inventory owner from the inventory transaction's dimensions to the current record's inventory dimensions.
    /// </summary>
    /// <remarks>
    /// Won't save the current record even if inventory dimensions are updated.
    /// </remarks>
    public void copyInventoryOwnerFromInventTrans()
    {
        if (this.InventTrans && this.ItemId && this.InventDimId)
        {
            InventOwnerId inventTransOwnerId = InventTrans::findRecId(this.InventTrans).inventDim().InventOwnerId_RU;

            if (inventTransOwnerId)
            {
                InventDim tmpTransInventDim = InventDim::find(this.InventDimId);
                InventOwnerId originalOwnerId = tmpTransInventDim.InventOwnerId_RU;
                tmpTransInventDim.setInventoryOwnerItemId(this.ItemId, inventTransOwnerId);

                if (tmpTransInventDim.InventOwnerId_RU != originalOwnerId)
                {
                    tmpTransInventDim = InventDim::findOrCreate(tmpTransInventDim);
                    this.InventDimId = tmpTransInventDim.inventDimId;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS54795</Label>
	<ClusteredIndex></ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSAttribute</Name>
			<Label>@PSC4</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSBaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventQtyRegisterNow</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PDSBaseAttributeValues</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin1</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin2</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCWRegisterNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUpdateBatchDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsUpdBatchDate</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>PdsUpdateBatchDate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchExp</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchExp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendBatchDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsVendBatchDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsVendBatchId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsVendBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendExpiryDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsVendExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpInventTransWMS</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpInventTransWMS</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpInventTransWMS</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTrans</Name>
					<Field>InventTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransOriginIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpInventTransWMS</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCountryOfOrigin1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_COO1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_COO1</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin1</Name>
					<SourceEDT>PdsCountryOfOrigin1</SourceEDT>
					<Field>PdsCountryOfOrigin1</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCountryOfOrigin2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_COO2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_COO2</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin2</Name>
					<SourceEDT>PdsCountryOfOrigin2</SourceEDT>
					<Field>PdsCountryOfOrigin2</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpInventTransWMS</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>