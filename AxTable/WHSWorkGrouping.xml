<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkGrouping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkGrouping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next available line number for work grouping.
    /// </summary>
    /// <returns>
    ///     The next available line number.
    /// </returns>
    public LineNum getNextLineNum()
    {
        WHSWorkGrouping     workGrouping;

        select maxof(LineNum) from workGrouping
            where workGrouping.WorkGroupingId == this.WorkGroupingId;

        return workGrouping.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWorkGrouping</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes all records with the indicated work grouping ID.
    /// </summary>
    /// <param name="_workGroupingId">
    ///     The work grouping ID indicating which records to remove.
    /// </param>
    public static void cleanupWorkGrouping(WHSWorkGroupingId _workGroupingId)
    {
        WHSWorkGrouping     workGrouping;

        delete_from workGrouping
            where workGrouping.WorkGroupingId == _workGroupingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new work grouping record with the indicated work.
    /// </summary>
    /// <param name="_workId">
    ///     The ID of the work.
    /// </param>
    /// <param name="_workGroupingId">
    ///     The work grouping ID with which to create the new record.
    /// </param>
    /// <returns>
    ///     The work grouping ID of the created group.
    /// </returns>
    public static WHSWorkGroupingId createGroupingRecord(WHSWorkId _workId, WHSWorkGroupingId _workGroupingId = '')
    {
        WHSWorkGrouping     workGrouping;

        ttsbegin;

        workGrouping.WorkGroupingId  = _workGroupingId ? _workGroupingId :
                                                                NumberSeq::newGetNum(WHSParameters::numRefWHSWorkGroupingId()).num();
        workGrouping.LineNum         = workGrouping.getNextLineNum();
        workGrouping.WorkId          = _workId;
        if (!workGrouping.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSWorkGrouping)));
        }
        else
        {
            workGrouping.insert();
        }

        ttscommit;

        return workGrouping.WorkGroupingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the indicated work from work grouping.
    /// </summary>
    /// <param name="_workGroupingId">
    ///     The ID of the grouped work to delete.
    /// </param>
    /// <param name="_workId">
    ///     The ID of the work to delete.
    /// </param>
    public static void deleteWorkId(WHSWorkGroupingId _workGroupingId, WHSWorkId _workId)
    {
        WHSWorkGrouping     workGrouping;

        ttsbegin;

        delete_from workGrouping
            where workGrouping.WorkGroupingId    == _workGroupingId  &&
                  workGrouping.WorkId            == _workId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkGrouping</c> record exists.
	/// </summary>
	/// <param name="_workGroupingId">
	/// Work grouping id of the record.
	/// </param>
	/// <param name="_workId">
	/// Work id of the record.
	/// </param>
	/// <returns>
	/// true if the record exists.
	/// </returns>
        public static boolean exist(WHSWorkGroupingId   _workGroupingId,
                                WHSWorkId           _workId)

    {
        return (_workGroupingId && _workId) &&
               (select firstonly whsWorkGrouping
                where whsWorkGrouping.WorkGroupingId == _workGroupingId  &&
                      whsWorkGrouping.WorkId         == _workId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkGrouping</c> record with given parameters.
	/// </summary>
	/// <param name="_workGroupingId">
	/// Work grouping id of the record.
	/// </param>
	/// <param name="_workId">
	/// Work id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
        public static WHSWorkGrouping find(WHSWorkGroupingId    _workGroupingId,
                                           WHSWorkId            _workId,
                                           boolean              _forupdate = false)
    {
        WHSWorkGrouping     workGrouping;

        if (_workGroupingId && _workId)
        {
            workGrouping.selectForUpdate(_forupdate);

            select firstonly workGrouping
                where workGrouping.WorkGroupingId    == _workGroupingId  &&
                      workGrouping.WorkId            == _workId;
        }

        return workGrouping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupingId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a WHSWorkGrouping record by the work group ID.
    /// </summary>
    /// <param name="_workGroupingId">
    ///     The ID of the grouped work to find.
    /// </param>
    /// <param name="_forupdate">
    ///     Indicates if the found record should be updated.
    /// </param>
    /// <returns>
    ///     A work grouping record.
    /// </returns>
    public static WHSWorkGrouping findByGroupingId(WHSWorkGroupingId    _workGroupingId,
                                                   boolean              _forupdate = false)
    {
        WHSWorkGrouping     workGrouping;

        if (_workGroupingId)
        {
            workGrouping.selectForUpdate(_forupdate);

            select firstonly workGrouping
                where workGrouping.WorkGroupingId    == _workGroupingId;
        }

        return workGrouping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGroupingWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next open line for the indicated grouping and user ID.
    /// </summary>
    /// <param name="_workGroupingId">
    ///     The ID for the grouped work.
    /// </param>
    /// <param name="_userId">
    ///     The user performing the work.
    /// </param>
    /// <returns>
    ///     The next open line.
    /// </returns>
    public static WHSWorkLine getNextGroupingWorkLine(WHSWorkGroupingId _workGroupingId, WHSUserId _userId)
    {
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        WHSWorkGrouping         workGrouping;
        WHSWorkLine             workLine;

        select firstonly WorkId from workGrouping
            order by workGrouping.LineNum desc
            where workGrouping.WorkGroupingId == _workGroupingId;

        if (workGrouping.WorkId)
        {
            workLine = workExecute.getFirstOpenLine(workGrouping.WorkId, _userId);
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupPutaway</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that group work is assigned to the correct location.
    /// </summary>
    /// <param name="_workGroupingId">
    ///     The ID of the group work.
    /// </param>
    /// <param name="_userId">
    ///     The work user.
    /// </param>
    /// <returns>
    ///     True if the location of the work is valid; otherwise, false.
    /// </returns>
    static boolean validateGroupPutaway(WHSWorkGroupingId   _workGroupingId,
                                        WHSUserId           _userId)
    {
        WhsWorkExecute      workExecute = WhsWorkExecute::construct();
        WMSLocationId       locationId;
        WHSWorkGrouping     workGrouping;
        boolean             ret = true;
        int                 i;

        while select WorkId from workGrouping
            where workGrouping.WorkGroupingId == _workGroupingId
        {
            if (!i)
            {
                locationId = workExecute.getFirstOpenLine(workGrouping.WorkId, _userId).wmsLocationId;
            }
            else if (workExecute.getFirstOpenLine(workGrouping.WorkId, _userId).wmsLocationId != locationId)
            {
                ret = false;
                break;
            }

            ++i;
        }

        if (!locationId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserGrouping</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the work is correctly grouped with the user.
    /// </summary>
    /// <param name="_workId">
    ///     The ID of the work to check.
    /// </param>
    /// <param name="_userId">
    ///     The user to check.
    /// </param>
    /// <param name="_workGroupingId">
    ///     The ID of the grouped work.
    /// </param>
    /// <returns>
    ///     true if the grouping is valid; otherwise, false.
    /// </returns>
    public static boolean validateUserGrouping(WHSWorkId            _workId,
                                               WHSUserId            _userId,
                                               WHSWorkGroupingId    _workGroupingId = '')
    {
        WHSWorkTable    sourceWorkTable;
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;
        boolean         ret = true;

        if (_workGroupingId)
        {
            sourceWorkTable = WHSWorkTable::find(WHSWorkGrouping::findByGroupingId(_workGroupingId).WorkId);
            workTable = WHSWorkTable::find(_workId);

            ret = workTable.InventSiteId        == sourceWorkTable.InventSiteId         &&
                  workTable.InventLocationId    == sourceWorkTable.InventLocationId;
        }

        if (ret)
        {
            var workExecute = WhsWorkExecute::construct();
            workLine = workExecute.getFirstOpenLine(_workId, _userId);

            ret = workLine.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupPutLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the puts, before the next pick in a group are for the same location
    /// </summary>
    /// <param name="_workGroupingId">
    /// The ID of the group work.
    /// </param>
    /// <returns>
    /// True if all locations of the group are the same; otherwise, false.
    /// </returns>
    public static boolean validateGroupPutLocations(WHSWorkGroupingId _workGroupingId)
    {
        WHSWorkGrouping workGrouping;
        WHSWorkLine     workLine;
        WMSLocationId   locationId;
        boolean         ret;

        while select WorkId from workGrouping
            where workGrouping.WorkGroupingId == _workGroupingId
        {
            // Loop next set of put lines on the work
            while select WMSLocationId, WorkType from workLine
                order by LineNum
                where workLine.WorkId       == workGrouping.WorkId
                    && workLine.WorkStatus   <= WHSWorkStatus::InProcess
            {
                if (!workLine.WMSLocationId)
                {
                    ret = false;
                    break;
                }
                else if (!locationId)
                {
                    locationId = workLine.WMSLocationId;
                    ret = true;
                }
                else if (workLine.WorkType == WHSWorkType::Pick)
                {
                    break;
                }
                else if (locationId != workLine.WMSLocationId)
                {
                    ret = false;
                    break;
                }
            }

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4519</DeveloperDocumentation>
	<Label>@WAX5559</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WorkGroupingId</TitleField1>
	<TitleField2>WorkId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkGroupingIdWHSWorkIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkGroupingIdWHSWorkIdIdx</PrimaryIndex>
	<ReplacementKey>WorkGroupingIdWHSWorkIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkGroupingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkGroupingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkGroupingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkGroupingId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkGroupingId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkGroupingIdWHSWorkIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkGroupingId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>