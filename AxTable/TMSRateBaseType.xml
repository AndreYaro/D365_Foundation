<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRateBaseType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRateBaseType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findNumberOfRateBaseFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of rate base fields that has the same rate base type.
    /// </summary>
    /// <returns>
    /// The number of rate base fields that has the same rate base type.
    /// </returns>
    int findNumberOfRateBaseFields()
    {
        TMSRateBaseTypeField    rateBaseTypeField;

        select count(recId)
            from rateBaseTypeField
            where rateBaseTypeField.RateBaseTypeCode == this.RateBaseTypeCode &&
                rateBaseTypeField.FieldType          == TMSFieldType::RateBase;

        return int642int(rateBaseTypeField.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        int64   i;

        ret = super();

        i =  (select count(RecId) from TMSRateMaster where TMSRateMaster.RateBaseTypeCode == this.RateBaseTypeCode).RecId;
        i += (select count(RecId) from TMSRateEngine where TMSRateEngine.RateBaseTypeCode == this.RateBaseTypeCode).RecId;

        if (i > 0)
        {
            ret = checkFailed(strfmt("@TRX416", this.RateBaseTypeCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>TMSRateBaseType</c> record exists.
    /// </summary>
    /// <param name="_tmsRateBaseTypeCode">
    /// Rate base type code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSRateBaseTypeCode _tmsRateBaseTypeCode)
    {
        return (_tmsRateBaseTypeCode) &&
               (select firstonly TMSRateBaseType
                    where tmsRateBaseType.RateBaseTypeCode == _tmsRateBaseTypeCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRateBaseType</c> record with given parameters.
    /// </summary>
    /// <param name="_tmsRateBaseTypeCode">
    /// Rate base type code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRateBaseType find(TMSRateBaseTypeCode _tmsRateBaseTypeCode,
                                       boolean             _forupdate = false)
    {
        TMSRateBaseType    tmsRateBaseType;

        if (_tmsRateBaseTypeCode)
        {
            tmsRateBaseType.selectForUpdate(_forupdate);

            select firstonly tmsRateBaseType
                where tmsRateBaseType.RateBaseTypeCode == _tmsRateBaseTypeCode;
        }

        return tmsRateBaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if all rate base types are valid.
    /// </summary>
    /// <returns>
    /// True if all rate base types are valid; otherwise false.
    /// </returns>
    public static boolean validateTypes()
    {
        TMSRateBaseType      rateBaseType;
        TMSRateBaseTypeField rateBaseTypeField;
        boolean              ret = true;

        select firstOnly Name, RecId from rateBaseType
            notExists join rateBaseTypeField
                where rateBaseType.RateBaseTypeCode == rateBaseTypeField.RateBaseTypeCode
                    && rateBaseTypeField.FieldType == TMSFieldType::RateBase;

        if (rateBaseType.RecId != 0)
        {
            ret = checkFailed(strFmt("@SYP4881407", rateBaseType.Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1943</DeveloperDocumentation>
	<FormRef>TMSRateBaseType</FormRef>
	<Label>@TRX82</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RateBaseTypeCode</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RateBaseTypeCodeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RateBaseTypeCodeIdx</PrimaryIndex>
	<ReplacementKey>RateBaseTypeCodeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RateBaseTypeCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRateBaseTypeCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RateBaseTypeCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>