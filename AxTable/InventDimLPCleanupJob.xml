<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupJob extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventDimLPCleanupJob create(ToDate                   _toDate,
                                                 SysGuidString            _sessionId,
                                                 InventSiteId             _inventSiteId = '',
                                                 InventLocationId         _inventLocationId = '',
                                                 NoYes                    _updateRefTable = NoYes::Yes,
                                                 InventDimLPCleanupStatus _status    = InventDimLPCleanupStatus::NotReady)
    {
        ttsbegin;

        InventDimLPCleanupJob cleanupJob;

        cleanupJob.CleanupToDate    = _toDate;
        cleanupJob.UpdateRefTable   = _updateRefTable;
        cleanupJob.Status           = _status;
        cleanupJob.SessionId        = _sessionId;
        cleanupJob.CleanUpDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        cleanupJob.InventSiteId     = _inventSiteId;
        cleanupJob.InventLocationId = _inventLocationId;

        UserInfo userInfo;
        select Name, networkAlias from userInfo
            where userInfo.Id == curUserId();

        cleanupJob.CleanUpUserId = userInfo.name ? userInfo.name : userInfo.networkAlias;

        if (cleanupJob.validateWrite())
        {
            cleanupJob.write();
        }

        ttscommit;

        return cleanupJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNotFinishedInventDimLPCleanupJob</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean existsNotFinishedInventDimLPCleanupJob()
    {
        InventDimLPCleanupJob cleanupJob;

        select firstonly RecId from cleanupJob
            where cleanupJob.Status != InventDimLPCleanupStatus::Complete;

        return cleanupJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsInventTransNotUpdatedCleanupJob</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean existsInventTransNotUpdatedCleanupJob()
    {
        InventDimLPCleanupJob cleanupJob;

        select firstonly RecId from cleanupJob
            where cleanupJob.Status == InventDimLPCleanupStatus::NotReady
               || cleanupJob.Status == InventDimLPCleanupStatus::Ready
               || cleanupJob.Status == InventDimLPCleanupStatus::InProgress;

        return cleanupJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySessionId</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupJob findBySessionId(SysGuidString _sessionId, boolean _forUpdate = false)
    {
        InventDimLPCleanupJob cleanupJob;

        if (_sessionId)
        {
            cleanupJob.selectForUpdate(_forUpdate);

            select firstonly cleanupJob
                where cleanupJob.SessionId == _sessionId;
        }

        return cleanupJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProgress</Name>
				<Source><![CDATA[
    public display percent showProgress()
    {
        if (this.Status == InventDimLPCleanupStatus::NotReady)
        {
            return 0;
        }
        else if ((this.Status == InventDimLPCleanupStatus::Ready || this.Status == InventDimLPCleanupStatus::InProgress)
               && this.RecordCount)
        {
            InventDimLPCleanupTask recordList;
            select count(RecId) from recordList
                where recordList.SessionId == this.SessionId;
            return (1 - recordList.RecId / this.RecordCount) * 100;
        }
        return 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && InventDimLPCleanupJob::existsNotFinishedInventDimLPCleanupJob())
        {
            ret = checkFailed("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventDimLPCleanupJobDevDoc</DeveloperDocumentation>
	<Label>@SCM:InventDimLPCleanupJobTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CleanupToDate</TitleField1>
	<TitleField2>Status</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SessionIdIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CleanupToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CleanUpUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>UserIdStr</ExtendedDataType>
			<Label>@SYS109893</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>InventDimLPCleanupStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StopRunning</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS78017</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpdateRefTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SCM:InventDimLPCleanupUpdateRefTable</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CleanUpDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS95468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RecordCount</Name>
			<Label>@SYS117515</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SessionId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysGuidString</ExtendedDataType>
			<Label>@SYS7115</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SessionIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SessionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>