<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChannelAttributeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailChannelAttributeGroup extends common
{
    }
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>RetailChannelAttributeGroup</c> table.
    /// </summary>
    /// <param name="_syncToRetailIntOrg">
    /// weather to sync <c>RetailInternalOrgAttributeGroup</c> table.
    /// </param>
    /// <remarks>
    /// Delete record from <c>RetailChannelAttributeGroup</c> and sync <c>RetailInternalOrgAttributeGroup</c> table.
    /// </remarks>

    public void delete(boolean _syncToRetailIntOrg = true)
    {
        RetailInternalOrgAttributeGroup retailInternalOrgAttributeGroup;
        RetailInternalOrganization retailInternalOrganization;
        RetailChannelTable retailChannelTable;

        ttsBegin;

        if (_syncToRetailIntOrg)
        {
            select forUpdate firstOnly retailInternalOrgAttributeGroup
                where retailInternalOrgAttributeGroup.AttributeGroup == this.AttributeGroup
                    && retailInternalOrgAttributeGroup.Modifier == this.Modifier
                exists join retailInternalOrganization
                    where retailInternalOrganization.RecId == retailInternalOrgAttributeGroup.InternalOrganization
                exists join retailChannelTable
                    where retailChannelTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
                        && retailChannelTable.RecId == this.Channel;

            if (retailInternalOrgAttributeGroup)
            {
                retailInternalOrgAttributeGroup.delete(false);
            }
        }

        // Delete published channel attribute group.
        RetailPubChannelAttribute::onChannelAttributeGroupDeleting(this.Channel, this.AttributeGroup);

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record into <c>RetailChannelAttributeGroup</c> table.
    /// </summary>
    /// <param name="_syncToRetailIntOrgAttGrp">
    /// weather to sync <c>RetailInternalOrgAttributeGroup</c> table.
    /// </param>
    /// <remarks>
    /// Insert record into <c> table and sync <c>RetailInternalOrgAttributeGroup</c> table.
    /// </remarks>

    public void insert(boolean _syncToRetailIntOrgAttGrp = true)
    {
        RetailChannelTable retailChannelTable;
        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrgAttributeGroup retailInternalOrgAttributeGroup;

        ttsBegin;

        super();

        if (_syncToRetailIntOrgAttGrp)
        {
            retailChannelTable = RetailChannelTable::findByRecId(this.Channel);
            retailInternalOrganization =
                RetailInternalOrganization::findByOMInternalOrganization(retailChannelTable.OMOperatingUnitID);

            // insert into retailInternalOrganization if does not exists
            // need to create Retail internal org. because this is not necessary that retail internal org. is created
            // always if channel is created. Retail internal org. creates only if categoryHierarchy is assigned on the channel.
            if (!retailInternalOrganization)
            {
               retailInternalOrganization.InternalOrganization = retailChannelTable.OMOperatingUnitID;
               retailInternalOrganization.CategoryHierarchy = retailChannelTable.CategoryHierarchy;
               retailInternalOrganization.InheritEnabled = NoYes::No;
               retailInternalOrganization.insert();
            }

            retailInternalOrgAttributeGroup =
                    RetailInternalOrgAttributeGroup::findByInternalOrgAndAttGrAndModifier(retailInternalOrganization.RecId, this.AttributeGroup, this.Modifier);

            if (!retailInternalOrgAttributeGroup)
            {
                retailInternalOrgAttributeGroup.InternalOrganization = retailInternalOrganization.RecId;
                retailInternalOrgAttributeGroup.Modifier = this.Modifier;
                retailInternalOrgAttributeGroup.AttributeGroup = this.AttributeGroup;
                retailInternalOrgAttributeGroup.insert(false);
            }
        }

        // Published channel attributes.
        RetailPubChannelAttribute::onChannelAttributeGroupInserted(this.Channel, this.AttributeGroup);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAttributeByChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all channel attributes by a channel
    /// </summary>
    /// <param name="_channel">
    /// Channel Id
    /// </param>
    /// <param name="_modifier">
    /// Channel attribute modifier
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record cursor in the <c>EcoResAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResAttribute findAttributeByChannel(RefRecId _channel, RetailChannelAttributeModifier _modifier, boolean _forupdate = false)
    {
        EcoResAttribute ecoResAttribute;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        RetailChannelAttributeGroup retailChannelAttributeGroup;

        ecoResAttribute.selectForUpdate(_forupdate);

        select RecId, Name, AttributeModifier, AttributeType from ecoResAttribute
            group by ecoResAttribute.RecId, ecoResAttribute.Name, ecoResAttribute.AttributeModifier, ecoResAttribute.AttributeType
            join Attribute, AttributeGroup from ecoResAttributeGroupAttribute
                where ecoResAttribute.RecId == ecoResAttributeGroupAttribute.Attribute
            join RecId, Channel, Modifier from retailChannelAttributeGroup
                where ecoResAttributeGroupAttribute.AttributeGroup == retailChannelAttributeGroup.AttributeGroup
                   && retailChannelAttributeGroup.Channel == _channel
                   && retailChannelAttributeGroup.Modifier == _modifier;

        return ecoResAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByChannelAndAttGrp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record in <c>RetailChannelAttributeGroup</c> table by channel and Attribute group
    /// </summary>
    /// <param name="_channel">
    /// Channel recic
    /// </param>
    /// <param name="_attGrpRecId">
    ///  Attribute group recid
    /// </param>
    /// <param name="_forUpdate">
    /// selection is for updating record
    /// </param>
    /// <returns>
    /// Selected record based on condition
    /// </returns>
    /// <remarks>
    /// Returns selected record from <c>RetailChannelAttributeGroup</c> and mark for update based on flag
    /// </remarks>
    public static RetailChannelAttributeGroup findByChannelAndAttGrp(RefRecId _channel, RefRecId _attGrpRecId, boolean _forUpdate = false)
    {
        RetailChannelAttributeGroup retailChannelAttributeGroup;

        if (_channel && _attGrpRecId)
        {
            if (_forUpdate)
            {
                retailChannelAttributeGroup.selectForUpdate(_forUpdate);
            }
            select firstOnly retailChannelAttributeGroup
                where retailChannelAttributeGroup.Channel == _channel
                    && retailChannelAttributeGroup.AttributeGroup == _attGrpRecId;
        }

        return retailChannelAttributeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChannelAtribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether an attribute is a channel specific attribute of a given channel
    /// </summary>
    /// <param name="_channel">
    /// Channel Id
    /// </param>
    /// <param name="_attribute">
    /// Attribute Id
    /// </param>
    /// <param name="_modifier">
    /// Channel attribute modifier
    /// </param>
    /// <returns>
    /// A Boolean value that indicates the result
    /// </returns>
    public static boolean isChannelAtribute(RefRecId _channel, RefRecId _attribute, RetailChannelAttributeModifier _modifier)
    {
        EcoResAttribute ecoResAttribute;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        RetailChannelAttributeGroup retailChannelAttributeGroup;

        select RecId from ecoResAttribute
            where ecoResAttribute.RecId == _attribute
            join Attribute, AttributeGroup from ecoResAttributeGroupAttribute
                where ecoResAttribute.RecId == ecoResAttributeGroupAttribute.Attribute
            exists join RecId, Channel, Modifier from retailChannelAttributeGroup
                where ecoResAttributeGroupAttribute.AttributeGroup == retailChannelAttributeGroup.AttributeGroup
                   && retailChannelAttributeGroup.Channel == _channel
                   && retailChannelAttributeGroup.Modifier == _modifier;

        return ecoResAttribute.RecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET261200</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET261199</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Channel</TitleField1>
	<TitleField2>AttributeGroup</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RetailChannelAttributeGroupIdx</ClusteredIndex>
	<Modules>ChannelManagement</Modules>
	<ReplacementKey>RetailChannelAttributeGroupIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Modifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailChannelAttributeModifier</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeAppliesToModifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAttributeAppliesToModifier</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailChannelAttributeGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Channel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Modifier</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AttributeGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttributeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttributeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroup</Name>
					<Field>AttributeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>