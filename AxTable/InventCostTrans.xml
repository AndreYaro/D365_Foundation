<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCostTrans extends common
{
    /// <summary>
    ///    Adds a given quantity to one or more of the quantity columns of the current record.
    /// </summary>
    /// <param name="_qty">
    ///    The quantity that should be added.
    /// </param>
    /// <remarks>
    ///    Different columns must be added for different types.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQty</Name>
				<Source><![CDATA[
    public void addQty(Qty _qty)
    {
        // Now check which qty fields needs to be added
        // Revaluation Ref Types has to be handled
        // seperately, so these cases are not handled in this method

        switch (this.CostTransRefType)
        {
            // Purch
            case InventCostTransRefType::Purchase :
                switch (this.CostTransType)
                {
                    case InventCostTransType::Issue   :
                    case InventCostTransType::Receipt :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Physical :
                                this.VarianceQty     += _qty;
                                this.OnHandQty       += _qty;
                                this.AccruedQty      += -_qty;
                                break;
                            case InventCostTransState::Financial :
                                this.VarianceQty     += _qty;
                                this.AccruedQty      += _qty;
                                break;
                        }
                        break;
                    case InventCostTransType::Adjustment :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Financial :
                                this.VarianceQty     += _qty;
                                break;
                        }
                        break;
                }
                break;

            // Sales
            case InventCostTransRefType::Sales :
                switch (this.CostTransType)
                {
                    case InventCostTransType::Issue   :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Physical :
                                this.OnHandQty       += _qty;
                                this.DeferredCOGSQty += -_qty;
                                break;
                            case InventCostTransState::Financial :
                                this.DeferredCOGSQty += _qty;
                                this.cogsQty         += -_qty;
                                break;
                        }
                        break;
                    case InventCostTransType::Receipt :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Physical :
                                this.OnHandQty       += _qty;
                                this.DeferredCOGSQty += -_qty;
                                this.VarianceQty     += _qty;
                                break;
                            case InventCostTransState::Financial :
                                this.DeferredCOGSQty += _qty;
                                this.cogsQty         += -_qty;
                                this.VarianceQty     += _qty;   // Variance on receipt to deferred COGS if item is revaluated between physical and financial update
                                break;
                        }
                        break;
                }
                break;

            // Production + Production flow
            case InventCostTransRefType::Production :
            case InventCostTransRefType::ProductionFlow :
                switch (this.CostTransType)
                {
                    case InventCostTransType::Issue   :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Physical :
                                this.OnHandQty       += _qty;
                                this.wipInQty        += -_qty;
                                break;
                            case InventCostTransState::Financial :
                                this.wipInQty        += _qty;
                                break;
                        }
                        break;
                    case InventCostTransType::Receipt :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Physical :
                                this.VarianceQty     += _qty;
                                this.OnHandQty       += _qty;
                                this.wipOutQty       += -_qty;
                                break;
                            case InventCostTransState::Financial :
                                this.VarianceQty     += _qty;
                                this.wipOutQty       += _qty;
                                break;
                        }
                        break;
                    case InventCostTransType::Adjustment :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Financial :
                                this.VarianceQty     += _qty;
                                break;
                        }
                        break;
                }
                break;

            // Inventory journal
            // Transfer
            case InventCostTransRefType::Transfer:
            case InventCostTransRefType::InventoryJournal:
            case InventCostTransRefType::QualityOrder:
            case InventCostTransRefType::QuarantineOrder:
            case InventCostTransRefType::WMSOrder:
            case InventCostTransRefType::Project:
                switch (this.CostTransType)
                {
                    case InventCostTransType::Issue   :
                        if (InventCostTransRefType::InventoryJournal && this.isProjectTransaction())
                        {
                            switch (this.CostTransState)
                            {
                                case InventCostTransState::Physical :
                                    this.OnHandQty       += _qty;
                                    this.DeferredCOGSQty += -_qty;
                                    break;
                                case InventCostTransState::Financial :
                                    this.DeferredCOGSQty += _qty;
                                    this.cogsQty         += -_qty;
                                    break;
                            }
                        }
                        else
                        {
                            switch (this.CostTransState)
                            {
                                case InventCostTransState::Physical :
                                    this.OnHandQty       += _qty;
                                    break;
                            }
                        }
                        break;
                    case InventCostTransType::Receipt :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Physical :
                                this.VarianceQty     += _qty;
                                this.OnHandQty       += _qty;
                                break;
                            case InventCostTransState::Financial :
                                this.VarianceQty     += _qty;
                                break;
                        }
                        break;
                    case InventCostTransType::Adjustment :
                        switch (this.CostTransState)
                        {
                            case InventCostTransState::Financial :
                                this.VarianceQty     += _qty;
                                break;
                        }
                        break;
                }
                break;
            default:
                throw error(strFmt("@SYS12580",this.CostTransRefType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQtyFromInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all the quantity fields in the current <c>InventCostTrans</c> record from a given
    ///    <c>InventCostTrans</c> record.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    An <c>InventCostTrans</c> record from which the quantities should be added to the current record.
    /// </param>
    /// <remarks>
    ///    This method is used when records must be added in a <c>recordSortedList</c>.
    /// </remarks>

    public void addQtyFromInventCostTrans(InventCostTrans _inventCostTrans)
    {
        this.OnHandQty        += _inventCostTrans.OnHandQty;
        this.VarianceQty      += _inventCostTrans.VarianceQty;
        this.AccruedQty       += _inventCostTrans.AccruedQty;
        this.wipInQty         += _inventCostTrans.wipInQty;
        this.wipOutQty        += _inventCostTrans.wipOutQty;
        this.DeferredCOGSQty  += _inventCostTrans.DeferredCOGSQty;
        this.cogsQty          += _inventCostTrans.cogsQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allQtyFieldsZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether all quantity fields are zero.
    /// </summary>
    /// <returns>
    ///    true if all quantity fields are zero; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is used to determine whether a record was found in one of the global
    ///    <c>recordSortedLists</c> and whether a record can be added to one of these lists.
    /// </remarks>

    public boolean allQtyFieldsZero()
    {
        boolean ret;

        ret = false;

        if (this.ItemId == '' &&
            this.CostTransRefType == InventCostTransRefType::ProductionFlow)
        {
            return false;
        }

        if (this.AccruedQty      == 0 &&
            this.cogsQty         == 0 &&
            this.DeferredCOGSQty == 0 &&
            this.OnHandQty       == 0 &&
            this.VarianceQty     == 0 &&
            this.wipInQty        == 0 &&
            this.wipOutQty       == 0 )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object that was previously initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    display InventCostAmount costAmount()
    {
        // Calculate the cost amount
        return this.displayQty() * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the delete action is not called from a form.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The delete action is called from a form.
    /// </exception>
    public void delete()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccruedCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price for the accrued quantity.
    /// </summary>
    /// <returns>
    /// The cost price for the accrued quantity.
    /// </returns>
    display InventAccruedCostAmount displayAccruedCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, AccruedQty)))
        {
            return 0;
        }

        return this.AccruedQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCogsCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price for the cost of goods sold quantity.
    /// </summary>
    /// <returns>
    /// The cost price for the cost of goods sold  quantity.
    /// </returns>
    display InventCOGSCostAmount displayCogsCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, cogsQty)))
        {
            return 0;
        }

        return this.cogsQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostPricePcs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price per piece.
    /// </summary>
    /// <returns>
    /// The cost price per piece.
    /// </returns>
    display CostPricePcs displayCostPricePcs()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, Price)) ||
            !hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, PriceQty)) ||
            !hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, PriceUnit)) ||
            !hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, Markup)))
        {
            return 0;
        }

        return InventItemPrice::findRecId(this.ItemPriceRefRecId).pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDeferredCogsCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price for the deferred cost of goods sold quantity.
    /// </summary>
    /// <returns>
    /// The cost price for the deferred cost of goods sold  quantity.
    /// </returns>
    display InventDeferredCOGSCostAmount displayDeferredCogsCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, DeferredCOGSQty)))
        {
            return 0;
        }

        return this.DeferredCOGSQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOnHandCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the cost price for the inventory on-hand quantity.
    /// </summary>
    /// <returns>
    ///    The cost price for the inventory on-hand quantity.
    /// </returns>
    display InventOnHandCostAmount displayOnHandCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, OnHandQty)))
        {
            return 0;
        }

        return this.OnHandQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the relevant quantity based on the values of the <c>CostTransRefType</c>,
    ///    <c>CostTransState</c>, and <c>CostTransType</c> fields.
    /// </summary>
    /// <returns>
    ///    The quantity according to the values of the <c>CostTransRefType</c>, <c>CostTransState</c>, and
    ///    <c>CostTransType</c> fields.
    /// </returns>
    /// <remarks>
    ///    <c>InventCostTrans</c> records contain several quantity fields. This method retrieves the quantity
    ///    field that matches a particular combination of <c>CostTransRefType</c>, <c>CostTransState</c>, and
    ///    <c>CostTransType</c>.
    /// </remarks>
    display inventCostQty displayQty()
    {
        return this.InventCostTransMap::displayQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVarianceCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price for the variance quantity.
    /// </summary>
    /// <returns>
    /// The cost price for the variance quantity.
    /// </returns>
    display InventVarianceCostAmount displayVarianceCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, VarianceQty)))
        {
            return 0;
        }

        return this.VarianceQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWIPInCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price for the work in progress in quantity.
    /// </summary>
    /// <returns>
    /// The cost price for the work in progress in quantity.
    /// </returns>
    display InventWIPInCostAmount displayWIPInCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, wipInQty)))
        {
            return 0;
        }

        return this.wipInQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWIPOutCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost price for the work in progress out quantity.
    /// </summary>
    /// <returns>
    /// The cost price for the work in progress out quantity.
    /// </returns>
    display InventWIPOutCostAmount displayWIPOutCostAmount()
    {
        // Check if user has access
        if (!hasFieldAccess(tableNum(InventCostTrans), fieldNum(InventCostTrans, wipOutQty)))
        {
            return 0;
        }

        return this.wipOutQty * this.displayCostPricePcs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default dimension of Cost transaction will be retrieved from item when current costTrans posting is production flow within WIP stage, otherwise,
    /// retrieve dimensions from cost transaction instead.
    /// Default dimension of cost variance transaction will be retrieved from dimension of costTrans.
    /// </summary>
    /// <param name="_fetchVarianceTransDimension">
    /// This <c>boolean</c> value represents if it is fetching variance transaction dimension or cost transaction dimension.
    /// </param>
    /// <returns>
    /// The default dimension.
    /// </returns>
    public DimensionDefault getDefaultDimension(boolean _fetchVarianceTransDimension)
    {
        DimensionDefault defaultDimension = this.DefaultDimension;
        InventCostTrans  costTransProd;

        if (!_fetchVarianceTransDimension && this.TransRefId && this.isWIP())
        {
            select firstonly CostTransRefType from costTransProd
                where costTransProd.CostTransRefType  == InventCostTransRefType::ProductionFlow
                && costTransProd.CostTransType     == InventCostTransType::Issue
                && costTransProd.TransRefId        == this.TransRefId;

            if (costTransProd.CostTransRefType == InventCostTransRefType::ProductionFlow)
            {
                defaultDimension = InventTable::find(this.ItemId).inventDimLinkedDefaultDimension(InventDim::find(this.FinancialInventDimId));
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container with the quantity fields of the current record
    /// </summary>
    /// <returns>
    ///    A container with the quantity fields of the current record
    /// </returns>
    /// <remarks>
    ///    This method is used on the <c>inventCostTrans</c> and <c>inventCostTransSum</c> tables to obtain a
    ///    common interface to the quantity fields. This is used in the <c>inventCostRevaluate</c> class.
    ///    The
    ///    variance qty is not passed because it is not revaluated and not summed.
    /// </remarks>

    public container getQtyFields()
    {
        // Variance qty is excluded, because it does not
        // - exist in the inventCostTransSum table
        // - get revaluated
        // - make sens to sum it up
        return [this.OnHandQty,
                this.AccruedQty,
                this.wipInQty,
                this.wipOutQty,
                this.DeferredCOGSQty,
                this.cogsQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventCostTrans</Name>
				<Source><![CDATA[
    public void initFromInventCostTrans(InventCostTrans _inventCostTrans)
    {
        this.CostTransRefType       = _inventCostTrans.CostTransRefType;
        this.CostTransState         = _inventCostTrans.CostTransState;
        this.CostTransType          = _inventCostTrans.CostTransType;
        this.DefaultDimension       = this.copyDimension(_inventCostTrans.DefaultDimension);
        this.FinancialInventDimId   = _inventCostTrans.FinancialInventDimId;
        this.InventTransId          = _inventCostTrans.InventTransId;
        this.InventTransIdReturn    = _inventCostTrans.InventTransIdReturn;
        this.ItemId                 = _inventCostTrans.ItemId;
        this.ItemPriceRefRecId      = _inventCostTrans.ItemPriceRefRecId;
        this.TransDate              = _inventCostTrans.TransDate;
        this.TransRefId             = _inventCostTrans.TransRefId;
        this.Voucher                = _inventCostTrans.Voucher;
        this.Canceled               = _inventCostTrans.Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventCostTransSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>inventCostTrans</c> record from an <c>inventCostTransSum</c> record.
    /// </summary>
    /// <param name="_inventCostTransSum">
    /// The <c>inventCostTransSum</c> record from which the data should be obtained.
    /// </param>
    /// <remarks>
    /// This method sets the value of the <c>itemId</c> , <c>financialInventDimId</c> , and all the
    /// quantity (except the <c>varianceQty</c> and WIP) fields in an <c>inventCostTrans</c> record by
    /// using a specified <c>inventCostTransSum</c> record.
    /// </remarks>

    public void initFromInventCostTransSum(InventCostTransSum _inventCostTransSum)
    {
        // Main Information
        this.ItemId                = _inventCostTransSum.ItemId;
        this.FinancialInventDimId  = _inventCostTransSum.FinancialInventDimId;
        this.DefaultDimension      = this.copyDimension(0);

        // Quantities
        this.AccruedQty       = _inventCostTransSum.AccruedQty;
        this.cogsQty          = _inventCostTransSum.cogsQty;
        this.DeferredCOGSQty  = _inventCostTransSum.DeferredCOGSQty;
        this.OnHandQty        = _inventCostTransSum.OnHandQty;
        this.wipInQty         = 0;
        this.wipOutQty        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventCostTransSumWip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventCostTrans</c> record from an <c>InventCostTransSum</c> WIP record.
    /// </summary>
    /// <param name="_inventCostTransSum">
    /// The <c>InventCostTransSum</c> record from which the data should be obtained.
    /// </param>
    /// <remarks>
    /// This method sets the value of the <c>ItemId</c>, <c>FinancialInventDimId</c>,
    /// <c>DefaultDimension</c>, <c>TransRefId</c>, and all the WIP
    /// quantity fields in an <c>InventCostTrans</c> record by using a given <c>InventCostTransSum</c>
    /// record.
    /// </remarks>
    public void initFromInventCostTransSumWip(InventCostTransSum _inventCostTransSum)
    {
            // Main Information
            this.ItemId                = _inventCostTransSum.ItemId;
            this.FinancialInventDimId  = _inventCostTransSum.FinancialInventDimId;
            this.TransRefId            = _inventCostTransSum.TransRefId;
            this.DefaultDimension      = this.copyDimension(_inventCostTransSum.DefaultDimension);

            // Quantities
            this.AccruedQty       = 0;
            this.cogsQty          = 0;
            this.DeferredCOGSQty  = 0;
            this.OnHandQty        = 0;
            this.wipInQty         = _inventCostTransSum.wipInQty;
            this.wipOutQty        = _inventCostTransSum.wipOutQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes some fields of an <c>InventCostTrans</c> record by using an <c>InventItemPrice</c>
    ///    record.
    /// </summary>
    /// <param name="_inventItemPrice">
    ///    The <c>InventItemPrice</c> record from which the data should be taken.
    /// </param>
    /// <remarks>
    ///    This method sets all <c>StdCost</c> and <c>ItemPriceRefRecId</c> fields for an
    ///    <c>InventCostTransRecord</c> record by using a given <c>InventItemPrice</c> record.
    /// </remarks>

    private void initFromInventItemPrice(InventItemPrice _inventItemPrice)
    {
        this.ItemPriceRefRecId = _inventItemPrice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an <c>inventCostTrans</c> record by from an <c>inventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>inventTable</c> record from which the data should be taken.
    /// </param>
    /// <remarks>
    ///    Sets the <c>itemId</c> and dimension fields for an <c>inventCostTransRecord</c> from a given
    ///    <c>inventTable</c> record.
    /// </remarks>

    private void initFromInventTable(InventTable _inventTable)
    {
        this.ItemId      = _inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an <c>inventCostTrans</c> record from an <c>inventTrans</c> and an an <c>inventTransOrigin</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>inventTrans</c> record from which the data should be taken.
    /// </param>
    /// <param name="_leanCostingFacade">
    /// This parameter should not be used in production code - for testing purposes only
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>inventTransOrigin</c> record from which the data should be taken.
    /// </param>
    /// <remarks>
    ///    Sets all <c>InventTransId</c>, <c>InventTransIdReturn</c>, <c>ItemId</c>, <c>TransRefId</c>,
    ///    <c>TransType</c> and <c>Module</c> fields for an <c>inventCostTransRecord</c> from a given
    ///    <c>inventTrans</c> and <c>inventTransOrigin</c> record.
    ///    The module field is set according to the <c>inventTransType</c>.
    /// </remarks>

    private void initFromInventTrans(
        InventTrans             _inventTrans,
        LeanCostingFacadeBase   _leanCostingFacade,
        InventTransOrigin       _inventTransOrigin = _inventTrans.inventTransOrigin())
    {
        this.initFromInventTransOrigin(_inventTransOrigin, _leanCostingFacade);

        if (_inventTrans.ReturnInventTransOrigin)
        {
            this.InventTransIdReturn  = InventTransOrigin::find(_inventTrans.ReturnInventTransOrigin).InventTransId;
        }
        else
        {
            this.InventTransIdReturn  = '';
        }

        this.setTypeFromInventDirection(_inventTrans.direction(), _inventTransOrigin.ReferenceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an <c>inventCostTrans</c> record from an <c>inventTransOrigin</c> record.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// The inventory transaction origin record, from which the data should be taken.
    /// </param>
    /// <param name="_leanCostingFacade">
    /// This parameter should not be used in production code - for testing purposes only
    /// </param>
    /// <remarks>
    ///    Sets all <c>InventTransId</c>, <c>ItemId</c>, <c>TransRefId</c> and
    ///    <c>TransType</c> fields for an <c>inventCostTrans</c> record from a given
    ///    <c>inventTransOrigin</c> record.
    /// </remarks>
    private void initFromInventTransOrigin(
        InventTransOrigin       _inventTransOrigin,
        LeanCostingFacadeBase   _leanCostingFacade)
    {
        this.InventTransId        = _inventTransOrigin.InventTransId;
        this.ItemId               = _inventTransOrigin.ItemId;

        this.setRefTypeFromInventTransType(_inventTransOrigin.ReferenceCategory);

        // Change for ProductionFlow
        if (this.CostTransRefType == InventCostTransRefType::ProductionFlow)
        {
            this.TransRefId  = LeanProductionFlowReference::find(_leanCostingFacade.getProductionFlowFromInventTrans(_inventTransOrigin.RecId)).planReference().PlanName;
        }
        else
        {
            this.TransRefId  = _inventTransOrigin.ReferenceId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the insert action is not called from a form.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The insert action is called from a form.
    /// </exception>
    public void insert()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRevaluation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether this is a revaluation <c>inventCostTrans</c> record.
    /// </summary>
    /// <returns>
    ///    true if this is a revaluation <c>inventCostTrans</c> record; otherwise, false.
    /// </returns>

    public boolean isRevaluation()
    {
        if (this.CostTransRefType == InventCostTransRefType::InventoryRevaluation ||
            this.CostTransRefType == InventCostTransRefType::WIPRevaluation)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an <c>inventCostTrans</c> record affects work in progress.
    /// </summary>
    /// <returns>
    ///    true if the <c>inventCostTrans</c> record affects work in progress; otherwise, false.
    /// </returns>

    public boolean isWIP()
    {
        if (this.CostTransRefType == InventCostTransRefType::Production     ||
            this.CostTransRefType == InventCostTransRefType::ProductionFlow ||
            this.CostTransRefType == InventCostTransRefType::WIPRevaluation)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an <c>inventCostTrans</c> record is related to a project transaction.
    /// </summary>
    /// <returns>
    ///    true if the <c>inventCostTrans</c> record is related to a project transaction; otherwise, false.
    /// </returns>

    public boolean isProjectTransaction()
    {
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;

        select firstonly ProjId
            from inventTrans
                join inventTransOrigin
                    where inventTransOrigin.InventTransId == this.InventTransId
                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

        return inventTrans && inventTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// The first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously initialized by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetQtyFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets all the quantity fields in the current <c>inventCostTrans</c> record to zero.
    /// </summary>
    /// <remarks>
    ///    This method is used when records must be added in a <c>recordSortedList</c> list.
    /// </remarks>

    public void resetQtyFields()
    {
        // Reset the quantity fields
        this.AccruedQty       = 0;
        this.cogsQty          = 0;
        this.DeferredCOGSQty  = 0;
        this.OnHandQty        = 0;
        this.VarianceQty      = 0;
        this.wipInQty         = 0;
        this.wipOutQty        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionWhenEnableDimensionDefaultingSourceFeature</Name>
				<Source><![CDATA[
    protected DimensionDefault getDefaultDimensionWhenEnableDimensionDefaultingSourceFeature(InventTable _inventTable = InventTable::find(this.ItemId))
    {
        DimensionDefault    defaultDimension;
        CostParameters costParameters = CostParameters::find();
        switch (costParameters.DimensionDefaultingSource)
        {
            case DimensionDefaultingSource::None:
                return 0;
            case DimensionDefaultingSource::Posting:
                return this.DefaultDimension;
            case DimensionDefaultingSource::Table:
                return _inventTable.inventDimLinkedDefaultDimension(InventDim::find(this.FinancialInventDimId));
            default:
                return _inventTable.inventDimLinkedDefaultDimension(InventDim::find(this.FinancialInventDimId));
        }
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault revaluationDefaultDimension(InventTable _inventTable = InventTable::find(this.ItemId),
                boolean _fetchVarianceTransDimension = false) // represents it is fetching variance transaction dimension or cost transaction dimension.
    {
        if (this.isWIP())
        {
            return this.getDefaultDimension(_fetchVarianceTransDimension);
        }

        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            return this.getDefaultDimensionWhenEnableDimensionDefaultingSourceFeature(_inventTable);
        }
        
        return _inventTable.inventDimLinkedDefaultDimension(InventDim::find(this.FinancialInventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the sign of all the quantity fields for the current record.
    /// </summary>
    /// <remarks>
    ///    This method is used during the cancellation process.
    /// </remarks>

    public void reverseSign()
    {
        this.OnHandQty        = -1 * this.OnHandQty;
        this.VarianceQty      = -1 * this.VarianceQty;
        this.AccruedQty       = -1 * this.AccruedQty;
        this.wipInQty         = -1 * this.wipInQty;
        this.wipOutQty        = -1 * this.wipOutQty;
        this.DeferredCOGSQty  = -1 * this.DeferredCOGSQty;
        this.cogsQty          = -1 * this.cogsQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinancialInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the financial inventory dimension for a specified <c>invetDimGroupId</c> and
    ///    <c>inventDim</c> record.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about dimension setup.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>inventDim</c> record for which the financial relevant dimensions have to be determined.
    /// </param>
    /// <remarks>
    ///    This method is used to obtain the financial <c>inventDimId</c> record, which will be used to group
    ///    the <c>inventCostTrans</c> records. If many <c>inventTrans</c> records exist (because of the usage
    ///    of serial numbers) these records will be grouped according to their financial inventory dimensions
    ///    in the <c>inventCostTrans</c> table.
    /// </remarks>

    public void setFinancialInventDimId(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _inventDim)
    {
        InventDim   inventDimFinancial;

        // Copy all the dimension fields regarding dimGroupId
        inventDimFinancial.copyDimFinancial(_inventDimGroupSetup, _inventDim);

        // Get inventDim record
        inventDimFinancial.InventSerialId = '';
        inventDimFinancial.InventBatchId = '';
        inventDimFinancial = InventDim::findOrCreate(inventDimFinancial);

        this.FinancialInventDimId = inventDimFinancial.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryRevaluation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields that are required for a revaluation of the inventory.
    /// </summary>
    /// <param name="_costTransType">
    ///    The <c>costTransType</c> value.
    /// </param>
    /// <param name="_onHandQty">
    ///    The on-hand quantity that should be set.
    /// </param>
    /// <param name="_defferedCOGSQty">
    ///    The deferred cost of goods sold (COGS) quantity that should be set.
    /// </param>
    /// <remarks>
    ///    This method is used during revaluation to set the appropriate <c>costTransType</c>,
    ///    <c>costTransRefType</c>, and <c>quantity</c> fields by using the revaluation that is processed.In
    ///    this case these are the on-hand quantity, deferred COGS qty, and the variance quantity.Regarding
    ///    the <c>costTransType</c>, the sign of the quantities will be reverted, if it is an Issue type.This
    ///    method will be called two times during revaluation process. Once with the type Issue to move
    ///    everything out of inventory, and then with the type Receipt to put everything back in. A variance
    ///    might be recorded for the receipt so that the variance qty is set.
    /// </remarks>

    public void setInventoryRevaluation(
        InventCostTransType _costTransType,
        Qty                 _onHandQty,
        Qty                 _defferedCOGSQty)
    {
        Qty                     qtyOnHand, qtyDeffered;

        #DEFINE.negative(-1)

        this.CostTransRefType = InventCostTransRefType::InventoryRevaluation;
        this.CostTransType    = _costTransType;

        // Revert sign for the issues
        if (this.CostTransType == InventCostTransType::Issue)
        {
            qtyOnHand   = _onHandQty * #negative;
            qtyDeffered = _defferedCOGSQty * #negative;
        }
        else
        {
            qtyOnHand   = _onHandQty;
            qtyDeffered = _defferedCOGSQty;

            this.VarianceQty      = qtyOnHand + qtyDeffered;
        }

        this.OnHandQty        = qtyOnHand;
        this.DeferredCOGSQty  = qtyDeffered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTypeFromInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>InventCostTransRefType</c> value that is used for a transaction.
    /// </summary>
    /// <param name="_inventTransType">
    /// The <c>InventTransType</c> value that is used to determine the <c>InventCostTransRefType</c> value.
    /// </param>
    /// <remarks>
    /// This method associates the <c>InventTransType</c> value to the <c>inventCostTransRefType</c> object.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The inventory transaction types not handled by standard cost.
    /// </exception>

    private void setRefTypeFromInventTransType(InventTransType _inventTransType)
    {
        InventCostTransRefType inventCostTransRefType = this.costTransRefTypeFromInventTransType(_inventTransType);

        if (inventCostTransRefType == InventCostTransRefType::None)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        this.CostTransRefType = inventCostTransRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTransRefTypeFromInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>InventCostTransRefType</c> value that is used for a transaction.
    /// </summary>
    /// <param name="_inventTransType">The <c>InventTransType</c> value that is used to determine the <c>InventCostTransRefType</c> value.</param>
    /// <returns>The <c>InventCostTransRefType</c> value.</returns>
    protected InventCostTransRefType costTransRefTypeFromInventTransType(InventTransType _inventTransType)
    {
        switch (_inventTransType)
        {
            case InventTransType::Sales:
                return InventCostTransRefType::Sales;

            case InventTransType::Statement:
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    return InventCostTransRefType::Sales;
                }
                break;

            case InventTransType::TransferOrderReceive:
            case InventTransType::TransferOrderScrap:
            case InventTransType::TransferOrderShip:
                return InventCostTransRefType::Transfer;

            case InventTransType::InventLossProfit:
            case InventTransType::BOMMain:
            case InventTransType::BOMLine:
            case InventTransType::InventTransaction:
            case InventTransType::InventTransfer:
            case InventTransType::InventCounting:
                // Add Work to this cost type
            case InventTransType::WHSWork:
            case InventTransType::WHSContainer:
            case InventTransType::WHSQuarantine:
            case InventTransType::KanbanJobTransferIssue:
            case InventTransType::KanbanJobTransferReceipt:
            case InventTransType::Asset:
            case InventTransType::FixedAssets_RU:
            case InventTransType::Assembling_JP:
                return InventCostTransRefType::InventoryJournal;

            case InventTransType::Production:
            case InventTransType::ProdLine:
            case InventTransType::PmfProdCoBy:
                return InventCostTransRefType::Production;

            case InventTransType::Purch:
                return InventCostTransRefType::Purchase;

            case InventTransType::QuarantineOrder:
                return InventCostTransRefType::QuarantineOrder;

            case InventTransType::QualityOrder:
                return InventCostTransRefType::QualityOrder;

            case InventTransType::WMSOrder:
            case InventTransType::WMSTransport:
                return InventCostTransRefType::WMSOrder;

            case InventTransType::Project:
                return InventCostTransRefType::Project;

            // Production Flow
            case InventTransType::KanbanEmptied:
            case InventTransType::KanbanJobPickingList:
            case InventTransType::KanbanJobProcess:
            case InventTransType::KanbanJobWIP:
                return InventCostTransRefType::ProductionFlow;
        }
        
        // Not including of the following types:
        // SummedUp     ... Used for summary transactions created in inventory closing (weigthed average)
        return InventCostTransRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTypeFromInventDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>InventCostTransType</c> value that is used for a transaction from the
    /// <c>InventDirection</c> value.
    /// </summary>
    /// <param name="_inventDirection">
    /// The <c>InventDirection</c> value that should be transferred to the <c>InventCostTransType</c> value.
    /// </param>
    /// <param name="_inventTransType">
    /// The <c>InventTransType</c> value that is used to set the <c>InventCostTransType</c> value.
    /// </param>
    /// <remarks>
    /// This method maps the <c>inventDirection</c> to the <c>inventCostTransType</c> . In the case of the
    /// resetting of a production order, these transactions should be treated as production issues, not as
    /// receipts.
    /// </remarks>

    private void setTypeFromInventDirection(
        InventDirection     _inventDirection,
        InventTransType     _inventTransType)
    {
        switch (_inventDirection)
        {
            case InventDirection::Issue :
                switch (_inventTransType)
                {
                    // Currently only for productions, revert the direction
                    case InventTransType::Production :
                    case InventTransType::PmfProdCoBy :
                        this.CostTransType = InventCostTransType::Receipt;
                        break;
                    default :
                        this.CostTransType = InventCostTransType::Issue;
                }
                break;
            case InventDirection::Receipt :
                switch (_inventTransType)
                {
                    // Currently only for prod lines, revert the direction
                    case InventTransType::ProdLine :
                        this.CostTransType = InventCostTransType::Issue;
                        break;
                    default :
                        this.CostTransType = InventCostTransType::Receipt;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWIPRevaluation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields that are required for a revaluation of the work in progress (WIP) in quantity.
    /// </summary>
    /// <param name="_costTransType">
    ///    The <c>costTransType</c> that is currently processed.
    /// </param>
    /// <param name="_wipInqty">
    ///    The WIP in quantity that should be set.
    /// </param>
    /// <param name="_wipOutQty">
    ///    The WIP out quantity that should be set.
    /// </param>

    public void setWIPRevaluation(
        InventCostTransType     _costTransType,
        Qty                     _wipInqty,
        Qty                     _wipOutQty)
    {
        Qty                     qtyIn, qtyOut;

        #DEFINE.negative(-1)

        this.CostTransRefType = InventCostTransRefType::WIPRevaluation;
        this.CostTransType    = _costTransType;

        // Revert sign for the issues
        if (this.CostTransType == InventCostTransType::Issue)
        {
            qtyIn  = _wipInqty * #negative;
            qtyOut = _wipOutQty * #negative;
        }
        else
        {
            qtyIn  = _wipInqty;
            qtyOut = _wipOutQty;

            this.VarianceQty      = qtyIn + qtyOut;
        }

        this.wipInQty         = qtyIn;
        this.wipOutQty        = qtyOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchCostTransState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Switches the <c>costTransState</c> value from financial to physical or the other way round.
    /// </summary>
    /// <remarks>
    ///    This method will be used when a record with a different state must be found.
    /// </remarks>

    public void switchCostTransState()
    {
        switch (this.CostTransState)
        {
            case InventCostTransState::Physical :
                this.CostTransState = InventCostTransState::Financial;
                break;
            case InventCostTransState::Financial :
                this.CostTransState = InventCostTransState::Physical;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the update action is not called from a form.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The update action is called from a form.
    /// </exception>
    public void update()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sum of variance amounts from <c>InventCostTransVariance</c> records.
    /// </summary>
    /// <returns>
    ///    The sum of variance amounts.
    /// </returns>
    display InventCostVariance varianceAmount()
    {
        return this.InventCostTransMap::varianceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>inventCostTrans</c> Table
    /// </summary>
    /// <param name="_transDate">
    ///    The transaction date for which the record should be looked up.
    /// </param>
    /// <param name="_itemId">
    ///    The <c>itemId</c> value for which the record should be looked up.
    /// </param>
    /// <param name="_financialInventDimId">
    ///    The <c>inventDimId</c> value for which the record should be looked up.
    /// </param>
    /// <param name="_inventTransId">
    ///    The <c>inventTransId</c> value for which the record should be looked up.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher for which the record should be looked up.
    /// </param>
    /// <param name="_costTransState">
    ///    The <c>costTransState</c> value for which the record should be looked up.
    /// </param>
    /// <param name="_costTransRefType">
    ///    The <c>costTransRefType</c> for which the record should be looked up.
    /// </param>
    /// <param name="_costTransType">
    ///    The <c>costTransType</c> value for which the record should be looked up.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    An <c>inventCostTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    This method uses the primary key to find the record. Use this method if the full key is
    ///    available.
    ///    To look up a record that belongs to a revaluation, use the <c>itemPriceRefRecId</c> to
    ///    distinguish between the records.
    /// </remarks>

    public static InventCostTrans find(
        TransDate                   _transDate,
        ItemId                      _itemId,
        InventDimId                 _financialInventDimId,
        InventTransId               _inventTransId,
        Voucher                     _voucher,
        InventCostTransState        _costTransState,
        InventCostTransRefType      _costTransRefType,
        InventCostTransType         _costTransType,
        boolean                     _forUpdate = false)
    {
        // Use the this method if full key is availiable

        InventCostTrans inventCostTrans;

        if (_voucher)
        {
            inventCostTrans.selectForUpdate(_forUpdate);

            select firstonly inventCostTrans
                where inventCostTrans.TransDate            == _transDate
                   && inventCostTrans.ItemId               == _itemId
                   && inventCostTrans.FinancialInventDimId == _financialInventDimId
                   && inventCostTrans.InventTransId        == _inventTransId
                   && inventCostTrans.Voucher              == _voucher
                   && inventCostTrans.CostTransState       == _costTransState
                   && inventCostTrans.CostTransRefType     == _costTransRefType
                   && inventCostTrans.CostTransType        == _costTransType;
        }

        return inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up an <c>inventCostTrans</c> record in memory or in the database.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    The <c>inventCostTrans</c> record to be looked up.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    An <c>inventCostTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    Use this method if it is not sure that the record has been written to the database.
    ///    This method
    ///    will call the <c>inventCostUpdate.getCostTrans</c> method to check the memory structures of the
    ///    <c>inventCostUpdate</c> class.
    ///    Because <c>recordSortedLists</c> are used, the record must be
    ///    initialized with all necessary fields before you call this method.
    /// </remarks>

    public static InventCostTrans findCostTrans(
        InventCostTrans     _inventCostTrans,
        boolean             _forupdate = false)
    {
        InventCostTrans     inventCostTrans;

        // Set the caller parameters
        inventCostTrans.data(_inventCostTrans);

        // 1.) Look the record up in the inventCostUpdate framework
        // If the record is still in memory, the inventItemPrice of the given record
        // and the record I am looking for are the same
        // ==> They should be found
        inventCostTrans = InventCostUpdateGlobal::Instance().inventCostUpdate().getCostTrans(inventCostTrans);

        if (inventCostTrans.allQtyFieldsZero())
        {
            // Record was not found in the inventCostUpdate framework
            // 2.) Try to select it from the database
            // If this given record is a record from a revaluation
            // I have to include the itemPriceRefRecId in the search
            // So this method has to be called exactly with the itemPriceRefRecId
            // I should be looking for
            // In the other cases, the itemPriceRefRecId might have changed
            // inbetween, so I have to find the record without this reference
            inventCostTrans = InventCostTrans::find(inventCostTrans.TransDate,
                                                    inventCostTrans.ItemId,
                                                    inventCostTrans.FinancialInventDimId,
                                                    inventCostTrans.InventTransId,
                                                    inventCostTrans.Voucher,
                                                    inventCostTrans.CostTransState,
                                                    inventCostTrans.CostTransRefType,
                                                    inventCostTrans.CostTransType,
                                                    _forupdate);
        }

        return inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>InventCostTrans</c> record for a given RecId.
    /// </summary>
    /// <param name="_recId">
    ///    The RecId of the record that should be found.
    /// </param>
    /// <returns>
    ///    An <c>InventCostTrans</c> record.
    /// </returns>
    public static InventCostTrans findRecId(RecId _recId)
    {
        InventCostTrans inventCostTrans;

        if (_recId)
        {
            select firstonly inventCostTrans
                where inventCostTrans.RecId == _recId;
        }
        return inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an inventCostTrans record.
    /// </summary>
    /// <param name="_costTransState">
    /// The costTransState that should be used to initialize this record.
    /// </param>
    /// <param name="_inventItemPrice">
    /// The inventItemPrice record that belongs to the inventCostTrans record.
    /// </param>
    /// <param name="_inventTable">
    /// The inventTable from which the data should be taken.
    /// </param>
    /// <param name="_voucher">
    /// The voucher that belongs to this inventCostTrans record.
    /// </param>
    /// <param name="_transDate">
    /// The transDate that belongs to this inventCostTrans record.
    /// </param>
    /// <param name="_dimension">
    /// The dimension, that belongs to this record.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>inventTrans</c> record that belongs to this record.
    /// </param>
    /// <param name="_inventDim">
    /// The inventDim record that should be used to determin the financialInventDimId.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// The <c>inventTransOrigin</c> record that belongs to this record.
    /// </param>
    /// <param name="_costTransType">
    /// The costTransType that should be used for this record.
    /// </param>
    /// <param name="_leanCostingFacade">
    /// This parameter should not be used in production code - for testing purposes only
    /// </param>
    /// <returns>
    /// An inventCostTrans record.
    /// </returns>
    /// <remarks>
    /// For revaluation records no inventTrans is availiable. For revaluation records no inventDim can be passed at the initialization. It will be set later.
    /// For adjustments the costTransType has to be passed in and reset after it was set in the inventCostTrans.initFromInventTrans method.
    /// </remarks>

    public static InventCostTrans initInventCostTrans(
        InventCostTransState    _costTransState,
        InventItemPrice         _inventItemPrice,
        InventTable             _inventTable,
        Voucher                 _voucher,
        TransDate               _transDate,
        DimensionDefault        _dimension = 0,
        InventTrans             _inventTrans = null,
        InventDim               _inventDim = null,
        InventTransOrigin       _inventTransOrigin = _inventTrans.inventTransOrigin(),
        InventCostTransType     _costTransType = InventCostTransType::Issue, // Only used for adjustments
        LeanCostingFacadeBase   _leanCostingFacade = LeanCostingFacade::construct())
    {
        InventCostTrans inventCostTrans;

        // When a dimension has been specified, also a inventDim needs to be given
        if (!prmisDefault(_dimension) && prmisDefault(_inventDim))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        // First of all, the state has to be set
        inventCostTrans.CostTransState    = _costTransState;

        // Now set the costTransType
        inventCostTrans.CostTransType = _costTransType;

        // Set variables
        inventCostTrans.initFromInventItemPrice(_inventItemPrice);
        inventCostTrans.initFromInventTable(_inventTable);

        // For revaluation no inventDim can be passed at the initialization of this record
        if (_inventDim)
        {
            inventCostTrans.setFinancialInventDimId(InventDimGroupSetup::newInventTable(_inventTable), _inventDim);
        }

        inventCostTrans.Voucher           = _voucher;
        inventCostTrans.TransDate         = _transDate;
        inventCostTrans.DefaultDimension  = inventCostTrans.copyDimension(_dimension);

        // If a inventTrans record is given, the record
        // can be completed, so that no further processing
        // is necessary
        if (_inventTrans)
        {
            inventCostTrans.initFromInventTrans(_inventTrans, _leanCostingFacade, _inventTransOrigin);

            // A cost trans type is passed only into this method, if it is an adjustment.
            // Then the costtransType that is determinded from the inventTrans has to be overwritten
            if (_costTransType == InventCostTransType::Adjustment)
            {
                inventCostTrans.CostTransType = _costTransType;
            }

            inventCostTrans.addQty(_inventTrans.Qty);
        }

        return inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialIssueOrReceiptPriceForProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the financial issue or receipt standard cost for a production order.
    /// </summary>
    /// <param name = "_inventTable">The item for which to get the standard cost.</param>
    /// <param name = "_inventTransId">The lot id for which to get the standard cost.</param>
    /// <param name = "_inventDim">The inventory dimensions for which to get the standard cost.</param>
    /// <param name = "_transDate">The date when the production was ended.</param>
    /// <returns>An <c>InventItemPrice</c> record with the standard cost.</returns>
    internal static InventItemPrice getFinancialIssueOrReceiptPriceForProductionOrder(
        InventTable         _inventTable,
        InventTransId       _inventTransId,
        InventDim           _inventDim,
        TransDate           _transDate)
    {
        // We do not need to pass the voucher as the production order only can be ended once.
        InventDimParm inventDimParm;
        inventDimParm.setActiveSiteAndProductDimensions(InventDimGroupSetup::newInventTable(_inventTable));

        InventDim inventDimCriteria = _inventDim;
        InventItemPrice inventItemPrice;
        InventCostTrans inventCostTrans;
        InventDim inventDim;

        select firstonly inventItemPrice
            order by ActivationDate desc, CreatedDateTime desc
        exists join inventCostTrans
        where inventCostTrans.ItemPriceRefRecId == inventItemPrice.RecId
            && inventCostTrans.InventTransId == _inventTransId
            && inventCostTrans.ItemId == _inventTable.ItemId
            && inventCostTrans.CostTransState == InventCostTransState::Financial
            && inventCostTrans.CostTransRefType == InventCostTransRefType::Production
            && (inventCostTrans.CostTransType == InventCostTransType::Issue || inventCostTrans.CostTransType == InventCostTransType::Receipt)
            && inventCostTrans.TransDate == _transDate
        #inventDimExistsJoin(inventCostTrans.FinancialInventDimId,inventDim,inventDimCriteria,inventDimParm);

        return inventItemPrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123782</DeveloperDocumentation>
	<FormRef>InventCostTrans</FormRef>
	<Label>@SYS110730</Label>
	<SingularLabel>@SYS110698</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransactionIdIdx</ClusteredIndex>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CostTransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventCostTransVariance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventCostTransVariance</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnHandQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinancialInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cost</Name>
			<Label>@SYS4249</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayOnHandCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAccruedCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWIPInCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWIPOutCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayDeferredCogsCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCogsCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVarianceCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinancialInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Canceled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinancialInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Lot</Name>
			<Label>@SYS16247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>varianceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OnHandQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccruedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPInQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPOutQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferredCOGSQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>COGSQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VarianceQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostTransRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTransState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReturn</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS86923</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccruedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyAccrued</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Canceled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys3012</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>COGSQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyCOGS</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostTransRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventCostTransRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostTransState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventCostTransState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventCostTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeferredCOGSQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyDeferredCOGS</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FinancialInventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdReturn</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ItemPriceRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventItemPriceRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnHandQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyOnHand</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VarianceQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyVariance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WIPInQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyWIPIn</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WIPOutQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostQtyWIPOut</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CostTransIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FinancialInventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostTransState</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostTransRefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>createdTransactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CostTransRefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventCostTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRefId</MapField>
					<MapFieldTo>TransRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventItemPriceRefRecId</MapField>
					<MapFieldTo>ItemPriceRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>COGSQty</MapField>
					<MapFieldTo>COGSQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Canceled</MapField>
					<MapFieldTo>Canceled</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OnhandQty</MapField>
					<MapFieldTo>OnHandQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccruedQty</MapField>
					<MapFieldTo>AccruedQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WipInQty</MapField>
					<MapFieldTo>WIPInQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VarianceQty</MapField>
					<MapFieldTo>VarianceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WipOutQty</MapField>
					<MapFieldTo>WIPOutQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FinancialInventDimId</MapField>
					<MapFieldTo>FinancialInventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeferredCOGSQty</MapField>
					<MapFieldTo>DeferredCOGSQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdReturn</MapField>
					<MapFieldTo>InventTransIdReturn</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostTransRefType</MapField>
					<MapFieldTo>CostTransRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostTransType</MapField>
					<MapFieldTo>CostTransType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostTransState</MapField>
					<MapFieldTo>CostTransState</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostTransRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinancialInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinancialInventDimId</Name>
					<Field>FinancialInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemPrice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemPrice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemPriceRefRecId</Name>
					<Field>ItemPriceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123783</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::InventoryJournal</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQualityOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::QualityOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQuarantineOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQuarantineOrder</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>QuarantineId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::QuarantineOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123783</EntityRelationshipRole>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::Transfer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlanReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanReference</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::ProductionFlow</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>PlanName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123783</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123783</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::Purchase</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdReturn</Name>
					<SourceEDT>InventTransIdReturn</SourceEDT>
					<Field>InventTransIdReturn</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123783</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransType</Name>
					<Field>CostTransType</Field>
					<ValueStr>InventCostTransType::Issue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSOrder</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>orderId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostTransRefType</Name>
					<Field>CostTransRefType</Field>
					<ValueStr>InventCostTransRefType::WMSOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>