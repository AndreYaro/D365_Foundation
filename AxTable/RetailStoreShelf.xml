<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreShelf</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStoreShelf extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the store number, store name and section number.
    /// </summary>
    /// <returns>
    /// The store number, store name and section number.
    /// </returns>
    public str caption()
    {
        RetailStoreTable storeTable;
        str ret;

        ret = super();

        if (this.StoreId != "")
            storeTable = RetailStoreTable::find(this.StoreId);
            if (storeTable)
                ret = storeTable.StoreNumber + " " + storeTable.name() + " " + this.SectionId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates the <c>SectionPct</c> field of <c>RetailStoreShelf</c> table.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID of the field to be validated.
    /// </param>
    /// <returns>
    /// true if the field is valid else false.
    /// </returns>
    /// <remarks>
    /// The RetailStoreShelf.validateSection method validates the value in the <c>SectionPct</c> field of <c>RetailStoreShelf</c> table.
    /// Throws error if exceeds 100.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (fieldExt2Id(_fieldIdToCheck) == fieldNum(RetailStoreShelf, SectionPct))
        {
            this.validateSection();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value in the <c>SectionPct</c> field of the <c>RetailStoreShelf</c> table.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The value in the <c>SectionPct</c> field of the <c>RetailStoreShelf</c> table exceeds 100.
    /// </exception>
    void validateSection()
    {
        RetailStoreShelf   storeShelf;
        real            sumValue;

        sumValue = this.SectionPct;

        while select StoreId, SectionId, ShelfId, SectionPct from storeShelf
        where   storeShelf.StoreId == this.StoreId
        &&      storeShelf.SectionId == this.SectionId
        &&      storeShelf.ShelfId != this.ShelfId
        {
            sumValue += storeShelf.SectionPct;
        }

        if (sumValue > 100)
            throw error("@RET4047");
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStoreShelf</c> table by using the specified
    /// <c>parameter</c> value.
    /// </summary>
    /// <param name="_storeId">
    /// The store ID number of the store shelves record to find.
    /// </param>
    /// <param name="_sectionId">
    /// The section ID number of the store shelves record to find.
    /// </param>
    /// <param name="_shelfId">
    /// The shelf ID number of the store shelves record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreShelf</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStoreShelf find(RetailStoreId _storeId, RetailSectionId _sectionId, RetailShelfId _shelfId, boolean _forUpdate = false)
    {
        RetailStoreShelf storeShelf;

        if (_storeId && _sectionId && _shelfId)
        {
            storeShelf.selectForUpdate(_forUpdate);

            select firstonly storeShelf
                index hint storeSectionShelfIdx
                where storeShelf.StoreId == _storeId
                   && storeShelf.SectionId == _sectionId
                   && storeShelf.ShelfId == _shelfId;
        }

        return storeShelf;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260395</DeveloperDocumentation>
	<FormRef>RetailStoreShelf</FormRef>
	<Label>@RET3227</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>storeId</TitleField1>
	<TitleField2>sectionId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>storeSectionShelfIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<PrimaryIndex>storeSectionShelfIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shelfId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shelfId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShelfSize</Name>
			<Label>@RET3228</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sectionPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sectionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSectionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>sectionPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShelfSectionPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shelfId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShelfId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>storeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>storeSectionShelfIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>storeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>sectionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>shelfId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>storeId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>storeSection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStoreSection</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeId</Name>
					<Field>storeId</Field>
					<RelatedField>storeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>sectionId</Name>
					<Field>sectionId</Field>
					<RelatedField>sectionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>