<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRouteConfig</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRouteConfig extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateRouteFromRoutePlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates route record.
    /// </summary>
    /// <returns>
    /// Route id.
    /// </returns>
    public TMSRouteCode generateRouteFromRoutePlan()
    {
        TMSRouteSegmentConfig   segmentConfig;
        TMSRoute                route;
        TMSRouteSegment         routeSegment;
        TMSHubMaster            originHub;
        TMSHubMaster            destHub;
        TMSSequence             sequence;

        ttsbegin;

        route.setRouteCode();
        route.Description        = this.Name;
        route.RouteConfigCode    = this.RouteConfigCode;
        route.RoutePlanName      = this.Name;

        if (!route.validateWrite())
        {
            throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRoute)));
        }
        else
        {
            route.insert();
        }

        while select CarrierCode,CarrierServiceCode,ModeCode,RouteEndHubCode,RouteStartHubCode from segmentConfig
            where segmentConfig.RouteConfigCode == this.RouteConfigCode
        {
            sequence                            += 100;
            originHub                           = TMSHubMaster::find(segmentConfig.RouteStartHubCode);
            destHub                             = TMSHubMaster::find(segmentConfig.RouteEndHubCode);
            routeSegment.RouteCode              = route.RouteCode;
            routeSegment.Sequence               = sequence;
            routeSegment.OriginName             = originHub.HubMasterCode;
            routeSegment.OriginLocation         = originHub.Location;
            routeSegment.DestinationName        = destHub.HubMasterCode;
            routeSegment.DestinationLocation    = destHub.Location;
            routesegment.CarrierCode            = segmentConfig.CarrierCode;
            routeSegment.CarrierServiceCode     = segmentConfig.CarrierServiceCode;
            routeSegment.ModeCode               = segmentConfig.ModeCode;
            routeSegment.Manual                 = NoYes::Yes;

            if (!routeSegment.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRouteSegment)));
            }
            else
            {
                routeSegment.insert();
            }
        }

        ttscommit;

        return route.RouteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>TMSRouteConfig</c> record exists.
    /// </summary>
    /// <param name="_tmsRouteConfigCode">
    /// Route config code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSRouteConfigCode _tmsRouteConfigCode)
    {
        return (_tmsRouteConfigCode) &&
               (select firstonly TMSRouteConfig
                    where tmsRouteConfig.RouteConfigCode == _tmsRouteConfigCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRouteConfig</c> record with given parameters.
    /// </summary>
    /// <param name="_tmsRouteConfigCode">
    /// Route config code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRouteConfig find(TMSRouteConfigCode _tmsRouteConfigCode,
                                      boolean            _forupdate = false)
    {
        TMSRouteConfig    tmsRouteConfig;

        if (_tmsRouteConfigCode)
        {
            tmsRouteConfig.selectForUpdate(_forupdate);

            select firstonly tmsRouteConfig
                where tmsRouteConfig.RouteConfigCode == _tmsRouteConfigCode;
        }

        return tmsRouteConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1956</DeveloperDocumentation>
	<FormRef>TMSRouteConfig</FormRef>
	<Label>@TRX:RoutePlans</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RouteConfigCode</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RouteConfig</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RouteConfig</PrimaryIndex>
	<ReplacementKey>RouteConfig</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteConfigCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteConfigCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteConfigCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteConfigCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteConfigCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RouteConfig</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteConfigCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Name</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>