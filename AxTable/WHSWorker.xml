<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorker</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorker extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the name of the <c>HcmWorker</c> that is related to
    ///     the current <c>WHSWorker</c> record.
    /// </summary>
    /// <returns>
    ///     The <c>HcmWorkerName</c> of the related worker.
    /// </returns>
    public display HcmWorkerName name()
    {
        HcmWorker   hcmWorker;

        hcmWorker = HcmWorker::find(this.Worker);

        return hcmWorker.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUserToChangePassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if user is allowed to reset password for warehouse users connected to a specific worker.
    /// </summary>
    /// <param name="_currentWorkerId">
    /// The warehouse worker <c>WHSWorkerRecId</c> assigned to current user.
    /// </param>
    /// <param name="_workerRecId">
    /// The warehouse worker <c>WHSWorkerRecId</c> for which we validate permissions to reset password functionality.
    /// </param>
    /// <returns>
    /// true if user is one of the admin or warehouse manager roles or if the current worker is the worker for which user
    /// wants to change password; false for the rest of the cases.
    /// </returns>
    public static boolean allowUserToChangePassword(WHSWorkerRecId _currentWorkerId, WHSWorkerRecId _workerRecId)
    {
        boolean allowUserToChangePassword = true;

        // Validates if user is admin, admin will keep default value "true" as is allowed to reset password for all workers
        if (!isSystemAdministrator())
        {
            // If the user does not have access to reset the passwords for all workers through security privileges
            if (!WHSWorker::userHasResetPasswordMenuItemAccess())
            {
                // For any other role which is not Admin/Warehouse Manager with access to this table,
                // we need to validate current worker. User should be allowed functionality only for current worker
                if (_currentWorkerId != _workerRecId || _currentWorkerId ==0)
                {
                    allowUserToChangePassword =  false;
                }
            }
        }

        return allowUserToChangePassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasResetPasswordMenuItemAccess</Name>
				<Source><![CDATA[
    private static boolean userHasResetPasswordMenuItemAccess()
    {
        // If the user has access to the "Reset user password" menu item, that means for any user, not just himself
        return hasMenuItemAccess(menuItemDisplayStr(WHSResetUserPassword), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>WHSWorker</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///     The recId of the <c>WHSWorker</c> record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(WHSWorkerRecId _recId)
    {
        return _recId &&
               (select firstonly RecId from whsWorker
                    where whsWorker.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForPackProfileId</Name>
				<Source><![CDATA[
    internal static boolean existsForPackProfileId(WHSPackProfileId _packProfileId)
    {
        return _packProfileId && (select firstonly RecId from WHSWorker
                where WHSWorker.PackProfileId == _packProfileId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSWorker</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The recId of the worker to record to be found.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSWorker</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSWorker find(
        WHSWorkerRecId  _recId,
        boolean         _forupdate = false)
    {
        WHSWorker   worker;

        worker.selectForUpdate(_forupdate);

        select firstonly worker
            where worker.RecId == _recId;

        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>WHSWorker</c> table by worker.
    /// </summary>
    /// <param name="_worker">
    ///     The worker of the worker record; optional.
    /// </param>
    /// <param name="_forupdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>WHSWorker</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSWorker findByWorker(
        HcmWorkerRecId   _worker = HcmWorkerLookup::currentWorker(),
        boolean          _forupdate = false)
    {
        WHSWorker    whsWorker;

        if (_worker)
        {
            whsWorker.selectForUpdate(_forupdate);

            select firstonly whsWorker
                where whsWorker.Worker == _worker;
        }

        return whsWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoLoginAsWorkUser</Name>
				<Source><![CDATA[
    internal static WHSUserId autoLoginAsWorkUser()
    {
        if (WhsMobileAutoLoginFlight::instance().isEnabled())
        {
            return WHSWorker::findByWorker().findDefaultWorkUser();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultWorkUser</Name>
				<Source><![CDATA[
    private WHSUserId findDefaultWorkUser()
    {
        WHSWorkUser workUser;

        select firstonly workUser
            where workUser.Worker == this.RecId &&
                  workUser.IsDefaultWorkUser;

        return workUser.UserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultPackingStationLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WMSLocation findDefaultPackingStationLocation()
    {
        WMSLocation wmsLocation;
        InventDim inventDim;

        select firstonly wmsLocation
            exists join inventDim 
            where inventDim.InventLocationId == wmsLocation.inventLocationId 
            && inventDim.wMSLocationId == wmsLocation.wMSLocationId
            && inventDim.inventDimId == this.DefaultPackingStationLocation;

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WHSWorker, CloseContainerProfileId):
                this.defaultCloseContainerProfileId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [[fieldnum(WHSWorker, CloseContainerProfileId),
                [fieldnum(WHSWorker, PackProfileId)]]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCloseContainerProfileId</Name>
				<Source><![CDATA[
    private void defaultCloseContainerProfileId()
    {
        WHSPackProfile profile = WHSPackProfile::find(this.PackProfileId);

		if (profile.CloseContainerProfileId)
        {
			this.CloseContainerProfileId = profile.CloseContainerProfileId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerProfile</Name>
				<Source><![CDATA[
    private boolean validateContainerProfile()
    {
        boolean ret = true;

        WHSPackProfile profile = WHSPackProfile::find(this.PackProfileId);
        if (profile.CloseContainerProfileId && this.CloseContainerProfileId != profile.CloseContainerProfileId)
        {
            ret = checkFailed(strFmt("@WAX:ContainerPolicyShouldMatchPackProfile", this.CloseContainerProfileId, this.PackProfileId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSWorker, CloseContainerProfileId):
                    ret = this.validateContainerProfile();
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX5579</DeveloperDocumentation>
	<Label>@WAX5504</Label>
	<TitleField1>Worker</TitleField1>
	<TitleField2>TableId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>WorkerIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CloseContainerProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Profiles</Name>
			<Label>@WAX3256</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CloseContainerProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Worker</Name>
			<Label>@WAX5504</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CloseContainerProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCloseContainerProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultPackingStationLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@WAX:DefaultPackingStation</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkerIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PackProfileIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PackProfileId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HCMWorker</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSCloseContainerProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSCloseContainerProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CloseContainerProfileId</Name>
					<SourceEDT>WHSCloseContainerProfileId</SourceEDT>
					<Field>CloseContainerProfileId</Field>
					<RelatedField>CloseContainerProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CLoseContainerProfileIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSPackProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSPackProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackProfileId</Name>
					<SourceEDT>WHSPackProfileId</SourceEDT>
					<Field>PackProfileId</Field>
					<RelatedField>PackProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackingProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>DefaultPackingStationLocation</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>