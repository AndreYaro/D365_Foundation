<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupDivisionTmp_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupDivisionTmp_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTotalPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the total percentage is equal to <c>100</c> or not.
    /// </summary>
    /// <param name="_markupDivisionTmp">
    /// A buffer of the <c>MarkupDivisionTmp_IN</c> table.
    /// </param>
    /// <returns>
    /// true if percentage is not equal to 100; otherwise, false.
    /// </returns>
    public static boolean checkTotalPercentage(MarkupDivisionTmp_IN _markupDivisionTmp)
    {
        MarkupDivisionTmp_IN    markupDivisionTmp;
        boolean                 ret = true;

        if (_markupDivisionTmp.RecId)
        {
            markupDivisionTmp.setTmpData(_markupDivisionTmp);
            select sum(MarkupPct) from markupDivisionTmp;

            if (markupDivisionTmp.MarkupPct != 100)
            {
                //Total amount should be 100% divided
                ret = checkFailed("@GLS220882");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupAutoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>MarkupAutoLine</c> table.
    /// </summary>
    /// <param name="_markupDivisionTmp">
    /// A buffer of the <c>MarkupDivisionTmp_IN</c> table.
    /// </param>
    /// <param name="_transTableid">
    /// The ID of the <c>MarkupAutoTable</c> map.
    /// </param>
    /// <param name="_transRecId">
    /// A ID of the <c>MarkupAutoTable</c> table.
    /// </param>
    /// <param name="_headingLine">
    /// A heading line value of the <c>MarkupAutoTable</c> table.
    /// </param>
    public static void insertIntoMarkupAutoLine(
        MarkupDivisionTmp_IN _markupDivisionTmp,
        tableId              _transTableid,
        recId                _transRecId,
        HeadingLine          _headingLine)
    {
        MarkupAutoLine          markupAutoLine;
        MarkupDivisionTmp_IN    markupDivisionTmp;
        LineNum                 LineNum;

        markupDivisionTmp.setTmpData(_markupDivisionTmp);

        select count(RecId) from markupAutoLine
            where markupAutoLine.TableRecId == _transRecId
               && markupAutoLine.TableTableId == _transTableid;

        lineNum = int642int(markupAutoLine.RecId + 1);

        while select markupDivisionTmp
        {
            markupAutoLine.MarkupCode      = markupDivisionTmp.MarkupCode;
            markupAutoLine.ModuleType      = MarkupModuleType::Vend;
            markupAutoLine.Value           = markupDivisionTmp.DividedValue;
            markupAutoLine.ModuleCategory  = _headingLine;
            markupAutoLine.TableTableId    = _transTableid;
            markupAutoLine.TableRecId      = _transRecId;
            markupAutoLine.LineNum         = lineNum;
            markupAutoLine.CurrencyCode    = Ledger::accountingCurrency();
            markupAutoLine.MarkupCurrencyCode = markupAutoLine.CurrencyCode;
            markupAutoLine.insert();
            lineNum ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>MarkupTrans</c> table.
    /// </summary>
    /// <param name="_markupDivisionTmp">
    /// A buffer of the <c>MarkupDivisionTmp_IN</c> table.
    /// </param>
    /// <param name="_transTableid">
    /// The ID of the caller map.
    /// </param>
    /// <param name="_transRecId">
    /// The ID of the caller table.
    /// </param>
    public static void insertIntoMarkupTrans(
        MarkupDivisionTmp_IN _markupDivisionTmp,
        tableId              _transTableid,
        recId                _transRecId)
    {
        MarkupTrans             markupTrans;
        MarkupDivisionTmp_IN    markupDivisionTmp;
        LineNum                 LineNum;

        PurchLine               purchLineLocal;
        PurchTable              purchTableLocal;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTableLocal;
        VendInvoiceInfoLine     vendInvoiceInfoLineLocal;
        VendInvoiceInfoTable    vendInvoiceInfoTableLocal;
        Common                  commonLocal;

        markupDivisionTmp.setTmpData(_markupDivisionTmp);

        select count(RecId) from markupTrans
            where markupTrans.TransRecId == _transRecId
               && markupTrans.TransTableId == _transTableid;

        lineNum = int642int(markupTrans.RecId + 1);

        while select markupDivisionTmp
        {
            markupTrans.clear();
            markupTrans.MarkupCode      = markupDivisionTmp.MarkupCode;
            markupTrans.ModuleType      = MarkupModuleType::Vend;
            markupTrans.Value           = markupDivisionTmp.DividedValue;
            markupTrans.TransTableId    = _transTableid;
            markupTrans.TransRecId      = _transRecId;
            markupTrans.LineNum         = lineNum;

            switch (_transTableid)
            {
                case tablenum(PurchTable)    :
                    purchTableLocal             = PurchTable::findRecId(_transRecId);
                    markupTrans.CurrencyCode    = purchTableLocal.CurrencyCode;
                    commonLocal                 = purchTableLocal;
                    break;
                case tablenum(PurchLine)    :
                    purchLineLocal              = PurchLine::findRecId(_transRecId);
                    markupTrans.CurrencyCode    = purchLineLocal.CurrencyCode;
                    commonLocal                 = purchLineLocal;
                    break;
                case tablenum(VendInvoiceInfoSubTable)    :
                    vendInvoiceInfoSubTableLocal    = VendInvoiceInfoSubTable::findRecId(_transRecId);
                    markupTrans.CurrencyCode        = vendInvoiceInfoSubTableLocal.purchTable().CurrencyCode;
                    commonLocal                     = vendInvoiceInfoSubTableLocal;
                    break;
                case tablenum(VendInvoiceInfoLine)    :
                    vendInvoiceInfoLineLocal    = VendInvoiceInfoLine::findRecId(_transRecId);
                    markupTrans.CurrencyCode    = vendInvoiceInfoLineLocal.CurrencyCode;
                    commonLocal                 = vendInvoiceInfoLineLocal;
                    break;
                case tablenum(VendInvoiceInfoTable)    :
                    vendInvoiceInfoTableLocal   = VendInvoiceInfoTable::findRecId(_transRecId);
                    markupTrans.CurrencyCode    = vendInvoiceInfoTableLocal.CurrencyCode;
                    commonLocal                 = vendInvoiceInfoTableLocal;
                    break;
            }

            markupTrans.insert();

            if (markupTrans.TransTableId == tableNum(VendInvoiceInfoTable) ||
            markupTrans.TransTableId == tableNum(VendInvoiceInfoSubTable) ||
            markupTrans.TransTableId == tableNum(VendInvoiceInfoLine))
            {
                VendInvoiceInfoMarkupMatchingTolerance::createIfAbsent(markupTrans);
            }

            MarkupTrans::updateCallerDatasource(commonLocal,
                                                markupTrans.useInMatching(),
                                                true);

            lineNum ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDividedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the calculated value to divided value.
    /// </summary>
    /// <param name="_markupDivisionTmp">
    /// A buffer of the <c>MarkupDivisionTmp_IN</c> table.
    /// </param>
    /// <param name="_totalAmount">
    /// The total amount.
    /// </param>
    public static void updateDividedAmount(
        MarkupDivisionTmp_IN _markupDivisionTmp,
        markupValue          _totalAmount)
    {
        MarkupDivisionTmp_IN    markupDivisionTmp;

        markupDivisionTmp.setTmpData(_markupDivisionTmp);

        ttsBegin;
        while select forUpdate markupDivisionTmp
        {
            markupDivisionTmp.DividedValue =  _totalAmount * markupDivisionTmp.MarkupPct/100;
            markupDivisionTmp.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS220902</DeveloperDocumentation>
	<Label>@GLS220881</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DividedValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
			<Label>@GLS220883</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupPct</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LoadOnInventoryPct_IN</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupTable_MarkupDivisionTmp</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ModuleType_Extern</Name>
					<RelatedField>ModuleType</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>