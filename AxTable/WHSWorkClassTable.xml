<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkClassTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkClassTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkClassTable</c> record exists.
	/// </summary>
	/// <param name="_workClassId">
	/// Work class id of the record.
	/// </param>
	/// <param name="_workTransType">
	/// Work transaction type of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSWorkClassId _workClassId, WHSWorkTransType _workTransType)
    {
        return (_workClassId && _workTransType) &&
               (select firstonly whsWorkClassTable
                where whsWorkClassTable.WorkClassId      == _workClassId  &&
                      whsWorkClassTable.WorkTransType    == _workTransType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkClassTable</c> record with given parameters.
	/// </summary>
	/// <param name="_workClassId">
	/// Work class id of the record.
	/// </param>
	/// <param name="_workTransType">
	/// Work transaction type of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkClassTable find(WHSWorkClassId     _workClassId,
                                         WHSWorkTransType   _workTransType,
                                         boolean            _forupdate = false)
    {
        WHSWorkClassTable   workClassTable;

        if (_workClassId && _workTransType)
        {
            workClassTable.selectForUpdate(_forupdate);

            select firstonly workClassTable
                where workClassTable.WorkClassId     == _workClassId     &&
                      workClassTable.WorkTransType   == _workTransType;
        }

        return workClassTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkClassId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkClassTable</c> record by id.
	/// </summary>
	/// <param name="_workClassId">
	/// Work class id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkClassTable findByWorkClassId(WHSWorkClassId    _workClassId,
                                                      boolean           _forupdate = false)
    {
        WHSWorkClassTable   workClassTable;

        if (_workClassId)
        {
            workClassTable.selectForUpdate(_forupdate);

            select firstonly workClassTable
                where workClassTable.WorkClassId == _workClassId;
        }

        return workClassTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorkClassIdByWorkTransType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Performs for lookup on <c>WHSWorkClassTable</c> table by work transaction type.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control that lookup belongs to.
	/// </param>
	/// <param name="_workTransType">
	/// Work transaction type of the lookup.
	/// </param>
    public static void lookupWorkClassIdByWorkTransType(FormStringControl _ctrl, WHSWorkTransType _workTransType)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(WHSWorkClassTable), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(WHSWorkClassTable));

        sysTableLookup.addLookupfield(fieldNum(WHSWorkClassTable, WorkClassId));
        sysTableLookup.addLookupfield(fieldNum(WHSWorkClassTable, Description));
        queryBuildDataSource.addRange(fieldNum(WHSWorkClassTable, WorkTransType)).value(queryValue(enum2int(_workTransType)));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validation activities for the work class record.
    /// </summary>
    /// <returns>true, if the record is valid; otherwise, false.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();
    
        if (ret)
        {
            if (this.RecId == 0 && WHSWorkClassTable::findByWorkClassId(this.WorkClassId))
            {
                ret = checkFailed(strFmt("@WAX:WorkClassWithSameIdAlreadyExists_Error", this.WorkClassId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4495</DeveloperDocumentation>
	<FormRef>WHSWorkClass</FormRef>
	<Label>@WAX1035</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>WorkClassId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>WorkClassIdWorkTransTypeIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkClassIdWorkTransTypeIdx</PrimaryIndex>
	<ReplacementKey>WorkClassIdWorkTransTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkClassId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkClassId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkClassIdWorkTransTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkClassId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>