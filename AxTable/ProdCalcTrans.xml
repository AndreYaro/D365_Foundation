<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdCalcTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consumptionPcs</Name>
				<Source><![CDATA[
    display InventQtyConsumptionPcs consumptionPcs()
    {
        return (this.consumptionSum()) / (this.Qty ? this.Qty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumptionSum</Name>
				<Source><![CDATA[
    display InventQtyConsumption consumptionSum()
    {
        return this.ConsumpVariable + this.ConsumpConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    display CostPricePcs costPricePcs()
    {
        return this.costPriceSum() / (this.Qty ? this.Qty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceSum</Name>
				<Source><![CDATA[
    display CostPriceQtyTotal costPriceSum()
    {
        return this.CostAmount + this.CostMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRealQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the good quantity for the production calculation.
    /// </summary>
    /// <returns>
    /// The good quantity.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is called for a production flow.
    /// </exception>
    public display ProdReportedGood displayRealQty()
    {
        if (this.TransRefType == ProdTransRefType::ProductionFlow)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ProdTableJour::historicalCostQtyGood(this.TransRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Id of the referenced transaction.
    /// </summary>
    /// <returns>
    /// The Id of the referenced transaction.
    /// </returns>
    public display CostTransRefId displayTransRefId()
    {
        if (this.TransRefType == ProdTransRefType::BackflushCosting)
        {
            return LeanProductionFlowCosting::find(str2int64(this.TransRefId)).displayProductionFlowName();
        }

        return this.TransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    display UnitOfMeasureSymbol displayUnitId()
    {
        return this.BOMCalcTransMap::displayUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostBreakdown</Name>
				<Source><![CDATA[
    public void initCostBreakdown(ProdCalcTrans _prodCalcTrans)
    {
        this.CollectRefProdId   = _prodCalcTrans.CollectRefProdId;
        this.CollectRefLevel    = _prodCalcTrans.CollectRefLevel + 1;
        this.DerivedReference   = _prodCalcTrans.DerivedReference;
        this.DerivedRefNum      = _prodCalcTrans.DerivedRefNum;
        this.TransRefId         = _prodCalcTrans.TransRefId;
        this.TransRefType       = _prodCalcTrans.TransRefType;
        this.IdRefTableId       = _prodCalcTrans.IdRefTableId;
        this.IdRefRecId         = _prodCalcTrans.IdRefRecId;
        this.Qty                = _prodCalcTrans.Qty;
        this.TransDate          = _prodCalcTrans.TransDate;
        this.CalcGroupId        = _prodCalcTrans.CalcGroupId;

        this.CalcType           = ItemCalcType::CostGroup;
        this.CostPriceModelUsed = BOMCalcCostPriceUsed::None;

        this.Production         = NoYes::No;
        this.bom                = NoYes::No;

        this.Resource           = _prodCalcTrans.Resource;
        this.UnitId             = '';
        this.OprId              = '';
        this.InventDimStr       = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPmfProdCoByProduct</Name>
				<Source><![CDATA[
    public void initFromPmfProdCoByProduct(PmfProdCoBy _coBy)
    {
        this.IdRefTableId     = _coBy.TableId;
        this.IdRefRecId       = _coBy.RecId;
        this.DerivedReference = _coBy.InventRefType;
        this.DerivedRefNum    = _coBy.InventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    void initFromProdBOM(ProdBOM    prodBOM)
    {
        this.IdRefTableId     = prodBOM.TableId;
        this.IdRefRecId       = prodBOM.RecId;
        this.DerivedReference = prodBOM.InventRefType;
        this.DerivedRefNum    = prodBOM.InventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdFlow</Name>
				<Source><![CDATA[
    public void initFromProdFlow(
        LeanProductionFlowReference _productionFlow,
        BOMCalcResource             _resource,
        InventDimId                 _inventDimId,
        CostGroupId                 _costGroupId,
        InventCostLevel             _level,
        ItemCalcType                _itemCalcType
        )
    {
        // Reference
        this.TransRefType      = ProdTransRefType::ProductionFlow;
        this.IdRefRecId        = _productionFlow.RecId;
        this.IdRefTableId      = _productionFlow.TableId;
        this.TransRefId        = _productionFlow.planReference().PlanName;
        this.CollectRefProdId  = _productionFlow.planReference().PlanName;
        this.CollectRefLevel   = _level;

        // Type
        this.CalcType          = _itemCalcType;
        this.Resource          = _resource;
        this.InventDimId       = _inventDimId;
        this.BOMCalcTransMap::setInventDimStr(_inventDimId);
        this.CostGroupId       = _costGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRoute</Name>
				<Source><![CDATA[
    void  initFromProdRoute(ProdRoute prodRoute)
    {
        this.IdRefTableId    = prodRoute.TableId;
        this.IdRefRecId      = prodRoute.RecId;
        this.Resource        = prodRoute.getResource(true,
                                                     true,
                                                     dateNull(),
                                                     maxDate(),
                                                     ProdTable::find(prodRoute.ProdId).inventDim().InventSiteId,
                                                     true).WrkCtrId;
        this.OprId           = prodRoute.OprId;
        this.OprNum          = prodRoute.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    void  initFromProdTable(ProdTable prodTable, ItemCalcType calcType)
    {
        this.CollectRefProdId = prodTable.CollectRefProdId;
        this.CollectRefLevel  = prodTable.CollectRefLevel + 1;
        this.TransRefId       = prodTable.ProdId;
        this.TransRefType     = ProdTransRefType::Production;
        this.CalcType         = calcType;

        if (this.CalcType == ItemCalcType::Production)
        {
            this.CollectRefLevel = prodTable.CollectRefLevel;
            this.IdRefTableId    = prodTable.TableId;
            this.IdRefRecId      = prodTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this record refers to an indirect cost.
    /// </summary>
    /// <returns>
    /// true if this record refers to an indirect cost; otherwise false.
    /// </returns>
    public boolean isIndirectCost()
    {
        if (this.CalcType == ItemCalcType::IndirectSurcharge ||
           this.CalcType == ItemCalcType::IndirectRate ||
           this.CalcType == ItemCalcType::IndirectInUnitBased ||
           this.CalcType == ItemCalcType::IndirectOutUnitBased ||
           this.CalcType == ItemCalcType::IndirectPurchUnitBased)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBreakdownTransLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the integer part of the line number for all breakdown <c>ProdCalcTrans</c> records
    /// related to the current <c>ProdCalcTrans</c> record.
    /// </summary>
    /// <param name="_newLineNum">
    /// New line number to replace the integer part of the old line number.
    /// </param>
    public void updateBreakdownTransLineNum(LineNum _newLineNum)
    {
        ProdCalcTrans prodCalcTransCostBreakdown;
        update_recordset prodCalcTransCostBreakdown
            setting LineNum = prodCalcTransCostBreakdown.LineNum - this.LineNum + _newLineNum
            where prodCalcTransCostBreakdown.TransRefId         == this.TransRefId
                && prodCalcTransCostBreakdown.TransRefType       == this.TransRefType
                && prodCalcTransCostBreakdown.Resource           == this.Resource
                && prodCalcTransCostBreakdown.IdRefTableId       == this.IdRefTableId
                && prodCalcTransCostBreakdown.IdRefRecId         == this.IdRefRecId
                && prodCalcTransCostBreakdown.CollectRefProdId   == this.CollectRefProdId
                && prodCalcTransCostBreakdown.CollectRefLevel    == this.CollectRefLevel + 1
                && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                && prodCalcTransCostBreakdown.LineNum            >  this.LineNum
                && prodCalcTransCostBreakdown.LineNum            <  this.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this record refers to an item cost.
    /// </summary>
    /// <returns>
    /// true if this record refers to an item cost; otherwise, false.
    /// </returns>
    public boolean isItemCost()
    {
        return (this.CalcType == ItemCalcType::Production ||
           this.CalcType == ItemCalcType::Item ||
           this.CalcType == ItemCalcType::BOM ||
               this.CalcType == ItemCalcType::Service ||
               this.CalcType == ItemCalcType::Burden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResourceCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this record refers to a resource or resource group cost.
    /// </summary>
    /// <returns>
    /// true if this record refers to a resource or resource group; otherwise false.
    /// </returns>
    public boolean isResourceCost()
    {
        if (this.CalcType == ItemCalcType::Setup ||
           this.CalcType == ItemCalcType::Process ||
           this.CalcType == ItemCalcType::Qty)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemResourceName</Name>
				<Source><![CDATA[
    display ItemName itemResourceName()
    {
        WrkCtrTable         wrkCtrTable;
        CostSheetNodeTable costSheetNodeTable;

        if (this.isItemCost())
        {
            return InventTable::find(this.Resource).defaultProductName();
        }
        else if (this.isResourceCost())
        {
            select firstonly Name from wrkCtrTable
                where wrkCtrTable.WrkCtrId == this.Resource;
            return wrkCtrTable.Name;
        }
        else if (this.isIndirectCost())
        {
            select firstonly Description from costSheetNodeTable
                where costSheetNodeTable.Code == this.Resource
                && costSheetNodeTable.SheetId == CostSheetTable::defaultCostSheetTable().SheetId;
            return costSheetNodeTable.Description;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIndirectCostPosted_RU</Name>
				<Source><![CDATA[
    public boolean mustIndirectCostPosted_RU()
    {
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            return !this.prodTable_RU().prodParametersDim().NoPostProdIndirect_RU;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAllocatedCostAmt</Name>
				<Source><![CDATA[
    display AmountMST pmfAllocatedCostAmt()
    {
        AmountMST   amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostAmount),
                AccessType::View))
        {
            amount = this.CostAmount * (this.PmfCostAllocationPct/100);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAllocatedCostMarkup</Name>
				<Source><![CDATA[
    display PmfAllocatedCostMarkup pmfAllocatedCostMarkup()
    {
        PmfAllocatedCostMarkup  markup = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostMarkup),
                AccessType::View))
        {
            markup = this.CostMarkup * (this.PmfCostAllocationPct/100);
        }

        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAllocatedOverheadAmt</Name>
				<Source><![CDATA[
    display PmfAllocatedOverheadAmt pmfAllocatedOverheadAmt()
    {
        PmfAllocatedOverheadAmt amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,PmfOverheadAmt),
                AccessType::View))
        {
            amount = this.PmfOverheadAmt * (this.PmfCostAllocationPct/100);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAllocatedRealCostAmt</Name>
				<Source><![CDATA[
    display CostAmount pmfAllocatedRealCostAmt()
    {
        CostAmount  amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,RealCostAmount),
                AccessType::View))
        {
            amount = this.RealCostAmount * (this.PmfCostAllocationPct/100);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAllocatedRealCostAmtTotal</Name>
				<Source><![CDATA[
    display CostAmount pmfAllocatedRealCostAmtTotal()
    {
        CostAmount  amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,RealCostAmount),
                AccessType::View))
        {
            amount = (this.pmfAllocatedRealCostAmt()
                        + this.pmfOverheadPctRealCostAmt()
                        + this.RealCostAdjustment);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfFormulaCostPricePcs</Name>
				<Source><![CDATA[
    display CostPricePcs pmfFormulaCostPricePcs()
    {
        return this.pmfFormulaCostPriceSum() / (this.Qty ? this.Qty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfFormulaCostPriceSum</Name>
				<Source><![CDATA[
    display PmfFormulaCostPriceSum pmfFormulaCostPriceSum()
    {
        PmfFormulaCostPriceSum  costPrice = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostAmount),
                AccessType::View)
            && hasFieldAccess(
                    tablenum(ProdCalcTrans),
                    fieldnum(ProdCalcTrans,CostMarkup),
                    AccessType::View)
            && hasFieldAccess(
                    tablenum(ProdCalcTrans),
                    fieldnum(ProdCalcTrans,PmfOverheadAmt),
                    AccessType::View))
        {
            costPrice = this.pmfTotalAllocatedCostAmt()
                            + this.pmfTotalAllocatedCostMarkup();
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfOverheadPctCostAmt</Name>
				<Source><![CDATA[
    display AmountMST pmfOverheadPctCostAmt()
    {
        AmountMST   amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostAmount),
                AccessType::View))
        {
            amount = this.pmfAllocatedCostAmt() * (this.PmfOverheadPct/100);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfOverheadPctCostMarkup</Name>
				<Source><![CDATA[
    display PmfOverheadPctCostMarkup pmfOverheadPctCostMarkup()
    {
        PmfOverheadPctCostMarkup    markup = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostMarkup),
                AccessType::View))
        {
            markup = this.pmfAllocatedCostMarkup() *(this.PmfOverheadPct/100);
        }

        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfOverheadPctRealCostAmt</Name>
				<Source><![CDATA[
    display AmountMST pmfOverheadPctRealCostAmt()
    {
        AmountMST   amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,RealCostAmount),
                AccessType::View))
        {
            amount = this.pmfAllocatedRealCostAmt() * (this.PmfOverheadPct/100);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfTotalAllocatedCostAmt</Name>
				<Source><![CDATA[
    display PmfTotalAllocatedCostAmt pmfTotalAllocatedCostAmt()
    {
        PmfTotalAllocatedCostAmt    amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostAmount),
                AccessType::View))
        {
            amount = this.pmfAllocatedCostAmt() + this.pmfOverheadPctCostAmt();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfTotalAllocatedCostMarkup</Name>
				<Source><![CDATA[
    display PmfTotalAllocatedCostMarkup pmfTotalAllocatedCostMarkup()
    {
        PmfTotalAllocatedCostMarkup markup = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,CostMarkup),
                AccessType::View)
            && hasFieldAccess(
                    tablenum(ProdCalcTrans),
                    fieldnum(ProdCalcTrans,PmfOverheadAmt),
                    AccessType::View))
        {
            markup = this.pmfAllocatedCostMarkup()
                        + this.pmfOverheadPctCostMarkup()
                        + this.pmfAllocatedOverheadAmt();
        }

        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfTotalAllocatedRealCostAmt</Name>
				<Source><![CDATA[
    display PmfTotalAllocatedRealCostAmt pmfTotalAllocatedRealCostAmt()
    {
        AmountMST   amount = 0;

        if (hasFieldAccess(
                tablenum(ProdCalcTrans),
                fieldnum(ProdCalcTrans,RealCostAmount),
                AccessType::View)
            && hasFieldAccess(
                    tablenum(ProdCalcTrans),
                    fieldnum(ProdCalcTrans,PmfOverheadAmt),
                    AccessType::View))
        {
            amount = this.pmfAllocatedRealCostAmt()
                        + this.pmfOverheadPctRealCostAmt();
            if (amount != 0)
            {
                amount += this.pmfAllocatedOverheadAmt();
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable_RU</Name>
				<Source><![CDATA[
    public ProdTable prodTable_RU(boolean _forUpdate = false)
    {
        return ProdTable::find(this.TransRefId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>realConsumptionTotal</Name>
				<Source><![CDATA[
    display InventQtyConsumption realConsumptionTotal()
    {
        return (this.RealConsump + this.RealQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>realCostAmountTotal</Name>
				<Source><![CDATA[
    display CostAmount realCostAmountTotal()
    {
        return (this.RealCostAmount+ this.RealCostAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>realCostPricePcs</Name>
				<Source><![CDATA[
    display CostPriceHistorical realCostPricePcs()
    {
        Qty realQty;
        realQty = this.displayRealQty();

        if (!realQty)
            return  0;
        else
            return (this.RealCostAmount+ this.RealCostAdjustment) / realQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPricePcs</Name>
				<Source><![CDATA[
    display InventSalesPricePcs salesPricePcs()
    {
        return this.salesPriceSum() / (this.Qty   ? this.Qty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceSum</Name>
				<Source><![CDATA[
    display InventSalesPrice salesPriceSum()
    {
        return this.SalesAmount+ this.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefName</Name>
				<Source><![CDATA[
    public display Name transRefName()
    {
        if (this.TransRefType == ProdTransRefType::Production)
        {
            // check if the user has access to the field
            if (!hasFieldAccess(tableNum(ProdTable), fieldNum(ProdTable, Name)))
            {
                return '';
            }

            return ProdTable::find(this.TransRefId).Name;
        }
        else
        {
            // check if the user has access to the field
            if (!hasFieldAccess(tableNum(PlanReference), fieldNum(PlanReference, PlanDescription)))
            {
                return '';
            }

            return PlanReference::findPlanName(this.TransRefId).PlanDescription;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIdRef</Name>
				<Source><![CDATA[
    static ProdCalcTrans findIdRef(tableId _tableId, recId _recId, boolean _forUpdate = false)
    {
        ProdCalcTrans prodCalcTrans;
        prodCalcTrans.selectForUpdate(_forUpdate);

        select firstonly * from prodCalcTrans
            index hint IdRefIdx
            where prodCalcTrans.IdRefTableId   == _tableId &&
                  prodCalcTrans.IdRefRecId     == _recId &&
                  prodCalcTrans.CalcType       != ItemCalcType::CostGroup;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIdRefCalcType</Name>
				<Source><![CDATA[
    static ProdCalcTrans findIdRefCalcType(tableId      _tableId,
                                           recId        _recId,
                                           ItemCalcType _itemCalcType,
                                           boolean      _forUpdate      = false,
                                           KeyValue     _resource       = '',
                                           KeyValue     _oprId          = '',
                                           OprNum       _oprNum         = 0,
                                           CostGroupId  _costGroupId    = '')
    {
        ProdCalcTrans prodCalcTrans;
        prodCalcTrans.selectForUpdate(_forUpdate);

        select prodCalcTrans
            index hint IdRefIdx
            where prodCalcTrans.IdRefTableId   == _tableId                      &&
                  prodCalcTrans.IdRefRecId     == _recId                        &&
                  prodCalcTrans.CalcType       == _itemCalcType                 &&
                 (prodCalcTrans.Resource       == _resource     || !_resource)  &&
                 (prodCalcTrans.OprId          == _oprId        || !_oprId)     &&
                 (prodCalcTrans.OprNum         == _oprNum       || !_oprNum)    &&
                 (prodCalcTrans.CostGroupId    == _costGroupId  || !_costGroupId);

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrInitFromProdFlow</Name>
				<Source><![CDATA[
    public static ProdCalcTrans findOrInitFromProdFlow(
        LeanProductionFlowReference _productionFlow,
        BOMCalcResource             _resource,
        InventDimId                 _inventDimId,
        CostGroupId                 _costGroupId,
        InventCostLevel             _level,
        ItemCalcType                _itemCalcType
        )
    {
        ProdCalcTrans    prodCalcTrans;

        select forupdate * from prodCalcTrans
        where prodCalcTrans.CollectRefProdId == _productionFlow.planReference().PlanName
           && prodCalcTrans.TransRefType     == ProdTransRefType::ProductionFlow
           && prodCalcTrans.TransRefId       == _productionFlow.planReference().PlanName
           && prodCalcTrans.Resource         == _resource
           && prodCalcTrans.InventDimId      == _inventDimId
           && prodCalcTrans.CostGroupId      == _costGroupId
           && prodCalcTrans.CollectRefLevel  == _level
           && prodCalcTrans.CalcType         == _itemCalcType;

        if (!prodCalcTrans)
        {
            prodCalcTrans.initFromProdFlow(_productionFlow,
                                           _resource,
                                           _inventDimId,
                                           _costGroupId,
                                           _level,
                                           _itemCalcType);
        }

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum lastLineNum(
        InventTransRefId        _transRefId,
        ProdTransRefType        _transRefType)
    {
        return (select maxof(LineNum) from prodCalcTrans
                    where prodCalcTrans.TransRefId   == _transRefId
                       && prodCalcTrans.TransRefType == _transRefType).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the <c>prodCalcTrans</c> records that belong to a <c>prodBOM</c> record.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>prodTable</c> record for which the <c>prodCalcTrans</c> records will be updated.
    /// </param>
    /// <param name="_prodBOM">
    /// The <c>prodBOM</c> record for which the <c>prodCalcTrans</c> records will be updated.
    /// </param>
    /// <param name="_priceDate">
    /// The date that is used to find the <c>inventItemPrice</c> record; optional.
    /// </param>
    /// <param name="_inventItemPrice">
    /// The <c>inventItemPrice</c> record that should be used to calculate the broken down cost for a
    /// standard cost item; optional.
    /// </param>
    /// <param name="_updateBreakdown">
    ///    A boolean flag indicating if the cost breakdown must be updated; optional.
    /// </param>
    /// <param name="_prodCalcTrans">
    /// A <c>prodCalcTrans</c> record; optional.
    /// </param>
    /// <returns>
    /// An updated <c>prodCalcTrans</c> record.
    /// </returns>
    /// <remarks>
    /// If no value is specified for the <c>_priceDate</c> parameter, the maxDate() will be
    /// used.Specifying the <c>inventItemprice</c> record is performed for performance reasons. It will
    /// only be used for standard cost items.
    /// </remarks>
    static ProdCalcTrans updateRealCalcBOM(ProdTable        _prodTable,
                                           ProdBOM          _prodBOM,
                                           TransDate        _priceDate = maxDate(),
                                           InventItemPrice  _inventItemPrice = null,
                                           boolean          _updateBreakdown = true,
                                           ProdCalcTrans    _prodCalcTrans   = null)
    {
        ProdCalcTrans   prodCalcTrans;
        InventTable     inventTableChild;
        ItemCalcType    calcType;
        BOMCalcGroup    bomCalcGroup;
        InventQty       qty;
        CostAmount      value;
        InventItemPrice inventItemPrice;
        CostGroupId     costGroupId;
        boolean         stdCostBased;
        PmfRecycledBpConsumptionCalc_ProdReal   pmfRecycledBpConsumptionCalc;

        if (!_prodTable.RecId || !_prodBOM.RecId)
        {
            return null;
        }

        if (prmisDefault(_prodCalcTrans))
        {
            prodCalcTrans = ProdCalcTrans::findIdRef(_prodBOM.TableId, _prodBOM.RecId, true);
        }
        else
        {
            prodCalcTrans = _prodCalcTrans;
        }

        // For std cost item, find the itemprice that needs to be applied
        inventTableChild    = _prodBOM.inventTable();
        stdCostBased = inventTableChild.modelGroup().inventModelType().stdCostBased();
        if (stdCostBased)
        {
            if (_inventItemPrice)
            {
                inventItemPrice = _inventItemPrice;
            }
            else
            {
                inventItemPrice = _prodBOM.getInventItemPrice();
            }

            if (!inventItemPrice)
            {
                return null;
            }

            // Now get the costGroup from the inventItemCostGroupRollup table
            costGroupId = inventItemPrice.costGroupId();
        }
        else
        {
            costGroupId = inventTableChild.costGroup();
        }

        if (!prodCalcTrans.RecId)
        {
            calcType            = inventTableChild.inventItemType().calculationType();
            bomCalcGroup        = inventTableChild.bomCalcGroup();

            prodCalcTrans.initFromProdTable(_prodTable, calcType);
            prodCalcTrans.initFromProdBOM(_prodBOM);

            prodCalcTrans.Production    = NoYes::No;
            prodCalcTrans.bom           = NoYes::No;

            prodCalcTrans.Resource          = _prodBOM.ItemId;
            prodCalcTrans.UnitId            = inventTableChild.inventTableModuleInvent().UnitId;
            prodCalcTrans.OprId             = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(_prodBOM.InventDimId);
            prodCalcTrans.InventDimId       = _prodBOM.InventDimId;

            prodCalcTrans.CalcGroupId   = bomCalcGroup.CalcGroupId;
            prodCalcTrans.CostGroupId   = costGroupId;

            prodCalcTrans.OprNum        = _prodBOM.OprNum;
            prodCalcTrans.LineNum       = ProdCalcTrans::lastLineNum(_prodTable.ProdId, ProdTransRefType::Production) + 1;
        }

        if (_prodTable.ProdStatus != ProdStatus::Completed)
        {
            [qty, value] = _prodBOM.calcRealCostAmount();
        }
        else
        {
            [qty, value] = _prodBOM.calcFinancialCostAmount();
        }

        if (_prodTable.ProdType == ProdType::Process)
        {
            pmfRecycledBpConsumptionCalc = PmfRecycledBpConsumptionCalc_ProdReal::construct();
            pmfRecycledBpConsumptionCalc.parmProdTable(_prodTable);
            pmfRecycledBpConsumptionCalc.parmProdBom(_prodBOM);
            pmfRecycledBpConsumptionCalc.parmBomLineQty(qty);
            pmfRecycledBpConsumptionCalc.calc();
            qty = pmfRecycledBpConsumptionCalc.parmReducedQty();

            qty = qty * _prodTable.pmfRemainCostAlloc() /100;
            value = value * _prodTable.pmfRemainCostAlloc() /100;
        }

        prodCalcTrans.RealConsump    = qty;

        if (stdCostBased)
        {
            // To avoid rounding issues, use the std cost price unrounded
            prodCalcTrans.RealCostAmount = qty == 0 ? 0 : inventItemPrice.pcsPrice() * qty;
        }
        else
        {
            prodCalcTrans.RealCostAmount = qty == 0 ? 0 : value;
        }

        // Always update the costGroupId
        prodCalcTrans.CostGroupId    = costGroupId;

        if (_updateBreakdown)
        {
            ProdCalcTrans::updateRealCalcCostBreakdown(prodCalcTrans, inventItemPrice);
        }

        prodCalcTrans.write();

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcCostBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the actual cost breakdown for a production calculation transaction.
    /// </summary>
    /// <param name="_prodCalcTrans">
    /// A <c>ProdCalcTrans</c> record for which the cost breakdown is applied.
    /// </param>
    /// <param name="_inventItemPrice">
    /// The <c>InventItemPrice</c> record that should be used to find the <c>InventItemCostGroupRollup</c>
    /// records; optional.
    /// </param>
    /// <remarks>
    ///  The following data requirements must be set before the cost breakdown is applied:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The cost breakdown must be started through parameters.</description>
    ///   </item>
    ///   <item>
    ///   <description>The production calculation transaction must be of the BOM type.</description>
    ///   </item>
    ///   <item>
    ///   <description>The consumed item must be valued by using the standard cost model.</description>
    ///   </item>
    ///  </list>
    /// The parameter <c>_unitID</c> is obsolete, do not use it.
    /// </remarks>
    public static void updateRealCalcCostBreakdown(ProdCalcTrans         _prodCalcTrans,
                                                          InventItemPrice       _inventItemPrice
                                                          )
    {
        ProdCalcTrans               prodCalcTransCostBreakdown;
        InventItemCostGroupRollup   inventItemCostGroupRollup;
        CostAmount                  proportionalRealCostAmount;
        CostAmount                  proportionalEstimatedCostAmount;
        Qty                         realConsumption;
        Qty                         estimatedConsumption;
        LineNum                     lineNumBreakdown;
        InventTable                 inventTable = InventTable::find(_prodCalcTrans.Resource);
        boolean                     breakdownAdded;
        CostBreakdownInsertionRule  costBreakdownInsertionRule = CostBreakdownInsertionRule::construct();

        costBreakdownInsertionRule.parmInventTable(inventTable);
        if (!costBreakdownInsertionRule.mustInsertCostBreakdown())
        {
            return;
        }

        // Calculate the real consumption
        realConsumption = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodCalcTrans.Resource,
																								_prodCalcTrans.InventDimId,
																								_prodCalcTrans.realConsumptionTotal(),
																								_prodCalcTrans.UnitId,
																								_inventItemPrice.UnitID,
																								NoYes::Yes,
																								NoYes::No);

        select maxof(LineNum) from prodCalcTransCostBreakdown
            where prodCalcTransCostBreakdown.TransRefId     == _prodCalcTrans.TransRefId
               && prodCalcTransCostBreakdown.TransRefType   == _prodCalcTrans.TransRefType
               && prodCalcTransCostBreakdown.Resource       == _prodCalcTrans.Resource
               && prodCalcTransCostBreakdown.IdRefTableId   == _prodCalcTrans.IdRefTableId
               && prodCalcTransCostBreakdown.IdRefRecId     == _prodCalcTrans.IdRefRecId
               && (prodCalcTransCostBreakdown.CalcType == ItemCalcType::CostGroup ||
                   prodCalcTransCostBreakdown.CalcType == ItemCalcType::BOM);

        lineNumBreakdown = max(prodCalcTransCostBreakdown.LineNum, _prodCalcTrans.LineNum);

        // I need to reset the values
        update_recordset prodCalcTransCostBreakdown
            setting RealCostAmount = 0
            where prodCalcTransCostBreakdown.TransRefId         == _prodCalcTrans.TransRefId
               && prodCalcTransCostBreakdown.TransRefType       == _prodCalcTrans.TransRefType
               && prodCalcTransCostBreakdown.Resource           == _prodCalcTrans.Resource
               && prodCalcTransCostBreakdown.IdRefTableId       == _prodCalcTrans.IdRefTableId
               && prodCalcTransCostBreakdown.IdRefRecId         == _prodCalcTrans.IdRefRecId
               && prodCalcTransCostBreakdown.CollectRefProdId   == _prodCalcTrans.CollectRefProdId
               && prodCalcTransCostBreakdown.CollectRefLevel    == _prodCalcTrans.CollectRefLevel + 1
               && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
               && prodCalcTransCostBreakdown.LineNum            >  _prodCalcTrans.LineNum
               && prodCalcTransCostBreakdown.LineNum            <  _prodCalcTrans.LineNum + 1;

        while select CostAmountStd, Qty, CostGroupId
        from inventItemCostGroupRollup
            where inventItemCostGroupRollup.InventItemPriceRefRecId == _inventItemPrice.RecId
               && inventItemCostGroupRollup.CostLevel                > InventCostLevel::Total
               && inventItemCostGroupRollup.Split                   == NoYes::No                // Only decomposed cost groups
        {
            breakdownAdded = true;

            if (inventItemCostGroupRollup.Qty)
            {
                proportionalRealCostAmount = (inventItemCostGroupRollup.CostAmountStd * (realConsumption / inventItemCostGroupRollup.Qty));
            }
            else
            {
                proportionalRealCostAmount = 0;
            }

            // Records will be inserted with split NO and only ONE level below
            select firstonly forupdate prodCalcTransCostBreakdown
                where prodCalcTransCostBreakdown.TransRefId         == _prodCalcTrans.TransRefId
                   && prodCalcTransCostBreakdown.TransRefType       == _prodCalcTrans.TransRefType
                   && prodCalcTransCostBreakdown.Resource           == _prodCalcTrans.Resource
                   && prodCalcTransCostBreakdown.IdRefTableId       == _prodCalcTrans.IdRefTableId
                   && prodCalcTransCostBreakdown.IdRefRecId         == _prodCalcTrans.IdRefRecId
                   && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                   && prodCalcTransCostBreakdown.CostGroupId        == inventItemCostGroupRollup.CostGroupId
                   && prodCalcTransCostBreakdown.CollectRefLevel    == _prodCalcTrans.CollectRefLevel + 1;

            if (!prodCalcTransCostBreakdown)
            {
                lineNumBreakdown += 0.00001;

                prodCalcTransCostBreakdown.initCostBreakdown(_prodCalcTrans);
                prodCalcTransCostBreakdown.LineNum      = lineNumBreakdown;
                prodCalcTransCostBreakdown.CostGroupId  = inventItemCostGroupRollup.CostGroupId;

                // Consumption should be only converted once, because
                // it stays the same for all the breakdown records
                if (!estimatedConsumption)
                {
                    estimatedConsumption = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodCalcTrans.Resource,
																												 _prodCalcTrans.InventDimId,
																												 _prodCalcTrans.consumptionSum(),
																												 _prodCalcTrans.UnitId,
																												 _inventItemPrice.UnitID,
																												 NoYes::Yes);
                }
            }

            if (inventItemCostGroupRollup.Qty)
            {
                proportionalEstimatedCostAmount = (inventItemCostGroupRollup.CostAmountStd * (estimatedConsumption / inventItemCostGroupRollup.Qty));
            }
            else
            {
                proportionalEstimatedCostAmount = 0;
            }

            prodCalcTransCostBreakdown.CostAmount       += proportionalEstimatedCostAmount;

            prodCalcTransCostBreakdown.RealCostAmount += proportionalRealCostAmount;

            // For the cost Rollup assign the qty of the parent record
            prodCalcTransCostBreakdown.RealConsump = _prodCalcTrans.RealConsump;

            prodCalcTransCostBreakdown.write();
        }

        if (breakdownAdded == true)
        {
            _prodCalcTrans.bom = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcIndirect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the cost sheet for a specified production order and updates records in <c>ProdCalcTrans</c> table
    /// and optionally in <c>ProdIndirectTrans</c> accordingly.
    /// </summary>
    /// <param name="_prodTable">A record in <c>ProdTable</c> table that represents the production order.</param>
    /// <param name="_updateProdIndirectTrans">True, if records in <c>ProdIndirectTrans</c> have to be updated; optional, default value is false.</param>
    /// <param name="_transDate">The date of the financial update; optional. Must be specified if <c>_updateProdIndirectTrans</c> is true.</param>
    /// <param name="_voucher">The financial voucher; optional. Must be specified if <c>_updateProdIndirectTrans</c> is true.</param>
    /// <param name="_calculatingWIP_RU">True in case of WIP cost calculation; optional, default value is <c>NoYes::No</c></param>
    /// <returns>An instance of the <c>CostCalcTransData</c> class that holds the details of the cost sheet calculation.</returns>
    static CostCalcTransData updateRealCalcIndirect(
        ProdTable   _prodTable,
        NoYes       _updateProdIndirectTrans = false,
        TransDate   _transDate = dateNull(),
        Voucher     _voucher = '',
        NoYes       _calculatingWIP_RU = NoYes::No)
    {
        return ProdCalcTransUpdateIndirect::newFromParameters(
            _prodTable,
            _updateProdIndirectTrans,
            _transDate,
            _voucher,
            _calculatingWIP_RU).update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcProduction</Name>
				<Source><![CDATA[
    static void updateRealCalcProduction(ProdTable _prodTable)
    {
        ProdCalcTrans   prodCalcTrans;
        ProdCalcTrans   prodCalcTransTotal;
        ItemCalcType    calcType;

        calcType = ItemCalcType::Production;
        prodCalcTrans = ProdCalcTrans::findIdRef(_prodTable.TableId, _prodTable.RecId, true);

        if (! prodCalcTrans.RecId)
        {
            prodCalcTrans.initFromProdTable(_prodTable, calcType);
            prodCalcTrans.bom               = NoYes::Yes;
            prodCalcTrans.Production        = NoYes::Yes;
            prodCalcTrans.Resource          = _prodTable.ItemId;
            prodCalcTrans.UnitId            = InventTableModule::find(_prodTable.ItemId,ModuleInventPurchSales::Invent).UnitId;
            prodCalcTrans.OprId             = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(_prodTable.InventDimId);
            prodCalcTrans.InventDimId       = _prodTable.InventDimId;

            // Production should be positioned before its sub-components
            prodCalcTrans.LineNum           = (select minof(LineNum) from prodCalcTrans
                                                   where prodCalcTrans.TransRefId == _prodTable.ProdId
                                                      && prodCalcTrans.TransRefType == ProdTransRefType::Production).LineNum - 0.0001;

            prodCalcTrans.CostGroupId       = _prodTable.inventTable().costGroup();
        }

        select sum(RealCostAmount)
            from prodCalcTransTotal
            where prodCalcTransTotal.TransRefId   == _prodTable.ProdId
               && prodCalcTransTotal.TransRefType == ProdTransRefType::Production
               && prodCalcTransTotal.Production   == NoYes::No
               && prodCalcTransTotal.CalcType     != ItemCalcType::CostGroup;   // Cost Group records are from decomposition only. Dont include

        prodCalcTrans.RealCostAmount = prodCalcTransTotal.RealCostAmount;

        prodCalcTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventTransId</c> related to the record.
    /// </summary>
    /// <returns>The <c>InventTransId</c> related to the record.</returns>
    internal InventTransId inventTransId()
    {
        InventTransId inventTransId;

        switch (this.IdRefTableId)
        {
            case tableNum(ProdTable):
                inventTransId = ProdTable::find(this.TransRefId).InventTransId;
                break;

            case tableNum(PmfProdCoBy):
                inventTransId = PmfProdCoBy::find(this.TransRefId, this.IdRefRecId).InventTransId;
                break;

            case tableNum(ProdBOM):
                inventTransId = ProdBOM::find(this.IdRefRecId).InventTransId;
                break;
    
            default:
                throw(error(Error::wrongUseOfFunction(funcName())));
        }
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124139</DeveloperDocumentation>
	<Label>@SYS7895</Label>
	<SingularLabel>@SYS7895</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransRefId</TitleField1>
	<TitleField2>Resource</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RefNumIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RefNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectRefLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpVariable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpConstant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Production</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpVariable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpConstant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceModelUsed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealCostAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceModelUsed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalculationWIP_RU</Name>
			<Label>@GLS115857</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FinancialIndirectAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DerivedRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectRefProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DerivedReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectRefLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimStr</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Procost</Name>
			<Label>@SYS6893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfOverheadPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfCostAllocationPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfCostAllocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfOverheadAmt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsumpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TradeAgreements</Name>
			<Label>@SYS28190</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceDiscQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcBOMConsumption</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CollectRefLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCollectRefLevel</ExtendedDataType>
			<Label>@SYS14422</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectRefProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostTransRefId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumpConstant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcConsumptionConstant</ExtendedDataType>
			<Label>@SYS8939</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsumpType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMConsumpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumpVariable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcConsumptionVariable</ExtendedDataType>
			<Label>@SYS12468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS3058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcCostMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostPriceModelUsed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcCostPriceUsed</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DerivedReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DerivedRefNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FinancialIndirectAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdFinancialIndirectAmount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IdRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProdCalcTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IdRefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCalcTransRefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimStr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcInventDimStr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfCostAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfCostAllocationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfCostAllocationPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCostAllocationPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfOverheadAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfOverheadAmt</ExtendedDataType>
			<CurrencyDate>Current</CurrencyDate>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfOverheadPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfOverheadPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceDiscQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcPriceDiscQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Production</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4398</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostQuantity</ExtendedDataType>
			<Label>@SYS853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealCostAdjustment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealCostAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS22990</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostQuantity</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS13754</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcSalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesPriceModelUsed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcSalesPriceUsed</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostTransRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdTransRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CollectRefProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectRefLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IdRefIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>IdRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IdRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CalcType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdCollectIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TransRefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectRefLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Production</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BOMCalcTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>CollectRefLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimStr</MapField>
					<MapFieldTo>InventDimStr</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcGroupId</MapField>
					<MapFieldTo>CalcGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcType</MapField>
					<MapFieldTo>CalcType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOM</MapField>
					<MapFieldTo>BOM</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PmfProdCalcTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimStr</MapField>
					<MapFieldTo>InventDimStr</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRefId</MapField>
					<MapFieldTo>TransRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRefType</MapField>
					<MapFieldTo>TransRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CollectRefProdId</MapField>
					<MapFieldTo>CollectRefProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CollectRefLevel</MapField>
					<MapFieldTo>CollectRefLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcType</MapField>
					<MapFieldTo>CalcType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IdRefTableId</MapField>
					<MapFieldTo>IdRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IdRefRecId</MapField>
					<MapFieldTo>IdRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOM</MapField>
					<MapFieldTo>BOM</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAmount</MapField>
					<MapFieldTo>CostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostMarkup</MapField>
					<MapFieldTo>CostMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesAmount</MapField>
					<MapFieldTo>SalesAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesMarkup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumpVariable</MapField>
					<MapFieldTo>ConsumpVariable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumpConstant</MapField>
					<MapFieldTo>ConsumpConstant</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealQty</MapField>
					<MapFieldTo>RealQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealConsump</MapField>
					<MapFieldTo>RealConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealCostAmount</MapField>
					<MapFieldTo>RealCostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealCostAdjustment</MapField>
					<MapFieldTo>RealCostAdjustment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPriceModelUsed</MapField>
					<MapFieldTo>SalesPriceModelUsed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Production</MapField>
					<MapFieldTo>Production</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DerivedReference</MapField>
					<MapFieldTo>DerivedReference</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DerivedRefNum</MapField>
					<MapFieldTo>DerivedRefNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendId</MapField>
					<MapFieldTo>VendId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumpType</MapField>
					<MapFieldTo>ConsumpType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceDiscQty</MapField>
					<MapFieldTo>PriceDiscQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPriceModelUsed</MapField>
					<MapFieldTo>CostPriceModelUsed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcGroupId</MapField>
					<MapFieldTo>CalcGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfCostAllocation</MapField>
					<MapFieldTo>PmfCostAllocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfCostAllocationPct</MapField>
					<MapFieldTo>PmfCostAllocationPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfIdRefCoByRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfOverheadAmt</MapField>
					<MapFieldTo>PmfOverheadAmt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfOverheadPct</MapField>
					<MapFieldTo>PmfOverheadPct</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCalcGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalcGroupId</Name>
					<Field>CalcGroupId</Field>
					<RelatedField>CalcGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalcGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<EntityRelationshipRole>@SYS124140</EntityRelationshipRole>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefRecId</Name>
					<Field>IdRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefTableId</Name>
					<Field>IdRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::BOM</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableService</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Service</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LeanProductionFlowCosting</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlowCosting</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>TransRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransRefType</Name>
					<Field>TransRefType</Field>
					<ValueStr>ProdTransRefType::BackflushCosting</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlanReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanReference</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlanReference</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransRefType</Name>
					<Field>TransRefType</Field>
					<ValueStr>ProdTransRefType::ProductionFlow</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>PlanName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionBom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefRecId</Name>
					<Field>IdRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefTableId</Name>
					<Field>IdRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>ProdRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionRoute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefRecId</Name>
					<Field>IdRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefTableId</Name>
					<Field>IdRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Table</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CollectRefProdId</Name>
					<Field>CollectRefProdId</Field>
					<RelatedField>CollectRefProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProcessResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Process</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableQty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QuantityResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Qty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SetupResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Setup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>