<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeProjState</Name>
				<Source><![CDATA[
    void changeProjState(ProjStatus _toProjStatus)
    {
        ProjTable       projTable;
        ProjStatusUpd   projStatusUpd;

        // Change project stage for all associated projects (in ProjTable).
        if (Box::okCancel(strFmt("@SYS95391",_toProjStatus),DialogButton::Ok,"@SYS8313")  == DialogButton::Ok)
        {
            ttsbegin;
            while select forupdate projTable where projTable.ProjInvoiceProjId == this.ProjInvoiceProjId
            {
                projStatusUpd = ProjStatusUpd::construct(projTable,_toProjStatus);
                projStatusUpd.execute();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasExternalFundingSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a contract contains funding sources.
    /// </summary>
    /// <returns>true if a contract contains funding sources; otherwise, false.</returns>
    internal static boolean hasExternalFundingSources(ProjInvoiceProjId _contractId)
    {
        return ProjFundingSource::numberOfFundingSourcesByFundingType(_contractId, ProjFundingType::Customer) >= 1
            || ProjFundingSource::numberOfFundingSourcesByFundingType(_contractId, ProjFundingType::Grant) >= 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleExternalFundingSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a contract contains multiple funding sources of type customer or grant.
    /// </summary>
    /// <returns>true if a contract contains multiple funding sources of type customer or grant; otherwise, false.</returns>
    internal static boolean hasMultipleExternalFundingSources(ProjInvoiceProjId _contractId)
    {
        return ProjFundingSource::numberOfFundingSourcesByFundingType(_contractId, ProjFundingType::Customer) > 1
            || ProjFundingSource::numberOfFundingSourcesByFundingType(_contractId, ProjFundingType::Grant) > 1
            || (ProjFundingSource::numberOfFundingSourcesByFundingType(_contractId, ProjFundingType::Customer) >= 1
            && ProjFundingSource::numberOfFundingSourcesByFundingType(_contractId, ProjFundingType::Grant) >= 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMultipleFundingSourceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets fields in the <c>SalesCreateOrder</c> form when there are multiple funding sources.
    /// </summary>
    internal static void initMultipleFundingSourceFields(SalesTable salesTable)
    {
        if (ProjInvoiceTable::hasMultipleExternalFundingSources(ProjTable::find(SalesTable.ProjId).ProjInvoiceProjId))
        {
            // Initialize fields when there are multiple external funding sources
            ProjParameters projParameters = ProjParameters::find();
            if (projParameters.DefaultSalesOrderCustomerAccount == ProjDefaultSalesOrderCustomerAccount::FundingSource)
            {
                //
                // Clear these fields as they will be set when the user specifies the funding source.
                // If the customer account defaults from the project they do not need to be cleared.
                //
                salesTable.CustAccount = '';
                salesTable.DeliveryName = '';
                salesTable.DeliveryPostalAddress = 0;
            }
            salesTable.FundingSource = 0;
            salesTable.InvoiceAccount = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCodeProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the currency for any open on account transactions if the sales currency for the invoice project has been changed.
    /// </summary>
    /// <remarks>
    ///    This method is typically called in a form before updating the invoice project if the user changes the sales currency.
    /// </remarks>
    public void convertCurrencyCodeProj()
    {
        CurrencyCode    origCurrencyCode;
        ProjOnAccTrans      projOnAccTrans;
        ProjOnAccTransSale  projOnAccTransSale;

        origCurrencyCode = this.orig().CurrencyId;

        ttsbegin;

        projOnAccTrans = ProjOnAccTrans::projOpenOnAcc(this.ProjInvoiceProjId, origCurrencyCode, true);

        while (projOnAccTrans)
        {
            while select forupdate projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId
            {
                projOnAccTransSale.convertCurrencyCode(projOnAccTrans.CurrencyId, this.CurrencyId);
                projOnAccTransSale.update();
            }

            projOnAccTrans.reread();
            projOnAccTrans.CurrencyId = this.CurrencyId;
            projOnAccTrans.update();

            next projOnAccTrans;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a dimension set that is applied to the <c>defaultDimension</c> field on the table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that is applied to the <c>defaultDimension</c> field on the table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object previously created that use the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that is applied to the <c>defaultDimension</c> field on the table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that the potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProposalJourFromParameters</Name>
				<Source><![CDATA[
    public ProjProposalJour createProposalJourFromParameters(ProjProposalJourCreateParameters _parameters)
    {  
        ProjProposalJour projProposalJour = this.initializeProposalJournalForCreate(_parameters);

        projProposalJour.insert();

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProposalJournalForCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes invoice proposal record buffer.
    /// </summary>
    /// <param name = "_parameters">
    /// A <c>ProjProposalJourCreateParameters</c> class instance.
    /// </param>
    /// <returns>
    /// An invoice proposal record buffer.
    /// </returns>
    protected ProjProposalJour initializeProposalJournalForCreate(ProjProposalJourCreateParameters _parameters)
    {
        // <GEEU>
        #IsoCountryRegionCodes
        // </GEEU>
        ProjProposalJour projProposalJour; 
        
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            projProposalJour.initValue();
        }
        // </GMY>
        projProposalJour.LineProperty       = ProjLinePropertyCode::Open;
        projProposalJour.InvoiceType        = _parameters.parmProjInvoiceType();
        projProposalJour.InvoiceDate        = _parameters.parmInvoiceDate();
        projProposalJour.InterCompanyPosted = _parameters.parmInterCompanyPosted();
        projProposalJour.ExchRate           = _parameters.parmExchRate();

        SubledgerJournalizerProjectExtensionProcessInvoicesContext callingContext
                = SubledgerJournalizerProjectExtensionProcessInvoicesContext::current();
        if (callingContext && callingContext.getReasonRefRecID())
        {
            projProposalJour.ReasonTableRef = callingContext.getReasonRefRecID();
        }

        //<GEEPL>
        projProposalJour.TaxPeriodPaymentCode_PL = _parameters.parmTaxPeriodPaymentCode();
        //</GEEPL>

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projProposalJour.psaInvoiceMethod   = _parameters.parmPSAInvoiceMethod();
        }

        projProposalJour.initFromProjInvoiceTable(this, _parameters.parmProjFundingSourceRefId(), _parameters.parmCurrencyId());
        projProposalJour.FundingSource = _parameters.parmProjFundingSourceRefId();

        projProposalJour.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_parameters.parmDefaultDimension(), ProjFundingSource::find(_parameters.parmProjFundingSourceRefId()).DefaultDimension);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            projProposalJour.SalesFreightChargeTerms_BR = SalesParameters::find().boLfreightChargeTerms;
        }
        // </GBR>

        if (!projProposalJour.ProposalId)
        {
            NumberSeq numberSeq = NumberSeq::newGetNum(this.getNumberSequenceReference(projProposalJour, _parameters));
            projProposalJour.ProposalId  = numberSeq.num();
        }

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00005, funcName());

            projProposalJour.InvoiceAutoNumbering_LT = LtInvoiceAutoNumberingGroups::autoNumberingForProjInvoice(CustTable::find(projProposalJour.InvoiceAccount).CustGroup);
        }
        // </GEEU>

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceReference</Name>
				<Source><![CDATA[
    protected NumberSequenceReference getNumberSequenceReference(ProjProposalJour _projProposalJour, ProjProposalJourCreateParameters _parameters)
    {
        NumberSequenceReference numberSequenceReference;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (_projProposalJour.InvoiceType == ProjInvoiceType::DebitNote_BR)
            {
                numberSequenceReference = ProjParameters::numRefProjDebitNoteProposalId_BR();
            }
            else
            {
                numberSequenceReference = ProjParameters::numRefProjProposalId();
            }
        }
        else
        {
            // </GBR>
            numberSequenceReference = ProjParameters::numRefProjProposalId();
            // <GBR>
        }
        // </GBR>

        return numberSequenceReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProposalJour</Name>
				<Source><![CDATA[
    [SysObsolete("Obsolete method. Use createProposalJourFromParameters method instead", false, 27\08\2018)]
    public ProjProposalJour createProposalJour(ProjInvoiceType           _projInvoiceType,
                                                      CurrencyCode              _currencyId             = '',
                                                      ProjFundingSourceRefId    _projFundingSourceRefId = 0,
                                                      InvoiceDate               _invoiceDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                      InterCompanyPosted        _interCompanyPosted = false,
                                                      PSAInvoiceMethod        _psaInvoiceMethod = PSAInvoiceMethod::Progress,
                                                      PlTaxPeriodPaymentCode  _taxPeriodPaymentCode   = '',
                                                      DimensionDefault          defaultDimension        = 0,
                                                      ExchRate                  _exchRate               = 0
                                                      )
    {
        return this.createProposalJourFromParameters(
            ProjProposalJourCreateParameters::construct(
                                _projInvoiceType,
                                _currencyId,
                                _projFundingSourceRefId,
                                _invoiceDate,
                                _interCompanyPosted,
                                _psaInvoiceMethod,
                                _taxPeriodPaymentCode,
                                defaultDimension,
                                _exchRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.ProjInvoiceProjId));
        }

        ttsbegin;
        TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::InvoiceProject);

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenProjOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for open on account transactions for an invoice project.
    /// </summary>
    /// <returns>
    ///    true if open on account transaction exist for the invoice project; otherwise, false.
    /// </returns>
    public boolean existOpenProjOnAcc()
    {
        return ProjTable::existProjOpenOnAcc(this.ProjInvoiceProjId, this.orig().CurrencyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceCustomerID</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display CustAccount fundingSourceCustomerID()
    {
        ProjFundingSource   projFundingSource;

        if (ProjFundingSource::numberOfFundingSources(this.ProjInvoiceProjId) == 1)
        {
            select firstonly Party from projFundingSource
                where projFundingSource.ContractId == this.ProjInvoiceProjId &&
                      projFundingSource.FundingType == ProjFundingType::Customer;

            return CustTable::findByPartyRecId(projFundingSource.Party).AccountNum;
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display CustName fundingSourceName()
    {
        ProjFundingSource   projFundingSource;

        if (ProjFundingSource::numberOfFundingSources(this.ProjInvoiceProjId) == 1)
        {
            select firstonly Party from projFundingSource
                where projFundingSource.ContractId == this.ProjInvoiceProjId &&
                      projFundingSource.FundingType == ProjFundingType::Customer;

            return CustTable::findByPartyRecId(projFundingSource.Party).name();
        }
        else
        {
            return "@SYS314872";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedHistory</Name>
				<Source><![CDATA[
    // Description:     Check whether the current contract has been posted(include invoice
    //                  proposal and post invoice) by contract line.
    public boolean hasPostedHistory()
    {
        ProjProposalJour                    tProjProposalJour;
        ProjInvoiceJour                     tProjInvoiceJour;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select firstonly RecId from tProjProposalJour
                where tProjProposalJour.ProjInvoiceProjId == this.ProjInvoiceProjId
                    && tProjProposalJour.LineProperty != ProjLinePropertyCode::Canceled;
            if (tProjProposalJour.RecId)
            {
                return true;
            }

            select firstonly RecId from tProjInvoiceJour
                where tProjInvoiceJour.ProjInvoiceProjId == this.ProjInvoiceProjId;
            if (tProjInvoiceJour.RecId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjForecastInvoiceFrequencyCurrentWeek</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current week enum value of <c>ProjForecastInvoiceFrequency</c>.
    /// </summary>
    /// <returns>
    ///     Enum value of current week of enum <c>ProjForecastInvoiceFrequency</c>.
    /// </returns>
    protected ProjForecastInvoiceFrequency getProjForecastInvoiceFrequencyCurrentWeek()
    {
        return ProjForecastInvoiceFrequency::CurrentWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        ProjParameters      projParameters  = ProjParameters::find();

        this.MinTimeIncrement           = projParameters.MinTimeIncrement;
        this.TimePostDetailSummary      = projParameters.PostDetailSummary;
        this.ProjLockSalesCurrency      = true;
        this.ForecastInvoiceFrequency   = this.getProjForecastInvoiceFrequencyCurrentWeek();

        super();

        this.TransactionCodeId = IntrastatParameters::find().DefaultSalePurchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress invoiceAddress(TransDateTime _transDateTime = DateTimeUtil::getSystemDateTime())
    {
        LogisticsPostalAddress  postalAddress;
        LogisticsLocationEntity primaryPostalAddressLocation;
        ProjFundingSource       projFundingSource;

        //
        // Contract Type field is not to be used. This field will be DEL_ in future release.
        // Basic/Advanced functionality is not supported as an attribute of the contract.
        // All funding/invoicing information is located on the funding source(s) associated to the contract.
        //
        if (!ProjInvoiceTable::hasMultipleFundingSources(this.ProjInvoiceProjId)  &&
            ProjFundingSource::numberOfFundingSourcesByFundingType(this.ProjInvoiceProjId, ProjFundingType::Customer) == 1)
        {
            select firstonly InvoiceLocation from projFundingSource where projFundingSource.ContractId   == this.ProjInvoiceProjId  &&
                                                     projFundingSource.FundingType == ProjFundingType::Customer;
            primaryPostalAddressLocation = LogisticsLocationEntity::constructFromLocationRecId(projFundingSource.InvoiceLocation, false, _transDateTime);
            if (primaryPostalAddressLocation)
            {
                postalAddress = primaryPostalAddressLocation.getPostalAddressOn(_transDateTime);
            }
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractValid</Name>
				<Source><![CDATA[
    public boolean isContractValid()
    {
        ProjFundingRule     projFundingRuleLocal;
        ProjFundingLimit    projFundingLimitLocal;
        boolean             retValue = true;
        int64               countOfFundingSources;
        int64               numberOfFundingRules;

        countOfFundingSources = ProjFundingSource::numberOfFundingSources(this.ProjInvoiceProjId);
        // validate at least one funding source exists
        if (countOfFundingSources < 1)
        {
            retValue = checkFailed("@SYS134386");
        }

        numberOfFundingRules = ProjFundingRule::numberOfRulesForContract(this.ProjInvoiceProjId);

        // Check funding rules if non-OnHold funding sources exist
        if (countOfFundingSources - ProjFundingSource::numberOfFundingSourcesByFundingType(this.ProjInvoiceProjId, ProjFundingType::OnHoldFundingSource) > 0)
        {
            if (retValue && numberOfFundingRules < 1)
            {
                // At least one rule is required.
                retValue = checkFailed("@SYS134387");
            }
        }

        // Validate funding rules
        if (numberOfFundingRules >= 1)
        {
            // check funding rule allocation
            while select ContractId, RecId from projFundingRuleLocal where projFundingRuleLocal.ContractId == this.ProjInvoiceProjId
            {
                if (!ProjFundingRule::isAllocationValid(projFundingRuleLocal.RecId))
                {
                    retValue = checkFailed("@SYS134394");
                }
                if (!ProjFundingRule::isRoundingAcctValid(projFundingRuleLocal.RecId))
                {
                    retValue = checkFailed("@SYS137317");
                }
            }
        }

        if (ProjFundingLimit::existForContract(this.ProjInvoiceProjId))
        {
            // check limits
            while select ContractId, FundingSource from projFundingLimitLocal where projFundingLimitLocal.ContractId == this.ProjInvoiceProjId
            {
                if (projFundingLimitLocal.FundingSource != 0)
                {
                    if (!ProjFundingSource::exist(projFundingLimitLocal.FundingSource))
                    {
                        retValue = checkFailed("@SYS134394");
                    }
                }
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a dimension set that holds the merged combination of the current <c>defaultDimension</c> field
    /// on the table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// The first dimension set that is merged with the current <c>defaultDimension</c> field on the table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// The second dimension set that is merged with the current <c>defaultDimension</c> field on the
    /// table; optional
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object previously created that uses the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// the table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additional the entity specifier defaulting will be considered
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates invoice project data when certain fields are modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of the field that was modified.
    /// </param>
    /// <remarks>
    ///    This method is automatically called from forms when any field is modified. If the invoice account is changed, customer information is optionally updated by the <c>ProjInvoiceTable</c> table. If the
    ///    invoice account, postal (zip) code, or country/region for delivery is changed, the EU sales list code is changed by using the <c>ProjInvoiceTable</c> table.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjInvoiceTable, BankCentralBankPurposeCode):
                this.BankcentralBankPurposeText = BankCentralBankPurpose::find(this.BankCentralBankPurposeCode).Text;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the customer associated with the invoice account on an invoice project.
    /// </summary>
    /// <param name="update">
    ///    A Boolean value set to true to update the customer; optional.
    /// </param>
    /// <returns>
    ///    The customer.
    /// </returns>
    CustTable payer(boolean update = false)
    {
        ProjFundingSource   projFundingSource;
        CustTable           custTable = null;

        if (!ProjInvoiceTable::hasMultipleFundingSources(this.ProjInvoiceProjId))
        {
            select firstonly Party from projFundingSource
                where projFundingSource.ContractId == this.ProjInvoiceProjId &&
                      projFundingSource.FundingType == ProjFundingType::Customer;

            custTable = CustTable::findByPartyRecId(projFundingSource.Party, update);
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title, which is on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    /// <remarks>
    /// This method is used in the preview pane on the list page.
    /// </remarks>
    display Description previewPaneTitle()
    {
        return strFmt("@SYS4001452",this.ProjInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the foreign key to reflect the change of the primary key to which it corresponds.
    /// </summary>
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        ProjFundingSource   projFundingSource;

        boolean ret;

        ret = super();

        // Validate posted transactions do not exist for any funding source
        if (ret)
        {
            while select projFundingSource where projFundingSource.ContractId == this.ProjInvoiceProjId
            {
                if (projFundingSource.existsPostedTrx())
                {
                    ret = checkFailed("@SYS136417");
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified field.
    /// </summary>
    /// <param name="p1">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value in specified field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The validateField method is automatically called from forms with the fieldId of the field that must be validated whenever a user leaves a field. If the "No one-time customers for invoice projects"
    ///    project parameter is selected, the customer associated with the invoice account cannot be a one-time customer.
    /// </remarks>

    public boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ret)
        {
            switch (p1)
            {
                //retained percent must range from 1% to 100%. >
                case fieldNum(ProjInvoiceTable, psaRetainPercent):
                    if (this.psaRetainPercent != 0 && (
                        this.psaRetainPercent < 1 || this.psaRetainPercent > 100))
                    {
                        ret = checkFailed("@PSA2738");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an invoice project with the given ID exists.
    /// </summary>
    /// <param name="_invoiceID">
    ///    The invoice ID of the invoice project.
    /// </param>
    /// <returns>
    ///    true if the invoice project exists; otherwise, false.
    /// </returns>
    public static boolean exist(ProjInvoiceProjId _invoiceID)
    {
        if (_invoiceID)
        {
            return (select firstonly projInvoiceTable where projInvoiceTable.ProjInvoiceProjId == _invoiceID).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the invoice project with the given ID.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    ///    The project ID of the invoice project.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean data type that can be set to true in order to update the activity; optional.
    /// </param>
    /// <returns>
    ///    The desired invoice project.
    /// </returns>
    /// <remarks>
    ///    This method returns null if the invoice project does not exist.
    /// </remarks>
    public static ProjInvoiceTable find(ProjInvoiceProjId _projInvoiceProjId, boolean _forupdate = false)
    {
        ProjInvoiceTable projInvoiceTable = null;

        projInvoiceTable.selectForUpdate(_forupdate);

        if (_projInvoiceProjId)
        {
            select firstonly projInvoiceTable where projInvoiceTable.ProjInvoiceProjId == _projInvoiceProjId;
        }

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the invoice project with the given ID and data area.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    ///    The project ID of the invoice project.
    /// </param>
    /// <param name="_dataArea">
    ///     The data area to look for the invoice project in.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean data type that can be set to true in order to update the activity; optional.
    /// </param>
    /// <returns>
    ///    The desired invoice project.
    /// </returns>
    /// <remarks>
    ///    This method returns null if the invoice project does not exist.
    /// </remarks>
    public static ProjInvoiceTable findByDataArea(ProjInvoiceProjId _projInvoiceProjId, SelectableDataArea _dataArea = curext(), boolean _forupdate = false)
    {
        ProjInvoiceTable projInvoiceTable = null;

        projInvoiceTable.selectForUpdate(_forupdate);

        if (_projInvoiceProjId)
        {
            select firstonly crossCompany projInvoiceTable
                where projInvoiceTable.ProjInvoiceProjId == _projInvoiceProjId &&
                      projInvoiceTable.DataAreaId        == _dataArea;
        }

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forecasts the next invoice date for a given date and project.
    /// </summary>
    /// <param name="_transDate">
    ///    The date from which to start the forecast.
    /// </param>
    /// <param name="_projId">
    ///    The project ID of the project to invoice.
    /// </param>
    /// <param name="_calledFromAOS">
    ///    If TRUE, get the dateEndOfWeek in AOS.
    ///    If FALSE, get the the dateEndOfWeek using client locale
    /// </param>/// <returns>
    ///    The next forecasted invoice date.
    /// </returns>
    public static TransDate forecastInvoiceDate(TransDate _transDate, ProjId _projId, boolean _calledFromAOS = false)
    {
        TransDate       dueDate;
        ProjTable       projTable = ProjTable::find(_projId);
        PreferredLocale preferredLocale = (new xSession()).PreferredLocale();

        switch (projTable.projInvoice().ForecastInvoiceFrequency)
        {
            case ProjForecastInvoiceFrequency::Daily :
                dueDate = _transDate;
                break;

            case ProjForecastInvoiceFrequency::CurrentWeek :
                if (_calledFromAOS)
                {
                    dueDate = ProjParameters::dateEndOfWeekOnAOS(_transDate);
                }
                else
                {
                    dueDate = DateTimeUtil::getEndOfWeekDate(preferredLocale, _transDate);
                }
                break;

            case ProjForecastInvoiceFrequency::BiWeekly :
                // if even numbered week set to end of the week

                if (DateTimeUtil::getWeekOfYear(preferredLocale, _transDate) mod 2 == 0)
                {
                    if (_calledFromAOS)
                    {
                        dueDate = ProjParameters::dateEndOfWeekOnAOS(_transDate);
                    }
                    else
                    {
                        dueDate = DateTimeUtil::getEndOfWeekDate(preferredLocale, _transDate);
                    }
                }
                else
                {
                    // I odd numbered week set to end of week + 7 days
                    if (_calledFromAOS)
                    {
                        dueDate = ProjParameters::dateEndOfWeekOnAOS(_transDate) + 7;
                    }
                    else
                    {
                        dueDate = DateTimeUtil::getEndOfWeekDate(preferredLocale, _transDate) + 7;
                    }
                    // Handle special case where due date was set to end of 1st week in a new year.
                    if (DateTimeUtil::getWeekOfYear(preferredLocale, dueDate) mod 2 != 0)
                    {
                        dueDate += 7;
                    }
                }
                break;

            case ProjForecastInvoiceFrequency::SemiMonthly :
                if (dayOfMth(_transDate) <= 15)
                {
                    dueDate = _transDate - dayOfMth(_transDate) + 15;
                }
                else
                {
                    dueDate = endmth(_transDate);
                }
                break;

            case ProjForecastInvoiceFrequency::CurrentMth :
                dueDate = endmth(_transDate);
                break;

            case ProjForecastInvoiceFrequency::CurrentQuart :
                dueDate = dateEndQtr(_transDate);
                break;

            case ProjForecastInvoiceFrequency::CurrentYear :
                dueDate = nextYr(_transDate - dayOfYr(_transDate));
                break;

            case ProjForecastInvoiceFrequency::EOP :
                dueDate = projTable.EndDate   ? projTable.EndDate   : _transDate;
                // Reset due date if project has been extended
                dueDate = projTable.ExtensionDate ? projTable.ExtensionDate   : dueDate;
                break;

            default :
                dueDate =_transDate;
                break;
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFundingLimits</Name>
				<Source><![CDATA[
    public static boolean hasFundingLimits(ProjInvoiceProjId _contractID)
    {
        return ProjFundingLimit::existForContract(_contractID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleFundingSources</Name>
				<Source><![CDATA[
    public static boolean hasMultipleFundingSources(ProjInvoiceProjId _contractID)
    {
        return ProjFundingSource::numberOfFundingSources(_contractID) > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvancedFundingEnabled</Name>
				<Source><![CDATA[
    public static boolean isAdvancedFundingEnabled()
    {
        return (isConfigurationkeyEnabled(configurationKeyNum(Project)) == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingRuleInvoiceable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID for the transaction.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category ID for the transaction.
    /// </param>
    /// <param name="_contractBillingRule">
    ///    The contract billing rule for the transaction.
    /// </param>
    /// <param name="_projTransType">
    ///     The transactiopn type used for the transaction
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the contract associated to the project contains billing rules, key attributes of the transacton
    /// are checked against the billing rules to determine if the transacton can be invoiced. This affects
    /// whether Work-in-progress amounts should be posted.
    /// </remarks>
    public static boolean isBillingRuleInvoiceable(ProjId _projId, ProjCategoryId _projCategoryId, PSAContractLineNum _contractBillingRule, ProjTransType _projTransType = ProjTransType::None)
    {
        boolean ret = true;

        ProjTable projTable = ProjTable::find(_projId);
        if (projTable.ProjInvoiceProjId == '')
        {
            ret = false;
        }
        else
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                ret = ProjInvoiceTable::isBillingRuleInvoiceableWithContractLines(projTable, _projCategoryId, _contractBillingRule, _projTransType);
            }
            else
            {
                ret = ProjInvoiceTable::isBillingRuleInvoiceableWithProjType(projTable, _projCategoryId, _contractBillingRule, _projTransType);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverrideCategoryChargeabilitySettingsEnabled</Name>
				<Source><![CDATA[
    private static boolean isOverrideCategoryChargeabilitySettingsEnabled(PSAContractLineItems _billingRule)
    {
        boolean override = true; // if feature is not active we always override

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            override = _billingRule.OverrideChargeableCategories;
        }
        
        return override;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingRuleInvoiceableWithContractLines</Name>
				<Source><![CDATA[
    private static boolean isBillingRuleInvoiceableWithContractLines(ProjTable _projTable, ProjCategoryId _projCategoryId, PSAContractLineNum _contractBillingRule, ProjTransType _projTransType = ProjTransType::None)
    {
        boolean ret = false;
        PSAContractLineItems psaContractLineItems;
        ProjCategory projCategory = ProjCategory::find(_projCategoryId);
        PSAContractLineItemsSetup psaContractLineItemsSetup;

        if (projCategory.CategoryType == ProjCategoryType::None)
        {
            ret = true;
        }

        if (!ret && !PSAContractLineItems::hasBillingRules(_projTable.ProjInvoiceProjId))
        {
            ret = _projTransType == ProjTransType::OnAccount;
        }

        // Handle categories used for customer retention, these categories are always invoiceable.
        ProjCategory retentionCategory;
        select firstonly RecId from retentionCategory
            where retentionCategory.CategoryId == projCategory.CategoryId
                && retentionCategory.psaCustPaymentRetention == NoYes::Yes;

        if (retentionCategory)
        {
            ret = true;
        }
        else if (_contractBillingRule)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoicableWithContractLineAndCategorySettings(_projTable, projCategory, _contractBillingRule, _projTransType, ret);
        }
        else
        {
            // We have to find related billing rule first and check the isOverwriteCategoryChargeabilitySettingsEnabled flag to determine if the category is chargeable
            // Category is chargeable when associated rule is T&M billing method rule and we are in one of these two scenarios:
            // - isOverwriteCategoryChargeabilitySettingsEnabled == true and psaContractLineItemsSetup exists for category
            // - isOverwriteCategoryChargeabilitySettingsEnabled == false, no need for psaContractLineItemsSetup
            select firstonly ContractLineNum from psaContractLineItemsSetup
                where psaContractLineItemsSetup.ProjId == _projTable.ProjId
                    && psaContractLineItemsSetup.CategoryId == '';

            if (psaContractLineItemsSetup.ContractLineNum)
            {
                ret = ProjInvoiceTable::isBillingRuleInvoicableWithContractLineAndCategorySettings(_projTable, projCategory, psaContractLineItemsSetup.ContractLineNum, _projTransType, ret);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingRuleInvoicableWithContractLineAndCategorySettings</Name>
				<Source><![CDATA[
    private static boolean isBillingRuleInvoicableWithContractLineAndCategorySettings(ProjTable _projTable, ProjCategory projCategory, PSAContractLineNum _contractBillingRule, ProjTransType _projTransType, boolean ret)
    {
        PSAContractLineItems psaContractLineItems;
        PSAContractLineItemsSetup psaContractLineItemsSetup;

        select firstonly psaContractLineItems
                where psaContractLineItems.ContractLineNum == _contractBillingRule
                    && ((_projTransType == ProjTransType::Hour && psaContractLineItems.IncludeHourTrans)
                        || (_projTransType == ProjTransType::Cost && psaContractLineItems.IncludeExpenseTrans)
                        || (_projTransType == ProjTransType::Item && psaContractLineItems.IncludeItemTrans)
                        || (_projTransType == ProjTransType::Revenue && psaContractLineItems.IncludeFeeTrans)
                        || (_projTransType != ProjTransType::Revenue && _projTransType != ProjTransType::Item && _projTransType != ProjTransType::Cost && _projTransType != ProjTransType::Hour));

        if (psaContractLineItems)
        {
            if (psaContractLineItems.BillingMethod == ProjContractBillingMethod::TimeMaterial)
            {
                ret = psaContractLineItems.FeeCategoryId == projCategory.CategoryId
                        && psaContractLineItems.FeeProjId == _projTable.ProjId
                        && (psaContractLineItems.LineType == PSAContractLineType::UOD
                            || psaContractLineItems.LineType == PSAContractLineType::Progress
                            || psaContractLineItems.LineType == PSAContractLineType::Fee);

                if (!ret && psaContractLineItems.LineType == PSAContractLineType::TAndM)
                {
                    boolean overrideCategoryChargeability = ProjInvoiceTable::isOverrideCategoryChargeabilitySettingsEnabled(psaContractLineItems);

                    if (overrideCategoryChargeability)
                    {
                        select firstonly RecId from psaContractLineItemsSetup
                                where psaContractLineItemsSetup.ProjId == _projTable.ProjId
                                    && psaContractLineItemsSetup.CategoryId == projCategory.CategoryId
                                    && psaContractLineItemsSetup.ContractLineNum == psaContractLineItems.ContractLineNum;

                        if (psaContractLineItemsSetup)
                        {
                            ret = true;
                        }
                    }
                    else
                    {
                        ret = true;
                    }
                }
            }
            else
            {
                ret = projCategory.CategoryType == ProjCategoryType::Revenue || _projTransType == ProjTransType::OnAccount;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingRuleInvoiceableWithProjType</Name>
				<Source><![CDATA[
    private static boolean isBillingRuleInvoiceableWithProjType(ProjTable _projTable, ProjCategoryId _projCategoryId, PSAContractLineNum _contractBillingRule, ProjTransType _projTransType = ProjTransType::None)
    {
        ProjCategory                projCategory;
        ProjCategory                retentionCategory;
        PSAContractLineItems        psaContractLineItems;
        PSAContractLineItemsSetup   psaContractLineItemsSetup;
        boolean                     ret = true;
        
        if (ret)
        {
            switch (_projTable.Type)
            {
                case ProjType::TimeMaterial :
                    //On account transactions do not have a category associated with them and are always billable
                    projCategory = ProjCategory::find(_projCategoryId);
                    if (projCategory && (projCategory.CategoryType != ProjCategoryType::None))
                    {
                        boolean psaContractLineItemExists;

                        // Existence test for Time and Material, Unit of Delivery, Progress or Fee billing rules
                        if (FeatureStateProvider::isFeatureEnabled(ProjCreationOfInvoiceProposalBasedOnBillingRuleAvailabilityFeature::instance()))
                        {
                            psaContractLineItemExists = ProjInvoiceTable::hasBillingRulesForSelectedProject(_projTable.ProjInvoiceProjId, _projTable.ProjId);
                        }
                        else
                        {
                            psaContractLineItemExists = ProjInvoiceTable::checkExistingContractLineItem(_projTable);
                        }

                        if (psaContractLineItemExists)
                        {
                            //
                            // If any these billing rules exist, there needs to be a Time and Materials Billing rule
                            // with the categories included as being chargeable or the transaction needs to match
                            // the FeeProject, FeeCategory for Unit of Delivery, Progress billing.
                            //
                            ret = false;

                            // validate category is chargeable in a Time and Materials billing rule
                            select firstonly RecId from psaContractLineItemsSetup
                                where psaContractLineItemsSetup.ProjId == _projTable.ProjId &&
                                        psaContractLineItemsSetup.CategoryId == projCategory.CategoryId
                            exists join psaContractLineItems
                                where psaContractLineItems.ContractLineNum     == psaContractLineItemsSetup.ContractLineNum &&
                                        psaContractLineItems.LineType          == PSAContractLineType::TAndM                &&
                                        psaContractLineItems.ProjInvoiceProjId == _projTable.ProjInvoiceProjId;

                            if (psaContractLineItemsSetup)
                            {
                                ret = true;
                            }

                            if (!ret)
                            {
                                if (_contractBillingRule)
                                {
                                    // Check for project/category used to post Unit of Delivery, Progress or Fee billings
                                    select firstonly RecId from psaContractLineItems
                                            where psaContractLineItems.ProjInvoiceProjId == _projTable.ProjInvoiceProjId &&
                                                    ((psaContractLineItems.LineType == PSAContractLineType::UOD)      ||
                                                     (psaContractLineItems.LineType == PSAContractLineType::Progress) ||
                                                     (psaContractLineItems.LineType == PSAContractLineType::Fee))       &&
                                                     psaContractLineItems.FeeCategoryId == projCategory.CategoryId      &&
                                                     psaContractLineItems.FeeProjId     == _projTable.ProjId             &&
                                                     psaContractLineItems.ContractLineNum == _contractBillingRule;
                                    if (psaContractLineItems)
                                    {
                                        ret = true;
                                    }
                                }
                            }

                            //
                            // Handle categories used for customer retention
                            // These categories are alway invoiceable;
                            //
                            if (!ret)
                            {
                                select firstonly RecId from retentionCategory
                                    where retentionCategory.CategoryId              == projCategory.CategoryId &&
                                          retentionCategory.psaCustPaymentRetention == NoYes::Yes;
                                if (retentionCategory)
                                {
                                    ret = true;
                                }
                            }
                        }
                    }
                    break;

                case  ProjType::FixedPrice :
                    projCategory = ProjCategory::find(_projCategoryId);
                    if (PSAContractLineItems::hasBillingRules(_projTable.ProjInvoiceProjId))
                    {
                        // For Fixed Price project with billing rules - Fee Transactions are billed
                        if (projCategory.CategoryType == ProjCategoryType::Revenue)
                        {
                            // Only updated for Fee transactions linked to Billing Rule
                            if (_contractBillingRule == '')
                            {
                                ret = false;
                            }
                        }
                        else if (_projTransType != ProjTransType::OnAccount) // Only On Account transactions update limits for Fixed Price projects.
                        {
                            ret = false;
                        }
                    }
                    else
                    {
                        // Only On Account transactions update limits for Fixed Price projects without billing rules
                        if (_projTransType != ProjTransType::OnAccount)
                        {
                            ret = false;
                        }
                       
                        // Handle categories used for customer retention
                        // These categories are always invoiceable;
                        if (!ret)
                        {
                            select firstonly RecId from retentionCategory
                                    where retentionCategory.CategoryId == projCategory.CategoryId &&
                                          retentionCategory.psaCustPaymentRetention == NoYes::Yes;
                            if (retentionCategory)
                            {
                                ret = true;
                            }
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesCurrencyLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to lock the sales currency for an invoice project with the specified ID.
    /// </summary>
    /// <param name="_invoiceID">
    ///    The invoice ID of the invoice project.
    /// </param>
    /// <returns>
    ///    true if the sales currency should be locked; otherwise, false.
    /// </returns>
    public static boolean isSalesCurrencyLocked(ProjInvoiceProjId _invoiceID)
    {
        if (_invoiceID)
        {
            return (ProjInvoiceTable::find(_invoiceID).ProjLockSalesCurrency);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventInvoiceAccountQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a dialog box from which the user can select an invoice project from a list.
    /// </summary>
    /// <param name="_ctrl">
    ///    The form field that will hold the selected ProjInvoiceProjId value.
    /// </param>
    /// <param name="_custAccount">
    ///    The customer invoice account whose invoice projects will appear in the list.
    /// </param>
    public static void lookupInventInvoiceAccountQuotation(FormStringControl _ctrl, CustAccount _custAccount)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ProjInvoiceTable), _ctrl);
        Query                   query                       = new Query();
        QueryBuildDataSource    queryBuildDataSource        = query.addDataSource(tableNum(ProjInvoiceTable));
        QueryBuildDataSource    qbdsProjFundingSource       = queryBuildDataSource.addDataSource(tableNum(ProjFundingSource));
        QueryBuildRange         queryBuildRangeCustAccount  = qbdsProjFundingSource.addRange(fieldNum(ProjFundingSource, CustAccount));

        qbdsProjFundingSource.joinMode(JoinMode::ExistsJoin);
        qbdsProjFundingSource.relations(true);

        queryBuildRangeCustAccount.value(queryValue(_custAccount));

        sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable,ProjInvoiceProjId), true);
        sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a dialog box that has a list of invoice accounts the user can select.
    /// </summary>
    /// <param name="ctrl">
    ///    The field that will hold the selected invoice account number.
    /// </param>
    public static void lookupInvoiceAccount(FormStringControl _ctrl)
    {
        var query = ProjInvoiceTable::lookupInvoiceAccountQuery();

        var sysTableLookup = SysTableLookup::newParameters(tableNum(CustTable), _ctrl, true,
                CustomerDataInteractorFactory::useExistingOrCreateResolver(_ctrl, query));

        sysTableLookup.addLookupfield(fieldNum(CustTable, AccountNum), true);
        sysTableLookup.addLookupfield(fieldNum(CustTable, Party));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the invoice account number or by mapping
    /// it to the customer name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_ctrl">The control on which contextual data entry is being performed.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>ProjInvoiceTable::lookupInvoiceAccount</c> method.
    /// </remarks>
    public static str resolveAmbiguousReferenceInvoiceAccount(FormStringControl _ctrl)
    {
        return CustomerDataInteractorFactory::resolveAmbiguousReferenceForControl(_ctrl, ProjInvoiceTable::lookupInvoiceAccountQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceAccountQuery</Name>
				<Source><![CDATA[
    private static Query lookupInvoiceAccountQuery()
    {
        var query = CustomerDataInteractorFactory::constructDefaultBaseQuery();
        var qbds  = query.dataSourceTable(tableNum(CustTable));
        if (ProjParameters::find().OneTimeCustOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00010, funcName());
            qbds.addRange(fieldnum(CustTable,OneTimeCustomer)).value(queryValue(NoYes::No));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjInvoiceProjId</Name>
				<Source><![CDATA[
    static void lookupProjInvoiceProjId(FormStringControl _oLookupCtrl,
                                               CustAccount _sCustAccount = "")
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ProjInvoiceTable), _oLookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ProjInvoiceTable));

        QueryBuildDataSource    qbdsProjFundingSource;
        QueryBuildRange         queryBuildRange;

        if (_sCustAccount)
        {
            qbdsProjFundingSource = queryBuildDataSource.addDataSource(tableNum(ProjFundingSource));
            queryBuildRange = qbdsProjFundingSource.addRange(fieldNum(ProjFundingSource, CustAccount));
            qbdsProjFundingSource.joinMode(JoinMode::ExistsJoin);
            qbdsProjFundingSource.relations(true);

            queryBuildRange.value(queryValue(_sCustAccount));
        }

        sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, ProjInvoiceProjId));
        sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroup</Name>
				<Source><![CDATA[
    static ProjPriceGroupID priceGroup(ProjInvoiceProjId _invoiceProjId)
    {
        if ( _invoiceProjId)
        {
        return (select firstonly ProjPriceGroup from projInvoiceTable
                    where projInvoiceTable.ProjInvoiceProjId == _invoiceProjId).ProjPriceGroup;
    }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCodeProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Asks the user whether to update open on account transactions with the new currency code for an
    ///    invoice project.
    /// </summary>
    /// <returns>
    ///    true if the user selects yes to update the transactions; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is called from a form if the currency code has changed. A dialog box notifies the user
    ///    about a change in the currency code.
    /// </remarks>
    public static boolean promptConvertCurrencyCodeProj()
    {
        return (Box::yesNo("@SYS70612", DialogButton::Yes) == DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaLookupProjInvoiceProjId</Name>
				<Source><![CDATA[
    public static void psaLookupProjInvoiceProjId(FormStringControl   _oLookupCtrl,
                                                         CustAccount         _sCustAccount       = "",
                                                         UnknownNoYes        _limitContractLines = UnknownNoYes::Unknown,
                                                         boolean             _hideContractWithBillingRules = false,
                                                         DataAreaId          _legalEntity = curext(),
                                                         boolean             _applyProjectFunctionalityLocking = false)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ProjInvoiceTable), _oLookupCtrl);

        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    fundingSourceDataSource;
        QueryBuildLink          queryBuildLink;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    psaContractLineItemsDataSource;
        QueryBuildLink          psaQueryBuildLink;

        DictRelation            rel = new DictRelation(tableNum(ProjFundingSource));

        changecompany(_legalEntity)
        {
            queryBuildDataSource    = query.addDataSource(tableNum(ProjInvoiceTable));

            if (_limitContractLines != UnknownNoYes::Unknown)
            {
                queryBuildDataSource.addRange(fieldNum(ProjInvoiceTable, psaContractLines)).value(queryValue(_limitContractLines));
            }

            if (_applyProjectFunctionalityLocking)
            {
                if (ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateInvoiceProposals))
                {
                    queryBuildDataSource.addRange(fieldNum(ProjInvoiceTable, ProjDataSource)).value(SysQuery::value(0));
                }
            }

            fundingSourceDataSource = queryBuildDataSource.addDataSource(tableNum(ProjFundingSource));
            queryBuildLink          = fundingSourceDataSource.addLink(fieldNum(ProjInvoiceTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

            fundingSourceDataSource.joinMode(JoinMode::ExistsJoin);

            if (_hideContractWithBillingRules)
            {
                psaContractLineItemsDataSource = queryBuildDataSource.addDataSource(tableNum(PSAContractLineItems));
                psaQueryBuildLink          = psaContractLineItemsDataSource.addLink(fieldNum(ProjInvoiceTable, ProjInvoiceProjId), fieldNum(PSAContractLineItems, ProjInvoiceProjId));
                psaContractLineItemsDataSource.joinMode(JoinMode::NoExistsJoin);
            }
            rel.loadTableRelation(tableNum(ProjInvoiceTable));

            queryBuildRange = fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, CustAccount));

            queryBuildDataSource.addSortIndex(indexNum(ProjInvoiceTable, ProjInvoiceIdx));

            if (_sCustAccount)
            {
                queryBuildRange.value(queryValue(_sCustAccount));
            }

            sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, ProjInvoiceProjId));
            sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, Description));

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                sysTableLookup.addLookupMethod(tableMethodStr(ProjInvoiceTable, fundingSourceName));
                sysTableLookup.setLabel("@SYS27874");
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInvReportFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report format in print setting of the Contract
    /// </summary>
    /// <param name="_set">
    /// boolean value true/ false if format changed
    /// </param>
    /// <param name="_newReportFormat">
    /// new report format selected
    /// </param>
    /// <returns>
    /// returns report format
    /// </returns>
    public edit ProjInvReportFmtDesc editInvReportFormat(boolean _set, PrintMgmtReportFormatDescription  _newReportFormat)
    {
        PrintMgmtReportFormatDescription    newReportFormat = _newReportFormat;
        PrintMgmtReportFormatDescription    reportFormat;

        reportFormat = ProjInvoicePrintMgmt::getReportFormat(this);
        if (_set)
        {
            if (this.RecId && newReportFormat && newReportFormat != reportFormat)
            {
                ProjInvoicePrintMgmt::createOrUpdateInvoicePrintSettings(this,PrintMgmtNodeType::ProjInvoiceTable,newReportFormat);
                reportFormat = newReportFormat;
            }
        }
        return reportFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the language ID used by the contract.
    /// </summary>
    /// <param name="_contractId">
    ///     The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_projFundingSourceRecid">
    ///     A funding source reference Id; optional.
    /// </param>
    /// <returns>
    ///     The languageId specified by the funding source, contract or system default.
    /// </returns>
    public static LanguageId getLanguageId(ProjInvoiceProjId _contractId, ProjFundingSourceRefId _projFundingSourceRecid = 0)
    {
        // Determine Language Id to use for contract
        LanguageId languageId;

        // If _fundingSourceRecId is specified, validate it is contained withing the contract and return languageId
		if (_projFundingSourceRecid)
        {
            ProjFundingSource projfundingSource = projfundingSource::find(_projFundingSourceRecid);
            if (projfundingSource.ContractId == _contractId)
            {
                languageId = projfundingSource.LanguageId;
            }
        }
        else
        {
            // If single external funding account, use the languageId on the funding source
            ProjFundingSource ProjFundingSource;
            select count(RecId) from projFundingSource
                where projFundingSource.ContractId == _contractId &&
                        (ProjFundingSource.FundingType == ProjFundingType::Customer ||
                        ProjFundingSource.FundingType == ProjFundingType::Grant);
            if (ProjFundingSource.RecId == 1)
            {
                select firstonly LanguageId from projFundingSource
                    where projFundingSource.ContractId == _contractId &&
                            (ProjFundingSource.FundingType == ProjFundingType::Customer ||
                            ProjFundingSource.FundingType == ProjFundingType::Grant);
                languageId = projFundingSource.LanguageId;
            }
            else
            {
                // Check if funding sourced all have the same Language Id
                select firstonly LanguageId from projFundingSource
                    where projFundingSource.ContractId == _contractId &&
                            (ProjFundingSource.FundingType == ProjFundingType::Customer ||
                            ProjFundingSource.FundingType == ProjFundingType::Grant);

                ProjFundingSource projFundingSourceLanguageCheck;
                select firstonly RecId from projFundingSourceLanguageCheck
                    where projFundingSourceLanguageCheck.ContractId == _contractId &&
                            (projFundingSourceLanguageCheck.FundingType == ProjFundingType::Customer ||
                            projFundingSourceLanguageCheck.FundingType == ProjFundingType::Grant) &&
                            projFundingSourceLanguageCheck.LanguageId != ProjFundingSource.LanguageId;
                if (!projFundingSourceLanguageCheck)
                {
                    languageId = projFundingSource.LanguageId;
                }
            }
        }

        if (languageId == '')
        {
            // No language Id found default to company language Id
            languageId = CompanyInfo::languageId();
        }

        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Check whether external funding source is attached with contract.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    ///  Project Contract Id.
    /// </param>
    /// <returns>
    ///  Return true if external funding source found , otherwise false.
    /// </returns>
    public static boolean canCreateInvoiceProposal(ProjInvoiceProjId   _projInvoiceProjId)
    {
        ProjFundingSource   projFundingSource;
        ProjInvoiceTable    projInvoiceTable;
        boolean             canCreateInvoiceProposal;

        select RecId from projInvoiceTable
            where projInvoiceTable.ProjInvoiceProjId == _projInvoiceProjId
                exists join projFundingSource
            where projFundingSource.ContractId == _projInvoiceProjId &&
                (projFundingSource.FundingType == ProjFundingType::Customer ||
                projFundingSource.FundingType == ProjFundingType::Grant);

        if (projInvoiceTable.RecId)
        {
            canCreateInvoiceProposal = true;
        }

        return canCreateInvoiceProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContractAgainstCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// To validate the selected contract against customer.
    /// </summary>
    /// <param name = "_projInvoiceProjId">Contract record identifier</param>
    /// <param name = "_custAccount">Customer record identifier</param>
    /// <returns>Return true if valid contract found, otherwise false</returns>
    public static boolean validateContractAgainstCustomer(ProjInvoiceProjId _projInvoiceProjId, CustAccount _custAccount)
    {
        ProjInvoiceTable    projInvoiceTable;
        ProjFundingSource   projFundingSource;
        boolean             ret = true;

        if (_custAccount)
        {
			select firstonly RecId from projInvoiceTable
				where projInvoiceTable.ProjInvoiceProjId == _projInvoiceProjId
			exists join projFundingSource
				where projFundingSource.ContractId == _projInvoiceProjId
				&& projFundingSource.CustAccount == _custAccount;

			if (!projInvoiceTable.RecId)
			{
				ret = checkFailed(strFmt("@Proj:ValidateContractAgainstCustomer", _projInvoiceProjId, _custAccount));
			}
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        
        DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(this, fieldNum(ProjInvoiceTable, ProjInvoiceProjId), this, fieldNum(ProjInvoiceTable, DefaultDimension));
        BankAccountTable bankAccount = BankAccountTable::findOnAccountNum(this.BankAccount);
        if (bankAccount)
        {
            DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(bankAccount, fieldNum(BankAccountTable, AccountID), this, fieldNum(ProjInvoiceTable, DefaultDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(ProjInvoiceTable), fieldNum(ProjInvoiceTable, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(ProjInvoiceTable), fieldNum(ProjInvoiceTable, ProjInvoiceProjId));
        contract.addKeyFieldDimensionPair(tableNum(BankAccountTable), fieldNum(ProjInvoiceTable, BankAccount));
        _tableSet.add(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnHoldFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves on-hold funding source on a contract.
    /// </summary>
    /// <returns>RecId of the on-hold funding source.</returns>
    public static ProjFundingSourceRefId getOnHoldFundingSource(ProjInvoiceProjId _contractId )
    {
        ProjFundingSourceRefId  fundingsource = 0;
        
        if (_contractId)
        {
            ProjFundingSource projFundingSource;

            // Find the OnHold funding source for the contract
            select firstonly RecId from projFundingSource where
                projFundingSource.ContractId == _contractId &&
                projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;

            fundingsource = projFundingSource.RecId;
        }

        return fundingsource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingContractLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record exists whose -
    ///     1. Value in the ProjInvoiceProjId column matches that on the <c>ProjTable</c> record.
    ///     2. Line type is not LumpSum.
    /// </summary>
    /// <param name = "_projTable">
    ///     A <c>ProjTable</c> value.
    /// </param>
    /// <returns>
    ///     true if there is any <c>PSAContractLineItems</c> record that matches the above conditions; otherwise, false.
    /// </returns>
    protected static boolean checkExistingContractLineItem(ProjTable _projTable)
    {
        PSAContractLineItems psaContractLineItems;

        select firstonly RecId from psaContractLineItems
            where psaContractLineItems.ProjInvoiceProjId == _projTable.ProjInvoiceProjId
               && psaContractLineItems.LineType != PSAContractLineType::LumpSum;

        return (psaContractLineItems != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBillingRulesForSelectedProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record exists or not.  
    /// </summary>
    /// <param name = "_contractId">
    ///  The project contract record identifier.
    /// </param>
    /// <param name = "_projId">
    ///  The project record identifier.
    /// </param>
    /// <returns>
    ///     true if there is any <c>PSAContractLineItems</c> record that matches the specified conditions; otherwise, false.
    /// </returns>
    public static boolean hasBillingRulesForSelectedProject(ProjInvoiceProjId _contractId, ProjId _projId)
    {
        boolean result = false;

        if (_contractId != '' && _projId != '')
        {
            PSAContractLineItems psaContractLineItems;

            result = (select firstonly RecId from psaContractLineItems
                          where psaContractLineItems.ProjInvoiceProjId == _contractId
                             && psaContractLineItems.FeeProjId == _projId).RecId ? true : false;
            
            if (!result)
            {
                PSAContractLineItemsSetup psaContractLineItemsSetup;
                PSAContractLineItems psaContractLineItemsSelected;

                select firstonly RecId from psaContractLineItemsSelected
                    where psaContractLineItemsSelected.ProjInvoiceProjId == _contractId
                        exists join psaContractLineItemsSetup
                            where psaContractLineItemsSetup.ContractLineNum == psaContractLineItemsSelected.ContractLineNum
                               && psaContractLineItemsSetup.ProjId == _projId;
                if (psaContractLineItemsSelected)
                {
                    result = true;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124916</DeveloperDocumentation>
	<FormRef>ProjInvoiceTable</FormRef>
	<Label>@SYS50060</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProjInvoiceProjId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProjInvoiceIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProjInvoiceIdx</PrimaryIndex>
	<ReplacementKey>ProjInvoiceIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PrintMgmtDocInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PrintMgmtDocInstance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjFundingLimit</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjFundingLimit</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjFundingRule</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjFundingRule</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjFundingSource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjFundingSource</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceCurrency</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceCurrency</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceJour</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceJour</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalJour</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalJour</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastInvoiceFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesResponsible</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankAccount</Name>
			<Label>@SYS21829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLockSalesCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fundingSourceName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EUSalesList</Name>
			<Label>@SYS17928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ListCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCodeOnDlvAddress_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Forecasting</Name>
			<Label>@SYS25605</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastInvoiceFrequency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiroMoneyTransferSlip</Name>
			<Label>@SYS2723</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Groups</Name>
			<Label>@SYS28006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationMore</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLockSalesCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Integration</Name>
			<Label>@SYS104440</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjEnableAdvancedFunding</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProgressInvoicing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAndPayment</Name>
			<Label>@SYS319688</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Paymentsched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndividualBuffer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastInvoiceFrequency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotificationToTheCentralBank</Name>
			<Label>@SYS67156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankcentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Paymentsched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndividualBuffer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceGroup</Name>
			<Label>@SYS13076</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSARetainage</Name>
			<Label>@PSA2704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSARetainPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARetainScheduleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceNetPrice_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeRegistration</Name>
			<Label>@SYS138979</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimePostDetailSummary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinTimeIncrement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>bankcentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRef</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS31438</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForecastInvoiceFrequency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjForecastInvoiceFrequency</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubProjId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IndividualBuffer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS101816</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatAddValue_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvIntrastatAddValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InvoiceLocation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ListCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinTimeIncrement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TSMinTimeIncrement</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
			<Label>@SYS58518</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Paymentsched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjEnableAdvancedFunding</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjEnableAdvancedFunding</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjInvoiceNetPrice_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceNetPrice_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjLockSalesCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLockSalesCurrency</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPriceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSAContractDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@PSA1322</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAContractLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA2825</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAProgressInvoicing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PSA802</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSARetainPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@PSA2697</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSARetainScheduleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjRetainScheduleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesResponsible</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Label>@SYS81476</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxServiceCodeOnDlvAddress_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeOnDlvAddress_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TimePostDetailSummary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TSPostDetailSummary</ExtendedDataType>
			<EnumType>DetailSummary</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjDataSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjDataSourceRefId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjInvoiceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DescriptionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Description</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjDataSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjDataSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccount</Name>
					<Field>BankAccount</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCentralBankPurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDisc</Name>
					<SourceEDT>ProjCashDiscCode</SourceEDT>
					<Field>CashDisc</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatTransactionCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCodeId</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCodeId</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocation_ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceLocation</Name>
					<Field>InvoiceLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Paymentsched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>Paymentsched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>PaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPriceGroup</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>ProjPriceGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesResponsible</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesResponsible</Name>
					<Field>SalesResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjDataSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjDataSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjDataSource</Name>
					<Field>ProjDataSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>