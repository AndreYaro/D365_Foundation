<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationHeaderSubtotalTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationHeaderSubtotalTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSubtotalByDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the subtotal for a bank document.
    /// </summary>
    /// <param name="_documentTmpTable">
    /// A <c>BankReconciliationDocumentOpenTmp</c> record.
    /// </param>
    /// <returns>
    /// true if the subtotal is updated; otherwise, false.
    /// </returns>
    private boolean updateSubtotalByDocument(
        BankReconciliationDocumentOpenTmp   _documentTmpTable)
    {
        boolean     needUpdate;
        BankReconciliationDocumentOpenTmp documentOpenTmp;

        documentOpenTmp.linkPhysicalTableInstance(_documentTmpTable);

        while select sum(DebitAmount), sum(CreditAmount) from documentOpenTmp
            group by IsMatched
            where documentOpenTmp.BankTransType == this.BankTransType
        {
            needUpdate = true;

            this.AmountDocumentOpen += documentOpenTmp.DebitAmount - documentOpenTmp.CreditAmount;
            if (documentOpenTmp.IsMatched)
            {
                this.AmountDocumentMatched += documentOpenTmp.DebitAmount - documentOpenTmp.CreditAmount;
            }
        }

        return needUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubtotalByStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the subtotal for a bank statement.
    /// </summary>
    /// <param name="_statementTmpTable">
    /// A <c>BankReconciliationStatementOpenTmp</c> record.
    /// </param>
    /// <returns>
    /// true if the subtotal is updated; otherwise, false.
    /// </returns>
    private boolean updateSubtotalByStatement(
        BankReconciliationStatementOpenTmp  _statementTmpTable)
    {
        boolean                             needUpdate;
        BankReconciliationStatementOpenTmp  statementOpenTmp;

        statementOpenTmp.linkPhysicalTableInstance(_statementTmpTable);

        while select sum(DebitAmount), sum(CreditAmount) from statementOpenTmp
            group by IsMatched
            where statementOpenTmp.BankTransType == this.BankTransType
        {
            needUpdate = true;

            this.AmountStatementOpen += statementOpenTmp.DebitAmount - statementOpenTmp.CreditAmount;
            if (statementOpenTmp.IsMatched)
            {
                this.AmountStatementMatched += statementOpenTmp.DebitAmount - statementOpenTmp.CreditAmount;
            }
        }

        return needUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSubtotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the subtotal of a reconciliation.
    /// </summary>
    /// <param name="_documentTmp">
    /// A <c>BankReconciliationDocumentOpenTmp</c> record.
    /// </param>
    /// <param name="_statementTmp">
    /// A <c>BankReconciliationStatementOpenTmp</c> record.
    /// </param>
    /// <returns>
    /// The subtotal.
    /// </returns>
    public static BankReconciliationHeaderSubtotalTmp calculateSubtotal(
        BankReconciliationDocumentOpenTmp   _documentTmp,
        BankReconciliationStatementOpenTmp  _statementTmp)
    {
        BankReconciliationHeaderSubtotalTmp subTotalTmp;
        BankReconciliationDocumentOpenTmp   documentTmp;
        BankReconciliationStatementOpenTmp  statementTmp;

        BankTransType                       bankTransType;
        boolean                             isUpdate;

        documentTmp.linkPhysicalTableInstance(_documentTmp);
        statementTmp.linkPhysicalTableInstance(_statementTmp);

        ttsBegin;
        // In case some bank account transaction can be without bank trans type.
        subTotalTmp.BankTransType = "";
        subTotalTmp.insert();

        insert_recordset subTotalTmp (BankTransType, Name)
            select BankTransType, Name from bankTransType;

        while select forUpdate subTotalTmp
        {
            isUpdate = subTotalTmp.updateSubtotalByStatement(statementTmp);
            isUpdate = subTotalTmp.updateSubtotalByDocument(documentTmp) || isUpdate;

            if (isUpdate)
            {
                subTotalTmp.update();
            }
        }
        ttsCommit;

        return subTotalTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221716</DeveloperDocumentation>
	<Label>@GLS221714</Label>
	<TitleField1>Name</TitleField1>
	<TitleField2>BankTransType</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountDocumentMatched</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS221717</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountDocumentOpen</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS221718</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountStatementMatched</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS221719</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountStatementOpen</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS221720</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankTransType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankTransactionTypeName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>