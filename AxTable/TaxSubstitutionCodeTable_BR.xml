<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSubstitutionCodeTable_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxSubstitutionCodeTable_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCESTCodeValid</Name>
				<Source><![CDATA[
             public static boolean isCESTCodeValid(TaxSubstitutionCode_BR _taxSubstitutionCode)
    {
        str CESTCodeRegexPattern = @"^:d:d\.:d:d:d\.:d:d$";

        if (_taxSubstitutionCode)
        {
            return match(CESTCodeRegexPattern, _taxSubstitutionCode) == 1;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSubstitutionCode</Name>
				<Source><![CDATA[
    public static str getTaxSubstitutionCode(ItemID _itemId, TaxFiscalClassificationID_BR _classificationCode)
    {
        TaxSubstitutionCodeTable_BR CESTTable;

        select firstonly TaxSubstitutionCode from CESTTable
            where CESTTable.ItemId == _itemId;

        if (!CESTTable || !CESTTable.TaxSubstitutionCode)
        {
            select firstonly TaxSubstitutionCode from CESTTable
             where CESTTable.TaxFiscalClassification == _classificationCode;
        }

        return CESTTable.TaxSubstitutionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TaxSubstitutionCodeTable_BR, TaxSubstitutionCode):
                if (!TaxSubstitutionCodeTable_BR::isCESTCodeValid(this.TaxSubstitutionCode))
                {
                    ret = checkFailed("@Brazil:CESTValidation");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;
        if (this.ItemId && this.alreadyHasRecordForCurrentItemId())
        { 
            throw error(strFmt('@SCM:TaxSubstituionCodeTable', this.ItemId));
        } 
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TaxSubstitutionCodeTable_BR orig = this.orig();
        if (this.ItemId 
            && this.ItemId != orig.ItemId
            && this.alreadyHasRecordForCurrentItemId())
        {
            throw error(strFmt('@SCM:TaxSubstituionCodeTable', this.ItemId));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>alreadyHasRecordForCurrentItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is already a record with same ItemId
    /// </summary>
    /// <returns>returns true if a record with same ItemId already exits, otherwise false</returns>
    /// <remarks>
    /// This method is created and called in insert and update method of TaxSubstituionCodeTable_BR table to ensure no duplicate record can be inserted.
    /// It is a breaking change to add unique index to prevent duplicate records with same ItemId in TaxSubstitutionCodeTable_BR
    /// so use pessimisticLock to lock the item in InventTable to and then check and insert record into TaxSubstitutionCodeTable_BR
    /// to avoid duplicate records
    /// </remarks>
    private boolean alreadyHasRecordForCurrentItemId()
    {
        InventTable inventTable;

        select firstonly pessimisticLock RecId from inventTable
                where inventTable.ItemId == this.ItemId;

        TaxSubstitutionCodeTable_BR taxSubstitutionCodeTable;

        select firstonly RecId from taxSubstitutionCodeTable
                where taxSubstitutionCodeTable.ItemId == this.ItemId;
    
        return taxSubstitutionCodeTable.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@Brazil:TaxSubstitutionCodeDeveloper</DeveloperDocumentation>
	<Label>@Brazil:TaxSubstitutionCodeTitle</Label>
	<TitleField1>TaxSubstitutionCode</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxFiscalClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSubstitutionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxSubstitutionCode</Name>
			<Label>@Brazil:TaxSubstitutionCodeTitle</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxSubstitutionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxFiscalClassification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxFiscalClassificationId_BR</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxSubstitutionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxSubstitutionCode_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxFiscalClassificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxFiscalClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxFiscalClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxFiscalClassification_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxFiscalClassification</Name>
					<Field>TaxFiscalClassification</Field>
					<RelatedField>FiscalClassificationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>