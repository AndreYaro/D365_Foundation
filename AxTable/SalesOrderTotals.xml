<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesOrderTotals extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals for a sales order. If a <c>SalesOrderTotals</c> record is existing, then it is updated.
    /// If one is not existing, then it is created.
    /// </summary>
    /// <param name = "_salesId">
    /// <c>SalesId</c> of the sales order for which the totals should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Update timestamp that should be marked on the record.
    /// </param>
    /// <returns>
    /// <c>SalesOrderTotals</c> record containing the calculated totals.
    /// </returns>
    public static SalesOrderTotals calculateForSalesOrder(SalesId _salesId, utcdatetime _updateDateTime)
    {
        using (SysInstrumentationActivityContext activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(tableStr(SalesOrderTotals)).salesTotalsCalculateActivities().calculateForSalesOrder())
        {
            ttsbegin;

            CustInvoiceJour custInvoiceJour;
            select sum(SalesBalance), sum(SumMarkup), sum(EndDisc), sum(SumLineDisc), sum(SumTax), sum(InvoiceAmount) from custInvoiceJour
                where custInvoiceJour.SalesId == _salesId;
        
            SalesTable salesTable = SalesTable::find(_salesId);

            SalesTotals totals = SalesTotals::construct(salesTable, SalesUpdate::All);

            SalesOrderTotals orderTotals = SalesOrderTotals::find(_salesId, true);
            orderTotals.LineTotalAmount             = totals.totalBalance()     + custInvoiceJour.SalesBalance;
            orderTotals.TotalDiscountAmount         = totals.totalEndDisc()     + custInvoiceJour.EndDisc;
            orderTotals.OrderTotalDiscountAmount    = orderTotals.TotalDiscountAmount + totals.totalLineDisc() + custInvoiceJour.SumLineDisc;
            orderTotals.OrderTotalChargesAmount     = totals.totalMarkup()      + custInvoiceJour.SumMarkup;
            orderTotals.OrderTotalTaxAmount         = totals.totalTaxAmount()   + custInvoiceJour.SumTax;
            orderTotals.OrderTotalAmount            = totals.totalAmount()      + custInvoiceJour.InvoiceAmount;
            orderTotals.LastUpdatedDateTime = _updateDateTime;

            if (orderTotals.RecId)
            {
                orderTotals.update();
            }
            else
            {
                orderTotals.SalesId = _salesId;
                orderTotals.insert();
            }

            ttscommit;

            activityContext.addCustomProperty(tableStr(SalesTable), int642Str(salesTable.RecId));

            return orderTotals;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesOrderTotals find(SalesId _salesId, boolean _forUpdate = false)
    {
        SalesOrderTotals orderTotals;

        orderTotals.selectForUpdate(_forUpdate);

        if (_salesId)
        {
            select firstonly orderTotals
                where orderTotals.SalesId == _salesId;
        }

        return orderTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderHeaderTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>OrderHeaderTaxAmount</c> field on a<c>SalesOrderTotals</c> record with the difference between order total tax amount and line tax amounts.
    /// </summary>
    /// <remarks>Tax on charges related to the sales order header will be included in this amount.</remarks>
    /// <param name = "_orderTotals">SalesOrderTotals record to update</param>
    public static void updateOrderHeaderTaxAmount(SalesOrderTotals _orderTotals)
    {
        ttsbegin;
        
        _orderTotals.selectForUpdate(true);
        SalesOrderLineTotals orderLineTotals;

        select sum(TotalTaxAmount) from orderLineTotals where orderLineTotals.SalesId == _orderTotals.SalesId;
        _orderTotals.OrderHeaderTaxAmount = _orderTotals.OrderTotalTaxAmount - orderLineTotals.TotalTaxAmount;
        _orderTotals.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesOrderTotalsDevDoc</DeveloperDocumentation>
	<Label>@SCM:SalesOrderTotals</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>SalesIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineTotalAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderTotalChargesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderTotalDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderTotalTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderTotalAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdatedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderHeaderTaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineTotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalAmount</ExtendedDataType>
			<Label>@SYS5360</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderTotalChargesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalMarkupAmount</ExtendedDataType>
			<Label>@SYS11466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
			<Label>@RET3621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderTotalDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
			<Label>@SYS16711</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderTotalTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalTaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderTotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastUpdatedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTotalsLastUpdatedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderHeaderTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>