<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkCycle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkCycle extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNextStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the starting date of the next period to be generated for Work cycle.
    /// </summary>
    /// <returns>
    /// Determine the next period starting date for the Work cycle.
    /// </returns>
    public TransDate calculateNextStartDate()
    {
        PayrollWorkPeriod    workPeriod;
        TransDate           nextStartDate;

        // Get most recent pay period
        select firstonly PeriodEndDate from workPeriod
            order PeriodEndDate desc
            where workPeriod.WorkCycle == this.RecId;

        if (workPeriod.RecId)
        {
            nextStartDate = workPeriod.PeriodEndDate + 1;
        }

        return nextStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a given number of Work periods based on the start date.
    /// </summary>
    /// <param name="_numberOfPeriods">
    /// The number of periods to generate.
    /// </param>
    /// <param name="_startDate">
    /// The starting date of the first period to generate.
    /// </param>
    public void generatePeriods(int _numberOfPeriods, TransDate _startDate)
    {
        PayrollWorkPeriod   workPeriod;
        int                 periodsCounter;

        //The number of days per period is variable and is set on the parent Work cycle record.
        workPeriod.WorkCycle = this.RecId;
        workPeriod.PeriodStartDate = _startDate;

        ttsbegin;
        for (periodsCounter = 0; periodsCounter < _numberOfPeriods; periodsCounter++)
        {
            workPeriod.PeriodEndDate = workPeriod.PeriodStartDate + this.DaysPerPeriod - 1;
            workPeriod.insert();
            workPeriod.PeriodStartDate = workPeriod.PeriodEndDate + 1;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>PayrolLWorkCycle</c> table; if not, an error displays.
    /// message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollWorkCycleRecId _recId)
    {
        boolean ret = true;

        if (!PayrollWorkCycle::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollWorkCycle::txtNotExist(), tableId2name(tableNum(PayrollWorkCycle))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PayrollWorkCycle</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollWorkCycleRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollWorkCycle
                    where payrollWorkCycle.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PayrollWorkCycle</c> table exists.
    /// </summary>
    /// <param name="_workCycleId">
    /// A <c>workCycleId</c> field value.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise false.
    /// </returns>
    public static boolean existByCycle(PayrollWorkCycleId _workCycleId)
    {
        return (select payrollWorkCycle
                    where payrollWorkCycle.WorkCycleId == _workCycleId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PayrollWorkCycle</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollWorkCycle</c> table; otherwise, an empty record.
    /// </returns>
    static PayrollWorkCycle find(
    PayrollWorkCycleRecId   _recId,
    boolean                 _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkCycle  workCycle;

        workCycle.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            workCycle.concurrencyModel(_concurrencyModel);
        }

        select firstonly workCycle
            where workCycle.RecId == _recId;

        return workCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>PayrollWorkCycle</c> table specified by the <c>WorkCycleId</c> field value.
    /// </summary>
    /// <param name="_workCycleId">
    /// A <c>workCycleId</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollWorkCycle</c> table.
    /// </returns>
    static PayrollWorkCycle findByCycle(
    PayrollWorkCycleId   _workCycleId,
    boolean              _forUpdate = false,
    ConcurrencyModel     _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkCycle  workCycle;

        workCycle.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            workCycle.concurrencyModel(_concurrencyModel);
        }

        select firstonly workCycle
            where workCycle.WorkCycleId == _workCycleId;

        return workCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkcycleTableContainsWorkCyclesThatAreDefinedByPe</DeveloperDocumentation>
	<FormRef>PayrollWorkPeriodCycles</FormRef>
	<Label>@Payroll:WorkCycle</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>WorkCycleId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Payroll</Modules>
	<PrimaryIndex>WorkCycle</PrimaryIndex>
	<ReplacementKey>WorkCycle</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCycleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysPerPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCycleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCycleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkCycle</Name>
			<Label>@Payroll:WorkCycle</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCycleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysPerPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DaysPerPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkDaysPerPeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkCycleId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkCycleId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkCycle</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkCycleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>