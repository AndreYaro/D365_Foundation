<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlCustAdvanceInvoiceItems</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlCustAdvanceInvoiceItems extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PlCustAdvanceInvoiceItems</c> table record based on data in the provided <c>CustInvoiceLine</c> table record.
    /// </summary>
    /// <param name="_custInvoiceLine">
    /// The <c>CustInvoiceLine</c> table record containing data to be copied.
    /// </param>
    public void initFromCustInvoiceLine(CustInvoiceLine _custInvoiceLine)
    {
        TmpTaxWorkTrans     tmpTaxWorkTrans;
        TaxTable            taxTable;
        boolean             inclTax;
        Tax                 tax;
        CustInvoiceTable    custInvoiceTable = _custInvoiceLine.custInvoiceTable();

        this.RefRecId = _custInvoiceLine.RecId;
        this.RefTableId = _custInvoiceLine.TableId;

        inclTax = _custInvoiceLine.custInvoiceTable().InclTax;
        tax     = Tax::construct();

        if (inclTax)
        {
            this.OriginalLineAmountExclTax = Tax::baseAmountExclTax(_custInvoiceLine.TaxGroup,
                                                                    _custInvoiceLine.TaxItemGroup,
                                                                    custInvoiceTable.InvoiceDate ? custInvoiceTable.InvoiceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                    custInvoiceTable.CurrencyCode,
                                                                    _custInvoiceLine.AmountCur,
                                                                    TaxModuleType::FreeTxtInvoice);

            this.OriginalTaxAmount = _custInvoiceLine.AmountCur - this.OriginalLineAmountExclTax;
            this.OriginalLineAmountInclTax = _custInvoiceLine.AmountCur;
        }
        else
        {
            this.OriginalLineAmountExclTax = _custInvoiceLine.AmountCur;
            this.OriginalTaxAmount = tax.taxCalcWithoutSource(_custInvoiceLine.TaxGroup,
                                                              _custInvoiceLine.TaxItemGroup,
                                                              custInvoiceTable.InvoiceDate ? custInvoiceTable.InvoiceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                              custInvoiceTable.CurrencyCode,
                                                              _custInvoiceLine.AmountCur,
                                                              TaxModuleType::FreeTxtInvoice);

            this.OriginalLineAmountInclTax = _custInvoiceLine.AmountCur + this.OriginalTaxAmount;
        }

        this.OriginalSalesPriceExclTax = _custInvoiceLine.Quantity ? CurrencyExchangeHelper::price(this.OriginalLineAmountExclTax / _custInvoiceLine.Quantity, custInvoiceTable.CurrencyCode) : 0;

        tmpTaxWorkTrans   = tax.tmpTaxWorkTrans();

        select firstonly TaxCode, CalculationDate, TaxBaseAmount
            from tmpTaxWorkTrans
            exists join taxTable
                where taxTable.TaxCode == tmpTaxWorkTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT
                        || taxTable.TaxType_W == TaxType_W::VATReduced
                        || taxTable.TaxType_W == TaxType_W::VATZero);

        this.OriginalTaxCode = CzCustAdvanceInvoiceLine::taxWriteCodeFromTaxCodeAndValue(tmpTaxWorkTrans.TaxCode, tmpTaxWorkTrans.showTaxValue());

        this.LineNum = _custInvoiceLine.LineNum;
        this.OriginalItemName = _custInvoiceLine.Description;
        this.OriginalQty = _custInvoiceLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPlCustAdvanceInvoiceItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PlCustAdvanceInvoiceItems</c> table record based on data in the provided <c>PlCustAdvanceInvoiceItems</c> table record.
    /// </summary>
    /// <param name="_custAdvanceInvoiceItems">
    /// The <c>PlCustAdvanceInvoiceItems</c> table record containing data to be copied.
    /// </param>
    public void initFromPlCustAdvanceInvoiceItems(PlCustAdvanceInvoiceItems _custAdvanceInvoiceItems)
    {
        this.data(_custAdvanceInvoiceItems);

        this.RefRecId = _custAdvanceInvoiceItems.RecId;
        this.RefTableId = _custAdvanceInvoiceItems.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PlCustAdvanceInvoiceItems</c> table record based on data in the provided <c>SalesLine</c> table record.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> table record containing data to be copied.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        TaxTable        taxTable;
        boolean         inclTax;
        Tax             tax;

        this.RefRecId = _salesLine.RecId;
        this.RefTableId = _salesLine.TableId;

        inclTax = _salesLine.inclTax();
        tax = Tax::construct();

        this.OriginalLineAmountExclTax = _salesLine.lineAmountExclTax();
        this.OriginalSalesPriceExclTax = _salesLine.SalesQty ? CurrencyExchangeHelper::price(this.OriginalLineAmountExclTax / _salesLine.SalesQty, _salesLine.CurrencyCode) : 0;

        if (inclTax)
        {
            this.OriginalTaxAmount = _salesLine.LineAmount - this.OriginalLineAmountExclTax;
            this.OriginalLineAmountInclTax = _salesLine.LineAmount;
        }
        else
        {
            this.OriginalTaxAmount = tax.taxCalcWithoutSource(_salesLine.TaxGroup,
                                                              _salesLine.TaxItemGroup,
                                                              DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                              _salesLine.CurrencyCode,
                                                              _salesLine.LineAmount,
                                                              TaxModuleType::SalesInvoice);
            this.OriginalLineAmountInclTax = _salesLine.LineAmount + this.OriginalTaxAmount;
        }

        tmpTaxWorkTrans   = tax.tmpTaxWorkTrans();

        select firstonly TaxCode, CalculationDate, TaxBaseAmount
            from tmpTaxWorkTrans
            exists join taxTable
                where taxTable.TaxCode == tmpTaxWorkTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT
                        || taxTable.TaxType_W == TaxType_W::VATReduced
                        || taxTable.TaxType_W == TaxType_W::VATZero);

        this.OriginalTaxCode = CzCustAdvanceInvoiceLine::taxWriteCodeFromTaxCodeAndValue(tmpTaxWorkTrans.TaxCode, tmpTaxWorkTrans.showTaxValue());

        this.LineNum = _salesLine.LineNum;
        this.OriginalItemId = _salesLine.ItemId;
        this.OriginalItemName = _salesLine.itemName();
        this.OriginalQty = _salesLine.SalesQty;
        this.OriginalSalesUnit = _salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditNoteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the items query for the Advance invoice credit note.
    /// </summary>
    /// <param name="_custAdvanceInvoiceTable">
    /// The <c>CzCustAdvanceInvoiceTable</c> table record containing data to be used for query creation.
    /// </param>
    /// <returns>
    /// The query for the Advance invoice credit note.
    /// </returns>
    public static Query createCreditNoteQuery(CzCustAdvanceInvoiceTable _custAdvanceInvoiceTable)
    {
        CzCustAdvanceInvoiceLine    custAdvanceInvoiceLineCreditNote, custAdvanceInvoiceLine;
        CzCustAdvanceInvoiceTable   custAdvanceInvoiceTable;
        Query                       query = new Query();

        if (_custAdvanceInvoiceTable.FreeInvoiceRefRecId
            || _custAdvanceInvoiceTable.SalesId)
        {
            select firstOnly ParentRecId from custAdvanceInvoiceLine
                exists join custAdvanceInvoiceLineCreditNote
                    where custAdvanceInvoiceLineCreditNote.ParentRecId == _custAdvanceInvoiceTable.RecId
                        && custAdvanceInvoiceLine.RecId == custAdvanceInvoiceLineCreditNote.OrigAdvanceInvoiceLineRecId;

            custAdvanceInvoiceTable = CzCustAdvanceInvoiceTable::findRecId(custAdvanceInvoiceLine.ParentRecId);
            if (PlCustAdvanceInvoiceItems::exist(custAdvanceInvoiceTable.RecId))
            {
                query = PlCustAdvanceInvoiceItems::createQuery(custAdvanceInvoiceTable);
            }
            else
            {
                if (_custAdvanceInvoiceTable.SalesId)
                {
                    query.addDataSource(tableNum(SalesLine)).addRange(fieldNum(SalesLine, SalesId)).value(queryValue(_custAdvanceInvoiceTable.SalesId));
                }
                else
                {
                    query.addDataSource(tableNum(CustInvoiceLine)).addRange(fieldNum(CustInvoiceLine, ParentRecId)).value(queryValue(_custAdvanceInvoiceTable.FreeInvoiceRefRecId));
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the items query.
    /// </summary>
    /// <param name="_custAdvanceInvoiceTable">
    /// The <c>CzCustAdvanceInvoiceTable</c> table record containing data to be used for query creation.
    /// </param>
    /// <returns>
    /// The items query.
    /// </returns>
    public static Query createQuery(CzCustAdvanceInvoiceTable _custAdvanceInvoiceTable)
    {
        QueryBuildDataSource        queryBuildDataSource;
        Query                       query = new Query();

        queryBuildDataSource = query.addDataSource(tableNum(PlCustAdvanceInvoiceItems));
        queryBuildDataSource.addOrderByField(fieldNum(PlCustAdvanceInvoiceItems, LineNum));
        queryBuildDataSource.addRange(fieldNum(PlCustAdvanceInvoiceItems, ParentRecId)).value(queryValue(_custAdvanceInvoiceTable.RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for exists the <c>PlCustAdvanceInvoiceItems</c> table records, related to the <c>CzCustAdvanceInvoiceTable</c> table.
    /// </summary>
    /// <param name="_parentRecId">
    /// The RecId of the <c>CzCustAdvanceInvoiceTable</c> table record.
    /// </param>
    /// <returns>
    /// true, if records exists in the <c>PlCustAdvanceInvoiceItems</c> table.
    /// </returns>
    public static boolean exist(RefRecId _parentRecId)
    {
        return (select firstOnly PlCustAdvanceInvoiceItems
            where PlCustAdvanceInvoiceItems.ParentRecId == _parentRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>PlCustAdvanceInvoiceItems</c> table.
    /// </summary>
    /// <param name="_parentRecId">
    /// The RecId of the <c>CzCustAdvanceInvoiceTable</c> table record.
    /// </param>
    /// <param name="_refRecId">
    /// The RecId of the source table record.
    /// </param>
    /// <param name="_refTableId">
    /// The TableId of the source table record.
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The record found in the <c>PlCustAdvanceInvoiceItems</c> table.
    /// </returns>
    public static PlCustAdvanceInvoiceItems find(RefRecId      _parentRecId,
                                                 RefRecId      _refRecId,
                                                 RefTableId    _refTableId,
                                                 boolean       _forUpdate = false)
    {
        PlCustAdvanceInvoiceItems custAdvanceInvoiceItems;

        if (_parentRecId && _refRecId && _refTableId)
        {
            custAdvanceInvoiceItems.selectForUpdate(_forUpdate);

            select firstonly custAdvanceInvoiceItems
                where custAdvanceInvoiceItems.ParentRecId == _parentRecId
                    && custAdvanceInvoiceItems.RefRecId == _refRecId
                    && custAdvanceInvoiceItems.RefTableId == _refTableId;
        }

        return custAdvanceInvoiceItems;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CzCustVendAdvanceInvoices</ConfigurationKey>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4881132</DeveloperDocumentation>
	<Label>@SYP4881131</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>LineNum</TitleField1>
	<TitleField2>OriginalItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ParentRecIdIdx</ClusteredIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalLineAmountInclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalSalesPriceExclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalLineAmountExclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalSalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalLineAmountInclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalSalesPriceExclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalLineAmountExclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalSalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalItemName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalLineAmountExclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalLineAmountInclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalSalesPriceExclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalSalesUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalTaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParentRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CzCustAdvanceInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CzCustAdvanceInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecId</Name>
					<Field>ParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlCustAdvanceInvoiceItems</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PlCustAdvanceInvoiceItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>