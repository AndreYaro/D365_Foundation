<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099Fields</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099Fields extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add1099G</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values in the 1099G forms.
    /// </summary>
    /// <remarks>
    /// Although the Minimum amount is set, the value may change from year to year and the user should make
    /// sure that the amount is correct.
    /// </remarks>
    public void add1099G()
    {
        Tax1099Fields tax1099FieldsIM;
        RecordInsertList ril= new RecordInsertList(tableNum(Tax1099Fields));

        tax1099FieldsIM.setTmp();
        tax1099FieldsIM.clear();

        ttsbegin;

        insert_recordset tax1099FieldsIM(
            Tax1099Box,
            Description,
            Tax1099Amount,
            Tax1099FieldNum,
            Tax1099Type,
            RecVersion)
        select
            Tax1099Box,
            Description,
            Tax1099Amount,
            Tax1099FieldNum,
            Tax1099Type,
            RecVersion
        from this
            where this.Tax1099Type == Tax1099Type::F1099G;

        Tax1099G tax1099G = new Tax1099G();
        tax1099G.updateTax1099Fields(tax1099FieldsIM, ril, false);

        ril.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add1099S</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values in the 1099S forms
    /// </summary>
    /// <remarks>
    /// Although the Minimum amount is set, the value may change from year to year and the user should make
    /// sure that the amount is correct.
    /// </remarks>
    public void add1099S()
    {
        Tax1099Fields tax1099FieldsIM;
        RecordInsertList ril= new RecordInsertList(tableNum(Tax1099Fields));

        tax1099FieldsIM.setTmp();
        tax1099FieldsIM.clear();

        ttsbegin;

        insert_recordset tax1099FieldsIM(
            Tax1099Box,
            Description,
            Tax1099Amount,
            Tax1099FieldNum,
            Tax1099Type,
            RecVersion)
        select
            Tax1099Box,
            Description,
            Tax1099Amount,
            Tax1099FieldNum,
            Tax1099Type,
            RecVersion
        from this
            where this.Tax1099Type == Tax1099Type::F1099S;

        Tax1099S tax1099S = new Tax1099S();
        tax1099S.updateTax1099Fields(tax1099FieldsIM, ril, false);

        ril.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTax1099Fields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates tax1099Field records for DIV, INT, MISC, and OID forms and updates them as appropriate.
    /// </summary>
    /// <param name="_forceUpdate">
    /// Force the update of all fields, ignoring any user changes.
    /// </param>
    /// <returns>
    /// Boolean representing if any fields were changed.
    /// </returns>
    /// <remarks>
    /// _forceUpdate will override any user changes to amounts and should be used with caution.
    /// </remarks>
    boolean createTax1099Fields(boolean _forceUpdate = false)
    {
        Tax1099Fields tax1099FieldsRef;
        Tax1099Fields tax1099FieldsIM;
        RecordInsertList ril= new RecordInsertList(tableNum(Tax1099Fields));
        boolean fieldsModified = false;

        tax1099FieldsIM.setTmp();
        tax1099FieldsIM.clear();

        // Fill in the default values for all forms but allow the user the ability to modify the minimum amount field
        ttsbegin;

        #Define.INT_13('INT-13') /* changed to INT-15 in 2014*/
        #Define.INT_15('INT-15') /* changed to INT-17 in 2014*/
        #Define.OID_07('OID-07') /* Moved to OID-9 in 2013 */
        #Define.OID_10('OID-10') /* Moved to OID-12 in 2013 */
        #Define.OID_11('OID-11') /* Created in 2017 */
		#Define.OID_12('OID-12') /* Moved to OID-13 in 2016 */
		#Define.OID_13('OID-13') /* Moved to OID-14 in 2017 */
		#Define.OID_14('OID-14') /* Created in 2017 */
		
        // Remove fields

        // OID_05 changed from Foreign Tax Paid to Market Discount in 2013-2014
        // OID_10 changed from State Tax Withheld to Bond Premium in 2016-2017
        delete_from tax1099FieldsRef
            where tax1099FieldsRef.Tax1099Box == Tax1099OID::marketDiscount().tax1099Box
            || tax1099FieldsRef.Tax1099Box == Tax1099OID::bondPremium().tax1099Box;
			

        insert_recordset tax1099FieldsIM(
            Tax1099Box,
            Description,
            Tax1099Amount,
            Tax1099FieldNum,
            Tax1099Type,
            RecVersion)
        select
            Tax1099Box,
            Description,
            Tax1099Amount,
            Tax1099FieldNum,
            Tax1099Type,
            RecVersion
        from this;

        // DIV Form Fields
        Tax1099DIV tax1099DIV = new Tax1099DIV();
        fieldsModified += tax1099DIV.updateTax1099Fields(tax1099FieldsIM, ril, _forceUpdate);

        // INT Form Fields
        Tax1099INT tax1099INT = new Tax1099INT();
        fieldsModified += tax1099INT.updateTax1099Fields(tax1099FieldsIM, ril, _forceUpdate);

        // MISC Form Fields
        Tax1099MISC tax1099MISC = new Tax1099MISC();
        fieldsModified += tax1099MISC.updateTax1099Fields(tax1099FieldsIM, ril, _forceUpdate);

        // OID Form Fields
        Tax1099OID tax1099OID = new Tax1099OID();
        fieldsModified += tax1099OID.updateTax1099Fields(tax1099FieldsIM, ril, _forceUpdate);

        // NEC Form Fields
        Tax1099NEC tax1099NEC = new Tax1099NEC();
        fieldsModified += tax1099NEC.updateTax1099Fields(tax1099FieldsIM, ril, _forceUpdate);

        ril.insertDatabase();

        // Remove obsolete records if they exist
        // 2012-2013 year changes:
        select firstonly tax1099FieldsRef
            where tax1099FieldsRef.Tax1099Box == Tax1099OID::acquisitionPremium().tax1099Box ||
                  tax1099FieldsRef.Tax1099Box == #OID_07;

        if (tax1099FieldsRef)
        {
            this.transferRecord(Tax1099OID::acquisitionPremium().tax1099Box, tax1099OID::originalIssueDiscountTreasuryObligations().tax1099Box, Tax1099Type::F1099OID, 'Original issue discount on U.S. Treasury');
            this.transferRecord(#OID_07, Tax1099OID::investmentExpenses().tax1099Box, Tax1099Type::F1099OID, 'Investment expenses');

            fieldsModified = true;
        }

        // 2017-2018 year changes
        select firstonly tax1099FieldsRef
            where tax1099FieldsRef.Tax1099Box == #OID_13;

        if (tax1099FieldsRef)
        {
            this.transferRecord(#OID_13, tax1099OID::stateTaxWithheld().tax1099Box, Tax1099Type::F1099OID, 'State tax withheld');
            fieldsModified = true;
        }

        ttscommit;

        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Function transfers one box field's information to a new box field.
    /// Updates old record (from) with new record information (to) in order to maintain RecID foreign key links
    /// </summary>
    /// <param name="_fromTax1099Box">
    /// The value of the Tax1099 box we are coming from.
    /// </param>
    /// <param name="_toTax1099Box">
    /// The value of the Tax1099 box we are going to and the record that will actually be deleted.
    /// </param>
    /// <param name="_tax1099Type">
    /// The tax1099Type value the boxes must share.
    /// </param>
    /// <param name="_description">
    /// The tax1099FormDescription value the boxes must share
    /// </param>
    /// <remarks>
    /// Both records must be of the same _tax1099Type.
    /// Both records MUST EXIST in Tax1099Fields for updates to happen.
    /// </remarks>
    private void transferRecord(Tax1099Box _fromTax1099Box, Tax1099Box _toTax1099Box, Tax1099Type _tax1099Type, Tax1099FormDescription _description)
    {
        Tax1099Fields tax1099FieldFrom;
        Tax1099Fields tax1099FieldTo;

        ttsbegin;

        select firstonly tax1099FieldFrom
            where tax1099FieldFrom.Tax1099Box == _fromTax1099Box &&
                  tax1099FieldFrom.Tax1099Type == _tax1099Type &&
                  tax1099FieldFrom.Description == _description;

        select firstonly tax1099FieldTo
            where tax1099FieldTo.Tax1099Box == _toTax1099Box &&
                  tax1099FieldTo.Tax1099Type == _tax1099Type &&
                  tax1099FieldFrom.Description == _description;

        // Function was used incorrectly, one or both of the records did not exist, jump out.
        if (tax1099FieldFrom.RecId == 0 || tax1099FieldTo.RecId == 0)
        {
            ttscommit;
            return;
        }

        delete_from this
            where this.Tax1099Box == _toTax1099Box &&
                  this.Tax1099Type == _tax1099Type;

        update_recordset this
            setting Tax1099Box = _toTax1099Box,
                Description = tax1099FieldTo.Description,
                Tax1099Amount = tax1099FieldTo.Tax1099Amount
            where this.Tax1099Box == _fromTax1099Box &&
                  this.Tax1099Type == _tax1099Type;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the specified Tax1099Field record exists and creates or updates it as needed.
    /// </summary>
    /// <param name="_tax1099Fields">
    /// In Memory version of Tax1099Fields table that contains records to check against
    /// </param>
    /// <param name="_recordInsertList">
    /// Record Insert List to add records to to be inserted outside of function
    /// </param>
    /// <param name="_tax1099Box">
    /// The Tax1099Box field of the record in question
    /// </param>
    /// <param name="_tax1099FormDescription">
    /// The Description field of the record in question
    /// </param>
    /// <param name="_tax1099Amount">
    /// The Tax1099Amount field of the record in question
    /// </param>
    /// <param name="_tax1099Type">
    /// The Tax1099Type field of the record in question
    /// </param>
    /// <param name="_forceupdate">
    /// Defaults false. If true, ignores user changes to a record and forces it to the given values
    /// </param>
    /// <returns>
    /// A boolean indicating if any records were updated
    /// </returns>
    /// <remarks>
    /// Function is meant to be called inside a transaction scope and with the first two arguments
    /// set up appropriatly. See <c>createTax1099Fields</c> function for example.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Exception thrown if _tax1099Fields is not an inMemory table or _recordInsertList is not initilized.
    /// </exception>
    private boolean verifyRecord(Tax1099Fields _tax1099Fields,
        RecordInsertList _recordInsertList,
        Tax1099Box _tax1099Box,
        Tax1099FormDescription _tax1099FormDescription,
        Tax1099Amount _tax1099Amount,
        Tax1099Type _tax1099Type,
        boolean _forceupdate = false)
    {
        Tax1099Fields tax1099Fields;
        Tax1099Fields tax1099FieldsRIL;

        if (_tax1099Fields.getTableType() != TableType::InMemory || _recordInsertList == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        select firstonly _tax1099Fields
            where _tax1099Fields.Tax1099Box == _tax1099Box &&
                  _tax1099Fields.Tax1099Type == _tax1099Type;

        if (!_tax1099Fields)
        {
            tax1099FieldsRIL.Tax1099Box = _tax1099Box;
            tax1099FieldsRIL.Description = _tax1099FormDescription;
            tax1099FieldsRIL.Tax1099Amount = _tax1099Amount;
            tax1099FieldsRIL.Tax1099Type = _tax1099Type;

            _recordInsertList.add(tax1099FieldsRIL);
            return true;
        }
        // Preserve user changes to a record even if different than given unless we are forcing the update
        else if (_tax1099Fields.RecVersion == 1 || _forceupdate)
        {
            if (_tax1099Fields.Description != _tax1099FormDescription || _tax1099Fields.Tax1099Amount != _tax1099Amount)
            {
                update_recordset tax1099Fields
                setting
                    Description = _tax1099FormDescription,
                    Tax1099Amount = _tax1099Amount
                 where tax1099Fields.Tax1099Box == _tax1099Box &&
                       tax1099Fields.Tax1099Type == _tax1099Type;

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(Tax1099Box tax1099Box)
    {
        boolean ret = true;

        if (!Tax1099Fields::exist(tax1099Box))
        {
            ret = checkFailed(strFmt(Tax1099Fields::txtNotExist(), tax1099Box));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the specified tax1099Box exists in the table
    /// </summary>
    /// <param name="tax1099Box">
    /// The Box to look for
    /// </param>
    /// <returns>
    /// True if the box exists, otherwise False
    /// </returns>
    public static boolean exist(Tax1099Box tax1099Box)
    {
        return (select firstonly RecId from tax1099Fields
                    where tax1099Fields.Tax1099Box == tax1099Box).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>Tax1099Fields</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>Tax1099Fields</c> table; otherwise, an empty record.
    /// </returns>
    public static Tax1099Fields find(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        Tax1099Fields tax1099Fields;

        tax1099Fields.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            tax1099Fields.concurrencyModel(_concurrencyModel);
        }

        select firstonly tax1099Fields
            where tax1099Fields.RecId == _recId;

        return tax1099Fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTax1099Box</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a Tax1099Fields row by searching on the Box and Type (unique index)
    /// </summary>
    /// <param name="_tax1099Box">
    /// The Tax1099Box to search for
    /// </param>
    /// <param name="_tax1099Type">
    /// The Tax1099Type of the record
    /// </param>
    /// <param name="_forupdate">
    /// If to select for update and change concurrency model
    /// </param>
    /// <param name="_concurrencyModel">
    /// Concurrency model to switch to
    /// </param>
    /// <returns>
    /// Tax1099Fields row buffer
    /// </returns>
    /// <remarks>
    /// To change the concurrency model from Auto _forupdate must be true
    /// </remarks>
    public static Tax1099Fields findByTax1099Box(
        Tax1099Box _tax1099Box,
        Tax1099Type _tax1099Type,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        Tax1099Fields tax1099Fields;

        tax1099Fields.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            tax1099Fields.concurrencyModel(_concurrencyModel);
        }

        select firstonly tax1099Fields
            where tax1099Fields.Tax1099Box == _tax1099Box &&
                  tax1099Fields.Tax1099Type == _tax1099Type;

        return tax1099Fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOldBoxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds any records that use the old Tax1099FieldNum value
    /// </summary>
    /// <returns>
    /// True if any exist, False if not
    /// </returns>
    static boolean findOldBoxes()
    {
        Tax1099Fields tax1099Fields;
        boolean ret = false;

        select firstonly tax1099Fields
            where tax1099Fields.Tax1099FieldNum > 0;

        if (tax1099Fields)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup form for the <c>Tax1099Fields</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control that is defined for the data type of the field.
    /// </param>
    /// <param name="_filterStr">
    /// The current filter String that is applied to the data field.
    /// </param>
    /// <returns>
    /// Returns the records from <c>Tax1099Fields</c> table.
    /// </returns>
    /// <remarks>
    /// The lookup will query the <c>Tax1099Fields</c> table and filter out all 1099-G or 1099-S boxes if
    /// the respective configuration keys are not enabled.
    /// </remarks>
    public static Common lookup(FormControl _formReferenceControl, str _filterStr = "")
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        // Create an instance of SysReferenceTableLookup with the "lookup table" and
        // the current form control.
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(Tax1099Fields), _formReferenceControl);

        Tax1099Fields selectedRecord;
        DictEnum dictEnum = new DictEnum(enumNum(Tax1099Type));

        // Add fields to be shown in the lookup form.
        sysReferenceTableLookup.addLookupfield(fieldNum(Tax1099Fields, Tax1099Box));
        sysReferenceTableLookup.addLookupfield(fieldNum(Tax1099Fields, Description));
        sysReferenceTableLookup.addLookupfield(fieldNum(Tax1099Fields, Tax1099Type));
        sysReferenceTableLookup.addLookupfield(fieldNum(Tax1099Fields, Tax1099Form));

        // Create the QueryBuildDataSource.
        queryBuildDataSource = query.addDataSource(tableNum(Tax1099Fields));

        // Add fields to order the data in the lookup form.
        queryBuildDataSource.addOrderByField(fieldNum(Tax1099Fields, Tax1099Box));

        // Add fields to select the existing data in the lookup form.
        queryBuildDataSource.addSelectionField(fieldNum(Tax1099Fields, Tax1099Type));

        for (int indexValue= 0; indexValue < dictEnum.values(); indexValue++)
        {
            if (dictEnum.index2Value(indexValue) != dictEnum.name2Value(enum2str(Tax1099Type::F1099G))
                && dictEnum.index2Value(indexValue) != dictEnum.name2Value(enum2str(Tax1099Type::F1099S)))
            {
                queryBuildDataSource.addRange(fieldNum(Tax1099Fields,Tax1099Type)).value(dictEnum.index2Name(indexValue));
            }

            else if (isConfigurationkeyEnabled(configurationKeyNum(Tax1099G)))
            {
                queryBuildDataSource.addRange(fieldNum(Tax1099Fields,Tax1099Type)).value(dictEnum.index2Name(indexValue));
            }

            else if (isConfigurationkeyEnabled(configurationKeyNum(Tax1099S)))
            {
                queryBuildDataSource.addRange(fieldNum(Tax1099Fields,Tax1099Type)).value(dictEnum.index2Name(indexValue));
            }
        }

        // Set the query.
        sysReferenceTableLookup.parmQuery(query);

        // Perform the lookup.
        selectedRecord = sysReferenceTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTax1099Box</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup form for the <c>Tax1099Fields</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The form control that is defined for the data type of the field.
    /// </param>
    internal static void lookupTax1099Box(FormControl _formControl)
    {
        // Create an instance of SysReferenceTableLookup with the "lookup table" and
        // the current form control.
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(Tax1099Fields), _formControl);

        // Add fields to be shown in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(Tax1099Fields, Tax1099Box));
        sysTableLookup.addLookupfield(fieldNum(Tax1099Fields, Description));
        sysTableLookup.addLookupfield(fieldNum(Tax1099Fields, Tax1099Type));
        sysTableLookup.addLookupfield(fieldNum(Tax1099Fields, Tax1099Form));

        // Create the QueryBuildDataSource.
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(Tax1099Fields));

        // Add fields to order the data in the lookup form.
        queryBuildDataSource.addOrderByField(fieldNum(Tax1099Fields, Tax1099Box));

        // Add fields to select the existing data in the lookup form.
        queryBuildDataSource.addSelectionField(fieldNum(Tax1099Fields, Tax1099Type));

        DictEnum dictEnum = new DictEnum(enumNum(Tax1099Type));
        for (int indexValue= 0; indexValue < dictEnum.values(); indexValue++)
        {
            if (Tax1099Fields::shouldIncludeTax1099TypeForSelection(dictEnum.index2Value(indexValue)))
            {
                queryBuildDataSource.addRange(fieldNum(Tax1099Fields,Tax1099Type)).value(dictEnum.index2Name(indexValue));
            }
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIncludeTax1099TypeForSelection</Name>
				<Source><![CDATA[
    private static boolean shouldIncludeTax1099TypeForSelection(Tax1099Type _tax1099TypeValue)
    {
        boolean shouldIncludeSelection = true;

        if (_tax1099TypeValue == Tax1099Type::F1099G || _tax1099TypeValue == Tax1099Type::F1099S)
        {
            shouldIncludeSelection  = false;
        }

        return shouldIncludeSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor for label
    /// </summary>
    /// <returns>
    /// "Tax 1099 code does not exist."
    /// </returns>
    static str txtNotExist()
    {
        return "@SYS84759";
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeScriptTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies existing Tax1099Fields records to reflect yearly box changes
    /// </summary>
    /// <remarks>
    /// If there are field changes year to year the upgrade scripts will call here
    /// and this needs to be updated to reflect that. Doing updates to ensure we don't
    /// break <c>RecID</c> links. If you modify this function you should also check
    /// <c>ReleaseUpdateDB60_Vend.updateTax1099Fields</c>,
    /// <c>ReleaseUpdateDB60_Vend.updateTax1099FieldsUpdate</c>, and
    /// <c>ReleaseUpdateDB62_Vend.updateTax1099FieldsUpdate</c>
    /// </remarks>
    public static void upgradeScriptTransfer()
    {
        Tax1099Fields tax1099Fields;
        Tax1099SoftwareVendParameters tax1099SoftwareVendParameters;

        #define.OID_08_description('Original issue discount on U.S. Treasury')
        #define.OID_09_description('Investment expenses')
        #define.OID_12_description('State tax withheld')
        #define.INT_15_description('State tax withheld')
        #define.OID_05_Old_description('Foreign tax paid')
        #define.OID_07('OID-07')
        #define.OID_10('OID-10')
        #define.INT_13('INT-13')
        #define.INT_15('INT-15')

        tax1099Fields.skipDataMethods(true);

        // 2013
        update_recordset tax1099Fields
            setting Tax1099Box = Tax1099OID::originalIssueDiscountTreasuryObligations().tax1099Box
            where tax1099Fields.Tax1099Box == Tax1099OID::acquisitionPremium().tax1099Box
                && tax1099Fields.Tax1099Type == Tax1099Type::F1099OID
                && tax1099Fields.Description == #OID_08_description;

        update_recordset tax1099Fields
            setting Tax1099Box = Tax1099OID::investmentExpenses().tax1099Box
            where tax1099Fields.Tax1099Box == #OID_07
                && tax1099Fields.Tax1099Type == Tax1099Type::F1099OID
                && tax1099Fields.Description == #OID_09_description;

        update_recordset tax1099Fields
            setting Tax1099Box = Tax1099OID::stateTaxWithheld().tax1099Box
            where tax1099Fields.Tax1099Box == #OID_10
                && tax1099Fields.Tax1099Type == Tax1099Type::F1099OID
                && tax1099Fields.Tax1099Type == Tax1099Type::F1099OID
                && tax1099Fields.Description == #OID_12_description;

        // 2014
        // OID_5 still exists, but is a different box now
        delete_from tax1099Fields
            where tax1099Fields.Tax1099Box == Tax1099OID::marketDiscount().tax1099Box
                && tax1099Fields.Description == #OID_05_Old_description;

        update_recordset tax1099Fields
            setting Tax1099Box = #INT_15
            where tax1099Fields.Tax1099Box == #INT_15
                && tax1099Fields.Tax1099Type == Tax1099Type::F1099INT
                && tax1099Fields.Description == #INT_15_description;

        // Update Microsoft Contact info if out of date
        update_recordset tax1099SoftwareVendParameters
            setting ContactEmail = 'dynsolve@microsoft.com'
            where tax1099SoftwareVendParameters.ContactEmail == 'irs1099@microsoft.com';
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean isTax1099AmountChanged = this.Tax1099Amount != this.orig().Tax1099Amount;

        ttsbegin;

        super();

        if (isTax1099AmountChanged)
        {
            VendSettlementTax1099 vendSettlementTax1099;

            // 
            // Update IRSReportable field on VendSettlementTax1099 records to reflect new minimum value.
            // This is done here because updateIRSReportable on the VendSettlementTax1099 table does its own 
            // find for the Tax1099Field. If this were done in the modifiedField method, that Tax1099Fields record 
            // would not yet have been updated and IRSReportable would be set incorrectly.
            //
            while select vendSettlementTax1099
                    where vendSettlementTax1099.Tax1099Fields == this.RecId
            {
                vendSettlementTax1099.updateIRSReportable();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTax1099FieldsByDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified <c>Tax1099Fields</c> record
    /// </summary>
    /// <param name = "_description">The description of form to find the return type.</param>
    /// <param name = "_tax1099Type">The type of form to find the return type.</param>
    /// <returns>A <c>Tax1099Fields</c> record matching the given description and tax 1099 type.</returns>
    internal static Tax1099Fields findTax1099FieldsByDescription(Tax1099FormDescription _description, Tax1099Type _tax1099Type)
    {
        Tax1099Fields tax1099Fields;

        select firstonly tax1099Fields
            where tax1099Fields.Tax1099Type == _tax1099Type
                && tax1099Fields.Description == _description;

        return tax1099Fields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>US</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123465</DeveloperDocumentation>
	<FormRef>Tax1099Fields</FormRef>
	<Label>@SYS24226</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Description</TitleField1>
	<TitleField2>Tax1099Box</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>Tax1099BoxIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Form</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Box</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099FieldNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Box</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Box</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Box</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099FieldNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Form</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099FormDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
			<Label>@SYS23897</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099Box</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Box</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Tax1099FieldNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099FieldNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099Form</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Form</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099Type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>Tax1099Type</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Tax1099BoxIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099Box</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FormIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Form</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>