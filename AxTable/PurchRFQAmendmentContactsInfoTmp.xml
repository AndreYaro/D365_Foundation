<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQAmendmentContactsInfoTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQAmendmentContactsInfoTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeRFQContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the temporary table with the vendors' contact information.
    /// </summary>
    /// <param name="_purchRFQCaseId">
    /// The case ID of the request for quotation.
    /// </param>
    /// <returns>
    /// A record of the <c>PurchRFQAmendmentContactsInfoTmp</c> table.
    /// </returns>
    public static PurchRFQAmendmentContactsInfoTmp initializeRFQContacts(PurchRFQCaseId _purchRFQCaseId)
    {
        PurchRFQAmendmentContactsInfoTmp purchRFQAmendmentContactsInfoTmp;
        PurchRFQTable                    purchRFQTable;
        PurchRFQVendLink                 purchRFQVendLink;
        DirPartyTable                    dirPartyTable;
        VendTable                        vendTable;
        VendRFQJour                      rfqJournal;
        ContactPerson                    rfqCaseVendorContactPerson;
        ContactPerson                    rfqReplyContactPerson;
        ContactPerson                    rfqJournalContactPerson;
        VendAccount                      vendAccount;
        Email                            rfqReplyEmail;
        Email                            rfqCaseEmail;
        Email                            rfqJournalEmail;
        Name                             rfqCaseContactPersonName;
        Name                             rfqReplyContactPersonName;
        Name                             rfqJournalContactPersonName;
        Name                             finalContactPersonName;
        Set                              insertedRecords = new Set(Types::Container);

        while select Email from purchRFQVendLink
            where purchRFQVendLink.RFQCaseId == _purchRFQCaseId
                join AccountNum from vendTable
                    where vendTable.AccountNum == purchRFQVendLink.VendAccount
                    join dirPartyTable
                        where dirPartyTable.RecId == vendTable.Party
                    outer join ContactPerson, Email from purchRFQTable
                        where purchRFQTable.RFQCaseId == _purchRFQCaseId
                           && purchRFQTable.VendAccount == vendTable.AccountNum
                    outer join ContactPerson, Email from rfqJournal
                        where rfqJournal.RFQCaseId == _purchRFQCaseId
                           && rfqJournal.VendAccount == vendTable.AccountNum
                 outer join rfqCaseVendorContactPerson
                    where rfqCaseVendorContactPerson.ContactPersonId == purchRFQVendLink.ContactPersonId
        {
            ttsbegin;

            // Initialize contact and email from RFQ case
            rfqCaseEmail                = purchRFQVendLink.Email ? purchRFQVendLink.Email
                                        : rfqCaseVendorContactPerson ? PurchRFQAmendmentContactsInfoTmp::getPrimaryEmailForContact(rfqCaseVendorContactPerson.Party)
                                        : "";
            rfqCaseContactPersonName    = rfqCaseVendorContactPerson ? DirPartyTable::getName(rfqCaseVendorContactPerson.Party)
                                        : "";

            // Initialize contact and email from the RFQ reply
            rfqReplyContactPerson       = ContactPerson::find(purchRFQTable.ContactPerson);
            rfqReplyContactPersonName   = rfqReplyContactPerson ? DirPartyTable::getName(rfqReplyContactPerson.Party)
                                        : "";
            rfqReplyEmail               = purchRFQTable.Email ? purchRFQTable.Email
                                        : rfqReplyContactPerson ? PurchRFQAmendmentContactsInfoTmp::getPrimaryEmailForContact(rfqReplyContactPerson.Party)
                                        : "";

            // Initialize contact and email from the RFQ journal
            rfqJournalContactPerson     = ContactPerson::find(rfqJournal.ContactPerson);
            rfqJournalContactPersonName = rfqJournalContactPerson ? DirPartyTable::getName(rfqJournalContactPerson.Party)
                                        : "";
            rfqJournalEmail             = rfqJournal.Email ? rfqJournal.Email
                                        : rfqJournalContactPerson ? PurchRFQAmendmentContactsInfoTmp::getPrimaryEmailForContact(rfqJournalContactPerson.Party)
                                        : "";

            // Find the ultimate contact person
            finalContactPersonName      = rfqCaseContactPersonName ? rfqCaseContactPersonName
                                        : PurchRFQAmendmentContactsInfoTmp::getContactPersonNameFromRFQReply(rfqCaseEmail, rfqReplyEmail, rfqReplyContactPersonName);

            // Create the record based on the RFQ case
            purchRFQAmendmentContactsInfoTmp.clear();
            purchRFQAmendmentContactsInfoTmp.VendAccount = vendTable.AccountNum;
            purchRFQAmendmentContactsInfoTmp.VendorName  = dirPartyTable.Name;
            purchRFQAmendmentContactsInfoTmp.Email       = rfqCaseEmail;
            purchRFQAmendmentContactsInfoTmp.ContactName = finalContactPersonName;

            purchRFQAmendmentContactsInfoTmp.validateAndInsertRecord(insertedRecords);

            // Consider the contact and email from the RFQ reply and if different create a new entry
            if ((rfqReplyEmail != rfqCaseEmail)
                    && (rfqReplyEmail || rfqReplyContactPersonName)) // we are not interested in a record with no email and no contact
            {
                purchRFQAmendmentContactsInfoTmp.ContactName = rfqReplyContactPersonName;
                purchRFQAmendmentContactsInfoTmp.Email = rfqReplyEmail;

                if (rfqCaseEmail)
                {
                    purchRFQAmendmentContactsInfoTmp.validateAndInsertRecord(insertedRecords);
                }
                else
                {
                    // if there is no email on the RFQ case but there is one on the reply - just update the record
                    if (insertedRecords.add([purchRFQAmendmentContactsInfoTmp.VendAccount, purchRFQAmendmentContactsInfoTmp.ContactName, purchRFQAmendmentContactsInfoTmp.Email]))
                    {
                        purchRFQAmendmentContactsInfoTmp.update();
                    }
                }
            }

            // Consider the contact and email from the RFQ journal
            if ((rfqJournalEmail != rfqCaseEmail) && (rfqJournalEmail != rfqReplyEmail)
                    && (rfqJournalEmail || rfqJournalContactPersonName)) // we are not interested in a record with no email and no contact
            {
                purchRFQAmendmentContactsInfoTmp.ContactName = rfqJournalContactPersonName;
                purchRFQAmendmentContactsInfoTmp.Email = rfqJournalEmail;
                purchRFQAmendmentContactsInfoTmp.validateAndInsertRecord(insertedRecords);
            }
            ttscommit;
        }

        return purchRFQAmendmentContactsInfoTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndInsertRecord</Name>
				<Source><![CDATA[
    private void validateAndInsertRecord(Set _insertedRecords)
    {
        if (_insertedRecords.add([this.VendAccount, this.ContactName, this.Email]))
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactPersonNameFromRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a name of a contact person from RFQ reply if one exists and if emails on RFQ case and reply were the same
    /// </summary>
    /// <param name = "_rfqCaseEmail">email of the RFQ case contact</param>
    /// <param name = "_rfqReplyEmail">email of the RFQ reply contact</param>
    /// <param name = "_rfqReplyContactPersonName">name of the RFQ reply contact</param>
    /// <returns>Name of the RFQ reply contact person or empty</returns>
    /// <remarks>If emails on the RFQ case and reply are the same but there is no contact person on the RFQ case then we want to take the contact from the RFQ reply</remarks>
    private static ContactPersonName getContactPersonNameFromRFQReply(Email _rfqCaseEmail, Email _rfqReplyEmail, Name _rfqReplyContactPersonName)
    {
        Name contactName;
        if ((_rfqReplyEmail == _rfqCaseEmail) && _rfqReplyContactPersonName)
        {
            contactName = _rfqReplyContactPersonName;
        }
        return contactName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryEmailForContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a primary email for the contact person
    /// </summary>
    /// <param name = "_contactParty">RecId of the contact person</param>
    /// <returns>Email associated with the contact person</returns>
    public static Email getPrimaryEmailForContact(DirPersonRecId _contactParty)
    {
        DirPartyPrimaryContactInfoView dirPartyPrimaryContactInfoViewLocal;

        select Email from dirPartyPrimaryContactInfoViewLocal
                        where dirPartyPrimaryContactInfoViewLocal.Party == _contactParty;

        return dirPartyPrimaryContactInfoViewLocal.Email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorsEmails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieving a map of vendor accounts with relevant email values
    /// </summary>
    public Map getVendorsEmails()
    {
        Map vendorEmailsMap = new Map(Types::String, Types::String); // VendorAccount, Emails
        str vendorEmails;

        while select VendAccount, Email from this
        {
            if (SysEmailDistributor::validateEmail(this.Email))
            {
                vendorEmails = this.Email + ";";
                if (vendorEmailsMap.exists(this.VendAccount))
                {
                    vendorEmails += vendorEmailsMap.lookup(this.VendAccount);
                    vendorEmailsMap.remove(this.VendAccount);
                }
                vendorEmailsMap.insert(this.VendAccount, vendorEmails);
            }
        }
        return vendorEmailsMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SCM:RequestForQuotationVendorContacts</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS100792</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>