<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemGroupForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemGroupForm extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ledgerDimensionDescriptionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the ledger dimension description for a <c>InventAccountType</c>.
    /// </summary>
    /// <param name = "_inventAccountType">The <c>InventAccountType</c> to get describe.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    delegate void ledgerDimensionDescriptionDelegate(InventAccountType _inventAccountType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionDescription</Name>
				<Source><![CDATA[
    display InventItemGroupLedgerDimensionDesc ledgerDimensionDescription()
    {
        switch (this.InventAccountType)
        {
            case InventAccountType::InventStdProfit:
                return enum2str(InventAccountTypeInvent::StdProfit);
            case InventAccountType::InventStdLoss:
                return enum2str(InventAccountTypeInvent::StdLoss);
            case InventAccountType::InventIssue:
                return enum2str(InventAccountTypeInvent::Issue);
            case InventAccountType::InventIssueFixedAsset:
                return enum2str(InventAccountTypeInvent::IssueFixedAsset);
            case InventAccountType::InventLoss:
                return enum2str(InventAccountTypeInvent::Loss);
            case InventAccountType::InventReceipt:
                return enum2str(InventAccountTypeInvent::Receipt);
            case InventAccountType::InventProfit:
                return enum2str(InventAccountTypeInvent::Profit);
            case InventAccountType::PdsCWLoss:
                return enum2str(InventAccountTypeInvent::PdsCWLoss);
            case InventAccountType::PdsCWProfit:
                return enum2str(InventAccountTypeInvent::PdsCWProfit);
            case InventAccountType::InventInterUnitPayable:
                return enum2str(InventAccountTypeInvent::InterUnitPayable);
            case InventAccountType::InventInterUnitReceivable:
                return enum2str(InventAccountTypeInvent::InterUnitReceivable);
            case InventAccountType::InventMovingAverageCostRevaluation:
                return enum2str(InventAccountTypeInvent::MovingAverageCostRevaluation);
            case InventAccountType::InventMovingAveragePriceDifference:
                return enum2str(InventAccountTypeInvent::MovingAveragePriceDifference);

            case InventAccountType::InventRoundingLoss_RU:
                return enum2str(InventAccountTypeInvent::RoundingLoss_RU);
            case InventAccountType::InventRoundingProfit_RU:
                return enum2str(InventAccountTypeInvent::RoundingProfit_RU);

            case InventAccountType::ProdPicklist:
                return enum2str(InventAccountTypeProd::Picklist);
            case InventAccountType::ProdPicklistOffsetAccount:
                return enum2str(InventAccountTypeProd::PicklistOffsetAccount);
            case InventAccountType::ProdReportFinished:
                return enum2str(InventAccountTypeProd::ReportFinished);
            case InventAccountType::ProdReportFinishedOffsetAccount:
                return enum2str(InventAccountTypeProd::ReportFinishedOffsetAccount);
            case InventAccountType::ProdIssue:
                return enum2str(InventAccountTypeProd::Issue);
            case InventAccountType::ProdIssueOffsetAccount:
                return enum2str(InventAccountTypeProd::IssueOffsetAccount);
            case InventAccountType::ProdReceipt:
                return enum2str(InventAccountTypeProd::Receipt);
            case InventAccountType::ProdReceiptOffsetAccount:
                return enum2str(InventAccountTypeProd::ReceiptOffsetAccount);
            case InventAccountType::ProdLeanWIPServiceReceipt:
                return enum2str(InventAccountTypeProd::LeanWIPServiceReceipt);
            case InventAccountType::ProdLeanWIPServiceClearing:
                return enum2str(InventAccountTypeProd::LeanWIPServiceClearing);

            case InventAccountType::PurchPackingSlip:
                return enum2str(InventAccountTypePurch::PackingSlip);
            case InventAccountType::PurchPackingSlipOffsetAccount:
                return enum2str(InventAccountTypePurch::PackingSlipOffsetAccount);
            case InventAccountType::PurchReceipt:
                return enum2str(InventAccountTypePurch::Receipt);
            case InventAccountType::PurchReceiptFixedAsset:
                return enum2str(InventAccountTypePurch::ReceiptFixedAsset);
            case InventAccountType::PurchConsump:
                return enum2str(InventAccountTypePurch::Consumption);
            case InventAccountType::PurchDisc:
                return enum2str(InventAccountTypePurch::Disc);
            case InventAccountType::PurchStdProfit:
                return enum2str(InventAccountTypePurch::StdProfit);
            case InventAccountType::PurchStdLoss:
                return enum2str(InventAccountTypePurch::StdLoss);
            case InventAccountType::PurchStdOffsetAccount:
                return enum2str(InventAccountTypePurch::StdOffsetAccount);
            case InventAccountType::PurchCharge:
                return enum2str(InventAccountTypePurch::Charge);
            case InventAccountType::PurchStockVariation:
                return enum2str(InventAccountTypePurch::StockVariation);
            case InventAccountType::PurchPackingSlipPurchaseOffsetAccount:
                return enum2str(InventAccountTypePurch::PackingSlipPurchaseOffsetAccount);
            case InventAccountType::PurchPackingSlipTax:
                return enum2str(InventAccountTypePurch::PackingSlipTax);
            case InventAccountType::PurchExpense:
                return enum2str(InventAccountTypePurch::Expense);
            case InventAccountType::PurchAdvance:
                return enum2str(InventAccountTypePurch::PurchAdvance);

            case InventAccountType::SalesPackingSlip:
                return enum2str(InventAccountTypeSales::PackingSlip);
            case InventAccountType::SalesPackingSlipOffsetAccount:
                return enum2str(InventAccountTypeSales::PackingSlipOffsetAccount);
            case InventAccountType::SalesIssue:
                return enum2str(InventAccountTypeSales::Issue);
            case InventAccountType::SalesConsump:
                return enum2str(InventAccountTypeSales::Consumption);
            case InventAccountType::SalesRevenue:
                return enum2str(InventAccountTypeSales::Revenue);
            case InventAccountType::SalesPckSlipRevenue:
                return enum2str(InventAccountTypeSales::PckSlipRevenue);
            case InventAccountType::SalesPckSlipRevenueOffsetAccount:
                return enum2str(InventAccountTypeSales::PckSlipRevenueOffsetAccount);
            case InventAccountType::SalesDisc:
                return enum2str(InventAccountTypeSales::Disc);
            case InventAccountType::SalesCommission:
                return enum2str(InventAccountTypeSales::Commission);
            case InventAccountType::SalesCommissionOffsetAccount:
                return enum2str(InventAccountTypeSales::CommissionOffsetAccount);
            case InventAccountType::SalesPackingSlipTax:
                return enum2str(InventAccountTypeSales::PackingSlipTax);
            case InventAccountType::SalesAdvance:
                return enum2str(InventAccountTypeSales::SalesAdvance);

            case InventAccountType::SalesGoodsInRoute_RU:
                return enum2str(InventAccountTypeSales::GoodsInRoute_RU);
            case InventAccountType::SalesGoodsInRouteOffsetAccount_RU:
                return enum2str(InventAccountTypeSales::GoodsInRouteOffsetAccount_RU);

            case InventAccountType::TransferGoodsTransit_IN:
                return enum2str(InventAccountTypeTransfer_IN::GoodsInTransit);
            case InventAccountType::TransferIssue_IN:
                return enum2str(InventAccountTypeTransfer_IN::Issue);
            case InventAccountType::TransferReceipt_IN:
                return enum2str(InventAccountTypeTransfer_IN::Receipt);
            case InventAccountType::TransferScrap_IN:
                return enum2str(InventAccountTypeTransfer_IN::Scrap);
            case InventAccountType::TransferLoss_IN:
                return enum2str(InventAccountTypeTransfer_IN::UnrealizedLoss);
            case InventAccountType::TransferProfit_IN:
                return enum2str(InventAccountTypeTransfer_IN::UnrealizedProfit);
            case InventAccountType::TransferInterim_IN:
                return enum2str(InventAccountTypeTransfer_IN::TransferInterim);
            case InventAccountType::InventStdCostChangeVariance:
                return enum2str(InventAccountTypeStdCostVariance::InventCostChangeVariance);
            case InventAccountType::InventStdCostRevaluation:
                return enum2str(InventAccountTypeStdCostVariance::InventCostRevaluation);
            case InventAccountType::ProdStdCostProductionVariance:
                return enum2str(InventAccountTypeStdCostVariance::ProdProductionPriceVariance);
            case InventAccountType::ProdStdCostQuantityVariance:
                return enum2str(InventAccountTypeStdCostVariance::ProdQuantityVariance);
            case InventAccountType::ProdStdCostSubstitutionVariance:
                return enum2str(InventAccountTypeStdCostVariance::ProdSubstitutionVariance);
            case InventAccountType::ProdStdCostLotSizeVariance:
                return enum2str(InventAccountTypeStdCostVariance::ProdLotSizeVariance);
            case InventAccountType::PurchStdCostPurchasePriceVariance:
                return enum2str(InventAccountTypeStdCostVariance::PurchPurchasePriceVariance);
            case InventAccountType::InventStdCostRoundingVariance:
                return enum2str(InventAccountTypeStdCostVariance::InventRoundingVariance);
            case InventAccountType::SalesCancel:
                return enum2str(InventAccountTypeSales::Cancel);
            case InventAccountType::SalesReturn:
                return enum2str(InventAccountTypeSales::Return);
            case InventAccountType::SalesCreditNote_IT:
                return enum2str(InventAccountTypeSales::CreditNote_IT);
            case InventAccountType::SalesForFree_IT:
                return enum2str(InventAccountTypeSales::SalesForFree_IT);

            default:
                var eventHandlerResult = EventHandlerResult::newSingleResponse();
                this.ledgerDimensionDescriptionDelegate(this.InventAccountType, eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    return eventHandlerResult.result();
                }

                throw error(strFmt("@SYS12580", this.InventAccountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        InventItemGroupForm thisOrig = this.orig();
        super(_fieldId);

        if (_fieldId == fieldNum(InventItemGroupForm, LedgerDimension) &&
            thisOrig.LedgerDimension != this.LedgerDimension)
        {
            InventPosting modifyParameter = this.buildInventPostingModifyTransParameter();

            InventPosting::modifyTransFromParameter(modifyParameter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventPostingModifyTransParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an invent posting modification parameter.
    /// </summary>
    /// <returns>An invent posting modification parameter.</returns>
    protected InventPosting buildInventPostingModifyTransParameter()
    {
        InventPosting modifyTransParameter;

        modifyTransParameter.InventAccountType = this.InventAccountType;
        modifyTransParameter.ItemCode = InventPostingItemCode::GroupId;
        modifyTransParameter.ItemRelation = this.ItemGroupId;
        modifyTransParameter.LedgerDimension = this.LedgerDimension;
        modifyTransParameter.CustVendCode = TableGroupAll::All;
        modifyTransParameter.CostCode = TableGroupAll::All;
        modifyTransParameter.InventProfileTypeAll_RU = InventProfileTypeAll_RU::All;
        modifyTransParameter.InventProfileType_RU = InventProfileType_RU::NotSpecified;
        modifyTransParameter.SiteCode_CN = InventSiteCode_CN::All;
        

        return modifyTransParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupForAccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountType</c> to <c>ItemGroupLedgerDimensionGroup</c>.
    /// </summary>
    /// <param name = "_inventAccountType">The <c>InventAccountType</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void getGroupForAccountTypeDelegate(InventAccountType _inventAccountType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupForAccountType</Name>
				<Source><![CDATA[
    public static ItemGroupLedgerDimensionGroup getGroupForAccountType(InventAccountType _inventAccountType)
    {
        switch (_inventAccountType)
        {
            case InventAccountType::SalesCancel:
            case InventAccountType::SalesCommission:
            case InventAccountType::SalesCommissionOffsetAccount:
            case InventAccountType::SalesConsump:
            case InventAccountType::SalesDisc:
            case InventAccountType::SalesGoodsInRoute_RU:
            case InventAccountType::SalesGoodsInRouteOffsetAccount_RU:
            case InventAccountType::SalesIssue:
            case InventAccountType::SalesPackingSlip:
            case InventAccountType::SalesPackingSlipOffsetAccount:
            case InventAccountType::SalesPackingSlipTax:
            case InventAccountType::SalesPckSlipRevenue:
            case InventAccountType::SalesPckSlipRevenueOffsetAccount:
            case InventAccountType::SalesReturn:
            case InventAccountType::SalesRevenue:
            case InventAccountType::SalesAdvance:
                return ItemGroupLedgerDimensionGroup::Sales;

            case InventAccountType::PurchAdvance:
            case InventAccountType::PurchCharge:
            case InventAccountType::PurchConsump:
            case InventAccountType::PurchDisc:
            case InventAccountType::PurchExpense:
            case InventAccountType::PurchPackingSlip:
            case InventAccountType::PurchPackingSlipOffsetAccount:
            case InventAccountType::PurchPackingSlipPurchaseOffsetAccount:
            case InventAccountType::PurchPackingSlipTax:
            case InventAccountType::PurchReceipt:
            case InventAccountType::PurchReceiptFixedAsset:
            case InventAccountType::PurchStdCostPurchasePriceVariance:
            case InventAccountType::PurchStdLoss:
            case InventAccountType::PurchStdOffsetAccount:
            case InventAccountType::PurchStdProfit:
            case InventAccountType::PurchStockVariation:
                return ItemGroupLedgerDimensionGroup::Purchase;

            case InventAccountType::InventInterUnitPayable:
            case InventAccountType::InventInterUnitReceivable:
            case InventAccountType::InventIssue:
            case InventAccountType::InventIssueFixedAsset:
            case InventAccountType::InventLoss:
            case InventAccountType::InventMovingAverageCostRevaluation:
            case InventAccountType::InventMovingAveragePriceDifference:
            case InventAccountType::InventProfit:
            case InventAccountType::InventReceipt:
            case InventAccountType::InventRoundingLoss_RU:
            case InventAccountType::InventRoundingProfit_RU:
            case InventAccountType::InventStdCostChangeVariance:
            case InventAccountType::InventStdCostRevaluation:
            case InventAccountType::InventStdCostRoundingVariance:
            case InventAccountType::InventStdLoss:
            case InventAccountType::InventStdProfit:
            case InventAccountType::PdsCWLoss:
            case InventAccountType::PdsCWProfit:
            // <GIN>
            case InventAccountType::TransferGoodsTransit_IN:
            case InventAccountType::TransferInterim_IN:
            case InventAccountType::TransferIssue_IN:
            case InventAccountType::TransferLoss_IN:
            case InventAccountType::TransferProfit_IN:
            case InventAccountType::TransferReceipt_IN:
            case InventAccountType::TransferScrap_IN:
            // </GIN>
                return ItemGroupLedgerDimensionGroup::Inventory;

            case InventAccountType::ProdIssue:
            case InventAccountType::ProdIssueOffsetAccount:
            case InventAccountType::ProdLeanWIPServiceClearing:
            case InventAccountType::ProdLeanWIPServiceReceipt:
            case InventAccountType::ProdPicklist:
            case InventAccountType::ProdPicklistOffsetAccount:
            case InventAccountType::ProdReceipt:
            case InventAccountType::ProdReceiptOffsetAccount:
            case InventAccountType::ProdReportFinished:
            case InventAccountType::ProdReportFinishedOffsetAccount:
            case InventAccountType::ProdStdCostLotSizeVariance:
            case InventAccountType::ProdStdCostProductionVariance:
            case InventAccountType::ProdStdCostQuantityVariance:
            case InventAccountType::ProdStdCostSubstitutionVariance:
                return ItemGroupLedgerDimensionGroup::Production;
            case InventAccountType::SalesCreditNote_IT:
            case InventAccountType::SalesForFree_IT:
                return ItemGroupLedgerDimensionGroup::Sales;
        }

        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventItemGroupForm::getGroupForAccountTypeDelegate(_inventAccountType, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }

        throw error(strFmt("@SYS22828", funcName()) + strFmt("@SCM:InventAccountTypeShouldInGroup", enum2str(_inventAccountType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDataForAccountType</Name>
				<Source><![CDATA[
    public static void syncDataForAccountType(ItemGroupId _itemGroupId, InventAccountType _inventAccountType)
    {
        InventItemGroupForm             inventItemGroupForm;
        LedgerDimensionDefaultAccount   ldda;

        ttsbegin;

        ldda = InventPosting::itemLedgerDimensionFromParameter(InventItemGroupForm::buildItemLedgerDimensionParameter(_inventAccountType, _itemGroupId));

        select forupdate * from inventItemGroupForm
            where   inventItemGroupForm.ItemGroupId == _itemGroupId &&
                    inventItemGroupForm.InventAccountType == _inventAccountType;

        if (inventItemGroupForm.RecId)
        {
            if (inventItemGroupForm.LedgerDimension != ldda)
            {
                inventItemGroupForm.LedgerDimension = ldda;
                inventItemGroupForm.update();
            }
        }
        else
        {
            inventItemGroupForm.ItemGroupId = _itemGroupId;
            inventItemGroupForm.InventAccountType = _inventAccountType;
            inventItemGroupForm.LedgerDimensionGroup = InventItemGroupForm::getGroupForAccountType(_inventAccountType);
            inventItemGroupForm.LedgerDimension = ldda;
            inventItemGroupForm.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name = "_itemGroupId">Item group Id.</param>
    /// <returns>The built parameter instance.</returns>
    protected static InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        ItemGroupId         _itemGroupId)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            '',
            _itemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDataForItemGroupId</Name>
				<Source><![CDATA[
    public static void syncDataForItemGroupId(ItemGroupId _itemGroupId)
    {
        DictEnum dictEnum = DictEnum::newFromName(enumStr(InventAccountType));
        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            InventAccountType value = enum.current();

            if (dictEnum.isValueEnabled(value))
            {
                InventItemGroupForm::syncDataForAccountType(_itemGroupId, value);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS320236</DeveloperDocumentation>
	<FormRef>InventItemGroup</FormRef>
	<Label>@SYS3970</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ItemGroupId</TitleField1>
	<TitleField2>InventAccountType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>LedgerDimension</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerDimension</Name>
			<Label>@SYS139233</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimensionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventAccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>InventAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerDimensionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>ItemGroupLedgerDimensionGroup</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerDimension</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventAccountType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemGroup_InventItemGroupForm</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_InventItemGroupTmp</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>