<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetRevisionLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetRevisionLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
/// Inserts records from the <c>ProjBudgetRevisionLine</c> and <c>ProjBudgetRevision</c> tables into the <c>ProjBudgetLineDetail</c> table.
/// </summary>
public void createBudgetLineDetails()
{
    ProjBudgetRevisionLine projBudgetrevisionline1;
    ProjBudgetRevision projBudgetRevision1;

    ProjBudgetLineDetail    projBudgetLineDetail, projBudgetLineDetailRevision;
    RefRecId    projBudgetRevisionLineRecId;

    if (this.ProjBudgetLine)
    {
        projBudgetRevisionLineRecId = this.RecId;

         select firstonly RecId from projBudgetrevisionline1 join RecId from projBudgetRevision1 order by projBudgetRevision1.RevisionDate desc
            where projBudgetrevisionline1.ProjBudgetLine == this.ProjBudgetLine &&
            projBudgetrevisionline1.ProjBudgetRevision == projBudgetRevision1.RecId &&
            projBudgetRevision1.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Approved;

        insert_recordset projBudgetLineDetailRevision(CostPrice, Resource, ResourceCategory, InventDimId, ItemId, Quantity, SalesCategory, SalesPrice, SalesUnitId, ProjBudgetLine, ProjBudgetRevisionLine)
        select CostPrice, Resource, ResourceCategory, InventDimId, ItemId, Quantity, SalesCategory, SalesPrice, SalesUnitId, ProjBudgetLine, projBudgetRevisionLineRecId
        from projBudgetLineDetail
        where   projBudgetLineDetail.ProjBudgetLine == this.ProjBudgetLine &&
                projBudgetLineDetail.ProjBudgetRevisionLine == projBudgetrevisionline1.RecId;
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
{
    ProjBudgetRevisionManager::revisionLineDeletionHelper(this.RecId, this.ProjBudgetLine);
}

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
/// Inserts records into the <c>ProjBudgetRevisionLine</c> table.
/// </summary>
public void insert()
{
    super();
    this.createBudgetLineDetails();
}

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
/// Validates that the specified record exists in the <c>ProjBudgetRevisionLine</c> table; if not, an error message is displayed.
/// </summary>
/// <param name="_recId">
/// The record ID of the <c>ProjBudgetRevisionLine</c> table record to be checked for existence.
/// </param>
/// <returns>
/// true if the specified record exists; otherwise, false.
/// </returns>
public static boolean checkExist( RecId _recId)
{
    boolean ret = true;

    if (!ProjBudgetRevisionLine::exist(_recId))
    {
        ret = checkFailed(strFmt(ProjBudgetRevisionLine::txtNotExist(), _recId));
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
/// Indicates whether the specified record in the <c>ProjBudgetRevisionLine</c> table exists.
/// </summary>
/// <param name="_recId">
/// The record ID of the <c>ProjBudgetRevisionLine</c> table to check for existence.
/// </param>
/// <returns>
/// true if the specified record exists; otherwise, false.
/// </returns>
public static boolean exist(RecId _recId)
{
    boolean found;

    found = (select firstonly
                 RecId
             from
                 projBudgetRevisionLine
             where
                 projBudgetRevisionLine.RecId == _recId).RecId != 0;

    return found;
}

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
/// Finds the specified record in the <c>ProjBudgetRevisionLine</c> table.
/// </summary>
/// <param name="_recId">
/// The record ID of the <c>ProjBudgetRevisionLine</c> table to find.
/// </param>
/// <param name="_forUpdate">
/// A Boolean value that indicates whether to read the record for update; optional.
/// </param>
/// <param name="_concurrencyModel">
/// The concurrency model option to use when reading the record; optional.
/// </param>
/// <returns>
/// A record of the <c>ProjBudgetRevisionLine</c> table if found; otherwise, an empty buffer.
/// </returns>
public static ProjBudgetRevisionLine find(
    RecId   _recId,
    boolean _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
{
    ProjBudgetRevisionLine    projBudgetRevisionLine;

    if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
    {
        projBudgetRevisionLine.concurrencyModel(_concurrencyModel);
    }

    if (_recId)
    {
        projBudgetRevisionLine.selectForUpdate(_forUpdate);

        select firstonly projBudgetRevisionLine
            where projBudgetRevisionLine.RecId == _recId;
    }

    return projBudgetRevisionLine;
}

]]></Source>
			</Method>
			<Method>
				<Name>findByProjBudgetRevisionIdx</Name>
				<Source><![CDATA[
    public static ProjBudgetRevisionLine findByProjBudgetRevisionIdx(
        RecId   _projBudgetRevisionRecId,
        RecId   _projBudgetLineRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetRevisionLine    projBudgetRevisionLine;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetRevisionLine.concurrencyModel(_concurrencyModel);
        }

        if (_projBudgetRevisionRecId && _projBudgetLineRecId)
        {
            projBudgetRevisionLine.selectForUpdate(_forUpdate);

            select firstonly projBudgetRevisionLine
            where projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevisionRecId
               && projBudgetRevisionLine.ProjBudgetLine == _projBudgetLineRecId;
        }

        return projBudgetRevisionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
{
    return "@SYS127989";
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS315523</DeveloperDocumentation>
	<Label>@SYS315522</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RevisionAmount</TitleField1>
	<TitleField2>ProjBudgetLine</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjBudgetRevisionIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetRevision</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RevisionLine</Name>
			<Label>@SYS315522</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetRevision</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousApprovedBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewTotalBudget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewTotalBudget</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS325204</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousApprovedBudget</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS325202</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetRevision</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RevisionAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS315524</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjBudgetLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjBudgetRevisionIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetRevision</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetLines</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RevisedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetLine</Name>
					<Field>ProjBudgetLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetRevision</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjBudgetRevision</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RevisionHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RevisionLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetRevision</Name>
					<Field>ProjBudgetRevision</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>