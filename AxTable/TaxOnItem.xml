<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxOnItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxOnItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // <GIN>
        TaxItemGroupHeading taxItemGroupHeading;
        // </GIN>
        super();

        TaxCache::clearScope(TaxCacheScope::IntersectionData);
        TaxCache::clearScope(TaxCacheScope::TaxPerUnitAndGrossDisc);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN()
            && TaxItemGroupHeading::checkIfServiceTaxAvailable_IN(this.TaxItemGroup) == false)
        {
            taxItemGroupHeading = TaxItemGroupHeading::find(this.TaxItemGroup, true);
            if (taxItemGroupHeading.RecId != 0)
            {
                ttsBegin;
                taxItemGroupHeading.ServiceTaxBasis_IN = ServiceTaxBasis_IN::None;
                taxItemGroupHeading.update();
                ttsCommit;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalValue_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the fiscal value associated with the taxation code.
    /// </summary>
    /// <returns>Returns the fiscal value of taxation code setup for the tax. Othrwise <c>TaxFiscalValue_BR::WithCreditDebit</c> </returns>
    public TaxFiscalValue_BR fiscalValue_BR()
    {
        if (this.TaxationCodeTable_BR)
        {
            return TaxationCodeTable_BR::findRecId(this.TaxationCodeTable_BR).FiscalValue;
        }

        return TaxFiscalValue_BR::WithCreditDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSameTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether new tax code has the same type with existing one.
    /// </summary>
    /// <returns>
    ///     Returns true if new tax code has the same type with existing one, or no tax code exists in current item sales tax group.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean hasSameTaxType()
    {
        TaxOnItem   taxOnItemLocal;
        boolean     ret = true;

        select firstonly TaxCode from taxOnItemLocal
            where taxOnItemLocal.TaxItemGroup == this.TaxItemGroup;

        if (taxOnItemLocal)
        {
            if (TaxTable::isRealizedVAT(taxOnItemLocal.TaxCode) != TaxTable::isRealizedVAT(this.TaxCode))
            {
                // An item sales tax group can only contain item sales tax codes that have the same tax type.
                ret = checkFailed("@SYS4082811");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxOnItemByGroupsAndType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxOnItem</c> record for specific tax item group, tax group and tax type.
    /// </summary>
    /// <param name = "_taxItemGroup">
    /// Tax item group.
    /// </param>
    /// <param name = "_taxGroup">
    /// Tax group.
    /// </param>
    /// <param name = "_taxType">
    /// Tax type.
    /// </param>
    /// <returns>
    /// <c>TaxOnItem</c> record for specific tax item group, tax group and tax type.
    /// </returns>
    public static TaxOnItem getTaxOnItemByGroupsAndType_BR(TaxItemGroup _taxItemGroup, TaxGroup _taxGroup, TaxType_BR _taxType)
    {
        TaxOnItem taxOnItem;
        TaxGroupData taxGroupData;
        TaxTable taxTable;

        select firstonly taxOnItem
            where taxOnItem.TaxItemGroup == _taxItemGroup
            exists join taxGroupData
                where taxGroupData.TaxGroup == _taxGroup
                    && taxGroupData.TaxCode  == taxOnItem.TaxCode
            exists join taxTable
                where taxTable.TaxCode == taxOnItem.TaxCode
                    && taxTable.TaxType_BR == _taxType;

        return taxOnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExemptWithoutTaxCredit_BR</Name>
				<Source><![CDATA[
    public void initExemptWithoutTaxCredit_BR(fieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldnum(TaxOnItem, TaxCode):
            case fieldnum(TaxOnItem, TaxationCodeTable_BR):
                this.TaxExemptCode = '';

                switch (this.fiscalValue_BR())
                {
                    case TaxFiscalValue_BR::WithCreditDebit:
                        this.WithoutTaxCredit_BR = false;
                        this.ExemptTax_BR        = false;
                        break;
                    case TaxFiscalValue_BR::WithoutCreditDebitExempt:
                        this.WithoutTaxCredit_BR = false;
                        this.ExemptTax_BR        = true;
                        break;
                    case TaxFiscalValue_BR::WithoutCreditDebitOther:
                        this.WithoutTaxCredit_BR = true;
                        this.ExemptTax_BR        = false;
                        break;
                }
                break;

            case fieldnum(TaxOnItem, ExemptTax_BR):
                if ((!this.ExemptTax_BR && this.fiscalValue_BR() == TaxFiscalValue_BR::WithoutCreditDebitExempt)
                    || (this.ExemptTax_BR && this.fiscalValue_BR() != TaxFiscalValue_BR::WithoutCreditDebitExempt))
                {
                    this.TaxationCodeTable_BR = 0;
                    this.TaxExemptCode        = '';
                }
                if (this.ExemptTax_BR && this.WithoutTaxCredit_BR)
                {
                    this.WithoutTaxCredit_BR = false;
                }
                break;

            case fieldnum(TaxOnItem, WithoutTaxCredit_BR):
                if ((!this.WithoutTaxCredit_BR && this.fiscalValue_BR() == TaxFiscalValue_BR::WithoutCreditDebitOther)
                    || (this.WithoutTaxCredit_BR && this.fiscalValue_BR() != TaxFiscalValue_BR::WithoutCreditDebitOther))
                {
                    this.TaxationCodeTable_BR = 0;
                    this.TaxExemptCode = '';
                }
                if (this.ExemptTax_BR && this.WithoutTaxCredit_BR)
                {
                    this.ExemptTax_BR   = false;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTable_BR</Name>
				<Source><![CDATA[
    private void initFromTaxTable_BR()
    {
        this.TaxationCodeTable_BR = TaxTable::find(this.TaxCode).TaxationCodeTable_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        TaxCache::clearScope(TaxCacheScope::IntersectionData);
        TaxCache::clearScope(TaxCacheScope::TaxPerUnitAndGrossDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        boolean brazilIsEnabled = BrazilParameters::isEnabled();

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(TaxOnItem, WithoutTaxCredit_BR):
                if (brazilIsEnabled)
                {
                    if (TaxTable::find(this.TaxCode).TaxType_BR == TaxType_BR::ImportTax)
                    {
                        this.WithoutTaxCredit_BR = NoYes::Yes;
                    }
                    this.initExemptWithoutTaxCredit_BR(fieldnum(TaxOnItem, WithoutTaxCredit_BR));
                }
                break;

            case fieldnum(TaxOnItem, TaxCode):
                if (brazilIsEnabled)
                {
                    if (TaxTable::find(this.TaxCode).TaxType_BR == TaxType_BR::ImportTax)
                    {
                        this.WithoutTaxCredit_BR = NoYes::Yes;
                    }
                    this.initFromTaxTable_BR();
                    this.initExemptWithoutTaxCredit_BR(fieldnum(TaxOnItem, TaxCode));
                }
                break;

            case fieldnum(TaxOnItem, ExemptTax_BR):
                if (brazilIsEnabled)
                {
                    this.initExemptWithoutTaxCredit_BR(fieldnum(TaxOnItem, ExemptTax_BR));
                }
                break;

            case fieldnum(TaxOnItem, TaxationCodeTable_BR):
                if (brazilIsEnabled)
                {
                    this.initExemptWithoutTaxCredit_BR(fieldnum(TaxOnItem, TaxationCodeTable_BR));
                    info("@GLS60417");
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        // <GIN>
        #ISOCountryRegionCodes
        TaxParameters       taxParameters;
        TaxItemGroupHeading taxItemGroupHeading;
        boolean             isIndiaRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        boolean             isIndiaTax;
        // </GIN>

        super(_fieldName, _arrayIndex);

        // <GIN>
        if (isIndiaRegion)
        {
            taxParameters       = TaxParameters::find();
            isIndiaTax          = TaxParameters::checkTaxParameters_IN();
            taxItemGroupHeading = TaxItemGroupHeading::find(this.TaxItemGroup, true);
        }
        // </GIN>
        switch (_fieldName)
        {
            // <GIN>
            case fieldstr(TaxOnItem, AbatementPercent_IN):
                if (isIndiaTax)
                {
                    this.AbatementPercent_IN = min(100, max(0, this.AbatementPercent_IN));
                }
                break;

            case fieldstr(TaxOnItem, LoadOnInventoryPercent_IN):
                if (isIndiaTax)
                {
                    this.LoadOnInventoryPercent_IN = min(100, max(0, this.LoadOnInventoryPercent_IN));
                }
                break;

            case fieldstr(TaxOnItem, TaxCode):
                if (isIndiaTax)
                {
                    if (this.TaxItemGroup && TaxTable::find(this.TaxCode).TaxType_IN == TaxType_IN::ServiceTax)
                    {
                        if (taxItemGroupHeading.RecId != 0)
                        {
                            ttsBegin;
                            if (taxParameters.ServiceTaxACBasis_IN == ServiceTaxACBasis_IN::CashBasisOnly)
                            {
                                taxItemGroupHeading.ServiceTaxBasis_IN = ServiceTaxBasis_IN::CashBasis;
                                taxItemGroupHeading.update();
                            }
                            else if (taxParameters.ServiceTaxACBasis_IN == ServiceTaxACBasis_IN::PointOfTaxationOnly)
                            {
                                taxItemGroupHeading.ServiceTaxBasis_IN = ServiceTaxBasis_IN::POTBasis;
                                taxItemGroupHeading.update();
                            }
                            ttsCommit;
                        }
                    }
                }
                break;
            case fieldstr(TaxOnItem, CustomsChargeAsExpensePercent_IN):
                if (isIndiaTax)
                {
                    this.CustomsChargeAsExpensePercent_IN = min(100, max(0, this.CustomsChargeAsExpensePercent_IN));
                }
                break;
            // </GIN>

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showConcessionalValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the concessional value.
    /// </summary>
    /// <returns>
    /// Returns the concessional value.
    /// </returns>
    display ConcessionalValue_IN showConcessionalValue_IN()
    {
        ConcessionalValue_IN  concessionalValue;

        concessionalValue  = TaxData::value_IN(this.TaxCode,
                                               DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                               0);
        return concessionalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPreferentialValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax value.
    /// </summary>
    /// <returns>
    /// Returns the tax value.
    /// </returns>
    display TaxValue  showPreferentialValue_IN()
    {
        TaxValue  taxValue;

        taxValue = TaxData::percentPreferentialValue_IN(this.TaxCode,
                                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                        0);
        return taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxValue</Name>
				<Source><![CDATA[
    display TaxValue  showTaxValue()
    {
        TaxValue  taxValue;

        // <GIN>
        TaxParameters       taxParameters = TaxParameters::find();
        #ISOCountryRegionCodes
        // </GIN>
        ;
        taxValue  = TaxData::percent(this.TaxCode,
                                     DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                     0);

        // <GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxParameters = TaxParameters::find();

            if ((taxParameters.Customs_IN
                    || taxParameters.SalesTax_IN
                    || taxParameters.Excise_IN)
                &&
                    (TaxTable::find(this.TaxCode).TaxType_IN    == TaxType_IN::Customs
                    || TaxTable::find(this.TaxCode).TaxType_IN  == TaxType_IN::SalesTax
                    || TaxTable::find(this.TaxCode).TaxType_IN  == TaxType_IN::Excise))
            {
                taxValue = TaxData::percentValue_IN(this.TaxCode,
                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                    0);
            }
        }
        // </GIN>

        return taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroupName</Name>
				<Source><![CDATA[
    display TaxGroupName taxGroupName()
    {
        return TaxItemGroupHeading::find(this.TaxItemGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxName</Name>
				<Source><![CDATA[
    display TaxName taxName()
    {
        return TaxTable::find(this.TaxCode).TaxName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        TaxCache::clearScope(TaxCacheScope::IntersectionData);
        TaxCache::clearScope(TaxCacheScope::TaxPerUnitAndGrossDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        ret = super();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (ret)
            {
                if (FormulaDesigner_IN::findCountTaxLines(this.TaxItemGroup, this.TaxCode))
                {
                    ret = checkFailed(strfmt("@GLS5291",tablepname(FormulaDesigner_IN)));
                }
            }
        }
        // </GIN>
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        // <GEERU>
        TaxTable    taxTable;
        #ISOCountryRegionCodes
        // </GEERU>

        ret = super(_fieldIdToCheck);

        // <GEERU>
        switch (_fieldIdToCheck)
        {
            case fieldnum(TaxOnItem, TaxCode):
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                taxTable = TaxTable::find(this.TaxCode);

                if (taxTable.TaxType_W == TaxType_W::CustomDuty_RU ||
                    taxTable.TaxType_W == TaxType_W::CustomCharge_RU)
                {
                    ret = checkFailed(strfmt("@GLS115422", taxTable.TaxType_W));
                }
            }
            break;
        }
        // </GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        // <GBR>
        TaxationCodeTable_BR taxationCodeTable_BR;
        // <GBR>

        ret = super();

        //<GTH>
        if (ret && TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ret = this.hasSameTaxType();
        }
        //</GTH>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            taxationCodeTable_BR = TaxationCodeTable_BR::findRecId(this.TaxationCodeTable_BR);

            if (this.TaxationCodeTable_BR
                && !TaxationCodeTable_BR::asOf(this.TaxationCodeTable_BR))
            {
                ret = checkFailed(strfmt("@GLS63485", taxationCodeTable_BR.TaxationCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }

            if (!this.TaxationCodeTable_BR && TaxationCodeSetup_BR::isTaxationCodeRequired(TaxTable::find(this.TaxCode).TaxType_BR))
            {
                ret = checkFailed(strFmt("@GLS60394", TaxTable::find(this.TaxCode).TaxType_BR));
            }

            if (taxationCodeTable_BR.TaxType == TaxType_BR::IPI &&
                TaxationCodeTable_BR::isExemptCodeRequired(TaxType_BR::IPI, taxationCodeTable_BR.TaxationCode) &&
                !this.TaxExemptCode)
            {
                ret = checkFailed("@Brazil:TaxExemptCodeIPIValidationSetup");
            }
        }
        // </GBR>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (ret)
            {
                if (this.LoadOnInventory_IN && !this.LoadOnInventoryPercent_IN)
                {
                    ret = checkFailed(strfmt("@SYS26332", "@GLS5122"));
                }
            }
        }
        // </GIN>
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxItemGroup _taxItemGroup, TaxCode _taxCode )
    {
        boolean ret = true;
        ;

        if (!TaxOnItem::exist(_taxItemGroup, _taxCode))
        {
            ret = checkFailed(strfmt(TaxOnItem::txtNotExist(), _taxItemGroup, _taxCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxItemGroup _taxItemGroup, TaxCode _taxCode )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxOnItem
                 where
                     taxOnItem.TaxItemGroup == _taxItemGroup &&
                    taxOnItem.TaxCode == _taxCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxOnItem find(
        TaxItemGroup _taxItemGroup,
        TaxCode _taxCode ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxOnItem taxOnItem;
        ;

        taxOnItem.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxOnItem.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxOnItem
            where
            taxOnItem.TaxItemGroup == _taxItemGroup &&
                    taxOnItem.TaxCode == _taxCode;

        return taxOnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxItemGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tax item group information.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxOnItem</c> class.
    /// </returns>
    public static TaxOnItem findTaxItemGroup_IN(TaxItemGroup _taxItemGroup)
    {
        TaxOnItem taxOnItem;

        if (_taxItemGroup)
        {
            select firstonly taxOnItem
                where taxOnItem.TaxItemGroup == _taxItemGroup;
        }
        return taxOnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS27760";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126034</DeveloperDocumentation>
	<FormRef>TaxItemGroup</FormRef>
	<Label>@SYS55335</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxItemGroup</TitleField1>
	<TitleField2>TaxCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TaxItemGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxItemGroupIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithoutTaxCredit_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExemptTax_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCodeTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxExemptCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxGroup_IN</Name>
			<Label>@GLS5124</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AbatementPercent_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadOnInventory_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadOnInventoryPercent_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsChargeAsExpensePercent_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AbatementPercent_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS5118</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustomsChargeAsExpensePercent_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS3800149</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExemptTax_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxExemptTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadOnInventory_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5120</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadOnInventoryPercent_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS5122</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxationCodeTable_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS60378</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxExemptCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxExemptCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WithoutTaxCredit_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithoutTaxCredit_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxItemGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxItemCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxationCodeTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxationCodeTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxationCodeTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS60378</EntityRelationshipRole>
			<RelatedTable>TaxationCodeTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxationCodeTable_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxOnItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxationCodeTable_BR</Name>
					<Field>TaxationCodeTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxExemptCodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxExemptCodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxExemptCode</Name>
					<SourceEDT>TaxExemptCode_BR</SourceEDT>
					<Field>TaxExemptCode</Field>
					<RelatedField>ExemptCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxItemGroupCodeIdx</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxOnItem</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupCodeIdx</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxOnItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>TaxOnItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>