<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReceiptMasks</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailReceiptMasks extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    /// <remarks>
    /// An error is thrown when you rename the record if the distribution type is other than
    /// <c>NoDistribution</c>.
    /// </remarks>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>RetailReceiptMasks</c> table exists.
    /// </summary>
    /// <param name="_profileId">
    /// The ID number of the profile record.
    /// </param>
    /// <param name="_receiptTransType">
    /// The receipt trans type.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RetailFunctionalityProfileId _profileId, RetailReceiptTransaction _receiptTransType)
    {
        RetailReceiptMasks retailReceiptMasks;

        if (_profileId)
        {
            select firstonly retailReceiptMasks
                where retailReceiptMasks.FuncProfileId == _profileId
                   && retailReceiptMasks.ReceiptTransType == _receiptTransType;
        }

        return retailReceiptMasks.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailReceiptMasks</c> table by using the specified
    /// <c>parameter</c> value.
    /// </summary>
    /// <param name="_profileId">
    /// The ID number of the profile record to find.
    /// </param>
    /// <param name="_receiptTransType">
    /// The receipt trans type to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailReceiptMasks</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailReceiptMasks find(RetailFunctionalityProfileId _profileId, RetailReceiptTransaction _receiptTransType, boolean _forUpdate = false)
    {
        RetailReceiptMasks retailReceiptMasks;

        if (_profileId)
        {
            retailReceiptMasks.selectForUpdate(_forUpdate);

            select firstonly retailReceiptMasks
                where retailReceiptMasks.FuncProfileId == _profileId
                   && retailReceiptMasks.ReceiptTransType == _receiptTransType;
        }

        return retailReceiptMasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maskContainsStoreAndTerminalNumber</Name>
				<Source><![CDATA[
    public boolean maskContainsStoreAndTerminalNumber()
    {
        boolean ret = false;
        
        if (strScan(this.Mask, 'S', 1, strLen(this.Mask)) && strScan(this.Mask, 'T', 1, strLen(this.Mask)))
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (ret && RetailParameters::find().UpdateGSTTransactionId_IN && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if(this.ReceiptTransType == RetailReceiptTransaction::Sale || this.ReceiptTransType == RetailReceiptTransaction::SalesOrder)
            {
                if(!this.maskContainsStoreAndTerminalNumber())
                {
                    ret = checkFailed("@RetailGTE:ReceiptFormatMustIncludeStoreNumberAndTerminalNumber");
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextResetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next receipt reset date.
    /// </summary>
    /// <returns>
    /// The next receipt reset date.
    /// </returns>
    public display RetailReceiptNextResetDate nextResetDate()
    {
        RetailReceiptResetConfiguration configuration = RetailReceiptResetConfiguration::findByProfileId(this.FuncProfileId);

        if (configuration)
        {
            return configuration.nextResetDate();
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentEffectiveResetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currently effective reset date.
    /// </summary>
    /// <returns>
    /// The currently effective reset date.
    /// </returns>
    public display RetailReceiptCurrentResetDate currentEffectiveResetDate()
    {
        RetailReceiptResetConfiguration configuration = RetailReceiptResetConfiguration::findByProfileId(this.FuncProfileId);

        if (configuration)
        {
            return configuration.currentEffectiveResetDate();
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stops deleting a receipt mask if it is in use
    /// </summary>
    /// <returns></returns>
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            RetailStoreTable       retailStoreTable;
            RetailTransactionTable retailTransactionTable;

            switch(this.ReceiptTransType)
            {
                case RetailReceiptTransaction::Sale :
                    select firstonly RecId from retailTransactionTable
                        where (retailTransactionTable.type == RetailTransactionType::Sales
                            || retailTransactionTable.type == RetailTransactionType::IncomeExpense
                            || retailTransactionTable.type == RetailTransactionType::SalesInvoice)
                            && retailTransactionTable.grossAmount < 0
                    exists join retailStoreTable
                        where retailStoreTable.StoreNumber == retailTransactionTable.store
                            && retailStoreTable.functionalityProfile == this.FuncProfileId;
                    break;

                case RetailReceiptTransaction::Return :
                    select firstonly RecId from retailTransactionTable
                        where (retailTransactionTable.type == RetailTransactionType::Sales
                            || retailTransactionTable.type == RetailTransactionType::IncomeExpense
                            || retailTransactionTable.type == RetailTransactionType::SalesInvoice)
                            && retailTransactionTable.grossAmount > 0
                    exists join retailStoreTable
                        where retailStoreTable.StoreNumber == retailTransactionTable.store
                            && retailStoreTable.functionalityProfile == this.FuncProfileId;
                    break;

                case RetailReceiptTransaction::Quote :
                    select firstonly RecId from retailTransactionTable
                        where (retailTransactionTable.type == RetailTransactionType::AsyncCustomerQuote
                        || retailTransactionTable.type == RetailTransactionType::AsyncCustomerOrder
                        || retailTransactionTable.type == RetailTransactionType::CustomerOrder)
                        && retailTransactionTable.TransactionOrderType == RetailTransactionOrderTypes::Quote
                    exists join retailStoreTable
                        where retailStoreTable.StoreNumber == retailTransactionTable.store
                            && retailStoreTable.functionalityProfile == this.FuncProfileId;
                    break;

                case RetailReceiptTransaction::SalesOrder :
                    select firstonly RecId from retailTransactionTable
                        where (retailTransactionTable.type == RetailTransactionType::SalesOrder
                        || retailTransactionTable.type == RetailTransactionType::AsyncCustomerOrder
                        || retailTransactionTable.type == RetailTransactionType::CustomerOrder)
                        && retailTransactionTable.TransactionOrderType == RetailTransactionOrderTypes::SalesOrder
                    exists join retailStoreTable
                        where retailStoreTable.StoreNumber == retailTransactionTable.store
                            && retailStoreTable.functionalityProfile == this.FuncProfileId;
                    break;

                case RetailReceiptTransaction::SuspendedTransaction :
                    select firstonly RecId from retailTransactionTable
                        where retailTransactionTable.type == RetailTransactionType::SuspendedTransaction
                    exists join retailStoreTable
                        where retailStoreTable.StoreNumber == retailTransactionTable.store
                            && retailStoreTable.functionalityProfile == this.FuncProfileId;
                    break;

                case RetailReceiptTransaction::Payment :
                    select firstonly RecId from retailTransactionTable
                        where retailTransactionTable.type == RetailTransactionType::Payment
                    exists join retailStoreTable
                        where retailStoreTable.StoreNumber == retailTransactionTable.store
                            && retailStoreTable.functionalityProfile == this.FuncProfileId;
            }

            if (retailTransactionTable)
            {
                // "Cannot delete a receipt mask of type '%1' which is in use"
                ret = checkFailed(strFmt("@Retail:CannotDeleteReceiptMaskInUse", this.ReceiptTransType));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4040285</DeveloperDocumentation>
	<Label>@RET2981</Label>
	<TitleField1>ReceiptTransType</TitleField1>
	<TitleField2>Mask</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>Primary</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>BrickAndMortarStore</Modules>
	<PrimaryIndex>Primary</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FuncProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsIndependent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FuncProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsIndependent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FuncProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsIndependent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FuncProfileId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailFunctionalityProfileId</ExtendedDataType>
			<Label>@RET3231</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIndependent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RET2983</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Mask</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReceiptMask</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceiptTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReceiptTransactionType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailReceiptTransaction</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Primary</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FuncProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReceiptTransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailFunctionalityProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailFunctionalityProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FuncProfileId</Name>
					<SourceEDT>RetailFunctionalityProfileId</SourceEDT>
					<Field>FuncProfileId</Field>
					<RelatedField>profileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>