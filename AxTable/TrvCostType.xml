<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCostType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvCostType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllPayMethods</Name>
				<Source><![CDATA[
    private void addAllPayMethods()
    {
        TrvValidatePayment  validPayMethods;
        RecordInsertList    rilValidPayMethods;
        TrvPayMethod trvPayMethod;

        rilValidPayMethods = new RecordInsertList(tableNum(TrvValidatePayment));

        while select PayMethod from trvPayMethod
        {
            validPayMethods.CostType = this.CostType;
            validPayMethods.PayMethod = trvPayMethod.PayMethod;
            rilValidPayMethods.add(validPayMethods);
        }

        ttsbegin;
        rilValidPayMethods.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAllowedPayMethods</Name>
				<Source><![CDATA[
    private void changeAllowedPayMethods()
    {
        TrvValidatePayment validPayMethods;

        // do not delete existing allowed payment methods
        // delete_from validPayMethods where validPayMethods.CostType == this.CostType;

        select firstonly RecId from validPayMethods where validPayMethods.CostType == this.CostType && validPayMethods.PayMethod == this.StdPaiMethod;
        if (!validPayMethods)
        {
            validPayMethods.clear();
            validPayMethods.CostType = this.CostType;
            validPayMethods.PayMethod = this.StdPaiMethod;
            validPayMethods.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBaseCategoryExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// When a category is deleted in Expense, see if the category is still in use
    /// by other modules.
    /// </summary>
    /// <param name = "_categoryId">Expense category being deleted</param>
    delegate void deleteBaseCategoryExpense(CategoryId _categoryId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _integrate = true)
    {
        ttsbegin;

        super();

        if (_integrate)
        {
            this.deleteBaseCategoryExpense(this.CostType);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBasedOnExpenseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the expense category depending on the expense type.
    /// </summary>
    public void initializeBasedOnExpenseType()
    {
        this.IsItemizationMandatory = (this.ExpType == TrvExpType::Hotel);

        this.IsCommon = (this.ExpType == TrvExpType::Airline) ||
                        (this.ExpType == TrvExpType::Hotel) ||
                        (this.ExpType == TrvExpType::Meals) ||
                        (this.ExpType == TrvExpType::CarRental);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseCategoryExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the base category for a new Expense category.
    /// </summary>
    /// <param name = "_categoryId">The new expense category id</param>
    /// <param name = "_name">The new expense category description</param>
    delegate void createBaseCategoryExpense(CategoryId _categoryId, CategoryName _name) {}

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _integrate = true)
    {
        CategoryTable       categoryTable = null;

        ttsbegin;

        super();

        if (_integrate)
        {
            this.createBaseCategoryExpense(this.CostType, this.CostTxt);
        }

        this.addAllPayMethods();

        ttscommit;

        this.loadSubCategoriesFromGlobalCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSubCategoriesFromGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all the subcategories from the shared category record to this category record.
    /// </summary>
    void loadSubCategoriesFromGlobalCategory()
    {
        SharedCategory          globalCategory;
        TrvSharedSubCategory    trvGlobalSubCategory;
        TrvExpSubCategory       trvExpSubCategory;
        RecordInsertList        recordInsertList;

        select firstonly RecId from globalCategory where globalCategory.CategoryId == this.CostType;
        if (globalCategory.RecId)
        {
            recordInsertList = new RecordInsertList(tableNum(TrvExpSubCategory));
            while select RecId from trvGlobalSubCategory where trvGlobalSubCategory.SharedCategory == globalCategory.RecId
            {
                trvExpSubCategory.clear();
                trvExpSubCategory.LedgerDimension = this.LedgerDimension;
                trvExpSubCategory.TrvSharedSubCategory = trvGlobalSubCategory.RecId;
                trvExpSubCategory.CostType = this.CostType;
                trvExpSubCategory.TaxItemGroup = this.TaxItemGroup;
                recordInsertList.add(trvExpSubCategory);
            }
            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryNameExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>CategoryName</c> field on the related <c>CategoryTable</c>.
    /// </summary>
    /// <param name = "_categoryId">Category to update</param>
    /// <param name = "_name">The new value</param>
    delegate void updateCategoryNameExpense(CategoryId _categoryId, CategoryName _name) {}

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryTaxItemGroupExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TaxItemGroup</c> on the related <c>CategoryTeble</c>.
    /// </summary>
    /// <param name = "_categoryId">Category to update</param>
    /// <param name = "_taxItemGroup">the new value</param>
    delegate void updateCategoryTaxItemGroupExpense(CategoryId _categoryId, SysGroup _taxItemGroup) {}

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _integrate = true)
    {
        ttsbegin;

        if (_integrate)
        {
            // update the category name in the related tables
            if (this.orig().CostTxt != this.CostTxt)
            {
                this.updateCategoryNameExpense(this.CostType, this.CostTxt);
            }

            // update the taxitemgroup in the related tables
            if (this.orig().TaxItemGroup != this.TaxItemGroup)
            {
                this.updateCategoryTaxItemGroupExpense(this.CostType, this.TaxItemGroup);
            }
        }

        if (this.StdPaiMethod != this.orig().StdPaiMethod)
        {
            this.changeAllowedPayMethods();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        MainAccount macct;

        ret = super(_fieldIdToCheck);

        if (fieldNum(TrvCostType, LedgerDimension) == _fieldIdToCheck)
        {
            if (this.LedgerDimension)
            {
                macct = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension);

                if (! macct.transactionAccount())
                {
                    ret = checkFailed(strFmt("@SYS16410", LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.LedgerDimension),
                        macct.Type));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && TrvCostType::checkPaymentMethodForPersonalExpense(this.CostType, this.StdPaiMethod);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentMethodForPersonalExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the payment methods that are permitted for a personal expense.
    /// </summary>
    /// <param name="_category">
    /// The expense category.
    /// </param>
    /// <param name="_payMethod">
    /// The payment method.
    /// </param>
    /// <returns>
    /// true if the payment method is permitted for the personal expense; otherwise, false.
    /// </returns>
    public static boolean checkPaymentMethodForPersonalExpense(TrvCostTypeEDT _category, TrvPayMethodEDT _payMethod)
    {
        boolean         ret = true;
        TrvPayMethod trvPayMethod;

        if (TrvCostType::find(_category).ExpType == TrvExpType::Personal)
        {
            trvPayMethod = TrvPayMethod::find(_payMethod);
            if ( (trvPayMethod.PostMethod != TrvPostMethod::Bank) &&
                 (trvPayMethod.PostMethod != TrvPostMethod::Vendor) &&
                 (trvPayMethod.PostMethod != TrvPostMethod::Ledger) )
            {
                ret = checkFailed(strFmt("@SYS114251", _category, _payMethod));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TrvCostTypeEDT _trvCategory)
    {
        return _trvCategory
            && (select trvCostType where trvCostType.CostType == _trvCategory).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvCostType find(TrvCostTypeEDT _trvCategory, boolean _forUpdate = false)
    {
        TrvCostType trvCostType = null;

        trvCostType.selectForUpdate(_forUpdate);

        if (_trvCategory)
        {
            select firstonly trvCostType
                where trvCostType.CostType == _trvCategory;
        }

        return trvCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAll</Name>
				<Source><![CDATA[
    public static TrvCostType findAll()
    {
        TrvCostType trvCostType;
        ;
        select trvCostType where trvCostType.ExpType != TrvExpType::Advance;

        return trvCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllCategories</Name>
				<Source><![CDATA[
    static Array getAllCategories(TrvExpType _filterByExpType = TrvExpType::Empty)
    {
        TrvCostType         trvCostType;
        Array               arrayCtg  = new Array(Types::String);
        int                 i=1;
        boolean             noFilter = false;

        if (_filterByExpType == TrvExpType::Empty)
        {
            noFilter = true;
        }

        while select ExpType, CostType,CostTxt from trvCostType where
            (noFilter || trvCostType.ExpType == _filterByExpType)
        {
            arrayCtg.value(i,   trvCostType.CostType);
            arrayCtg.value(i+1, trvCostType.CostTxt);
            i = i+2;
        }

        return arrayCtg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategories</Name>
				<Source><![CDATA[
    // Get all categories that work with the Payment Method
    static Array getCategories(TrvPayMethodEDT _headerPayMethod, TrvExpType _filterByExpType = TrvExpType::Empty)
    {
        TrvValidatePayment  allowedPayMethods;
        TrvCostType         trvCostType;
        Array               arrayCtg  = new Array(Types::String);
        int                 i=1;
        boolean             noFilter;
        ;

        if (_filterByExpType == TrvExpType::Empty)
        {
            noFilter = true;
        }

        while select RecId from allowedPayMethods
            join CostType,CostTxt from trvCostType
            order by CostType
            where
            allowedPayMethods.CostType == trvCostType.CostType &&
            allowedPayMethods.PayMethod == _headerPayMethod    &&
            (noFilter || trvCostType.ExpType == _filterByExpType)
        {
            arrayCtg.value(i,   trvCostType.CostType);
            arrayCtg.value(i+1, trvCostType.CostTxt);
            i = i+2;
        }

        return arrayCtg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseCategories</Name>
				<Source><![CDATA[
    static Array getExpenseCategories(TrvPayMethodEDT _payMethod = "", boolean _getInactive = true)
    {
        TrvValidatePayment  allowedPayMethods;
        TrvCostType         trvCostType;
        Array               arrayCtg  = new Array(Types::String);
        int                 i=1;
        ;

        // filter by those that work for the Payment Method
        if (_payMethod)
        {
            while select RecId from allowedPayMethods
                join CostType, CostTxt, IsInactive from trvCostType
                order by CostType
                where
                allowedPayMethods.CostType == trvCostType.CostType &&
                allowedPayMethods.PayMethod == _payMethod    &&
                (
                    trvCostType.ExpType != TrvExpType::Transport &&
                    trvCostType.ExpType != TrvExpType::Allowance &&
                    trvCostType.ExpType != TrvExpType::Personal &&
                    trvCostType.ExpType != TrvExpType::Advance &&
                    trvCostType.ExpType != TrvExpType::Empty
                )
            {
                if (_getInactive || !trvCostType.IsInactive)
                {
                    arrayCtg.value(i,   trvCostType.CostType);
                    arrayCtg.value(i+1, trvCostType.CostTxt);
                    i = i+2;
                }
            }
        }
        else
        {
            while select CostType, CostTxt, IsInactive from trvCostType where
                (
                    trvCostType.ExpType != TrvExpType::Transport &&
                    trvCostType.ExpType != TrvExpType::Allowance &&
                    trvCostType.ExpType != TrvExpType::Personal &&
                    trvCostType.ExpType != TrvExpType::Advance &&
                    trvCostType.ExpType != TrvExpType::Empty
                )
            {
                if (_getInactive || !trvCostType.IsInactive)
                {
                    arrayCtg.value(i,   trvCostType.CostType);
                    arrayCtg.value(i+1, trvCostType.CostTxt);
                    i = i+2;
                }
            }
        }

        return arrayCtg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupActiveCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a lookup of expense categories for the string control that is passed in as a parameter.
    /// </summary>
    /// <param name="_ctrl">
    ///    The string control on which to perform the lookup.
    /// </param>
    /// <remarks>
    ///    The expense categories in the returned list are active expense categories. The list displays the expense category and description fields.
    /// </remarks>
    public static void lookupActiveCategories(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(TrvCostType), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        sysTableLookup.addLookupfield(fieldNum(TrvCostType, CostType), true);
        sysTableLookup.addLookupfield(fieldNum(TrvCostType, CostTxt));

        qbds = query.addDataSource(tableNum(TrvCostType));
        qbds.addRange(fieldNum(TrvCostType, IsInactive)).value(queryValue(NoYes::No));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfExpSubCategories</Name>
				<Source><![CDATA[
    static int numberOfExpSubCategories(TrvCostTypeEDT _costType)
    {
        TrvExpSubCategory   trvExpSubCategory;

        if (_costType)
        {
            select count(RecId) from trvExpSubCategory
                where trvExpSubCategory.CostType == _costType;
            return int642int(trvExpSubCategory.RecId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentMethod</Name>
				<Source><![CDATA[
    public static boolean validatePaymentMethod(TrvCostTypeEDT _costType, TrvPayMethodEDT _payMethod)
    {
        TrvValidatePayment  allowedPayMethods;
        TrvCostType         trvCostType = TrvCostType::find(_costType);

        if (!trvCostType)
        {
            return checkFailed(strFmt("@Expense:ExpenseCategoryDoesNotExistInCompany", _costType, curExt()));
        }

        if (trvCostType.StdPaiMethod == _payMethod)
        {
            return true;
        }

        select firstonly allowedPayMethods
                where allowedPayMethods.CostType == _costType &&
                      allowedPayMethods.PayMethod == _payMethod;

        if (allowedPayMethods || TrvExpTrans::getAllowancePaymentMethod(_costType))
        {
            return true;
        }

        return checkFailed(strFmt("@SYS107056", _payMethod, _costType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCostTypeForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the cost type is valid for the worker in the specified legal entity.
    /// </summary>
    /// <param name = "_trvCostType">Cost type table buffer.</param>
    /// <param name = "_workerRecId">Record identifier for a worker.</param>
    /// <param name = "_legalEntityRecId">Record identifier for a legal entity.</param>
    /// <returns>True, if the cost type is valid for the worker in the legal entity; otherwise false.</returns>
    public static boolean isValidCostTypeForWorker(TrvCostType _trvCostType, HcmWorkerRecId _workerRecId, LegalEntityRecId _legalEntityRecId)
    {
        if (!_workerRecId)
        {
            return checkFailed("@SYS345105");
        }

        //Validation based on resource/category validation groups setup
        ProjParameters projParameter = ProjParameters::find();

        boolean ret = true;

        if (projParameter.ValidationEmplCategory == ProjValParameter::Mandatory ||
             projParameter.ValidationEmplCategory == ProjValParameter::Lookup)
        {
            ResourceRecId resourceRecId = ResourceFacade::findByWorker(_workerRecId, _legalEntityRecId);

            if (resourceRecId == 0)
            {
                return checkFailed(strFmt("@Expense:ResourceMissingForLE", HcmWorker::find(_workerRecId).name()));
            }

            if (!ResourceSetup::find(resourceRecId).ValidateResourceCategory)
            {
                return true;
            }

            ResResourceIdentifier resResourceIdentifier;
            ProjValEmplCategorySetUp projValEmplCategorySetUp, projValEmplCategorySetUpRef;
            
            select firstonly RecId from projValEmplCategorySetUp
                  join projValEmplCategorySetUpRef
                    where projValEmplCategorySetUpRef.Resource == resourceRecId
                    && (projValEmplCategorySetUp.GroupId == projValEmplCategorySetUpRef.GroupId
                    && projValEmplCategorySetUp.CategoryId == _trvCostType.CostType);

            ret = projValEmplCategorySetUp.RecId == 0 ? checkFailed("@Expense:ResourceProjectValidationException") : true;
                                        
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCostTypeForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the expense category is valid for the project.
    /// </summary>
    /// <param name = "_costType">Record identifier for a category.</param>
    /// <param name = "_projId">Record identifier for a project.</param>
    /// <returns>true, if the expense category is valid for the project; otherwise false.</returns>
    public static boolean isValidCostTypeForProject(TrvCostTypeEDT _costType, ProjId _projId)
    {
        //if validate category for project is set to false, return true; otherwise continue validation.
        if (!ProjTable::find(_projId).ValidateProjCategory)
        {
            return true;
        }

        boolean ret = true;
        ProjParameters projParameter = ProjParameters::find();
       
        if (projParameter.ValidationProjCategory == ProjValParameter::Mandatory ||
                 projParameter.ValidationProjCategory == ProjValParameter::Lookup
            )
        {
            ProjValProjCategorySetUp projValProjCategorySetUp, projValProjCategorySetUpChekGroup;

            select firstonly RecId from projValProjCategorySetUp
                where projValProjCategorySetUp.CategoryId == _costType 
                && projValProjCategorySetUp.ProjId == _projId;

            // Check for groups if there is no category assigned to project.
            if (!projValProjCategorySetUp.RecId)
            {
                ret = false;

                //iterate through groups assigned for the project
                while select GroupId from projValProjCategorySetUp
                    where projValProjCategorySetUp.ProjId == _projId && 
                    projValProjCategorySetUp.GroupId &&
                    !projValProjCategorySetUp.CategoryId
                {
                    select RecId from  projValProjCategorySetUpChekGroup
                                      where projValProjCategorySetUpChekGroup.CategoryId  == _costType    &&
                                            projValProjCategorySetUpChekGroup.GroupId == projValProjCategorySetUp.GroupId;
                    
                    if (projValProjCategorySetUpChekGroup.RecId)
                    {
                        ret = true;
                        break;
                        
                    }

                }

                if (!ret)
                {
                    // The combination project/category is mandatory, but does not exist for project '_projId' and category '_costType'.
                    return checkFailed(strFmt("@SYS69535", _projId, _costType));
                }
            }
            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostTypeEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether a CostType _costType should be editable.
    /// </summary>
    /// <param name = "_costType">TrvCostTypeEDT - the name of the cost type</param>
    /// <returns>False if the CostType is import only, else True</returns>
    public static boolean isCostTypeEditable(TrvCostTypeEDT _costType)
    {
        boolean ret = true;
        if (_costType)
        {
            ret = (select firstonly RecId
                from TrvCostType where TrvCostType.CostType == _costType &&
                TrvCostType.IsImportOnly == false).RecId != 0;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS124819</DeveloperDocumentation>
	<FormRef>TrvCostType</FormRef>
	<Label>@SYS101358</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>CostTxt</TitleField1>
	<TitleField2>StdPaiMethod</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CostType</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>CostType</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TrvCostTypeRates</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>TrvCostType</Relation>
			<Table>TrvCostTypeRates</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvExpSubCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>TrvCostType</Relation>
			<Table>TrvExpSubCategory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvExpTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>CostType</Relation>
			<Table>TrvExpTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvPBSCatCodes</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>TrvCostType</Relation>
			<Table>TrvPBSCatCodes</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvPBSMaindata</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>CostType</Relation>
			<Table>TrvPBSMaindata</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvValidatePayment</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>TrvCostType</Relation>
			<Table>TrvValidatePayment</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StdPaiMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Gridgroup</Name>
			<Label>@SYS101479</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StdPaiMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StdPaiMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsItemizationMandatory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isImportOnly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsInactive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS26269</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupIfBilledToEmployee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrvCostTypeStatisticsId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExpType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvExpTypeEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>TrvExpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCommon</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS340603</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsGovernment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Expense:AntiCorruptionCategory</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isImportOnly</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS101711</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsInactive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS80311</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsItemizationMandatory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS332598</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StdPaiMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvStdPaiMethod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Label>@SYS21932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupIfBilledToEmployee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>DE</CountryRegionCodes>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Label>@SYS339216</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TrvCostTypeStatisticsId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeStatisticsId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CostType</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CostType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CategoryTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS124820</EntityRelationshipRole>
			<RelatedTable>CategoryTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Categorizes</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsCategorizedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostType</Name>
					<Field>CostType</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DescribesTheAccountingOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDescribedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PayMethod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124822</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TrvPayMethod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsTheUsualPaymentMethodFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsUsuallyPaidVia</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StdPaiMethod</Name>
					<Field>StdPaiMethod</Field>
					<RelatedField>PayMethod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecifiesItemTaxFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ItemTaxIsSpecifiedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeadingBilledToEmployee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupIfBilledToEmployee</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroupIfBilledToEmployee</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvCostTypeStatistics</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TrvCostTypeStatistics</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProvidesStatisticsFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>StatisticsIsProvidedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrvCostTypeStatisticsId</Name>
					<SourceEDT>TrvCostTypeStatisticsId</SourceEDT>
					<Field>TrvCostTypeStatisticsId</Field>
					<RelatedField>TrvCostTypeStatisticsId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>unique</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>