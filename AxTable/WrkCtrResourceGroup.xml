<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrResourceGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrResourceGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentResourceCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of resources that are currently a member of the resource group.
    /// </summary>
    /// <returns>
    ///    The number of resources that are currently a member of the resource group.
    /// </returns>
    public int currentResourceCount()
    {
        WrkCtrResourceGroupResource     wrkCtrResourceGroupResource;
        date                            selectDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select validtimestate(selectDate) count(RecId) from wrkCtrResourceGroupResource
            where wrkCtrResourceGroupResource.ResourceGroup == this.RecId;

        return int642int(wrkCtrResourceGroupResource.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputInventLocationIdFallback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the input warehouse from either the resource group or from the production unit that
    ///    is relate to the resource group.
    /// </summary>
    /// <returns>
    ///    The ID of the input warehouse.
    /// </returns>
    public InventLocationIdInput inputInventLocationIdFallback()
    {
        InventLocationIdInput ret = this.InputInventLocationId;

        if (!ret && this.ProdUnitId)
        {
            ret = ProdUnitTable::find(this.ProdUnitId).InputInventLocationId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCellActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the work cell is used in an active production flow version.
    /// </summary>
    /// <returns>
    /// true if the work cell is used in an active production flow version; otherwise, false.
    /// </returns>
    public boolean isWorkCellActive()
    {
        LeanProductionFlowActivity  leanProductionFlowActivity;
        PlanPlanActivity            planPlanActivity;
        Plan                        plan;

        select firstonly RecId from plan
            exists join planPlanActivity
            exists join leanProductionFlowActivity
            where leanProductionFlowActivity.PlanActivity           == planPlanActivity.PlanActivity
               && leanProductionFlowActivity.WrkCtrResourceGroup    == this.RecId
               && plan.Status == PlanStatus::Active
               && planPlanActivity.Plan == plan.RecId;

        return plan.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(WrkCtrResourceGroup, SiteId):
                this.InputInventLocationId = '';
                this.InputWMSLocationId = '';
                this.OutputInventLocationId = '';
                this.OutputWMSLocationId = '';
                this.ProdUnitId = '';

                if (FormDataUtil::isFormDataSource(this) && this.orig().SiteId != '')
                {
                    warning("@SYS133105" + "@SYS133110");
                }
                break;

            case fieldstr(WrkCtrResourceGroup, InputInventLocationId):
                if (!this.SiteId)
                {
                    this.SiteId = InventLocation::find(this.InputInventLocationId).InventSiteId;
                }
                this.InputWMSLocationId = '';
                break;

            case fieldstr(WrkCtrResourceGroup, OutputInventLocationId):
                if (!this.SiteId)
                {
                    this.SiteId = InventLocation::find(this.OutputInventLocationId).InventSiteId;
                }
                this.OutputWMSLocationId = '';
                break;

            case fieldstr(WrkCtrResourceGroup, ProdUnitId):
                if (!this.SiteId)
                {
                    this.SiteId = ProdUnitTable::find(this.ProdUnitId).ParentSiteId;
                }
                break;

            case fieldstr(WrkCtrResourceGroup, InputWMSLocationId):
                if (!this.InputInventLocationId)
                {
                    this.InputInventLocationId = this.inputInventLocationIdFallback();
                }
                break;

            case fieldstr(WrkCtrResourceGroup, OutputWMSLocationId):
                if (!this.OutputInventLocationId)
                {
                    this.OutputInventLocationId = this.outputInventLocationIdFallback();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputInventLocationIdFallback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the output warehouse from either the resource group or from the production unit that
    ///    is related to the resource group.
    /// </summary>
    /// <returns>
    ///    The ID of the output warehouse.
    /// </returns>
    public InventLocationIdOutput outputInventLocationIdFallback()
    {
        InventLocationIdOutput ret = this.OutputInventLocationId;

        if (!ret && this.ProdUnitId)
        {
            ret = ProdUnitTable::find(this.ProdUnitId).OutputInventLocationId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description for the resource group.
    /// </summary>
    /// <returns>
    /// the description for the resource group.
    /// </returns>
    public display WrkCtrName resourceDescription()
    {
        return WrkCtrTable::find(this.WrkCtrId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the time zone the resource group is associated with.
    /// </summary>
    /// <returns>
    /// The time zone.
    /// </returns>
    public Timezone timeZone()
    {
        Timezone timezone;

        if (this.SiteId)
        {
            timezone = InventSite::timeZoneSite(this.SiteId);
        }
        else
        {
            timezone = DateTimeUtil::getCompanyTimeZone();
        }

        return timezone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.WrkCtrId));
        }

        ttsbegin;

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                                 ret;
        WrkCtrActivityResourceGroupRequirement  wrkCtrActivityResourceGroupRequirement;
        WrkCtrActivityRequirement               wrkCtrActivityRequirement;
        WrkCtrActivityRequirementSet            wrkCtrActivityRequirementSet;
        WrkCtrActivity                          wrkCtrActivity;
        WrkCtrProdRouteActivity                 wrkCtrProdRouteActivity;
        ProdTable                               prodTable;
        PlanReference                           planReference;

        ret = super();

        if (ret)
        {
            //Not allowed to delete if the resource group is assigned to a production flow activity
            planReference = LeanProductionFlowActivity::isWorkCellUsed(this.RecId);
            if (planReference)
            {
                ret = checkFailed(strfmt("@SYS303776", planReference.PlanName, int2str(planReference.RecVersion)));
            }
        }

        if (ret)
        {
            //Not allowed to delete if the resource group is used as requirement, except if the requirement is on production order which has status = ended
            select firstonly RecId from wrkCtrActivityResourceGroupRequirement
                where wrkCtrActivityResourceGroupRequirement.ResourceGroup == this.RecId
                notexists join wrkCtrActivityRequirement
                      join TableId from wrkCtrActivityRequirementSet
                      join TableId from wrkCtrProdRouteActivity
                      join TableId from wrkCtrActivity
                      join TableId from prodTable
                      where wrkCtrActivityRequirement.RecId     == wrkCtrActivityResourceGroupRequirement.ActivityRequirement
                         && wrkCtrActivityRequirementSet.RecId  == wrkCtrActivityRequirement.ActivityRequirementSet
                         && wrkCtrActivity.RecId                == wrkCtrActivityRequirementSet.Activity
                         && wrkCtrProdRouteActivity.Activity    == wrkCtrActivity.RecId
                         && prodTable.ProdId                    == wrkCtrProdRouteActivity.ProdId
                         && prodTable.DataAreaId                == wrkCtrProdRouteActivity.RouteDataAreaId
                         && prodTable.ProdStatus                == ProdStatus::Completed;

            if (wrkCtrActivityResourceGroupRequirement.RecId)
            {
                ret = checkFailed(strfmt("@SYS134742","@SYS15433"));
            }
        }

        //Show this custom message
        if (ret && FormDataUtil::isFormDataSource(this))
        {
            ret = Box::yesNo("@SYS133111" + "@SYS133112",DialogButton::No) == DialogButton::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean     callSuper   = true;
        boolean     ret         = true;

        // The WMS locations requires special validations as they should be validated against the
        // warehouse from production unit if no warehouse has been entered
        switch (_fieldName)
        {
            case fieldstr(WrkCtrResourceGroup, InputWMSLocationId):
                if (WMSLocation::exist(this.InputWMSLocationId, this.inputInventLocationIdFallback()))
                {
                    callSuper = false;
                }
                break;
            case fieldStr(WrkCtrResourceGroup, OutputInventLocationId):
                if (!this.IsWorkCell
                    && this.OutputInventLocationId != ''
                    && !InventLocation::find(this.OutputInventLocationId).checkIsWHSEnabled())
                {
                    ret = false;
                }
                break;
            case fieldstr(WrkCtrResourceGroup, OutputWMSLocationId):
                if (WMSLocation::exist(this.OutputWMSLocationId, this.outputInventLocationIdFallback()))
                {
                    callSuper = false;
                }
                if (!this.IsWorkCell
                    && this.OutputInventLocationId != ''
                    && this.OutputWMSLocationId != ''
                    && !WMSLocation::find(this.OutputWMSLocationId, this.OutputInventLocationId).checkAllowedAsOutputLocation())
                {
                    ret = false;
                }
                break;
        }

        if (callSuper && ret)
        {
            ret = super(_fieldName, _arrayIndex);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;

        ret = super();

        if (ret && this.InputInventLocationId)
        {
            if (InventLocation::find(this.InputInventLocationId).InventSiteId != this.SiteId)
            {
                // Site on input warehouse does not match the selected site.
                ret = checkFailed("@SYS133113");
            }
        }

        if (ret && this.OutputInventLocationId)
        {
            if (InventLocation::find(this.OutputInventLocationId).InventSiteId != this.SiteId)
            {
                // Site on output warehouse does not match the selected site.
                ret = checkFailed("@SYS133114");
            }
        }

        if (ret && this.ProdUnitId)
        {
            if (ProdUnitTable::find(this.ProdUnitId).ParentSiteId != this.SiteId)
            {
                // Site on production unit does not match the selected site.
                ret = checkFailed("@SYS133115");
            }
        }

        if (this.IsWorkCell)
        {
            if (this.InputInventLocationId == '' ||
                this.OutputInventLocationId == '' ||
                this.InputWMSLocationId == '' ||
                this.OutputWMSLocationId == '')
            {
                // Input and output locations must be specified for resource groups playing the role of a work cell
                ret = ret && checkFailed("@SYS190195");
            }
        }
        else
        {
            if (this.RecId && LeanWorkCellCapacity::findActiveForWorkCell(this.RecId))
            {
                // You cannot change the work cell role because current or future capacity is assigned to the work cell
                ret = ret && checkFailed("@SYS190197");
            }

            if (this.RecId && this.isWorkCellActive())
            {
                // You cannot change the work cell role as the work cell is used in an active production flow
                ret = ret && checkFailed("@SYS190198");
            }

            if (this.RecId && this.OutputInventLocationId != '')
            {
                // You cannot change the work cell if the output warehouse is not WHS enabled
                ret = ret && InventLocation::find(this.OutputInventLocationId).checkIsWHSEnabled();
            }
        }

        if (ret)
        {
            ret = this.validateWriteInventLocationRelations();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInventLocationRelations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the changes that are made to the input warehouse against the resource group memberships.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    private boolean validateWriteInventLocationRelations()
    {
        boolean                     ret                             = true;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        date                        validFrom                       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        date                        validTo                         = maxdate();

        if (this.RecId)
        {
            select firstonly validTimeState(validFrom, validTo) RecId from wrkCtrResourceGroupResource
                where wrkCtrResourceGroupResource.ResourceGroup == this.RecId
                   && wrkCtrResourceGroupResource.InputInventLocationId
                   && wrkCtrResourceGroupResource.InputInventLocationId != this.inputInventLocationIdFallback();

            if (wrkCtrResourceGroupResource.RecId)
            {
                if (this.InputInventLocationId)
                {
                    ret = checkFailed("@SYS190551");
                }
                else
                {
                    ret = checkFailed("@SYS190552");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the <c>WrkCtrTable</c> record that represents the resource group.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether the record should be selected for update.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrTable</c> record that represents the resource group.
    /// </returns>
    public WrkCtrTable wrkCtrTable(boolean _forUpdate = false)
    {
        WrkCtrTable wrkCtrTable;

        if (this.WrkCtrId)
        {
            wrkCtrTable = WrkCtrTable::find(this.WrkCtrId, _forUpdate);
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>WrkCtrResourceGroup</c> record based on the record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID with which to find the resource group.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether the record found should be selected for update.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrResourceGroup</c> record based on the record ID of the resource group.
    /// </returns>
    public static WrkCtrResourceGroup find(recId    _recId,
                                           boolean  _forUpdate = false)
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;

        wrkCtrResourceGroup.selectForUpdate(_forUpdate);

        select firstonly wrkCtrResourceGroup
            where wrkCtrResourceGroup.RecId == _recId;

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>WrkCtrResourceGroup</c> record that is based on the <c>WrkCtrId</c> and
    ///    <c>ResourceDataAreaId</c> fields.
    /// </summary>
    /// <param name="_wrkCtrId">
    ///    The ID of the resource group to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record that is found will be selected for an update.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrResourceGroup</c> record that is based on the <c>WrkCtrId</c> and
    ///    <c>ResourceDataAreaId</c> fields of the resource group.
    /// </returns>
    public static WrkCtrResourceGroup findWrkCtrId( WrkCtrIdBase  _wrkCtrId,
                                                    boolean       _forUpdate = false)
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;

        wrkCtrResourceGroup.selectForUpdate(_forUpdate);

        select firstonly wrkCtrResourceGroup
            where wrkCtrResourceGroup.WrkCtrId              == _wrkCtrId;

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a form lookup for a resource group name.
    /// </summary>
    /// <param name="_callingControl">
    ///    An instance of the <c>FormControl</c> class to which the lookup should bind.
    /// </param>
    /// <param name="_siteId">
    ///    A <c>SiteId</c> extended data type value with which to filter the lookup data.
    /// </param>
    /// <param name="_prodUnitId">
    ///    A <c>ProdUnitId</c> extended data type value with which to filter the lookup data.
    /// </param>
    /// <param name="_filterByWorkCell">
    ///    A Boolean value that indicates whether to only filter for work cells.
    /// </param>
    /// <returns>
    ///    The record stored in a reference control; otherwise, null.
    /// </returns>
    public static Common lookupWrkCtrId(
        FormControl     _callingControl,
        InventSiteId    _siteId = '',
        ProdUnitId      _prodUnitId = '',
        boolean         _filterByWorkCell = false)
    {
        Common                      result = null;

        SysTableLookup              sysTableLookup;
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query               = new Query();
        QueryBuildDataSource        queryBuildDataSource;
        NoYes                       requiresWorkCellNoYes;

        if (!_callingControl)
        {
            throw(error(strfmt("@SYS137393", Error::wrongUseOfFunction(funcname()))));
        }

        switch (_callingControl.handle())
        {
            case classnum(FormReferenceGroupControl):
                sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tablenum(WrkCtrResourceGroup), _callingControl);
                sysReferenceTableLookup.addLookupfield(fieldnum(WrkCtrResourceGroup, WrkCtrId));
                sysReferenceTableLookup.addLookupMethod(tablemethodstr(WrkCtrResourceGroup, resourceDescription));
                sysReferenceTableLookup.addLookupfield(fieldnum(WrkCtrResourceGroup, SiteId));
                sysReferenceTableLookup.addLookupfield(fieldnum(WrkCtrResourceGroup, ProdUnitId));
                break;

            case classnum(FormStringControl):
                sysTableLookup = SysTableLookup::newParameters(tablenum(WrkCtrResourceGroup), _callingControl);
                sysTableLookup.addLookupfield(fieldnum(WrkCtrResourceGroup, WrkCtrId), true);
                sysTableLookup.addLookupMethod(tablemethodstr(WrkCtrResourceGroup, resourceDescription));
                sysTableLookup.addLookupfield(fieldnum(WrkCtrResourceGroup, SiteId));
                sysTableLookup.addLookupfield(fieldnum(WrkCtrResourceGroup, ProdUnitId));
                break;

            default:
                throw(error(strfmt("@SYS137393", Error::wrongUseOfFunction(funcname()))));
        }

        queryBuildDataSource = query.addDataSource(tablenum(WrkCtrResourceGroup));
        queryBuildDataSource.addSortField(fieldnum(WrkCtrResourceGroup,WrkCtrId));

        if (_siteId)
        {
            queryBuildDataSource.addRange(fieldnum(WrkCtrResourceGroup,SiteId)).value(queryValue(_siteId));
        }

        if (_prodUnitId)
        {
            // There is no need to filter on ProdUnitDataAreaId
            queryBuildDataSource.addRange(fieldnum(WrkCtrResourceGroup,ProdUnitId)).value(queryValue(_prodUnitId));
        }

        if (_filterByWorkCell)
        {
            requiresWorkCellNoYes = NoYes::Yes;
        }
        else
        {
            requiresWorkCellNoYes = NoYes::No;
        }
        queryBuildDataSource.addRange(fieldnum(WrkCtrResourceGroup,IsWorkCell)).value(queryValue(requiresWorkCellNoYes));

        switch (_callingControl.handle())
        {
            case classnum(FormReferenceGroupControl):
                sysReferenceTableLookup.parmQuery(query);
                result = sysReferenceTableLookup.performFormLookup();
                break;

            case classnum(FormStringControl):
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;

            default:
                throw(error(strfmt("@SYS137393", Error::wrongUseOfFunction(funcname()))));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorManagingResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the vendor account of the vendors that are managing the vendor resource group
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of the resource group
    /// </param>
    /// <returns>
    /// The vendor account if the resource group is vendor managed; otherwise an empty string
    /// </returns>
    public static VendAccount vendorManagingResourceGroup(WrkCtrIdBase _wrkCtrId)
    {
        WrkCtrResourceGroupResource     wrkCtrResourceGroupResource;
        WrkCtrResourceGroup             wrkCtrResourceGroup;
        WrkCtrTable                     wrkCtrTable;

        select firstonly VendId
            from        wrkCtrTable
            exists join wrkCtrResourceGroupResource
            exists join wrkCtrResourceGroup
            where wrkCtrTable.WrkCtrId                      == wrkCtrResourceGroupResource.WrkCtrId
               && wrkCtrResourceGroupResource.ResourceGroup == wrkCtrResourceGroup.RecId
               && wrkCtrTable.WrkCtrType                    == WrkCtrType::Vendor
               && wrkCtrResourceGroup.WrkCtrId              == _wrkCtrId;

        return wrkCtrTable.VendId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInActivePlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds out if this resource group is associated with an active Kanban setup.
    /// </summary>
    /// <returns>
    /// true, if this resource group is associated with an active Kanban setup; otherwise, false.
    /// </returns>
    public boolean isUsedInActivePlan()
    {
        return (this.RecId
            && this.IsWorkCell
            && this.isWorkCellActive());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCellValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the work cell reference represents a valid work cell.
    /// </summary>
    /// <param name="_wrkCtrId">Work cell reference to check.</param>
    /// <returns>true if work cell reference represents a valid work cell; otherwise, false.</returns>
    public static boolean isWorkCellValid(WrkCtrId _wrkCtrId)
    {
        boolean isWorkCellValid = true;

        if (_wrkCtrId)
        {
            WrkCtrResourceGroup wrkCtrResourceGroup = WrkCtrResourceGroup::findWrkCtrId(_wrkCtrId);

            if (!wrkCtrResourceGroup)
            {
                isWorkCellValid = checkFailed(strFmt("@SYS55265", _wrkCtrId, fieldPName(WrkCtrResourceGroup, WrkCtrId), tablePName(WrkCtrResourceGroup)));
            }
            else if (!wrkCtrResourceGroup.IsWorkCell)
            {
                isWorkCellValid = checkFailed(strFmt("@SYS135010", _wrkCtrId));
            }
        }

        return isWorkCellValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS133080</DeveloperDocumentation>
	<FormRef>wrkctrresourcegroup</FormRef>
	<Label>@SYS9990</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WrkCtrId</TitleField1>
	<TitleField2>SiteId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>ResourceIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanScheduleGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanScheduleGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LeanWorkCellCapacity</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanWorkCellCapacity</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanActivityResourceRequirement</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PlanActivityResourceRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrResourceGroupPrinterSettings</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrResourceGroupPrinterSettings</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrResourceGroupResource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrResourceGroupResource</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>resourceDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputWMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>resourceDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Locations</Name>
			<Label>@SYS20394</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InputInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputWMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkCell</Name>
			<Label>@SYS131859</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsWorkCell</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InputInventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdInput</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InputWMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdInput</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWorkCell</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>isWorkCell</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutputInventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdOutput</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS133102</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutputWMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdOutput</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdUnitId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS15433</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WrkCtrId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InputInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InputWarehouse</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InputInventLocationId</Name>
					<Field>InputInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InputWMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InputLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InputWMSLocationId</Name>
					<Field>InputWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InputInventLocationId</Name>
					<Field>InputInventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutputInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OutputWarehouse</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutputInventLocationId</Name>
					<Field>OutputInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutputWMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OutputLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutputWMSLocationId</Name>
					<Field>OutputWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutputInventLocationId</Name>
					<Field>OutputInventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdUnitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdUnitId</Name>
					<Field>ProdUnitId</Field>
					<RelatedField>ProdUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdUnitIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Resource</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Site</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Site</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SiteId</Name>
					<Field>SiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>