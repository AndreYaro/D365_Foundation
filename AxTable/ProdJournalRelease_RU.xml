<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalRelease_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalRelease_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        InventUpd_Estimated estimated;

        ttsbegin;

        if (this.isPosted())
        {
            InventReportDimHistory::deleteFromProdJournalRelease_RU(this);
        }
        else
        {
            if (this.Voucher && this.numOfVoucherLines() == 0)
            {
                JournalError::deleteVoucher(tableNum(ProdJournalTable), this.JournalId, this.Voucher);
            }

            this.ReleaseQty = 0;

            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
            estimated.updateNow();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventByProduct</Name>
				<Source><![CDATA[
    public void initFromInventByProduct(InventByProductTable_RU _inventByProductTable)
    {
        this.ItemId         = _inventByProductTable.ItemIdByProd;
        this.initFromInventTable(this.inventTable());

        this.InventDimId    = _inventByProductTable.InventDimIdByProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDim   inventDim;
        InventDim   inventDimDefault;
        ProdTable   prodTable;

        prodTable       = ProdTable::find(this.ProdId);
        this.ItemId     = _inventTable.ItemId;
        this.DefaultDimension = this.copyDimension(
            LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(prodTable.DefaultDimension, _inventTable.DefaultDimension, this.DefaultDimension));
        this.UnitId     = InventTableModule::find(_inventTable.ItemId, ModuleInventPurchSales::Invent).UnitId;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        inventDimDefault.InventSiteId = prodTable.inventDim().InventSiteId;

        inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Invent, inventDimDefault);

        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalRelease</Name>
				<Source><![CDATA[
    public void initFromProdJournalRelease(ProdJournalRelease_RU _prodJournalRelease)
    {
        this.TransDate        = _prodJournalRelease.TransDate;
        this.ProdId           = _prodJournalRelease.ProdId;
        this.OprNum           = _prodJournalRelease.OprNum;
        this.DefaultDimension = _prodJournalRelease.DefaultDimension;
        this.InventDimId      = _prodJournalRelease.InventDimId;
        this.ReleaseKindId    = _prodJournalRelease.ReleaseKindId;
        this.ReleaseQty       = _prodJournalRelease.ReleaseQty;
        this.UnitId           = _prodJournalRelease.UnitId;
        this.ItemId           = _prodJournalRelease.ItemId;
        this.Storno           = _prodJournalRelease.Storno;
        this.Cancelled        = _prodJournalRelease.Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalTable</Name>
				<Source><![CDATA[
    public void initFromProdJournalTable(ProdJournalTable _prodJournalTable)
    {
        JournalTableData journalTableData  = JournalTableData::newTable(_prodJournalTable);

        journalTableData.journalStatic().newJournalTransData(this, journalTableData).initFromJournalTable();

        this.ProdId = _prodJournalTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdReleaseKindId</Name>
				<Source><![CDATA[
    public void initFromProdReleaseKindId()
    {
        InventDim                   inventDim;
        ProdReleaseKindTable_RU     prodReleaseKindTable;
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;

        prodReleaseKindTable = ProdReleaseKindTable_RU::find(this.ReleaseKindId);

        inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.ItemId, fieldNum(InventDim, InventLocationId));

        if (prodReleaseKindTable.InventLocationId && inventDimGroupFieldSetup.isActive())
        {
            if (this.InventDimId)
            {
                inventDim = InventDim::find(this.InventDimId);
            }

            inventDim.InventLocationId = prodReleaseKindTable.InventLocationId;
            this.setInventDimIdFromInventDim(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdReleaseTrans</Name>
				<Source><![CDATA[
    public void initFromProdReleaseTrans(ProdReleaseTrans_RU _prodReleaseTrans)
    {
        this.ProdId           = _prodReleaseTrans.ProdId;
        this.OprNum           = _prodReleaseTrans.OprNum;
        this.InventDimId      = _prodReleaseTrans.InventDimId;
        this.ReleaseKindId    = _prodReleaseTrans.ReleaseKindId;
        this.UnitId           = _prodReleaseTrans.UnitId;
        this.ItemId           = _prodReleaseTrans.ItemId;
        this.ReleaseQty       = -_prodReleaseTrans.ReleaseQty;
        this.TransDate        = _prodReleaseTrans.DateWIP;
        this.Cancelled        = _prodReleaseTrans.Cancelled;
        this.DefaultDimension = _prodReleaseTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ProdId = _prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _dropEstimated = false)
    {
        InventUpd_Estimated         estimated;
        InventDim                   inventDim = this.inventDim();
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;

        ttsbegin;
        inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.ItemId, fieldNum(InventDim, InventLocationId));

        if (inventDim.InventLocationId && !inventDimGroupFieldSetup.isActive())
        {
            inventDim.InventLocationId = '';
            this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        }

        if (! this.LineNum)
        {
            this.LineNum = ProdJournalRelease_RU::lastLineNum(this.JournalId) + 1;
        }

        this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        if (!_dropEstimated)
        {
            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
            estimated.updateNow();
        }

        super();

        if (estimated)
        {
            estimated.updateOwnerRelationship();

            estimated.updateReservation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public InventMovement inventMovement()
    {
        return new InventMov_ProdJournalRelease_RU(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReleaseQty</Name>
				<Source><![CDATA[
    public InventQty inventReleaseQty()
    {
        UnitOfMeasureSymbol             inventUnitId = this.inventTable().inventTableModuleInvent().UnitId;
        UnitOfMeasureDecimalPrecision   decimalPrecision = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::findBySymbol(inventUnitId).RecId);

        if (this.UnitId == inventUnitId)
        {
            return decRound(this.ReleaseQty, decimalPrecision);
        }

        return decRound(EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																							  this.InventDimId,
																							  this.ReleaseQty,
																							  this.UnitId,
																							  inventUnitId,
																							  NoYes::Yes),
						decimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperNumMandatory</Name>
				<Source><![CDATA[
    public boolean isOperNumMandatory()
    {
        ProdTable               prodTable;
        InventDim               mainItemInventDim, byProdItemInventDim;

        InventByProductTable_RU inventByProductTable;
        ProdReleaseKindTable_RU prodReleaseKindTable = ProdReleaseKindTable_RU::find(this.ReleaseKindId);

        switch (prodReleaseKindTable.ReleaseCalcPrinciple)
        {
            case ProdReleaseCalcPrinciple_RU::FixedPrice :
                return false;

            case ProdReleaseCalcPrinciple_RU::Calculated :
                return true;

            case ProdReleaseCalcPrinciple_RU::ByProduct  :
                prodTable = this.prodTable();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(prodTable.ItemId, prodTable.inventDim(), mainItemInventDim);
                mainItemInventDim = InventDim::findDim(mainItemInventDim);

                EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, this.inventDim(), byProdItemInventDim);
                byProdItemInventDim = InventDim::findDim(byProdItemInventDim);

                inventByProductTable = InventByProductTable_RU::find(prodTable.ItemId,
                                                                     mainItemInventDim.InventDimId,
                                                                     this.ItemId,
                                                                     byProdItemInventDim.InventDimId);

                switch (inventByProductTable.ByProdCosting)
                {
                    case ProdByProdCosting_RU::FixedPrice :
                        return false;

                    case ProdByProdCosting_RU::Calculated :
                        return true;
                }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    public NoYes isPosted()
    {
        return ProdJournalTable::isPosted(this.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    public boolean isScrap()
    {
        return this.RecId &&
               this.prodReleaseKindTable().Autodeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display ItemNameDisplay itemName()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    ///    field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    ///    optional.
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>dimensionMerge</c> object that was initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    ///    this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        UnitOfMeasureSymbol unitID;
        ProdRoute           prodRoute;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProdJournalRelease_RU, ReleaseQty):
            case fieldNum(ProdJournalRelease_RU, UnitId):
                unitID = this.UnitId ? this.UnitId : this.inventTable().inventTableModuleInvent().UnitId;
                this.ReleaseQty = decRound(this.ReleaseQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::findBySymbol(unitID).RecId));
                break;

            case fieldNum(ProdJournalRelease_RU, ReleaseKindId):
                this.initFromProdReleaseKindId();
                break;

            case fieldNum(ProdJournalRelease_RU, OprNum):
                if (this.OprNum)
                {
                    select firstonly RecId from prodRoute
                        where prodRoute.ProdId == this.ProdId
                           && prodRoute.OprNum == this.OprNum;

                    if (prodRoute.RecId == 0)
                    {
                        checkFailed(strFmt("@SYS112224",
                            this.OprNum,
                            new DictField(tableNum(ProdJournalRelease_RU), fieldNum(ProdJournalRelease_RU, OprNum)).label(),
                            new DictTable(tableNum(ProdRoute)).label()));

                        this.OprNum = 0;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfVoucherLines</Name>
				<Source><![CDATA[
    public Integer numOfVoucherLines()
    {
        return any2int((select count(RecId) from prodJournalRelease_RU
                            where prodJournalRelease_RU.JournalId == this.JournalId &&
                                  prodJournalRelease_RU.Voucher   == this.Voucher).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTable</Name>
				<Source><![CDATA[
    public ProdJournalTable prodJournalTable(boolean _forupdate = false)
    {
        return ProdJournalTable::find(this.JournalId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodReleaseKindTable</Name>
				<Source><![CDATA[
    public ProdReleaseKindTable_RU prodReleaseKindTable(boolean _forupdate = false)
    {
        return ProdReleaseKindTable_RU::find(this.ReleaseKindId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        return ProdTable::find(this.ProdId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueInventTransId</Name>
				<Source><![CDATA[
    public str queryValueInventTransId()
    {
        str s;

        s = '(';
        s += '((' + fieldStr(ProdJournalRelease_RU, InventTransId) + ' == \"' + this.InventTransId + '\"))';
        if (this.AutodetectionInventTransId && this.AutodetectionInventTransId != this.InventTransId)
        {
            s += ' || ';
            s += '((' + fieldStr(ProdJournalRelease_RU, InventTransId) + ' == \"' + this.AutodetectionInventTransId + '\"))';
        }

        s += ')';

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim inventDim;
        InventDim currentInventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        currentInventDim = this.InventDimId == inventDim.InventDimId ? inventDim : this.inventDim();
        inventDim.setInventSiteFromParentIfModified(this, currentInventDim);
        this.InventDimId = inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _dropEstimated = false)
    {
        InventUpd_Estimated estimated;

        ttsbegin;

        if (!_dropEstimated)
        {
            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
            estimated.updateNow();
        }

        super();

        if (estimated)
        {
            estimated.updateReservation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (!this.ReleaseQty)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(ProdJournalRelease_RU), fieldNum(ProdJournalRelease_RU, ReleaseQty))));
            }

            if (!this.UnitId)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(ProdJournalRelease_RU), fieldNum(ProdJournalRelease_RU, UnitId))));
            }

            if (this.ReleaseKindId && this.prodReleaseKindTable().IsReject == NoYes::Yes)
            {
                if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
																								  this.InventDimId,
																								  this.UnitId,
																								  this.prodTable().inventTable().inventUnitId()))
                {
                    ret = checkFailed(strFmt("@SYS28690", this.UnitId, this.prodTable().inventTable().inventUnitId()));
                }
            }

            if (! this.OprNum && this.isOperNumMandatory())
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(ProdJournalRelease_RU), fieldNum(ProdJournalRelease_RU, OprNum))));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingPosting</Name>
				<Source><![CDATA[
    static boolean checkNotMissingPosting(ProdId _prodId)
    {
        ProdJournalTable        prodJournalTable;
        ProdJournalRelease_RU   prodJournalRelease;

        boolean                 ok = true;

        if (ProdTable::find(_prodId).useReleaseFromProduction_RU())
        {
            while select prodJournalRelease
                group by JournalId
                where prodJournalRelease.ProdId == _prodId
                exists join prodJournalTable
                    where prodJournalTable.JournalId    == prodJournalRelease.JournalId                 &&
                          prodJournalTable.JournalType  == ProdJournalType::ReleaseFromProduction_RU    &&
                          prodJournalTable.Posted       == NoYes::No
            {
                ok = checkFailed(strFmt("@SYS69105", ProdJournalType::ReleaseFromProduction_RU, prodJournalRelease.JournalId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProdIdLines</Name>
				<Source><![CDATA[
    static void deleteProdIdLines(ProdId _prodId)
    {
        ProdJournalTable        prodJournalTable;
        ProdJournalTableData    prodJournalTableData = JournalTableData::newTable(prodJournalTable);

        ProdJournalRelease_RU   prodJournalRelease;
        ProdJournalTransData    prodJournalTransData;

        ttsbegin;

        while select forupdate forceplaceholders prodJournalRelease
            index hint LineIdx
            where prodJournalRelease.ProdId == _prodId
        join forupdate prodJournalTable
            index hint JournalIdx
            where prodJournalTable.JournalId    == prodJournalRelease.JournalId  &&
                  prodJournalTable.Posted       == NoYes::No
        {
            if (! prodJournalTransData)
            {
                prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalRelease,prodJournalTableData);
            }

            prodJournalTransData.delete();
            prodJournalTableData.journalTable().update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ProdJournalRelease_RU find(ProdJournalIdRelease_RU   _journalId,
                                      LineNum                   _lineNum,
                                      boolean                   _forUpdate = false)
    {
        ProdJournalRelease_RU prodJournalRelease;

        prodJournalRelease.selectForUpdate(_forUpdate);

        if (_journalId && _lineNum)
        {
            select firstonly prodJournalRelease
                where prodJournalRelease.JournalId  == _journalId &&
                      prodJournalRelease.LineNum    == _lineNum;
        }

        return prodJournalRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static ProdJournalRelease_RU findRecId(RefRecId _recId,
                                           boolean  _forUpdate = false)
    {
        ProdJournalRelease_RU prodJournalRelease;

        prodJournalRelease.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly prodJournalRelease
                index hint LineIdx
                where prodJournalRelease.RecId == _recId;
        }

        return prodJournalRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineCount</Name>
				<Source><![CDATA[
    static Counter journalLineCount(ProdJournalId _prodJournalId)
    {
        return any2int((select count(RecId) from prodJournalRelease_RU
                            index hint LineIdx
                            where prodJournalRelease_RU.JournalId == _prodJournalId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum lastLineNum(ProdJournalId _journalId)
    {
        return (select maxof(LineNum) from prodJournalRelease_RU
                    where prodJournalRelease_RU.JournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS115765</DeveloperDocumentation>
	<Label>@GLS115765</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Production</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalError</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalError</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutodetectionInventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalLine</Name>
			<Label>@SYS23949</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS3065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Release</Name>
			<Label>@GLS115744</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseKindId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransRefRecId</Name>
			<Label>@SYS72248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetTransRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AutodetectionInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Label>@SYS78245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancelled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Cancelled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalIdRelease_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetTransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReleaseKindId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReleaseKindId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReleaseQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReleaseQty_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Storno</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Storno_RU</ExtendedDataType>
			<Label>@GLS114774</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>JournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>JournalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginAutoDetect</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin_AutoDetect</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AutodetectionInventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>AutodetectionInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JournalError</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124155</EntityRelationshipRole>
			<RelatedTable>JournalError</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JournalError</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefTableId_Extern</Name>
					<RelatedField>RefTableId</RelatedField>
					<Value>50908</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdJournalTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProdJournalIdRelease_RU</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<SourceEDT>ProdJournalIdRelease_RU</SourceEDT>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::ReleaseFromProduction_RU</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalTableJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProdJournalTableJob</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::JobCard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalTableReportFinished</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProdJournalTableReportFinished</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::ReportFinished</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalTableRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProdJournalTableRoute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::RouteCard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdReleaseKindTable_RU</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdReleaseKindTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReleaseKindId</Name>
					<SourceEDT>ProdReleaseKindId_RU</SourceEDT>
					<Field>ReleaseKindId</Field>
					<RelatedField>ReleaseKindId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReleaseKindIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdReleaseTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdReleaseTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdReleaseTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetTransRefRecId</Name>
					<Field>OffsetTransRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>