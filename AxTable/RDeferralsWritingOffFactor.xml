<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RDeferralsWritingOffFactor</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RDeferralsWritingOffFactor extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        RDeferralsFactorCalculation factorCalculation;

        super();

        if (! this.SeqNum)
        {
            ttsbegin;
            factorCalculation = RDeferralsFactorCalculation::findRecId(this.RefRecId, true);
            factorCalculation.Calculated = NoYes::Yes;
            factorCalculation.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && RTax25StdChannel_DeferralFactor::notExistWritingOffTrans(this.DeferralsGroupId,
                                                                              this.rTax25ProfitTable,
                                                                              this.StartDate,
                                                                              this.EndDate);

        if (ret && RDeferralsFactorCalculation::findNextPeriod(RDeferralsFactorCalculation::findRecId(this.RefRecId).EndDate).RecId)
            ret = ret && checkFailed("@GLS107269");

        if (ret && RDeferralsWritingOffFactor::findNextPeriod(this.EndDate,
                                                              this.rTax25ProfitTable,
                                                              this.DeferralsGroupId).RecId)
            ret = ret && checkFailed("@GLS107269");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                     ret;
        RDeferralsFactorCalculation factorCalculation;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(RDeferralsWritingOffFactor, rTax25ProfitTable),
                 fieldnum(RDeferralsWritingOffFactor, DeferralsGroupId),
                 fieldnum(RDeferralsWritingOffFactor, Factor):
                this.NormalizedAmount = 0;
                this.BaseAmount       = 0;
                break;

            case fieldnum(RDeferralsWritingOffFactor, StartDate):
                this.StartDate = dateStartMth(this.StartDate);
                factorCalculation = RDeferralsFactorCalculation::findRecId(this.RefRecId);
                if (this.StartDate < factorCalculation.StartDate
                 || this.StartDate > factorCalculation.EndDate)
                {
                    ret = ret && checkFailed(strfmt("@SYS21589",
                                                    factorCalculation.StartDate,
                                                    factorCalculation.EndDate));
                }
                this.EndDate   = endmth(this.StartDate);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if factor exists.
    /// </summary>
    /// <param name = "_startDate">Start date.</param>
    /// <param name = "_profitTableRecId">Profit table record Id.</param>
    /// <param name = "_deferralsGroupId">Deferral group Id.</param>
    /// <returns>True, if factor exists, othervise false.</returns>
    public static boolean exist(
        TransDate         _startDate,
        RefRecId          _profitTableRecId,
        RDeferralsGroupId _deferralsGroupId)
    {
        return _startDate && _profitTableRecId && _deferralsGroupId &&
            (select firstonly RecId from rDeferralsWritingOffFactor
                 where rDeferralsWritingOffFactor.StartDate         == _startDate
                    && rDeferralsWritingOffFactor.rTax25ProfitTable == _profitTableRecId
                    && rDeferralsWritingOffFactor.DeferralsGroupId  == _deferralsGroupId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCalculatedFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if calculated factor exists.
    /// </summary>
    /// <param name = "_profitTableRecId">Profit table record Id.</param>
    /// <param name = "_deferralsGroupId">Deferral group Id.</param>
    /// <param name = "_statrDate">Start date.</param>
    /// <returns>True, if calculated factor exists, othervise false.</returns>
    public static boolean existCalculatedFactor(
        RefREcId          _profitTableRecId,
        RDeferralsGroupId _deferralsGroupId,
        TransDate         _statrDate)
    {
        RDeferralsFactorCalculation factorCalculation;
        RDeferralsWritingOffFactor  writingOffFactor;

        select firstonly RecId from writingOffFactor
            where writingOffFactor.rTax25ProfitTable == _profitTableRecId
               && writingOffFactor.DeferralsGroupId  == _deferralsGroupId
               && (writingOffFactor.StartDate        >= _statrDate
                || (writingOffFactor.StartDate       <  _statrDate
                 && writingOffFactor.EndDate         >= _statrDate))
            join TableId from factorCalculation
                where factorCalculation.RecId      == writingOffFactor.RefRecId
                   && factorCalculation.Calculated == NoYes::Yes;

        if (writingOffFactor.RecId)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects writing off factor.
    /// </summary>
    /// <param name = "_startDate">Start date.</param>
    /// <param name = "_profitTableRecId">Profit table record Id.</param>
    /// <param name = "_deferralsGroupId">Deferral group Id.</param>
    /// <param name = "_forUpdate">Select mode.</param>
    /// <returns><c>RDeferralsWritingOffFactor</c> object.</returns>
    public static RDeferralsWritingOffFactor find(
        TransDate         _startDate,
        RefRecId          _profitTableRecId,
        RDeferralsGroupId _deferralsGroupId,
        boolean           _forUpdate = false )
    {
        RDeferralsWritingOffFactor rDeferralsWritingOffFactor;

        if (_startDate && _profitTableRecId && _deferralsGroupId)
        {
            rDeferralsWritingOffFactor.selectForUpdate(_forUpdate);

            select firstonly rDeferralsWritingOffFactor
                where rDeferralsWritingOffFactor.StartDate         == _startDate
                   && rDeferralsWritingOffFactor.rTax25ProfitTable == _profitTableRecId
                   && rDeferralsWritingOffFactor.DeferralsGroupId  == _deferralsGroupId;
        }

        return rDeferralsWritingOffFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCalculatedPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deferral writing off factor.
    /// </summary>
    /// <param name = "_runDate">Request date.</param>
    /// <param name = "_profitTableRecId">Profit table record Id.</param>
    /// <param name = "_deferralsGroupId">Deferral group Id.</param>
    /// <returns><c>RDeferralsWritingOffFactor</c> object.</returns>
    public static RDeferralsWritingOffFactor findCalculatedPeriod(
        TransDate         _runDate,
        RefRecId          _profitTableRecId,
        RDeferralsGroupId _deferralsGroupId)
    {
        RDeferralsWritingOffFactor  rDeferralsWritingOffFactor;
        RDeferralsFactorCalculation rDeferralsFactorCalculation;

        if (_runDate && _profitTableRecId && _deferralsGroupId)
        {
            select firstonly rDeferralsWritingOffFactor
                order by StartDate desc
                where rDeferralsWritingOffFactor.StartDate         <= _runDate
                   && rDeferralsWritingOffFactor.EndDate           >= _runDate
                   && rDeferralsWritingOffFactor.rTax25ProfitTable == _profitTableRecId
                   && rDeferralsWritingOffFactor.DeferralsGroupId  == _deferralsGroupId
                join TableId from rDeferralsFactorCalculation
                    where rDeferralsFactorCalculation.RecId  == rDeferralsWritingOffFactor.RefRecId
                       && rDeferralsFactorCalculation.Calculated;
        }

        return rDeferralsWritingOffFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next period deferral writing off factor.
    /// </summary>
    /// <param name = "_runDate">Request date.</param>
    /// <param name = "_profitTableRecId">Profit table record Id.</param>
    /// <param name = "_deferralsGroupId">Deferral group Id.</param>
    /// <returns><c>RDeferralsWritingOffFactor</c> object.</returns>
    public static RDeferralsWritingOffFactor findNextPeriod(
        TransDate         _runDate,
        RefRecId          _profitTableRecId,
        RDeferralsGroupId _deferralsGroupId)
    {
        RDeferralsWritingOffFactor  rDeferralsWritingOffFactor;
        RDeferralsFactorCalculation rDeferralsFactorCalculation;

        if (_runDate && _profitTableRecId && _deferralsGroupId)
        {
            select firstonly rDeferralsWritingOffFactor
                order by StartDate asc
                where rDeferralsWritingOffFactor.StartDate         >  _runDate
                   && rDeferralsWritingOffFactor.rTax25ProfitTable == _profitTableRecId
                   && rDeferralsWritingOffFactor.DeferralsGroupId  == _deferralsGroupId
            join TableId from rDeferralsFactorCalculation
                where rDeferralsFactorCalculation.RecId == rDeferralsWritingOffFactor.RefRecId
                   && rDeferralsFactorCalculation.Calculated;
        }

        return rDeferralsWritingOffFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactor</Name>
				<Source><![CDATA[
    public static RDeferralsSum getFactor(
        TransDate         _startDate,
        RefRecId          _profitTableRecId,
        RDeferralsGroupId _deferralsGroupId)
    {
        RDeferralsWritingOffFactor writingOffFactor = RDeferralsWritingOffFactor::findCalculatedPeriod(_startDate,
                                                                                                       _profitTableRecId,
                                                                                                       _deferralsGroupId);

        if (writingOffFactor.RecId)
            return writingOffFactor.Factor;

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RDeferralsWritingOffFactor</FormRef>
	<Label>@GLS107182</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>StartDate</TitleField1>
	<TitleField2>EndDate</TitleField2>
	<ClusteredIndex>FactorIdx</ClusteredIndex>
	<Modules>RDeferrals</Modules>
	<PrimaryIndex>FactorIdx</PrimaryIndex>
	<ReplacementKey>FactorIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferralsGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormalizedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferralsGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NormalizedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeferralsGroup</Name>
			<Label>@SYS12006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeferralsGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Factor</Name>
			<Label>@SYS5443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Profit</Name>
			<Label>@GLS104167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RefRecId</Name>
			<Label>@SYS22569</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS73028</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeferralsGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RDeferralsGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RDeferralsEndDatePeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Factor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RDeferralsFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NormalizedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS104154</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RTax25ProfitTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ProfitTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25StdSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS2168</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FactorIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeferralsGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RDeferralsFactorCalculation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RDeferralsFactorCalculation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RDeferralsFactorCalculation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RDeferralsWritingOffFactor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RDeferralsGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RDeferralsGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeferralsGroupId</Name>
					<SourceEDT>RDeferralsGroupId</SourceEDT>
					<Field>DeferralsGroupId</Field>
					<RelatedField>DeferralsGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25ProfitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RTax25ProfitTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RDeferralsWritingOffFactor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RTax25ProfitTable</Name>
					<Field>RTax25ProfitTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RTax25StdSeq</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RTax25StdSeq</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ModuleType_Extern</Name>
					<RelatedField>ModuleType</RelatedField>
					<ValueStr>RTax25StdModuleType::Deferrals</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SeqNum</Name>
					<SourceEDT>RTax25StdSeqNum</SourceEDT>
					<Field>SeqNum</Field>
					<RelatedField>SeqNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>