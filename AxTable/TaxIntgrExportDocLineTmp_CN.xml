<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocLineTmp_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxIntgrExportDocLineTmp_CN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayCalculatedSplitAmountTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated total amount on the line.
    /// </summary>
    /// <param name="_exportDoc">
    /// The export document record.
    /// </param>
    /// <returns>
    /// The calculated total amount.
    /// </returns>
    public AmountCur displayCalculatedSplitAmountTotal(TaxIntgrExportDocTmp_CN  _exportDoc)
    {
        TaxIntgrExportDocLineTmp_CN lineLocal;
        AmountCur                   totalAmount;

        lineLocal.setTmpData(this);

        select sum(TransactionCurrencyNetAmount), sum(TransactionCurrencyTaxAmount) from lineLocal
            where lineLocal.TaxIntgrExportDocTmp_CN == _exportDoc.RecId;
        totalAmount = lineLocal.TransactionCurrencyNetAmount + lineLocal.TransactionCurrencyTaxAmount;

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total amount on the line.
    /// </summary>
    /// <returns>
    /// total amount line amount
    /// </returns>
    display AmountCur lineAmount()
    {
        return this.TransactionCurrencyNetAmount + this.TransactionCurrencyTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAmountTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total amount on the line.
    /// </summary>
    /// <param name="_spiltCalc">
    /// The split calculation instance.
    /// </param>
    /// <returns>
    /// total amount line amount
    /// </returns>
    AmountCur splitAmountTotal(TaxIntgrExportDocumentSplitCalc_CN _spiltCalc)
    {
        TaxIntgrExportDocLineTmp_CN lineLocal;
        AmountCur netAmount;
        AmountCur taxAmount;
        AmountCur chargesNetAmount;
        AmountCur chargesTaxAmount;
        AmountCur totalAmount;

        lineLocal.setTmpData(this);

        select sum(Amount) from lineLocal;
        totalAmount = lineLocal.Amount;

        //in case current line is not written
        if (this.Qty != this.orig().Qty)
        {
            [netAmount, taxAmount, chargesNetAmount, chargesTaxAmount] = _spiltCalc.getAmountOfSplitByQty(this.orig());
            totalAmount = totalAmount - netAmount - taxAmount - chargesNetAmount - chargesTaxAmount;
            [netAmount, taxAmount, chargesNetAmount, chargesTaxAmount] = _spiltCalc.getAmountOfSplitByQty(this);
            totalAmount = totalAmount + netAmount + taxAmount + chargesNetAmount + chargesTaxAmount;
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSplitQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the split quantity.
    /// </summary>
    /// <returns>
    /// True if the split quantity is ok; otherwise, false.
    /// </returns>
    public boolean validateSplitQuantity()
    {
        boolean ret = true;

        // the absolute quantity to split shall be less than remaining quantity
        // and direction of quantity shall be same as remaining quantity.
        if (abs(this.Qty) > abs(this.RemainingQty)
            || sign(this.Qty) != sign(this.RemainingQty))
        {
            ret = checkFailed("@SYS4002252");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineToSplitByQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data for split by quantity.
    /// </summary>
    /// <param name="_splitCalc">
    /// Split calculation instance.
    /// </param>
    /// <param name="_lineToSplitTmp">
    /// The data table.
    /// </param>
    public static void initLineToSplitByQuantity(
        TaxIntgrExportDocumentSplitCalc_CN  _splitCalc,
        TaxIntgrExportDocLineTmp_CN         _lineToSplitTmp)
    {
        Map lineCopyMap = _splitCalc.getExportDocSourceLineCopyMap();
        Map accLineCopyMap = _splitCalc.getAccumlatedExpDocSrcLineCopyMap();
        MapEnumerator   lineMapEnum;

        TaxIntgrExportDocLineTmp_CN sourceLineCopy;
        TaxIntgrExportDocLineTmp_CN accumulatedLines;

        ttsBegin;

        lineMapEnum = lineCopyMap.getEnumerator();
        while (lineMapEnum.moveNext())
        {
            sourceLineCopy = lineMapEnum.currentValue();
            accumulatedLines = accLineCopyMap.lookup(sourceLineCopy.TaxIntgrExportDocumentSourceLine_CN);

            if (abs(sourceLineCopy.Qty) > abs(accumulatedLines.Qty))
            {
                _lineToSplitTmp.clear();
                _lineToSplitTmp.TransactionCurrencyNetAmount = 0;
                _lineToSplitTmp.TransactionCurrencyTaxAmount = 0;
                _lineToSplitTmp.Qty = 0;
                _lineToSplitTmp.RemainingAmount =
                    sourceLineCopy.TransactionCurrencyNetAmount + sourceLineCopy.TransactionCurrencyTaxAmount
                    + sourceLineCopy.TransactionCurrencyMiscChargesNetAmount + sourceLineCopy.TransactionCurrencyMiscChargesTaxAmount
                    - accumulatedLines.TransactionCurrencyNetAmount - accumulatedLines.TransactionCurrencyTaxAmount
                    - accumulatedLines.TransactionCurrencyMiscChargesNetAmount - accumulatedLines.TransactionCurrencyMiscChargesTaxAmount;
                _lineToSplitTmp.RemainingQty = sourceLineCopy.Qty - accumulatedLines.Qty;
                _lineToSplitTmp.TaxIntgrExportDocumentSourceLine_CN = sourceLineCopy.TaxIntgrExportDocumentSourceLine_CN;
                _lineToSplitTmp.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineToSplitByQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data of split by quantity.
    /// </summary>
    /// <param name="_lineToSplitTmp">
    /// The data of split by quantity.
    /// </param>
    /// <returns>
    /// True if the data of split by quantity is fine; otherwise, false.
    /// </returns>
    public static boolean validateLineToSplitByQuantity(TaxIntgrExportDocLineTmp_CN _lineToSplitTmp)
    {
        boolean ret = true;
        boolean someQuantityToSplit = false;
        TaxIntgrExportDocLineTmp_CN lineToSplitTmpLocal;

        lineToSplitTmpLocal.setTmpData(_lineToSplitTmp);

        select firstOnly lineToSplitTmpLocal
            where lineToSplitTmpLocal.Qty != 0;
        if (lineToSplitTmpLocal)
        {
            someQuantityToSplit = true;
        }

        if (!someQuantityToSplit)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4002207</DeveloperDocumentation>
	<Label>@SYS4002206</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Qty</TitleField1>
	<TitleField2>TransactionCurrencyNetAmount</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyNetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyTaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyMiscChargesNetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyMiscChargesTaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxIntgrExportDocumentQty_CN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainingAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainingQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxIntgrExportDocumentQty_CN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxIntgrExportDocTmp_CN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxIntgrExportDocumentSourceLine_CN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyNetAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS180832</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyTaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LineAmountTax</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyMiscChargesNetAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyMiscChargesTaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LineAmountTax</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExportDoc</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxIntgrExportDocTmp_CN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExportDocumentSource</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxIntgrExportDocumentSourceLine_CN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxIntgrExportDocTmp_CN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxIntgrExportDocTmp_CN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxIntgrExportDocTmp_CN</Name>
					<Field>TaxIntgrExportDocTmp_CN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxIntgrExportDocumentSourceLine_CN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxIntgrExportDocumentSourceLine_CN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxIntgrExportDocumentSourceLine_CN</Name>
					<Field>TaxIntgrExportDocumentSourceLine_CN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>