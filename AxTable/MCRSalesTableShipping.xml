<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesTableShipping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRSalesTableShipping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SalesTable          salesTable;
        DlvMode             dlvMode;
        MCROrderEventTable  mcrOrderEventTable;

        if (this.SalesTable)
        {
            // only insert if the FK is valid
            super();

            // Only insert expedite order event if order's expedite status differs
            // from delivery mode's expedite default.
            select firstonly SalesId, PackedExtensions from salesTable
                where salesTable.RecId == this.SalesTable
                exists join  dlvMode
                where salesTable.DlvMode == dlvMode.Code
                     && dlvMode.mcrExpedite != this.Expedite;

            if (salesTable)
            {
                mcrOrderEventTable.insertExpediteEvent(salesTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        MCROrderEventTable mcrOrderEventTable;
        MCRSalesTableShipping mcrSalesTableShipping_Orig;

        if (this.SalesTable)
        {
            mcrSalesTableShipping_Orig = this.orig();

            // only update if the FK is valid
            super();

            // Insert expedite order event
            if (mcrSalesTableShipping_Orig.Expedite != this.Expedite)
            {
                mcrOrderEventTable.insertExpediteEvent(SalesTable::findRecId(this.SalesTable));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMCRSalesTableShippingUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the table can and needs to be written.
    /// </summary>
    /// <returns>
    /// true if the table needs to be written; otherwise, false.
    /// </returns>
    public boolean validateMCRSalesTableShippingUsed()
    {
        if (this.Expedite
            || this.PriceDiscGroup != MCRPriceDiscGroupType::Standard
            || this.ShipComplete)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.SalesTable)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>MCRSalesTableShipping</c> using the passed sales ID of the <c>SalesTable</c>.
    /// </summary>
    /// <param name="_salesId">
    /// A sales ID of a <c>SalesTable</c> record used to find the <c>MCRSalesTableShipping</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRSalesTableShipping</c> record found.
    /// </returns>
    public static MCRSalesTableShipping findSalesId(SalesId          _salesId,
                                            boolean          _forUpdate = false,
                                            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        MCRSalesTableShipping  mcrSalesTableShipping;
        SalesTable salesTable;

        if (_salesId)
        {
            if (_forUpdate)
            {
                mcrSalesTableShipping.selectForUpdate (_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    mcrSalesTableShipping.concurrencyModel(_concurrencyModel);
                }
            }
            mcrSalesTableShipping.selectLocked    (_forUpdate);

            select firstonly RecId from salesTable
                where salesTable.SalesId == _salesId
                join mcrSalesTableShipping
                    where mcrSalesTableShipping.SalesTable == salesTable.RecId;
        }

        return mcrSalesTableShipping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpediteStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the expedited status of an order.
    /// </summary>
    /// <param name="_salesTableRecId">
    /// The record ID of the sales order.
    /// </param>
    /// <returns>
    /// The expedite status of an order.
    /// </returns>
    public static MCRExpedite getExpediteStatus(RecId _salesTableRecId)
    {
        MCRSalesTableShipping   mcrSalesTableShipping;

        select firstonly Expedite from mcrSalesTableShipping
            where mcrSalesTableShipping.SalesTable == _salesTableRecId;

        return mcrSalesTableShipping.Expedite;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRCallCenter</ConfigurationKey>
	<DeveloperDocumentation>@SYS124484</DeveloperDocumentation>
	<Label>@MCR:CallCenterSalesOrderShippingLabel</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>Expedite</TitleField1>
	<TitleField2>ShipComplete</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>SalesTableIdx</ClusteredIndex>
	<Modules>TransactionsAndOrders</Modules>
	<ReplacementKey>SalesTableIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Expedite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Expedite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceDiscGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Expedite</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRExpedite</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceDiscGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRPriceDiscGroupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTable</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MCRSalesTableRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipComplete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR20790</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>SalesTable</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRExpediteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRExpediteTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Expedite</Name>
					<SourceEDT>MCRExpedite</SourceEDT>
					<Field>Expedite</Field>
					<RelatedField>MCRExpedite</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExpediteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTable</Name>
					<Field>SalesTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>