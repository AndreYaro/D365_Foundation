<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCommitmentCloseTemp_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchCommitmentCloseTemp_PSN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current instance of the <c>PurchCommitmentCloseTemp_PSN</c> table with
    /// commitment lines that are available to be closed.
    /// </summary>
    /// <param name="_purchCommitmentNumber_PSN">
    /// An optional parameter that allows the caller to specify a commitment to load lines for.
    /// If this parameter has a value then only lines from the specified commitment will be loaded into the table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fillTable(PurchCommitmentNumber_PSN _purchCommitmentNumber_PSN = '')
    {
        ttsBegin;

        delete_from this;

        if (strLen(_purchCommitmentNumber_PSN) > 0)
        {
            this.fillWithSingleCommitment(_purchCommitmentNumber_PSN);
        }
        else
        {
            this.fillWithMultipleCommitments();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWithMultipleCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current instance of the <c>PurchCommitmentCloseTemp_PSN</c>
    /// table with commitment lines that are eligible to be closed.
    /// </summary>
    /// <param name="_oneRecordPerHeader">
    /// A <c>boolean</c> value that determines whether only one record should
    /// be inserted for each header or all eligible lines should be inserted.
    /// </param>
    /// <remarks>
    /// The <c>_oneRecordPerHeader</c> parameter is mainly intended for use when filling
    /// a lookup with commitments that have closable lines.  We only want to insert
    /// one record per commitment so there doesn't appear to be duplicates in the lookup.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fillWithMultipleCommitments(boolean _oneRecordPerHeader = false)
    {
        PurchCommitmentHeader_PSN   purchCommitmentHeader;
        PurchCommitmentLine_PSN     purchCommitmentLine;
        SourceDocumentLine          sourceDocumentLine;
        RefRecId                    prevCommitmentRecId     = 0;

        while select RecId, CommitmentNumber, DocumentStatus, Name from purchCommitmentHeader
            order by purchCommitmentHeader.RecId
            where purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Complete
        join LineNumber, LedgerDimension, RecId, SourceDocumentLine, DraftAmount, PurchCommitmentHeader_PSN from purchCommitmentLine
            where purchCommitmentLine.PurchCommitmentHeader_PSN == purchCommitmentHeader.RecId
        exists join sourceDocumentLine
            where sourceDocumentLine.RecId == purchCommitmentLine.SourceDocumentLine
                && sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Finalized
        {
            if (_oneRecordPerHeader)
            {
                if ((purchCommitmentHeader.RecId != prevCommitmentRecId)
                    && (this.insertCommitmentWithBalance(purchCommitmentHeader, purchCommitmentLine)))
                {
                    prevCommitmentRecId = purchCommitmentHeader.RecId;
                }
            }
            else
            {
                this.insertCommitmentWithBalance(purchCommitmentHeader, purchCommitmentLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWithSingleCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current instance of the <c>PurchCommitmentCloseTemp_PSN</c> table with commitment lines
    /// that are eligible to be closed and are associated with the passed in <c>PurchCommitmentNumber_PSN</c> value.
    /// </summary>
    /// <param name="_purchCommitmentNumber_PSN">
    /// The <c>PurchCommitmentNumber_PSN</c> value of the commitment to fill the table with.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fillWithSingleCommitment(PurchCommitmentNumber_PSN _purchCommitmentNumber_PSN)
    {
        PurchCommitmentHeader_PSN   purchCommitmentHeader;
        PurchCommitmentLine_PSN     purchCommitmentLine;
        SourceDocumentLine          sourceDocumentLine;

        while select RecId, CommitmentNumber, DocumentStatus, Name from purchCommitmentHeader
            where purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Complete
                && purchCommitmentHeader.CommitmentNumber == _purchCommitmentNumber_PSN
        join LineNumber, LedgerDimension, RecId, SourceDocumentLine, DraftAmount, PurchCommitmentHeader_PSN from purchCommitmentLine
            where purchCommitmentLine.PurchCommitmentHeader_PSN == purchCommitmentHeader.RecId
        exists join sourceDocumentLine
            where sourceDocumentLine.RecId == purchCommitmentLine.SourceDocumentLine
                && sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Finalized
        {
            this.insertCommitmentWithBalance(purchCommitmentHeader, purchCommitmentLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCommitmentWithBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the current instance of the <c>PurchCommitmentCloseTemp_PSN</c> table
    /// with the values in the passed in parameters.
    /// </summary>
    /// <param name="_purchCommitmentHeader">
    /// A <c>PurchCommitmentHeader_PSN</c> table buffer loaded with data to insert into the
    /// current instance of the <c>PurchCommitmentCloseTemp_PSN</c> table.
    /// </param>
    /// <param name="_purchCommitmentLine">
    /// A <c>PurchCommitmentLine_PSN</c> table buffer loaded with data to insert into the
    /// current instance of the <c>PurchCommitmentCloseTemp_PSN</c> table.
    /// </param>
    /// <returns>
    /// true if the commmitment was inserted; otherwise, false.
    /// </returns>
    private boolean insertCommitmentWithBalance(PurchCommitmentHeader_PSN _purchCommitmentHeader, PurchCommitmentLine_PSN _purchCommitmentLine)
    {
        if (PurchCommitmentBalanceSummaryCalc_PSN::getBalancesForBalanceSummaryForm( _purchCommitmentLine).AvailableBalance > 0)
        {
            ttsBegin;

            this.PurchCommitmentHeader_PSN  = _purchCommitmentHeader.RecId;
            this.CommitmentNumber           = _purchCommitmentHeader.CommitmentNumber;
            this.Name                       = _purchCommitmentHeader.Name;
            this.DocumentStatus             = _purchCommitmentHeader.DocumentStatus;
            this.LineNumber                 = _purchCommitmentLine.LineNumber;
            this.LedgerDimension            = _purchCommitmentLine.LedgerDimension;
            this.PurchCommitmentLine_PSN    = _purchCommitmentLine.RecId;
            this.insert();

            ttsCommit;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of Commitment records that are able to be closed.
    /// </summary>
    /// <param name="_control">
    /// The control that the lookup is being performed for.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupCommitments(FormStringControl _control)
    {
        SysTableLookup                  sysTableLookup             = SysTableLookup::newParameters(tableNum(PurchCommitmentCloseTemp_PSN), _control, false);
        PurchCommitmentCloseTemp_PSN    purchCommitmentCloseTemp;

        sysTableLookup.addLookupfield(fieldNum(PurchCommitmentCloseTemp_PSN, CommitmentNumber));
        sysTableLookup.addLookupfield(fieldNum(PurchCommitmentCloseTemp_PSN, Name));

        purchCommitmentCloseTemp.fillWithMultipleCommitments(true);

        sysTableLookup.parmTmpBuffer(purchCommitmentCloseTemp);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@SPS2364</DeveloperDocumentation>
	<Label>@SPS2109</Label>
	<TitleField1>CommitmentNumber</TitleField1>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommitmentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCommitmentNumber_PSN</ExtendedDataType>
			<Label>@SPS1834</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS1838</Label>
			<EnumType>PurchCommitmentDocumentStatus_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SPS1823</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
			<Label>@SPS1855</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCommitmentName_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchCommitmentHeader_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1834</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchCommitmentLine_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>