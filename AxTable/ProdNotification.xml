<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdNotification</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdNotification extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>notificationImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the image/Symbol of the notification source
    /// </summary>
    /// <returns>
    ///  The image/Symbol of the notification source
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container notificationImage()
    {
        container image = conNull();

        switch (this.SourceType)
        {
            case ProdNotificationSourceType::Employee:
                HCMWorker worker = HCMWorker::find(this.Source) as HCMWorker;
                image = worker.personImage();
                break;

            case ProdNotificationSourceType::Item:
                image = EcoResProductImage::releasedProductImage(InventTable::findByProduct(this.Source)).pack();
                break;

            case ProdNotificationSourceType::Machine:
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::MachiningOperation).pack();
                break;

            case ProdNotificationSourceType::Operation:
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::Operations).pack();
                break;
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates notification for users that have subscribed to given notification rule
    /// </summary>
    /// <param name="_sourceType">
    ///    The <c>ProdNotificationSourceType</c> of the source type.
    /// </param>
    /// <param name="_source">
    ///    The <c>RefRecId</c> of the source invoked the notification.
    /// </param>
    /// <param name="_className">
    ///    The <c>SysClassName</c> class nameof the notification rule.
    /// </param>
    /// <param name="_subject">
    ///    The <c>ProdNotificationMessageSubject</c> subject of the notification.
    /// </param>
    /// <param name="_message">
    ///    The <c>ProdNotificationMessage</c> message of the notification.
    /// </param>
    /// <param name="_level">
    ///    The <c>ProdNotificationLevel</c> level of the notification.
    /// </param>
    /// <param name="_userId">
    ///    The <c>SysUserId</c> userid for which <c>ProdNotification</c> record is being created.
    /// </param>
    public static void createNotification(
        ProdNotificationSourceType _sourceType,
        RefRecId _source,
        SysClassName _className,
        ProdNotificationMessageSubject _subject,
        ProdNotificationMessage _message,
        ProdNotificationLevel _level,
        SysUserId _userId)
    {
        ProdNotification notification = ProdNotification::find(_sourceType, _source, _className, true);

        if (!notification.RecId)
        {
            notification.SourceType = _sourceType;
            notification.Source = _source;
            notification.className = _className;
            notification.Subject = _subject;
            notification.Message = _message;
            notification.Level = _level;
            notification.Active = NoYes::Yes;
            notification.insert();
            ProdNotificationStatus::findOrCreate(notification.RecId, _userId);
        }
        else if ((notification.Active == NoYes::Yes)
             && ((notification.Message != _message) || (notification.Level != _level)))
        {
            notification.Message = _message;
            notification.Level = _level;
            notification.update();
            ProdNotificationStatus::findOrCreate(notification.RecId, _userId);
            ProdNotification::udpateSubscriptionToUnreadForAllUsers(notification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>udpateSubscriptionToUnreadForAllUsers</Name>
				<Source><![CDATA[
    private static void udpateSubscriptionToUnreadForAllUsers(ProdNotification _notification)
    {
        ProdNotificationStatus prodNotificationStatus;

        update_recordset prodNotificationStatus
            setting
                IsRead = NoYes::No
            where prodNotificationStatus.ProdNotification == _notification.RecId
               && prodNotificationStatus.IsRead == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>ProdNotification</c> record with a given Source and message combination.
    /// </summary>
    /// <param name="_sourceType">
    ///    The <c>ProdNotificationSourceType</c> of the source type.
    /// </param>
    /// <param name="_source">
    ///    The <c>RefRecId</c> of the source invoked the notification.
    /// </param>
    /// <param name="_className">
    ///    The <c>SysClassName</c> class nameof the notification rule.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///  The <c>ProdNotification</c> record if found else null buffer.
    /// </returns>
    public static ProdNotification find(
        ProdNotificationSourceType _sourceType,
        RefRecId _source,
        SysClassName _className,
        boolean _forUpdate = false)
    {
        ProdNotification notification;

        if (_source && _className)
        {
            select firstonly notification
                where notification.SourceType   == _sourceType
                   && notification.Source       == _source
                   && notification.className    == _className;
        }

        if (notification.RecId != 0 && _forUpdate)
        {
            notification.selectforupdate(true);
        }

        return notification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<TitleField1>Subject</TitleField1>
	<TitleField2>Message</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProductionControl</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdNotificationStatus</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Message</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProdNotificationSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClassName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysClassName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Subject</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Prod</ConfigurationKey>
			<ExtendedDataType>ProdNotificationMessageSubject</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Message</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdNotificationMessage</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24676</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdNotificationLevel</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ClassName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Source</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>