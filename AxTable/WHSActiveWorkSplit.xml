<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSActiveWorkSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSActiveWorkSplit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSActiveWorkSplit</c> record based on the parameters.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <returns>A <c>WHSActiveWorkSplit</c> record.</returns>
    [Hookable(false)]
    internal static WHSActiveWorkSplit create(WHSWorkId  _workId)
    {
        WHSActiveWorkSplit activeWorkSplit;

        activeWorkSplit.WorkId = _workId;
        activeWorkSplit.insert();

        return activeWorkSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record in the table based on the parameters.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    [Hookable(false)]
    internal static void delete(WHSWorkId _workId)
    {
        WHSActiveWorkSplit activeWorkSplit;

        delete_from activeWorkSplit
            where activeWorkSplit.WorkId == _workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSActiveWorkSplit</c> record based on the parameters.
    /// </summary>
    /// <param name = "_workId">A work Id.</param>
    /// <param name = "_forUpdate">A boolean which specifies whether the returned <c>WHSSplitWorkBlock</c> should be selected for update.</param>
    /// <returns>A <c>WHSActiveWorkSplit</c> record.</returns>
    [Hookable(false)]
    internal static WHSActiveWorkSplit find(
        WHSWorkId   _workId,
        boolean     _forUpdate = false)
    {
        WHSActiveWorkSplit activeWorkSplit;
        
        if (_workId)
        {
            activeWorkSplit.selectForUpdate(_forUpdate);
            
            select firstonly activeWorkSplit
                where activeWorkSplit.WorkId == _workId;
        }

        return activeWorkSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkSplitByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current work instance is being split by the passed user.
    /// </summary>
    /// <param name = "_user">The user.</param>
    /// <returns>true if the work is being split by the passed user; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isWorkSplitByUser(str _user)
    {
        return this.CreatedBy == _user;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@WAX:WHSActiveWorkSplitDeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:WHSActiveWorkSplitTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkIdIdx</PrimaryIndex>
	<ReplacementKey>WorkIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWorkTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>