<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCommitmentLine_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchCommitmentLine_PSN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAgreementLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method displays the line number of associated agreement line.
    /// </summary>
    /// <returns>
    /// A <c>LineNum</c> indicating the line number of associated agreement line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display LineNum displayAgreementLineNum()
    {
        LineNum lineNum;

        if (this.AgreementLine)
        {
            lineNum = AgreementLine::find(this.AgreementLine).LineNumber;
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the budget check result value for the record.
/// </summary>
/// <returns>
/// The budget check result value for the record.
/// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public display BudgetCheckResult displayBudgetCheckResult()
{
	return this.getBudgetCheckResult();
}

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchSeqNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method displays the sequence number of associated purchase agreement.
    /// </summary>
    /// <returns>
    /// A <c>PurchAgreementId</c> indicating the sequence number of associated purchase agreement.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display PurchAgreementId displayPurchSeqNumber()
    {
        PurchAgreementId purchAgreementId;

        purchAgreementId = this.getAgreementHeaderForAgreementLine().PurchNumberSequence;

        return purchAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existConfirmedBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a commitment line has an associated confirmed Budget Reservation for Pre-encumbrance
    /// </summary>
    /// <returns>
    /// true if a confirmed Budget Reservation for Pre-encumbrance exists for the commitment line; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existConfirmedBudgetReservation()
    {
        BudgetSourceInquiryDetails  budgetDetails;
        BudgetSourceTrackingStatus  budgetTrackingStatus;
        BudgetSource                budgetSource;
        BudgetSourceTracking        budgetSourceTracking;

        budgetDetails = BudgetSourceSourceDocumentLine::getBudgetSourceInquiryDetails(SourceDocumentLine::find(this.SourceDocumentLine));

        if (budgetDetails)
        {
            budgetTrackingStatus  = budgetDetails.getStatus();

            if (budgetTrackingStatus == BudgetSourceTrackingStatus::Confirmed)
            {
                return true;
            }
            else
            {
                //BudgetSourceInquiryDetails does not contain information about budget reservations that were confirmed prior to the commitment being revised, need to check
                //if a confirmed budget reservation ever existed for the commitment line
                select firstonly RecId from budgetSource
                    where budgetSource.SourceDocumentLine == this.SourceDocumentLine;
                select firstonly RecId from budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId
                    && budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed;

                return budgetSourceTracking.RecId;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source document line state to finalized.
    /// </summary>
    /// <returns>
    /// true if the document line state is updated; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean finalizeSourceDocumentLine()
    {
        boolean isDocLineStateUpdated;

        if (this.isCommitmentRefByUnConfirmedDocs())
        {
            checkFailed(strFmt("@SPS2469",this.getPurchCommitmentHeader_PSN().CommitmentNumber));
        }
        else
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Finalized);
            this.getPurchCommitmentHeader_PSN(true).closeCommitmentHeader();
            isDocLineStateUpdated = true;
        }
        return isDocLineStateUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the accounting distribution record for the current commitment line.
    /// </summary>
    /// <returns>
    /// The accounting distribution record that is related to the current commitment line.
    /// </returns>
    /// <remarks>
    /// Commitment lines only have a single distribution, so the first distribution returned is always the only distribution for the commitment line.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingDistribution getAccountingDistribution()
    {
        AccountingDistribution  accountingDistribution;

        select firstonly accountingDistribution
            order by accountingDistribution.RecId desc
                where accountingDistribution.SourceDocumentLine == this.SourceDocumentLine;

        return accountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeaderForAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the agreement header record that the current <c>AgreementLine</c> record is associated with.
    /// </summary>
    /// <param name="_forUpdate">
    /// Specifies if the record is to be fetched for update.
    /// </param>
    /// <returns>
    /// The agreement header record that the current <c>AgreementLine</c> record is associated with.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PurchAgreementHeader getAgreementHeaderForAgreementLine(boolean _forUpdate = false)
    {
        PurchAgreementHeader    header;

        if (this.AgreementLine)
        {
            header = PurchAgreementHeader::find(AgreementLine::find(this.AgreementLine).Agreement, _forUpdate);
        }

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the given <c>PurchCommitmentLine_PSN</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetCheckResult</c> value which is calculated using the query.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult()
    {
        return BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumedAmountFromDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the commitment line's consumed amount using the accounting distributions.
    /// </summary>
    /// <returns>
    /// The consumed amount of the commitment line in the currency that budgeting uses.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount getConsumedAmountFromDistributions()
    {
        AccountingDistribution              consumedAmountDistribution;
        AccountingDistribution              consumedAmountReversingDistribution;
        AccountingDistribution              commitmentLineDistribution;
        AccountingDistribution              sourceDocumentLineDistribution;
        AccountingDistributionTmpSum_PSN    accountingDistributionTmpSum;
        Amount                              consumedTransactionAmountInBudgetCurrency;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        VendInvoiceInfoTable                vendInvoiceInfoTable;

        sourceDocumentLineDistribution = this.getAccountingDistribution();

        // Fill the temp table with the distributions to be summed.
        while select commitmentLineDistribution
            where commitmentLineDistribution.Sourcedocumentline     == sourceDocumentLineDistribution.SourceDocumentLine
        join TransactionCurrency, AccountingLegalEntity, AccountingDate, TransactionCurrencyAmount, SourceDocumentLine from consumedAmountDistribution
            where consumedAmountDistribution.ReferenceDistribution  == commitmentLineDistribution.RecId
            && consumedAmountDistribution.ReferenceRole             == AccountingDistributionReferenceRole::Matching
        outer join RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.SourceDocumentLine == consumedAmountDistribution.SourceDocumentLine
        outer join vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                && vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
        notexists join consumedAmountReversingDistribution
            where consumedAmountReversingDistribution.ReferenceDistribution == consumedAmountDistribution.RecId
                && consumedAmountReversingDistribution.ReferenceRole        == AccountingDistributionReferenceRole::Reversing
        {
            if (vendInvoiceInfoTable && vendInvoiceInfoTable.isCreditNote())
            {
                // We do not want to include credit notes in the calculations
                continue;
            }

            accountingDistributionTmpSum.clear();
            accountingDistributionTmpSum.AccountingDate               = consumedAmountDistribution.AccountingDate;
            accountingDistributionTmpSum.AccountingLegalEntity        = consumedAmountDistribution.AccountingLegalEntity;
            accountingDistributionTmpSum.TransactionCurrency          = consumedAmountDistribution.TransactionCurrency;
            accountingDistributionTmpSum.TransactionCurrencyAmount    = consumedAmountDistribution.TransactionCurrencyAmount;
            accountingDistributionTmpSum.topParentSourceDocumentLine  = SourceDocumentLine::findTopParentSourceDocumentLine(consumedAmountDistribution.RecId).RecId;
            accountingDistributionTmpSum.insert();
        }

        // Now actually sum the two temp tables using the correct groupings.
        while select TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from accountingDistributionTmpSum
            group by TransactionCurrency, AccountingLegalEntity, AccountingDate, TopParentSourceDocumentLine
        {
            consumedTransactionAmountInBudgetCurrency += accountingDistributionTmpSum.transactionAmountInBudgetingCurrency();
        }

        return consumedTransactionAmountInBudgetCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchCommitmentHeader_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the commitment header record that the current <c>PurchCommitmentLine_PSN</c> record is associated with.
    /// </summary>
    /// <param name="_forupdate">
    /// true if the record should be selected for updated; otherwise, false.
    /// </param>
    /// <returns>
    /// The commitment header record that the current <c>PurchCommitmentLine_PSN</c> record is associated with.
    /// </returns>
    public PurchCommitmentHeader_PSN getPurchCommitmentHeader_PSN(boolean _forupdate = false)
    {
        PurchCommitmentHeader_PSN   purchCommitmentHeader_PSN;

        if (_forupdate)
        {
            select firstonly forupdate purchCommitmentHeader_PSN
                where purchCommitmentHeader_PSN.RecId == this.PurchCommitmentHeader_PSN;
        }
        else
        {
            select firstonly purchCommitmentHeader_PSN
                where purchCommitmentHeader_PSN.RecId == this.PurchCommitmentHeader_PSN;
        }

        return purchCommitmentHeader_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentLine</c> record associated with the current commitment line.
    /// </summary>
    /// <param name="_forupdate">
    /// true if the <c>SourceDocumentLine</c> record should be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// The <c>SourceDocumentLine</c> record associated with the current commitment line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentLine getSourceDocumentLine(boolean _forupdate = false)
    {
        SourceDocumentLine  sourceDocumentLine;

        select firstonly sourceDocumentLine
            where sourceDocumentLine.RecId == this.SourceDocumentLine;

        sourceDocumentLine.selectForUpdate(_forupdate);

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert a purchase commitment line record.
    /// </summary>
    /// <remarks>
    ///     Insert a <c>SourceDocumentLine</c> record that stores the extension key used by the extension factory to create
    ///     source document implementation objects.
    /// </remarks>
    public void insert()
    {
        if (!this.LineNumber)
        {
            this.LineNumber = PurchCommitmentLine_PSN::getNewLineNum(this.PurchCommitmentHeader_PSN);
        }
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
        super();
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommitmentRefByUnConfirmedDocs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the commitment line has been referenced on an unconfirmed purchase order or an unposted vendor invoice line
    /// </summary>
    /// <returns>
    ///     true if the reference exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isCommitmentRefByUnConfirmedDocs()
    {
        PurchLine                   purchLine;
        PurchTable                  purchTable;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        VendInvoiceInfoTable        vendInvoiceInfoTable;

        select firstonly RecId from purchLine
            exists join purchLine
            exists join purchTable
            where purchLine.PurchCommitmentLine_PSN == this.RecId
                    && purchLine.PurchId == purchTable.PurchId
                    && purchTable.DocumentState != VersioningDocumentState::Confirmed;

        if (!purchLine.RecId)
        {
            select firstonly RecId from vendInvoiceInfoLine
                exists join vendInvoiceInfoTable
                where vendInvoiceInfoLine.PurchCommitmentLine_PSN == this.RecId
                        && vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                        && vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                        && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;
        }

        return purchLine.RecId || vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineNumberUnique</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the passed in <c>_lineNumber</c> value is unique for the <c>PurchCommitmentHeader_PSN</c>
    /// record referenced by the passed in <c>_lineNumber</c> value.
    /// </summary>
    /// <param name="_purchCommitmentHeaderId">
    /// The <c>RecId</c> value of the <c>PurchCommitmentHeader_PSN</c> record to check the passed in <c>_lineNumber</c> value against.
    /// </param>
    /// <param name="_lineNumber">
    /// The line number to test for uniqueness.
    /// </param>
    /// <returns>
    /// true if the passed in line number is unique; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isLineNumberUnique(RefRecId _purchCommitmentHeaderId, TradeLineNumber _lineNumber)
    {
        return (select LineNumber from purchCommitmentLine_PSN
        where purchCommitmentLine_PSN.PurchCommitmentHeader_PSN == _purchCommitmentHeaderId
            &&  purchCommitmentLine_PSN.LineNumber == _lineNumber).LineNumber == _lineNumber ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidPurchaseAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the the referenced purchase agreement is valid for current commitment line
    /// </summary>
    /// <returns>
    /// true if the referenced purchase agreement is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isValidPurchaseAgreement()
    {
        PurchAgreementHeader        purchAgreementHeader;
        AgreementLine               agreementLine;
        PurchCommitmentHeader_PSN   purchCommitmentHeader;
        str                         vendorAccount;

        purchCommitmentHeader = PurchCommitmentHeader_PSN::find(this.PurchCommitmentHeader_PSN);

        vendorAccount = purchCommitmentHeader.VendorAccount;

        if (vendorAccount && this.AgreementLine)
        {
            select firstonly RecId from purchAgreementHeader
                exists join agreementLine
                exists join purchCommitmentHeader
                where  agreementLine.RecId == this.AgreementLine
                    && purchAgreementHeader.RecId == agreementLine.Agreement
                    && purchAgreementHeader.VendAccount == purchCommitmentHeader.VendorAccount;
        }

        return purchAgreementHeader.RecId > 0 || vendorAccount == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any processing necessary when the value of a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value of the field that was modifed.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(PurchCommitmentLine_PSN, LineAmount):
                if (this.getPurchCommitmentHeader_PSN().DocumentStatus == PurchCommitmentDocumentStatus_PSN::UnderRevision)
                {
                    this.DraftAmount = this.LineAmount - this.OriginalAmount;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>DefaultAccountingDate</c> field value of the <c>PurchCommitmentHeader_PSN</c> record that is
    /// associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>DefaultAccountingDate</c> field value of the <c>PurchCommitmentHeader_PSN</c> record that is
    /// associated with the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingDate parmExchangeRateDate()
    {
        return this.getPurchCommitmentHeader_PSN().DefaultAccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentLine</c> value associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>SourceDocumentLine</c> value associated with the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>EnumName</c> value of the source document line type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </summary>
    /// <returns>
    /// The source document header type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_PurchCommitment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentTypeEnumValue</c> value of the source document line type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </summary>
    /// <returns>
    /// The source document line type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_PurchCommitment::PurchCommitmentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentHeader</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>SourceDocumentHeader</c> record associated with the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader    sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(SourceDocumentLine::find(this.SourceDocumentLine).SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a purchase commitment line record.
    /// </summary>
    public void update()
    {
        super();
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        // If there is an agreement associated with this line, update its status to on hold.
        this.updateRelatedAgreementsToOnHold();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedAgreementsToOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the agreement header associated with the current commitment to on-hold.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateRelatedAgreementsToOnHold()
    {
        AgreementLine           agreementLine;
        PurchAgreementHeader    purchAgreementHeader;

        select firstonly RecId from agreementLine
            where agreementLine.RecId == this.AgreementLine
        join forupdate firstonly purchAgreementHeader
            where purchAgreementHeader.RecId    == agreementLine.Agreement;

        if (purchAgreementHeader)
        {
            ttsbegin;
            purchAgreementHeader.AgreementState = AgreementState::OnHold;
            purchAgreementHeader.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the passed in field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The <c>fieldId</c> value of the field to be validated.
    /// </param>
    /// <returns>
    /// true if the passed in field is valid; otherwise, false
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isFieldValid;

        isFieldValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(PurchCommitmentLine_PSN, LineNumber):
                if (!this.isLineNumberUnique(this.PurchCommitmentHeader_PSN, this.LineNumber))
                {
                    isFieldValid = checkFailed(strFmt("@SYS313754", this.LineNumber));
                }
            break;

            case fieldNum(PurchCommitmentLine_PSN, AgreementLine):
                isFieldValid = isFieldValid && this.AgreementLine && AgreementLine::find(this.AgreementLine).IsDeleted == NoYes::No;
                isFieldValid = isFieldValid && this.isValidPurchaseAgreement();
                isFieldValid = isFieldValid && PurchAgreementFinDimensionAccess_PSN::isFinDimensionValueAuthorizedSegmentedEntry(this.getAgreementHeaderForAgreementLine().RecId, this.LedgerDimension);
            break;

            case fieldNum(PurchCommitmentLine_PSN, LineAmount):
                isFieldValid = this.validateLineAmount();
            break;

            case fieldNum(PurchCommitmentLine_PSN, LineDate):
                isFieldValid = this.getPurchCommitmentHeader_PSN().isDateInFiscalCalendarYear(this.LineDate);
            break;
        }

        return isFieldValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the value entered in the <c>LineAmount</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the value in the <c>LineAmount</c> field is valid; otherwise, false
    /// </returns>
    internal boolean validateLineAmount()
    {		 
        if (PurchCommitmentHeader_PSN::find(this.PurchCommitmentHeader_PSN).DocumentStatus ==  PurchCommitmentDocumentStatus_PSN::UnderRevision)
        {
            PurchCommitmentLineTmpBalanceSummary_PSN balanceSummary = PurchCommitmentBalanceSummaryCalc_PSN::getBalancesForBalanceSummaryForm(this);

            LineAmount availableAmount = balanceSummary.ReservedCommitmentsAmount - balanceSummary.TotalRelievedAmount;

            if ((balanceSummary.DraftDecreasesAmount > 0) && (availableAmount == 0))
            {
                return checkFailed("@PublicSector:PurchCommitmentLineFullyConsumedError");
            }
            else if (this.LineAmount < balanceSummary.TotalRelievedAmount)
            {
                return checkFailed(strFmt("@PublicSector:PurchCommitmentLineDecreaseBelowConsumedAmountError", balanceSummary.TotalRelievedAmount, availableAmount));
            }
        }

        if (this.LineAmount <= 0)
        {
            return checkFailed("@SPS2468");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current record is valid for writing.
    /// </summary>
    /// <returns>
    /// true if the current record is valid; otherwise, false
    /// </returns>
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        // Validate the line amount before saving the record
        isValid = isValid && this.validateLineAmount();

        // Validate the line date against the fiscal calendar before saving the record
        isValid = isValid && this.getPurchCommitmentHeader_PSN().isDateInFiscalCalendarYear(this.LineDate);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>PurchCommitmentLine_PSN</c> table and shows an error message if it does not.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RefRecId _recId)
    {
        boolean ret = true;

        if (!PurchCommitmentLine_PSN::exist(_recId))
        {
            ret = checkFailed(strFmt(PurchCommitmentLine_PSN::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>PurchCommitmentLine_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     purchCommitmentLine_PSN
                where
                     purchCommitmentLine_PSN.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchCommitmentLine_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PurchCommitmentLine_PSN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enum value that indicates the Concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchCommitmentLine_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchCommitmentLine_PSN find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchCommitmentLine_PSN purchCommitmentLine;

        purchCommitmentLine.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            purchCommitmentLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly purchCommitmentLine
            where purchCommitmentLine.RecId == _recId;

        return purchCommitmentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByChildSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchCommitmentLine_PSN</c> record that is related to the passed in <c>_childSourceDocumentLine</c> record ID.
    /// </summary>
    /// <param name="_childSourceDocumentLine">
    /// The record ID of the parent source document line.
    /// </param>
    /// <returns>
    /// The <c>PurchCommitmentLine_PSN</c> record associated with the <c>_childSourceDocumentLine</c> record ID.
    /// </returns>
    /// <remarks>
    /// The passed in _childSourceDocumentLine record ID is expected to be a <c>SourceDocumentLine</c> record ID for either a purchase order or vendor invoice.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchCommitmentLine_PSN findByChildSourceDocumentLine(RecId _childSourceDocumentLine)
    {
        AccountingDistribution                  accountingDistribution;
        accountingDistribution                  parentAccountingDistribution;
        AccountingDistribution                  commitmentDistribution;
        AccountingDistribution                  parentCommitmentDistribution;
        SourceDocumentLine                      commitmentSourceDocLine;
        SourceDocumentLine                      parentCommitmentSourceDocLine;
        PurchCommitmentLine_PSN                 purchCommitmentLine_PSN;

        // Non-PO invoices will have the reference distribution pointing to the commitment, PO invoices will point to the PO.  Get both.
        select firstOnly RecId from accountingDistribution
            where accountingDistribution.SourceDocumentLine == _childSourceDocumentLine
                && accountingDistribution.ReferenceDistribution != 0
        outer join firstOnly RecId from commitmentDistribution
            where commitmentDistribution.RecId == accountingDistribution.ReferenceDistribution
        outer join firstOnly RecId from parentAccountingDistribution
            where parentAccountingDistribution.RecId == accountingDistribution.ReferenceDistribution
        outer join firstOnly RecId from parentCommitmentDistribution
            where parentCommitmentDistribution.RecId == parentAccountingDistribution.ReferenceDistribution
        outer join firstOnly RecId from commitmentSourceDocLine
            where commitmentSourceDocLine.RecId == commitmentDistribution.SourceDocumentLine
                && commitmentSourceDocLine.SourceRelationType == tableNum(PurchCommitmentLine_PSN)
        outer join firstOnly RecId from parentCommitmentSourceDocLine
            where parentCommitmentSourceDocLine.RecId == parentCommitmentDistribution.SourceDocumentLine
                && parentCommitmentSourceDocLine.SourceRelationType == tableNum(PurchCommitmentLine_PSN);

        // If the invoice is a non-PO invoice then the commitmentSourceDocLine will have a value, use that to get the distribution
        if (commitmentSourceDocLine)
        {
            purchCommitmentLine_PSN = PurchCommitmentLine_PSN::findBySourceDocumentLine(commitmentSourceDocLine.RecId);
        }
        // Otherwise; the reference will be on the parent (the PO), so return that.
        else if (parentCommitmentSourceDocLine)
        {
            purchCommitmentLine_PSN = PurchCommitmentLine_PSN::findBySourceDocumentLine(parentCommitmentSourceDocLine.RecId);
        }

        return purchCommitmentLine_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>PurchCommitmentLine_PSN</c> record for the supplied <c>SourceDocumentHeader</c> recId.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///     The <c>SourceDocumentLine</c> recId for which to find the record.
    /// </param>
    /// <returns>
    ///     A <c>PurchCommitmentLine_PSN</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public PurchCommitmentLine_PSN findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        PurchCommitmentLine_PSN     purchCommitmentLine;

        select firstonly purchCommitmentLine
            where purchCommitmentLine.SourceDocumentLine == _sourceDocumentLine;

        return purchCommitmentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last line number that is used for the current commitment.
    /// </summary>
    /// <param name="_commitmentHeaderRecId">
    ///    The record ID of commitment header.
    /// </param>
    /// <returns>
    ///    The maximum line number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TradeLineNumber  getNewLineNum(RefRecId  _commitmentHeaderRecId)
    {
        return (select maxof(LineNumber) from purchCommitmentLine_PSN
                    where purchCommitmentLine_PSN.PurchCommitmentHeader_PSN == _commitmentHeaderRecId).LineNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommitmentLineReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the the commitment line has been referenced on a purchase order or a vendor invoice line
    /// </summary>
    /// <param name="_purchCommitmentLineRecId">
    ///     A record id of the <c>PurchCommitmentLine_PSN</c> record to check the reference for
    /// </param>
    /// <returns>
    ///     true if the reference exists; otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isCommitmentLineReferenced(RefRecId _purchCommitmentLineRecId)
    {
        PurchLine           purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        boolean             isReferenced = false;

        select firstonly RecId from purchLine
            where purchLine.PurchCommitmentLine_PSN == _purchCommitmentLineRecId;

        if (!purchLine.RecId)
        {
            select firstonly RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.PurchCommitmentLine_PSN == _purchCommitmentLineRecId;
        }

        isReferenced = purchLine.RecId || vendInvoiceInfoLine.RecId;

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a balance check for the document indicated by the supplied <c>_sourceDocumentLineRecId</c> record ID.
    /// </summary>
    /// <param name="_consumingSourceDocumentLineRecId">
    /// The <c>RecId</c> of the <c>SourceDocumentLine</c> record for the document that is related to the commitment.
    /// </param>
    /// <returns>
    /// true if there is zero or more available balance on the related commitment line; othwerise, false.
    /// </returns>
    /// <remarks>
    /// The <c>_sourceDocumentLineRecId</c> record ID can be for either a purchase order line, pending invoice line, or posted invoice line.
    /// No other source documents are supported.
    /// </remarks>
    public static boolean performBalanceCheck(SourceDocumentLineRecId _consumingSourceDocumentLineRecId)
    {
        SourceDocumentLine                      sourceDocLine;
        Amount                                  availableAmount;
        PurchCommitmentBalanceSummaryCalc_PSN   balanceSummaryCalc;
        PurchCommitmentLine_PSN                 purchCommitmentLine;
        boolean                                 balanceCheckPass = true;
        container                               budgetAmounts;
        VendInvoiceTrans                        vendInvoiceTrans;
        AccountingDistribution                  vendInvoiceTransDistribution;
        AccountingDistribution                  purchaseOrderDistribution;
        RefRecId                                localConsumingSourceDocumentLineRecId;

        #define.AvailableAmountIndex(3)

        sourceDocLine = SourceDocumentLine::find(_consumingSourceDocumentLineRecId);

        // Failure if the sourceDocLine is null
        Debug::assert(sourceDocLine.RecId != 0);

        if (sourceDocLine.SourceRelationType == tableNum(PurchLine) || sourceDocLine.SourceRelationType == tableNum(VendInvoiceInfoLine) || sourceDocLine.SourceRelationType == tableNum(VendInvoiceTrans))
        {
            // if the current document is a vendInvoiceTrans record for a PO Invoice then we need to retrieve the related PO via the referenceDistribution
            if (sourceDocLine.SourceRelationType == tableNum(VendInvoiceTrans))
            {
                // retrieve the distribution from the purchase order, it will contain the reference distribution for the commitment.
                select firstonly PurchID from vendInvoiceTrans
                    where vendInvoiceTrans.SourceDocumentLine == _consumingSourceDocumentLineRecId
                join firstonly RecId from vendInvoiceTransDistribution
                    where vendInvoiceTransDistribution.SourceDocumentLine == vendInvoiceTrans.SourceDocumentLine
                join firstonly SourceDocumentLine from purchaseOrderDistribution
                    where purchaseOrderDistribution.RecId  == vendInvoiceTransDistribution.ReferenceDistribution;

                // if we have a PO invoice then we want to use the original PO record for retrieving the commitment, otherwise we want to use the current non-PO invoice record.
                if (!vendInvoiceTrans.isNonPO())
                {
                    localConsumingSourceDocumentLineRecId = purchaseOrderDistribution.SourceDocumentLine;
                }
                else
                {
                    localConsumingSourceDocumentLineRecId = _consumingSourceDocumentLineRecId;
                }
            }
            else
            {
                localConsumingSourceDocumentLineRecId = _consumingSourceDocumentLineRecId;
            }

            purchCommitmentLine = PurchCommitmentLine_PSN::findByChildSourceDocumentLine(localConsumingSourceDocumentLineRecId);

            if (purchCommitmentLine)
            {
                balanceSummaryCalc = PurchCommitmentBalanceSummaryCalc_PSN::construct();
                balanceSummaryCalc.parmPurchCommitmentLine(purchCommitmentLine);
                budgetAmounts = balanceSummaryCalc.getBudgetRelatedAmounts();

                availableAmount = conPeek(budgetAmounts, #AvailableAmountIndex);

                balanceCheckPass = availableAmount >= 0;
            }
            else
            {
                return true;
            }
        }
        else
        {
            balanceCheckPass = true;
        }

        return balanceCheckPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    ///     A string indicating the label ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@SPS1853</DeveloperDocumentation>
	<Label>@SPS1854</Label>
	<SingularLabel>PurchCommitmentLine</SingularLabel>
	<TitleField1>LineNumber</TitleField1>
	<TitleField2>LedgerDimension</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Budget</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchCommitmentHeader_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SPS1858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Comment</Name>
			<Label>@SPS1826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SPS1857</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineNumber</Name>
			<Label>@SYS40505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseAgreement</Name>
			<Label>@SPS1962</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCommitmentLineComment_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DraftAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Label>@SPS1824</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LineDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>AccountingDate</ExtendedDataType>
			<Label>@SPS1968</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
			<Label>@SPS1854</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchCommitmentHeader_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1834</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchCommitmentHeader_PSNIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchCommitmentHeader_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumber</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementLine</Name>
					<Field>AgreementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDiemsnion</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchCommitmentHeader_PSN</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>PurchCommitmentHeader_PSN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchCommitmentHeader_PSN</Name>
					<Field>PurchCommitmentHeader_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>