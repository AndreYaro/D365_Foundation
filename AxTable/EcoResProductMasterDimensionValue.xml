<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMasterDimensionValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class EcoResProductMasterDimensionValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVariantsFromDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates product variants based on the product master modeling policy setup.
    /// </summary>
    /// <param name="_productMasterRecId">
    ///    The <c>EcoResProductRecId</c> reference to the product master
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the table buffer of the product dimension value.
    /// </param>
    public void createVariantsFromDimensionValue(EcoResProductMasterRecId _productMasterRecId, RefRecId _productDimensionAttribute, RefRecId _productDimensionValue)
    {
        EcoResProductVariantCreationMgr productVariantCreationMgr;
        Args                            args;
        EcoResProductMaster             productMaster = EcoResProductMaster::find(_productMasterRecId);

        if (productMaster.mustCreateProductVariants())
        {
            args = this.getCallerArgs();

            if (!args.record())
            {
                args.record(productMaster);
            }

            productVariantCreationMgr = EcoResProductVariantCreationMgr::newFromArgs(args);
            productVariantCreationMgr.createVariantsFromDimensionValue(_productDimensionAttribute, _productDimensionValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caller's <c>Args</c> object instance.
    /// </summary>
    /// <returns>
    /// An instance of caller's <c>Args</c> object; otherwise - empty arguments.
    /// </returns>
    public Args getCallerArgs()
    {
        Args            ret = new Args();
        FormDataSource  formDataSource;

        if (FormDataUtil::isFormDataSource(this))
        {
            formDataSource = FormDataUtil::getFormDataSource(this);

            if (formDataSource && formDataSource.formRun())
            {
                ret = formDataSource.formRun().args();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDimensionValueForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any dimension value record was created for a specified product master and
    /// dimension attribute.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <returns>
    /// true if a product dimension table value exists for the specified product; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method should be overridden on the subtype tables.
    /// </exception>
    public boolean hasDimensionValueForProductMaster(EcoResProductRecId _productMaster)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductMasterDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the dimension value record that was created for a specified product master and
    /// dimension attribute value.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_colorRecId">
    /// The reference to the product dimension value.
    /// </param>
    /// <returns>
    /// The product dimension table value for the specified product and dimension value.
    /// </returns>
    public EcoResProductMasterDimensionValueId lookupProductMasterDimensionValue(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _colorRecId )
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionValueAndRelations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the product dimension value and relation fields on the buffer.
    /// </summary>
    /// <param name="_productMaster">
    ///    The <c>EcoResProductRecId</c> table reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the table buffer of the product dimension value.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    This method should be overridden on the sub type tables.
    /// </exception>
    public void setDimensionValueAndRelations(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveProductDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product dimension is active for the specified product master.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_dimensionFieldId">
    /// The <c>FieldId</c> reference to the product dimension.
    /// </param>
    /// <returns>
    /// true if the dimension is active; otherwise false.
    /// </returns>
    public boolean validateActiveProductDimension(EcoResProductMasterRecId _productMaster, FieldId _dimensionFieldId)
    {
        if (!EcoResProductDimensionGroupProduct::findByProduct(_productMaster).isProductDimensionActive(_dimensionFieldId))
        {
            return checkFailed(strFmt("@SYS54773", fieldId2name(tableNum(InventDim), _dimensionFieldId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionValueAndRelations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the product dimension value and relation fields on the buffer.
    /// </summary>
    /// <param name="_productMaster">
    ///    The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the product dimension value table buffer.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates whether an exception is thrown, in case the dimension has been
    ///    assigned to the product master.
    /// </param>
    /// <returns>
    ///    true if the product dimension value exists for a specified product; otherwise false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    This method should be overridden on the sub type tables.
    /// </exception>
    public boolean validateDimensionValueAndRelations(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue,
        boolean             _throwError = false)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the product dimension value exists.
    /// </summary>
    /// <param name="_productMaster">
    ///    The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the product dimension value table buffer.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates whether an exception is thrown, in case the dimension does not exists.
    /// </param>
    /// <returns>
    ///    true if the product dimension value exists for a specified product; otherwise false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    This method should be overridden on the sub type tables.
    /// </exception>
    public boolean checkExistDimensionValue(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue,
        boolean             _throwError = false)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a warning message in case the product dimension table value does not exist for the
    ///    specified product.
    /// </summary>
    /// <param name="dimTableFieldLabel">
    ///    The <c>FieldLabel</c> value that corresponds to the label of the primary key on the product
    ///    dimension table.
    /// </param>
    /// <param name="_value">
    ///    The <c>Name</c> value that corresponds to the possible product dimension table value.
    /// </param>
    /// <param name="_productNumber">
    ///    The <c>EcoResProductNumber</c> value that corresponds to the product ID value.
    /// </param>
    /// <returns>
    ///    A warning message in case the product dimension table value does not exist for the specified
    ///    product.
    /// </returns>
    public static TxtNotExist txtNotExist(FieldLabel dimTableFieldLabel, Name _value, EcoResProductNumber _productNumber)
    {
        return strFmt("@SYS138617", dimTableFieldLabel, _value, _productNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133895</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductMasterDimensionAction</FormRef>
	<Label>@SYS133896</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InstanceRelationType</TitleField1>
	<TitleField2>RetailWeight</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailDisplayOrder</Name>
			<Label>@RET490069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailDisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailWeight</Name>
			<Label>@SYS11575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailDisplayOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RetailWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>noInBarcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoInBarcode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailDisplayOrder</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailDisplayOrder</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>