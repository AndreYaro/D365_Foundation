<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementHeaderHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesAgreementHeaderHistory extends AgreementHeaderHistory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the agreement number sequence and the confirmation number.
    /// </summary>
    /// <returns>
    ///    A string that contains the agreement number and the confirmation number.
    /// </returns>
    display public AgreementConfirmation agreementConfirmation()
    {
        return strFmt("%1-%2", this.SalesNumberSequence, this.ConfirmationNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the customer account for the current sales agreement header history record.
    /// </summary>
    /// <returns>
    ///    A string that contains the name of the customer.
    /// </returns>
    public display CustName custName()
    {
        CustTable       custTable;
        DirPartyTable   partyTable;

        if (this.CustAccount)
        {
            select firstonly Party from custTable
                    where custTable.AccountNum == this.CustAccount
                join Name from partyTable
                    where partyTable.RecId == custTable.Party;
        }
        return partyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustTable</c> record for the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c> record.
    /// </returns>
    public CustTable custTable()
    {
        return CustTable::findByCompany(this.CustomerDataAreaId, this.CustAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales agreement header history record from a sales agreement header record.
    /// </summary>
    /// <param name="_salesHeader">
    /// The sales agreement header record.
    /// </param>
    public void initFromSalesAgreementHeader(SalesAgreementHeader _salesHeader)
    {
        this.initFromAgreementHeader(_salesHeader);

        this.CustAccount = _salesHeader.CustAccount;
        this.CustomerDataAreaId = _salesHeader.CustomerDataAreaId;
        this.SellingLegalEntity = _salesHeader.SellingLegalEntity;
        this.SalesNumberSequence = _salesHeader.SalesNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originatorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the originator name for the current agreement header history.
    /// </summary>
    /// <returns>
    ///    A string that contains the name of the originator.
    /// </returns>
    display DirPartyName originatorName()
    {
        return DirPartyTable::findRec(this.Originator).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the agreement header history records from a sales agreement header record.
    /// </summary>
    /// <param name="_salesHeader">
    ///    The sales agreement header record.
    /// </param>
    /// <param name="_dateTimenow">
    ///    The time for the current transaction.
    /// </param>
    /// <returns>
    ///    The ID of the created history record.
    /// </returns>
    public static recId createHeaderHistory(SalesAgreementHeader _salesHeader, utcdatetime _dateTimenow)
    {
        SalesAgreementHeaderHistory salesHeaderHistory;
        SalesAgreementHeaderHistory previousSalesHeaderHistory;

        AgreementHeaderDefaultHistory headerDefaultHistory;
        SalesAgreementHeaderDefaultHistory  salesHeaderDefaultHistory;

        AgreementHeaderDefault  headerDefault;
        SalesAgreementHeaderDefault  salesHeaderDefault;
        // <GEERU>
        #ISOCountryRegionCodes
        SalesAgreementHeaderHistoryExt_RU salesHeaderHistoryExt;
        SalesAgreementHeaderExt_RU salesHeaderExt;
        // </GEERU>

        ttsbegin;

            previousSalesHeaderHistory = AgreementHeaderHistory::findLatest(_salesHeader.RecId, true) as SalesAgreementHeaderHistory;

            if (previousSalesHeaderHistory)
            {
                 previousSalesHeaderHistory.ValidTo = _dateTimeNow;
                 previousSalesHeaderHistory.update();
            }

            salesHeaderHistory.ConfirmationNumber = AgreementHeaderHistory::nextConfirmationNum(_salesHeader.RecId);
            salesHeaderHistory.initFromSalesAgreementHeader(_salesHeader);
            salesHeaderHistory.ValidFrom = _dateTimeNow;
            salesHeaderHistory.insert();

            // DocuRef is stored referencing base table. Ensure we use base record to copy DocuRef from
            AgreementHeader agreementHeaderCopyFrom = AgreementHeader::find(_salesHeader.RecId);
            Docu::copy(agreementHeaderCopyFrom, salesHeaderHistory);

            headerDefault = _salesHeader.agreementHeaderDefault();

            // since there's no inheritance between headerDefault and salesHeaderDefault,
            // defaults must be obtained separately for each table

            if (headerDefault)
            {
                headerDefaultHistory.initFromAgreementHeaderDefault(headerDefault);
                headerDefaultHistory.AgreementHeaderHistory = salesHeaderHistory.RecId;
                headerDefaultHistory.insert();
            }

            salesHeaderDefault = _salesHeader.salesAgreementHeaderDefault();

            if (salesHeaderDefault)
            {
                salesHeaderDefaultHistory.initFromSalesAgreementHeaderDefault(salesHeaderDefault);
                salesHeaderDefaultHistory.SalesAgreementHeaderHistory = salesHeaderHistory.RecId;
                salesHeaderDefaultHistory.insert();
            }
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                salesHeaderExt = SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(_salesHeader.RecId);
                if (salesHeaderExt)
                {
                    salesHeaderHistoryExt.initFromSalesAgreementHeaderExt(salesHeaderExt);
                    salesHeaderHistoryExt.AgreementHeaderHistory = salesHeaderHistory.RecId;
                    salesHeaderHistoryExt.insert();
                }
            }
            // </GEERU>

        ttscommit;

        return salesHeaderHistory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SalesAgreementHeaderHistory</c> table.
    /// </summary>
    /// <param name="_agreementId">The agreement ID of the <c>SalesAgreementHeaderHistory</c> record to find.</param>
    /// <param name="_confirmationNumber">The confirmation number of the <c>SalesAgreementHeaderHistory</c> record to find.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>SalesAgreementHeaderHistory</c> table; otherwise, an empty record.</returns>
    public static SalesAgreementHeaderHistory findAgreementId(
        SalesAgreementId            _agreementId,
        AgreementConfirmationNumber _confirmationNumber,
        boolean                     _forUpdate = false)
    {
        SalesAgreementHeaderHistory salesAgreementHeaderHistory;

        if (_agreementId
            && _confirmationNumber)
        {
            if (_forUpdate)
            {
                salesAgreementHeaderHistory.selectForUpdate(_forUpdate);
            }

            CompanyInfo companyInfo;

            select firstonly salesAgreementHeaderHistory
                exists join companyInfo
                    where salesAgreementHeaderHistory.SalesNumberSequence   == _agreementId
                       && salesAgreementHeaderHistory.ConfirmationNumber    == _confirmationNumber
                       && salesAgreementHeaderHistory.SellingLegalEntity    == companyInfo.RecId
                       && companyInfo.DataArea                              == curext();
        }

        return salesAgreementHeaderHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SYS317407</DeveloperDocumentation>
	<Label>@SYS190212</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>CustAccount</TitleField1>
	<TitleField2>SalesNumberSequence</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Extends>AgreementHeaderHistory</Extends>
	<Modules>SalesAndMarketing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SellingLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesNumberSequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS24704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderId</Name>
			<Label>@SYS183835</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesNumberSequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesNumberSequence</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAgreementId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SellingLegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS129100</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompanyInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SellingLegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>SalesNumberSequence</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHistorySales</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementHeaderHistory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfoSelling</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_1_SalesAgreementHeaderHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SellingLegalEntity</Name>
					<Field>SellingLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTable_SalesAgreementHeaderHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerDataAreaId</Name>
					<Field>CustomerDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>