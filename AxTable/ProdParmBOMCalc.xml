<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdParmBOMCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdParmBOMCalc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ProdId = _prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initValue();

        this.ProfitSet  = ProdParameters::find().ProfitSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CalcDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProdParmBOMCalc  prodParmBOMCalc;

        select forupdate prodParmBOMCalc
            index hint NumProdNumIdx
            where prodParmBOMCalc.ParmId      == this.ParmId  &&
                  prodParmBOMCalc.ProdId      == this.ProdId;

        if (prodParmBOMCalc)
        {
            if (prodParmBOMCalc.Level   == 0 && this.Level  == 0)
            {
                checkFailed(strfmt("@SYS22550",this.ProdId));
            }

            if (prodParmBOMCalc.Level   <= this.Level)
            {
                prodParmBOMCalc.Level        = this.Level;
                prodParmBOMCalc.update();

                return;
            }

            return;
        }
        this.JobStatus = ParmJobStatus::Waiting;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodName</Name>
				<Source><![CDATA[
    public display ProdName prodName()
    {
        return this.prodTable().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodstatus</Name>
				<Source><![CDATA[
    public display ProdStatus prodstatus()
    {
        return ProdTable::find(this.ProdId).ProdStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable()
    {
        return ProdTable::find(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProdParmBOMCalc   prodParmBOMCalc;

        if (this.ProdId != this.orig().ProdId)
        {
            select prodParmBOMCalc
                index hint NumProdNumIdx
                where prodParmBOMCalc.ParmId     == this.ParmId     &&
                      prodParmBOMCalc.ProdId     == this.ProdId     &&
                      prodParmBOMCalc.RecId      != this.RecId;

            if (prodParmBOMCalc)
            {
                checkFailed(strfmt("@SYS22550",this.ProdId));
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParameters</Name>
				<Source><![CDATA[
    public static void deleteParameters(Num _parmId)
    {
        ProdParmBOMCalc  prodParmBOMCalc;

        ttsbegin;

        delete_from prodParmBOMCalc
            index hint NumProdNumIdx
            where prodParmBOMCalc.ParmId == _parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        Num       _parmId,
        ProdId    _prodId)
    {
        return _prodId && _parmId && (select firstonly prodParmBOMCalc
                index hint NumProdNumIdx
                where prodParmBOMCalc.ParmId  == _parmId   &&
                      prodParmBOMCalc.ProdId  == _prodId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProdParmBOMCalc find(
        Num       _parmId,
        ProdId    _prodId,
        boolean   _forUpdate = false)
    {
        ProdParmBOMCalc prodParmBOMCalc;
        prodParmBOMCalc.selectForUpdate(_forUpdate);

        if (_prodId && _parmId)
        {
            select firstonly prodParmBOMCalc
                index hint NumProdNumIdx
                where prodParmBOMCalc.ParmId  == _parmId   &&
                      prodParmBOMCalc.ProdId  == _prodId;
        }

        return prodParmBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(ParmId _parmId)
    {
        return (select maxof(LineNum) from prodParmBOMCalc
                    where prodParmBOMCalc.ParmId == _parmId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodLookUp</Name>
				<Source><![CDATA[
    public static void prodLookUp(Object _lookupCtrl)
    {
        Query           q;
        ProdTable       prodTable;
        ProdStatusType  prodStatus;
        Counter         i = 0;
        int             value = 0;
        Common          anyBuffer;
        ProdLookup      prodProdLookup;
        SysDictEnum     sysDictEnum;

        q = new Query();
        q.addDataSource(tablenum(ProdTable));

        sysDictEnum = new SysDictEnum(enumnum(ProdStatus));
        value       = sysDictEnum.firstValue();

        while (i < enumcnt(ProdStatus))
        {
            prodTable.ProdStatus = value;
            prodStatus = prodTable.statusClient();

            if (prodStatus.runBOMCalc(anyBuffer as ProdParmBOMCalc,true))
                prodStatus.queryAddStatus(q);

            value = sysDictEnum.nextValue(value);
            i++;
        }

        prodProdLookup = new ProdLookup(_lookupCtrl,q);
        prodProdLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>topMostProdTableCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProdTable</c> record that should be used for calculation.
    /// </summary>
    /// <returns>
    /// The <c>ProdTable</c> record.
    /// </returns>
    public ProdTable topMostProdTableCalc()
    {
        ProdTable prodTableCalc;
        ProdTable prodTable = this.prodTable();

        if (this.References == NoYes::Yes)
        {
            // Skip reference if production bom line isn't pegged supply
            if (prodTable.isItemBOMLineType() && !CostTakeMarkedItemAsPeggedSupplyFlight::instance().isEnabled())
            {
                prodTableCalc = prodTable;
            }

            // Calculate all references starting from the top most production
            if (!prodTableCalc.RecId)
            {
                select firstonly prodTableCalc
                    where prodTableCalc.ProdId == prodTable.CollectRefProdId &&
                          prodTableCalc.CollectRefLevel  == 0;
            }
        }
        else
        {
            prodTableCalc = prodTable;
        }

        return prodTableCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124162</DeveloperDocumentation>
	<Label>@SYS55283</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>CalcDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumProdNumIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>NumProdNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMCalculation</Name>
			<Label>@SYS5681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultGroup</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>References</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>References</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdAutoUpdate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalcDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExecutedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateTimeExecuted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Level</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfitSet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostProfitSet</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>References</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdUpdateRef</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Level</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumProdNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ParmBuffer</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Linenum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>ProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobStatus</MapField>
					<MapFieldTo>JobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDateTime</MapField>
					<MapFieldTo>ExecutedDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelection</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelectionQuery</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>