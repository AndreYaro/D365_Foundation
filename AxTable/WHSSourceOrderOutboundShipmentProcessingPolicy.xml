<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSourceOrderOutboundShipmentProcessingPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSSourceOrderOutboundShipmentProcessingPolicy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal static WHSSourceOrderOutboundShipmentProcessingPolicy find(
        WHSOrderNum _orderNumber,
        WHSSourceOrderDocumentType _sourceOrderDocumentType,
        boolean _forupdate = false)
    {
        WHSSourceOrderOutboundShipmentProcessingPolicy policy;

        if (_orderNumber)
        {
            policy.selectForUpdate(_forupdate);

            if (!WHSSourceOrderOutboundShipmentProcessingPolicyCacheFlight::instance().isEnabled()
                || WHSSourceOrderOutboundShipmentProcessingPolicy::isSourceOrderOutboundShipmentProcessingPolicyUsed())
            {
                select firstonly policy
                    where policy.OrderNumber == _orderNumber
                        && policy.SourceOrderDocumentType == _sourceOrderDocumentType;
            }                    
        }

        return policy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private static str cacheScope()
    {
        return tableStr(WHSSourceOrderOutboundShipmentProcessingPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheAcrossAOSes</Name>
				<Source><![CDATA[
    private void clearCacheAcrossAOSes()
    {
        if (WHSSourceOrderOutboundShipmentProcessingPolicyCacheFlight::instance().isEnabled())
        {
            // Ensure cache is populated to ensure data is removed on all AOSes
            WHSSourceOrderOutboundShipmentProcessingPolicy::isSourceOrderOutboundShipmentProcessingPolicyUsed();

            SysGlobalObjectCache cache = classFactory.globalObjectCache();
            cache.remove(WHSSourceOrderOutboundShipmentProcessingPolicy::cacheScope(), WHSSourceOrderOutboundShipmentProcessingPolicy::cacheKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.clearCacheAcrossAOSes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.clearCacheAcrossAOSes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceOrderOutboundShipmentProcessingPolicyUsed</Name>
				<Source><![CDATA[
    internal static boolean isSourceOrderOutboundShipmentProcessingPolicyUsed()
    {
        container cacheKey = WHSSourceOrderOutboundShipmentProcessingPolicy::cacheKey();
        SysGlobalObjectCache sysGlobalObjectCache = classFactory.globalObjectCache();
        container result   = sysGlobalObjectCache.find(WHSSourceOrderOutboundShipmentProcessingPolicy::cacheScope(), cacheKey);

        if (result == conNull())
        {
            result = [WHSSourceOrderOutboundShipmentProcessingPolicy::existAny()];
            sysGlobalObjectCache.insert(WHSSourceOrderOutboundShipmentProcessingPolicy::cacheScope(), cacheKey, result);
        }
        
        return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAny</Name>
				<Source><![CDATA[
    internal static boolean existAny()
    {
        return ((select firstonly RecId from WHSSourceOrderOutboundShipmentProcessingPolicy).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    private static container cacheKey()
    {
        return [curExt(), 'WHSSourceOrderOutboundShipmentProcessingPolicyKey'];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderShipmentProcessingPolicy</Name>
				<Source><![CDATA[
    internal static WHSSourceOrderOutboundShipmentProcessingPolicy setOrderShipmentProcessingPolicy(WHSOutboundShipmentProcessingPolicyRecId _processingPolicyRecId, WHSOrderNum _orderNumber, WHSSourceOrderDocumentType _sourceOrderDocumentType)
    {
        ttsbegin;
        WHSSourceOrderOutboundShipmentProcessingPolicy mapping = WHSSourceOrderOutboundShipmentProcessingPolicy::find(_orderNumber, _sourceOrderDocumentType, true);
        if (!mapping)
        {
            mapping.OutboundShipmentProcessingPolicy = _processingPolicyRecId;
            mapping.OrderNumber = _orderNumber;
            mapping.SourceOrderDocumentType = _sourceOrderDocumentType;
            mapping.insert();
        }
        else if (mapping.OutboundShipmentProcessingPolicy != _processingPolicyRecId)
        {
            mapping.OutboundShipmentProcessingPolicy = _processingPolicyRecId;
            mapping.update();
        }
        ttscommit;

        return mapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundShipmentProcessingPolicy</Name>
				<Source><![CDATA[
    internal WHSOutboundShipmentProcessingPolicy outboundShipmentProcessingPolicy()
    {
        return WHSOutboundShipmentProcessingPolicy::find(this.OutboundShipmentProcessingPolicy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>OrderNumber</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>OrderIdTypeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>OrderIdTypeIdx</PrimaryIndex>
	<ReplacementKey>OrderIdTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceOrderDocumentType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceOrderDocumentType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSSourceOrderDocumentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OutboundShipmentProcessingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundShipmentProcessingPolicyRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OrderIdTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceOrderDocumentType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OutboundShipmentProcessingPolicy</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OutboundShipmentProcessingPolicy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutboundShipmentProcessingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSOutboundShipmentProcessingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutboundShipmentProcessingPolicy</Name>
					<Field>OutboundShipmentProcessingPolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNumber</Name>
					<SourceEDT>WHSOrderNum</SourceEDT>
					<Field>OrderNumber</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceOrderDocumentType</Name>
					<Field>SourceOrderDocumentType</Field>
					<ValueStr>WHSSourceOrderDocumentType::SalesOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>