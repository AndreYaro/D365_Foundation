<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;

public class InventDim extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setValueForDimension</Name>
				<Source><![CDATA[
    public void setValueForDimension(ClassName _dimensionClassName, anytype _value)
    {
        FieldId fieldId = InventDim::fieldIdForDimension(_dimensionClassName);
        this.(fieldId) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueForDimension</Name>
				<Source><![CDATA[
    public anytype getValueForDimension(ClassName _dimensionClassName)
    {
        FieldId fieldId = InventDim::fieldIdForDimension(_dimensionClassName);
        return this.(fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdForDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a dimension.
    /// </summary>
    /// <param name = "_dimensionClassName">The name of the dimension class.</param>
    /// <returns>The field Id.</returns>
    static public FieldId fieldIdForDimension(ClassName _dimensionClassName)
    {
        #InventDimDevelop

        switch (_dimensionClassName)
        {
            case classStr(InventProductDimensionColor):
                return fieldNum(InventDim, InventColorId);

            case classStr(InventProductDimensionSize):
                return fieldNum(InventDim, InventSizeId);

            case classStr(InventProductDimensionStyle):
                return fieldNum(InventDim, InventStyleId);

            case classStr(InventProductDimensionVersion):
                return fieldNum(InventDim, InventVersionId);
            
            case classStr(InventProductDimensionConfig):
                return fieldNum(InventDim, ConfigId);

            case classStr(InventTrackingDimensionBatch):
                return fieldNum(InventDim, InventBatchId);

            case classStr(InventTrackingDimensionSerial):
                return fieldNum(InventDim, InventSerialId);

            case classStr(InventTrackingDimensionOwner):
                return fieldNum(InventDim, InventOwnerId_RU);

            case classStr(InventTrackingDimensionGTD_RU):
                return fieldNum(InventDim, InventGTDId_RU);

            case classStr(InventTrackingDimensionProfile_RU):
                return fieldNum(InventDim, InventProfileId_RU);
        }

        InventDimFieldBinding fieldBinding = InventDimFieldBinding::findOrCreate(_dimensionClassName);

        if (fieldBinding)
        {
            return fieldName2Id(tableNum(InventDim), fieldBinding.FieldName);
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToDialog_RU</Name>
				<Source><![CDATA[
    public DialogGroup addFieldsToDialog_RU(
        Dialog          _dialog,
        str             _caption                = "",
        InventDimParm   _dimParmDisableFields   = null,
        DialogGroup     _dialogGroup            = null,
        str             _customFieldName        = "")
    {
        DialogGroup     dialogGroup;
        List            dimFieldsList = InventDim::dimEnabledFieldList();
        ListEnumerator  le   = dimFieldsList.getEnumerator();
        FieldId         dimFieldId;
        DialogField     df;
        SysDictField    dictField;

        dialogGroup = _dialog.addGroup(_caption, _dialogGroup);
        dialogGroup.trackFields(true);

        while (le.moveNext())
        {
            dimFieldId = le.current();
            dictField  = new SysDictField(tableNum(InventDim), dimFieldId);

            if (! prmisDefault(_customFieldName))
            {
                _dialog.customFieldName_RU(_customFieldName + '_' + dictField.name());
            }

            df = _dialog.addField(
                dictField.typeName(),
                fieldId2pname(tableNum(InventDim), dimFieldId),
                dictField.help());

            df.value(this.(dimFieldId));
            df.enabled(! _dimParmDisableFields.(InventDim::dim2dimParm(dimFieldId)));
        }

        return dialogGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAlternativeProductDimensionsFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimensions with the alternative values for the provide item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    public void initAlternativeProductDimensionsFromInventTable(InventTable _inventTable)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            this.(productDim.parmInventDimFieldId()) = productDim.parmAlternativeValueForItem(_inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allInventDimParmFieldsHaveValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if all fields that are set on the <c>InventDimParm</c> table has corresponding field values.
    /// </summary>
    /// <param name="_inventDimParm">
    ///    An  <c>InventDimParm</c> buffer.
    /// </param>
    /// <param name="_listOfDimFieldsToCheck">
    ///    A  <c>List</c> list of fields to check.
    /// </param>
    /// <returns>
    ///   true if all fields from the list that are set on the inventDimParm has values.
    /// </returns>
    public boolean allInventDimParmFieldsHaveValues(
        InventDimParm   _inventDimParm,
        List            _listOfDimFieldsToCheck)
    {
        ListEnumerator  le;
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        boolean         ret = true;

        le = _listOfDimFieldsToCheck.getEnumerator();
        while (le.moveNext() && ret)
        {
            dimFieldId      = le.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);

            if (_inventDimParm.(dimParmFieldId) && !this.(dimFieldId))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyFieldFromInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Goes over all fields that are set on the <c>InventDimParm</c> table and returns the fieldId 
    ///    of the first field that doesn't have a value.
    /// </summary>
    /// <param name="_inventDimParm">
    ///    An  <c>InventDimParm</c> buffer.
    /// </param>
    /// <param name="_listOfDimFieldsToCheck">
    ///    A  <c>List</c> list of fields to check.
    /// </param>
    /// <returns>
    ///  0 if all fields from the list that are set on the inventDimParm have values. Otherwise, the fieldId of the first empty field.
    /// </returns>
    [Hookable(false)]
    internal FieldId getEmptyFieldFromInventDimParm(
        InventDimParm   _inventDimParm,
        List            _listOfDimFieldsToCheck)
    {
        FieldId ret = 0;

        ListEnumerator le = _listOfDimFieldsToCheck.getEnumerator();
        while (le.moveNext())
        {
            FieldId dimFieldId      = le.current();
            FieldId dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);

            if (_inventDimParm.(dimParmFieldId) && !this.(dimFieldId))
            {
                ret = dimFieldId;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDimensionSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any product dimension fields have non-default values.
    /// </summary>
    /// <returns>
    /// true if any product dimension is specified; otherwise, false
    /// </returns>
    public boolean anyProductDimensionSpecified()
    {
        var enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            if (this.(enumerator.current()))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTrackingDimensionSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any tracking dimension fields have non-default values.
    /// </summary>
    /// <returns>
    /// true if any tracking dimension is specified; otherwise, false
    /// </returns>
    public boolean anyTrackingDimensionSpecified()
    {
        ListEnumerator  enumerator;

        enumerator = EcoResTrackingDimensionGroup::dimEnabledFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            if (this.(enumerator.current()))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPerformItemTracing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether item tracing can be done of the inventory dimensions.
    /// </summary>
    /// <returns>
    /// true if item tracing can be done of the inventory dimensions; otherwise, false
    /// </returns>
    public boolean canPerformItemTracing()
    {
        #ISOCountryRegionCodes

        var checkAllTrackingDimensions = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        ListEnumerator  enumerator;

        enumerator = EcoResTrackingDimensionGroup::dimEnabledFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId dimensionFieldId = enumerator.current();

            if ((checkAllTrackingDimensions
                 || dimensionFieldId == fieldNum(InventDim, inventBatchId)
                 || dimensionFieldId == fieldNum(InventDim, inventSerialId))
                && this.(enumerator.current()))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimCountingFieldsValid</Name>
				<Source><![CDATA[
    public boolean checkDimCountingFieldsValid(
        ItemId              _itemId,
        InventDimParm       _inventDimParm)
    {
        InventDimGroupFieldSetupEnumerator      enumerator              = InventDimGroupSetup::newItemId(_itemId).getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;

        FieldId                                 inventDimFieldId;
        FieldId                                 inventDimParmFieldId;

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
                if (_inventDimParm.(inventDimParmFieldId))
                {
                    if (!this.(inventDimFieldId) && !inventDimGroupFieldSetup.isAllowBlankReceiptEnabled() && !inventDimGroupFieldSetup.isAllowBlankIssueEnabled())
                    {
                        return false;
                    }
                }
            }
            else if (this.(inventDimFieldId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimFieldSetup</Name>
				<Source><![CDATA[
    public boolean checkDimFieldSetup(
        InventDimGroupFieldSetup        _inventDimGroupFieldSetup,
        InventTable                     _inventTable,
        InventDim                       _inventDim_Orig,
        InventMovement                  _movement                   = null,
        Set                             _dimFieldIdSetAllowEmpty    = new Set(Types::Integer))
    {
        boolean         ok                  = true;
        FieldId         inventDimFieldId    = _inventDimGroupFieldSetup.dimFieldId();
        boolean         allowEmptyDim       = _dimFieldIdSetAllowEmpty.in(-1) || _dimFieldIdSetAllowEmpty.in(inventDimFieldId);

        #InventDimDevelop

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);
        _inventDim_Orig.checkInvalidFieldAccess(false);

        if (_inventDimGroupFieldSetup.isMandatory() && !this.(inventDimFieldId) && !allowEmptyDim)
        {
            if (_inventDimGroupFieldSetup.isProductDimension())
            {
                ok = checkFailed(strFmt("@SYS54774",fieldId2pname(this.TableId, inventDimFieldId)));
            }
            else
            {
                ok = checkFailed(strFmt("@SYS103633",fieldId2pname(this.TableId, inventDimFieldId)));
            }
        }

        InventProductDimension dimProduct = InventDimension::singletonFromInventDimFieldId(inventDimFieldId) as InventProductDimension;
        if (dimProduct)
        {
            if (this.(inventDimFieldId) || (!this.(inventDimFieldId) && !allowEmptyDim))
            {
                if (!dimProduct.checkExistsValueForItem(_inventTable, this.(inventDimFieldId)))
                {
                    ok = false;
                }
            }
        }

        InventTrackingDimension dimTracking = InventDimension::singletonFromInventDimFieldId(inventDimFieldId) as InventTrackingDimension;
        if (dimTracking &&
            dimTracking.mustCheckValueForDimFieldSetup())
        {
            if (this.(inventDimFieldId) &&
                this.(inventDimFieldId) != _inventDim_Orig.(inventDimFieldId))
            {
                if (!dimTracking.checkExistsValueForItem(_inventTable, this.(inventDimFieldId)))
                {
                    ok = false;
                }
            }
        }

        if (inventDimFieldId == fieldNum(InventDim,wmsLocationId)
         && this.wmsLocationId
         && this.wmsLocationId != _inventDim_Orig.wmsLocationId)
        {
            if (!WMSLocation::find(this.wmsLocationId, this.InventLocationId))
            {
                ok = checkFailed(strFmt("@SYS53781", this.wmsLocationId, this.InventLocationId));
            }
        }

        if (inventDimFieldId == fieldNum(InventDim, InventSiteId)
         && this.InventSiteId
         && this.InventSiteId != _inventDim_Orig.InventSiteId
         && !InventSite::exist(this.InventSiteId))
        {
            ok = checkFailed(strFmt("@SYS111931", this.InventSiteId));
        }

        if (inventDimFieldId == fieldNum(InventDim, InventLocationId)
         && this.InventLocationId
         && this.InventLocationId != _inventDim_Orig.InventLocationId
         && !InventLocation::exist(this.InventLocationId))
        {
            ok = checkFailed(strFmt("@SYS5001", this.InventLocationId));
        }

        // Added License Plate & Inventory Status
        if (inventDimFieldId == fieldNum(InventDim, InventStatusId)  &&
            this.InventStatusId                                      &&
            this.InventStatusId != _inventDim_Orig.InventStatusId &&
            !WHSInventStatus::exist(this.InventStatusId))
        {
            ok = checkFailed(strFmt("@WAX364", this.InventStatusId));
        }

        if (inventDimFieldId == fieldNum(InventDim, LicensePlateId)  &&
            this.LicensePlateId                                      &&
            this.LicensePlateId != _inventDim_Orig.LicensePlateId &&
            !WHSLicensePlate::exist(this.LicensePlateId))
        {
            ok = checkFailed(strFmt("@WAX363", this.LicensePlateId));
        }

        if (inventDimFieldId == fieldNum(InventDim,InventSiteId)
         && this.InventSiteId)
        {
            if (this.InventLocationId
             && InventLocation::find(this.InventLocationId).InventSiteId != this.InventSiteId)
            {
                ok = checkFailed(strFmt("@SYS104861", this.InventLocationId, this.InventSiteId));
            }
        }


        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimFieldsValid</Name>
				<Source><![CDATA[
    public boolean checkDimFieldsValid(
        ItemId              _itemId,
        InventDim           _inventDim_orig,
        boolean             _errorIfNotActive           = true,
        Set                 _dimFieldIdSetAllowEmpty    = new Set(Types::Integer),
        boolean             _skipProductDimensions      = false)
    {
        boolean                                 ok = true;
        boolean                                 exitsInventDimCombination;
        InventTable                             inventTable = InventTable::find(_itemId);
        InventDimGroupSetup                     inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
        InventDimGroupFieldSetupEnumerator      enumerator  = inventDimGroupSetup.getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        if (!_skipProductDimensions)
        {
            exitsInventDimCombination = InventDimCombination::existByInventDim(_itemId, this);
            if (exitsInventDimCombination)
            {
                _skipProductDimensions = true;
            }
        }

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();

            if (_skipProductDimensions && inventDimGroupFieldSetup.isProductDimension())
            {
                continue;
            }

            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                if (!this.checkDimFieldSetup(   inventDimGroupFieldSetup,
                                                inventTable,
                                                _inventDim_orig,
                                                null,
                                                _dimFieldIdSetAllowEmpty))
                {
                    ok = false;
                }
            }
            else if (_errorIfNotActive && this.(inventDimFieldId))
            {
                ok = checkFailed(strFmt("@SYS54773",fieldId2pname(this.TableId, inventDimFieldId)));
            }
        }

        return ok && (exitsInventDimCombination || this.checkInventDimCombination(_itemId, inventDimGroupSetup.ecoResProductDimGroupSetup()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimCombination</Name>
				<Source><![CDATA[
    public boolean checkInventDimCombination(
        ItemId                     _itemId,
        EcoResProductDimGroupSetup _productDimGroupSetup = EcoResProductDimGroupSetup::newItemId(_itemId),
        boolean                    _showError            = true)
    {
        if (!this.mustCheckInventDimCombination(_productDimGroupSetup))
        {
            return true;
        }

        if (InventDimCombination::existByInventDim(_itemId, this))
        {
            return true;
        }

        if (_showError)
        {
            return checkFailed(this.errorTxtInventDimCombinationDoesNotExist(_itemId, _productDimGroupSetup));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimCombinationExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an <c>InventDimCombination</c> record exists for the item with product dimensions from this <c>InventDim</c> buffer.
    /// </summary>
    /// <param name = "_itemId">The item Id.</param>
    /// <param name = "_productDimGroupSetup">The items product dimensions group setup.</param>
    /// <returns>true if the record exists; otherwise, false. If no product dimensions are active true is returned.</returns>
    [Hookable(false)]    
    internal boolean checkInventDimCombinationExist(
        ItemId                     _itemId,
        EcoResProductDimGroupSetup _productDimGroupSetup)
    {
        if (!_productDimGroupSetup)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
        
        if (!_productDimGroupSetup.anyProductDimensionsActive())
        {
            return true;
        }

        return InventDimCombination::existByInventDim(_itemId, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorTxtInventDimCombinationDoesNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the error message used when no <c>InventDimCombination</c> record exist.
    /// </summary>
    /// <param name = "_itemId">The item Id.</param>
    /// <param name = "_productDimGroupSetup">The items product dimensions group setup.</param>
    /// <returns>The error message.</returns>
    [Hookable(false)]
    internal str errorTxtInventDimCombinationDoesNotExist(
        ItemId                     _itemId,
        EcoResProductDimGroupSetup _productDimGroupSetup)
    {
        return strFmt("@SYS73899", this.preFixProductDim(_productDimGroupSetup), _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimCopyTo</Name>
				<Source><![CDATA[
    public boolean checkInventDimCopyTo(
        ItemId              _itemId,
        InventDim           _toInventDim)
    {
        List                dimFields       = InventDimGroupSetup::newItemId(_itemId).activeConsistentFields();
        ListEnumerator      enumerator      = dimFields.getEnumerator();
        FieldId             inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);
        _toInventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (this.(inventDimFieldId) != _toInventDim.(inventDimFieldId))
            {
                return checkFailed(strFmt("@SYS68246",fieldId2pname(this.TableId, inventDimFieldId)));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMandatoryCovPrDim</Name>
				<Source><![CDATA[
    public boolean checkMandatoryCovPrDim(
        ItemId      _itemId,
        boolean     _errorIfNotSpecified = true)
    {
        boolean                                 ret = true;
        InventDimGroupFieldSetupEnumerator      enumerator = InventDimGroupSetup::newItemId(_itemId).getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive()
             && inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled()
             && inventDimGroupFieldSetup.isMandatory()
             && !this.(inventDimFieldId))
            {
                ret = false;
                if (_errorIfNotSpecified)
                {
                    checkFailed(strFmt("@SYS113334",fieldId2pname(this.TableId, inventDimFieldId)));
                }
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAndGetDisabledDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure that only the active dimensions have a value.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about a dimension
    ///    setup.
    /// </param>
    /// <returns>
    ///    An <c>InventDimParm</c> buffer with disabled dimensions.
    /// </returns>
    public InventDimParm clearAndGetDisabledDimensions(InventDimGroupSetup  _inventDimGroupSetup)
    {
        ListEnumerator      enumerator  = InventDim::dimFieldListEnumerator();
        FieldId             inventDimFieldId;
        FieldId             inventDimParmFieldId;

        InventDimParm       inventDimParmActive;
        InventDimParm       inventDimParmDisabled;

        _inventDimGroupSetup.inventDimParmActive(inventDimParmActive);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            if (!inventDimParmActive.(inventDimParmFieldId))
            {
                this.clearField(inventDimFieldId);
                inventDimParmDisabled.(inventDimParmFieldId) = NoYes::Yes;
            }
        }
        return inventDimParmDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBelowLevelDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method clears dimension fields below the level based on an item's reservation hierarchy.
    /// </summary>
    /// <param name="_itemId">
    /// The Id of the item used to find the dimension hierarchy.
    /// </param>
    /// <param name="_level">
    /// The reservation hierarchy level.
    /// </param>
    [Hookable(false)]
    internal void clearBelowLevelDim(ItemId _itemId, WHSReservationHierarchyLevel _level)
    {
        InventDimParm inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveAndIncludingLevel(InventTable::find(_itemId), _level);

        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBelowLocationDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method clears dimension fields below location based on an item's reservation hierarchy
    /// </summary>
    /// <param name="_itemId">
    /// The Id of the item used to find the dimension hierarchy
    /// </param>
    public void clearBelowLocationDim(ItemId _itemId)
    {
        InventDimParm   inventDimParm;

        inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(_itemId));
        inventDimParm.wmsLocationIdFlag = NoYes::Yes;

        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBelowStatusDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears dimension fields below status based on an item's reservation hierarchy
    /// </summary>
    /// <param name="_itemId">
    ///     The Id of the item used to find the dimension hierarchy
    /// </param>
    public void clearBelowStatusDim(ItemId _itemId)
    {
        InventDimParm inventDimParm;

        inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmStatusAndAbove(InventTable::find(_itemId));

        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFieldsFromHierarchyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears dimension fields included in the hierarchy list
    /// </summary>
    /// <param name="_hierarchyList">
    /// The list of hierarchy dimensions
    /// </param>
    public void clearFieldsFromHierarchyList(List _hierarchyList)
    {
        ListEnumerator                      hierarchyListEnumerator;
        WHSReservationHierarchyElementData  hierarchyElementData;
        FieldId                             dimFieldId;

        hierarchyListEnumerator = _hierarchyList.getEnumerator();

        while (hierarchyListEnumerator.moveNext())
        {
            hierarchyElementData = hierarchyListEnumerator.current();

            dimFieldId = hierarchyElementData.parmDimensionFieldId();

            if (this.(dimFieldId))
            {
                this.clearField(dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>InventDimId</c> field.
    /// </summary>
    /// <remarks>This signals that the InventDimId does not represent the values of the dimension fields.</remarks>
    public void clearInventDimId()
    {
        this.inventDimId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLicensePlateIfInvalid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the license plate dimension if it is not allowed in the current inventory dimension combination.
    /// </summary>
    public void clearLicensePlateIfInvalid()
    {
        if (this.LicensePlateId &&
            (!this.wmsLocationId || !this.wmsLocation().whsLocationIsLPControlled()))
        {
            this.LicensePlateId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLocationAndBelowDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method clears dimension fields location and below based on an item's reservation hierarchy
    /// </summary>
    /// <param name="_itemId">
    /// The Id of the item used to find the dimension hierarchy
    /// </param>
    public void clearLocationAndBelowDim(ItemId _itemId)
    {
        InventDimParm   inventDimParm;

        inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(_itemId));

        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMismatchingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears dimension values in the <c>InventDim</c> table buffer that do not match corresponding
    /// dimension values in the <c>InventDim</c> table buffer passed as a parameter.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table buffer.
    /// </param>
    /// <param name="_enumerator">
    /// A <c>ListEnumerator</c> enumerator for the fields that should be compared.
    /// </param>
    public void clearMismatchingDimensions(InventDim _inventDim, ListEnumerator _enumerator = InventDim::dimFieldListEnumerator())
    {
        FieldId         dimFieldId;
        InventDimParm   inventDimParmThis;
        InventDimParm   inventDimParm;
        FieldId         dimParmId;

        inventDimParmThis.initFromInventDim(this);
        inventDimParm.initFromInventDim(_inventDim);

        while (_enumerator.moveNext())
        {
            dimFieldId = _enumerator.current();
            dimParmId = InventDim::dim2dimParm(dimFieldId);
            // This change is for fixing daxse 792367, to avoid invalid field access error when server configuration flag "Error on invalid field access" is turned on.
            // Mismatching dimension values clearance strategies:
            // 1, a dimension existing in target table buffer while not existing in input buffer should be cleared;
            // 2, a dimension existing in both buffers with different values should be cleared
            if (inventDimParmThis.(dimParmId) && !inventDimParm.(dimParmId)
            || (inventDimParmThis.(dimParmId) && inventDimParm.(dimParmId) && this.(dimFieldId) != _inventDim.(dimFieldId)))
            {
                this.clearField(dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotActiveDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure that only the active dimensions have a value.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about a   dimension
    ///    setup.
    /// </param>
    /// <returns>
    ///    true if any dimension was cleared; otherwise, false.
    /// </returns>
    public boolean clearNotActiveDim(InventDimGroupSetup _inventDimGroupSetup)
    {
        boolean                                 ret = false;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        if (!_inventDimGroupSetup)
        {
            return false;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        enumerator = _inventDimGroupSetup.getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (!inventDimGroupFieldSetup.isActive())
            {
                if (this.(inventDimFieldId))
                {
                    this.clearField(inventDimFieldId);
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotCovPrDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the value of all fields that do not correspond to an active dimension field that is coverage
    ///    planned.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about a dimension
    ///    setup.
    /// </param>
    /// <returns>
    ///    true if any fields were changed; otherwise, false.
    /// </returns>
    public boolean clearNotCovPrDim(InventDimGroupSetup _inventDimGroupSetup)
    {
        boolean                                 ret = false;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        if (!_inventDimGroupSetup)
        {
            return false;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        enumerator = _inventDimGroupSetup.getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if ((!inventDimGroupFieldSetup.isActive() || !inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled()) && this.(inventDimFieldId))
            {
                this.clearField(inventDimFieldId);
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the value of all fields that do not correspond to a product dimension field.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about a dimension
    ///    setup.
    /// </param>
    public void clearNotProductDim(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm           inventDimParm;
        _inventDimGroupSetup.inventDimParmActiveProductDimension(inventDimParm);
        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSalesProcessActiveDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears sales process inactive dimensions.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about a dimension
    ///    setup.
    /// </param>
    /// <returns>
    ///    true if any dimension was cleared; otherwise, false.
    /// </returns>
    public boolean clearNotSalesProcessActiveDim(InventDimGroupSetup _inventDimGroupSetup)
    {
        boolean                                 ret = false;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        if (!_inventDimGroupSetup)
        {
            return false;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        enumerator = _inventDimGroupSetup.getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (!inventDimGroupFieldSetup.isSalesProcessActivated())
            {
                if (this.(inventDimFieldId))
                {
                    this.clearField(inventDimFieldId);
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSelectedDim</Name>
				<Source><![CDATA[
    public void clearNotSelectedDim(InventDimParm _inventDimParm)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         inventDimFieldId;
        FieldId         inventDimParmFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (this.(inventDimFieldId))
            {
                inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
                if (!_inventDimParm.(inventDimParmFieldId))
                {
                    this.clearField(inventDimFieldId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSiteDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all <c>inventDim</c> information, but keeps the values of the site.
    /// </summary>
    public void clearNotSiteDim()
    {
        InventDimParm inventDimParm;

        inventDimParm.InventSiteIdFlag = NoYes::Yes;
        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSiteAndProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all <c>inventDim</c> information, but keeps the values of the site and product dimensions.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class to provide information about dimension setup.
    /// </param>
    public void clearNotSiteAndProductDim(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm inventDimParm;

        inventDimParm.setActiveSiteAndProductDimensions(_inventDimGroupSetup);
        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSiteAndWarehouseDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all <c>inventDim</c> information, but keeps the values of the site and warehouse dimensions.
    /// </summary>
    public void clearNotSiteAndWarehouseDim()
    {
        InventDimParm inventDimParm;

        inventDimParm.setActiveSiteAndWarehouseDimensions();
        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreSiteWarehouseIfEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the storage dimensions site and warehouse to to the requested values, if the dimensions are empty on the current record.
    /// </summary>
    /// <param name = "_inventSiteId">The original inventory site dimension id.</param>
    /// <param name = "_inventLocationId">The original warehouse dimension id.</param>
    public void restoreSiteWarehouseIfEmpty(InventSiteId _inventSiteId, InventLocationId _inventLocationId)
    {
        if (!this.InventSiteId)
        {
            this.InventSiteId = _inventSiteId;
        }

        if (this.InventSiteId == _inventSiteId && this.InventLocationId == '')
        {
            this.InventLocationId = _inventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreStorageDimensionFieldsIfEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the storage dimensions fields to to the requested values, if the dimensions are empty on the current record.
    /// </summary>
    /// <param name = "_inventSiteId">The original inventory site dimension id.</param>
    /// <param name = "_inventLocationId">The original warehouse dimension id.</param>
    /// <param name = "_inventStatusId">The original inventory status dimension id.</param>
    /// <param name = "_locationId">The original wMSLocation dimension id.</param>
    /// <param name = "_licensePlateId">The original licensePlateId dimension id.</param>
    public void restoreStorageDimensionFieldsIfEmpty(InventSiteId _inventSiteId, InventLocationId _inventLocationId, WHSInventStatusId _inventStatusId, WMSLocationId _locationId, WHSLicensePlateId _licensePlateId)
    {
        this.restoreSiteWarehouseIfEmpty(_inventSiteId, _inventLocationId);

        if (!this.InventStatusId)
        {
            this.InventStatusId = _inventStatusId;
        }

        if (this.InventLocationId == _inventLocationId && !this.wMSLocationId)
        {
            this.wMSLocationId = _locationId;
        }

        if (!this.LicensePlateId)
        {
            this.LicensePlateId = _licensePlateId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOneCovDim</Name>
				<Source><![CDATA[
    public boolean clearOneCovDim()
    {
        List                sortedCovDimFields  = InventDim::reverseDimFieldsList(InventDimMetaDataCache::dimCovDimEnabledFieldList());
        ListEnumerator      enumerator          = sortedCovDimFields.getEnumerator();
        FieldId             inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (this.(inventDimFieldId))
            {
                this.clearField(inventDimFieldId);
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the values of all product dimension fields.
    /// </summary>
    public void clearProductDimensions()
    {
        InventDimParm inventDimParm     = EcoResProductDimGroupSetup::inventDimParmProductDimensions();

        inventDimParm.toggleAllInventDim();
        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearStorageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the values of all storage dimension fields.
    /// </summary>
    public void clearStorageDimensions()
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDimFieldList(InventDim::dimStorageDimFieldList());
        inventDimParm.toggleAllInventDim();

        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the values of all tracking dimension fields.
    /// </summary>
    public void clearTrackingDimensions()
    {
        InventDimParm inventDimParm;

        inventDimParm.initFromInventDimFieldList(InventDim::dimTrackingDimFieldList());
        inventDimParm.toggleAllInventDim();

        this.clearNotSelectedDim(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the value of the specified dimension field.
    /// </summary>
    /// <param name = "_dimFieldId">
    ///     The id of the field to clear.
    /// </param>
    public void clearField(fieldId _dimFieldId)
    {
        this.(_dimFieldId) = InventDim::emptyDimField(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDenominatorUsedDim</Name>
				<Source><![CDATA[
    public void commonDenominatorUsedDim(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _origDim)
    {
        List            dimFields   = _inventDimGroupSetup.activeFields();
        ListEnumerator  enumerator  = dimFields.getEnumerator();
        FieldId         inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);
        _origDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (this.(inventDimFieldId) != _origDim.(inventDimFieldId))
            {
                _origDim.clearField(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies product dimensions from the given <c>InventDim</c> record if product dimensions were different.
    /// </summary>
    /// <param name="_inventDim">
    ///    An instance of <c>InventDim</c> that provides the new product dimensions.
    /// </param>
    /// <param name="_itemId">
    ///    An Item Id that the dimensions are relevant to.
    /// </param>
    /// <returns>
    ///    true if product dimensions were updated; otherwise, false.
    /// </returns>
    public boolean copyProductDimensions(InventDim _inventDim, ItemId _itemId)
    {
        EcoResProductDimGroupSetup productDimGroupSetup = EcoResProductDimGroupSetup::newItemId(_itemId);
        boolean productDimEqual = InventDim::isInventDimEqualProductDim(productDimGroupSetup, this, _inventDim);

        if (!productDimEqual)
        {
            this.initFromInventDim(_inventDim, InventDim::dimProductDimFieldList());
        }

        return !productDimEqual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySelectedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the current record, based on a list of <c>FieldIds</c> indicating which fields should be copied.
    /// </summary>
    /// <param name = "_inventDimFieldIdList">A list of <c>FieldIds</c> indicating which fields should be copied.</param>
    /// <returns>A copy of the current record, with all fields not represented in the list set to blank.</returns>
    public InventDim copySelectedDimensions(List _inventDimFieldIdList)
    {
        ListEnumerator enumerator = _inventDimFieldIdList.getEnumerator();
        InventDim inventDim;

        while (enumerator.moveNext())
        {
            FieldId fieldId = enumerator.current();
            inventDim.(fieldId) = this.(fieldId);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifiedProductDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a set of product dimension fields that are different than the original ones.
    /// </summary>
    /// <param name = "_originalDimensions">The original dimension record.</param>
    /// <param name = "_newDimensions">The new dimension record.</param>
    /// <returns>Set of product dimension fields that are different than the original ones.</returns>
    public static Set getModifiedProductDimensionFields(InventDim _originalDimensions, InventDim _newDimensions)
    {
        Set modifiedFields = new Set(Types::Integer);
        ListEnumerator dimFields = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();
            if (_originalDimensions.(dimFieldId) != _newDimensions.(dimFieldId))
            {
                modifiedFields.add(dimFieldId);
            }
        }

        return modifiedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifiedInventoryDimensionFields</Name>
				<Source><![CDATA[
    public static Set getModifiedInventoryDimensionFields(InventDim _originalDimensions, InventDim _newDimensions)
    {
        Set modifiedFields = new Set(Types::Integer);
        ListEnumerator dimFields = InventDim::dimFieldListEnumerator();

        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();
            if (_originalDimensions.(dimFieldId) != _newDimensions.(dimFieldId))
            {
                modifiedFields.add(dimFieldId);
            }
        }

        return modifiedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductDimensionsAndGetModifiedDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies product dimensions from the given <c>InventDim</c> record if product dimensions were different.
    ///     Returns a set of product dimension fields that are different than the original ones.
    /// </summary>
    /// <param name = "_inventDim">An instance of <c>InventDim</c> that provides the new product dimensions.</param>
    /// <param name = "_itemId">An Item Id that the dimensions are relevant to.</param>
    /// <returns>A set of modified product dimensions if any were modified; Otherwise, null.</returns>
    public Set copyProductDimensionsAndGetModifiedDimensionFields(InventDim _inventDim, ItemId _itemId)
    {
        Set         productDimensionFields;
        InventDim   originalInventDim;

        originalInventDim.data(this);

        if (this.copyProductDimensions(_inventDim, _itemId))
        {
            this.data(InventDim::findOrCreate(this));
            productDimensionFields = InventDim::getModifiedProductDimensionFields(originalInventDim, _inventDim);
        }
        return productDimensionFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimFinancial</Name>
				<Source><![CDATA[
    public void copyDimFinancial(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim)
    {
        this.initFromInventDim(_fromInventDim, _inventDimGroupSetup.activeFinancialInventoryFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimParmDim</Name>
				<Source><![CDATA[
    public void copyDimParmDim(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim,
        InventDimParm                   _inventDimParmSelected)
    {
        List            dimFields       = _inventDimGroupSetup.activeFields();
        ListEnumerator  enumerator      = dimFields.getEnumerator();
        FieldId         inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (_inventDimParmSelected.(InventDim::dim2dimParm(inventDimFieldId)))
            {
                this.(inventDimFieldId) = _fromInventDim.(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimPhysical_RU</Name>
				<Source><![CDATA[
    public void copyDimPhysical_RU(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim)
    {
        this.initFromInventDim(_fromInventDim, _inventDimGroupSetup.activePhysicalInventoryFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPrimaryDim</Name>
				<Source><![CDATA[
    public void copyPrimaryDim(
        InventDimGroupSetup         _inventDimGroupSetup,
        InventDim                   _fromInventDim)
    {
        this.initFromInventDim(_fromInventDim, _inventDimGroupSetup.activePrimaryStockingFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySourcingFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the sourcing site and sourcing location from the <c>SalesLine</c> and returns the matching <c>InventDim</c> record.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record to copy from.</param>
    /// <returns>An <c>InventDim</c> record where the sourcing site and sourcing location matches the <c>SalesLine</c> record.</returns>
    public InventDim copySourcingFromSalesLine(SalesLine _salesLine)
    {
        this.inventSiteId = _salesLine.SourcingInventSiteId;
        this.inventLocationId = _salesLine.SourcingInventLocationId;
        return InventDim::findOrCreate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deduceMissingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deduces any missing dimension values given other specified dimensions.
    /// </summary>
    public void deduceMissingDimensions()
    {
        if (this.InventLocationId && !this.InventSiteId)
        {
            this.InventSiteId = this.inventLocation().InventSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _doDelete = false)
    {
        if (_doDelete)
        {
            if (this.InventDimId == inventDim::InventDimIdBlank())
            {
                throw error("@SCM:BlankInventDimNotAllowedChangeOrDelete");
            }

            ttsbegin;

            super();

            ttscommit;

            InventDimRecordCache::remove(this.orig());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimValue2str</Name>
				<Source><![CDATA[
    [Wrappable(false), Hookable(false)]
    public str dimValue2str(FieldId _dimFieldId)
    {
        return InventDim::dimValueAsString(this.(_dimFieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimValueAsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a dimension value as a string in the user's culture.
    /// </summary>
    /// <param name = "_value">The dimension value.</param>
    /// <returns>The formatted string.</returns>
    [Wrappable(false), Hookable(false)]
    public static str dimValueAsString(anytype _value)
    {
        Types baseType = typeOf(_value);
        switch (baseType)
        {
            case Types::String      : return _value;
            case Types::Integer     : return int2str(_value);
            case Types::Real        : return num2Str(_value, -1, max(2, numOfDec(_value)), -1, -1);
            case Types::Date        : return date2StrUsr(_value, DateFlags::FormatAll);
            case Types::Enum        : return enum2str(_value);
            case Types::Int64       : return int642str(_value);
            case Types::Guid        : return _value;
            case Types::UtcDateTime : return DateTimeUtil::toStr(_value);
        }

        throw error(strFmt("@SYS76481", baseType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimValueAsStringInvariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a dimension value as a string using invariant culture.
    /// </summary>
    /// <param name = "_value">The dimension value.</param>
    /// <returns>The formatted string.</returns>
    [Wrappable(false), Hookable(false)]
    public static str dimValueAsStringInvariant(anytype _value)
    {
        Types baseType = typeOf(_value);
        switch (baseType)
        {
            case Types::String:
                return _value;

            case Types::Real:
            case Types::UtcDateTime:
                return InventDim::formatValueUsingCulture(_value, System.Globalization.CultureInfo::InvariantCulture);
        }

        throw error(strFmt("@SYS76481", baseType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatValueUsingCulture</Name>
				<Source><![CDATA[
    private static str formatValueUsingCulture(
        anytype _value,
        System.Globalization.CultureInfo _culture)
    {
        return System.Convert::ToString(_value, _culture);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSetInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any of the inventory dimension fields represented in a specified container hold a
    /// value in a specified <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDimSetup">
    /// A container that contains field IDs from the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    /// true if at least one of the fields holds a value; otherwise, false.
    /// </returns>
    public boolean existSetInventDim(container _inventDimSetup)
    {
        FieldId inventDimFieldId;
        int c;
        int n = conLen(_inventDimSetup);

        for (c = 1; c <= n; c++)
        {
            inventDimFieldId = conPeek(_inventDimSetup, c);
            if (this.(inventDimFieldId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog_RU</Name>
				<Source><![CDATA[
    void getFromDialog_RU(
        Dialog      _dialog,
        DialogGroup _dialogGroup)
    {
        List                    dimFieldsList = InventDim::dimEnabledFieldList();
        ListEnumerator          le   = dimFieldsList.getEnumerator();
        DialogField             df;
        FieldId                 dimFieldId;
        int                     x = 1;

        if (_dialogGroup.fieldnamesCount() < dimFieldsList.elements())
        {
            throw(error(strFmt("@SYS19306", funcName())));
        }

        while (le.moveNext())
        {
            dimFieldId = le.current();
            df = _dialog.getDialogClass(_dialogGroup.fieldnameNo(x));
            this.(dimFieldId) = df.value();

            x++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goodsInRouteDimId_RU</Name>
				<Source><![CDATA[
    public InventDimId goodsInRouteDimId_RU(InventDimGroupSetup _inventDimGroupSetup)
    {
        List            dimActiveFields     = _inventDimGroupSetup.activeFields();
        ListEnumerator  enumerator          = dimActiveFields.getEnumerator();
        FieldId         dimFieldId;
        InventDim       inventDim;
        InventLocation  inventLocation;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();

            switch (dimFieldId)
            {
                case fieldNum(InventDim, InventLocationId):
                    inventDim.InventLocationId = this.inventLocation().InventLocationIdGoodsInRoute_RU;
                    break;
                case fieldNum(InventDim, wmsLocationId):
                    inventLocation = InventLocation::find(this.inventLocation().InventLocationIdGoodsInRoute_RU);
                    if (inventLocation)
                    {
                        inventDim.wmsLocationId = inventLocation.wmsLocationIdGoodsInRoute_RU;
                    }
                    break;
                default:
                    inventDim.(dimFieldId) = this.(dimFieldId);
                    break;
            }
        }

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the string that is used when the hash value is calculated for the dimension values that
    /// are not included in the <c>DimIdx</c> index.
    /// </summary>
    /// <returns>
    /// A string that contains the calculated hash key.
    /// </returns>
    public str hashKey()
    {
        // Any change on this method should be ported to method InventDimSHA3HashHexGenerator.hashKey().  
        #InventDimDevelop
        str hashKey;

        void appendStr(str _value, str _key)
        {
            str trimmedValue = strRTrim(_value);
            if (trimmedValue)
            {
                hashKey += _key + ':' + trimmedValue + '~';
            }
        }

        /*
        Create a string that is unique for every combination of the dimensions.
        The field values must be trimmed for trailing spaces, as this method is invoked before insert() - where such trimming also occurs.
        */

        hashKey = strRTrim(this.ConfigId) + '~'
              + strRTrim(this.InventBatchId) + '~'
              + strRTrim(this.InventColorId) + '~'
              + strRTrim(this.InventGtdId_RU) + '~'
              + strRTrim(this.InventLocationId) + '~'
              + strRTrim(this.InventOwnerId_RU) + '~'
              + strRTrim(this.InventProfileId_RU) + '~'
              + strRTrim(this.InventSerialId) + '~'
              + strRTrim(this.InventSiteId) + '~'
              + strRTrim(this.InventSizeId) + '~'
              + strRTrim(this.InventStatusId) + '~'
              + strRTrim(this.InventStyleId) + '~'
              + strRTrim(this.LicensePlateId) + '~'
              + strRTrim(this.WMSlocationId) + '~';

        appendStr(this.wMSPalletId, 'WMSPalletId');
        appendStr(this.InventDimension1, 'InventDimension1');
        appendStr(this.InventDimension2, 'InventDimension2');
        appendStr(this.InventDimension3, 'InventDimension3');
        appendStr(this.InventDimension4, 'InventDimension4');
        appendStr(this.InventDimension5, 'InventDimension5');
        appendStr(this.InventDimension6, 'InventDimension6');
        appendStr(this.InventDimension7, 'InventDimension7');
        appendStr(this.InventDimension8, 'InventDimension8');
        
        if (this.InventDimension9)
        {
            str valueDimension9 = strLRTrim(DateTimeUtil::toFormattedStr(this.InventDimension9, 1, 2, 2, 2, 2, 4, 1, 1)); // E.g. "07.31.2017 19:36:35"
            if (valueDimension9)
            {
                hashKey += 'InventDimension9:' + valueDimension9 + '~';
            }
        }
        
        if (this.InventDimension10)
        {
            str valueDimension10 = strLRTrim(num2str(this.InventDimension10, 1, numOfDec(this.InventDimension10), 1, 2));  // E.g. "1,234.56"
            if (valueDimension10)
            {
                hashKey += 'InventDimension10:' + valueDimension10 + '~';
            }
        }
        
        /*
        Append to this string using this code pattern. This will ensure that existing InventDim records do not have to be rehashed.
        The class InventDimUniquenessEnabling can be used to rehash InventDim records.
        str value<FieldName> = strRTrim(this.<FieldName>);
        if (value<FieldName>)
        {
            hashKey += '<FieldName>:' + value<FieldName> + '~';
        }
        */

        appendStr(this.InventVersionId, 'InventVersionId');
        appendStr(this.InventDimension11, 'InventDimension11');
        appendStr(this.InventDimension12, 'InventDimension12');

        return strLwr(hashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the hashed value for the dimension values.
    /// </summary>
    /// <returns>
    /// A <c>InventDimSHA1Hash</c> value.
    /// </returns>
    public InventDimSHA1HashHex hashValue()
    {
        str hashKey = this.hashKey();
        str hexString = InventDim::computeSHA1Hash(hashKey);

        return hexString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hash3Value</Name>
				<Source><![CDATA[
    [SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
    public InventDimSHA3HashHex hash3Value()
    {
        str hashKey = this.hashKey();
        str hexString = InventDim::computeSHA3Hash(hashKey);

        return hexString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inheritFromInventDim_RU</Name>
				<Source><![CDATA[
    public boolean inheritFromInventDim_RU(InventDimGroupSetup _inventDimGroupSetup,
                                           InventDim           _fromInventDim,
                                           InventTransType     _inventTransType)
    {
        List            dimActiveFields;
        ListEnumerator  enumerator;
        FieldId         dimFieldId;
        boolean         inherited;

        if (_inventTransType == InventTransType::InventTransfer)
        {
            dimActiveFields = _inventDimGroupSetup.activeFields();
            enumerator      = dimActiveFields.getEnumerator();

            while (enumerator.moveNext())
            {
                dimFieldId = enumerator.current();

                if (_inventDimGroupSetup.getFieldSetup(dimFieldId).isInheritInventTransfer_RU() &&
                    this.(dimFieldId) != _fromInventDim.(dimFieldId))
                {
                    this.(dimFieldId) = _fromInventDim.(dimFieldId);
                    inherited = true;
                }
            }
        }

        return inherited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current record with values from the specified <c>InventDim</c> record.
    /// </summary>
    /// <param name="_fromInventDim">
    ///    The record from which to initialize.
    /// </param>
    /// <param name="_dimFields">
    ///    A list of IDs of the dimension fields that should be copied.
    /// </param>
    public void initFromInventDim(
        InventDim   _fromInventDim,
        List        _dimFields    = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator      = _dimFields ? _dimFields.getEnumerator() : null;
        FieldId         inventDimFieldId;

        if (!enumerator)
        {
            return;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            this.(inventDimFieldId) = _fromInventDim.(inventDimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventLocation</Name>
				<Source><![CDATA[
    public void initFromInventLocation(InventLocation  _inventLocation)
    {
        this.InventStorageDimMap::initFromInventLocation(_inventLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventLocationAndDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>InventDim</c> record based on an <c>InventLocation</c> record and an
    /// item ID.
    /// </summary>
    /// <param name="_inventLocation">
    /// A record in the <c>inventLocation</c> table.
    /// </param>
    /// <param name="_itemId">
    /// A string that holds the item ID.
    /// </param>
    /// <param name="_inventDirection">
    /// An enumeration value that determines whether this relates to an issue or a receipt.
    /// </param>
    /// <param name="_inventDimParm">
    /// A record in the <c>inventDimParm</c> table that determines which of the <c>inventDim</c> fields to
    /// initialize.
    /// </param>
    public void initFromInventLocationAndDefault(
        InventLocation      _inventLocation,
        ItemId              _itemId,
        InventDirection     _inventDirection,
        InventDimParm       _inventDimParm)
    {
        InventDim   inventDim;

        if (_inventDimParm.InventSiteIdFlag)
        {
            this.initFromInventLocation(_inventLocation);
        }

        if (_inventDimParm.InventLocationIdFlag)
        {
            this.InventLocationId = _inventLocation.InventLocationId;

            if ( _inventDimParm.wmsLocationIdFlag
              && _inventDirection != InventDirection::None)
            {
                inventDim = InventDim::findOrCreate(this);
                this.wmsLocationId = WMSLocation::defaultItemLocation(_itemId,_inventDirection,inventDim).wmsLocationId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>InventDim</c> buffer with default inventory dimensions from an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> buffer from which the default inventory dimensions should be taken.
    /// </param>
    /// <param name="_setupType">
    /// The type of the item order settings that the default site and warehouse dimensions should be taken
    /// from; optional.
    /// </param>
    /// <param name="_inventDimDefault">
    /// The <c>InventDim</c> buffer with the preferred dimensions that should be used.
    /// </param>
    /// <remarks>
    /// If the preferred warehouse dimension does not belong to the default site, the default warehouse
    /// from the item order settings will be used. If there is a product dimension
    /// in the <c>InventDim</c> buffer, the values will be kept if the product dimension is active for the
    /// item.
    /// </remarks>
    public void initFromInventTable(
        InventTable                 _inventTable,
        InventItemOrderSetupType    _setupType          = InventItemOrderSetupType::Invent,
        InventDim                   _inventDimDefault   = null
        )
    {
        InventDim   inventDim;

        // default item dimensions
        this.initProductDimensionsFromInventTable(_inventTable, _inventDimDefault);

        // default site
        this.InventSiteId       = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::findOrCreate(_inventDimDefault).InventDimId).inventSiteId(_inventDimDefault.InventSiteId, _inventTable);

        this.InventLocationId   = _inventTable.inventItemOrderSetupMap(_setupType,
                                                                        InventDim::findOrCreate(this).InventDimId).inventLocationId(_inventDimDefault.InventLocationId,
                                                                                                                                        _inventTable,
                                                                                                                                        this.InventSiteId);

        this.initFromInventLocation(this.inventLocation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionsFromInventTable</Name>
				<Source><![CDATA[
    public void initProductDimensionsFromInventTable(InventTable _inventTable, InventDim _inventDimDefault = null)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            FieldId fieldId = productDim.parmInventDimFieldId();
            if (productDim.isActiveForItem(_inventTable))
            {
                if (_inventDimDefault.(fieldId))
                {
                    this.(fieldId) = _inventDimDefault.(fieldId);
                }
                else
                {
                    this.(fieldId) = productDim.parmDefaultValueForItem(_inventTable);
                }
            }
            else
            {
                this.clearField(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSumDelta</Name>
				<Source><![CDATA[
    public void initFromInventSumDelta(
        InventSumDelta  _fromInventSumDelta,
        List            _dimFields    = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator = _dimFields ? _dimFields.getEnumerator() : null;

        if (!enumerator)
        {
            return;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventSumDelta.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            FieldId inventSumDeltaFieldId = InventDim::getInventSumDeltaFieldIdFromInventDimFieldId(inventDimFieldId);
            this.(inventDimFieldId) = _fromInventSumDelta.(inventSumDeltaFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSumDateTrans</Name>
				<Source><![CDATA[
    public void initFromInventSumDateTrans(InventSumDateTrans _inventSumDateTrans)
    {
        _inventSumDateTrans.checkInvalidFieldAccess(false);

        Enumerator inventDimFieldsEnumerator = InventDim::dimEnabledFieldList().getEnumerator();

        while (inventDimFieldsEnumerator.moveNext())
        {
            FieldId inventDimFieldId = inventDimFieldsEnumerator.current();
            FieldId inventSumDateTransFieldId = InventSumDateTrans::getInventSumDateTransFieldIdFromInventDimFieldId(inventDimFieldId);

            this.(inventDimFieldId) = _inventSumDateTrans.(inventSumDateTransFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSum</Name>
				<Source><![CDATA[
    public void initFromInventSum(
        InventSum   _fromInventSum,
        List        _dimFields    = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator = _dimFields ? _dimFields.getEnumerator() : null;

        if (!enumerator)
        {
            return;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventSum.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            FieldId inventSumFieldId = InventDim::getInventSumFieldIdFromInventDimFieldId(inventDimFieldId);
            this.(inventDimFieldId) = _fromInventSum.(inventSumFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        // Not calling super to avoid initializing based on a record template, because it's unnecessary and cost RPC and SQL calls.
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDelete</Name>
				<Source><![CDATA[
    public void doDelete()
    {
        super();

        InventDimRecordCache::remove(this.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdate</Name>
				<Source><![CDATA[
    public void doUpdate()
    {
        super();

        InventDimRecordCache::remove(this.orig());
        InventDimRecordCache::registerUncommittedChange(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInsert</Name>
				<Source><![CDATA[
    public void doInsert()
    {
        super();

        InventDimRecordCache::registerUncommittedChange(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _doInsert = false)
    {
        if (_doInsert)
        {
            if (!this.InventDimId)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            this.sha1HashHex = this.hashValue();

            ttsbegin;

            super();

            ttscommit;

            InventDimRecordCache::registerUncommittedChange(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocation</Name>
				<Source><![CDATA[
    public InventLocation inventLocation(boolean _update = false)
    {
        return InventLocation::find(this.InventLocationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationDlvAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays warehouse delivery address.
    /// </summary>
    /// <returns>
    /// The delivery address for warehouse associated with current <c>InventDim</c> record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display LogisticsAddressing inventLocationDlvAddress()
    {
        return LogisticsLocationEntity::findPostalAddress(this.inventLocation(), LogisticsLocationRoleType::Delivery).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays warehouse name.
    /// </summary>
    /// <returns>
    /// The warehouse name for current <c>InventDim</c> record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display InventLocationName inventLocationName()
    {
        return this.inventLocation().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOwner_RU</Name>
				<Source><![CDATA[
    public InventOwner_RU inventOwner_RU(boolean _forUpdate = false)
    {
        return InventOwner_RU::find(this.InventOwnerId_RU, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfile_RU</Name>
				<Source><![CDATA[
    public InventProfile_RU inventProfile_RU(boolean _forUpdate = false)
    {
        return InventProfile_RU::find(this.InventProfileId_RU, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSite</Name>
				<Source><![CDATA[
    public InventSite inventSite(boolean _update = false)
    {
        return InventSite::find(this.InventSiteId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRefiningDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current inventory dimension record buffer is refining
    ///    the dimensions of the inventory dimension specified.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An inventory dimension group setup that will determine the inventory dimension
    ///    fields to compare.
    /// </param>
    /// <param name="_genericInventDim">
    ///    An inventory dimension assumed to be more generic (with more fields empty)
    ///    than the current one.
    /// </param>
    /// <returns>
    ///    true if the current inventory dimension is refining the specified inventory
    ///    dimension; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    An inventory dimension B will refine an inventory dimension A if all the
    ///    active non-empty field values specified by A have the same value in B.
    ///    B may in turn specify additional values that A has empty.
    /// </remarks>
    public boolean isRefiningDimension(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _genericInventDim)
    {
        InventDim               inventDimCommon;

        inventDimCommon.initFromInventDim(this);
        _genericInventDim.commonDenominatorUsedDim(_inventDimGroupSetup, inventDimCommon);

        return InventDim::isInventDimEqual(inventDimCommon, _genericInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current inventory dimension record represents a supermarket.
    /// </summary>
    /// <returns>
    ///    true if the current record represents a supermarket; otherwise, false.
    /// </returns>
    public boolean isSupermarket()
    {
        return WMSLocation::isSupermarket(this.wmsLocationId,this.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapKey</Name>
				<Source><![CDATA[
    public str mapKey(
        List            _dimFields          = InventDim::dimFieldsList(),
        boolean         _includeEmptyFields = true)
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        FieldId         inventDimFieldId;
        str             s;

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            this.checkInvalidFieldAccess(false);

            boolean isFirstIteration = true;
            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();
                if (_includeEmptyFields || this.(inventDimFieldId))
                {
                    s += (isFirstIteration ? '' : '#') + this.dimValue2str(inventDimFieldId);
                }
                
                isFirstIteration = false;
            }
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapKeyCov</Name>
				<Source><![CDATA[
    public str mapKeyCov()
    {
        return this.mapKey(InventDimMetaDataCache::dimCovDimEnabledFieldList(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowDimensionMergeMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if 'Dimension still specified on the inventory transaction' message should be shown or not.
    /// </summary>
    /// <returns>
    /// true if the message should be shown; otherwise, false.
    /// </returns>
    protected boolean mustShowDimensionMergeMessage()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeUsedDim</Name>
				<Source><![CDATA[
    public void mergeUsedDim(
        InventDimGroupSetup         _dimGroupSetup,
        InventDim                   _fromInventDim,
        InventDim                   _origFromDim = _fromInventDim)
    {
        InventDimGroupFieldSetupEnumerator  fieldSetupEnumerator    = _dimGroupSetup.getFieldSetupEnumerator();
        InventDimGroupFieldSetup            fieldSetup;
        FieldId                             inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventDim.checkInvalidFieldAccess(false);
        _origFromDim.checkInvalidFieldAccess(false);

        while (fieldSetupEnumerator.moveNext())
        {
            fieldSetup = fieldSetupEnumerator.current();
            if (fieldSetup.isActive())
            {
                inventDimFieldId = fieldSetup.dimFieldId();
                if (_fromInventDim.(inventDimFieldId))
                {
                    this.(inventDimFieldId) = _fromInventDim.(inventDimFieldId);
                }
                else if (this.mustShowDimensionMergeMessage()
                    && this.(inventDimFieldId) && this.(inventDimFieldId) == _origFromDim.(inventDimFieldId))   // clearing a dimension on the movement, but not on transaction
                {
                    if ((inventDimFieldId != fieldNum(InventDim,wmsLocationId)
                     || (inventDimFieldId == fieldNum(InventDim,wmsLocationId)
                      && (!this.wmsLocationId || this.wmsLocation()))))
                    {
                        if (inventDimFieldId != fieldNum(InventDim,InventLocationId)
                        || (_fromInventDim.InventLocationId || _fromInventDim.InventSiteId == this.inventLocation().InventSiteId))
                        {
                            info(strFmt("@SYS73455",  new DictField(tableNum(InventDim),inventDimFieldId).label(), this.(inventDimFieldId)));
                        }
                    }
                }
            }
        }

        if (this.InventSiteId && this.InventLocationId && this.InventSiteId != this.inventLocation().InventSiteId)
        {
            this.InventLocationId = '';
        }

        if (this.wmsLocationId && !this.wmsLocation())
        {
            this.wmsLocationId = '';
        }

        this.clearLicensePlateIfInvalid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransferIssueIntoFinalReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the issue dimensions into the receipt dimensions for the final destination of a transfer.
    /// </summary>
    /// <param name = "_dimGroupSetup">Dimension group setup to use.</param>
    /// <param name = "_fromInventDim">Issue dimensions to merge.</param>
    public void mergeTransferIssueIntoFinalReceipt(
        InventDimGroupSetup _dimGroupSetup,
        InventDim           _inventDimIssue)
    {
        InventDimGroupFieldSetupEnumerator enumerator = _dimGroupSetup.getFieldSetupEnumerator();

        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            FieldId dimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                if (_inventDimIssue.(dimFieldId) && InventDim::isFieldIdTransferReceiptMergeable(dimFieldId))
                {
                    this.(dimFieldId) = _inventDimIssue.(dimFieldId);
                }
            }
            else
            {
                this.clearField(dimFieldId);
            }
        }

        if (this.wmsLocationId && !this.wmsLocation())
        {
            this.wmsLocationId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        AxInventDim  axInventDim;

        super(_fieldId);

        if (!FormDataUtil::isFormDataSource(this))
        {
            axInventDim = AxInventDim::newInventDim(this);
            axInventDim.setFieldAsTouched(_fieldId);
            axInventDim.modify();
        }
        else
        {
            switch (_fieldId)
            {
                case fieldNum(InventDim, InventSiteId):
                    this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                    break;

                case fieldNum(InventDim, InventLocationId):
                    this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventSiteFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values on the current or parent record because the <c>InventSiteId</c> field is
    ///    modified.
    /// </summary>
    /// <param name="_parent">
    ///    The parent record buffer that is joined to the <c>InventDim</c> record buffer; optional.
    /// </param>
    public void modifiedInventSiteFromParent(Common _parent = this)
    {
        this.InventStorageDimMap::modifiedInventSiteFromParent(_parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDimParmDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves values in flagged fields from the current record to another <c>InventDim</c> record
    /// </summary>
    /// <param name="_inventDimParm">
    /// The flags in the <c>InventDimParm</c> record determines for which fields values should be moved.
    /// </param>
    /// <param name="_inventDimTarget">
    /// The record to move values to.
    /// </param>
    /// <returns>
    /// true if any values were present in the flagged fields and moved; otherwise, false.
    /// </returns>
    public boolean moveDimParmDim(
        InventDimParm _inventDimParm,
        InventDim     _inventDimTarget)
    {
        boolean             movedAny   = false;
        ListEnumerator      enumerator = InventDim::dimFieldListEnumerator();
        FieldId             inventDimFieldId;
        FieldId             inventDimParmFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            if (_inventDimParm.(inventDimParmFieldId) && this.(inventDimFieldId))
            {
                movedAny = true;
                _inventDimTarget.(inventDimFieldId) = this.(inventDimFieldId);
                this.clearField(inventDimFieldId);
            }
        }

        return movedAny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckInventDimCombination</Name>
				<Source><![CDATA[
    public boolean mustCheckInventDimCombination(
        EcoResProductDimGroupSetup      _productDimGroupSetup,
        boolean                         _allFieldsMustbeFilled = true)
    {
        List            dimFields;
        ListEnumerator  enumerator;
        Counter         z;
        FieldId         inventDimFieldId;
        int             activeProductDimFieldsCount;

        if (!_productDimGroupSetup.anyProductDimensionsActive()
            || !InventDim::systemHasMultipleProductDimensions())
        {
            return false;
        }

        dimFields = _productDimGroupSetup.activeDimensionFields();
        enumerator = dimFields.getEnumerator();
        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (this.(inventDimFieldId) != InventDim::emptyDimField(inventDimFieldId))
            {
                z++;
            }
        }

        activeProductDimFieldsCount = dimFields.elements();

        if (!_allFieldsMustbeFilled)
        {
            return (activeProductDimFieldsCount > 1 && z > 1) ? true : false;
        }

        return (activeProductDimFieldsCount > 1 && activeProductDimFieldsCount == z) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates prefix containing names and values of inventory dimension fields.
    /// </summary>
    /// <param name = "_dimFields">The inventory dimension fields, which should be included in the result.</param>
    /// <param name = "_fieldSeparator">The separator between dimension fields.</param>
    /// <param name = "_nameValueSeparator">The separator between dimension field's name and value.</param>
    /// <returns>The string value containing names and values of inventory dimension fields.</returns>
    public str preFix(List _dimFields = InventDim::dimFieldsList(), str _fieldSeparator = ',', str _nameValueSeparator = '=')
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        str             text;
        FieldId         inventDimFieldId;

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            this.checkInvalidFieldAccess(false);

            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();
                if (this.(inventDimFieldId))
                {
                    text = (text ? text + _fieldSeparator : '') + new DictField(tableNum(InventDim),inventDimFieldId).label() + _nameValueSeparator + this.dimValue2str(inventDimFieldId);
                }
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFixNotProductDim</Name>
				<Source><![CDATA[
    public FieldLabelValue preFixNotProductDim(InventDimGroupSetup  _inventDimGroupSetup)
    {
        FieldLabelValue                         text;
        InventDimGroupFieldSetupEnumerator      enumerator = _inventDimGroupSetup.getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        this.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (!inventDimGroupFieldSetup.isProductDimension())
            {
                if (this.(inventDimFieldId))
                {
                    text = (text ? text + ',' : '') + new DictField(tableNum(InventDim),inventDimFieldId).label() + '=' + this.dimValue2str(inventDimFieldId);
                }
            }
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFixProductDim</Name>
				<Source><![CDATA[
    public FieldLabelValue preFixProductDim(EcoResProductDimGroupSetup _productDimGroupSetup)
    {
        return this.preFix(_productDimGroupSetup.activeDimensionFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFixValue</Name>
				<Source><![CDATA[
    public str preFixValue(List _dimFields = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        str             text;
        FieldId         inventDimFieldId;

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            this.checkInvalidFieldAccess(false);

            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();
                if (this.(inventDimFieldId))
                {
                    text += (text ? '/' : '') + this.dimValue2str(inventDimFieldId);
                }
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqCovDimId</Name>
				<Source><![CDATA[
    public ReqCovInventDimId reqCovDimId(InventDimGroupSetup    _inventDimGroupSetup)
    {
        InventDim   inventDim;

        inventDim.initFromInventDim(this, _inventDimGroupSetup.activeCoveragePlanFields());

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteFromParentIfModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>InventSiteId</c> field has changed.
    /// </summary>
    /// <param name="_parent">
    ///    A common parent record buffer which is joined to the <c>InventDim</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    An <c>InventDim</c> record buffer previously referenced by the parent record buffer.
    /// </param>
    public void setInventSiteFromParentIfModified(
        Common      _parent,
        InventDim   _oldInventDim)
    {
        if (this.InventSiteId != _oldInventDim.InventSiteId)
        {
            this.modifiedInventSiteFromParent(_parent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new record buffer for <c>InventDimParm</c> table that has been initialized such that
    /// the dimension selection fields are <c>NoYes::Yes</c> for each non-blank dimension field in this
    /// <c>InventDim</c> table buffer.
    /// </summary>
    /// <returns>
    /// A new <c>InventDimParm</c> table buffer initialized for selecting the matching non-blank fields in this <c>InventDim</c> table buffer.
    /// </returns>
    public InventDimParm toDimParm()
    {
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(this);
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolTipField</Name>
				<Source><![CDATA[
    public str toolTipField(FieldId _fieldId)
    {
        str ret = super(_fieldId);
        FieldId fieldId = Global::fieldExt2Id(_fieldId);

        if (InventDim::dimProductDimFieldSet().in(fieldId) ||
            fieldId == fieldNum(InventDim, InventBatchId) ||
            fieldId == fieldNum(InventDim, InventSerialId))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(this);
            if (formDataSource && formDataSource.table() == tableNum(InventDim))
            {
                Common parent = this.joinParent();
                if (parent)
                {
                    FieldId itemFieldId = fieldName2id(parent.TableId,fieldStr(InventTable,ItemId));
                    if (itemFieldId)
                    {
                        ItemId itemId = parent.(itemFieldId);
                        if (itemId)
                        {
                            ret = strFmt("@SYS79527", itemId, this.(_fieldId));
                            return ret;
                        }
                    }
                }
            }
            return strFmt("@SYS82282", this.(_fieldId));
        }
        // <GEERU>
        else if (fieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            return InventOwner_RU::name(this.(_fieldId));
        }
        // </GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _doUpdate = false)
    {
        if (_doUpdate)
        {
            InventDimId inventDimIdBlank = inventDim::InventDimIdBlank();

            If (this.orig().InventDimId == inventDimIdBlank && this.InventDimId != inventDimIdBlank)
            {
                throw error("@SCM:BlankInventDimNotAllowedChangeOrDelete");
            }

            this.assertInventDimUpdateAllowed();

            str hashKey = this.hashKey();
            this.SHA1HashHex = InventDim::computeSHA1Hash(hashKey);

            InventDim inventDim;
            if (this.inventDimId == inventDimIdBlank &&
                this.SHA1HashHex != inventDim.hashValue()) 
            {
                throw error("@SCM:BlankInventDimNotAllowedChangeDimValue");
            }

            ttsbegin;

            super();

            ttscommit;

            InventDimRecordCache::remove(this.orig());
            InventDimRecordCache::registerUncommittedChange(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertInventDimUpdateAllowed</Name>
				<Source><![CDATA[
    private void assertInventDimUpdateAllowed()
    {
        str errorMessage = this.inventDimUpdateErrorMessage();

        if (errorMessage)
        {
            throw error(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimUpdateErrorMessage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal str inventDimUpdateErrorMessage()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean             ret;
        FormDataSource      parentDatasource;
        FieldId             itemFieldId;
        InventTable         inventTable;
        InventTable         inventTableLocal;
        Common              parentBuffer;
        boolean             useSuperForBatchIdCheck = true;
        // <GEERU>
        InventTrans         inventTrans;
        // </GEERU>

        InventTable getInventTable()
        {
            parentDatasource = formGetParentDatasource(FormDataUtil::getFormDataSource(this));
            if (parentDatasource)
            {
                // Could return zero
                itemFieldId = fieldName2id(parentDatasource.table(),fieldStr(InventTable,ItemId));
                if (itemFieldId)
                {
                    inventTableLocal = InventTable::find(parentDatasource.cursor().(itemFieldId));
                }
                else if (parentDatasource.table())
                {
                    parentBuffer = parentDatasource.cursor();
                    if (parentBuffer.TableId && tableHasInstanceMethod(new DictTable(parentBuffer.TableId),identifierStr(ItemId))) // method Name
                    {
                        inventTableLocal = InventTable::find(parentBuffer.itemId());
                    }
                }
            }
            return inventTableLocal;
        }

        #InventDimDevelop

        if (_p1 == fieldNum(InventDim,InventSerialId)
        ||  _p1 == fieldNum(InventDim,InventBatchId))
        {
            ret = true;
        }
        else
        {
            ret = super(_p1);
        }

        if (ret && FormDataUtil::isFormDataSource(this) && InventDim::isFieldIdConsistentDim(_p1))
        {
            parentBuffer = FormDataUtil::getFormDataSource(this).cursor().joinParent();
            if (parentBuffer.TableId == tableNum(InventTrans))
            {
                if (_p1 == fieldNum(InventDim, InventSiteId) && InventParameters::find().MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked)
                {
                    ret = checkFailed(strFmt("@SYS113048", fieldPName(InventDim, InventSiteId)));
                }
                else
                {
                    // It is assumed that it will only be possible to edit consistent dimensions on an InventTrans record from the Edit dimensions form
                    // In all other forms the consistent dimensions should be disabled and thereby not editable
                    ret = Box::yesNo("@SYS107928" + '\n\n'+"@SYS62458", DialogButton::No, "@SYS6998") == DialogButton::Yes;
                }
            }
        }
        if (ret && FormDataUtil::isFormDataSource(this))
        {
            // <GEERU>
            #ISOCountryRegionCodes
            if (_p1 == fieldNum(InventDim, InventOwnerId_RU)
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                parentBuffer = FormDataUtil::getFormDataSource(this).cursor().joinParent();
                if (parentBuffer.TableId == tableNum(InventTrans))
                {
                    inventTrans = parentBuffer;
                    ret = inventTrans.inventMovement().checkDimInventOwnerId_RU(this);
                }
            }
            // </GEERU>
            else if (this.(_p1))
            {
                InventProductDimension prodDim = InventDimension::singletonFromInventDimFieldId(_p1) as InventProductDimension;

                if (prodDim)
                {
                    inventTable = getInventTable();
                    if (inventTable && inventTable.ItemId)
                    {
                        ret = prodDim.checkExistsValueForItem(inventTable, this.(_p1));
                        InventDim::validateFieldCombination(FormDataUtil::getFormDataSource(this),inventTable);
                    }
                }
            }
        }
        switch (_p1)
        {
            case fieldNum(InventDim,InventBatchId):
                if (ret && this.InventBatchId && FormDataUtil::isFormDataSource(this))
                {
                    inventTable = getInventTable();
                    if (inventTable && inventTable.ItemId)
                    {
                        /*
                            If we can validate that the batch is existing for an item in the InventBatch table
                            we can assume that the value entered is ok since it was ok on entry in the InventBatch table.
                        */
                        useSuperForBatchIdCheck = false;
                        ret = InventBatch::checkExist(this.InventBatchId, inventTable.ItemId) && ret;
                    }
                }

                if (useSuperForBatchIdCheck)
                {
                    ret = super(_p1) && ret;
                }
                break;
            
            case fieldNum (InventDim, InventLocationId):
                ret = ret & this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDimension</Name>
				<Source><![CDATA[
    public boolean validateProductDimension(
        FieldId         _fieldId,
        InventTable     _inventTable,
        boolean         _silence = false)
    {
        boolean ok = true;

        if (this.(_fieldId))
        {
            InventProductDimension prodDim = InventDimension::singletonFromInventDimFieldId(_fieldId) as InventProductDimension;

            if (prodDim)
            {
                ok = prodDim.checkExistsValueForItem(_inventTable, this.(_fieldId), _silence);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        FormDataSource      parentDatasource;
        FieldId             itemFieldId;
        InventTable         inventTable;
        InventTable         inventTableLocal;
        Common              parentBuffer;

        InventTable getInventTable()
        {
            parentDatasource = formGetParentDatasource(FormDataUtil::getFormDataSource(this));
            if (parentDatasource)
            {
                // Could return zero
                itemFieldId = fieldName2id(parentDatasource.table(),fieldStr(InventTable,ItemId));
                if (itemFieldId)
                {
                    inventTableLocal = InventTable::find(parentDatasource.cursor().(itemFieldId));
                }
                else if (parentDatasource.table())
                {
                    parentBuffer = parentDatasource.cursor();
                    if (parentBuffer.TableId && tableHasInstanceMethod(new DictTable(parentBuffer.TableId),identifierStr(ItemId))) // method Name
                    {
                        inventTableLocal = InventTable::find(parentBuffer.itemId());
                    }
                }
            }
            return inventTableLocal;
        }

        if (this.anyProductDimensionSpecified() && FormDataUtil::isFormDataSource(this))
        {
            inventTable = getInventTable();
            if (inventTable)
            {
                return InventDim::validateFieldCombination(FormDataUtil::getFormDataSource(this),inventTable);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInventDimCombination</Name>
				<Source><![CDATA[
    public boolean validateWriteInventDimCombination(
        ItemId      _itemId,
        boolean     _checkMandatory = true)
    {
        EcoResProductDimGroupSetup  productDimSetup = EcoResProductDimGroupSetup::newItemId(_itemId);

        if (!this.mustCheckInventDimCombination(productDimSetup,_checkMandatory))
        {
            return true;
        }

        if (_checkMandatory)
        {
            if (InventDimCombination::existByInventDim(_itemId, this))
            {
                return true;
            }
        }
        else
        {
            if (InventDimCombination::existEntry(_itemId,this))
            {
                return true;
            }
        }
        return checkFailed(strFmt("@SYS73899",this.preFixProductDim(productDimSetup),_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteMandatoryAndProductDim</Name>
				<Source><![CDATA[
    public boolean validateWriteMandatoryAndProductDim(ItemId _itemId,
                                                       boolean _validateNonProductDim = true)
    {
        boolean                     ok = true;
        InventTable                 inventTable = InventTable::find(_itemId);
        InventDimGroupSetup         inventDimGroupSetup     = InventDimGroupSetup::newInventTable(inventTable);
        List                        mandatoryFields         = inventDimGroupSetup.activeMandatoryFields();
        Set                         productDimensionFields  = InventDim::dimFieldList2Set(inventDimGroupSetup.ecoResProductDimGroupSetup().activeDimensionFields());
        ListEnumerator              enumerator              = mandatoryFields.getEnumerator();
        FieldId                     inventDimFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            if (productDimensionFields.in(inventDimFieldId))
            {
                if (!this.(inventDimFieldId))
                {
                    ok = checkFailed(strFmt("@SYS54774",fieldId2pname(this.TableId, inventDimFieldId)));
                }

                if (!this.validateProductDimension(inventDimFieldId, inventTable) )
                {
                    ok = false;
                }
            }
            else if (_validateNonProductDim
                  && !this.(inventDimFieldId))
            {
                ok = checkFailed(strFmt("@SYS103633",fieldId2pname(this.TableId, inventDimFieldId)));
            }
        }

        return ok && this.validateWriteInventDimCombination(_itemId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProductDimensions</Name>
				<Source><![CDATA[
    public boolean validateWriteProductDimensions(
        ItemId      _itemId,
        boolean     _checkMandatory = true,
        boolean     _silence        = false)
    {
        boolean             ok = true;
        InventTable         inventTable = InventTable::find(_itemId);
        List                dimFields   = EcoResProductDimGroupSetup::newInventTable(inventTable).activeDimensionFields();
        ListEnumerator      enumerator  = dimFields.getEnumerator();
        FieldId             inventDimFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            if (_checkMandatory && !this.(inventDimFieldId))
            {
                ok = checkFailed(strFmt(_itemId + "@SYS54774",fieldId2pname(this.TableId, inventDimFieldId)));
            }

            if (!this.validateProductDimension(inventDimFieldId, inventTable, _silence) )
            {
                ok = false;
            }
        }

        return ok && this.validateWriteInventDimCombination(_itemId,_checkMandatory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayParentLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays parent License Plate on forms
    /// </summary>
    /// <returns>
    /// Parent License Plate to display.
    /// </returns>
    display WHSLicensePlateParent whsDisplayParentLP()
    {
        WHSLicensePlateId   licensePlate;

        if (!this.isFieldDataRetrieved(literalStr(LicensePlateId)))
        {
            licensePlate = '';
        }
        else
        {
            licensePlate = WHSLicensePlate::find(this.LicensePlateId).LicensePlateParent;
        }

        return licensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocation</Name>
				<Source><![CDATA[
    public WMSLocation wmsLocation(boolean _update = false)
    {
        return WMSLocation::find(this.wmsLocationId, this.InventLocationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventDimDatasource</Name>
				<Source><![CDATA[
    static public FormDataSource callerInventDimDatasource(Args _callerArgs)
    {
        return getJoinChildFormDataSource(FormDataUtil::getFormDataSource(_callerArgs.record()), tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRenameProductDimension</Name>
				<Source><![CDATA[
    static public boolean checkRenameProductDimension(FieldId _dimFieldId)
    {
        #InventDimDevelop

        if (!InventDim::isFieldIdProductDimension(_dimFieldId))
        {
            return checkFailed("@SYS73720");
        }

        if (_dimFieldId == fieldNum(InventDim,ConfigId))
        {
            return checkFailed(strFmt("@SYS73722",new DictType(extendedTypeNum(EcoResItemConfigurationName)).label()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateConsistent</Name>
				<Source><![CDATA[
    static public boolean checkUpdateConsistent(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim,
        InventDim                       _toInventDim,
        boolean                         _inventoried = true)
    {
        boolean         ok              = true;
        ListEnumerator  dimFields       = _inventDimGroupSetup.activeConsistentFields().getEnumerator();
        FieldId         inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventDim.checkInvalidFieldAccess(false);
        _toInventDim.checkInvalidFieldAccess(false);

        while (dimFields.moveNext())
        {
            inventDimFieldId = dimFields.current();
            if (_fromInventDim.(inventDimFieldId) != _toInventDim.(inventDimFieldId))
            {
                if (_inventoried)
                {
                    ok = checkFailed(strFmt("@SYS107444",fieldId2pname(tableNum(InventDim), inventDimFieldId)));
                }
                else
                {
                    //Inventory product dimensions cannot be changed when line has been received or delivered.
                    ok = checkFailed(strFmt("@SYS301592", fieldId2pname(tableNum(InventDim), inventDimFieldId)));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimatedMarked</Name>
				<Source><![CDATA[
    static public boolean checkUpdateEstimatedMarked(
        InventMovement  _movement,
        InventMovement  _movement_orig)
    {
        InventDim       inventDim;
        InventDim       inventDimOrig;
        InventTrans     inventTrans;

        if (_movement_orig && _movement.inventDimId() != _movement_orig.inventDimId())
        {
            if (( select firstonly RecId from inventTrans
                        where inventTrans.InventTransOrigin             == _movement.inventTransOriginId()
                           &&(((inventTrans.StatusReceipt               == StatusReceipt::Ordered
                           || inventTrans.StatusReceipt                 == StatusReceipt::QuotationReceipt)
                           && inventTrans.StatusIssue                   > StatusIssue::None)
                           || ((inventTrans.StatusIssue                 == StatusIssue::OnOrder
                           || inventTrans.StatusIssue                   == StatusIssue::ReservPhysical
                           || inventTrans.StatusIssue                   == StatusIssue::ReservOrdered
                           || inventTrans.StatusIssue                   == StatusIssue::QuotationIssue)
                           && inventTrans.StatusReceipt                 > StatusReceipt::None))
                           && inventTrans.MarkingRefInventTransOrigin   != 0).RecId)
            {
                inventDim       = _movement.inventdim();
                inventDimOrig   = _movement_orig.inventdim();

                if (!InventDim::isInventDimEqual(inventDim, inventDimOrig, _movement.inventDimGroupSetup().activeFinancialInventoryFields()))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimatedMovement</Name>
				<Source><![CDATA[
    static public boolean checkUpdateEstimatedMovement(
        InventMovement  _movement,
        InventMovement  _movement_orig)
    {
        if (InventDim::useLegacyCheckUpdateEstimatedMovement())
        {
            return InventDim::legacyCheckUpdateEstimatedMovement(_movement, _movement_orig);
        }        
        
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        InventDim                               inventDim;
        InventDim                               inventDim_orig;
        InventTable                             inventTable;
        FieldId                                 inventDimFieldId;
        boolean                                 ok = true;
        boolean                                 updateDim;

        if (!_movement_orig || _movement.inventDimId() != _movement_orig.inventDimId())
        {
            inventDim       = _movement.inventdim();
            inventTable     = _movement.inventTable();
            enumerator      = _movement.inventDimGroupSetup().getFieldSetupEnumerator();

            if (_movement_orig)
            {
                inventDim_orig  = _movement_orig.inventdim();
            }

            boolean inventDimCombinationCheckOK = inventDim.checkInventDimCombinationExist(_movement.itemId(),_movement.ecoResProductDimGroupSetup());
            boolean clearedAnyInActiveProductDimensions;
            while (enumerator.moveNext())
            {
                inventDimGroupFieldSetup = enumerator.current();
                inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                if (inventDimGroupFieldSetup.isActive())
                {
                    //if this is a product dimension and the inventDimCombination check passed we do not check the individual product dimensions since it adds perf overhead and the validation should already have occured earlier
                    if (!(inventDimGroupFieldSetup.isProductDimension() && inventDimCombinationCheckOK))
                    {
                        if (!inventDim.checkDimFieldSetup(inventDimGroupFieldSetup, inventTable, inventDim_orig, (_movement && _movement_orig ? _movement : null)))
                        {
                            ok = false;
                        }
                    }
                }
                else
                {
                    inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                    if (inventDim.(inventDimFieldId))
                    {
                        inventDim.clearField(inventDimFieldId);
                        updateDim = true;

                        if (!clearedAnyInActiveProductDimensions && inventDimGroupFieldSetup.isProductDimension())
                        {
                            clearedAnyInActiveProductDimensions = true;
                        }
                    }
                }
            }

            //if we cleared any inactive product dimensions we potentially need to re-do the inventDimCombination check since it was done before clearing of dimensions.
            if (ok && clearedAnyInActiveProductDimensions && !inventDimCombinationCheckOK)
            {
                inventDimCombinationCheckOK = inventDim.checkInventDimCombinationExist(_movement.itemId(),_movement.ecoResProductDimGroupSetup());
            }

            if (ok && !inventDimCombinationCheckOK)
            {
                ok = checkFailed(inventDim.errorTxtInventDimCombinationDoesNotExist(_movement.itemId(), _movement.ecoResProductDimGroupSetup()));
            }

        }

        if (updateDim && ok)
        {
            inventDim = InventDim::findOrCreate(inventDim);
            _movement.setInventDimId(inventDim.InventDimId);
            _movement.inventdim(inventDim);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLegacyCheckUpdateEstimatedMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the legacy version of the code should be used.
    /// </summary>
    /// <returns></returns>
    private static boolean useLegacyCheckUpdateEstimatedMovement()
    {
        return isFlightEnabled('useLegacyCheckUpdateEstimatedMovement');
    }

]]></Source>
			</Method>
			<Method>
				<Name>legacyCheckUpdateEstimatedMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the values allow estimated updates.
    /// </summary>
    /// <param name = "_movement">The movement.</param>
    /// <param name = "_movement_orig">The orig movement.</param>
    /// <returns>true if the check passed; otherwise, false.</returns>
    /// <remarks>This method exists to allow us to flight back to the previous version of the code.</remarks>
    static private boolean legacyCheckUpdateEstimatedMovement(
        InventMovement  _movement,
        InventMovement  _movement_orig)
    {
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        InventDim                               inventDim;
        InventDim                               inventDim_orig;
        InventTable                             inventTable;
        FieldId                                 inventDimFieldId;
        boolean                                 ok = true;
        boolean                                 updateDim;

        if (!_movement_orig || _movement.inventDimId() != _movement_orig.inventDimId())
        {
            inventDim       = _movement.inventdim();
            inventTable     = _movement.inventTable();
            enumerator      = _movement.inventDimGroupSetup().getFieldSetupEnumerator();

            if (_movement_orig)
            {
                inventDim_orig  = _movement_orig.inventdim();
            }

            while (enumerator.moveNext())
            {
                inventDimGroupFieldSetup = enumerator.current();
                inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                if (inventDimGroupFieldSetup.isActive())
                {
                    if (!inventDim.checkDimFieldSetup(inventDimGroupFieldSetup, inventTable, inventDim_orig, (_movement && _movement_orig ? _movement : null)))
                    {
                        ok = false;
                    }
                }
                else
                {
                    inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                    if (inventDim.(inventDimFieldId))
                    {
                        inventDim.clearField(inventDimFieldId);
                        updateDim = true;
                    }
                }
            }
            ok = ok && inventDim.checkInventDimCombination(_movement.itemId(),_movement.ecoResProductDimGroupSetup());
        }

        if (updateDim && ok)
        {
            inventDim = InventDim::findOrCreate(inventDim);
            _movement.setInventDimId(inventDim.InventDimId);
            _movement.inventdim(inventDim);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the location dimension in the specified inventory dimension values.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> representing the inventory dimension values.
    /// </param>
    /// <returns>
    /// A new <c>InventDimId</c> for the set of dimensions with a cleared location dimension; or
    /// the original <c>InventDimId</c> if the location dimension was initially empty.
    /// </returns>
    public static InventDimId clearInventLocationId(InventDimId _inventDimId)
    {
        InventDim       localInventDim;

        localInventDim = InventDim::find(_inventDimId);

        if (localInventDim.InventLocationId != '')
        {
            localInventDim = InventDim::find(_inventDimId);
            localInventDim.InventLocationId = InventDim::emptyDimField(fieldNum(InventDim, InventLocationId));
            localInventDim = InventDim::findOrCreate(localInventDim);
        }

        return localInventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>InventDim</c> record that has the same values as specified in the <paramref
    ///    name="_inventDim" /> buffer.
    /// </summary>
    /// <param name="_inventDim">
    ///    The <paramref name="_inventDim" /> buffer contains all the inventory dimensions for the new record.
    /// </param>
    /// <returns>
    ///    A buffer from the <c>InventDim</c> table.
    /// </returns>
    /// <remarks>
    ///    This method will fail if a record with the same dimensions already exists.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Number sequence for <c>InventDimId</c> was incorrectly configured.
    /// </exception>
    static public InventDim create(InventDim  _inventDim)
    {
        const boolean useUserConnection = true;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        InventDim inventDim;

        if (InventDim::mustUseHashAsInventDimId())
        {
            inventDim = InventDim::createWithInventDimIdFromHash(_inventDim, useUserConnection);
        }
        else
        {
            str hashKey = _inventDim.hashKey();
            inventDim = InventDim::doCreate(_inventDim, InventDim::computeSHA1Hash(hashKey), useUserConnection, '', 0);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useHash3</Name>
				<Source><![CDATA[
    [Hookable(false),
    Wrappable(false),
    SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
    static public boolean useHash3()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWithInventDimIdFromHash</Name>
				<Source><![CDATA[
    static private InventDim createWithInventDimIdFromHash(InventDim _inventDim, boolean _useUserConnection)
    {
        #OCCRetryCount

        InventDim inventDim;

        str hashKey = _inventDim.hashKey();

        str inventDimIdHash = InventDim::computeSpookyHash(hashKey);
        int inventDimIdHashLength = InventDim::retrieveInitialInventDimIdHashLength();

        InventDimSHA1HashHex hash1 = InventDim::computeSHA1Hash(hashKey);

        try
        {
            inventDim = InventDim::doCreate(_inventDim, hash1, _useUserConnection, inventDimIdHash, inventDimIdHashLength);
        }
        catch (Exception::DuplicateKeyException)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount >= #RetryNum ||
                InventDim::wasThrownDuplicateKeyExceptionRelatedToHash(hash1))
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                inventDimIdHashLength = InventDim::recalculateInventDimIdHashLength(inventDimIdHashLength, currentRetryCount);

                retry;
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreate</Name>
				<Source><![CDATA[
    static private InventDim doCreate(
        InventDim               _inventDim,
        InventDimSHA1HashHex    _hash1Value,
        boolean                 _useUserConnection,
        str                     _inventDimIdHash,
        int                     _inventDimIdHashLength)
    {
        if (!_hash1Value)
        {
            throw error("@SYS18447");
        }

        SystemSequence systemSequence;
        InventDim inventDim;

        try
        {
            if (_inventDimIdHash
                && _inventDimIdHashLength)
            {
                inventDim.InventDimId = subStr(_inventDimIdHash, 1, _inventDimIdHashLength);
            }
            else
            {
                systemSequence = new SystemSequence();
                systemSequence.suspendRecIds(tableNum(InventDim));
            
                inventDim.RecId = systemSequence.reserveValues(1, tableNum(InventDim));
                inventDim.InventDimId = InventDim::convertRecIdToInventDimId(inventDim.RecId);
            }

            inventDim.SHA1HashHex = _hash1Value;
  
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim.checkInvalidFieldAccess(false);

            #InventDimDevelop
            inventDim.ConfigId         = _inventDim.ConfigId;
            inventDim.InventSizeId     = _inventDim.InventSizeId;
            inventDim.InventColorId    = _inventDim.InventColorId;
            inventDim.InventStyleId    = _inventDim.InventStyleId;
            inventDim.InventVersionId  = _inventDim.InventVersionId;

            inventDim.InventSiteId     = _inventDim.InventSiteId;
            inventDim.InventLocationId = _inventDim.InventLocationId;
            inventDim.InventBatchId    = _inventDim.InventBatchId;
            inventDim.wmsLocationId    = _inventDim.wmsLocationId;
            inventDim.wmsPalletId      = _inventDim.wmsPalletId;
            inventDim.InventSerialId   = _inventDim.InventSerialId;
            inventDim.LicensePlateId   = _inventDim.LicensePlateId;
            inventDim.InventStatusId   = _inventDim.InventStatusId;
    
            inventDim.InventDimension1   = _inventDim.InventDimension1;
            inventDim.InventDimension2   = _inventDim.InventDimension2;
            inventDim.InventDimension3   = _inventDim.InventDimension3;
            inventDim.InventDimension4   = _inventDim.InventDimension4;
            inventDim.InventDimension5   = _inventDim.InventDimension5;
            inventDim.InventDimension6   = _inventDim.InventDimension6;
            inventDim.InventDimension7   = _inventDim.InventDimension7;
            inventDim.InventDimension8   = _inventDim.InventDimension8;
            inventDim.InventDimension9   = _inventDim.InventDimension9;
            inventDim.InventDimension10  = _inventDim.InventDimension10;
            inventDim.InventDimension11  = _inventDim.InventDimension11;
            inventDim.InventDimension12  = _inventDim.InventDimension12;

            // <GEERU>
            inventDim.InventGtdId_RU     = _inventDim.InventGtdId_RU;
            inventDim.InventProfileId_RU = _inventDim.InventProfileId_RU;
            inventDim.InventOwnerId_RU   = _inventDim.InventOwnerId_RU;
            // </GEERU>

            if (_useUserConnection)
            {
                InventDim::doInsertInUserConnection(inventDim);
            }
            else
            {
                inventDim.doInsert();
            }
        }
        finally
        {
            if (systemSequence)
            {
                systemSequence.removeRecIdSuspension(tableNum(InventDim));
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reuseUserConnection</Name>
				<Source><![CDATA[
    static private boolean reuseUserConnection()
    {
        if (appl.ttsLevel() > 0 &&
            InventDimReuseUserConnectionFlight::instance().isEnabled())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reusableUserConnectionCacheKey</Name>
				<Source><![CDATA[
    static private str reusableUserConnectionCacheKey()
    {
        return funcName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reusableUserConnection</Name>
				<Source><![CDATA[
    static private UserConnection reusableUserConnection()
    {
        str cacheKey = InventDim::reusableUserConnectionCacheKey();
        UserConnection userConnection = appl.globalCache().get(cacheKey, 0, null);

        if (userConnection == null)
        {
            userConnection = new UserConnection();
            appl.transactionScope().ttsAborted += eventhandler(InventDim::finalizeReusableUserConnection);
            appl.transactionScope().ttsCommitted += eventhandler(InventDim::finalizeReusableUserConnection);
            appl.globalCache().set(cacheKey, 0, userConnection);
        }

        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeReusableUserConnection</Name>
				<Source><![CDATA[
    static private void finalizeReusableUserConnection()
    {
        str cacheKey = InventDim::reusableUserConnectionCacheKey();
        UserConnection userConnection = appl.globalCache().get(cacheKey, 0, null);

        if (userConnection)
        {
            appl.globalCache().set(cacheKey, 0, null);
            userConnection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInsertInUserConnection</Name>
				<Source><![CDATA[
    static private void doInsertInUserConnection(InventDim _inventDim)
    {
        boolean reuseUserConnection = InventDim::reuseUserConnection();
        UserConnection userConnection;
        try
        {
            if (reuseUserConnection)
            {
                userConnection = InventDim::reusableUserConnection();
            }
            else
            {
                userConnection = new UserConnection();
            }

            _inventDim.setConnection(userConnection);

            userConnection.ttsbegin();
            _inventDim.doinsert();
            userConnection.ttscommit();
        }
        finally
        {
            if (!reuseUserConnection && userConnection)
            {
                userConnection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRecIdToInventDimId</Name>
				<Source><![CDATA[
    static private InventDimId convertRecIdToInventDimId(RecId _recId)
    {
        //Convert to bytes
        var recIdAsBytes = System.BitConverter::GetBytes(_recId);

        //Ensure incremental sorting for cluster index InventDimIdx
        System.Array::Reverse(recIdAsBytes);

        //Convert to string 16
        str recIdAsHex = strRem(System.BitConverter::ToString(recIdAsBytes), '-');

        //Prefix for uniqueness, fitting InventDimId (string 20)
        return strfmt('#%1', recIdAsHex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseHashAsInventDimId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    static internal boolean mustUseHashAsInventDimId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dim2dimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a field ID from the <c>InventDimParm</c> table that corresponds to a field ID on the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <param name="_dimField">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    A field ID from the <c>InventDimParm</c> table.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_dimFieldId" /> parameter can be a ordinary field ID or an extended field ID.
    /// </remarks>
    static public FieldId dim2dimParm(FieldId _dimField)
    {
        #InventDimDevelop

        switch (fieldExt2Id(_dimField))
        {
            case fieldNum(InventDim,ConfigId)         : return fieldNum(InventDimParm,ConfigIdFlag);
            case fieldNum(InventDim,InventSizeId)     : return fieldNum(InventDimParm,InventSizeIdFlag);
            case fieldNum(InventDim,InventColorId)    : return fieldNum(InventDimParm,InventColorIdFlag);
            case fieldNum(InventDim,InventStyleId)    : return fieldNum(InventDimParm,InventStyleIdFlag);
            case fieldNum(InventDim,InventVersionId)  : return fieldNum(InventDimParm,InventVersionIdFlag);
            case fieldNum(InventDim,InventSiteId)     : return fieldNum(InventDimParm,InventSiteIdFlag);
            case fieldNum(InventDim,InventLocationId) : return fieldNum(InventDimParm,InventLocationIdFlag);
            case fieldNum(InventDim,InventBatchId)    : return fieldNum(InventDimParm,InventBatchIdFlag);
            case fieldNum(InventDim,wmsLocationId)    : return fieldNum(InventDimParm,wmsLocationIdFlag);
            case fieldNum(InventDim,wmsPalletId)      : return fieldNum(InventDimParm,wmsPalletIdFlag);
            case fieldNum(InventDim,InventSerialId)   : return fieldNum(InventDimParm,InventSerialIdFlag);
            case fieldNum(InventDim,LicensePlateId)   : return fieldNum(InventDimParm,LicensePlateFlag);
            case fieldNum(InventDim,InventStatusId)   : return fieldNum(InventDimParm,InventStatusFlag);
            case fieldNum(InventDim,InventDimension1) : return fieldNum(InventDimParm,InventDimension1Flag);
            case fieldNum(InventDim,InventDimension2) : return fieldNum(InventDimParm,InventDimension2Flag);
            case fieldNum(InventDim,InventDimension3) : return fieldNum(InventDimParm,InventDimension3Flag);
            case fieldNum(InventDim,InventDimension4) : return fieldNum(InventDimParm,InventDimension4Flag);
            case fieldNum(InventDim,InventDimension5) : return fieldNum(InventDimParm,InventDimension5Flag);
            case fieldNum(InventDim,InventDimension6) : return fieldNum(InventDimParm,InventDimension6Flag);
            case fieldNum(InventDim,InventDimension7) : return fieldNum(InventDimParm,InventDimension7Flag);
            case fieldNum(InventDim,InventDimension8) : return fieldNum(InventDimParm,InventDimension8Flag);
            case fieldNum(InventDim,InventDimension9) : return fieldNum(InventDimParm,InventDimension9Flag);
            case fieldNum(InventDim,InventDimension10): return fieldNum(InventDimParm,InventDimension10Flag);
            case fieldNum(InventDim,InventDimension11): return fieldNum(InventDimParm,InventDimension11Flag);
            case fieldNum(InventDim,InventDimension12): return fieldNum(InventDimParm,InventDimension12Flag);
            // <GEERU>
            case fieldNum(InventDim,InventGtdId_RU)    : return fieldNum(InventDimParm,InventGTDIdFlag_RU);
            case fieldNum(InventDim,InventProfileId_RU): return fieldNum(InventDimParm,InventProfileIdFlag_RU);
            case fieldNum(InventDim,InventOwnerId_RU)  : return fieldNum(InventDimParm,InventOwnerIdFlag_RU);
            // </GEERU>
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dim2WHSInventReserveDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a field ID from the <c>WHSInventReserve</c> table that corresponds to a field ID on the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <param name="_dimField">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    A field ID from the <c>WHSInventReserve</c> table.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_dimField" /> parameter can be a ordinary field ID or an extended field ID.
    /// </remarks>
    [Hookable(false)]
    static public FieldId dim2WHSInventReserveDim(FieldId _dimField)
    {
        #InventDimDevelop

        switch (fieldExt2Id(_dimField))
        {
            case fieldNum(InventDim,ConfigId)         : return fieldNum(WHSInventReserve,ConfigId);
            case fieldNum(InventDim,InventSizeId)     : return fieldNum(WHSInventReserve,InventSizeId);
            case fieldNum(InventDim,InventColorId)    : return fieldNum(WHSInventReserve,InventColorId);
            case fieldNum(InventDim,InventStyleId)    : return fieldNum(WHSInventReserve,InventStyleId);
            case fieldNum(InventDim,InventSiteId)     : return fieldNum(WHSInventReserve,InventSiteId);
            case fieldNum(InventDim,InventLocationId) : return fieldNum(WHSInventReserve,InventLocationId);
            case fieldNum(InventDim,InventVersionId)  : return fieldNum(WHSInventReserve,InventVersionId);
            case fieldNum(InventDim,InventBatchId)    : return fieldNum(WHSInventReserve,InventBatchId);
            case fieldNum(InventDim,wmsLocationId)    : return fieldNum(WHSInventReserve,wmsLocationId);
            case fieldNum(InventDim,wmsPalletId)      : return fieldNum(WHSInventReserve,wmsPalletId);
            case fieldNum(InventDim,InventSerialId)   : return fieldNum(WHSInventReserve,InventSerialId);
            case fieldNum(InventDim,LicensePlateId)   : return fieldNum(WHSInventReserve,LicensePlateId);
            case fieldNum(InventDim,InventStatusId)   : return fieldNum(WHSInventReserve,InventStatusId);
            case fieldNum(InventDim,InventDimension1) : return fieldNum(WHSInventReserve,InventDimension1);
            case fieldNum(InventDim,InventDimension2) : return fieldNum(WHSInventReserve,InventDimension2);
            case fieldNum(InventDim,InventDimension3) : return fieldNum(WHSInventReserve,InventDimension3);
            case fieldNum(InventDim,InventDimension4) : return fieldNum(WHSInventReserve,InventDimension4);
            case fieldNum(InventDim,InventDimension5) : return fieldNum(WHSInventReserve,InventDimension5);
            case fieldNum(InventDim,InventDimension6) : return fieldNum(WHSInventReserve,InventDimension6);
            case fieldNum(InventDim,InventDimension7) : return fieldNum(WHSInventReserve,InventDimension7);
            case fieldNum(InventDim,InventDimension8) : return fieldNum(WHSInventReserve,InventDimension8);
            case fieldNum(InventDim,InventDimension9) : return fieldNum(WHSInventReserve,InventDimension9);
            case fieldNum(InventDim,InventDimension10): return fieldNum(WHSInventReserve,InventDimension10);
            case fieldNum(InventDim,InventDimension11): return fieldNum(WHSInventReserve,InventDimension11); 
            case fieldNum(InventDim,InventDimension12): return fieldNum(WHSInventReserve,InventDimension12);
            // <GEERU>
            case fieldNum(InventDim,InventGtdId_RU)    : return fieldNum(WHSInventReserve,InventGTDId_RU);
            case fieldNum(InventDim,InventProfileId_RU): return fieldNum(WHSInventReserve,InventProfileId_RU);
            case fieldNum(InventDim,InventOwnerId_RU)  : return fieldNum(WHSInventReserve,InventOwnerId_RU);
            // </GEERU>
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dim2WHSInventReserveDeltaDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a field ID from the <c>WHSInventReserveDelta</c> table that corresponds to a field ID on the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <param name="_dimField">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    A field ID from the <c>WHSInventReserveDelta</c> table.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_dimField" /> parameter can be a ordinary field ID or an extended field ID.
    /// </remarks>
    [Hookable(false)]
    static internal FieldId dim2WHSInventReserveDeltaDim(FieldId _dimField)
    {
        #InventDimDevelop

        switch (fieldExt2Id(_dimField))
        {
            case fieldNum(InventDim,ConfigId)         : return fieldNum(WHSInventReserveDelta,ConfigId);
            case fieldNum(InventDim,InventSizeId)     : return fieldNum(WHSInventReserveDelta,InventSizeId);
            case fieldNum(InventDim,InventColorId)    : return fieldNum(WHSInventReserveDelta,InventColorId);
            case fieldNum(InventDim,InventStyleId)    : return fieldNum(WHSInventReserveDelta,InventStyleId);
            case fieldNum(InventDim,InventSiteId)     : return fieldNum(WHSInventReserveDelta,InventSiteId);
            case fieldNum(InventDim,InventLocationId) : return fieldNum(WHSInventReserveDelta,InventLocationId);
            case fieldNum(InventDim,InventVersionId)  : return fieldNum(WHSInventReserveDelta,InventVersionId);
            case fieldNum(InventDim,InventBatchId)    : return fieldNum(WHSInventReserveDelta,InventBatchId);
            case fieldNum(InventDim,wmsLocationId)    : return fieldNum(WHSInventReserveDelta,wmsLocationId);
            case fieldNum(InventDim,wmsPalletId)      : return fieldNum(WHSInventReserveDelta,wmsPalletId);
            case fieldNum(InventDim,InventSerialId)   : return fieldNum(WHSInventReserveDelta,InventSerialId);
            case fieldNum(InventDim,LicensePlateId)   : return fieldNum(WHSInventReserveDelta,LicensePlateId);
            case fieldNum(InventDim,InventStatusId)   : return fieldNum(WHSInventReserveDelta,InventStatusId);
            case fieldNum(InventDim,InventDimension1) : return fieldNum(WHSInventReserveDelta,InventDimension1);
            case fieldNum(InventDim,InventDimension2) : return fieldNum(WHSInventReserveDelta,InventDimension2);
            case fieldNum(InventDim,InventDimension3) : return fieldNum(WHSInventReserveDelta,InventDimension3);
            case fieldNum(InventDim,InventDimension4) : return fieldNum(WHSInventReserveDelta,InventDimension4);
            case fieldNum(InventDim,InventDimension5) : return fieldNum(WHSInventReserveDelta,InventDimension5);
            case fieldNum(InventDim,InventDimension6) : return fieldNum(WHSInventReserveDelta,InventDimension6);
            case fieldNum(InventDim,InventDimension7) : return fieldNum(WHSInventReserveDelta,InventDimension7);
            case fieldNum(InventDim,InventDimension8) : return fieldNum(WHSInventReserveDelta,InventDimension8);
            case fieldNum(InventDim,InventDimension9) : return fieldNum(WHSInventReserveDelta,InventDimension9);
            case fieldNum(InventDim,InventDimension10): return fieldNum(WHSInventReserveDelta,InventDimension10);
            case fieldNum(InventDim,InventDimension11): return fieldNum(WHSInventReserveDelta,InventDimension11);
            case fieldNum(InventDim,InventDimension12): return fieldNum(WHSInventReserveDelta,InventDimension12);
            case fieldNum(InventDim,InventGtdId_RU)    : return fieldNum(WHSInventReserveDelta,InventGTDId_RU);
            case fieldNum(InventDim,InventProfileId_RU): return fieldNum(WHSInventReserveDelta,InventProfileId_RU);
            case fieldNum(InventDim,InventOwnerId_RU)  : return fieldNum(WHSInventReserveDelta,InventOwnerId_RU);
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSumFieldIdFromInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a field ID from the <c>InventSum</c> table that corresponds to a field ID on the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <param name="_dimField">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    A field ID from the <c>InventSum</c> table.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_dimField" /> parameter can be a ordinary field ID or an extended field ID.
    /// </remarks>
    [Hookable(false)]
    public static FieldId getInventSumFieldIdFromInventDimFieldId(FieldId _inventDimFieldId)
    {
        #InventDimDevelop

        switch (fieldExt2Id(_inventDimFieldId))
        {
            case fieldNum(InventDim,ConfigId)         : return fieldNum(InventSum,ConfigId);
            case fieldNum(InventDim,InventSizeId)     : return fieldNum(InventSum,InventSizeId);
            case fieldNum(InventDim,InventColorId)    : return fieldNum(InventSum,InventColorId);
            case fieldNum(InventDim,InventStyleId)    : return fieldNum(InventSum,InventStyleId);
            case fieldNum(InventDim,InventVersionId)  : return fieldNum(InventSum,InventVersionId);
            case fieldNum(InventDim,InventSiteId)     : return fieldNum(InventSum,InventSiteId);
            case fieldNum(InventDim,InventLocationId) : return fieldNum(InventSum,InventLocationId);
            case fieldNum(InventDim,InventBatchId)    : return fieldNum(InventSum,InventBatchId);
            case fieldNum(InventDim,wmsLocationId)    : return fieldNum(InventSum,wmsLocationId);
            case fieldNum(InventDim,wmsPalletId)      : return fieldNum(InventSum,wmsPalletId);
            case fieldNum(InventDim,InventSerialId)   : return fieldNum(InventSum,InventSerialId);
            case fieldNum(InventDim,LicensePlateId)   : return fieldNum(InventSum,LicensePlateId);
            case fieldNum(InventDim,InventStatusId)   : return fieldNum(InventSum,InventStatusId);
            case fieldNum(InventDim,InventDimension1) : return fieldNum(InventSum,InventDimension1);
            case fieldNum(InventDim,InventDimension2) : return fieldNum(InventSum,InventDimension2);
            case fieldNum(InventDim,InventDimension3) : return fieldNum(InventSum,InventDimension3);
            case fieldNum(InventDim,InventDimension4) : return fieldNum(InventSum,InventDimension4);
            case fieldNum(InventDim,InventDimension5) : return fieldNum(InventSum,InventDimension5);
            case fieldNum(InventDim,InventDimension6) : return fieldNum(InventSum,InventDimension6);
            case fieldNum(InventDim,InventDimension7) : return fieldNum(InventSum,InventDimension7);
            case fieldNum(InventDim,InventDimension8) : return fieldNum(InventSum,InventDimension8);
            case fieldNum(InventDim,InventDimension9) : return fieldNum(InventSum,InventDimension9);
            case fieldNum(InventDim,InventDimension10): return fieldNum(InventSum,InventDimension10);
            case fieldNum(InventDim,InventDimension11): return fieldNum(InventSum,InventDimension11);
            case fieldNum(InventDim,InventDimension12): return fieldNum(InventSum,InventDimension12);
            // <GEERU>
            case fieldNum(InventDim,InventGtdId_RU)    : return fieldNum(InventSum,InventGTDId_RU);
            case fieldNum(InventDim,InventProfileId_RU): return fieldNum(InventSum,InventProfileId_RU);
            case fieldNum(InventDim,InventOwnerId_RU)  : return fieldNum(InventSum,InventOwnerId_RU);
            // </GEERU>
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSumDeltaFieldIdFromInventDimFieldId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static FieldId getInventSumDeltaFieldIdFromInventDimFieldId(FieldId _inventDimFieldId)
    {
        #InventDimDevelop

        switch (fieldExt2Id(_inventDimFieldId))
        {
            case fieldNum(InventDim,ConfigId)         : return fieldNum(InventSumDelta,ConfigId);
            case fieldNum(InventDim,InventSizeId)     : return fieldNum(InventSumDelta,InventSizeId);
            case fieldNum(InventDim,InventColorId)    : return fieldNum(InventSumDelta,InventColorId);
            case fieldNum(InventDim,InventStyleId)    : return fieldNum(InventSumDelta,InventStyleId);
            case fieldNum(InventDim,InventVersionId)  : return fieldNum(InventSumDelta,InventVersionId);
            case fieldNum(InventDim,InventSiteId)     : return fieldNum(InventSumDelta,InventSiteId);
            case fieldNum(InventDim,InventLocationId) : return fieldNum(InventSumDelta,InventLocationId);
            case fieldNum(InventDim,InventBatchId)    : return fieldNum(InventSumDelta,InventBatchId);
            case fieldNum(InventDim,wmsLocationId)    : return fieldNum(InventSumDelta,wmsLocationId);
            case fieldNum(InventDim,wmsPalletId)      : return fieldNum(InventSumDelta,wmsPalletId);
            case fieldNum(InventDim,InventSerialId)   : return fieldNum(InventSumDelta,InventSerialId);
            case fieldNum(InventDim,LicensePlateId)   : return fieldNum(InventSumDelta,LicensePlateId);
            case fieldNum(InventDim,InventStatusId)   : return fieldNum(InventSumDelta,InventStatusId);
            case fieldNum(InventDim,InventDimension1) : return fieldNum(InventSumDelta,InventDimension1);
            case fieldNum(InventDim,InventDimension2) : return fieldNum(InventSumDelta,InventDimension2);
            case fieldNum(InventDim,InventDimension3) : return fieldNum(InventSumDelta,InventDimension3);
            case fieldNum(InventDim,InventDimension4) : return fieldNum(InventSumDelta,InventDimension4);
            case fieldNum(InventDim,InventDimension5) : return fieldNum(InventSumDelta,InventDimension5);
            case fieldNum(InventDim,InventDimension6) : return fieldNum(InventSumDelta,InventDimension6);
            case fieldNum(InventDim,InventDimension7) : return fieldNum(InventSumDelta,InventDimension7);
            case fieldNum(InventDim,InventDimension8) : return fieldNum(InventSumDelta,InventDimension8);
            case fieldNum(InventDim,InventDimension9) : return fieldNum(InventSumDelta,InventDimension9);
            case fieldNum(InventDim,InventDimension10): return fieldNum(InventSumDelta,InventDimension10);
            case fieldNum(InventDim,InventDimension11): return fieldNum(InventSumDelta,InventDimension11);
            case fieldNum(InventDim,InventDimension12): return fieldNum(InventSumDelta,InventDimension12);
                // <GEERU>
            case fieldNum(InventDim,InventGtdId_RU)    : return fieldNum(InventSumDelta,InventGTDId_RU);
            case fieldNum(InventDim,InventProfileId_RU): return fieldNum(InventSumDelta,InventProfileId_RU);
            case fieldNum(InventDim,InventOwnerId_RU)  : return fieldNum(InventSumDelta,InventOwnerId_RU);
                // </GEERU>
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSumInventDimUnionDeltaInventDimPhysicalQtyFieldIdFromInventDimFieldId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static FieldId getInventSumInventDimUnionDeltaInventDimPhysicalQtyFieldIdFromInventDimFieldId(FieldId _inventDimFieldId)
    {
        #InventDimDevelop

        switch (fieldExt2Id(_inventDimFieldId))
        {
            
            case fieldNum(InventDim,ConfigId)         : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,ConfigId);
            case fieldNum(InventDim,InventSizeId)     : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventSizeId);
            case fieldNum(InventDim,InventColorId)    : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventColorId);
            case fieldNum(InventDim,InventStyleId)    : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventStyleId);
            case fieldNum(InventDim,InventVersionId)  : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventVersionId);
            case fieldNum(InventDim,InventSiteId)     : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventSiteId);
            case fieldNum(InventDim,InventLocationId) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventLocationId);
            case fieldNum(InventDim,InventBatchId)    : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventBatchId);
            case fieldNum(InventDim,wmsLocationId)    : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,wmsLocationId);
            case fieldNum(InventDim,wmsPalletId)      : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,wmsPalletId);
            case fieldNum(InventDim,InventSerialId)   : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventSerialId);
            case fieldNum(InventDim,LicensePlateId)   : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,LicensePlateId);
            case fieldNum(InventDim,InventStatusId)   : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventStatusId);
            case fieldNum(InventDim,InventDimension1) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension1);
            case fieldNum(InventDim,InventDimension2) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension2);
            case fieldNum(InventDim,InventDimension3) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension3);
            case fieldNum(InventDim,InventDimension4) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension4);
            case fieldNum(InventDim,InventDimension5) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension5);
            case fieldNum(InventDim,InventDimension6) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension6);
            case fieldNum(InventDim,InventDimension7) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension7);
            case fieldNum(InventDim,InventDimension8) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension8);
            case fieldNum(InventDim,InventDimension9) : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension9);
            case fieldNum(InventDim,InventDimension10): return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension10);
            case fieldNum(InventDim,InventDimension11): return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension11);
            case fieldNum(InventDim,InventDimension12): return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventDimension12);
                // <GEERU>
            case fieldNum(InventDim,InventGtdId_RU)    : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventGTDId_RU);
            case fieldNum(InventDim,InventProfileId_RU): return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventProfileId_RU);
            case fieldNum(InventDim,InventOwnerId_RU)  : return fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty,InventOwnerId_RU);
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInventDimFromInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find or create <c>InventDim</c> from <c>InventSum</c>.
    /// </summary>
    /// <param name="_inventSum">
    ///    Record of <c>InventSum</c>.
    /// </param>
    /// <returns>
    ///    Table of <c>InventDim</c>.
    /// </returns>
    [Hookable(false)]
    public static InventDim findOrCreateInventDimFromInventSum(InventSum _inventSum)
    {
        #InventDimDevelop

        InventDim inventDim;

        inventDim.configId           = _inventSum.configId;
        inventDim.InventSizeId       = _inventSum.InventSizeId;
        inventDim.InventColorId      = _inventSum.InventColorId;
        inventDim.InventStyleId      = _inventSum.InventStyleId;
        inventDim.InventVersionId    = _inventSum.InventVersionId;
        inventDim.InventSiteId       = _inventSum.InventSiteId;
        inventDim.InventLocationId   = _inventSum.InventLocationId;
        inventDim.InventBatchId      = _inventSum.InventBatchId;
        inventDim.wmsLocationId      = _inventSum.wmsLocationId;
        inventDim.wmsPalletId        = _inventSum.wmsPalletId;
        inventDim.InventSerialId     = _inventSum.InventSerialId;
        inventDim.LicensePlateId     = _inventSum.LicensePlateId;
        inventDim.InventStatusId     = _inventSum.InventStatusId;
        inventDim.InventDimension1   = _inventSum.InventDimension1;
        inventDim.InventDimension2   = _inventSum.InventDimension2;
        inventDim.InventDimension3   = _inventSum.InventDimension3;
        inventDim.InventDimension4   = _inventSum.InventDimension4;
        inventDim.InventDimension5   = _inventSum.InventDimension5;
        inventDim.InventDimension6   = _inventSum.InventDimension6;
        inventDim.InventDimension7   = _inventSum.InventDimension7;
        inventDim.InventDimension8   = _inventSum.InventDimension8;
        inventDim.InventDimension9   = _inventSum.InventDimension9;
        inventDim.InventDimension10  = _inventSum.InventDimension10;
        inventDim.InventDimension11  = _inventSum.InventDimension11;
        inventDim.InventDimension12  = _inventSum.InventDimension12;
        inventDim.InventGtdId_RU     = _inventSum.InventGTDId_RU;
        inventDim.InventProfileId_RU = _inventSum.InventProfileId_RU;
        inventDim.InventOwnerId_RU   = _inventSum.InventOwnerId_RU;

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSumWithInventDimUnionDeltaWithInventDimPhysicalQty</Name>
				<Source><![CDATA[
    internal static InventDim initFromInventSumWithInventDimUnionDeltaWithInventDimPhysicalQty(
        InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty _inventSumUnionDeltaWithInventDim,
        boolean                                                  _setInventDimId = false)
    {
        #InventDimDevelop

        InventDim inventDim;

        inventDim.configId           = _inventSumUnionDeltaWithInventDim.configId;
        inventDim.InventSizeId       = _inventSumUnionDeltaWithInventDim.InventSizeId;
        inventDim.InventColorId      = _inventSumUnionDeltaWithInventDim.InventColorId;
        inventDim.InventStyleId      = _inventSumUnionDeltaWithInventDim.InventStyleId;
        inventDim.InventVersionId    = _inventSumUnionDeltaWithInventDim.InventVersionId;
        inventDim.InventSiteId       = _inventSumUnionDeltaWithInventDim.InventSiteId;
        inventDim.InventLocationId   = _inventSumUnionDeltaWithInventDim.InventLocationId;
        inventDim.InventBatchId      = _inventSumUnionDeltaWithInventDim.InventBatchId;
        inventDim.wmsLocationId      = _inventSumUnionDeltaWithInventDim.wmsLocationId;
        inventDim.wmsPalletId        = _inventSumUnionDeltaWithInventDim.wmsPalletId;
        inventDim.InventSerialId     = _inventSumUnionDeltaWithInventDim.InventSerialId;
        inventDim.LicensePlateId     = _inventSumUnionDeltaWithInventDim.LicensePlateId;
        inventDim.InventStatusId     = _inventSumUnionDeltaWithInventDim.InventStatusId;
        inventDim.InventDimension1   = _inventSumUnionDeltaWithInventDim.InventDimension1;
        inventDim.InventDimension2   = _inventSumUnionDeltaWithInventDim.InventDimension2;
        inventDim.InventDimension3   = _inventSumUnionDeltaWithInventDim.InventDimension3;
        inventDim.InventDimension4   = _inventSumUnionDeltaWithInventDim.InventDimension4;
        inventDim.InventDimension5   = _inventSumUnionDeltaWithInventDim.InventDimension5;
        inventDim.InventDimension6   = _inventSumUnionDeltaWithInventDim.InventDimension6;
        inventDim.InventDimension7   = _inventSumUnionDeltaWithInventDim.InventDimension7;
        inventDim.InventDimension8   = _inventSumUnionDeltaWithInventDim.InventDimension8;
        inventDim.InventDimension9   = _inventSumUnionDeltaWithInventDim.InventDimension9;
        inventDim.InventDimension10  = _inventSumUnionDeltaWithInventDim.InventDimension10;
        inventDim.InventDimension11  = _inventSumUnionDeltaWithInventDim.InventDimension11;
        inventDim.InventDimension12  = _inventSumUnionDeltaWithInventDim.InventDimension12;
        inventDim.InventGtdId_RU     = _inventSumUnionDeltaWithInventDim.InventGTDId_RU;
        inventDim.InventProfileId_RU = _inventSumUnionDeltaWithInventDim.InventProfileId_RU;
        inventDim.InventOwnerId_RU   = _inventSumUnionDeltaWithInventDim.InventOwnerId_RU;

        if (_setInventDimId)
        {
            inventDim.InventDimId = _inventSumUnionDeltaWithInventDim.InventDimId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInventDimFromInventSumWithInventDimUnionDeltaWithInventDimPhysicalQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventDim findOrCreateInventDimFromInventSumWithInventDimUnionDeltaWithInventDimPhysicalQty(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty _inventSumUnionDeltaWithInventDim)
    {
        InventDim inventDim = InventDim::initFromInventSumWithInventDimUnionDeltaWithInventDimPhysicalQty(_inventSumUnionDeltaWithInventDim, false);

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAddInventDimExistsJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the exists join with inventory dimensions for the active dimensions.
    /// </summary>
    /// <param name = "_queryObject">The query object to add the join to.</param>
    /// <param name = "_inventDimIdFieldExpression">The <c>InventDimId</c> field for the join.</param>
    /// <param name = "_inventDim">The inventory dimension to join.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria for the join.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    [Hookable(false)]
    public static void dimAddInventDimExistsJoin(
        SysDaQueryObject        _queryObject,
        SysDaFieldExpression    _inventDimIdFieldExpression,
        InventDim               _inventDim,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm)
    {
        _queryObject.joinClause(
            SysDaJoinKind::ExistsJoin,
            InventDimQueryBuilder::newFromQuery(_inventDim, _inventDimCriteria, _inventDimParm).joinClause(_inventDimIdFieldExpression));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimInventDimClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the exists join with inventory dimensions for the active dimensions.
    /// </summary>
    /// <param name = "_queryObject">The query object to add the join to.</param>
    /// <param name = "_inventDimIdFieldExpression">The <c>InventDimId</c> field for the join.</param>
    /// <param name = "_inventDim">The inventory dimension to join.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria for the join.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    [Hookable(false)]
    public static SysDaQueryExpression dimInventDimClause(
        InventDim       _inventDim,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        return InventDimQueryBuilder::newFromQuery(_inventDim, _inventDimCriteria, _inventDimParm).inventDimClause();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAddInventSumFieldsQueryProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the delta field selection to the query which is used in on-hand inventory.
    /// </summary>
    /// <param name = "_queryObject">A <c>SysDaQueryObject</c> instance.</param>
    [Hookable(false)]
    public static void dimAddInventSumFieldsQueryProjection(SysDaQueryObject _queryObject)
    {
        InventSumFieldsQueryBuilder::buildInventSumFieldsQueryProjection(_queryObject, tableFieldGroupStr(InventSum, DeltaFields));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAddInventSumFieldsQuantityQueryProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the field quantity selection to the query which is used in on-hand inventory.
    /// </summary>
    /// <param name = "_queryObject">A <c>SysDaQueryObject</c> instance.</param>
    [Hookable(false)]
    public static void dimAddInventSumFieldsQuantityQueryProjection(SysDaQueryObject _queryObject)
    {
        InventSumFieldsQueryBuilder::buildInventSumFieldsQueryProjection(_queryObject, tableFieldGroupStr(InventSum, DeltaFieldsQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAddInventSumDeltaFieldsQueryProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the delta fields selection to the query which is used in on-hand inventory changes.
    /// </summary>
    /// <param name = "_queryObject">A <c>SysDaQueryObject</c> instance.</param>
    [Hookable(false)]
    public static void dimAddInventSumDeltaFieldsQueryProjection(SysDaQueryObject _queryObject)
    {
        InventSumFieldsQueryBuilder::buildInventSumDeltaFieldsQueryProjection(_queryObject, tableFieldGroupStr(InventSumDelta, DeltaFields));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAddInventSumDeltaFieldsQuantityQueryProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the delta quantity fields selection to the query which is used in on-hand inventory changes.
    /// </summary>
    /// <param name = "_queryObject">A <c>SysDaQueryObject</c> instance.</param>
    [Hookable(false)]
    public static void dimAddInventSumDeltaFieldsQuantityQueryProjection(SysDaQueryObject _queryObject)
    {
        InventSumFieldsQueryBuilder::buildInventSumDeltaFieldsQueryProjection(_queryObject, tableFieldGroupStr(InventSumDelta, DeltaFieldsQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAgreementFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of field IDs that are used in the agreements.
    /// </summary>
    /// <returns>
    ///    A list of field IDs.
    /// </returns>
    static public List dimAgreementFieldList()
    {
        return InventDimMetaDataCache::dimAgreementFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldList</Name>
				<Source><![CDATA[
    static public List dimEnabledFieldList()
    {
        return InventDimMetaDataCache::dimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldList2Set</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a set that contains the elements in the specified list.
    /// </summary>
    /// <param name="_list">
    ///    The list to convert.
    /// </param>
    /// <returns>
    ///    A set that contains the specified elements.
    /// </returns>
    public static Set dimFieldList2Set(List _list)
    {
        return Set::create(_list.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldListEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an enumerator to iterate a list of dimension fields.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>ListEnumerator</c> class.
    /// </returns>
    static public ListEnumerator dimFieldListEnumerator()
    {
        return InventDim::dimFieldsList().getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldListEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an enumerator to iterate a list of enabled dimension fields.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>ListEnumerator</c> class.
    /// </returns>
    static public ListEnumerator dimEnabledFieldListEnumerator()
    {
        return InventDim::dimEnabledFieldList().getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldListPosition</Name>
				<Source><![CDATA[
    static public int dimFieldListPosition(
        List        _dimFieldList,
        FieldId     _dimFieldId)
    {
        ListEnumerator  enumerator  = _dimFieldList.getEnumerator();
        int             position    = 0;

        while (enumerator.moveNext())
        {
            position++;
            if (enumerator.current() == _dimFieldId)
            {
                return position;
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of all dimension fields.
    /// </summary>
    /// <returns>
    ///    A list of all dimension fields.
    /// </returns>
    static public List dimFieldsList()
    {
        return InventDimMetaDataCache::dimFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimId2ReqCovDimId</Name>
				<Source><![CDATA[
    static public ReqCovInventDimId dimId2ReqCovDimId(
        InventDimId                     _inventDimId,
        InventDimGroupSetup             _inventDimGroupSetup)
    {
        return InventDim::find(_inventDimId).reqCovDimId(_inventDimGroupSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimParm2dim</Name>
				<Source><![CDATA[
    static public FieldId dimParm2dim(FieldId _dimParmField)
    {
        #InventDimDevelop

        switch (_dimParmField)
        {
            case fieldNum(InventDimParm,ConfigIdFlag)         : return fieldNum(InventDim,ConfigId);
            case fieldNum(InventDimParm,InventSizeIdFlag)     : return fieldNum(InventDim,InventSizeId);
            case fieldNum(InventDimParm,InventColorIdFlag)    : return fieldNum(InventDim,InventColorId);
            case fieldNum(InventDimParm,InventStyleIdFlag)    : return fieldNum(InventDim,InventStyleId);
            case fieldNum(InventDimParm,InventVersionIdFlag)  : return fieldNum(InventDim,InventVersionId);
            case fieldNum(InventDimParm,InventSiteIdFlag)     : return fieldNum(InventDim,InventSiteId);
            case fieldNum(InventDimParm,InventLocationIdFlag) : return fieldNum(InventDim,InventLocationId);
            case fieldNum(InventDimParm,InventBatchIdFlag)    : return fieldNum(InventDim,InventBatchId);
            case fieldNum(InventDimParm,wmsLocationIdFlag)    : return fieldNum(InventDim,wmsLocationId);
            case fieldNum(InventDimParm,wmsPalletIdFlag)      : return fieldNum(InventDim,wmsPalletId);
            case fieldNum(InventDimParm,InventSerialIdFlag)   : return fieldNum(InventDim,InventSerialId);
            case fieldNum(InventDimParm,LicensePlateFlag)     : return fieldNum(InventDim, LicensePlateId);
            case fieldNum(InventDimParm,InventStatusFlag)     : return fieldNum(InventDim, InventStatusId);
            case fieldNum(InventDimParm,InventDimension1Flag) : return fieldNum(InventDim, InventDimension1);
            case fieldNum(InventDimParm,InventDimension2Flag) : return fieldNum(InventDim, InventDimension2);
            case fieldNum(InventDimParm,InventDimension3Flag) : return fieldNum(InventDim, InventDimension3);
            case fieldNum(InventDimParm,InventDimension4Flag) : return fieldNum(InventDim, InventDimension4);
            case fieldNum(InventDimParm,InventDimension5Flag) : return fieldNum(InventDim, InventDimension5);
            case fieldNum(InventDimParm,InventDimension6Flag) : return fieldNum(InventDim, InventDimension6);
            case fieldNum(InventDimParm,InventDimension7Flag) : return fieldNum(InventDim, InventDimension7);
            case fieldNum(InventDimParm,InventDimension8Flag) : return fieldNum(InventDim, InventDimension8);
            case fieldNum(InventDimParm,InventDimension9Flag) : return fieldNum(InventDim, InventDimension9);
            case fieldNum(InventDimParm,InventDimension10Flag): return fieldNum(InventDim, InventDimension10);
            case fieldNum(InventDimParm,InventDimension11Flag): return fieldNum(InventDim, InventDimension11);
            case fieldNum(InventDimParm,InventDimension12Flag): return fieldNum(InventDim, InventDimension12);
            // <GEERU>
            case fieldNum(InventDimParm,InventGTDIdFlag_RU)    : return fieldNum(InventDim,InventGtdId_RU);
            case fieldNum(InventDimParm,InventProfileIdFlag_RU): return fieldNum(InventDim,InventProfileId_RU);
            case fieldNum(InventDimParm,InventOwnerIdFlag_RU)  : return fieldNum(InventDim,InventOwnerId_RU);
            // </GEERU>
        }

        throw error(strFmt("@SYS54431",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimensionEnabledFieldList</Name>
				<Source><![CDATA[
    static public List dimProductDimensionEnabledFieldList()
    {
        return InventDimMetaDataCache::dimProductDimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimensionEnabledFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a set of enabled product dimension field Ids.
    /// </summary>
    /// <returns>A set of enabled product dimension field Ids.</returns>
    static public Set dimProductDimensionEnabledFieldSet()
    {
        return InventDimMetaDataCache::dimProductDimEnabledFieldSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the fields in the <c>ProductDimensions</c> field group.
    /// </summary>
    /// <returns>
    /// A list of field IDs for <c>InventDim</c> fields.
    /// </returns>
    static public List dimProductDimFieldList()
    {
        return InventDimMetaDataCache::dimProductDimFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of the fields in the <c>ProductDimensions</c> field group.
    /// </summary>
    /// <returns>
    /// A set of field IDs for <c>InventDim</c> fields.
    /// </returns>
    static public Set dimProductDimFieldSet()
    {
        return InventDimMetaDataCache::dimProductDimFieldSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimReportFormatCode</Name>
				<Source><![CDATA[
    static private str dimReportFormatCode(LanguageId _languageId)
    {
        //formatting the text according to LTR or RTL
        if (isLanguageRTL(_languageId))
        {
            //
            //using RLM (right-to-left mark) to define the text orientation
            //%1 - previous chunk of text (RTL)
            //%2 - separator - (ASCII or LTR)
            //%3 - dimension label - (RTL)
            //%4 - separator - (ASCII or LTR)
            //%5 - dimension value (RTL)
            //
            return '%1\u200F%2\u200E%3\u200F%4\u200E%5\u200F';
        }

        // regular text
        return '%1%2%3%4%5';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimReportStr</Name>
				<Source><![CDATA[
    static public str 255 dimReportStr(
        InventDim       _inventDim,
        FieldId         _fieldId,
        LanguageId      _languageId)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        if (_inventDim.(_fieldId))
        {
            Label label = new Label(_languageId ? _languageId : infolog.language());
            str formatCode = InventDim::dimReportFormatCode(_languageId);
            str dimlabel = label.extractString(new SysDictField(tableNum(InventDim), _fieldId).labelLabel());
            
            return SysRTLUtils::embedDirectionIfRTL(strFmt(formatCode, '', '', dimlabel, ' : ', _inventDim.(_fieldId)), _languageId);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimReportStrAll</Name>
				<Source><![CDATA[
    static public str 255 dimReportStrAll(
        InventDim       _inventDim,
        container       _dimFields,
        LanguageId      _languageId)
    {
        int         len = conLen(_dimFields);
        str         combinedText = '';
        Label       label;
        str         formatCode = InventDim::dimReportFormatCode(_languageId);

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        for (int h = 1; h <= len; h++)
        {
            FieldId inventDimFieldId = conPeek(_dimFields, h);
            if (_inventDim.(inventDimFieldId))
            {
                if (!label)
                {
                    label = new Label(_languageId ? _languageId : infolog.language());
                }

                str dimlabel = label.extractString(new SysDictField(tableNum(InventDim), inventDimFieldId).labelLabel());
                combinedText = strFmt(formatCode,  combinedText, (combinedText ? '   ' : ''),  dimlabel, ' : ', _inventDim.(inventDimFieldId));
            }
        }

        return SysRTLUtils::embedDirectionIfRTL(combinedText, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimReportTranslationStrAll</Name>
				<Source><![CDATA[
    static public str 255 dimReportTranslationStrAll(
        InventDim       _inventDim,
        container       _dimFields,
        LanguageId      _languageId,
        ItemId          _itemId)
    {
        int         len = conLen(_dimFields);
        str         combinedText = '';
        Label       label;
        str         formatCode = InventDim::dimReportFormatCode(_languageId);

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        for (int i = 1; i <= len; i++)
        {
            FieldId inventDimFieldId = conPeek(_dimFields, i);
            if (_inventDim.(inventDimFieldId))
            {
                str productDimTransLationName = '';
                if (InventDim::isFieldIdProductDimension(inventDimFieldId))
                {
                    InventDimension inventDimension = InventDimension::singletonFromInventDimFieldId(inventDimFieldId);
                    InventProductDimension inventProductDimension = inventDimension as InventProductDimension;
                    if (inventProductDimension)
                    {
                        RefRecId productRecId = InventTable::itemProduct(_itemId);

                        EcoResProductMasterDimValueTranslation valueTranslation =
                            inventProductDimension.findTranslationByProduct(productRecId, _inventDim.(inventDimFieldId), _languageId);

                        productDimTransLationName = valueTranslation.Name;
                    }
                }

                if (productDimTransLationName == '')
                {
                    productDimTransLationName = _inventDim.(inventDimFieldId);
                }

                if (!label)
                {
                    label = new Label(_languageId ? _languageId : infolog.language());
                }

                str dimlabel = label.extractString(new SysDictField(tableNum(InventDim), inventDimFieldId).labelLabel());
                combinedText = strFmt(formatCode,  combinedText, (combinedText ? '   ' : ''),  dimlabel, ' : ', productDimTransLationName);
            }
        }

        return SysRTLUtils::embedDirectionIfRTL(combinedText, _languageId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimEnabledFieldList</Name>
				<Source><![CDATA[
    static public List dimStorageDimEnabledFieldList()
    {
        return InventDimMetaDataCache::dimStorageDimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the fields in the <c>StorageDimensions</c> field group.
    /// </summary>
    /// <returns>
    /// A list of field IDs for <c>InventDim</c> fields.
    /// </returns>
    static public List dimStorageDimFieldList()
    {
        return InventDimMetaDataCache::dimStorageDimFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of the fields in the <c>StorageDimensions</c> field group.
    /// </summary>
    /// <returns>
    /// A set of field IDs for <c>InventDim</c> fields.
    /// </returns>
    static public Set dimStorageDimFieldSet()
    {
        return InventDimMetaDataCache::dimStorageDimFieldSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTrackingDimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of tracking inventory dimensions whose corresponding configuration key is enabled.
    /// </summary>
    /// <returns>A list of field Ids for <c>InventDim</c> fields.</returns>
    static public List dimTrackingDimEnabledFieldList()
    {
        return InventDimMetaDataCache::dimTrackingDimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTrackingDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the fields in the <c>TrackingDimensions</c> field group.
    /// </summary>
    /// <returns>
    /// A list of field IDs for <c>InventDim</c> fields.
    /// </returns>
    static public List dimTrackingDimFieldList()
    {
        return InventDimMetaDataCache::dimTrackingDimFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTrackingDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of the fields in the <c>TrackingDimensions</c> field group.
    /// </summary>
    /// <returns>
    /// A set of field IDs for <c>InventDim</c> fields.
    /// </returns>
    static public Set dimTrackingDimFieldSet()
    {
        return InventDimMetaDataCache::dimTrackingDimFieldSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyDimField</Name>
				<Source><![CDATA[
    static public anytype emptyDimField(FieldId _dimFieldId)
    {
        #InventDimDevelop
        
        switch (_dimFieldId)
        {
            case fieldNum(InventDim, ConfigId):
            case fieldNum(InventDim, InventSizeId):
            case fieldNum(InventDim, InventColorId):
            case fieldNum(InventDim, InventStyleId):
            case fieldNum(InventDim, InventVersionId):
            case fieldNum(InventDim, InventSiteId):
            case fieldNum(InventDim, InventLocationId):
            case fieldNum(InventDim, InventBatchId):
            case fieldNum(InventDim, wmsLocationId):
            case fieldNum(InventDim, wmsPalletId):
            case fieldNum(InventDim, InventSerialId):
            case fieldNum(InventDim, LicensePlateId):
            case fieldNum(InventDim, InventStatusId):
            case fieldNum(InventDim, InventDimension1):
            case fieldNum(InventDim, InventDimension2):
            case fieldNum(InventDim, InventDimension3):
            case fieldNum(InventDim, InventDimension4):
            case fieldNum(InventDim, InventDimension5):
            case fieldNum(InventDim, InventDimension6):
            case fieldNum(InventDim, InventDimension7):
            case fieldNum(InventDim, InventDimension8):
            case fieldNum(InventDim, InventDimension11):
            case fieldNum(InventDim, InventDimension12):
            // <GEERU>
            case fieldNum(InventDim, InventGtdId_RU):
            case fieldNum(InventDim, InventProfileId_RU):
            case fieldNum(InventDim, InventOwnerId_RU):
                return '';
            case fieldNum(InventDim, InventDimension9):
                return utcDateTimeNull();
            case fieldNum(InventDim, InventDimension10):
                return 0;
        }

        DictField df = new DictField(tableNum(InventDim), _dimFieldId);
        switch (df.baseType())
        {
            case Types::String:
                return '';
            case Types::Integer:
                return 0;
            case Types::Real:
                return 0;
            case Types::Date:
                return dateNull();
            case Types::Enum:
                return 0;
            case Types::Int64:
                return 0;
            case Types::Guid:
                return '';
            case Types::UtcDateTime:
                return utcDateTimeNull();
        }

        throw error(strFmt("@SYS76481", df.baseType()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldType</Name>
				<Source><![CDATA[
    internal static Types dimFieldType(FieldId _dimFieldId)
    {
        #InventDimDevelop

        switch (_dimFieldId)
        {
            case fieldNum(InventDim, ConfigId):
            case fieldNum(InventDim, InventSizeId):
            case fieldNum(InventDim, InventColorId):
            case fieldNum(InventDim, InventStyleId):
            case fieldNum(InventDim, InventVersionId):
            case fieldNum(InventDim, InventSiteId):
            case fieldNum(InventDim, InventLocationId):
            case fieldNum(InventDim, InventBatchId):
            case fieldNum(InventDim, wmsLocationId):
            case fieldNum(InventDim, wmsPalletId):
            case fieldNum(InventDim, InventSerialId):
            case fieldNum(InventDim, LicensePlateId):
            case fieldNum(InventDim, InventStatusId):
            case fieldNum(InventDim, InventDimension1):
            case fieldNum(InventDim, InventDimension2):
            case fieldNum(InventDim, InventDimension3):
            case fieldNum(InventDim, InventDimension4):
            case fieldNum(InventDim, InventDimension5):
            case fieldNum(InventDim, InventDimension6):
            case fieldNum(InventDim, InventDimension7):
            case fieldNum(InventDim, InventDimension8):
            case fieldNum(InventDim, InventDimension11):
            case fieldNum(InventDim, InventDimension12):
                // <GEERU>
            case fieldNum(InventDim, InventGtdId_RU):
            case fieldNum(InventDim, InventProfileId_RU):
            case fieldNum(InventDim, InventOwnerId_RU):
                return Types::String;
            case fieldNum(InventDim, InventDimension9):
                return Types::UtcDateTime;
            case fieldNum(InventDim, InventDimension10):
                return Types::Real;
        }

        DictField df = new DictField(tableNum(InventDim), _dimFieldId);

        return df.baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyDimFieldQueryValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string with the value of the empty field, to be used in SQL queries.
    /// </summary>
    /// <param name = "_fieldId">The id of the InventDim field</param>
    /// <returns>A string with the value of the empty field, to be used in SQL queries.</returns>
    public static str emptyDimFieldQueryValue(FieldId _fieldId)
    {
        #InventDimDevelop

        anytype emptyFieldValue = InventDim::emptyDimField(_fieldId);
        if (emptyFieldValue == 0)
        {
            return emptyFieldValue;
        }
        else
        {
            return SysComputedColumn::returnLiteral(emptyFieldValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(InventDimId _inventDimId)
    {
        return _inventDimId && (select firstonly inventDim
                    where inventDim.InventDimId == _inventDimId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventDim find(
        InventDimId _inventDimId,
        boolean     _forupdate = false)
    {
        InventDim inventDim;

        if (_inventDimId)
        {
            if (_forupdate)
            {
                inventDim.selectForUpdate(_forupdate);
            }
            else
            {
                inventDim = InventDimRecordCache::lookupByInventDimId(_inventDimId);
                if (inventDim)
                {
                    return inventDim;
                }
            }

            select firstonly inventDim
                where inventDim.InventDimId  == _inventDimId;

            InventDimRecordCache::add(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimByHash</Name>
				<Source><![CDATA[
    static private InventDim findDimByHash(
        InventDimSHA1HashHex _hash,
        boolean              _forupdate = false)
    {
        InventDim       inventDim;

        if (_forupdate)
        {
            inventDim.selectForUpdate(_forupdate);
        }
        else
        {
            inventDim = InventDimRecordCache::lookupByHash(_hash);
            if (inventDim)
            {
                return inventDim;
            }
        }
       
        select firstonly inventDim
            where inventDim.sha1HashHex == _hash;

        InventDimRecordCache::add(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDim</Name>
				<Source><![CDATA[
    static public InventDim findDim(
        InventDim   _inventDim,
        boolean     _forupdate = false)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);
        return InventDim::findDimByHash(_inventDim.hashValue(), _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory location to find.
    /// </param>
    /// <param name="_dataAreaId">
    /// The see comment entity in which to find the record.
    /// </param>
    /// <returns>
    /// A record in the <c>InventDim</c> table; otherwise, an empty record.
    /// </returns>
    public static InventDim findInLegalEntity(
        InventDimId     _inventDimId,
        DataAreaId      _dataAreaId)
    {
        InventDim   inventDim;

        if (_inventDimId && _dataAreaId)
        {
            select crosscompany inventDim
                where inventDim.InventDimId == _inventDimId
                   && inventDim.DataAreaId  == _dataAreaId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canJumpRefControlBeChecked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the selected control's datasource can be checked during an ItemId search from a jumpRef call 
    /// if the caller form contains the itemId() method.
    /// </summary>
    /// <param name = "_caller">
    /// A caller form.
    /// </param>
    /// <returns>
    /// True if the selected control's datasource can be checked; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Intends to forms that contain the itemId() method that can return a value other than the item associated with the <c>InventDim</c> record.
    /// </remarks>
    public static boolean canJumpRefControlBeChecked(FormRun _caller)
    {
        if (_caller)
        {
            switch (_caller.name())
            {
                case formStr(ProdJournalTransProd):
                case formStr(BOMConsistOf):
                case formStr(PdsRebateAgreement):
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemIdFromJumpRef</Name>
				<Source><![CDATA[
    static public ItemId findItemIdFromJumpRef(Args _args)
    {
        FormRun         formRun;
        FormDataSource  formDataSource;
        FormDataSource  formDataSourceParent;
        FieldId         itemFieldId;
        PriceDiscTable  priceDiscTable;

        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateAgreementLine  pdsRebateAgreementLine;

        if (_args && _args.caller())
        {
            if (SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)))
            {
                formRun = _args.caller();
                formDataSource = formRun.dataSource();
                
                TableId tableId;

                if (formDataSource)
                {
                    tableId = formDataSource.table();
                }

                if (tableId != tableNum(InventBatch)
                    && tableId != tableNum(RetailInventTable)
                    && tableId != tableNum(InventSerial)
                    && tableId != tableNum(InventDim)
                    && (!formHasMethod(_args.caller(), identifierStr(ItemId))
                    || (InventDimItemIdFromJumpRefFlight::instance().isEnabled()
                    && InventDim::canJumpRefControlBeChecked(formRun))))
                {
                    FormControl selectedFormControl = formRun.selectedControl();

                    if (selectedFormControl && selectedFormControl.dataSourceObject())
                    {
                        formDataSource = selectedFormControl.dataSourceObject();
                        tableId = formDataSource.table();
                    }
                }

                switch (tableId)
                {
                    case tableNum(InventBatch):
                        return formDataSource.cursor().(fieldNum(InventBatch, ItemId));

                    case tableNum(RetailInventTable):
                        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                        {
                            return formDataSource.cursor().(fieldNum(RetailInventTable, ItemId));
                        }
                        return '';

                    case tableNum(InventSerial):
                        return formDataSource.cursor().(fieldNum(InventSerial, ItemId));

                    case tableNum(InventDim):
                        formDataSourceParent = formGetParentDatasource(formDataSource,true);

                        if (formDataSourceParent)
                        {
                            itemFieldId = fieldName2id(formDataSourceParent.table(),fieldStr(InventTable,ItemId));
                            if (itemFieldId)
                            {
                                return formDataSourceParent.cursor().(itemFieldId);
                            }
                            else
                            {
                                switch (formDataSourceParent.table())
                                {
                                    case tableNum(PriceDiscTable):
                                        priceDiscTable = formDataSourceParent.cursor() as PriceDiscTable;
                                        if (priceDiscTable.ItemCode == PriceDiscProductCodeType::Table)
                                        {
                                            return priceDiscTable.ItemRelation;
                                        }
                                        break;
                                    case tableNum(PdsRebateAgreementLine):
                                        pdsRebateAgreementLine = formDataSourceParent.cursor() as PdsRebateAgreementLine;
                                        pdsRebateAgreement = pdsRebateAgreementLine.pdsRebateAgreement();
                                        if (pdsRebateAgreement.PdsItemRebateCode == PdsRebateItemCode::Table)
                                        {
                                            return pdsRebateAgreement.PdsItemRebateRelation;
                                        }
                                        break;
                                    case tableNum(RetailPricingSimulatorSalesLine):
                                        RetailPricingSimulatorSalesLine salesLine = formDataSourceParent.cursor() as RetailPricingSimulatorSalesLine;
                                        return salesLine.DisplayProductNumber;
                                        break;
                                }
                            }
                        }
                        break;
                }
                if (formHasMethod(_args.caller(), identifierStr(ItemId)))
                {
                    return _args.caller().itemId();
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimContain</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the dimension values in one <c>InventDim</c> record are contained in another <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDim1">
    ///     An <c>InventDim</c> record with less specific dimension values.
    /// </param>
    /// <param name="_inventDim2">
    ///     An <c>InventDim</c> record with more specific dimension values.
    /// </param>
    /// <param name="_dimFields">
    ///     A list that has IDs of the fields to compare.
    /// </param>
    /// <returns>
    ///     true if all the specified fields in the less specific <c>InventDim</c> record have identical values in the more specific <c>InventDim</c> record; otherwise, false.
    /// </returns>
    public static boolean isInventDimContain(InventDim   _inventDim1,
                                             InventDim   _inventDim2,
                                             List        _dimFields = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        FieldId         inventDimFieldId;

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim1.checkInvalidFieldAccess(false);
            _inventDim2.checkInvalidFieldAccess(false);
            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();

                if (_inventDim1.(inventDimFieldId) && _inventDim1.(inventDimFieldId) != _inventDim2.(inventDimFieldId))
                {
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInMainTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an inventory dimension record in the main transaction.
    /// </summary>
    /// <param name = "_inventDim">A record with the dimension fields set.</param>
    /// <returns>The inventory dimension.</returns>
    /// <remarks>New dimensions are created in the main transaction and can cause database contention.</remarks>
    [Hookable(false)]
    static public InventDim findOrCreateInMainTransaction(InventDim _inventDim)
    {
        const boolean useUserConnection = false;
        return InventDim::findOrCreateInternal(_inventDim, useUserConnection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an inventory dimension record.
    /// </summary>
    /// <param name = "_inventDim">A record with the dimension fields set.</param>
    /// <returns>The inventory dimension.</returns>
    /// <remarks>New dimensions are created in a user connection to avoid database contention.</remarks>
    static public InventDim findOrCreate(InventDim _inventDim)
    {
        _inventDim.checkInvalidFieldAccess(false);
        const boolean useUserConnection = true;
        return InventDim::findOrCreateInternal(_inventDim, useUserConnection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInternal</Name>
				<Source><![CDATA[
    static private InventDim findOrCreateInternal(InventDim _inventDim, boolean _useUserConnection)
    {
        InventDim inventDim;

        if (InventDim::mustUseHashAsInventDimId())
        {
            inventDim = InventDim::findOrCreateWithInventDimIdFromHash(_inventDim, _useUserConnection);
        }
        else
        {
            inventDim = InventDim::findOrCreateWithInventDimIdFromRecId(_inventDim, _useUserConnection);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWithInventDimIdFromRecId</Name>
				<Source><![CDATA[
    static private InventDim findOrCreateWithInventDimIdFromRecId(InventDim _inventDim, boolean _useUserConnection)
    {
        #OCCRetryCount
        InventDim inventDim;

        try
        {
            str hashKey = _inventDim.hashKey();
            InventDimSHA1HashHex hash1;
            
            hash1 = InventDim::computeSHA1Hash(hashKey);
            inventDim = InventDim::findDimByHash(hash1);

            if (!inventDim.RecId)
            {
                if (!hash1)
                {
                    hash1 = InventDim::computeSHA1Hash(hashKey);
                }

                inventDim = InventDim::doCreate(_inventDim, hash1, _useUserConnection, '', 0);
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWithInventDimIdFromHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an inventory dimension record.
    /// </summary>
    /// <param name = "_inventDim">A record with the dimension fields set.</param>
    /// <param name = "_useUserConnection">Decides if the record will be inserted in an user connection.</param>
    /// <returns>The inventory dimension.</returns>
    /// <remarks>
    /// Description of the algorithm used for generating the InventDimId values:
    /// We start with a predefined amount of characters generated from a hash based on a key made from all the fields of the <c>InventDim</c> buffer
    /// and create the InventDimId value based on the left most characters.
    /// In the event, that we receive a duplicate value in index exception which is cause by the uniqueness of the InventDimId value and not the hash value,
    /// then we try with the same amount of characters + 1, and continue until we can persist the record.
    /// If we reach the InventDimId character limit, we simply fall back to using the RecId value as input for the InventDimId value.
    /// This value will not conflict with any other InventDimId value as it starts with the # prefix, which is not represented anywhere in the hash value.
    /// If we reach the retry limit, we also fall back to using the RecId.
    ///
    /// The decision about using this algorithm and not just extending the length of the InventDimId field was done because of potential breaking changes
    /// and because of the increased size of the database (<c>InventDim</c> is referenced in many tables).
    ///
    /// The need for a new algorithm was due to an environment setup with multiple scale units (i.e. hub and spokes),
    /// where data in the <c>InventDim</c> table needs to be synchronized between environments and there should be no duplicates in regards to the fields of the table.
    /// </remarks>
    static private InventDim findOrCreateWithInventDimIdFromHash(InventDim _inventDim, boolean _useUserConnection)
    {
        #OCCRetryCount

        InventDim inventDim;

        str inventDimIdHash;
        int initialInventDimIdHashLength;
        int inventDimIdHashLength;

        str hashKey = _inventDim.hashKey();

        InventDimSHA1HashHex hash1;

        try
        {
            hash1 = InventDim::computeSHA1Hash(hashKey);
            inventDim = InventDim::findDimByHash(hash1);

            if (!inventDim.RecId)
            {
                if (!inventDimIdHash)
                {
                    inventDimIdHash = InventDim::computeSpookyHash(hashKey);
                }

                if (!initialInventDimIdHashLength)
                {
                    initialInventDimIdHashLength = InventDim::retrieveInitialInventDimIdHashLength();
                    inventDimIdHashLength = initialInventDimIdHashLength;
                }
                
                if (!hash1)
                {
                    hash1 = InventDim::computeSHA1Hash(hashKey);
                }

                inventDim = InventDim::doCreate(_inventDim, hash1, _useUserConnection, inventDimIdHash, inventDimIdHashLength);
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                if (InventDim::wasThrownDuplicateKeyExceptionRelatedToHash(hash1))
                {
                    retry;
                }

                inventDimIdHashLength = InventDim::recalculateInventDimIdHashLength(inventDimIdHashLength, currentRetryCount);

                retry;
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeSHA1Hash</Name>
				<Source><![CDATA[
    static private InventDimSHA1HashHex computeSHA1Hash(str _hashKey)
    {
        InventDimSHA1HashHex sha1Hash;

        using (MemoryStream keyStream = new MemoryStream())
        {
            new BinaryFormatter().Serialize(keyStream, _hashKey);
            keyStream.Seek(0, SeekOrigin::Begin);

            using (var algorithm = new SHA1CryptoServiceProvider())
            {
                using (MemoryStream hashStream = new MemoryStream(algorithm.ComputeHash(keyStream)))
                {
                    sha1Hash = StrRem(System.BitConverter::ToString(hashStream.ToArray()), '-');
                }
            }
        }

        return sha1Hash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeSHA3Hash</Name>
				<Source><![CDATA[
    [Hookable(false),
    SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
    internal static InventDimSHA3HashHex computeSHA3Hash(str _hashKey)
    {
        InventDimSHA3HashHex sha3Hash;

        using (var hashStream = Microsoft.Dynamics.AX.Data.Helper.HashKeyHelper::ComputeSHA3Hash(_hashKey))
        {
            sha3Hash = StrRem(System.BitConverter::ToString(hashStream.ToArray()), '-');
        }

        return sha3Hash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeSpookyHash</Name>
				<Source><![CDATA[
    static private str computeSpookyHash(str _hashKey)
    {
        str spookyHash = HashFunctions::ComputeHashAsHexString(_hashKey, HashType::SpookyHash);

        return spookyHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateInventDimIdHashLength</Name>
				<Source><![CDATA[
    static private int recalculateInventDimIdHashLength(int _inventDimIdHashLength, int _currentRetryCount)
    {
        #OCCRetryCount

        boolean isLastRetry = _currentRetryCount + 1 == #RetryNum;

        boolean isInventDimIdLengthLimitReached = _inventDimIdHashLength == InventDimMetaDataCache::inventDimIdLength();

        var logger = InventInstrumentationLogger::createLogger('InventDim');
        logger.inventDimCreationActivities().duplicateKeyExceptionRelatedToHashInventDimId(_inventDimIdHashLength, isLastRetry, isInventDimIdLengthLimitReached);

        if (isLastRetry
            || isInventDimIdLengthLimitReached)
        {
            // Based on the implementation of the InventDim::doCreate and InventDim::convertRecIdToInventDimId methods,
            // this will cause the resulting InventDimId to be generated based on the RecId.
            return 0;
        }

        return _inventDimIdHashLength + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasThrownDuplicateKeyExceptionRelatedToHash</Name>
				<Source><![CDATA[
    static private boolean wasThrownDuplicateKeyExceptionRelatedToHash(InventDimSHA1HashHex _hash)
    {
        InventDim inventDimWithSameHash = InventDim::findDimByHash(_hash);

        return inventDimWithSameHash.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInitialInventDimIdHashLength</Name>
				<Source><![CDATA[
    static public int retrieveInitialInventDimIdHashLength()
    {
        return 15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>InventDim</c> table in a given company.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension record.
    /// </param>
    /// <param name="_dataAreaId">
    /// The company in which the record should be found or created.
    /// </param>
    /// <returns>
    /// A record in the <c>InventDim</c> table.
    /// </returns>
    static public InventDim findOrCreateInLegalEntity(InventDim  _inventDim, DataAreaId _dataAreaId)
    {
        InventDim inventDim;

        changecompany(_dataAreaId)
        {
            inventDim = inventDim::findOrCreate(_inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a record in the <c>InventDim</c> table with empty dimension fields.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    /// <remarks>
    /// Consider using the <c>inventDimIdBlank</c> method instead of this method, for better caching.
    /// </remarks>
    static public InventDim findOrCreateBlank()
    {
        #define.blank('AllBlank')
        InventDim   inventDim;
        InventDim   inventDimAllBlank;
        InventDimId inventDimIdBlank = #blank;
        Counter     logCount;

        inventDim = InventDim::find(inventDimIdBlank);
        if (inventDim.RecId && InventDim::isInventDimEqual(inventDim, inventDimAllBlank))
        {
            return inventDim;
        }

        if (inventDim.RecId)
        {
            inventDimIdBlank += '2';
        }

        inventDim = InventDim::findDim(inventDimAllBlank);
        if (inventDim.RecId)
        {
            return inventDim;
        }

        try
        {
            ttsbegin;
            logCount = infologLine();
            inventDim.InventDimId = inventDimIdBlank;
            inventDim.insert(true);
            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::lastDuplicateKeyViolatingTable() == inventDim.TableId)
            {
                /*
                    If we get the duplicate exception for InventDim somebody else must have inserted the blank record.
                    We can then select it and return it without showing an error in infolog.
                */
                infolog.clear(logCount);
                inventDim = InventDim::findDim(inventDimAllBlank);
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formQueryAddDynalink</Name>
				<Source><![CDATA[
    static public void formQueryAddDynalink(
        FormDataSource  _inventDim_DS,
        Args            _args,
        boolean         _linkInventDim = false)
    {
        InventDim::formQueryAddDynalinkByQuery(_inventDim_DS.query(), _args, _linkInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formQueryAddDynalinkByQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query for the <c>InventDim</c> table that is based on the caller.
    /// </summary>
    /// <param name="_query">
    /// The query to handle.
    /// </param>
    /// <param name="_args">
    /// The arguments of the caller.
    /// </param>
    /// <param name="_linkInventDim">
    /// Optional parameter to use for when the caller is linked to the <c>InventDim</c> table.
    /// </param>
    static public void formQueryAddDynalinkByQuery(
        Query           _query,
        Args            _args,
        boolean         _linkInventDim = false)
    {
        InventDimParm           inventDimParm;
        Object                  callerForm;
        InventDimCtrl_Frm       callerInventDimFormSetup;
        InventDim               inventDim;
        FormDataSource          inventDimFormDataSource;

        #InventDimDevelop

        switch (_args.dataset())
        {
            case tableNum(InventDimCombination):
                inventDimFormDataSource  = getJoinChildFormDataSource(FormDataUtil::getFormDataSource(_args.record()), tableNum(InventDim));
                if (inventDimFormDataSource)
                {
                    inventDim   = inventDimFormDataSource.cursor() as InventDim;
                    QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventDim));

                    var enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

                    while (enumerator.moveNext())
                    {
                        FieldId fieldId = enumerator.current();

                        qbds.addDynalink(fieldId, inventDim, FieldId);
                        qbds.addSortField(fieldId);
                    }
                }
                break;

            case tableNum(WMSLocation):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, wmsLocationId),
                    _args.record(),
                    fieldName2id(_args.dataset(),fieldStr(WMSLocation,wmsLocationId)));
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventLocationId),
                    _args.record(),
                    fieldName2id(_args.dataset(),fieldStr(WMSLocation,InventLocationId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim,wmsLocationId));
                break;

            case tableNum(InventBatch):
               _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventBatchId),
                    _args.record(),
                    fieldName2id(_args.dataset(),fieldStr(InventBatch,InventBatchId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim,InventBatchId));
                break;

            case tableNum(InventSerial):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventSerialId),
                    _args.record(),
                    fieldName2id(_args.dataset(),fieldStr(InventSerial,InventSerialId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim,InventSerialId));
                break;

            case tableNum(WHSLicensePlate):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, LicensePlateId),
                    _args.record(),
                    fieldName2id(_args.dataset(), fieldStr(WHSLicensePlate, LicensePlateId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim, LicensePlateId));

                break;

            case tableNum(WHSInventStatus):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventStatusId),
                    _args.record(),
                    fieldName2id(_args.dataset(), fieldStr(WHSInventStatus, InventStatusId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim, InventStatusId));
                break;

            // <GEERU>
            case tableNum(InventGTD_RU):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventGtdId_RU),
                    _args.record(),
                    fieldName2id(_args.dataset(), fieldStr(InventGTD_RU, InventGTDId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim, InventGtdId_RU));

                break;

            case tableNum(InventProfile_RU):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventProfileId_RU),
                    _args.record(),
                    fieldName2id(_args.dataset(), fieldStr(InventProfile_RU, InventProfileId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim, InventProfileId_RU));

                break;

            case tableNum(InventOwner_RU):
                _query.dataSourceTable(tableNum(InventDim)).addDynalink(
                    fieldNum(InventDim, InventOwnerId_RU),
                    _args.record(),
                    fieldName2id(_args.dataset(), fieldStr(InventOwner_RU, InventOwnerId)));

                _query.dataSourceTable(tableNum(InventDim)).addSortField(fieldNum(InventDim, InventOwnerId_RU));

                break;
            // </GEERU>
            case(tableNum(InventTrans)):

                if (_linkInventDim)
                {
                    callerForm                  = _args.caller();
                    if (InventDimParm::inventDimFormRightClick(callerForm))
                    {
                        callerInventDimFormSetup    = callerForm.inventDimSetupObject();
                        inventDimParm = callerInventDimFormSetup.parmDimParmVisibleGrid();
                        inventDimParm.queryAddDynalink(_query.dataSourceTable(tableNum(InventDim)), InventDim::callerInventDimDatasource(_args).cursor() as InventDim);
                    }
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderFields</Name>
				<Source><![CDATA[
    static public container getHeaderFields(QueryBuildDataSource _qbd)
    {
        Counter     h;
        container   headerFields;

        for (h=1; h <= _qbd.sortFieldCount(); h++)
        {
            if (_qbd.autoHeader(h))
            {
                headerFields += _qbd.sortField(h);
            }
        }

        return headerFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNonProductInventDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of not product related inventory dimensions fields.
    /// </summary>
    /// <returns>
    ///     List of not product related fieldIds.
    /// </returns>
    public static List getNonProductInventDimFields()
    {
        InventDimParm   dimParmNonProduct;

        // Set all product related fields to enabled
        dimParmNonProduct.toggleAllInventDim();
        dimParmNonProduct.clearProductDimensions();

        // Return list of fields enabled
        return dimParmNonProduct.selectedDimFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumFields</Name>
				<Source><![CDATA[
    static public container getSumFields(QueryBuildDataSource _qbd)
    {
        Counter     h;
        container   sumFields;

        for (h=1; h <= _qbd.sortFieldCount(); h++)
        {
            if (_qbd.autoSum(h))
            {
                sumFields += _qbd.sortField(h);
            }
        }

        return sumFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hhtFindInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>InventDim</c> table based on the warehouse.
    /// </summary>
    /// <param name="inventLocationId">
    /// Identification of Warehouse .
    /// </param>
    /// <param name="wmsLocationId">
    /// Location in a warehouse.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventDim</c> table; otherwise, an empty record.
    /// </returns>
    static InventDim hhtFindInventDimId(InventLocationId inventLocationId,
                                        WMSLocationId   wmsLocationId = "",
                                        boolean         update = false)
    {
        InventDim       inventDim;

        inventDim.selectForUpdate(update);

        if (inventLocationId)
            select firstonly inventDim
                where inventDim.InventLocationId == inventLocationId;

        if (!inventDim && inventLocationId && wmsLocationId)
        {
            select firstonly inventDim
                where inventDim.InventLocationId == inventLocationId &&
                        inventDim.wmsLocationId == wmsLocationId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdBlank</Name>
				<Source><![CDATA[
    static public InventDimId inventDimIdBlank()
    {
        return InventDimGlobal::inventDimIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdAffectingPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the specified field ID affects the price calculation.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to check.
    /// </param>
    /// <returns>
    ///    true if the field ID affects prices; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    There is an unknown field ID.
    /// </exception>
    static public boolean isFieldIdAffectingPrice(FieldId _dimFieldId)
    {
        InventDimension dimension = InventDimension::singletonFromInventDimFieldId(_dimFieldId);
        if (dimension)
        {
            return dimension.isAffectingPrice();
        }

        #InventDimDevelop
        switch (_dimFieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdConsistentDim</Name>
				<Source><![CDATA[
    static public boolean isFieldIdConsistentDim(FieldId _dimFieldId)
    {
        InventDimension dimension = InventDimension::singletonFromInventDimFieldId(_dimFieldId);
        if (dimension)
        {
            return dimension.isConsistent();
        }

        #InventDimDevelop
        switch (fieldExt2Id(_dimFieldId))
        {
            case fieldNum(InventDim, InventSiteId):
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdDimensional</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified field ID is a dimensional field.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to check.
    /// </param>
    /// <returns>
    ///    true if the field ID is dimensional; otherwise, false.
    /// </returns>
    static public boolean isFieldIdDimensional(FieldId _dimFieldId)
    {
        return InventDim::isFieldIdProductDimension(_dimFieldId) ||
               InventDim::isFieldIdStorageDimension(_dimFieldId) ||
               InventDim::isFieldIdTrackingDimension(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdInventItemSetupRelevant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified field ID is relevant for item order settings.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to check.
    /// </param>
    /// <returns>
    ///    true if the field ID is relevant for item order settings; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    There is an unknown field ID.
    /// </exception>
    static public boolean isFieldIdInventItemSetupRelevant(FieldId _dimFieldId)
    {
        InventDimension dimension = InventDimension::singletonFromInventDimFieldId(_dimFieldId);
        if (dimension)
        {
            return dimension.isInventItemSetupRelevant();
        }

        #InventDimDevelop
        switch (_dimFieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdItemCovDim</Name>
				<Source><![CDATA[
    static public boolean isFieldIdItemCovDim(FieldId _dimFieldId)
    {
        InventDimension dimension = InventDimension::singletonFromInventDimFieldId(_dimFieldId);
        if (dimension)
        {
            return dimension.isItemCoverageDimension();
        }

        #InventDimDevelop
        switch (_dimFieldId)
        {
            case fieldNum(InventDim, InventSiteId):
            case fieldNum(InventDim, InventLocationId):
            case fieldNum(InventDim, wmsLocationId):
            case fieldNum(InventDim, InventStatusId):
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesFieldSetContainProductDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified dimension field ID set contains any product dimension field IDs.
    /// </summary>
    /// <param name="_dimensionFieldIdSet">
    ///    The dimension field ID set to check.
    /// </param>
    /// <returns>
    ///    true if the set contains a product dimension field ID; otherwise, false.
    /// </returns>
    public static boolean doesFieldSetContainProductDimension(Set _dimensionFieldIdSet)
    {
        FieldId dimFieldId;
        var     enumerator = _dimensionFieldIdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();

            if (InventDim::isFieldIdProductDimension(dimFieldId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesFieldSetContainActiveEnabledPurchPriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified dimension field ID set contains any fields that have purchase price active and enabled.
    /// </summary>
    /// <param name="_dimensionFieldIdSet">
    ///    The dimension field ID set to check.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    ///    The inventory dimension group setup.
    /// </param>
    /// <returns>
    ///    true if the set contains a field that has purchase price active and enabled; otherwise, false.
    /// </returns>
    public static boolean doesFieldSetContainActiveEnabledPurchPriceDisc(Set _dimensionFieldIdSet, InventDimGroupSetup _inventDimGroupSetup)
    {
        FieldId dimFieldId;
        var enumerator = _dimensionFieldIdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();

            if (InventDim::mustUseFieldPurchPriceDisc(dimFieldId, _inventDimGroupSetup))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdEnabledProductDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified <c>FieldId</c> is a configuration enabled product dimension.
    /// </summary>
    /// <param name = "_dimFieldId">The <c>FieldId</c> to check.</param>
    /// <returns>true if the specified <c>FieldId</c> is a configuration enabled product dimension; otherwise, false.</returns>
    public static boolean isFieldIdEnabledProductDimension(FieldId _dimFieldId)
    {
        return InventDim::dimProductDimensionEnabledFieldSet().in(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdProductDimension</Name>
				<Source><![CDATA[
    public static boolean isFieldIdProductDimension(FieldId _dimFieldId)
    {
        return InventDim::dimProductDimFieldSet().in(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdStorageDimension</Name>
				<Source><![CDATA[
    static public boolean isFieldIdStorageDimension(FieldId _dimFieldId)
    {
        return InventDim::dimStorageDimFieldSet().in(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdTrackingDimension</Name>
				<Source><![CDATA[
    static public boolean isFieldIdTrackingDimension(FieldId _dimFieldId)
    {
        return InventDim::dimTrackingDimFieldSet().in(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdTransferReceiptMergeable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a dimension field can be merged on the final receipt of a transfer.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to check.
    /// </param>
    /// <returns>
    ///    true if the field can be merged; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    There is an unknown field ID.
    /// </exception>
    public static boolean isFieldIdTransferReceiptMergeable(FieldId _dimFieldId)
    {
        InventDimension dimension = InventDimension::singletonFromInventDimFieldId(_dimFieldId);
        if (dimension)
        {
            return dimension.isTransferReceiptMergeable();
        }

        #InventDimDevelop
        switch (_dimFieldId)
        {
            case fieldNum(InventDim, LicensePlateId):
            case fieldNum(InventDim, InventStatusId):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdTransferTransitReceiptMergeable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a dimension field can be merged on the transit receipt of a transfer.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to check.
    /// </param>
    /// <returns>
    ///    true if the field can be merged; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    There is an unknown field ID.
    /// </exception>
    public static boolean isFieldIdTransferTransitReceiptMergeable(FieldId _dimFieldId)
    {
        InventDimension dimension = InventDimension::singletonFromInventDimFieldId(_dimFieldId);
        if (dimension)
        {
            return dimension.isTransferTransitReceiptMergeable();
        }

        #InventDimDevelop
        switch (_dimFieldId)
        {
            case fieldNum(InventDim, LicensePlateId):
            case fieldNum(InventDim, InventStatusId):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all of the specified fields of the two specified buffers from the
    ///    <c>InventDim</c> table are identical.
    /// </summary>
    /// <param name="_inventDim1">
    ///    The first <c>InventDim</c> table buffer to compare.
    /// </param>
    /// <param name="_inventDim2">
    ///    The second <c>InventDim</c> table buffer to compare.
    /// </param>
    /// <param name="_dimFields">
    ///    A list that has IDs of the fields to compare.
    /// </param>
    /// <returns>
    ///    true if all the specified fields have identical values; otherwise, false.
    /// </returns>
    static public boolean isInventDimEqual(
        InventDim   _inventDim1,
        InventDim   _inventDim2,
        List        _dimFields = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        FieldId         inventDimFieldId;

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim1.checkInvalidFieldAccess(false);
            _inventDim2.checkInvalidFieldAccess(false);
            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();

                if (_inventDim1.(inventDimFieldId) != _inventDim2.(inventDimFieldId))
                {
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualConsistent</Name>
				<Source><![CDATA[
    static public boolean isInventDimEqualConsistent(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim,
        InventDim                       _toInventDim)
    {
        List    dimFields = _inventDimGroupSetup.activeConsistentFields();

        return InventDim::isInventDimEqual(_fromInventDim, _toInventDim, dimFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualCovDim</Name>
				<Source><![CDATA[
    static public boolean isInventDimEqualCovDim(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim,
        InventDim                       _toInventDim)
    {
        return InventDim::isInventDimEqual(_fromInventDim, _toInventDim, _inventDimGroupSetup.activeCoveragePlanFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualFinancialDim</Name>
				<Source><![CDATA[
    static public boolean isInventDimEqualFinancialDim(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _fromInventDim,
        InventDim                       _toInventDim)
    {
        return InventDim::isInventDimEqual(_fromInventDim, _toInventDim, _inventDimGroupSetup.activeFinancialInventoryFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualPhysicalDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether two specified <c>InventDim</c> table buffers have the same physical inventory
    ///    dimensions.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    The instance of the <c>InventDimGroupSetup</c> class that represents the dimension setup that is
    ///    used to determine the physical dimensions
    /// </param>
    /// <param name="_fromInventDim">
    ///    The first <c>InventDim</c> table buffer.
    /// </param>
    /// <param name="_toInventDim">
    ///    The second <c>InventDim</c> table buffer.
    /// </param>
    /// <returns>
    ///    true if both of the <c>InventDim</c> table buffers have the same physical dimensions; otherwise,
    ///    false.
    /// </returns>
    static public boolean isInventDimEqualPhysicalDim(
        InventDimGroupSetup         _inventDimGroupSetup,
        InventDim                   _fromInventDim,
        InventDim                   _toInventDim)
    {
        return InventDim::isInventDimEqual(_fromInventDim, _toInventDim, _inventDimGroupSetup.activePhysicalInventoryFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualProductDim</Name>
				<Source><![CDATA[
    static public boolean isInventDimEqualProductDim(
        EcoResProductDimGroupSetup      _productDimGroupSetup,
        InventDim                       _fromInventDim,
        InventDim                       _toInventDim)
    {
        return InventDim::isInventDimEqual(_fromInventDim, _toInventDim, _productDimGroupSetup.activeDimensionFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualWHSNonWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares all inventory dimensions that are above Location level in the item's hierarchy
    /// </summary>
    /// <param name="_inventDim1">
    /// The first <c>InventDim</c> table buffer to compare.
    /// </param>
    /// <param name="_inventDim2">
    /// The second <c>InventDim</c> table buffer to compare.
    /// </param>
    /// <param name="_itemId">
    /// The Id of the item used to find the dimension hierarchy
    /// </param>
    /// <returns>
    /// true if all dimension fields above location in the hierarchy have identical values; otherwise, false.
    /// </returns>
    static public boolean isInventDimEqualWHSNonWork(
        InventDim _inventDim1,
        InventDim _inventDim2,
        ItemId    _itemId)
    {
        List    hierarchyList;
        List    fieldIdList;

        hierarchyList = WHSReservationHierarchyProvider::construct()
                        .getDimListAboveLocationFromInventTable(
                            InventTable::find(_itemId),
                            WHSReservationHierarchySortOrder::TopDown);
        fieldIdList = WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(hierarchyList);

        return InventDim::isInventDimEqual(_inventDim1, _inventDim2, fieldIdList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimFixedEqual</Name>
				<Source><![CDATA[
    static public boolean isInventDimFixedEqual(
        InventDim       _inventDimRequired,
        InventDim       _inventDimRequested,
        InventDimFixed  _inventDimFixed,
        boolean         _info = true)
    {
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDimFixed(_inventDimFixed);

        return InventDim::isInventDimParmEqual(_inventDimRequired, _inventDimRequested, inventDimParm, _info);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimParmEqual</Name>
				<Source><![CDATA[
    static public boolean isInventDimParmEqual(
        InventDim       _inventDimRequired,
        InventDim       _inventDimRequested,
        InventDimParm   _inventDimParm,
        boolean         _info = true)
    {
        boolean         ok                      = true;
        ListEnumerator  enumerator              = InventDim::dimFieldListEnumerator();
        FieldId         inventDimFieldId;
        FieldId         inventDimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimRequired.checkInvalidFieldAccess(false);
        _inventDimRequested.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            if (_inventDimParm.(inventDimParmFieldId))
            {
                if (_inventDimRequired.(inventDimFieldId) != _inventDimRequested.(inventDimFieldId))
                {
                    ok = (_info) ? checkFailed(strFmt("@SYS58831", fieldId2pname(_inventDimRequired.TableId, inventDimFieldId), _inventDimRequired.(inventDimFieldId))) : false;
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicallyExistingInDB</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>InventDim</c> table physically exists in the database.
    /// </summary>
    /// <returns>
    ///    true if the table physically exists in the database; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The table may not yet physically exist in the database during an upgrade scenario.
    /// </remarks>
    public static boolean isPhysicallyExistingInDB()
    {
        SqlDictionary sqlDictionary;

        select firstonly RecId from sqlDictionary
            where sqlDictionary.TabId == tableNum(InventDim);

        return sqlDictionary.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOwnerCurrentLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the owner inventory dimension is the same as the current legal entity.
    /// </summary>
    /// <returns>true if the owner inventory dimension is the same as the current legal entity; otherwise, false.</returns>
    public boolean isOwnerCurrentLegalEntity()
    {
        return !this.InventOwnerId_RU
            || this.InventOwnerId_RU == InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindOrCreateInventDimInvBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>InventDim</c> record based on site, warehouse, location, and batch number.
    /// </summary>
    /// <param name="_inventSiteId">
    ///     The invent site id to search for.
    /// </param>
    /// <param name="_inventLocationId">
    ///     The invent location id to search for.
    /// </param>
    /// <param name="_wmsLocationId">
    ///     The warehouse location to search for.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The inventory batch id to search for.
    /// </param>
    /// <returns>
    ///     A <c>InventDim</c> buffer; otherwise an empty record.
    /// </returns>
    static InventDim mcrFindOrCreateInventDimInvBatch(InventSiteId _inventSiteId,
        InventLocationId _inventLocationId,
        WMSLocationId _wmsLocationId,
        InventBatchId _inventBatchId)
    {
        InventDim inventDim;

        inventDim.InventSiteId      = _inventSiteId;
        inventDim.InventLocationId  = _inventLocationId;
        inventDim.wmsLocationId     = _wmsLocationId;
        inventDim.InventBatchId     = _inventBatchId;

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product dimensions for the passed <c>InventDimId</c>.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID for which this method finds product dimensions.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> record pertaining to the passed <c>InventDimId</c>.
    /// </returns>
    static InventDim mcrGetProductDimensions(InventDimId _inventDimId)
    {
        InventDim inventDim, returningDim;

        inventDim = InventDim::find(_inventDimId);
        returningDim.InventSizeId = inventDim.InventSizeId;
        returningDim.InventColorId = inventDim.InventColorId;
		returningDim.InventVersionId = inventDim.InventVersionId;
        returningDim.ConfigId = inventDim.ConfigId;
        returningDim.InventStyleId = inventDim.InventStyleId;

        return InventDim::findOrCreate(returningDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckDimChange</Name>
				<Source><![CDATA[
    static public boolean mustCheckDimChange(
        InventDimGroupSetup         _inventDimGroupSetup,
        InventDim                   _fromInventDim,
        InventDim                   _toInventDim)
    {
        return !InventDim::isInventDimEqual(_fromInventDim, _toInventDim, _inventDimGroupSetup.activePhysicalInventoryFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseFieldPurchPriceDisc</Name>
				<Source><![CDATA[
    static public boolean mustUseFieldPurchPriceDisc(
        FieldId                             _dimFieldId,
        InventDimGroupSetup                 _inventDimGroupSetup)
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;

        inventDimGroupFieldSetup = _inventDimGroupSetup.getFieldSetup(_dimFieldId);
        if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isPurchPriceSearchEnabled())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseFieldSalesPriceDisc</Name>
				<Source><![CDATA[
    static public boolean mustUseFieldSalesPriceDisc(
        FieldId                             _dimFieldId,
        InventDimGroupSetup                 _inventDimGroupSetup)
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;

        inventDimGroupFieldSetup = _inventDimGroupSetup.getFieldSetup(_dimFieldId);
        if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isSalesPriceSearchEnabled())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDimId</Name>
				<Source><![CDATA[
    [SysObsolete('InventDimId is derived from RecId', false, 30\11\2017)]
    static public InventDimId newDimId()
    {
        return NumberSeq::newGetNum(InventParameters::numRefInventDimId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQueryInventSum</Name>
				<Source><![CDATA[
    static public Query newQueryInventSum(
        Query           _query,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventDimParm   _inventDimParmGroupBy)
    {
        QueryBuildDataSource    qbsSum;
        QueryBuildDataSource    qbsDim;
        QueryBuildRange         queryRange;

        boolean                 doFindRange;
        container               headerFields;
        container               sumFields;

        if (!_query)
        {
            _query = new Query();
        }

        if (_query.dataSourceTable(tableNum(InventDim)))
        {
            qbsDim      = _query.dataSourceTable(tableNum(InventDim));
            doFindRange = true;
        }
        else
        {
            qbsDim      = _query.addDataSource(tableNum(InventDim));
        }

        if (_query.dataSourceTable(tableNum(InventSum)))
        {
            qbsSum      = _query.dataSourceTable(tableNum(InventSum));
            doFindRange = true;
        }
        else
        {
            qbsSum = qbsDim.addDataSource(tableNum(InventSum));
        }

        if (!_inventDimParmCriteria.ClosedFlag)
        {
            qbsSum.addRange(fieldNum(InventSum,Closed)).value(queryValue(NoYes::No));
        }

        qbsSum.joinMode(JoinMode::InnerJoin);
        qbsSum.relations(true);

        InventSum::queryAddSumFields(qbsSum);

        headerFields = InventDim::getHeaderFields(qbsDim);
        sumFields    = InventDim::getSumFields(qbsDim);
        qbsDim.sortClear();
        InventDim::queryDatasourceAddRangeSortFromParms(qbsDim,doFindRange,_inventDimCriteria,_inventDimParmCriteria,_inventDimParmGroupBy);
        InventDim::setHeaderFields(qbsDim,headerFields);
        InventDim::setSumFields(qbsDim,sumFields);

        if (_inventDimParmCriteria.ItemIdFlag)
        {
            queryRange = doFindRange ? qbsSum.findRange(fieldNum(InventSum,ItemId)) : null;
            if (! queryRange)
            {
                queryRange = qbsSum.addRange(fieldNum(InventSum,ItemId));
            }

            if (_itemId)
            {
                queryRange.value(queryValue(_itemId));
            }
            else
            {
                queryRange.value(SysQuery::valueEmptyString());
            }
        }

        if (_inventDimParmGroupBy.ItemIdFlag)
        {
            qbsSum.addSortField(fieldNum(InventSum,ItemId));
            qbsSum.orderMode(OrderMode::GroupBy);
        }
        else
        {
            qbsSum.orderMode(OrderMode::OrderBy);
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddHintFromCaller</Name>
				<Source><![CDATA[
    static public boolean queryAddHintFromCaller(
        QueryBuildDataSource    _qbs,
        Args                    _callerArgs)
    {
        boolean ret = false;

        #InventDimDevelop

        switch (_callerArgs.dataset())
        {
            case(tableNum(InventBatch)):
                _qbs.addSortIndex(indexNum(InventDim,BatchIdIdx));
                _qbs.indexIsHint(true);
                ret = true;
                break;

            case(tableNum(InventSerial)):
                _qbs.addSortIndex(indexNum(InventDim,SerialIdIdx));
                _qbs.indexIsHint(true);
                ret = true;
                break;

            case(tableNum(WMSLocation)):
                _qbs.addSortIndex(indexNum(InventDim,LocationIdIdx));
                _qbs.indexIsHint(true);
                ret = true;
                break;

            // <GEERU>
            case(tableNum(InventProfile_RU)):
                _qbs.addSortIndex(indexNum(InventDim, InventProfileIdx_RU));
                _qbs.indexIsHint(true);
                ret = true;
                break;

            case(tableNum(InventOwner_RU)):
                _qbs.addSortIndex(indexNum(InventDim, InventOwnerIdx_RU));
                _qbs.indexIsHint(true);
                ret = true;
                break;

            case(tableNum(InventGTD_RU)):
                _qbs.addSortIndex(indexNum(InventDim, GTDIdIdx_RU));
                _qbs.indexIsHint(true);
                ret = true;
                break;
            // </GEERU>

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to an inventDim datasource based on the values in the inventDim criteria.
    /// </summary>
    /// <param name="_dsInventDim">
    /// The InventDim datasource.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventDim criteria that will be set as ranges on the data source.
    /// </param>
    /// <remarks>
    /// Ranges will only be added for non-empty inventory dimensions.
    /// </remarks>
    static public void queryAddRange(
        QueryBuildDataSource    _dsInventDim,
        InventDim               _inventDimCriteria)
    {
        ListEnumerator      enumerator = InventDim::dimFieldsList().getEnumerator();
        FieldId             inventDimFieldId;
        QueryBuildRange     queryRange;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            if (_inventDimCriteria.(inventDimFieldId))
            {
                queryRange = SysQuery::findOrCreateRange(_dsInventDim, inventDimFieldId);
                queryRange.value(queryValue(_inventDimCriteria.(inventDimFieldId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeForProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges for the product dimensions to a query.
    /// </summary>
    /// <param name = "_inventDimDataSource">The query datasource for the <c>InventDim</c> table.</param>
    /// <param name = "_inventDim">The InventDim with the values.</param>
    static public void queryAddRangeForProductDimensions(QueryBuildDataSource _inventDimDataSource, InventDim _inventDim)
    {
        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimFieldId();
            _inventDimDataSource.addRange(fieldId).value(queryValue(_inventDim.(fieldId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddLinkForProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges for the product dimensions to a query.
    /// </summary>
    /// <param name = "_inventDimDataSourceMain">The main query datasource for the <c>InventDim</c> table that the link will be added to.</param>
    /// <param name = "_inventDimDataSourceJoined">The query datasource for the <c>InventDim</c> table to be joined.</param>
    static public void queryAddLinkForProductDimensions(QueryBuildDataSource _inventDimDataSourceMain, QueryBuildDataSource _inventDimDataSourceJoined)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            FieldId fieldId = productDim.parmInventDimFieldId();
            
            _inventDimDataSourceMain.addLink(fieldId, fieldId, _inventDimDataSourceJoined.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeAndValueProductDim</Name>
				<Source><![CDATA[
    static public void queryAddRangeAndValueProductDim(
        QueryBuildDataSource            _qbs,
        InventDim                       _inventDim,
        EcoResProductDimGroupSetup      _productDimGroupSetup,
        boolean                         _throwErrorIfBlank = true)
    {
        List            dimFields   = _productDimGroupSetup.activeDimensionFields();
        ListEnumerator  enumerator  = dimFields.getEnumerator();
        FieldId         inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            if (!_inventDim.(inventDimFieldId))
            {
                if (_throwErrorIfBlank)
                {
                    throw error(strFmt("@SYS54774",fieldId2pname(_inventDim.TableId, inventDimFieldId)));
                }
            }
            else
            {
                _qbs.addRange(inventDimFieldId).value(queryValue(_inventDim.(inventDimFieldId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to an inventDim datasource based on the values in the inventDim criteria.
    /// </summary>
    /// <param name="_qbsDim">
    /// The InventDim datasource.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventDim criteria that will be set as ranges on the data source.
    /// </param>
    /// <param name="_dimFields">
    /// List of inventory dimensions fields to loop over.
    /// </param>
    /// <param name="_includeEmptyValue">
    /// Allows the range to be equal to the criteria or not specified.
    /// </param>
    static public void queryAddRangeCriteria(
        QueryBuildDataSource    _qbsDim,
        InventDim               _inventDimCriteria,
        List                    _dimFields = InventDim::dimFieldsList(),
        boolean                 _includeEmptyValue = false)
    {
        ListEnumerator      enumerator = _dimFields.getEnumerator();
        FieldId             inventDimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            InventDim::queryAddRangeDimension(_qbsDim, _inventDimCriteria, inventDimFieldId, inventDimFieldId, _includeEmptyValue);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeDimension</Name>
				<Source><![CDATA[
    private static void queryAddRangeDimension(
        QueryBuildDataSource    _qbds,
        InventDim               _inventDimCriteria,
        FieldId                 _dataSourceFieldId,
        FieldId                 _criteriaFieldId,
        boolean                 _includeEmptyValue)
    {
        QueryBuildRange queryRange = SysQuery::findOrCreateRange(_qbds, _dataSourceFieldId);

        if (_inventDimCriteria.(_criteriaFieldId))
        {
            if (_includeEmptyValue)
            {
                queryRange.value(queryRangeConcat(queryValue(InventDim::emptyDimField(_criteriaFieldId)), _inventDimCriteria.(_criteriaFieldId)));
            }
            else
            {
                queryRange.value(queryValue(_inventDimCriteria.(_criteriaFieldId)));
            }

            queryRange.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRangeDimension</Name>
				<Source><![CDATA[
    private static SysDaQueryExpression buildRangeDimension(
        Common                  _table,
        InventDim               _inventDimCriteria,
        str                     _fieldName,
        FieldId                 _criteriaFieldId,
        boolean                 _includeEmptyValue)
    {
        SysDaQueryExpression result;

        if (_inventDimCriteria.(_criteriaFieldId))
        {
             if (_includeEmptyValue)
             {
                 result = new SysDaOrExpression(
                     new SysDaEqualsExpression(
                        new SysDaFieldExpression(_table, _fieldName),
                        new SysDaValueExpression(_inventDimCriteria.(_criteriaFieldId))),
                     new SysDaEqualsExpression(
                        new SysDaFieldExpression(_table, _fieldName),
                        new SysDaValueExpression(InventDim::emptyDimField(_criteriaFieldId))));
             }
             else
             {
                 result = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_table, _fieldName),
                        new SysDaValueExpression(_inventDimCriteria.(_criteriaFieldId)));
             }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRangeCriteriaToTableWithDimFields</Name>
				<Source><![CDATA[
    internal static SysDaBinaryExpression buildRangeCriteriaToTableWithDimFields(
        Common    _table,
        InventDim _inventDimCriteria,
        List      _dimFields,
        boolean   _includeEmptyValue)
    {
        SysDaBinaryExpression result;

        ListEnumerator        enumerator = _dimFields.getEnumerator();
        FieldId               dataSourceFieldId, criteriaFieldId;

        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            criteriaFieldId = enumerator.current();
            dataSourceFieldId = InventDim::getSourceFieldIdFromInventDimFieldId(_table.TableId, criteriaFieldId);
            str fieldName = fieldId2Name(_table.TableId, dataSourceFieldId);

            if (result)
            {
                SysDaBinaryExpression tmpResult = InventDim::buildRangeDimension(_table, _inventDimCriteria, fieldName, criteriaFieldId, _includeEmptyValue);

                if (tmpResult)
                {
                    result = result.and(tmpResult);
                }
            }
            else
            {
                result = InventDim::buildRangeDimension(_table, _inventDimCriteria, fieldName, criteriaFieldId, _includeEmptyValue);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRangeCriteriaToTableWithDimFieldsFromProductDimensions</Name>
				<Source><![CDATA[
    internal static SysDaBinaryExpression buildRangeCriteriaToTableWithDimFieldsFromProductDimensions(
        Common    _table,
        InventDim _inventDimCriteria,
        boolean   _includeEmptyValue)
    {
        SysDaBinaryExpression result;

        _inventDimCriteria.checkInvalidFieldAccess(false);

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            
            FieldId tableFieldId = productDimension ? productDimension.fieldIdInTable(tableId2Name(_table.TableId)) : 0;

            if (tableFieldId)
            {
                FieldId criteriaFieldId = productDimension.parmInventDimFieldId();

                str fieldName = fieldId2Name(_table.TableId, tableFieldId);

                if (result)
                {
                    SysDaBinaryExpression tmpResult = InventDim::buildRangeDimension(_table, _inventDimCriteria, fieldName, criteriaFieldId, _includeEmptyValue);

                    if (tmpResult)
                    {
                        result = result.and(tmpResult);
                    }
                }
                else
                {
                    result = InventDim::buildRangeDimension(_table, _inventDimCriteria, fieldName, criteriaFieldId, _includeEmptyValue);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeCriteriaToTableWithDimFields</Name>
				<Source><![CDATA[
    internal static void queryAddRangeCriteriaToTableWithDimFields(
        QueryBuildDataSource    _qbds,
        InventDim               _inventDimCriteria,
        List                    _dimFields,
        boolean                 _includeEmptyValue)
    {
        ListEnumerator      enumerator = _dimFields.getEnumerator();
        TableId             dataSourceTableId = _qbds.table();
        FieldId             dataSourceFieldId, criteriaFieldId;

        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            criteriaFieldId = enumerator.current();
            dataSourceFieldId = InventDim::getSourceFieldIdFromInventDimFieldId(dataSourceTableId, criteriaFieldId);
            
            InventDim::queryAddRangeDimension(_qbds, _inventDimCriteria, dataSourceFieldId, criteriaFieldId, _includeEmptyValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceFieldIdFromInventDimFieldId</Name>
				<Source><![CDATA[
    internal static FieldId getSourceFieldIdFromInventDimFieldId(TableId _targetTableId, FieldId _inventDimFieldId)
    {
        switch (_targetTableId)
        {
            case tableNum(InventSum): 
                return InventDim::getInventSumFieldIdFromInventDimFieldId(_inventDimFieldId);

            case tableNum(InventSumDelta): 
                return InventDim::getInventSumDeltaFieldIdFromInventDimFieldId(_inventDimFieldId);

            case tableNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty): 
                return InventDim::getInventSumInventDimUnionDeltaInventDimPhysicalQtyFieldIdFromInventDimFieldId(_inventDimFieldId);
        }
        
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeCriteriaRequireParmLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Ranges to an InventDim datasource so that inventDimCriteria must match and inventDimParm flags determine if other dime fields must be either blank or not blank.
    /// </summary>
    /// <param name="_qbsDim">
    /// The InventDim datasource.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventDim criteria that will be set as ranges on the data source.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> record.
    /// Checked flags will create not blank ranges on the corresponding  dim fields.
    /// Unchecked flags will create blank ranges on the corresponding  dim fields.
    /// </param>
    /// <param name="_dimFields">
    /// List of inventory dimensions fields to loop over.
    /// </param>
    /// <param name="_curRangesDS">
    /// The InventDim datasource which holds current ranges to be kept.
    /// </param>
    static public void queryAddRangeCriteriaRequireParmLevel(
        QueryBuildDataSource    _qbsDim,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm,
        List                    _dimFields = InventDim::dimFieldsList(),
        QueryBuildDataSource    _curRangesDS = null)
    {
        ListEnumerator      enumerator = _dimFields.getEnumerator();
        FieldId             inventDimFieldId;
        FieldId             inventDimParmFieldId;
        QueryBuildRange     queryRange;
        QueryBuildRange     currentRange;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            queryRange = SysQuery::findOrCreateRange(_qbsDim, inventDimFieldId);

            if (_inventDimCriteria.(inventDimFieldId))
            {
                queryRange.value(queryValue(_inventDimCriteria.(inventDimFieldId)));
                queryRange.status(RangeStatus::Locked);
            }
            else if (_inventDimParm.(inventDimParmFieldId))
            {
                if (WhsReservationHierarchyInventDimUtil::isFieldAllowedBlankInMiddleOfHierarchy(inventDimFieldId))
                {
                    if (_curRangesDS)
                    {
                        currentRange = _curRangesDS.findRange(inventDimFieldId);
                        if (currentRange && currentRange.value() != SysQuery::valueUnlimited())
                        {
                            queryRange.value(currentRange.value());
                        }
                        else if (!currentRange)
                        {
                            queryRange.value(SysQuery::valueUnlimited());
                        }
                    }
                    else
                    {
                        queryRange.value(SysQuery::valueUnlimited());
                    }
                }
                else
                {
                    if (_curRangesDS)
                    {
                        currentRange = _curRangesDS.findRange(inventDimFieldId);
                        if (currentRange && !strContains(currentRange.value(), SysQuery::valueNotEmptyString()))
                        {
                            queryRange.value(currentRange.value() + ', ' + SysQuery::valueNotEmptyString());
                        }
                        else if (!currentRange)
                        {
                            queryRange.value(SysQuery::valueNotEmptyString());
                        }
                    }
                    else
                    {
                        queryRange.value(SysQuery::valueNotEmptyString());
                    }
                }
                queryRange.status(RangeStatus::Open);
            }
            else
            {
                queryRange.value(SysQuery::valueEmptyString());
                queryRange.status(RangeStatus::Hidden);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeFromCaller</Name>
				<Source><![CDATA[
    static public void queryAddRangeFromCaller(
        QueryBuildDataSource    _qbs,
        Args                    _callerArgs)
    {
        InventDimParm           inventDimParm;
        Object                  callerForm;
        InventDimCtrl_Frm       callerInventDimFormSetup;

        switch (_callerArgs.dataset())
        {
            case(tableNum(InventTrans)):
            case(tableNum(InventTransArchive)):

                callerForm                  = _callerArgs.caller();
                if (InventDimParm::inventDimFormRightClick(callerForm))
                {
                    callerInventDimFormSetup    = callerForm.inventDimSetupObject();
                    inventDimParm = callerInventDimFormSetup.parmDimParmVisibleGrid();
                    inventDimParm.queryAddRange(_qbs, InventDim::callerInventDimDatasource(_callerArgs).cursor() as InventDim);
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeFromCallerSort</Name>
				<Source><![CDATA[
    static public void queryAddRangeFromCallerSort(
        QueryBuildDataSource    _qbs,
        Args                    _callerArgs,
        boolean                 _addSortField = false)
    {
        FormDataSource          callerDS;
        Query                   callerQuery;
        boolean                 doGroupBy;
        FieldId                 inventDimFieldId;
        InventDim               inventDimCaller;
        List                    fieldList;
        ListEnumerator          fieldListEnumerator;

        callerDS     = InventDim::callerInventDimDatasource(_callerArgs);
        if (!callerDS)
        {
            return;
        }

        inventDimCaller = callerDS.cursor() as InventDim;
        callerQuery     = callerDS.query();

        _qbs.clearRanges();
        _qbs.sortClear();

        fieldList = InventDim::queryGetSortAndGroupByFields(callerQuery, true);
        fieldListEnumerator = fieldList.getEnumerator();

        while (fieldListEnumerator.moveNext())
        {
            inventDimFieldId = fieldListEnumerator.current();

            if (inventDimCaller.(inventDimFieldId))
            {
                _qbs.addRange(inventDimFieldId).value(queryValue(inventDimCaller.(inventDimFieldId)));

                if (_addSortField)
                {
                    _qbs.addSortField(inventDimFieldId);
                    doGroupBy = true;
                }
            }
            else
            {
                _qbs.addRange(inventDimFieldId).value(SysQuery::valueUnlimited());
            }
        }

        if (doGroupBy)
        {
            _qbs.orderMode(OrderMode::GroupBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeFromDSSort</Name>
				<Source><![CDATA[
    static public void queryAddRangeFromDSSort(
        QueryBuildDataSource    _qbs,
        FormDataSource          _ds,
        boolean                 _addSortField = false)
    {
        Query                   dsQuery;
        boolean                 doGroupBy;
        FieldId                 inventDimFieldId;
        InventDim               inventDimDS;
        List                    fieldList;
        ListEnumerator          fieldListEnumerator;

        inventDimDS = _ds.cursor() as InventDim;
        dsQuery     = _ds.query();

        _qbs.clearRanges();
        _qbs.sortClear();

        fieldList = InventDim::queryGetSortAndGroupByFields(dsQuery, false);
        fieldListEnumerator = fieldList.getEnumerator();

        while (fieldListEnumerator.moveNext())
        {
            inventDimFieldId = fieldListEnumerator.current();
            if (inventDimDS.(inventDimFieldId))
            {
                _qbs.addRange(inventDimFieldId).value(queryValue(inventDimDS.(inventDimFieldId)));

                if (_addSortField)
                {
                    _qbs.addSortField(inventDimFieldId);
                    doGroupBy = true;
                }
            }
            else
            {
                _qbs.addRange(inventDimFieldId).value(SysQuery::valueEmptyString());
            }
        }

        if (doGroupBy)
        {
            _qbs.orderMode(OrderMode::GroupBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeCriteriaForSelectedDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds up the query range conditions for <c>InventDim</c> fields based on the provided criteria record.
    /// </summary>
    /// <param name = "_qbdsInventDim">A <c>QueryBuildDataSource</c> instance for <c>InventDim</c> table.</param>
    /// <param name = "_inventDimCriteria">An <c>InventDim</c> record that contains the range values to apply.</param>
    /// <param name = "_inventDimParm">An <c>InventDimParm</c> record that contains the selection of dimensions to apply ranges to.</param>
    static public void queryAddRangeCriteriaForSelectedDims(QueryBuildDataSource _qbdsInventDim, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);
        _inventDimParm.checkInvalidFieldAccess(false);

        Enumerator enumerator = _inventDimParm.selectedDimFields().getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            QueryBuildRange queryRange = SysQuery::findOrCreateRange(_qbdsInventDim, inventDimFieldId);
            queryRange.value(queryValue(_inventDimCriteria.(inventDimFieldId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeCriteriaDimFieldsNotBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds up the query range conditions for <c>InventDim</c> to check if any of the passed fields are set.
    /// </summary>
    /// <param name = "_qbdsInventDim">A <c>QueryBuildDataSource</c> instance for <c>InventDim</c> table.</param>
    /// <param name = "_dimFields">A <c>Set</c> of inventory dimension fields to use for the range.</param>
    public static void queryAddRangeCriteriaDimFieldsNotBlank(QueryBuildDataSource _qbdsInventDim, Set _dimFields)
    {
        str queryRangeStr;
        SetEnumerator invDimSetEnumerator = _dimFields.getEnumerator();

        while (invDimSetEnumerator.moveNext())
        {
            FieldId inventDimFieldId = invDimSetEnumerator.current();

            if (queryRangeStr)
            {
                queryRangeStr += ' || ';
            }

            anytype emptyDimField = InventDim::emptyDimField(inventDimFieldId);
            queryRangeStr += strfmt('(%1 != %2)', fieldId2Name(tableNum(InventDim), inventDimFieldId), queryValue(emptyDimField));
        }

        if (queryRangeStr)
        {
            _qbdsInventDim.addRange(fieldnum(InventDim, RecId)).value(queryRangeStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSortFinancialInvent</Name>
				<Source><![CDATA[
    static public void queryAddSortFinancialInvent(
        InventDimGroupSetup             _inventDimGroupSetup,
        QueryBuildDataSource            _qbS)
    {
        List            dimFields = _inventDimGroupSetup.activeFinancialInventoryFields();
        ListEnumerator  enumerator = dimFields.getEnumerator();
        FieldId         inventDimFieldId;
        boolean         doGroupBy;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            _qbS.addSortField(inventDimFieldId);

            doGroupBy = true;
        }

        if (doGroupBy)
        {
            _qbS.orderMode(OrderMode::GroupBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSortFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds order by fields to a query over <c>InventDim</c> table.
    /// </summary>
    /// <param name = "_qbdsInventDim">The Inventory dimensions query build data source to modify.</param>
    /// <param name = "_dimFields">The list of inventory dimensions to order by.</param>
    static public void queryAddSortFields(QueryBuildDataSource _qbdsInventDim, List _dimFields)
    {
        ListEnumerator  enumerator = _dimFields.getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            _qbdsInventDim.addSortField(inventDimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSelectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds dimension fields to the selection list of a query over <c>InventDim</c> table.
    /// </summary>
    /// <param name = "_qbdsInventDim">The Inventory dimensions query build data source to modify.</param>
    /// <param name = "_dimFields">The list of inventory dimensions to select from the data source.</param>
    public static void queryAddSelectionFields(QueryBuildDataSource _qbdsInventDim, List _dimFields)
    {
        ListEnumerator  enumerator = _dimFields.getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            _qbdsInventDim.addSelectionField(inventDimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSortFromCaller</Name>
				<Source><![CDATA[
    static public void queryAddSortFromCaller(
        QueryBuildDataSource    _qbs,
        Args                    _callerArgs,
        boolean                 _doGroupBy = true)
    {
        Counter                 h;
        FormDataSource          callerDS;
        Query                   callerQuery;
        QueryBuildDataSource    callerQbs;
        boolean                 doGroupBy;
        FieldId                 inventDimFieldId;
        InventDim               inventDimCaller;

        callerDS     = InventDim::callerInventDimDatasource(_callerArgs);
        if (!callerDS)
        {
            return;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        inventDimCaller.checkInvalidFieldAccess(false);

        inventDimCaller = callerDS.cursor() as InventDim;
        callerQuery     = callerDS.query();
        callerQbs       = callerQuery.dataSourceTable(tableNum(InventDim));

        _qbs.clearRanges();
        _qbs.sortClear();

        for (h=1; h <= callerQbs.sortFieldCount(); h++)
        {
            inventDimFieldId = callerQbs.sortField(h);
            if (inventDimCaller.(inventDimFieldId))
            {
                _qbs.addSortField(inventDimFieldId);
                doGroupBy = true;
            }
        }

        if (doGroupBy && _doGroupBy)
        {
            _qbs.orderMode(OrderMode::GroupBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDatasourceAddRangeSortFromParms</Name>
				<Source><![CDATA[
    static public void queryDatasourceAddRangeSortFromParms(
        QueryBuildDataSource    _qbsDim,
        boolean                 _doFindRange,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParmCriteria,
        InventDimParm           _inventDimParmGroupBy,
        List                    _dimFields = InventDim::dimFieldsList())
    {
        InventDim::queryDatasourceAddRangeSortFromParmsWithInventSum(_qbsDim, _doFindRange, _inventDimCriteria, _inventDimParmCriteria, _inventDimParmGroupBy, _dimFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDatasourceAddRangeSortFromParmsWithInventSum</Name>
				<Source><![CDATA[
    static internal void queryDatasourceAddRangeSortFromParmsWithInventSum(
        QueryBuildDataSource    _qbsDim,
        boolean                 _doFindRange,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParmCriteria,
        InventDimParm           _inventDimParmGroupBy,
        List                    _dimFields,
        QueryBuildDataSource    _qbsSum = null)
    {
        ListEnumerator      enumerator = _dimFields.getEnumerator();
        FieldId             inventDimFieldId;
        FieldId             inventDimParmFieldId;
        QueryBuildRange     queryRange;
        boolean             doGroupByDim;

        boolean             mustInventReserveByDateForInventoryOwner;

        InventReserveByDateForInventoryOwnerContext context = InventReserveByDateForInventoryOwnerContext::current();
        if (context != null && context.inventReserveByDateForInventoryOwner)
        {
            mustInventReserveByDateForInventoryOwner = true;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (_inventDimParmCriteria.(inventDimParmFieldId))
            {
                queryRange = _doFindRange ? _qbsDim.findRange(inventDimFieldId) : null;
                if (! queryRange)
                {
                    queryRange = _qbsDim.addRange(inventDimFieldId);
                }

                str queryValue = _inventDimCriteria.(inventDimFieldId) ? queryValue(_inventDimCriteria.(inventDimFieldId)) : SysQuery::valueEmptyString();

                if (_qbsSum)
                {
                    FieldId inventSumFieldId = InventDim::getInventSumFieldIdFromInventDimFieldId(inventDimFieldId);
                    QueryBuildRange inventSumQueryRange = _qbsSum.addRange(inventSumFieldId);
                    inventSumQueryRange.value(queryValue);
                }
                else
                {
                    queryRange.value(queryValue);
                }
            }

            if (_inventDimParmGroupBy.(inventDimParmFieldId))
            {
                doGroupByDim = true;
                if (!mustInventReserveByDateForInventoryOwner)
                {
                    _qbsDim.addSortField(inventDimFieldId);
                }
                else
                {
                    _qbsDim.addGroupByField(inventDimFieldId);
                }
            }
        }

        if (!mustInventReserveByDateForInventoryOwner)
        {
            if (doGroupByDim)
            {
                _qbsDim.orderMode(OrderMode::GroupBy);
            }
            else
            {
                _qbsDim.orderMode(OrderMode::OrderBy);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetSortAndGroupByFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list of fields being sorted and grouped by in the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query to examine.
    /// </param>
    /// <param name="_includeGroupByFields">
    ///    true if <c>GroupByFields</c> at the query level should be examined too.
    /// </param>
    /// <returns>
    ///    A list of field IDs.
    /// </returns>
    static private List queryGetSortAndGroupByFields(
        Query                   _query,
        boolean                 _includeGroupByFields
    )
    {
        QueryBuildDataSource    qbsDim = _query.dataSourceTable(tableNum(InventDim));
        Counter                 h;
        FieldId                 inventDimFieldId;
        QueryGroupByField       groupByField;
        List                    fieldList = new List(Types::Integer);

        for (h = 1; h <= qbsDim.sortFieldCount(); h++)
        {
            inventDimFieldId = qbsDim.sortField(h);
            fieldList.addEnd(inventDimFieldId);
        }

        if (_includeGroupByFields)
        {
            for (h = 1; h <= _query.groupByFieldCount(); h++)
            {
                groupByField = _query.groupByField(h);
                if (groupByField.tableSelector() == tableNum(InventDim))
                {
                    inventDimFieldId = groupByField.fieldID();
                    fieldList.addEnd(inventDimFieldId);
                }
            }
        }
        return fieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGroupByInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds grouping by inventory dimensions fields specified in the inventDimParm.
    /// </summary>
    /// <param name="_qbsDim">
    /// The InventDim datasource.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventDimParm representing fields that should and shouldn't be grouped.
    /// </param>
    static public void queryGroupByInventDimParm(
        QueryBuildDataSource    _qbsDim,
        InventDimParm           _inventDimParm)
    {
        ListEnumerator      enumerator = InventDim::dimFieldListEnumerator();
        FieldId             inventDimFieldId;
        FieldId             inventDimParmFieldId;

        // Clear existing sort/group fields.
        _qbsDim.sortClear();

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (_inventDimParm.(inventDimParmFieldId))
            {
                _qbsDim.addSortField(inventDimFieldId);
            }
        }

        _qbsDim.orderMode(OrderMode::GroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDimFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a list that has the specified elements in reverse order.
    /// </summary>
    /// <param name="_list">
    ///    The list to reverse.
    /// </param>
    /// <returns>
    ///    A list that has the specified elements in reverse order.
    /// </returns>
    static public List reverseDimFieldsList(List  _list)
    {
        List            newList     = new List(Types::Integer);
        ListEnumerator  enumerator  = _list.getEnumerator();

        while (enumerator.moveNext())
        {
            newList.addStart(enumerator.current());
        }

        return newList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderFields</Name>
				<Source><![CDATA[
    static public void setHeaderFields(
        QueryBuildDataSource    _qbd,
        container               _headerFields)
    {
        Counter     h;

        for (h=1; h <= _qbd.sortFieldCount(); h++)
        {
            if (conFind(_headerFields, _qbd.sortField(h)))
            {
                _qbd.autoHeader(h,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSumFields</Name>
				<Source><![CDATA[
    static public void setSumFields(
        QueryBuildDataSource    _qbd,
        container               _sumFields)
    {
        Counter     h;

        for (h=1; h <= _qbd.sortFieldCount(); h++)
        {
            if (conFind(_sumFields, _qbd.sortField(h)))
            {
                _qbd.autoSum(h,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startUpCreateBlank</Name>
				<Source><![CDATA[
    static public void startUpCreateBlank()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            return;
        }

        InventDim::findOrCreateBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>systemHasMultipleProductDimensions</Name>
				<Source><![CDATA[
    static public boolean systemHasMultipleProductDimensions()
    {
        return InventDimMetaDataCache::systemHasMultipleProductDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimCombinationValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>InventDimCombination</c> is valid.
    /// </summary>
    /// <param name = "_inventTable">
    /// <c>InventTable</c> record for which validation should be done.
    /// </param>
    /// <param name = "_productDimSetup">
    /// The product dimension setup for the item.
    /// </param>
    /// <returns>
    /// True if the combination is valid; otherwise, false.
    /// </returns>
    public boolean isInventDimCombinationValid(InventTable _inventTable, EcoResProductDimGroupSetup _productDimSetup)
    {
        return this.validateInventDimCombination(_inventTable, _productDimSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDimCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>InventDimCombination</c> for an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <param name = "_productDimSetup">The product dimension setup for the item.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    protected boolean validateInventDimCombination(InventTable _inventTable, EcoResProductDimGroupSetup _productDimSetup)
    {
        if (this.mustCheckInventDimCombination(_productDimSetup))
        {
            return InventDimCombination::existByInventDim(_inventTable.ItemId, this);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldCombination</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal boolean validateFieldCombination(
        FormObjectSet   _dimDataSource,
        InventTable     _inventTable)
    {
        if (!_dimDataSource || !_inventTable.RecId)
        {
            return true;
        }

        InventDim inventDim = _dimDataSource.cursor() as InventDim;
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        inventDim.checkInvalidFieldAccess(false);

        EcoResProductDimGroupSetup productDimSetup = EcoResProductDimGroupSetup::newItemId(_inventTable.ItemId);

        if (inventDim.validateInventDimCombination(_inventTable, productDimSetup))
        {
            return true;
        }

        return checkFailed(strFmt("@SYS73899", inventDim.preFixProductDim(productDimSetup), _inventTable.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyProductDimensionSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether only product dimensions are specified.
    /// </summary>
    /// <returns>
    /// true if only product dimensions are specified; otherwise, false
    /// </returns>
    public boolean onlyProductDimensionSpecified()
    {
        ListEnumerator  enumerator;

        if (!this.anyProductDimensionSpecified())
        {
            return false;
        }

        enumerator = InventDimMetaDataCache::dimStorageDimEnabledFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            if (this.(enumerator.current()))
            {
                return false;
            }
        }

        enumerator = InventDimMetaDataCache::dimTrackingDimEnabledFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            if (this.(enumerator.current()))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areProductVariantsDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies if two product dimensions are different.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    ///     InventDimId value representing the product dimensions to test.
    /// </param>
    /// <param name="_otherInventDimId">
    ///     InventDimId value representing the product dimensions to test against the first parameter.
    /// </param>
    /// <returns>
    ///     True the two <c>InventDim</c> records are different on the product dimensions; otherwise, false.
    /// </returns>
    public static boolean areProductVariantsDifferent(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventDimId _otherInventDimId)
    {
        InventDim       inventDim;
        InventDim       otherInventDim;
        InventDimParm   inventDimParmProduct;
        InventTable     inventTable;
        boolean         ret = false;

        if (_inventDimId == _otherInventDimId)
        {
            return false;
        }

        inventTable = InventTable::find(_itemId);

        inventDimParmProduct = inventTable.inventDimParmProductDimensions();
        inventDim            = InventDim::find(_inventDimId);
        otherInventDim       = inventDim::find(_otherInventDimId);

        if (!InventDim::isInventDimParmEqual(inventDim, otherInventDim, inventDimParmProduct, false))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindOrCreateInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds (or Creates) the InventDim record for the given item details
    /// </summary>
    /// <param name="_itemInfo">
    /// Item info
    /// </param>
    /// <returns>
    /// InventDim record
    /// </returns>
    /// <remarks>
    /// Finds an InventDim record if it exists, or creates a new one, using the given item and location details.
    /// </remarks>
    public static InventDim FindOrCreateInventDim(Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ItemInfo _itemInfo)
    {
        InventDim       inventDim;
        InventLocation  inventLocationRec;
        InventLocation  currentInventLocation;

        InventDimCombination                inventDimCombination;
        InventDimGroupFieldSetupEnumerator  inventDimfieldSetupEnumerator;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        FieldId                             inventDimFieldId;

        inventDim.clear();
        inventDim.InventLocationId = _itemInfo.WarehouseId;
        inventDim.initFromInventLocation(inventDim.inventLocation());

        if (inventDim.InventLocationId)
        {
            currentInventLocation = InventLocation::find(inventDim.InventLocationId);
            inventDim.InventSiteId = currentInventLocation.InventSiteId;
            inventLocationRec = currentInventLocation;
        }

        inventDim.InventBatchId = _itemInfo.BatchId;
        inventDim.InventSerialId = _itemInfo.SerialId;

        if (_itemInfo.VariantId)
        {
            inventDimCombination = InventDimCombination::findVariantId(_itemInfo.VariantId);
            inventDim.InventDimFieldsMap::initProductDimensionsFrom(inventDimCombination.inventDim());
        }
        else
        {
            // Try extract InventDim from xmlRecord.
            RetailTransactionService::updateInventDimValues(inventDim, _itemInfo);
        }

        inventDimfieldSetupEnumerator = InventDimGroupSetup::newItemId(_itemInfo.ItemId).getFieldSetupEnumerator();
        while (inventDimfieldSetupEnumerator.moveNext())
        {
            inventDimGroupFieldSetup = inventDimfieldSetupEnumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive() && !inventDimGroupFieldSetup.isProductDimension())
            {
                if (inventDimFieldId == fieldNum(InventDim, wmsLocationId))
                {
                    RetailWHSHandler::updateItemInventDimLocationV2(_itemInfo.ItemId,
                                                                    inventDim,
                                                                    _itemInfo.Quantity > 0 ? InventDirection::Issue : InventDirection::Receipt,
                                                                    ReflectionHelper::getObjectProperty(_itemInfo, 'WmsLocationId'));
                }

                // Adding InventStatusId here since it is also used in post inventory.
                if (inventDimFieldId == fieldNum(InventDim, InventStatusId) && !inventDim.InventStatusId)
                {
                    inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim);
                }

                // <GEERU>
                if (inventDimFieldId == fieldNum(InventDim, InventProfileId_RU))
                {
                    inventDim.InventProfileId_RU = inventLocationRec.RBODefaultInventProfileId_RU;
                }
                // </GEERU>
            }
        }

        inventDim = InventDim::findOrCreate(inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory owner dimension field to a new value.
    /// </summary>
    /// <param name = "_item">The item for which the current inventory dimensions are used.</param>
    /// <param name = "_ownerId">The owner ID to set; optional. If not provided, the current legal entity owner will be used.</param>
    public void setInventoryOwner(InventTable _item, InventOwnerId _ownerId = '')
    {
        #ISOCountryRegionCodes

        if ((_ownerId == ''
            || this.InventOwnerId_RU != _ownerId)
            && _item.isItemInventoryOwnerActivated()
            && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])) // in a Russian context, other rules for setting the Owner apply
        {
            _ownerId = _ownerId != '' ? _ownerId : InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
            this.InventOwnerId_RU = _ownerId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryOwnerItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory owner dimension field to a new value.
    /// </summary>
    /// <param name = "_item">The ID of the item for which the current inventory dimensions are used.</param>
    /// <param name = "_ownerId">The owner ID to set; optional. If not provided, the current legal entity owner will be used.</param>
    public void setInventoryOwnerItemId(ItemId _itemId, InventOwnerId _ownerId = '')
    {
        if (_itemId)
        {
            this.setInventoryOwner(InventTable::find(_itemId), _ownerId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryOwnerByMovement</Name>
				<Source><![CDATA[
    internal void setInventoryOwnerByMovement(InventMovement _movement)
    {
        if (_movement.inventTable().whsItemInventoryOwnershipEnabled())
        {
            this.setInventoryOwnerItemId(_movement.itemId(), _movement.inventdim().InventOwnerId_RU);
        }
        else
        {
            this.setInventoryOwnerItemId(_movement.itemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the supplied buffer is a form data source then it will be refreshed from the db, possibly based on a new <c>InventDimId</c>.
    /// </summary>
    /// <param name = "_inventDimId">The ID of an <c>InventDim</c> record to update from; optional.</param>
    public void refreshFormDataSource(InventDimId _inventDimId = this.inventDimId)
    {
        if (this.isFormDataSource())
        {
            this.data(InventDim::find(_inventDimId));
            this.dataSource().refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteOrProductDimFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// If a product dimension field is changed the storage dimensions will be cleared, and in any case the buffer will be refreshed.
    /// </summary>
    /// <param name = "_inventDimFieldId">The Id of a field that is changed.</param>
    /// <returns>true if the field is a product dimension or site.</returns>
    public boolean siteOrProductDimFieldModified(FieldId _inventDimFieldId)
    {
        boolean isFieldProductDimension = _inventDimFieldId && InventDim::isFieldIdProductDimension(_inventDimFieldId);
        if (isFieldProductDimension)
        {
            this.clearStorageDimensions();
        }

        // Always refresh data, no matter is anything has changed
        this.data(inventDim::findOrCreate(this));

        return isFieldProductDimension || (_inventDimFieldId == fieldNum(InventDim, InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateProductInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an InventDim with only product dimension fields set from the passed parameters.
    /// </summary>
    /// <param name = "_itemId">The itemId of the current item.</param>
    /// <param name = "_inventDim">The inventDim from which we want to get an InventDim containing only product dimension fields set.</param>
    /// <returns>The InventDimId from an InventDim which has only the product dimension fields set.</returns>
    public static InventDimId findOrCreateProductInventDimId(ItemId _itemId, InventDim _inventDim)
    {
        InventDim   inventDim;

        if (!_inventDim.anyProductDimensionSpecified())
        {
            return InventDim::inventDimIdBlank();
        }

        inventDim.initFromInventDim(_inventDim);
        inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_itemId));

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsAllowPhysNeg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the inventory dimensions allow negative physical onhand.
    /// </summary>
    /// <param name = "_itemAllowPhysNeg">
    ///   A flag if the item model group allows negative physical onhand.
    /// </param>
    /// <returns>
    /// true if the item allows negative physical onhand for this <c>InventDim</c>; else false.    
    /// </returns>
    public boolean whsAllowPhysNeg(boolean _itemAllowPhysNeg)
    {
        InventLocation  warehouse = this.inventLocation();

        return    (_itemAllowPhysNeg || warehouse.RetailInventNegPhysical)
               && (!warehouse.WHSEnabled || this.wmsLocation().whsLocationProfile().AllowNegative);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimUpgradeHash3CodePendingUpgrade</Name>
				<Source><![CDATA[
    [SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
    public static boolean isInventDimUpgradeHash3CodePendingUpgrade()
    {
        InventDim                 inventDim;
        InventDimUpgradeHash3Code inventDimUpgradeHash3Code;

        select firstonly RecId from inventDimUpgradeHash3Code
            exists join inventDim
            where inventDim.inventDimId == inventDimUpgradeHash3Code.inventDimId
               && inventDim.SHA3HashHex == '';

        return inventDimUpgradeHash3Code.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimSHA3HashUpgradeFinished</Name>
				<Source><![CDATA[
    [Hookable(false),
    SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
    internal static boolean isInventDimSHA3HashUpgradeFinished()
    {
        InventDim inventDim;
        select firstonly inventDimId from inventDim where inventDim.SHA3HashHex == '';

        return inventDim.inventDimId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimParmEqualIgnoreBlanks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies if two InventDims are equal with ignoring blank values in fields.
    /// </summary>
    /// <param name="_inventDimRequired">
    ///     The first InventDim.
    /// </param>
    /// <param name="_inventDimRequested">
    ///     The second InventDim.
    /// </param>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> buffer.
    /// </param>
    /// <returns>
    ///     True the two <c>InventDim</c> records are equal; otherwise, false.
    /// </returns>
    internal static boolean isInventDimParmEqualIgnoreBlanks(InventDim _inventDimRequired, InventDim _inventDimRequested, InventDimParm  _inventDimParm)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimRequired.checkInvalidFieldAccess(false);
        _inventDimRequested.checkInvalidFieldAccess(false);

        boolean equal = true;

        ListEnumerator enumerator = InventDim::dimFieldListEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            if (_inventDimParm.(inventDimParmFieldId))
            {
                if (_inventDimRequired.(inventDimFieldId)
                    && _inventDimRequested.(inventDimFieldId)
                    && _inventDimRequired.(inventDimFieldId) != _inventDimRequested.(inventDimFieldId))
                {
                    equal = false;
                }
            }
        }

        return equal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimParmNonBlank</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current record with values from the specified <c>InventDim</c> record. 
    /// </summary>
    /// <param name="_fromInventDim">
    ///    The record from which to initialize.
    /// </param>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> buffer.
    /// </param>
    internal void initFromInventDimParmNonBlank(InventDim _fromInventDim, InventDimParm _inventDimParm)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _fromInventDim.checkInvalidFieldAccess(false);

        ListEnumerator enumerator = InventDim::dimFieldListEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            if (_fromInventDim.(inventDimFieldId)
                && _inventDimParm.(inventDimParmFieldId))
            {
                this.(inventDimFieldId) = _fromInventDim.(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldValueOnInventDimParm</Name>
				<Source><![CDATA[
    public str getInventDimFieldValueOnInventDimParm(InventDimParm _inventDimParm)
    {
        str                     ret;
        List                    fieldList       = _inventDimParm.selectedDimFields();
        ListEnumerator          enumerator      = fieldList.getEnumerator();
        FieldId                 dimParmFieldId;

        this.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimParmFieldId = enumerator.current();
            if (this.(dimParmFieldId))
            {
                ret = (ret ? ret + ', ' : '') + System.String::Concat(new DictField(tableNum(InventDim),dimParmFieldId).label(), ':', this.(dimParmFieldId));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123931</DeveloperDocumentation>
	<Label>@SYS53630</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>inventDimId</TitleField1>
	<TitleField2>RecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>DimIdIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>DimIdIdx</PrimaryIndex>
	<ReplacementKey>DimIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>WarehouseProductDimensions</Name>
			<Label>@SYS53630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AgreementDimensionsPrioritized</Name>
			<Label>@SYS303797</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BatchHandlingResultDimensions</Name>
			<Label>@SYS4001932</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BatchMergeSelectionTrackingDimensions</Name>
			<Label>@SYS317445</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventDimensions</Name>
			<Label>@SYS53630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventDimPurchReq</Name>
			<Label>@sys53627</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryDimensions</Name>
			<Label>@SYS53630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension7</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension8</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension12</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductDimensions</Name>
			<Label>@SYS70071</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReqDimensionsPrioritized</Name>
			<Label>@SYS110615</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>configId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension7</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension8</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension12</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StorageDimensions</Name>
			<Label>@SYS108783</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TrackingDimensions</Name>
			<Label>@SYS317798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Warehouse</Name>
			<Label>@SYS6437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewQuery</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventSerialId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>configId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventColorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventGtdId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventGTDId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventOwnerId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventOwnerId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventSerialId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSizeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStyleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventVersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSPalletId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvancedUpgrade</ConfigurationKey>
			<ExtendedDataType>WMSPalletId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SHA1HashHex</Name>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>InventDimSHA1HashHex</ExtendedDataType>
			<Label>@GLS180550</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension3</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension4</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension4</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension5</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension5</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension6</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension6</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension7</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension7</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension8</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension8</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>InventDimension9</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension9</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventDimension10</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension10</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension11</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension11</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimension12</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimension12</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SHA3HashHex</Name>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>InventDimSHA3HashHex</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@GLS180550</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>WMSBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BatchIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>inventBatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SerialIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>inventSerialId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SHA1HashIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SHA1HashHex</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SiteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventProfileIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CRSERussia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventOwnerIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CRSERussia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GTDIdIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CRSERussia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LicensePlateIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventStatusIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventStatusId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>configId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSizeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventColorId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventStyleId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventVersionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventStatusId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>wMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventBatchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventSerialId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension1Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension1</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension1</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension2Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension2</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension2</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension3Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension3</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension3</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension4Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension4</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension4</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension5Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension5</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension5</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension6Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension6</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension6</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension7Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension7</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension7</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension8Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension8</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension8</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension9Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension9</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension9</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension10Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension10</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension10</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension11Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension11</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension11</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimension12Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>InventDimension12</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimension12</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimInventLocationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventDimFieldsMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>configId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
					<MapFieldTo>inventBatchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>InventColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension1</MapField>
					<MapFieldTo>InventDimension1</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension2</MapField>
					<MapFieldTo>InventDimension2</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension3</MapField>
					<MapFieldTo>InventDimension3</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension4</MapField>
					<MapFieldTo>InventDimension4</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension5</MapField>
					<MapFieldTo>InventDimension5</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension6</MapField>
					<MapFieldTo>InventDimension6</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension7</MapField>
					<MapFieldTo>InventDimension7</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension8</MapField>
					<MapFieldTo>InventDimension8</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension9</MapField>
					<MapFieldTo>InventDimension9</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension10</MapField>
					<MapFieldTo>InventDimension10</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension11</MapField>
					<MapFieldTo>InventDimension11</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension12</MapField>
					<MapFieldTo>InventDimension12</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
					<MapFieldTo>InventGtdId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
					<MapFieldTo>InventOwnerId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
					<MapFieldTo>InventProfileId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
					<MapFieldTo>inventSerialId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>InventSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
					<MapFieldTo>InventStatusId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>InventStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventVersionId</MapField>
					<MapFieldTo>InventVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
					<MapFieldTo>LicensePlateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
					<MapFieldTo>wMSLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
					<MapFieldTo>wMSPalletId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventInventoryDimensionEntityFieldsMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>configId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
					<MapFieldTo>inventBatchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>InventColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension1</MapField>
					<MapFieldTo>InventDimension1</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension2</MapField>
					<MapFieldTo>InventDimension2</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension3</MapField>
					<MapFieldTo>InventDimension3</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension4</MapField>
					<MapFieldTo>InventDimension4</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension5</MapField>
					<MapFieldTo>InventDimension5</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension6</MapField>
					<MapFieldTo>InventDimension6</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension7</MapField>
					<MapFieldTo>InventDimension7</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension8</MapField>
					<MapFieldTo>InventDimension8</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension9</MapField>
					<MapFieldTo>InventDimension9</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension10</MapField>
					<MapFieldTo>InventDimension10</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension11</MapField>
					<MapFieldTo>InventDimension11</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension12</MapField>
					<MapFieldTo>InventDimension12</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
					<MapFieldTo>InventGtdId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
					<MapFieldTo>InventOwnerId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
					<MapFieldTo>InventProfileId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
					<MapFieldTo>inventSerialId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>InventSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
					<MapFieldTo>InventStatusId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>InventStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventVersionId</MapField>
					<MapFieldTo>InventVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
					<MapFieldTo>LicensePlateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
					<MapFieldTo>wMSLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
					<MapFieldTo>wMSPalletId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>EcoResColor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResColor</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventColorId</Name>
					<Field>InventColorId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>configId</Name>
					<Field>configId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResSize</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSizeId</Name>
					<Field>InventSizeId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResStyle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResStyle</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventStyleId</Name>
					<Field>InventStyleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventVersionId</Name>
					<Field>InventVersionId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventBatchId</Name>
					<Field>inventBatchId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS123902</EntityRelationshipRole>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventGTD_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventGTD_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventGtdId_RU</Name>
					<Field>InventGtdId_RU</Field>
					<RelatedField>InventGTDId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventOwner_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventOwner_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventOwnerId_RU</Name>
					<Field>InventOwnerId_RU</Field>
					<RelatedField>InventOwnerId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId_RU</Name>
					<Field>InventProfileId_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSerial</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSerial</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventSerialId</Name>
					<Field>inventSerialId</Field>
					<RelatedField>InventSerialId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSInventStatus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSInventStatus</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventStatusId</Name>
					<SourceEDT>WHSInventStatusId</SourceEDT>
					<Field>InventStatusId</Field>
					<RelatedField>InventStatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<SourceEDT>WHSLicensePlateId</SourceEDT>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123914</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>wMSLocationId</Name>
					<Field>wMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSPallet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123932</EntityRelationshipRole>
			<RelatedTable>WMSPallet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>wMSPalletId</Name>
					<Field>wMSPalletId</Field>
					<RelatedField>wMSPalletId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>