<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjJournalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowReverseEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the resource in the reversing journal line is enabled for effective labor rate
    /// </summary>
    /// <returns>
    /// true if resource in reversing journal line is not enabled for ELR, false other wise
    /// </returns>
    /// <remarks>
    /// Used in the validatewrite, validatefield and posting of journal lines
    /// to prevent reversing journal entries to get created/posted when resource is enabled for ELR
    /// </remarks>
    public boolean allowReverseEntry()
    {
        // Disable journal reversal when ELR is enabled
        if (this.ReverseEntry && ResourceFacade::useResourceRate(this.Resource))
        {
            return checkFailed("@SYS4004910");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an activity is specified for a journal line and whether it exists.
    /// </summary>
    /// <returns>
    ///    true if the activity used in this journal line exists; otherwise, false.
    /// </returns>
    private boolean checkActivity()
    {
        RecId                       projRecId, smmActivityParentLink, existChildActivity;
        str                         key;
        SysGlobalCache              cache   = classfactory.globalCache();

        if (this.ActivityNumber)
        {
            if (!ProjActivity::find(this.ActivityNumber))
            {
                return checkFailed(strFmt("@Proj:ProjActivityNotExisting", this.ActivityNumber));
            }

            if (this.isClosedActivityNotAllowed())
            {
                return checkFailed(strFmt("@Proj:ActivityClosedNotAllowed", this.ActivityNumber));
            }
           
            //validate activity is associated to Project
            projRecId = ProjTable::find(this.ProjId).RecId;
            key = strFmt("%1-%2-%3", this.ActivityNumber, enum2int(smmActivityParentType::Project), projRecId);
            if (cache.get(tableStr(ProjJournalTrans), key))
            {
                smmActivityParentLink = cache.get(tableStr(ProjJournalTrans), key);
            }
            else
            {
                smmActivityParentLink = smmActivityParentLinkTable::findByActivityAndParent(this.ActivityNumber, smmActivityParentType::Project, projRecId, tableNum(ProjTable)).RecId;
                cache.set(tableStr(ProjJournalTrans), key, smmActivityParentLink);
            }

            if (smmActivityParentLink == 0)
            {
                return checkFailed(strFmt("@Proj:ActivityNumberNotAssociatedToProject", this.ActivityNumber, this.ProjId));
            }

            if (!ProjParameters::allowParentActivitySelection(this.ActivityNumber))
            {
                return checkFailed("@Proj:ParentActivityError");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClosedActivityNotAllowed</Name>
				<Source><![CDATA[
    private boolean isClosedActivityNotAllowed()
    {
        smmActivities smmActivities;
        select firstonly Closed from smmActivities
                where smmActivities.ActivityNumber == this.ActivityNumber;

        boolean ret = smmActivities.Closed == NoYes::Yes
                        && (!ProjAdjustmentAllowClosedActivitiesFlight::instance().isEnabled()
                            // If PSAProjOrigTransId is set, that indicates the transaction is from adjustment
                            || !(this.PSAProjOrigTransId && ProjParameters::find().AllowClosedActivitiesInAdjustments));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the category for this journal line can be changed.
    /// </summary>
    /// <returns>
    ///    true if the category for the journal line can be changed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method disallows a change and throws an error if the activity used on the journal line has a default category that is mandatory, and the category set on the journal line is not set to the
    ///    default category.
    /// </remarks>
    public boolean checkCategoryAllowed()
    {
        boolean ret = true;

        if (this.ActivityNumber && this.CategoryId)
        {
            if (ProjActivity::find(this.ActivityNumber).Mandatory)
            {
                if (this.CategoryId != (ProjActivity::find(this.ActivityNumber).CategoryDefault))
                {
                    ret = checkFailed("@SYS81827");
                }

                this.CategoryId = ProjActivity::find(this.ActivityNumber).CategoryDefault;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    public boolean checkCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;
        ProjJournalTable projJournalTable;

        if (this.CategoryId)
        {
            projCategory    = ProjCategory::find(this.CategoryId);
            projJournalTable = ProjJournalTable::find(this.JournalId);
            switch (projJournalTable.JournalType)
            {
                case ProjJournalType::Hour :
                    if (projCategory.CategoryType != ProjCategoryType::Hour)
                    {
                        ret = checkFailed(strFmt("@SYS54897",this.CategoryId));
                    }

                    ret = ret && projCategory.validateIfInactiveAllowed();
                    break;

                case ProjJournalType::Revenue:
                    if (projCategory.CategoryType    != ProjCategoryType::Revenue)
                    {
                        ret = checkFailed(strFmt("@SYS54897",this.CategoryId));
                    }

                    if (ret && (projCategory.SetupEstimate || projCategory.SetupSubscription))
                    {
                        ret = checkFailed("@SYS88806");
                    }

                    ret = ret && projCategory.validateIfInactiveAllowed();
                    break;
            }

            if (ret && projCategory.psaIndirectComponent)
            {
                ret = checkFailed("@PSA11059");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a funding source is specified for a journal line and whether it is valid.
    /// </summary>
    /// <returns>
    ///    true if the funding source used in this journal line exists and is valid; otherwise, false.
    /// </returns>
    public boolean checkFundingSource()
    {
        boolean retValue = true;

        if (this.FundingSource)
        {
            //
            // Validate Funding source is valid. Use gind instead of exists() to use the record in
            // additional validations.
            //
            ProjFundingSource projFundingSource = ProjFundingSource::find(this.FundingSource);
            if (!projFundingSource)
            {
                retValue = checkFailed(strFmt("@Proj:FundingSourceDoesNotExist", this.FundingSource));
            }

            if (retValue)
            {
                // validate project has a contract to bill.
                ProjTable projTable = ProjTable::find(this.ProjId);
                if  (!projTable.ProjInvoiceProjId)
                {
                    retValue = checkFailed(strFmt('@Proj:NoContractAssociatedToProject', this.ProjId));
                }

                // Validate Funding source is assocated to contract for project
                if (projTable.ProjInvoiceProjId != projFundingSource.ContractId)
                {
                    retValue = checkFailed(strfmt('@Proj:ValidateFundingSourceAgainstProject', this.ProjId));
                }
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    public boolean checkProjId()
    {
        boolean ret = true;
        ProjTable projTable;
        ProjJournalTable projJournalTable;

        if (this.ProjId)
        {
            projTable = ProjTable::find(this.ProjId);
            projJournalTable = ProjJournalTable::find(this.JournalId);
            switch (projJournalTable.JournalType)
            {
                case ProjJournalType::Hour :
                    if (! projTable.status().checkRule(ProjStatusRule::CreateJournal))
                    {
                        ret = checkFailed(strFmt("@SYS135526",projTable.Stage()));
                    }
                    if (ret && ! projTable.status().activeInTree())
                    {
                        ret = checkFailed(strFmt("@SYS96612",this.ProjId));
                    }
                    break;

                case ProjJournalType::Revenue:
                    if (! projTable.status().checkRule(ProjStatusRule::CreateJournal))
                    {
                        ret = checkFailed(strFmt("@SYS135526",projTable.Stage()));
                    }
                    if (ret && (!projTable.status().activeInTreeRevenue()) &&
                        !ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue))
                    {
                        ret = checkFailed(strFmt("@Proj:ProjectCannotBeSelected", projTable.ProjId));
                    }
                    if (ret && ! projTable.status().activeInTree())
                    {
                        ret = checkFailed(strFmt("@SYS96612",this.ProjId));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity(ProjJournalTrans   projJournalTrans)
    {
        RequireActivity             requireActivity;
        boolean                     ret = true;

        requireActivity = ProjTable::checkRequireActivity(projJournalTrans.ProjId,tableNum(ProjEmplTrans));
        if (requireActivity && (!projJournalTrans.ActivityNumber))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkerTerminated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the worker is terminated.
    /// </summary>
    /// <param name = "workerStatus">
    ///     A <c>HcmWorkerStatus</c> enumeration value.
    /// </param>
    /// <returns>
    ///     true if worker is terminated; otherwise, false.
    ///</returns>
    protected boolean isWorkerTerminated(HcmWorkerRecId _workerRecId)
    {
        HcmWorkerStatus workerStatus = HcmWorker::workerStatusServer(_workerRecId);
        return workerStatus == HcmWorkerStatus::Terminated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    public boolean checkResource()
    {
        boolean ret = true;
        ProjJournalTable projJournalTable;
        HcmWorkerRecId workerRecId;
        HcmWorkerStatus workerStatus = HcmWorkerStatus::Terminated;
        XDSServices xds;

        if (this.Resource)
        {
            projJournalTable = ProjJournalTable::find(this.JournalId);
            switch (projJournalTable.JournalType)
            {
                case ProjJournalType::Hour   :
                case ProjJournalType::Revenue:
                    if (!ProjParameters::find().ShowInactiveEmployees)
                    {
                        unchecked(Uncheck::XDS)
                        {
                            workerRecId = ResourceFacade::getWorker(this.Resource);
                        }

                        if (workerRecId && this.isWorkerTerminated(workerRecId))
                        {
                            ret = checkFailed("@SYS39651");
                        }
                    }
                    else
                    {
                        if (ProjParameters::find().ValidationEmplProj == ProjValParameter::Mandatory)
                        {
                            boolean lockLegalEntity = this.isIntercompany() ? false : true;

                            if (ResourceFacade::exist(this.Resource) && !ResourceLookup::validateResource(this.Resource, this, lockLegalEntity))
                            {
                                ret = checkFailed("@Proj:ResourceValidationError");
                            }
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReverseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the reverseDate that is specified for a journal line is greater than the original project transaction date
    /// </summary>
    /// <returns>
    /// true if reverse date is greater than project transaction date; otherwise, false.
    /// </returns>

    private boolean checkReverseDate()
    {
        boolean retValue = true;

        if (this.ReverseEntry && this.ReverseDate <= this.ProjTransDate)
        {
            retValue = checkFailed("@SYS116157");
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidTaxCodes_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the tax codes is valid or not.
    /// </summary>
    /// <returns>
    ///    true if the tax codes is valid ; otherwise, false.
    /// </returns>
    public boolean checkValidTaxCodes_IN()
    {
        FormulaDesigner_IN  formulaDesigner;
        TaxTable            taxTable;
        boolean             ret = true;

        select RecId from formulaDesigner
        join RecId from taxTable
            where formulaDesigner.TaxItemGroup == this.TaxItemGroupId
               && taxTable.TaxCode == formulaDesigner.TaxCode
               && (taxTable.TaxType_IN == TaxType_IN::Customs
               || taxTable.TaxType_IN == TaxType_IN::Excise);

        if (formulaDesigner.RecId)
        {
            ret = checkFailed("@GLS3800203");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseEntryFromProjJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a reversal entry for corresponding original transacion with negative quantity and using transaction date as reversal date of the original journal line
    /// </summary>
    /// <param name="projJournalTrans">
    ///    The project journal line used for initialization.
    /// </param>
    public void createReverseEntryFromProjJournalTrans(ProjJournalTrans projJournalTrans)
    {
        this.initFromProjJournalTrans(projJournalTrans);
        this.Qty = -projJournalTrans.Qty;
        this.ProjTransDate = projJournalTrans.ReverseDate;
        this.setTransDate();
        this.ReverseDate = dateNull();
        this.ReverseEntry = NoYes::No;
        this.LineNum = 0;
        this.setPeriodDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes a journal line.
    /// </summary>
    /// <remarks>
    ///    If the line being deleted is a voucher line, it also deletes entries in the <c>JournalError</c> table for any voucher line in the journal that failed during processing.
    /// </remarks>
    public void delete()
    {
        ttsbegin;

        this.projCostControlUpdate(ProjCommittedCostUpdateAction::Delete);

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }
        super();

        if (this.Voucher)
        {
            if (this.numOfVoucherLines() == 0)
            {
                JournalError::deleteVoucher(tableNum(ProjJournalTable), this.JournalId, this.Voucher);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the appropriate fields in a journal line with the values of the fields that correspond
    /// in a created project adjustment line passed in as a parameter.
    /// </summary>
    /// <param name="_tmpProjAdjustmentCreate">
    /// The created project adjustment line.
    /// </param>
    /// <remarks>
    /// The created project adjustment lines are held in the <c>TmpProjAdjustmentCreate</c> table.
    /// </remarks>
    public void initFromAdjustment(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate)
    {
        // <GIN>
        ProjJournalTransTaxExtensionIN  projJournalTransTaxExtensionIN;
        // </GIN>

        this.CategoryId      = _tmpProjAdjustmentCreate.CategoryId;
        this.CurrencyId      = _tmpProjAdjustmentCreate.CurrencyId;
        this.DefaultDimension= _tmpProjAdjustmentCreate.DefaultDimension;
        this.LinePropertyId  = _tmpProjAdjustmentCreate.LinePropertyId;
        this.ProjId          = _tmpProjAdjustmentCreate.ProjId;
        this.Qty             = _tmpProjAdjustmentCreate.Qty;
        this.TaxGroupId      = _tmpProjAdjustmentCreate.TaxgroupId;
        this.TaxItemGroupId  = _tmpProjAdjustmentCreate.TaxItemGroupId;
        this.TransDate       = _tmpProjAdjustmentCreate.Transdate;
        this.Txt             = _tmpProjAdjustmentCreate.Txt;
        this.Resource        = _tmpProjAdjustmentCreate.Resource;
        this.ResourceCategory = _tmpProjAdjustmentCreate.ResourceCategory;
        this.ProjTransDate   = _tmpProjAdjustmentCreate.Transdate;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.psaProjOrigTransId = _tmpProjAdjustmentCreate.TransID;
            this.psaWrkCtrId        = _tmpProjAdjustmentCreate.psaWrkCtrId;
        }

        if (ProjJournalTable::find(this.JournalId).JournalType == ProjJournalType::Hour)
        {
            if (_tmpProjAdjustmentCreate.AdjustOrig)
            {
                this.PSAIndirectComponentGroup = ProjEmplTrans::find(this.PSAProjOrigTransId).PSAIndirectComponentGroup;
            }
            else
            {
                this.PSAIndirectComponentGroup = _tmpProjAdjustmentCreate.PSAIndirectComponentGroup;
            }
        }

        if (!ProjActivity::find(_tmpProjAdjustmentCreate.ActivityNumber))
        {
            this.ActivityNumber  = '';
        }
        else
        {
            this.ActivityNumber  = _tmpProjAdjustmentCreate.ActivityNumber;
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projJournalTransTaxExtensionIN.AssessableValueTransactionCurrency   = _tmpProjAdjustmentCreate.AssessableValue_IN;
            projJournalTransTaxExtensionIN.MaximumRetailPrice                   = _tmpProjAdjustmentCreate.MaximumRetailPrice_IN;
            projJournalTransTaxExtensionIN.tcsGroup                             = _tmpProjAdjustmentCreate.tcsGroup_IN;
            projJournalTransTaxExtensionIN.tdsGroup                             = _tmpProjAdjustmentCreate.tdsGroup_IN;
            this.packProjJournalTrans_IN(projJournalTransTaxExtensionIN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the category of the journal line with the default category of the project activity passed in as a parameter.
    /// </summary>
    /// <param name="_projActivity">
    ///    The project activity used to initialize the category of the journal line.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        ProjJournalTable    projJournalTable;
        ProjCategory        projCategory;

        if (!_projActivity || !_projActivity.CategoryDefault)
        {
            return;
        }

        projJournalTable = ProjJournalTable::find(this.JournalId);
        projCategory = ProjCategory::find(_projActivity.CategoryDefault);
        switch (projJournalTable.JournalType)
        {
            case ProjJournalType::Hour :
                if ( projCategory.CategoryType != ProjCategoryType::Hour)
                {
                    return;
                }
                break;

            case ProjJournalType::Revenue:
                if (projCategory.CategoryType  != ProjCategoryType::Revenue)
                {
                    return;
                }
                break;
        }

        this.CategoryId = _projActivity.CategoryDefault;
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.TaxItemGroupId = projCategory.TaxItemGroupId;
            this.setLineProperty();
            this.setHourCostPrice();
            this.setHourSalesPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the journal ID for the journal line with that of the project journal passed in as a parameter.
    /// </summary>
    /// <param name="_projJournalTable">
    ///    The project journal passed in as a parameter.
    /// </param>
    public void initFromProjJournalTable(ProjJournalTable _projJournalTable)
    {
        ProjJournalTableData    journalTableData = JournalTableData::newTable(_projJournalTable);

        journalTableData.journalStatic().newJournalTransData(this,journalTableData).initFromJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes appropriate fields in a project journal line with values of corresponding fields of the project journal line passed in as a parameter.
    /// </summary>
    /// <param name="projJournalTrans">
    ///    The project journal line used for initialization.
    /// </param>
    public void initFromProjJournalTrans(ProjJournalTrans projJournalTrans)
    {
        this.JournalId              = projJournalTrans.JournalId;
        this.LineNum                = projJournalTrans.LineNum;
        this.Voucher                = projJournalTrans.Voucher;

        this.Resource               = projJournalTrans.Resource;
        this.ResourceCategory       = projJournalTrans.ResourceCategory;
        this.ProjId                 = projJournalTrans.ProjId;
        this.CategoryId             = projJournalTrans.CategoryId;
        this.LinePropertyId         = projJournalTrans.LinePropertyId;
        this.DefaultDimension       = projJournalTrans.DefaultDimension;
        this.Txt                    = projJournalTrans.Txt;
        this.Qty                    = projJournalTrans.Qty;
        this.PeriodDate             = projJournalTrans.PeriodDate;
        this.CostPrice              = projJournalTrans.CostPrice;
        this.SalesPrice             = projJournalTrans.SalesPrice;
        this.CurrencyId             = projJournalTrans.CurrencyId;
        this.TaxGroupId             = projJournalTrans.TaxGroupId;
        this.TaxItemGroupId         = projJournalTrans.TaxItemGroupId;
        this.ActivityNumber         = projJournalTrans.ActivityNumber;
        this.FromTime               = projJournalTrans.FromTime;
        this.ToTime                 = projJournalTrans.ToTime;
        this.WebTransaction         = projJournalTrans.WebTransaction;
        this.TransDate              = projJournalTrans.TransDate;
        this.ProjTransDate          = projJournalTrans.ProjTransDate;
        this.TransId                = '';
        this.ReverseEntry           = projJournalTrans.ReverseEntry;
        this.ReverseDate            = projJournalTrans.ReverseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinePropertyFromProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets line property of the transaction.
    /// </summary>
    /// <param name = "_proposalId">
    /// proposalId of Invoice Proposal
    /// </param>
    public void setLinePropertyFromProposalTrans(ProjProposalId _proposalId)
    {
        ProjProposalEmpl    projProposalEmpl;
        ProjEmplTrans       projEmplTrans;

        select firstonly LinePropertyId from projEmplTrans
            exists join projProposalEmpl where
                projEmplTrans.TransId == projProposalEmpl.TransId &&
                projProposalEmpl.ProposalId == _proposalId;

        if (projEmplTrans.LinePropertyId)
        {
            this.LinePropertyId = projEmplTrans.LinePropertyId;
        }
        else
        {
            ProjProposalCost    projProposalCost;
            ProjCostTrans       projCostTrans;

            select firstonly LinePropertyId from projCostTrans
                exists join projProposalCost where
                    projCostTrans.TransId == projProposalCost.TransId &&
                    projProposalCost.ProposalId == _proposalId;

            if (projCostTrans.LinePropertyId)
            {
                this.LinePropertyId = projCostTrans.LinePropertyId;
            }
            else
            {
                ProjProposalItem    projProposalItem;
                ProjItemTrans       projItemTrans;

                select firstonly LinePropertyId from projItemTrans
                    exists join projProposalItem where
                        projItemTrans.ProjTransId == projProposalItem.ProjTransId &&
                        projProposalItem.ProposalId == _proposalId;

                if (projItemTrans.LinePropertyId)
                {
                    this.LinePropertyId = projItemTrans.LinePropertyId;
                }
                else
                {
                    ProjProposalRevenue projProposalRevenue;
                    ProjRevenueTrans    projRevenueTrans;

                    select firstonly LinePropertyId from projRevenueTrans
                        exists join projProposalRevenue where
                            projRevenueTrans.TransId == projProposalRevenue.TransId &&
                            projProposalRevenue.ProposalId == _proposalId;

                    if (projRevenueTrans.LinePropertyId)
                    {
                        this.LinePropertyId = projRevenueTrans.LinePropertyId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the appropriate fields of a journal line with the fields of the project passed in as a
    /// parameter.
    /// </summary>
    /// <param name="projTable">
    /// The project from which to initialize the journal line.
    /// </param>
    public void initFromProjTable(ProjTable projTable)
    {
        ProjInvoiceTable projInvoiceTable = projTable.projInvoice();

        if (projInvoiceTable.CurrencyId)
        {
            this.CurrencyId = projInvoiceTable.CurrencyId;
        }
        else
        {
            this.CurrencyId = CompanyInfoHelper::standardCurrency();
        }

        this.DefaultDimension       = projTable.DefaultDimension;
        this.mergeResourceDimensionDefault();
        this.TaxGroupId             = ProjParameters::taxGroupInvoice(this.ProjId);

        if (!ProjValProjCategorySetUp::checkProjCategory(this.ProjId, this.CategoryId))
        {
            this.CategoryId = '';
        }

        this.setLineProperty();

        if (this.Resource)
        {
            this.setHourPrices();
            this.setPeriodDate();
        }

        if (projTable.ProjPriceGroup)
        {
            this.ProjPriceGroupID = projTable.ProjPriceGroup;
        }
        else
        {
            this.ProjPriceGroupID = projInvoiceTable.ProjPriceGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPSAContractLineItems_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields of <c> ProjJournalTrans </c> from given <c> PSAContractLineItems </c> buffer.
    /// </summary>
    /// <param name="_psaContractLineItems">
    /// Buffer of <c> PSAContractLineItems </c>.
    /// </param>
    public void initFromPSAContractLineItems_IN(PSAContractLineItems _psaContractLineItems)
    {
        ProjJournalTransTaxExtensionIN      projJournalTransTaxExtensionIN;
        PSAContractLineItemsTaxExtensionIN  psaContractLineItemsTaxExtensionIN;

        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projJournalTransTaxExtensionIN      = this.projJournalTransTaxExtensionIN();
            psaContractLineItemsTaxExtensionIN  = PSAContractLineItemsTaxExtensionIN::findByPSAContractLineItems(_psaContractLineItems.RecId);

            projJournalTransTaxExtensionIN.tcsGroup                     = psaContractLineItemsTaxExtensionIN.tcsGroup;
            projJournalTransTaxExtensionIN.tdsGroup                     = psaContractLineItemsTaxExtensionIN.tdsGroup;
            this.packProjJournalTrans_IN(projJournalTransTaxExtensionIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the cost price, sales price, project ID and category ID fields for a journal line with defaults configured for the employee associated with the journal line.
    /// </summary>
    public void initFromResource()
    {
        this.setResourceCategory();
        this.setHourCostPrice();
        this.setHourSalesPrice();
        this.setResourceChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the currency ID and the period date of a journal line with the currency of the current company and the period date from a period transaction line respectively.
    /// </summary>
    /// <remarks>
    ///    The period date for this journal line is set from a period transaction line by calling the method. This method is executed when a new record is added to the table.
    /// </remarks>
    public void initValue()
    {
        super();

        if (!this.ProjId)
        {
            this.CurrencyId = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
        }

        this.setPeriodDate();
        
        if (ProjJournalTable::find(this.JournalId).JournalType == ProjJournalType::Revenue)
        {
            this.Qty = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new journal line record and determines the line number for the new record.
    /// </summary>
    /// <remarks>
    ///    This method is called when a new journal line record is added to the table from a form.
    /// </remarks>
    public void insert()
    {
        #isoCountryRegionCodes

        ttsbegin;

        if (!this.LineNum)
        {
            this.LineNum = ProjJournalTrans::lastLineNum(this.JournalId) + 1;
        }

        if (!this.TransId)
        {
            this.TransId    = ProjParameters::newTransId();
        }

        ProjJournalTable projJournalTable = ProjJournalTable::find(this.JournalId);
        // Check for <c>PSAProjOrigTransId</c>, since the original transaction ID will be there for adjustment transactions and no need to set indirect component for adjusting transactions here.
        if (projJournalTable.JournalType == ProjJournalType::Hour
            && !this.PSAProjOrigTransId)
        {
            this.setPSAIndirectComponentGroup();
        }

        this.projCostControlUpdate();

        super();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a journal transaction line into the table.
    /// </summary>
    /// <param name="_lastLineNum">
    ///    The number that is used by the last journal line inserted. May be set to null. The default value is 0; optional.
    /// </param>
    /// <returns>
    ///    The line number of the inserted journal line.
    /// </returns>
    /// <remarks>
    ///    This method can be called programmatically from code.
    /// </remarks>
    public LineNum insertFromCode(LineNum _lastLineNum = 0)
    {
        ProjJournalTable        journalTable;
        ProjJournalTransData    journalTransData;

        ttsbegin;

        journalTable = ProjJournalTable::find(this.JournalId,true);

        if (! journalTable.RecId)
        {
            // Journal '%1' does not exist.
            throw error(strFmt("@SYS21496", this.JournalId));
        }

        journalTransData = JournalTransData::newTransTableLineNum(this,journalTable, (_lastLineNum ? _lastLineNum : ProjJournalTrans::lastLineNum(journalTable.JournalId)));
        journalTransData.create();
        journalTable.update();

        ttscommit;

        return journalTransData.parmLastLineNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
    DimensionDefault _primaryDefaultDimension,
    DimensionDefault _secondaryDefaultDimension = 0,
    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                    this.companyInfo().RecId
                                                                    )
    )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeResourceDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the default dimension for the journal line with default default dimension.
    /// </summary>
    protected void mergeResourceDimensionDefault()
    {
        if (this.Resource)
        {
            this.DefaultDimension = this.mergeDimension(ResourceFacade::getDefaultDimensionByDate(this.Resource, DateTimeUtil::newDateTime(this.ProjTransDate, 0)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        //<GIN>
        ProjJournalTransTaxExtensionIN projJournalTransTaxExtensionIN;
        //</GIN>

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjJournalTrans, FundingSource) :
                this.checkFundingSource();
                break;

            case fieldNum(ProjJournalTrans, Resource) :
                this.setDimension();
                this.mergeResourceDimensionDefault();
                break;

            case fieldNum(ProjJournalTrans, ProjId) :
                this.ProjPriceGroupID = ProjInvoiceTable::find(ProjTable::find(this.ProjId).ProjInvoiceProjId).ProjPriceGroup;
                this.FundingSource = 0;
                this.setDimension();
                this.mergeResourceDimensionDefault();
                break;

            //<GIN>
            case fieldNum(ProjJournalTrans, Qty) :
            case fieldNum(ProjJournalTrans, SalesPrice) :
                if (TaxParameters::checkTaxParameters_IN())
                {
                    projJournalTransTaxExtensionIN = this.projJournalTransTaxExtensionIN();
                    projJournalTransTaxExtensionIN.assessableValue();
                    this.packProjJournalTrans_IN(projJournalTransTaxExtensionIN);
                }
                break;
            // </GIN>

            case fieldNum(ProjJournalTrans, ReverseEntry):
                if (!this.ReverseEntry)
                {
                    this.ReverseDate = dateNull();
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfVoucherLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of voucher lines in the project journal that the journal line is created in as a voucher.
    /// </summary>
    /// <returns>
    ///    The number of voucher lines in the project journal.
    /// </returns>
    private Integer numOfVoucherLines()
    {
        return any2int((select count(RecId) from projJournalTrans
                where projJournalTrans.JournalId == this.JournalId &&
                      projJournalTrans.Voucher   == this.Voucher).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjJournalTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProjJournalTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_projJournalTransTaxExtensionIN">
    /// ProjJournalTransTaxExtensionIN is packed.
    /// </param>
    public void packProjJournalTrans_IN(ProjJournalTransTaxExtensionIN _projJournalTransTaxExtensionIN)
    {
        _projJournalTransTaxExtensionIN.ProjJournalTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_projJournalTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the period line that has the same start date as the period start date of the journal line passed in as a parameter. It also has the same period type that is set up for the
    ///    resource associated to the journal line passed in.
    /// </summary>
    /// <param name="_projJournalTrans">
    ///    The journal transaction line.
    /// </param>
    /// <returns>
    ///    The name of the period line.
    /// </returns>
    display ProjPeriodName periodName(ProjJournalTrans _projJournalTrans)
    {
        return PeriodFacade::periodName(ResourceFacade::getPeriod(_projJournalTrans.Resource), _projJournalTrans.PeriodDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the end date of a period line.
    /// </summary>
    /// <param name="_projJournalTrans">
    ///    The project journal line.
    /// </param>
    /// <returns>
    ///    The end date of the period line.
    /// </returns>
    /// <remarks>
    ///    The period line whose end date is returned has the same start date as the period start date of the journal line passed in as a parameter. It also has the same period type that is set up for the
    ///    resource associated with the journal line passed in as a parameter.
    /// </remarks>
    display ProjPeriodTo periodTo(ProjJournalTrans  _projJournalTrans)
    {
        return PeriodFacade::endDate(ResourceFacade::getPeriod(_projJournalTrans.Resource), _projJournalTrans.PeriodDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostControlUpdate</Name>
				<Source><![CDATA[
    public void projCostControlUpdate(ProjCommittedCostUpdateAction _action=ProjCommittedCostUpdateAction::Unknown)
    {
        CostControlPostingHour  costControlPostingHour;

        if (this.projJournalTable().JournalType == ProjJournalType::Hour)
        {
            costControlPostingHour = CostControlPosting::newCostControlPostingHour(this,null);
            costControlPostingHour.run(_action);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the project journal in which the journal line that is contained.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The desired project journal.
    /// </returns>
    public ProjJournalTable projJournalTable(boolean _forUpdate = false)
    {
        return ProjJournalTable::find(this.JournalId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProjJournalTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjJournalTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjJournalTransTaxExtensionIN projJournalTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjJournalTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (_set)
        {
            this.ActivityNumber = _activityNumber;
            this.initFromProjActivity(ProjActivity::find(_activityNumber));
        }
        else
        {
            smmActivities = smmActivities::find(this.ActivityNumber);
            name = smmActivities.Purpose;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Negates the quantity field of this journal line if the project journal type passed in is the hour type. It negates the sales price if the project journal type passed in is a revenue type.
    /// </summary>
    /// <param name="_projJournalType">
    ///    The project journal type.
    /// </param>
    public void reverseJournal(ProjJournalType _projJournalType)
    {
        switch (_projJournalType)
        {
            case ProjJournalType::Hour     :
                this.Qty          = this.Qty * -1;
                break;

            case ProjJournalType::Revenue  :
                this.SalesPrice   = this.SalesPrice * -1;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the currency of the journal line.
    /// </summary>
    /// <remarks>
    ///    The currency is set with the currency of the invoice project associated with the project for the journal line if one exists. Otherwise, it sets the currency to the currency of the current company.
    /// </remarks>
    public void setCurrencyId()
    {
        if (ProjInvoiceTable::find(ProjTable::find(this.ProjId).ProjInvoiceProjId).CurrencyId)
        {
            this.CurrencyId = ProjInvoiceTable::find(ProjTable::find(this.ProjId).ProjInvoiceProjId).CurrencyId;
        }
        else
        {
            this.CurrencyId = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the dimension of the project journal line to the dimension of the project against which this journal line was entered.
    /// </summary>
    public void setDimension()
    {
        if (this.ProjId)
        {
            this.DefaultDimension = ProjTable::find(this.ProjId).DefaultDimension;
            this.mergeResourceDimensionDefault();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the cost price of the project journal line.
    /// </summary>
    /// <remarks>
    ///    The cost price is set with the corresponding hour cost price set up in the <c>ProjHourCostPrice</c> table for the employee, project, category, line property, and project transaction date associated
    ///    to the journal line.
    /// </remarks>
    public void setHourCostPrice()
    {
        ProjPriceParameters priceParams = this.instantiateProjectPriceParametersForHourCostPriceLookup();
        this.CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cost price and the sales price of the project journal line.
    /// </summary>
    /// <returns>
    /// Returns true if a sales price is found.
    /// </returns>
    /// <remarks>
    /// The cost price is set with the corresponding hour cost price set up in the <c>ProjHourCostPrice</c>
    /// table for the employee, project, category, line property, and project transaction date that is
    /// associated to the journal line.The sales price is set with the corresponding hour sales price set
    /// up in the <c>ProjHourCostPrice</c> table for the employee, project, category, line property, and
    /// project transaction date that is associated to the journal line.
    /// </remarks>
    public boolean setHourPrices()
    {
        boolean priceFound = false;
        SalesPrice origSalesPrice = this.SalesPrice;

        this.setHourCostPrice();

        ProjPriceParameters priceParams = this.instantiateProjectPriceParametersForHourCostAndSalesPriceLookup();
        [this.SalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, this.ProjPriceGroupID ? true : false);

        if (priceFound && this.SalesPrice != origSalesPrice)
        {
            this.updateAssessableValue_IN();
        }

        return priceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourSalesPrice</Name>
				<Source><![CDATA[
    public boolean setHourSalesPrice()
    {
        boolean     priceFound = false;
        SalesPrice origSalesPrice = this.SalesPrice;

        ProjPriceParameters priceParams = this.instantiateProjectPriceParametersForHourSalesPriceLookup();
        [this.SalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, this.ProjPriceGroupID ? true : false);

        if (priceFound && this.SalesPrice != origSalesPrice)
        {
            this.updateAssessableValue_IN();
        }

        return priceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the line property of the project journal line.
    /// </summary>
    /// <remarks>
    ///    The line property is set to the line property set up in the <c>ProjLinePropertySetup</c> table to cover the project and category associated to the journal line.
    /// </remarks>
    public void setLineProperty()
    {
        if (!this.LinePropertyId || (this.LinePropertyId && this.LinePropertyId != ProjJournalTable::find(this.JournalId).LinePropertyId))
        {
            this.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.CategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the period start date for the journal line.
    /// </summary>
    /// <remarks>
    ///    The period start date is set to the start date of a project period line that has a period type that matches the period type set up for the resource associated with the journal line. The project
    ///    period line has a start date that is less than or equal to the transaction date of the journal line. The project period line is held in the <c>ProjPeriodLine</c> table.
    /// </remarks>
    public void setPeriodDate()
    {
        PeriodRecId period;

        if (this.Resource)
        {
            period = ResourceFacade::getPeriod(this.Resource);
            if (period)
            {
                this.PeriodDate = PeriodFacade::startDate(period, this.ProjTransDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPSAIndirectComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default indirect component group of the project journal line.
    /// </summary>
    public void setPSAIndirectComponentGroup()
    {
        PSAComponentGroupAssignment psaComponentGroupAssignment;

        psaComponentGroupAssignment = PSAComponentGroupAssignment::findAssignment(this.ProjId,
                                                                              this.Resource,
                                                                              this.CategoryId,
                                                                              this.ProjTransDate,
                                                                              '','');
        this.psaIndirectComponentGroup = psaComponentGroupAssignment.IndirectComponentGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyFromToTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the quantity of the journal line based on the timesheet start and end time of the journal line.
    /// </summary>
    /// <remarks>
    ///    The quantity is calculated as (EndTime - StartTime)/3600.
    /// </remarks>
    public void setQtyFromToTime()
    {
        // Registration of timesheet according to from & to time
        FromTime    fromTime;
        ToTime      toTime;

        fromTime    = this.FromTime;
        toTime      = this.ToTime;

        this.Qty = ((toTime - fromTime) / 3600);

        // Registration of timesheet according to from & to time
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
    {
        this.ResourceCategory = ResourceFacade::getResourceCategory(this.Resource,
        (this.ProjTransDate ? this.ProjTransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project ID for the journal line to blank if the project differs from the default project
    /// setup of the resource for which the journal line is entered. It also sets the category ID for the
    /// journal line to blank if the category differs from the default category setup for the resource.
    /// </summary>
    private void setResourceChanged()
    {
        if (!ProjValEmplProjSetup::checkResourceProj(this.Resource,this.ProjId))
        {
            this.ProjId = '';
        }

        if (!ProjValEmplCategorySetUp::checkResourceCategory(this.Resource,this.CategoryId))
        {
            this.CategoryId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRevenueSalesPrice</Name>
				<Source><![CDATA[
    public boolean setRevenueSalesPrice()
    {
        boolean     priceFound = false;
        ProjTable projTable = ProjTable::find(this.ProjId);
        SalesPrice origSalesPrice = this.SalesPrice;

        if (ProjInvoiceTable::hasMultipleFundingSources(projTable.ProjInvoiceProjId))
        {
            [this.SalesPrice, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice (this.ProjId,
                                                                                              this.Resource,
                                                                                              this.CategoryId,
                                                                                              this.CurrencyId,
                                                                                              this.ProjTransDate,
                                                                                              this.ProjPriceGroupID,
                                                                                              false,
                                                                                              this.ResourceCategory,
                                                                                              projTable.ProjInvoiceProjId);
        }
        else
        {
            [this.SalesPrice, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice (this.ProjId,
                                                                                              this.Resource,
                                                                                              this.CategoryId,
                                                                                              this.CurrencyId,
                                                                                              this.ProjTransDate,
                                                                                              this.ProjPriceGroupID,
                                                                                              false,
                                                                                              this.ResourceCategory,
                                                                                              projTable.ProjInvoiceProjId,
                                                                                              projTable.CustAccount);
        }

        if (this.SalesPrice != origSalesPrice)
        {
            this.updateAssessableValue_IN();
        }

        return priceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the assessable value for India.
    /// </summary>
    public void updateAssessableValue_IN()
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            ProjJournalTransTaxExtensionIN projJournalTransTaxExtensionIN = this.projJournalTransTaxExtensionIN();
            projJournalTransTaxExtensionIN.AssessableValue(this);
            this.packProjJournalTrans_IN(projJournalTransTaxExtensionIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the tax group for the journal transaction line.
    /// </summary>
    public void setTaxGroupId()
    {
        this.TaxGroupId = ProjParameters::taxGroupInvoice(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction date of the journal line.
    /// </summary>
    /// <remarks>
    ///    The transaction date is set to the end date of the corresponding period line if the <c>ProjJournalVoucherDateChange</c> enumeration value is a <c>ProjPeriodEnd</c> data type. The transaction date is
    ///    set to the end date of the corresponding ledger period if <c>ProjJournalVoucherDateChange</c> enumeration value is a <c>LedgerPeriodEnd</c> data type. The transaction date is set to the project date
    ///    of the journal line if <c>ProjJournalVoucherDateChange</c> enumeration value is a <c>ProjTransDate</c> data type.
    /// </remarks>
    public void setTransDate()
    {
        PeriodRecId period;
        date        endDate;
        RecId       calendarRecId;

        switch (this.projJournalTable().JournalType)
        {
            case ProjJournalType::Hour  :
            case ProjJournalType::Revenue:
            switch (this.projJournalTable().VoucherDateChange)
                {
                    case ProjJournalVoucherDateChange::ProjPeriodEnd    :
                        period = ResourceFacade::getPeriod(this.Resource);
                        if (period)
                        {
                            endDate = PeriodFacade::endDate(period, this.ProjTransDate);
                            if (this.ProjTransDate > endDate)
                            {
                                this.TransDate = this.ProjTransDate;
                            }
                            else
                            {
                                this.TransDate  = endDate;
                            }
                        }
                        else
                        {
                            this.TransDate  = this.ProjTransDate;
                        }
                        break;

                    case ProjJournalVoucherDateChange::LedgerPeriodEnd  :
                        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
                        this.TransDate  = LedgerFiscalCalendar::findLastDayofPeriod(calendarRecId, this.ProjTransDate);
                        break;

                    case ProjJournalVoucherDateChange::ProjTransDate    :

                        this.TransDate  = this.ProjTransDate;
                        break;
                }
                break;
        }

        if (!this.TransDate)
        {
            this.TransDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #isoCountryRegionCodes

        ProjJournalTable projJournalTable = ProjJournalTable::find(this.JournalId);

        // Check for <c>PSAProjOrigTransId</c>, since the original transaction ID will be there for adjustment transactions and no need to set indirect component for adjusting transactions here.
        if (projJournalTable.JournalType == ProjJournalType::Hour
            && !this.PSAProjOrigTransId)
        {
            this.setPSAIndirectComponentGroup();
        }

        this.projCostControlUpdate();

        super();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified field.
    /// </summary>
    /// <returns>
    ///    true if the specified field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Apply the project budget control and validation when the user saves each line.
    /// </remarks>
    public boolean validateBudget()
    {
        ProjParameters projParamters = ProjParameters::find();
        if (projParamters.EnableBudgetCheckOnLineSave)
        {
            return ProjPost::validateBudget(this);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
        && ret && ProjJournalTable::find(this.JournalId).TimesheetNbr != "")
        {
            ret = checkFailed("@PSA104");
        }

        ProjJournalTable projJournalTable = ProjJournalTable::find(this.JournalId);
        if (projJournalTable.Posted)
        {
            ret = checkFailed("@SYS21497");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a specified field.
    /// </summary>
    /// <param name="p1">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value of the field passed in as a parameter is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method executes as you try to leave a field on a ProjJournalTrans record. It validates the projectId field. It returns false if the status of the project used by the journal line in an hour,
    ///    week, time, or revenue type journal is not active. It also validates the CategoryId field. It returns false if the category associated with the journal line that is contained in an hour, week, time,
    ///    or revenue type journal has an inappropriate category type.
    /// </remarks>
    public boolean validateField(FieldId p1)
    {
        boolean         ret;
        ProjJournalCheckPost projJournalCheck;
        JournalTableData journalTableData;
        JournalTransData journalTransData;
        // <GIN>
        #ISOcountryRegionCodes
        // </GIN>

        ret = super(p1);

        switch (p1)
        {
            case fieldNum(ProjJournalTrans, ProjId):
                ret = ret && this.checkProjId();
                break;

            case fieldNum(ProjJournalTrans, FundingSource):
                ret = ret && this.checkFundingSource();
                break;

            case fieldNum(ProjJournalTrans,CategoryId):
                ret = ret && this.checkCategoryId();
                break;

            case fieldNum(ProjJournalTrans, Resource):
                ret = ret && this.checkResource() && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource) && this.allowReverseEntry();
                break;

            case fieldNum(ProjJournalTrans, ActivityNumber):
                ret = ret && this.checkActivity();
                break;

            case fieldNum(ProjJournalTrans, ReverseEntry):
                ret = ret && this.allowReverseEntry();

            // <GIN>
            case fieldNum(ProjJournalTransTaxExtensionIN, MaximumRetailPrice):
                if (TaxParameters::checkTaxParameters_IN())
                {
                    ret = ret && TransTaxInformationHelper::checkMaximumRetailPrice(this.projJournalTransTaxExtensionIN().MaximumRetailPrice);
                }
                break;

            case fieldNum(ProjJournalTransTaxExtensionIN, AssessableValueTransactionCurrency):
                if (TaxParameters::checkTaxParameters_IN())
                {
                    if (((this.Qty * this.SalesPrice) < 0 && this.projJournalTransTaxExtensionIN().AssessableValueTransactionCurrency > 0)
                   || ((this.Qty * this.SalesPrice) > 0 && this.projJournalTransTaxExtensionIN().AssessableValueTransactionCurrency < 0))
                    {
                        ret = checkFailed("@GLS5572");
                    }
                }
                break;

            case fieldNum(ProjJournalTrans, TaxItemGroupId):
                if (this.TaxItemGroupId
                    && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    ret = ret && this.checkValidTaxCodes_IN();
                }
                break;
            //</GIN>
        }

        if (fieldNum(ProjJournalTrans, ProjId) ||
          fieldNum(ProjJournalTrans, CategoryId) ||
          fieldNum(ProjJournalTrans, ActivityNumber) ||
          fieldNum(ProjJournalTrans, CostPrice) ||
          fieldNum(ProjJournalTrans, SalesPrice) ||
          fieldNum(ProjJournalTrans, CurrencyId))
        {
            if (!this.validateBudget())
            {
                projJournalCheck = ProjJournalCheckPost::newJournalCheckPost(false, true, JournalCheckPostType::Check, tableNum(ProjJournalTable), this.JournalId);
                journalTableData = JournalTableData::newTable(ProjJournalTable::find(this.JournalId));
                journalTransData = JournalTransData::newTransTableLineNum(this, journalTableData.journalTable(), this.LineNum);
                journalTableData.journalErrorTransList().addInfolog(projJournalCheck,journalTransData);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current <c>ProjJournalTrans</c> record before it is written to the database.
    /// </summary>
    /// <returns>
    ///    true if the current ProjJournal record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method validates that the project journal associated with the journal line exists. It also validates that an employee is specified and that the project activity specified is in the specified
    ///    project. It validates that all fields in the journal line that are set up as mandatory are specified and valid. If the tax book is activated in tax parameters and a tax book is specified, it
    ///    validates the sales tax book section and sales tax group.
    /// </remarks>
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        ProjJournalTable    projJournalTable    = this.projJournalTable();
        boolean             ret;
        boolean             checkCommonTaxCodes;
        ProjJournalTrans    orig = this.orig();
        LedgerJournalTable  ledgerJournalTable;
        #ISOCountryRegionCodes

        ret = super();

        ret = ret && this.checkProjId() && this.checkCategoryId() && this.checkResource() && this.checkReverseDate() && this.allowReverseEntry();
        ret = ret && ProjJournalTable::exist(this.JournalId);

        if (ret)
        {
            ret = ProjJournalTrans::checkCategoryResourceOption(this.CategoryId, this.Resource);
        }

        ret = ret && this.checkActivity();
        if (ret)
        {
            ret = projValCheckTrans.validateMandatory(this);
        }

        if (ret && !this.validateCanCreateJournal())
        {
            ret = false;
        }

        if (ret)
        {
            // Italian functionality of VAT books and VAT book sections
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && ProjJournalName::find(projJournalTable.JournalNameId).TaxBookTypeJournal != TaxBookTypeJournal::Empty)
            {
                ret = TaxBookSection::checkTaxBookSection(projJournalTable.getNumberSequenceTable().RecId, this.TransDate, this.Voucher);

                if (ret)
                {
                    ret = TaxGroupData::checkTaxGroups(this.TaxGroupId, this.TaxItemGroupId);
                }
            }
        }

        checkCommonTaxCodes = DIOTAdditionalInfoForNoVendor_MX::isCommonTaxCodeMarked(this.TaxGroupId, this.TaxItemGroupId);

        if ( ret && checkCommonTaxCodes && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) && LedgerJournalTable.JournalType == LedgerJournalType::Cost && this.OperationType_MX == VendorOperationType_MX::Blank)
        {
            ret = checkFailed("@SYS312596");
        }

        if (orig.ProjId != this.ProjId ||
           orig.CategoryId != this.CategoryId ||
           orig.ActivityNumber != this.ActivityNumber ||
           orig.CostPrice != this.CostPrice ||
           orig.SalesPrice != this.SalesPrice ||
           orig.CurrencyId != this.CurrencyId)
        {
            this.validateBudget();
        }

        // validate that the exchange logic is not throwing
        CurrencyExchangeHelper::amountCur2MST(this.SalesPrice, this.CurrencyId);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanCreateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current project status to create journal.
    /// </summary>
    /// <returns>
    ///     true if journal can be created with current project status; otherwise, false.
    /// </returns>
    protected boolean validateCanCreateJournal()
    {
        return ProjTable::find(this.ProjId).status().validateWriteCreateJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCategoryResourceValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Some categories setting should not enforce the Category/Resouce validation option. This
    /// returns whether the option should be enforced.
    /// </summary>
    /// <param name="_projCategory">
    /// The project category.
    /// </param>
    /// <returns>
    /// true if the category setting indicate to not validate based on validation settings; otherwise false.
    /// </returns>
    /// <remarks>
    /// Settings which should not enforce the validation options are:
    ///    Customer retention
    ///    Indirect cost
    ///    Revenue recognition category (Estimate)
    /// </remarks>
    private static boolean skipCategoryResourceValidation(ProjCategory _projCategory)
    {
        boolean returnValue = false;

        if (_projCategory.PSACustPaymentRetention == NoYes::Yes ||
            _projCategory.PSAIndirectComponent == NoYes::Yes ||
            _projCategory.SetupEstimate == NoYes::Yes)
        {
            returnValue = true;
        }
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryResourceOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the category-resource option for the specified category and resource.
    /// </summary>
    /// <param name="_categoryId">
    /// The project category.
    /// </param>
    /// <param name="_resourceRecId">
    /// The resource record ID.
    /// </param>
    /// <returns>
    /// true if the category-resource option is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns false and throws an error if the specified category requires an resource and
    /// the specified resource is not specified. It also returns false and throws an error if the
    /// specified category does not require an resource and the specified resource is specified.
    /// </remarks>
    public static boolean checkCategoryResourceOption(ProjCategoryId _categoryId, ResourceRecId _resourceRecId)
    {
        if (_categoryId && ProjParameters::find().ValidationEmplProj != ProjValParameter::None)
        {
            ProjCategory projCategory = ProjCategory::find(_categoryId);

            if (!ProjJournalTrans::skipCategoryResourceValidation(projCategory))
            {
                if (projCategory.RecId && projCategory.ProjCategoryEmplOption == ProjCategoryEmplOption::Mandatory && ! _resourceRecId)
                {
                    return checkFailed("@SYS67768");
                }

                if (projCategory.RecId && projCategory.ProjCategoryEmplOption == ProjCategoryEmplOption::Never && _resourceRecId)
                {
                    return checkFailed("@SYS75858");
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a project journal line exists.
    /// </summary>
    /// <param name="_journalId">
    /// The journal ID for the project journal that contains the journal line.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number of the journal line.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the journal line.
    /// </param>
    /// <returns>
    /// true if the journal line associated with the <c>JournalID</c>, <c>Voucher</c>, and <c>LineNum</c>
    /// exists; otherwise, false.
    /// </returns>
    private static boolean exist(ProjJournalId  _journalId,
                     Voucher        _voucher ,
                     LineNum        _lineNum )
    {
        return (select firstonly projJournalTrans
                where projJournalTrans.JournalId == _journalId &&
                      projJournalTrans.Voucher   == _voucher  &&
                      projJournalTrans.LineNum   == _lineNum
           ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjJournalTrans</c> table by using the reverse reference.
    /// </summary>
    /// <param name="_reverseRecID">
    /// The reverse reference record ID of the <c>ProjJournalTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>ProjJournalTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjJournalTrans findByReverse(
    RecId   _reverseRecID,
    boolean _forUpdate = false)

    {
        ProjJournalTrans projJournalTrans;

        if (_reverseRecID != 0)
        {
            projJournalTrans.selectForUpdate(_forUpdate);

            select firstonly projJournalTrans
            where projJournalTrans.RevRecId == _reverseRecID;
        }

        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the maximum line number value for all the journal lines that are contained in the project journal for the given journal ID passed in as a parameter.
    /// </summary>
    /// <param name="_journalId">
    ///    The project journal ID.
    /// </param>
    /// <returns>
    ///    The maximum line number.
    /// </returns>
    /// <remarks>
    ///    The maximum line number is also the last line number that is used.
    /// </remarks>
    private static LineNum lastLineNum(JournalId _journalId)
    {
        return (select maxof(LineNum) from projJournalTrans
            where projJournalTrans.JournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaFindJournalTrans</Name>
				<Source><![CDATA[
    public static ProjJournalTrans psaFindJournalTrans(ProjTransIdBase transId)
    {
        ProjJournalTrans tProjJournalTrans = null;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && transId)
        {
            select firstonly tProjJournalTrans
            where tProjJournalTrans.TransId    == transId;
        }

        return tProjJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOperationType_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>OperationType_MX</c> field value while posting the fee journal when there is no
    /// common tax codes, that is, when the <c>DiotAddInfo_MX</c> check box is checked, are not attached.
    /// </summary>
    /// <param name="_projJournalTransRecId">
    /// The <c>record ID </c>value of the <c>projJournalTrans</c> table.
    /// </param>
    public static void updateOperationType_MX(RefRecId _projJournalTransRecId)
    {
        ProjJournalTrans    projJournalTrans;

        select firstonly forupdate projJournalTrans
        where projJournalTrans.RecId == _projJournalTransRecId;

        projJournalTrans.OperationType_MX = VendorOperationType_MX::Blank;
        projJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heard table.
    /// </summary>
    /// <returns>The recode for projJournalTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.projJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceFromResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Resource to the ResourceRecId of the ResourceView record with the ResourceId equal to _resourceId.
    /// If _resourceId is null, no assignment is made.
    /// </summary>
    /// <param name = "_resourceId">Id of the resource to be assigned.</param>
    /// <param name = "_resourceCompany"> Resource company of the resource.</param>
    public void setResourceFromResourceId(ResResourceID _resourceId, SelectableDataArea _resourceCompany = curExt())
    {
        if (_resourceId)
        {
            this.Resource = ResourceFacade::findByResourceId(_resourceId, _resourceCompany);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the item sales tax group for the journal transaction line
    /// </summary>
    public void setTaxItemGroupId(ProjCategoryId _category)
    {
        this.TaxItemGroupId = ProjCategory::find(_category).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjectPriceParametersForHourCostAndSalesPriceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>ProjPriceParameters</c> parameter class instance.
    /// </summary>
    /// <returns>The <c>ProjPriceParameters</c> class instance.</returns>
    /// <remarks>Instantiates the parameter class instance for the setHourPrices method.</remarks>
    protected ProjPriceParameters instantiateProjectPriceParametersForHourCostAndSalesPriceLookup()
    {
        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
            this.ProjId,
            this.Resource,
            this.CategoryId,
            this.LinePropertyId,
            this.CostPrice,
            this.CurrencyId,
            this.ProjTransDate,
            this.ProjPriceGroupID,
            '',
            '',
            this.ResourceCategory);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjectPriceParametersForHourSalesPriceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>ProjPriceParameters</c> parameter class instance.
    /// </summary>
    /// <returns>The <c>ProjPriceParameters</c> class instance.</returns>
    /// <remarks>Instantiates the parameter class instance for the setHourSalesPrice method.</remarks>
    protected ProjPriceParameters instantiateProjectPriceParametersForHourSalesPriceLookup()
    {
        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
            this.ProjId,
            this.Resource,
            this.CategoryId,
            this.LinePropertyId,
            this.CostPrice,
            this.CurrencyId,
            this.ProjTransDate,
            this.ProjPriceGroupID,
            '',
            '',
            this.ResourceCategory);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjectPriceParametersForHourCostPriceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>ProjPriceParameters</c> parameter class instance.
    /// </summary>
    /// <returns>The <c>ProjPriceParameters</c> class instance.</returns>
    /// <remarks>Instantiates the parameter class instance for the setHourCostPrice method.</remarks>
    protected ProjPriceParameters instantiateProjectPriceParametersForHourCostPriceLookup()
    {
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
            this.ProjId ,
            this.Resource,
            this.CategoryId,
            this.LinePropertyId,
            this.ProjTransDate,
            '',
            '',
            this.ProjPriceGroupID,
            this.ResourceCategory);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this transaction was created for a worker employed by another legal entity.
    /// </summary>
    /// <returns>
    /// true if the resource is employed by another legal entity; false otherwise.
    /// </returns>
    private boolean isIntercompany()
    {
        if (this.Resource && ResourceFacade::getLegalEntity(this.Resource) != CompanyInfo::findDataArea(this.dataAreaId).RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124922</DeveloperDocumentation>
	<Label>@SYS3432</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>CategoryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiotInformation_MX</Name>
			<Label>@SYS312478</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationType_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Employee</Name>
			<Label>@SYS4705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Hours</Name>
			<Label>@SYS1151</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationFee</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationHour</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IndirectComponentGroups</Name>
			<Label>@PSA2409</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAIndirectComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>periodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>periodTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAPercentCompl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RevenueRegistration</Name>
			<Label>@SYS54259</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReversingEntry</Name>
			<Label>@SYS116155</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReverseEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReverseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS80400</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeSheet</Name>
			<Label>@SYS15311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAWrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WebTransaction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WeekTimeOverview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>periodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WeekTimeSheet</Name>
			<Label>@SYS716</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>periodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendorOperationType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPriceGroupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAIndirectComponentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAIndirectComponentGroupId</ExtendedDataType>
			<Label>@SYS4249</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAPercentCompl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@PSA243</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjOrigTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjOrigTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAWrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PSAWrkCtrId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQtyEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReverseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS116153</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReverseEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS116155</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RevRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjJournalTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjToTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Label>@SYS16658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WebTransaction</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WebTransaction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>JournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>JournalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPriceGroupID</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>ProjPriceGroupID</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProjJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RevRecId</Name>
					<SourceEDT>ProjJournalTransRefRecId</SourceEDT>
					<Field>RevRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>projJournalTxt</Name>
			<EntityRelationshipRole>@SYS124924</EntityRelationshipRole>
			<RelatedTable>ProjJournalTxt</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Txt</Name>
					<Field>Txt</Field>
					<RelatedField>Txt</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjRevenue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjRevenueTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjRevenueTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans_ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransId</Name>
					<Field>TransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PSAIndirectComponentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PSAIndirectComponentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PSAIndirectComponentGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans_PSAIndirectComponentGroup</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAIndirectComponentGroup</Name>
					<Field>PSAIndirectComponentGroup</Field>
					<RelatedField>ComponentGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjJournalTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource</Name>
					<SourceEDT>PSAWrkCtrId</SourceEDT>
					<RelatedField>IsIndividualResource</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAWrkCtrId</Name>
					<SourceEDT>PSAWrkCtrId</SourceEDT>
					<Field>PSAWrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>