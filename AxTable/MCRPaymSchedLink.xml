<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymSchedLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRPaymSchedLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCustPaymSchedLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record by the RecID of the <c>CustPaymSchedLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID used to search for a <c>MCRPaymSchedLink</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>MCRPaymSchedLink</c> record found.
    /// </returns>
    public static MCRPaymSchedLink findCustPaymSchedLine(MCRCustPaymSchedLineRefRecId _recId,
                                                      boolean _forUpdate = false)
    {
        MCRPaymSchedLink mcrPaymSchedLink;

        if (_recId)
        {
            mcrPaymSchedLink.selectForUpdate(_forUpdate);

            select firstOnly mcrPaymSchedLink
                where mcrPaymSchedLink.CustPaymSchedLineRefRecId == _recId;
        }
        return mcrPaymSchedLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record by the RecID of the <c>CustTransOpen</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID used to search for a <c>MCRPaymSchedLink</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>MCRPaymSchedLink</c> record found.
    /// </returns>
    public static MCRPaymSchedLink findCustTransOpen(CustTransOpenRefRecId _recId,
                                                      boolean _forUpdate = false)
    {
        MCRPaymSchedLink mcrPaymSchedLink;

        if (_recId)
        {
            mcrPaymSchedLink.selectForUpdate(_forUpdate);

            select firstOnly mcrPaymSchedLink
                where mcrPaymSchedLink.CustTransOpenRefRecId == _recId;
        }
        return mcrPaymSchedLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInstallmentPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record by the RecID of the <c>MCRInstallmentPlanSalesTable</c> table.
    /// </summary>
    /// <param name="_mcrInstallmentPlanTableRecId">
    ///     The record ID used to search for a <c>MCRPaymSchedLink</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>MCRPaymSchedLink</c> record found.
    /// </returns>
    public static MCRPaymSchedLink findInstallmentPlan(MCRInstallmentPlanTableRecId _mcrInstallmentPlanTableRecId,
                                                      boolean _forUpdate = false)
    {
        MCRPaymSchedLink mcrPaymSchedLink;

        if (_mcrInstallmentPlanTableRecId)
        {
            mcrPaymSchedLink.selectForUpdate(_forUpdate);

            select firstOnly mcrPaymSchedLink
                where mcrPaymSchedLink.PlanTableRecId == _mcrInstallmentPlanTableRecId;
        }
        return mcrPaymSchedLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromCustTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the link records used when billing the customer.
    /// </summary>
    /// <param name="_custPaymSched">
    /// The <c>CustPaymSched</c> record created during invoicing.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record created during invoicing.
    /// </param>
    /// <param name="_custTransOpenRecId">
    /// The <c>RecID</c> of the <c>CustTransOpen</c> record created during invoicing.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the current <c>CustPaymSchedLine</c> record created during invoicing.
    /// </param>
    /// <exception cref="Exception::Error">
    /// All parameters cannot be blank; throws error if it is.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Validation failure during creation of the link record; throws error if it does.
    /// </exception>

    public static void insertFromCustTransOpen(CustPaymSched _custPaymSched,
                                                CustPaymSchedLine _custPaymSchedLine,
                                                CustTransOpenRefRecId _custTransOpenRecId,
                                                LineNum _lineNum)
    {
        MCRInstallmentPlanSalesTable    mcrInstallmentPlanSalesTable;
        MCRPaymSchedLink                mcrPaymSchedLink;
        CustPaymSchedLine               custPaymSchedLineOrig;
        CustPaymSched                   custPaymSchedOrig;

        if (!_custPaymSchedLine
            || !_custTransOpenRecId
            || !_custPaymSched
            || !_lineNum)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_custPaymSched.ExtTableId == tableNum(CustInvoiceJour))
        {
            mcrInstallmentPlanSalesTable = mcrInstallmentPlanSalesTable::findSalesId(CustInvoiceJour::findRecId(_custPaymSched.ExtRecId).SalesId);

            if (mcrInstallmentPlanSalesTable)
            {
                // Retriever the RecID of the original CustPaymSchedLine
                select firstOnly RecId from custPaymSchedLineOrig
                    where custPaymSchedLineOrig.LineNum == _lineNum
                       && custPaymSchedLineOrig.RecId != _custPaymSchedLine.RecId
                    exists join custPaymSchedOrig
                    where custPaymSchedOrig.MCRRefRecID == mcrInstallmentPlanSalesTable.RecId
                        && custPaymSchedOrig.MCRRefTableID == mcrInstallmentPlanSalesTable.tableid
                        && custPaymSchedOrig.RecId == custPaymSchedLineOrig.ParentRecID;

                if (custPaymSchedLineOrig
                    && mcrInstallmentPlanSalesTable)
                {
                    mcrPaymSchedLink.CustPaymSchedLineRefRecId = custPaymSchedLineOrig.RecId;
                    mcrPaymSchedLink.PlanTableRecId = mcrInstallmentPlanSalesTable.RecId;
                    mcrPaymSchedLink.CustTransOpenRefRecId = _custTransOpenRecId;
                    if (mcrPaymSchedLink.validateWrite())
                    {
                        mcrPaymSchedLink.insert();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRPayment</ConfigurationKey>
	<DeveloperDocumentation>@SYS57785</DeveloperDocumentation>
	<Label>@SYS57785</Label>
	<TitleField1>CustPaymSchedLineRefRecId</TitleField1>
	<TitleField2>PlanTableRecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<Modules>Payments</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPaymRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPaymSchedLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransOpenRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanTableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Installments</Name>
			<Label>@MCR30662</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPaymRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPaymSchedLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransOpenRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanTableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustPaymRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCustPaymTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustPaymSchedLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCustPaymSchedLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransOpenRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustTransOpenRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRInstallmentPlanTableRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustPaymSchedLineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanTableRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustTransOpenRefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTransOpenRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymSchedLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustPaymSchedLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustPaymSchedLineRefRecId</Name>
					<SourceEDT>MCRCustPaymTableRefRecId</SourceEDT>
					<Field>CustPaymSchedLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExtDueDateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransOpenRefRecId</Name>
					<SourceEDT>CustTransOpenRefRecId</SourceEDT>
					<Field>CustTransOpenRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRCustPaymTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRCustPaymTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustPaymRefRecId</Name>
					<SourceEDT>MCRCustPaymTableRefRecId</SourceEDT>
					<Field>CustPaymRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRInstallmentPlanSalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>MCRInstallmentPlanSalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanTableRecId</Name>
					<SourceEDT>MCRInstallmentPlanTableRecId</SourceEDT>
					<Field>PlanTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>