<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttributes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsBatchAttributes extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchAttribValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_set">
    /// Edit method called to set or view a value
    /// </param>
    /// <param name="_pdsBatchAttribValue">
    /// Value to push if setting value.
    /// </param>
    /// <returns>
    /// Current batch attribute value, returned as string regardless of type.
    /// </returns>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public PdsBatchAttribValue editPdsBatchAttribValue(boolean _set, PdsBatchAttribValue _pdsBatchAttribValue)
    /// </syntax>
    /// </remarks>
    public edit PdsBatchAttribValue batchAttribValue(
        boolean             _set = false,
        PdsBatchAttribValue _pdsBatchAttribValue = '')
    {
        if (_set && hasFieldAccess(
                tablenum(PdsBatchAttributes),
                fieldnum(PdsBatchAttributes, PdsBatchAttribValue),
                AccessType::Edit))
        {
            if (this.pdsBatchAttrib().isValidAttribValueType(_pdsBatchAttribValue,true))
            {
                this.PdsBatchAttribValue = this.pdsBatchAttrib().locale2Storage(_pdsBatchAttribValue);
            }
        }

        return this.getBatchAttribValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedBatchAttribQO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ask if update should be launched even if the attribute values could be overwritten from other quality orders.
    /// </summary>
    /// <returns> Update launched or not.</returns>
    /// <remarks>
    /// <syntax>
    /// private boolean checkRelatedBatchAttribQO()
    /// </syntax>
    /// </remarks>
    private boolean checkRelatedBatchAttribQO()
    {
        boolean ret = false;

        if (this.PdsBatchAttribQualityOrderId)
        {
            if (Box::yesNo("@PDS1206", DialogButton::No, "@PDS1203")
                    == DialogButton::Yes)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeDefinedOrOverrideTargetValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the target value of the attribute, defined at item, group or definition level.
    /// </summary>
    /// <returns>
    ///     The target value of the attribute.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PdsBatchAttribTarget getAttributeDefinedOrOverrideTargetValue()
    {
        PdsBatchAttribByAttribGroup   pdsBatchAttribByAttribGroup;
        PdsBatchAttribByItem          pdsBatchAttribByItem;

        if (this.ItemId)
        {
            var pdsBatchAttribType = PdsBatchAttrib::findAttribType(this.PdsBatchAttribId);

            select firstonly PdsBatchAttribTarget from pdsBatchAttribByItem
                where  pdsBatchAttribByItem.PdsBatchAttribItemId    == this.ItemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode      == TableGroupAll::Table
                    && pdsBatchAttribByItem.PdsBatchAttribRelation  == this.PdsBatchAttribId
                    && pdsBatchAttribByItem.PdsBatchAttribTarget    != '';

            if (pdsBatchAttribByItem.PdsBatchAttribTarget)
            {
                return PdsBatchAttrib::storage2LocaleType(pdsBatchAttribType, pdsBatchAttribByItem.PdsBatchAttribTarget);
            }

            select firstonly PdsBatchAttribTarget from pdsBatchAttribByAttribGroup
                join PdsBatchAttribItemId from pdsBatchAttribByItem
                where pdsBatchAttribByAttribGroup.PdsBatchAttribGroupId     == pdsBatchAttribByItem.PdsBatchAttribRelation
                    && pdsBatchAttribByItem.PdsBatchAttribItemId            == this.ItemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode              == TableGroupAll::GroupId
                    && pdsBatchAttribByAttribGroup.PdsBatchAttribAttribId   == this.PdsBatchAttribId
                    && pdsBatchAttribByAttribGroup.PdsBatchAttribTarget     != '';

            if (pdsBatchAttribByAttribGroup.PdsBatchAttribTarget)
            {
                return PdsBatchAttrib::storage2LocaleType(pdsBatchAttribType, pdsBatchAttribByAttribGroup.PdsBatchAttribTarget);
            }
        }

        return this.pdsBatchAttribTarget();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchAttribValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to show the Batch attribute value.
    /// </summary>
    /// <returns>
    /// Current batch attribute value, returned as string regardless of type.
    /// </returns>
    /// <remarks>
    /// extracted from the original method to avoid code duplication.
    /// </remarks>
    public display PdsBatchAttribValue getBatchAttribValue()
    {
        PdsBatchAttribValue ret;

        if (hasFieldAccess(
                tablenum(PdsBatchAttributes),
                fieldnum(PdsBatchAttributes, PdsBatchAttribValue),
                AccessType::View))
        {
            ret = this.pdsBatchAttrib().storage2Locale(this.PdsBatchAttribValue);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPdsBatchAttribValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the lookup form corresponding to the attribute type.
    /// </summary>
    /// <param name="_formControl">Form control to perform lookup on</param>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public void lookupPdsBatchAttribValue(FormStringControl _formControl)
    /// </syntax>
    /// </remarks>
    public void lookupPdsBatchAttribValue(
        FormStringControl _formControl)
    {
        switch (this.pdsBatchAttrib().PdsBatchAttribType)
        {
            case PdsBatchAttribType::Date :
                _formControl.performFormLookup(PdsBatchAttrib::lookupDate(
                    formGetFromControl(_formControl)));
                break;

            case PdsBatchAttribType::Enumerate :
                PdsBatchAttribEnumValues::lookupPdsBatchAttribEnumValues(
                    _formControl, this.PdsBatchAttribId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run logic required after a field modification. Namely, clear values after an attribute Id change.
    /// </summary>
    /// <param name="_fieldId">Field id of field modified</param>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public void modifiedField(fieldId _fieldId)
    /// </syntax>
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PdsBatchAttributes, PdsBatchAttribId) :
                this.PdsBatchAttribValue = '';

                if (this.checkRelatedBatchAttribQO())
                {
                    this.PdsBatchAttribQualityOrderId = '';
                }

                break;
            case fieldnum(PdsBatchAttributes, PdsBatchAttribValue) :
                if (this.checkRelatedBatchAttribQO())
                {
                    this.PdsBatchAttribQualityOrderId = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding PdsBatchAttrib record to current record.
    /// </summary>
    /// <param name="_forUpdate">Whether to select record for update or not</param>
    /// <returns>Return corresponding PdsBatchAttrib record to current record.</returns>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public PdsBatchAttrib pdsBatchAttrib(boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public PdsBatchAttrib pdsBatchAttrib(boolean _forUpdate = false)
    {
        return PdsBatchAttrib::find(this.PdsBatchAttribId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for PdsBatchAttribMax in related table PdsBatchAttrib.
    /// </summary>
    /// <returns>
    /// The value of PdsBatchAttribMax in related table PdsBatchAttrib.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PdsBatchAttribMax pdsBatchAttribMax()
    {
        PdsBatchAttribMin               batchAttribMin;
        PdsBatchAttribMax               batchAttribMax;
        PdsBatchAttribToleranceAction   batchAttribToleranceAction;
        PdsBatchAttribMultiple          batchAttribMultiple;

        [batchAttribMin, batchAttribMax, batchAttribToleranceAction, batchAttribMultiple] = this.pdsBatchAttrib().getAttribRange(this.ItemId);
        return batchAttribMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for PdsBatchAttribMin in related table PdsBatchAttrib.
    /// </summary>
    /// <returns>
    /// The value of PdsBatchAttribMin in related table PdsBatchAttrib.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PdsBatchAttribMin pdsBatchAttribMin()
    {
        PdsBatchAttribMin               batchAttribMin;
        PdsBatchAttribMax               batchAttribMax;
        PdsBatchAttribToleranceAction   batchAttribToleranceAction;
        PdsBatchAttribMultiple          batchAttribMultiple;

        [batchAttribMin, batchAttribMax, batchAttribToleranceAction, batchAttribMultiple] = this.pdsBatchAttrib().getAttribRange(this.ItemId);
        return batchAttribMin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for PdsBatchAttribTarget in related table PdsBatchAttrib.
    /// </summary>
    /// <returns>
    /// The value of PdsBatchAttribTarget in related table PdsBatchAttrib.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PdsBatchAttribTarget pdsBatchAttribTarget()
    {
        return this.pdsBatchAttrib().pdsBatchAttribTargetEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsFindAttrib</Name>
				<Source><![CDATA[
    //FS PDS Batch Attrib
    public boolean pdsFindAttrib(ItemId _itemId, PdsBatchAttribId _attribId)
    {
        PdsBatchAttribByItem        byItem;
        PdsBatchAttribByAttribGroup byGroup;
        PdsBatchAttrib              byAll;
        boolean ret = false;

        while select PdsBatchAttribCode, PdsBatchAttribRelation
            from byItem
            where byItem.PdsBatchAttribItemId == _itemId
        {
            if (byItem.PdsBatchAttribCode == TableGroupAll::Table
                && byItem.PdsBatchAttribRelation == _attribId)
            {
                ret = true;
                break;
            }

            if (byItem.PdsBatchAttribCode == TableGroupAll::GroupId)
            {
                select firstonly RecId
                    from   byGroup
                    where  byGroup.PdsBatchAttribGroupId
                            == byItem.PdsBatchAttribRelation
                        && byGroup.PdsBatchAttribAttribId == _attribId;

                if (byGroup.RecId)
                {
                    ret = true;
                    break;
                }
            }

            if (byItem.PdsBatchAttribCode == TableGroupAll::All)
            {
                select firstonly RecId
                    from  byAll
                    where byAll.PdsBatchAttribId == _attribId;

                if (byAll.RecId)
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run logic required after a field validation.
    /// </summary>
    /// <returns> Validation passed or failed.</returns>
    /// <param name="_fieldIdToCheck">Field id of field check.</param>
    /// <remarks>
    /// <syntax>
    /// public server boolean validateField(fieldId _fieldIdToCheck)
    /// </syntax>
    /// </remarks>
    //FS PDS Batch Attrib
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean         ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(PdsBatchAttributes, PdsBatchAttribId) :
                    if (!this.pdsFindAttrib(this.ItemId, this.PdsBatchAttribId))
                    {
                        ret = checkFailed("@PRO1681");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if record can be written to db.
    /// </summary>
    /// <returns>Whether record validates properly.</returns>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public boolean validateWrite()
    /// </syntax>
    /// </remarks>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.PdsBatchAttribValue)
            {
                
                if (InventParameters::find().AllowEmptyAttributeValues)
                {
                    return ret;
                }
                ret = checkFailed(strfmt("@SYS26332", "@PRO1548"));
            }
        }

        ret = ret && this.pdsBatchAttrib()
                        .isValidAttribValueType(this.PdsBatchAttribValue);

        ret = ret && this.pdsBatchAttrib()
                        .checkAttribCriteria(
                            this.PdsBatchAttribValue,
                            this.ItemId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInheritance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the batch attribute value of the batch can be transferred to co-products and finished goods.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item related to the attribute.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The ID of the batch containing the attribute.
    /// </param>
    /// <param name="_pdsBatchAttribId">
    ///     The ID of the attribute that contains the value.
    /// </param>
    /// <returns>
    ///     true if the attribute value allows to be inherited; otherwise, false.
    /// </returns>
    public static boolean allowInheritance(
            ItemId              _itemId,
            InventBatchId       _inventBatchId,
            PdsBatchAttribId    _pdsBatchAttribId)
    {
        PdsBatchAttributes      pdsBatchAttributes;

        if (_itemId
            && _inventBatchId
            && _pdsBatchAttribId)
        {
            select firstonly RecId
                from   pdsBatchAttributes
                where  pdsBatchAttributes.ItemId            == _itemId
                    && pdsBatchAttributes.InventBatchId     == _inventBatchId
                    && pdsBatchAttributes.PdsBatchAttribId  == _pdsBatchAttribId
                    && pdsBatchAttributes.PDSInherited;
        }

        return  !pdsBatchAttributes.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalCond</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Evaluates the range of a batch attribute per criteria selection.
    /// </summary>
    /// <param name="_attribId">
    ///     The ID of the attribute to evaluate.
    /// </param>
    /// <param name="_batchValue">
    ///     The value to evaluate.
    /// </param>
    /// <param name="_opr">
    ///     The operator to use.
    /// </param>
    /// <param name="_condValue">
    ///     The criterion value.
    /// </param>
    /// <returns>
    ///     true if the value provided is allowed per the criteria.
    /// </returns>
    public static boolean evalCond(
        PdsBatchAttribId    _attribId,
        PdsBatchAttribValue _batchValue,
        PdsBatchAttribOpr   _opr,
        PdsBatchAttribValue _condValue)
    {
        boolean         ret;
        PdsBatchAttrib  pdsBatchAttrib = PdsBatchAttrib::find(_attribId);

        switch (pdsBatchAttrib.PdsBatchAttribType)
        {
            case PdsBatchAttribType::Enumerate:
                ret =  PdsBatchAttributes::evalCondInt(
                        int2str(PdsBatchAttribEnumValues::find(
                            _attribId, _batchValue).PdsAttribEnumSeq),
                        _opr,
                        int2str(PdsBatchAttribEnumValues::find(
                            _attribId, _condValue).PdsAttribEnumSeq));
                break;
            case PdsBatchAttribType::Integer:
                ret = PdsBatchAttributes::evalCondInt(_batchValue, _opr, _condValue);
                break;
            case PdsBatchAttribType::Realnumber:
                ret = PdsBatchAttributes::evalCondNum(_batchValue, _opr, _condValue);
                break;
            case PdsBatchAttribType::String:
                ret = PdsBatchAttributes::evalCondStr(_batchValue, _opr, _condValue);
                break;
            case PdsBatchAttribType::Date:
                ret = PdsBatchAttributes::evalCondDate(_batchValue, _opr, _condValue);
                break;
            default:
                ret = PdsBatchAttributes::evalCondStr(_batchValue, _opr, _condValue);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalCondDate</Name>
				<Source><![CDATA[
    private static boolean evalCondDate(
        PdsBatchAttribValue _batchValueStr,
        PdsBatchAttribOpr _opr,
        PdsBatchAttribValue _condValueStr)
    {
        boolean ret;

        date batchValue = num2date(str2int(_batchValueStr));
        date condValue  = num2date(str2int(_condValueStr));

        switch (_opr)
        {
            case PdsBatchAttribOpr::empty:
                ret = true;
                break;

            case PdsBatchAttribOpr::equal:
                ret = (batchValue == condValue);
                break;
            case PdsBatchAttribOpr::NotEqual:
                ret = (batchValue != condValue);
                break;
            case PdsBatchAttribOpr::Less:
                ret = (batchValue < condValue);
                break;
            case PdsBatchAttribOpr::More:
                ret = (batchValue > condValue);
                break;
            case PdsBatchAttribOpr::LessEqual:
                ret = (batchValue <= condValue);
                break;
            case PdsBatchAttribOpr::MoreEqual:
                ret = (batchValue >= condValue);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalCondInt</Name>
				<Source><![CDATA[
    private static boolean evalCondInt(
        PdsBatchAttribValue _batchValue,
        PdsBatchAttribOpr   _opr,
        PdsBatchAttribValue _condValue)
    {
        boolean ret;
        int batchValue, condValue;

        batchValue = str2int(_batchValue);
        condValue = str2int(_condValue);

        switch (_opr)
        {
            case PdsBatchAttribOpr::empty:
                ret = true;
                break;

            case PdsBatchAttribOpr::equal:
                ret = (batchValue == condValue);
                break;
            case PdsBatchAttribOpr::NotEqual:
                ret = (batchValue != condValue);
                break;
            case PdsBatchAttribOpr::Less:
                ret = (batchValue < condValue);
                break;
            case PdsBatchAttribOpr::More:
                ret = (batchValue > condValue);
                break;
            case PdsBatchAttribOpr::LessEqual:
                ret = (batchValue <= condValue);
                break;
            case PdsBatchAttribOpr::MoreEqual:
                ret = (batchValue >= condValue);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalCondNum</Name>
				<Source><![CDATA[
    private static  boolean evalCondNum(
        PdsBatchAttribValue _batchValue,
        PdsBatchAttribOpr _opr,
        PdsBatchAttribValue _condValue)
    {
        boolean ret;
        real    batchValue, condValue;

        batchValue = str2num(_batchValue);
        condValue = str2num(_condValue);

        switch (_opr)
        {
            case PdsBatchAttribOpr::empty:
                ret = true;
                break;

            case PdsBatchAttribOpr::equal:
                ret = (batchValue == condValue);
                break;
            case PdsBatchAttribOpr::NotEqual:
                ret = (batchValue != condValue);
                break;
            case PdsBatchAttribOpr::Less:
                ret = (batchValue < condValue);
                break;
            case PdsBatchAttribOpr::More:
                ret = (batchValue > condValue);
                break;
            case PdsBatchAttribOpr::LessEqual:
                ret = (batchValue <= condValue);
                break;
            case PdsBatchAttribOpr::MoreEqual:
                ret = (batchValue >= condValue);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalCondStr</Name>
				<Source><![CDATA[
    private static  boolean evalCondStr(
        PdsBatchAttribValue _batchValue,
        PdsBatchAttribOpr   _opr,
        PdsBatchAttribValue _condValue)
    {
        boolean ret;

        switch (_opr)
        {
            case PdsBatchAttribOpr::empty:
                ret = true;
                break;

            case PdsBatchAttribOpr::equal:
                ret = (_batchValue == _condValue);
                break;
            case PdsBatchAttribOpr::NotEqual:
                ret = (_batchValue != _condValue);
                break;
            case PdsBatchAttribOpr::Less:
                ret = (_batchValue < _condValue);
                break;
            case PdsBatchAttribOpr::More:
                ret = (_batchValue > _condValue);
                break;
            case PdsBatchAttribOpr::LessEqual:
                ret = (_batchValue <= _condValue);
                break;
            case PdsBatchAttribOpr::MoreEqual:
                ret = (_batchValue >= _condValue);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    //FS PDS Batch Attrib
    public static boolean exist(
            ItemId              _itemId,
            InventBatchId       _inventBatchId,
            PdsBatchAttribId    _pdsBatchAttribId)
    {
        return _itemId
            && _inventBatchId
            && _pdsBatchAttribId
            && (select firstonly RecId
                from   pdsBatchAttributes
                where  pdsBatchAttributes.ItemId            == _itemId
                    && pdsBatchAttributes.InventBatchId     == _inventBatchId
                    && pdsBatchAttributes.PdsBatchAttribId  == _pdsBatchAttribId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAny</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether any attribute exists with the specified reference.
    /// </summary>
    /// <param name="_itemId">
    ///     The reference to an ID of a product in the current company.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The reference to an ID of a batch.
    /// </param>
    /// <returns>
    ///     true if any attribute exists linked to the specified arguments; otherwise, false.
    /// </returns>
    public static boolean existsAny(ItemId _itemId, InventBatchId _inventBatchId)
    {
        PdsBatchAttributes pdsBatchAttributes;

        if (!_itemId || !_inventBatchId)
        {
            return false;
        }

        select firstonly RecId
            from   pdsBatchAttributes
            where  pdsBatchAttributes.ItemId == _itemId
                && pdsBatchAttributes.InventBatchId == _inventBatchId;

        return (pdsBatchAttributes.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    //FS PDS Batch Attrib
    public static PdsBatchAttributes find(
            ItemId              _itemId,
            InventBatchId       _inventBatchId,
            PdsBatchAttribId    _pdsBatchAttribId,
            boolean             _forUpdate = false)
    {
        PdsBatchAttributes  pdsBatchAttributes;

        if (!prmisdefault(_forUpdate))
        {
            pdsBatchAttributes.selectForUpdate(_forUpdate);
        }

        select firstonly pdsBatchAttributes
            where  pdsBatchAttributes.ItemId            == _itemId
                && pdsBatchAttributes.InventBatchId     == _inventBatchId
                && pdsBatchAttributes.PdsBatchAttribId  == _pdsBatchAttribId;

        return pdsBatchAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckBatchAtribReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory batch can be reserved based on batch attributes.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to retrieve batch attributes.
    /// </param>
    /// <param name="_custAcct">
    /// The customer for which to retrieve batch attributes.
    /// </param>
    /// <param name="_inventBatchId">
    /// The inventory batch to validate.
    /// </param>
    /// <param name="_prevAttrSel">
    /// A <c>PdsBatchAttribAttribSelect</c> record to be used instead of standard attributes.
    /// </param>
    /// <returns>
    /// True if the inventory batch can be reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method allows the user to use the Attribute list from the Batch attributes
    /// reservation form, in place of the standard attribute combinations from item
    /// and customer attributes.
    /// </remarks>
    public static boolean pdsCheckBatchAtribReserve(
        ItemId                  _itemId,
        CustAccount             _custAcct,
        InventBatchId           _inventBatchId,
        TmpPdsBatchAttribSelect _prevAttrSel  = null)
    {
        boolean                     ret = true;
        TmpPdsBatchAttribSelect     tmpAttrSel;
        PdsBatchAttributes          pdsBatchAttributes;

        tmpAttrSel.setTmpData(_prevAttrSel);
        select firstonly tmpAttrSel;
        if (!tmpAttrSel.RecId)
        {
            tmpAttrSel.setTmpData(InventTable::pdsFillDefaultBatchAttribforItem(
                _itemId,
                _custAcct));
        }

        while select tmpAttrSel
        {
            pdsBatchAttributes = PdsBatchAttributes::find(
                                    _itemId,
                                    _inventBatchId,
                                    tmpAttrSel.PdsBatchAttribId);

            if (!pdsBatchAttributes)
            {
                ret = false;
                break;
            }

            if (!PdsBatchAttributes::evalCond(pdsBatchAttributes.PdsBatchAttribId,
                            pdsBatchAttributes.PdsBatchAttribValue,
                            tmpAttrSel.PdsBatchAttribOpr1,
                            tmpAttrSel.PdsBatchAttribValue1 ))
            {
                ret = false;
                break;
            }
            if (tmpAttrSel.PdsBatchAttribOpr2 != PdsBatchAttribOpr::empty
                && !PdsBatchAttributes::evalCond(pdsBatchAttributes.PdsBatchAttribId,
                            pdsBatchAttributes.PdsBatchAttribValue,
                            tmpAttrSel.PdsBatchAttribOpr2,
                            tmpAttrSel.PdsBatchAttribValue2))
            {
                ret = false;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the default batch attributes for the selected inventory batch.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value of the selected item.
    /// </param>
    /// <param name="_inventBatchId">
    /// The <c>InventBatchId</c> value of the selected inventory batch.
    /// </param>
    /// <param name="_batchAttribId">
    /// The <c>PdsBatchAttribId</c> value of the selected attribute.
    /// </param>
    /// <returns>
    /// A <c>PdsBatchAttributes</c> record of the inserted attributes.
    /// </returns>
    public static PdsBatchAttributes insertDefaultAttributes(
        ItemId           _itemId,
        InventBatchId    _inventBatchId,
        PdsBatchAttribId _batchAttribId)
    {
        PdsBatchAttributes pdsBatchAttributes = PdsBatchAttributes::find(_itemId,  _inventBatchId,  _batchAttribId,  true);

        if (!pdsBatchAttributes.RecId)
        {
            PdsBatchAttribInsertDefaults::insertDefaultAttributes( _itemId, _inventBatchId);
            pdsBatchAttributes = PdsBatchAttributes::find(_itemId,  _inventBatchId,  _batchAttribId,  true);
        }

        return pdsBatchAttributes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@PDS1069</DeveloperDocumentation>
	<Label>@PRO1607</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InventBatchId</TitleField1>
	<TitleField2>PdsBatchAttribId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PdsBatchAttributesIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PdsBatchAttributesIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttributes</Name>
			<Label>@PRO1588</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribQualityOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSGenealogy</Name>
			<Label>@PSC182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSInherited</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribQualityOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribQualityOrderId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInherited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInherited</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PdsBatchAttributesIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventBatchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchId</Name>
					<SourceEDT>InventBatchId</SourceEDT>
					<Field>InventBatchId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>itemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQualityOrderTables</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribQualityOrderId</Name>
					<SourceEDT>PdsBatchAttribQualityOrderId</SourceEDT>
					<Field>PdsBatchAttribQualityOrderId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>