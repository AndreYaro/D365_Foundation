<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accDistributionTemplateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>AccountingDistributionTemplateRecId</c> value that is associated with an invoice
    /// line.
    /// </summary>
    /// <returns>
    /// The <c>AccountingDistributionTemplateRecId</c> value that is associated with the invoice line.
    /// </returns>
    public AccountingDistributionTemplateRecId accDistributionTemplateRecId()
    {
        if (this.isNonPO())
        {
            return this.AccountingDistributionTemplate;
        }
        else if (this.isAdvance())
        {
            return this.purchTable().AccountingDistributionTemplate;
        }
        else
        {
            return this.purchLine().AccountingDistributionTemplate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a posting account for the invoice line.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting account number for the account type of the invoice line.
    /// </returns>
    LedgerDimensionDefaultAccount accountItemLedgerDimension(InventAccountType _inventAccountType)
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(_inventAccountType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_inventAccountType">An inventory account type.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            this.ItemId,
            InventTable::itemGroupIdByItemId(this.ItemId),
            this.ProcurementCategory,
            this.InvoiceAccount,
            VendTable::find(this.InvoiceAccount).VendGroup,
            this.TaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDeliveryAddressFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not to enable delivery address fields for the current record.
    /// </summary>
    /// <returns> True if there is no PurchId specified on the line.</returns>
    public boolean enableDeliveryAddressFields()
    {
        return this.isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur _amountCur, Qty _qty, TransDate _transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur amountExcludingTax(AmountCur _amountCur, Qty _qty, TransDate _transDate, Tax _tax = null, VendDocumentTableMap _parmTable = null, boolean _keepEndDisc = false, boolean _skipRounding = false)
    {
        Percent cashDiscPercent;
        PurchUnit purchUnit;
        TaxBaseCur taxOrigin;
        DiscPct discPercent;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        // if the document doesn't have taxes then no need to continue.
        if (_tax && _tax.skipTaxCalculations() && !TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return _amountCur;
        }

        boolean taxLessCashDisc = TaxCashDiscountParametersHelper::isCashDiscDeductedBeforeTaxCalculation(tableNum(VendInvoiceInfoTable), this.vendInvoiceInfoTable().RecId);

        if (taxLessCashDisc)
        {
            if (this.VendDocumentLineMap::isNonPO())
            {
                cashDiscPercent = CashDisc::find(VendDocumentLineMap::header(this).CashDiscCode).Percent;
            }
            else if (!this.isAdvance())
            {
                cashDiscPercent = CashDisc::find(this.purchTable().CashDisc).Percent;
            }
        }
        // The Origin tax only works as the line amount excluding tax if the amount sent in is equal to the line amount.
        if (this.LineAmount == _amountCur)
        {
            // The calculation engine calculates the correct tax origin (amount excluding tax).
            if (_tax)
            {
                // try and get the origin from the tax instance.
                taxOrigin = _tax.getOriginForSourceLine(this.TableId, this.RecId, true, _amountCur);
            }

            // If we didn't get an origin, try and get the origin from Taxtrans because TaxUncommitted may be deleted after posting.
            if (!taxOrigin && !TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                taxOrigin = TaxTrans::getOriginForSourceDocumentLine(tableNum(VendInvoiceTrans), this.SourceDocumentLine, true, _amountCur);
            }

            // if we didn't get an origin, try and get the origin from TaxUncommitted.
            if (!taxOrigin)
            {
                taxOrigin = TaxUncommitted::getOriginForSourceLine(this.TableId, this.RecId, true, _amountCur);
            }

            if (taxOrigin)
            {
                // taxOrigin was retrieved from taxes and may include header discounts

                // Get the header
                if (_parmTable)
                {
                    vendInvoiceInfoTable = _parmTable;
                }
                else
                {
                    vendInvoiceInfoTable = this.vendInvoiceInfoTable();
                }

                // Get the header discount
                if (!vendInvoiceInfoTable.ReCalculate || _keepEndDisc)
                {
                    if (vendInvoiceInfoTable.EndDisc != 0)
                    {
                        // Invoice stores a discount amount, not a percent - need to recalculate from scratch
                        taxOrigin = 0;
                    }
                }
                // PO discount should be ignored for prepayment invoice
                else if (VendAdvanceInvoiceIngoreDiscOnPOFlight::instance().isEnabled() && vendInvoiceInfoTable.isAdvance())
                {
                    discPercent = 0;
                }
                else if (!this.VendDocumentLineMap::isNonPO())
                {
                    discPercent = this.purchTable().DiscPercent;
                }
                else if (!vendInvoiceInfoTable.isNonPO())
                {
                    discPercent = vendInvoiceInfoTable.purchTable().DiscPercent;
                }

                // Put back any header discounts that were taken out
                if (taxOrigin && (cashDiscPercent || discPercent) && cashDiscPercent != 100 && discPercent != 100)
                {
                    RoundingLineAmountContext context = RoundingLineAmountContext::current();
                    if (context && context.parmSkipRoundingLineAmount())
                    {
                        if (this.endDisc() && discPercent)
                        {
                            taxOrigin = taxOrigin / (1 - cashDiscPercent / 100) / (1 - discPercent / 100);
                        }
                        else
                        {
                            taxOrigin = taxOrigin / (1 - cashDiscPercent / 100);
                        }
                    }
                    else
                    {
                        if (this.endDisc() && discPercent)
                        {
                            taxOrigin = CurrencyExchangeHelper::amount(taxOrigin / (1 - cashDiscPercent / 100) / (1 - discPercent / 100), this.CurrencyCode);
                        }
                        else
                        {
                            taxOrigin = CurrencyExchangeHelper::amount(taxOrigin / (1 - cashDiscPercent / 100), this.CurrencyCode);
                        }
                    }
                }
            }
        }

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            // Get the header
            if (_parmTable)
            {
                vendInvoiceInfoTable = _parmTable;
            }
            else
            {
                vendInvoiceInfoTable = this.vendInvoiceInfoTable();
            }

            // Get the header discount
            if (!vendInvoiceInfoTable.ReCalculate || _keepEndDisc)
            {
                if (vendInvoiceInfoTable.EndDisc != 0)
                {
                    // Invoice stores a discount amount, not a percent - need to recalculate from scratch
                    taxOrigin = 0;
                }
            }
            else if (!this.VendDocumentLineMap::isNonPO())
            {
                discPercent = this.purchTable().DiscPercent;
            }
            else if (!vendInvoiceInfoTable.isNonPO())
            {
                discPercent = vendInvoiceInfoTable.purchTable().DiscPercent;
            }

            taxOrigin = Tax::baseAmountExclTax_IN(this, _transDate, this.LineAmount, _amountCur, discPercent, _tax);

            RoundingLineAmountContext context = RoundingLineAmountContext::current();
            if (context && context.parmSkipRoundingLineAmount())
            {
                if (this.LineAmount == _amountCur)
                {
                    // Put back any header discounts that were taken out
                    if (taxOrigin && (cashDiscPercent || discPercent) && cashDiscPercent != 100 && discPercent != 100)
                    {
                        taxOrigin = taxOrigin / (1 - cashDiscPercent / 100) / (1 - discPercent / 100);
                    }
                }
            }
            else
            {
                if (this.LineAmount == _amountCur)
                {
                    // Put back any header discounts that were taken out
                    if (taxOrigin && (cashDiscPercent || discPercent) && cashDiscPercent != 100 && discPercent != 100)
                    {
                        taxOrigin = CurrencyExchangeHelper::amount(taxOrigin / (1 - cashDiscPercent / 100) / (1 - discPercent / 100), this.CurrencyCode);
                    }
                }
                else
                {
                    taxOrigin = CurrencyExchangeHelper::amount(taxOrigin, this.currencyCode);
                }
            }
        }
        //</GIN>

        // as a last resort - calculate an origin on the fly. This origin will not be correct in all scenarios.
        if (!taxOrigin)
        {
            if (this.isNonPO() || this.isAdvance())
            {
                purchUnit = this.PurchUnit;
            }
            else
            {
                purchUnit = this.purchLine().PurchUnit;
            }

            taxOrigin = Tax::baseAmountExclTax(this.TaxGroup,
                                            this.TaxItemGroup,
                                            _transDate,
                                            this.CurrencyCode,
                                            _amountCur,
                                            TaxModuleType::Purch,
                                            _qty,
                                            purchUnit,
                                            this.ItemId,
                                            TaxDirection::OutgoingTax,
                                            cashDiscPercent,
                                            true);
        }

        if (taxOrigin && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxDocument taxDocument = TaxBusinessService::calculateTax(
                TaxableDocumentObject::construct(
                    TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.vendInvoiceInfoTable())));
            if (taxDocument)
            {
                ITaxDocumentLine taxDocumentLine = taxDocument.findLineBySource(this.TableId, this.RecId);
                if (taxDocumentLine)
                {
                    taxOrigin = taxOrigin - taxDocumentLine.getInclTax().amountTransactionCurrency();
                }
            }
        }

        return taxOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the MST amount for a given amount.
    /// </summary>
    /// <param name="amountCur">
    /// The amount to convert.
    /// </param>
    /// <param name="exchRateDate">
    /// The date used to calculate the exchange rate.
    /// </param>
    /// <param name="exchRate">
    /// The exchange rate to use if known.
    /// </param>
    /// <param name="exchrateSecondary">
    /// The secondary exchange rate to use if known.
    /// </param>
    /// <param name="exchRatesTriangulation">
    /// The exchange rate triangulation to use if known.
    /// </param>
    /// <returns>
    /// The amount in MST.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST amountMST(AmountCur _amountCur,
                               TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                               ExchRate _exchRate = 0,
                               ExchrateSecondary _exchrateSecondary = 0,
                               ExchRatesTriangulation _exchRatesTriangulation = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().amountMST(_amountCur, _exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceToInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the difference between the purchase order line net amount and the sum of the posted and
    /// pending invoices for the purchase order line.
    /// </summary>
    /// <returns>
    /// Returns the difference between the purchase order line net amount and sum of the posted and pending invoices
    /// for the purchase order line.
    /// </returns>
    public display LineAmount balanceToInvoice()
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId,false);
        LineAmount balanceToInvoice;
        LineAmount sumPostedPending;

        if (vendInvoiceMatchingLine.RecId !=0)
        {
            sumPostedPending = this.extendedPriceVarianceAmount() + vendInvoiceMatchingLine.ExpectedLineAmount;
            balanceToInvoice = vendInvoiceMatchingLine.ExpectedLineAmount - sumPostedPending;
        }

        return balanceToInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty _qty = this.ReceiveNow)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineAmount</Name>
				<Source><![CDATA[
    AmountCur calculateLineAmount(Qty qty = this.ReceiveNow, PurchLine _purchLine = null)
    {
        return this.VendDocumentLineMap::calculatePrice2LineAmount(qty, false, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.ReceiveNow, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice2LineAmount</Name>
				<Source><![CDATA[
    AmountCur calculatePrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation, PurchLine _purchLine = null)
    {
        return this.VendDocumentLineMap::calculatePrice2LineAmount(_qty, _forceLineAmountCalculation, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    boolean canEditDisc()
    {
        return this.isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForInvalidInvoiceLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any invoice lines tied to the given header have an invalid
    /// <c>InvoiceLineNum</c> value of zero.
    /// </summary>
    /// <returns>
    /// Returns true if an invoice line has a <c>InvoiceLineNum</c> value of zero, otherwise false.
    /// </returns>
    public static boolean checkForInvalidInvoiceLineNum(TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.TableRefId == _tableRefId
                && vendInvoiceInfoLine.InvoiceLineNum == 0;

        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLineHasAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice line has any attachments or not.
    /// </summary>
    /// <returns>
    /// true if the invoice line has attachments; otherwise, false.
    /// </returns>
    public boolean checkIfLineHasAttachments()
    {
        return DocuRef::exist(this.DataAreaId, this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfQuantityMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>VendInvoiceInfoLine</c> table record has a quantity matching discrepancy.
    /// </summary>
    /// <param name="_useSpecifiedQty">
    /// A Boolean value indicating whether the supplied matched quantity should be used or if it should be calculated.
    /// </param>
    /// <param name="_matchedQty">
    /// The matched quantity in purchase unit to use if the quantity shouldn't be automatically calculated.
    /// </param>
    /// <param name="_cwMatchedQty">
    /// The matched quantity in catch weight unit to use if the quantity shouldn't be automatically calculated.
    /// </param>
    /// <returns>
    /// A <c>LastMatchVarianceOptions</c> that indicates quantity matching discrepancy for the current <c>VendInvoiceInfoLine</c> table record.
    /// </returns>
    public display LastMatchVarianceOptions checkIfQuantityMatch(boolean _useSpecifiedQty = false, PurchQty _matchedQty = 0, PdsCWInventQty _cwMatchedQty = 0)
    {
        PurchQty matchedQty;
        PdsCWInventQty cwMatchedQty;
        LastMatchVarianceOptions matchingStatus;
        PurchMatchingPolicyOption lineMatchingPolicy;

        if (this.isNonPO() || this.isAdvance())
        {
            return LastMatchVarianceOptions::Unknown;
        }

        // Matched quantity cannot be specified (must be defaulted to 0) if _useSpecifiedQty is false.
        Debug::assert(_useSpecifiedQty ? true : _matchedQty == 0);
        Debug::assert(_useSpecifiedQty ? true : _cwMatchedQty == 0);

        lineMatchingPolicy = VendInvoiceMatchingLine::find(this.TableId, this.RecId, false).MatchingPolicy;

        if (lineMatchingPolicy == PurchMatchingPolicyOption::NoMatch || lineMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            // when matching policy is two way or not required no icon is displayed
            return LastMatchVarianceOptions::Unknown;
        }

        if (this.purchLine().isIntercompanySalesLineCreditOnly()
            && this.purchTable().PurchaseType == PurchaseType::ReturnItem)
        {
            return LastMatchVarianceOptions::Unknown;
        }

        // three way matching so always show icon
        if (_useSpecifiedQty)
        {
            matchedQty = _matchedQty;
            cwMatchedQty = _cwMatchedQty;
        }
        else
        {
            // get the packing slip quantity
            matchedQty = this.purchQtyMatched();
            cwMatchedQty = this.pdsCWQtyMatched();
        }

        if (matchedQty != this.ReceiveNow || cwMatchedQty != this.PdsCWReceiveNow)
        {
            matchingStatus = LastMatchVarianceOptions::Warning;
        }
        else
        {
            matchingStatus = LastMatchVarianceOptions::OK;
        }

        return matchingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSavedLineQuantities</Name>
				<Source><![CDATA[
    private void resetSavedLineQuantities()
    {
        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            const int MaxRetryAttempts = 5;
            int backOffWait = RandomGenerate::construct().randomInt(50, 1000);

            try
            {
                VendInvoiceInfoLineQuantities vendInvoiceInfoLineQty;
                vendInvoiceInfoLineQty.skipDataMethods(true);
                vendInvoiceInfoLineQty.skipDatabaseLog(true);
                vendInvoiceInfoLineQty.skipEvents(true);
                vendInvoiceInfoLineQty.skipDeleteActions(true);
                vendInvoiceInfoLineQty.skipDeleteMethod(true);

                delete_from vendInvoiceInfoLineQty
                    where vendInvoiceInfoLineQty.LineRefRecId == this.RecId;

            }
            catch (Exception::Deadlock)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() <= MaxRetryAttempts)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() <= MaxRetryAttempts)
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAutomationMatchingWhenInvoiceIsModified</Name>
				<Source><![CDATA[
    private void resetAutomationMatchingWhenInvoiceIsModified()
    {
        if (VendInvoiceAutomationStateManagement::isAutomatedMatchingProcessEnabled())
        {
            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::find(this.ParmId, this.TableRefId);
            DocumentEventLog documentEventLog = DocumentEventLog::findMostRecentLogEntryOfType(tableNum(VendInvoiceInfoTable), vendInvoiceInfoTable.RecId, enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));

            if(documentEventLog.RecId != 0)
            {
                boolean isInvoiceLineFullyMatched = false;
                if (this.purchQtyMatched() == this.ReceiveNow)
                {
                    isInvoiceLineFullyMatched = true;
                }

                VendInvoiceAutomationMatchingLogger matchingLogger =  new VendInvoiceAutomationMatchingLogger();
                matchingLogger.writeManualInvoiceResetAutomationMatchStatusLogWhenInvoiceLineQtyModified(vendInvoiceInfoTable, documentEventLog, isInvoiceLineFullyMatched);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Intrastat settings on vend invoice line.
    /// </summary>
    /// <returns>
    /// true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkIntrastat()
    {
        VendTable vendTable;
        IntrastatParameters intrastatParameters;
        InventTable inventTable;
        boolean isValid = true;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            vendTable = VendTable::find(this.OrderAccount);
            intrastatParameters = IntrastatParameters::find();
            inventTable = this.inventTable();

            //only perform check when vendor is from an EU country
            if (!inventTable.IntrastatExclude && IntrastatCountryRegionParameters::isCountryRegionStateInEU(vendTable.postalAddress()))
            {
                if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && !this.vendInvoiceInfoLine_W().IntrastatFulfillmentDate_HU)
                {
                    isValid = checkFailed(strFmt("@SYS4082059", fieldPName(VendInvoiceInfoLine_W, IntrastatFulfillmentDate_HU)));
                }
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a dimension set that can be applied to the <c>defaultDimension</c> field.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that will be applied to the <c>defaultDimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension </c>field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _defaultDimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void createMarkupTrans(VendInvoiceInfoTable vendInvoiceInfoTable)
    {
        Markup::insertMarkupTrans(HeadingLine::Line,
                              MarkupModuleType::Vend,
                              this,
                              vendInvoiceInfoTable.InvoiceAccount,
                              vendInvoiceInfoTable.MarkupGroup,
                              vendInvoiceInfoTable.CurrencyCode,
                              vendInvoiceInfoTable.vendTable_InvoiceAccount().languageId(),
                              this.ItemId,
                              this.inventTable().purchMarkupGroup(),
                             (this.LineAmount < 0)); // invert sign on creditnotes
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default value to a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record, used to copy values from; optional.
    /// </param>
    public void defaultField(FieldId _fieldId, Common _purchLine = null)
    {
        VendDocumentLineType vendDocumentLineType = this.type(_purchLine);

        if (vendDocumentLineType)
        {
            vendDocumentLineType.defaultField(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values to all fields.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record, used to copy values from; optional.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// An <c>PurchParmUpdate</c> table record, used to copy values from; optional.
    /// </param>
    /// <param name="_receiveNow">
    /// A purchasing quantity; optional.
    /// </param>
    /// <param name="_inventNow">
    /// An inventory quantity; optional.
    /// </param>
    /// <param name="_cwReceiveNow">
    /// A catch weight quantity; optional.
    /// </param>
    /// <param name="_tableToLineFields">
    /// The list of fields that will be copied as a part of a header rolldown; optional.
    /// </param>
    /// <param name="_specQty">
    /// A quantity defaulting method; optional.
    /// </param>
    public void defaultRow(
        PurchLine _purchLine = null,
        PurchParmUpdate _purchParmUpdate = null,
        PurchQty _receiveNow = naReal(),
        InventQty _inventNow = naReal(),
        PdsCWInventQty _cwReceiveNow = naReal(),
        Set _tableToLineFields = null,
        PurchUpdate _specQty = _purchParmUpdate.SpecQty
        )
    {
        VendDocumentLineType vendDocumentLineType = this.type(_purchLine, _purchParmUpdate);

        if (vendDocumentLineType)
        {
            vendDocumentLineType.parmTableToLineFields(_tableToLineFields);
            vendDocumentLineType.parmSpecQty(_specQty);
            vendDocumentLineType.defaultRow(_receiveNow, _inventNow, _cwReceiveNow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defltDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>DimensionDefault</c> value that is associated with this invoice line.
    /// </summary>
    /// <returns>
    /// The <c>DimensionDefault</c> value that is associated with this invoice line.
    /// </returns>
    public DimensionDefault defltDimension()
    {
        if (this.isNonPO() || this.isAdvanceApplication())
        {
            return this.DefaultDimension;
        }
        else if (this.isAdvance() || this.isReverseAdvanceApplication())
        {
            return this.purchTable().DefaultDimension;
        }
        else
        {
            return this.purchLine().DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements deletion of an vendor invoice information line.
    /// </summary>
    /// <remarks>
    /// Deleting may cause the status of the corresponding <c>PurchLine</c> to be set back to Open Order or
    /// Canceled as there may no longer be any corresponding invoice lines for the <c>PurchLine</c>.
    /// </remarks>
    public void delete()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        PurchLine purchLine;
        DocuRef docuRef;
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendInvoiceInfoTable();

        purchLine = PurchLine::findInventTransId(this.InventTransId, true);
        ProjFundingLimitTrackingManager::updateRevenueTrackingVendInvoiceInfoLine(this);
        this.updateRelatedCostControlTransCommittedCost(purchLine);
        super();

        if (purchLine.RecId != 0)
        {
            purchLine.setPurchStatus(true);

            //COR delete "Invoice received" workflow instances
            if (purchLine.PurchaseType == PurchaseType::Purch)
            {
                PurchCORInvReceivedWorkflow::cancelInvReceivedWorkflow(purchLine);
            }
        }

        if (!VendInvoiceTrans::existSourceDocumentLine(this.SourceDocumentLine))
        {
            if (vendInvoiceInfoTable.ParmId !='')
            {
                vendInvoiceInfoTable.updateFromVendLines();
            }

            delete_from docuRef
                where docuRef.RefCompanyId == this.DataAreaId
                   && docuRef.RefTableId == this.TableId
                   && docuRef.RefRecId == this.RecId;
        }

        // The tax information needs to be flushed.
        TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);

        // <GIN>
        // Tax Withhold information needs to be flushed.
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            TaxWithholdUncommitted_IN::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
        }
        // </GIN>

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }

        VendInvoiceAutomationMatchingLogger matchingLogger =  new VendInvoiceAutomationMatchingLogger();
        matchingLogger.writeInvoiceAutomationMatchStatusManually(vendInvoiceInfoTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update related <c>CostControlTransCommittedCost</c> records when
    /// deleting a <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name = "_purchLine">Optional. The <c>PurchLine</c> record used to update related <c>CostControlTransCommittedCost</c> records.</param>
    public void updateRelatedCostControlTransCommittedCost(PurchLine _purchLine = null)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            boolean costControlTransCommittedCostExists = CostControlTransCommittedCost::existOpenBySourceDocumentLine(this.SourceDocumentLine);

            if (this.isNonPO() || this.isAdvance())
            {
                if (costControlTransCommittedCostExists)
                {
                    // Handling project budget forecasts along with committed costs.
                    ProjectCommitmentFacade::deleteProjectCommitments(this.SourceDocumentLine);
                    CostControlTransCommittedCost::deleteBySourceDocumentLine(this.SourceDocumentLine);
                }
                return;
            }

            if (costControlTransCommittedCostExists)
            {
                if (ProjParameters::find().TrackCommittedCostPurchaseOrder == NoYes::Yes)
                {
                    PurchLine purchLine = _purchLine ? _purchLine : this.purchLine();
                    if (!ProjTable::find(purchline.ProjId).UseBudgeting && !VendInvoiceInfoLineCommittedCostFlight::instance().isEnabled())
                    {
                        TaxAmount taxAmt = Tax::calcTaxAmount(purchLine.TaxGroup, purchLine.TaxItemGroup, purchLine.DeliveryDate, purchLine.CurrencyCode, purchLine.LineAmount, TaxModuleType::PurchInvoice);

                        CostControlTransCommittedCost::deleteBySourceDocumentLineAndAmount(purchLine.SourceDocumentLine, -(purchLine.calcLineAmount() + taxAmt));
                        CostControlTransCommittedCost::setTransToOpenBySourceDocumentLineAndAmount(purchLine.SourceDocumentLine, (purchLine.calcLineAmount() + taxAmt));
                    }
                    else
                    {
                        ProjectCommitmentFacade::deleteProjectCommitments(this.SourceDocumentLine);
                    }
                }
                CostControlTransCommittedCost::deleteBySourceDocumentLine(this.SourceDocumentLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return this.VendDocumentLineMap::deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    public display TransDate deliveryDate(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        TransDate deliveryDate;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        NumberOfRecords noSubLines = 1;

        if (VendInvoiceInfoSubLine::subLines(_vendInvoiceInfoLine) == noSubLines)
        {
            select firstonly JournalRefTableId, JournalRefRecId from vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLine.RecId;

            if (vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans))
            {
                deliveryDate = VendPackingSlipTrans::findRecId(vendInvoiceInfoSubLine.JournalRefRecId).vendPackingslipJour().DeliveryDate;
            }
        }

        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount discAmount()
    {
        return this.VendDocumentLineMap::discAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct discPercent()
    {
        return this.VendDocumentLineMap::discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image position that displays the <c>BudgetCheckResult</c> value for the given
    /// <c>VendInvoiceInfoLine</c> record in the <c>BudgetCheckResult</c> values image list.
    /// </summary>
    /// <returns>
    /// An <c>ImageBudgetCheckResult</c> enumeration type that indicates the image position in the
    /// <c>BudgetCheckResult</c> enumeration values image list.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
        return this.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResultText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text that represents the budget check result value for the <c>VendInvoiceInfoLine</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The text that represents the budget check result value for the <c>VendInvoiceInfoLine</c> record.
    /// </returns>
    public display BudgetCheckResultText displayBudgetCheckResultText()
    {
        return BudgetControlResult::getBudgetCheckResultToolTip(this.getBudgetCheckResult());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceLineIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays either the ItemId and Item name or Procurement category name to identify the line
    /// Currently used for the mobile application(s).
    /// </summary>
    /// <returns>A string representing identification of a line.</returns>
    [SysClientCacheDataMethod]
    public display str displayInvoiceLineIdentifier()
    {
        str lineIdentifier = this.ItemId ? this.ItemId + ': ' + this.itemName() : EcoResCategory::find(this.ProcurementCategory).Name;

        return lineIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceLineItemOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays either the ItemId or Procurement category name to identify the line
    /// Currently used for the mobile application(s).
    /// </summary>
    /// <returns>A string representing identification of a line.</returns>
    [SysClientCacheDataMethod]
    public display str displayInvoiceLineItemOrCategory()
    {
        str lineIdentifier = this.ItemId ? this.ItemId : EcoResCategory::find(this.ProcurementCategory).Name;

        return lineIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice number of the <c>VendInvoiceInfoTable</c> record associated with the current <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <returns>Invoice number for the current <c>VendInvoiceInfoLine</c> record.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display VendInvoiceId displayInvoiceNumber()
    {
        return this.vendInvoiceInfoTable().Num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTriangularDeal</Name>
				<Source><![CDATA[
    public display EUROTriangulation displayTriangularDeal()
    {
        return VendInvoiceInfoTable::find(this.ParmId, this.TableRefId).euroTriangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitWeight</Name>
				<Source><![CDATA[
    public display Weight displayUnitWeight()
    {
        return VendInvoiceLineForeignTradeCategory::findVendInvoiceInfoLine(this).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendIDAndName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the combination of teh Vendor Id and name from the <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <returns>Invoice number for the current <c>VendInvoiceInfoLine</c> record.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display str displayVendIDAndName()
    {
        return this.vendInvoiceInfoTable().displayVendIDAndName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>VendInvoiceInfoLine</c> table buffer will update the
    /// associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_original">
    /// The original value of the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    /// true if the associated <c>SourceDocumentDistribution</c> record must be updated; otherwise, false.
    /// </returns>
    public boolean distributionUpdateNeeded(VendInvoiceInfoLine _original)
    {
        return (this.SourceDocumentLine == 0)
                || (this.ReceiveNow != _original.ReceiveNow)
                || (this.PurchUnit != _original.PurchUnit)
                || (this.LineDisc != _original.LineDisc)
                || (this.TaxItemGroup != _original.TaxItemGroup)
                || (this.TaxGroup != _original.TaxGroup)
                || (this.LineAmount != _original.LineAmount)
                || (this.PurchMarkup != _original.PurchMarkup)
                || (this.LineDisc != _original.LineDisc)
                || (this.LinePercent != _original.LinePercent)
                || (this.MultiLnDisc != _original.MultiLnDisc)
                || (this.MultiLnPercent != _original.MultiLnPercent)
                || (this.PriceUnit != _original.PriceUnit)
                || (this.AccountingDistributionTemplate != _original.AccountingDistributionTemplate)
                || (!DimensionDefaultFacade::areEqual(this.DefaultDimension, _original.DefaultDimension))
                || (this.ProcurementCategory != _original.ProcurementCategory)
                || this.hasIndirectTaxFieldChanged_IN(_original)
                || this.PSAReleaseAmount != _original.PSAReleaseAmount
                || this.PSAReleasePercent != _original.PSAReleasePercent
                || this.PSARetainageAmount != _original.PSARetainageAmount
                || this.PSARetainagePercent != _original.PSARetainagePercent
                || this.PSAIsFinal != _original.PSAIsFinal
                || this.distributionUpdateNeededForTaxIntegration(_original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionUpdateNeededForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>VendInvoiceInfoLine</c> table buffer will update the
    /// associated <c>SourceDocumentDistribution</c> table when tax integration is enabled.
    /// </summary>
    /// <param name="_original">
    /// The original value of the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    /// true if the associated <c>SourceDocumentDistribution</c> record must be updated for tax integration; otherwise, false.
    /// </returns>
    protected boolean distributionUpdateNeededForTaxIntegration(VendInvoiceInfoLine _original)
    {
        return Tax::isTaxIntegrationEnabledforBusinessProcess(TaxIntegrationBusinessProcess::Purchase)
            && (this.InventDimId != _original.InventDimId
                || this.InventTransId != _original.InventTransId
                || this.OverrideSalesTax != _original.OverrideSalesTax
                || this.DeliveryPostalAddress != _original.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentId</Name>
				<Source><![CDATA[
    public Num documentId(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        Num documentId;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        NumberOfRecords oneSubLines = 1;
        NumberOfRecords zeroSubLines = 0;

        switch (VendInvoiceInfoSubLine::subLines(_vendInvoiceInfoLine))
        {
            case zeroSubLines:
                documentId = '';
                break;

            case oneSubLines:
                select firstonly DocumentId from vendInvoiceInfoSubLine
                    where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLine.RecId;
                documentId = vendInvoiceInfoSubLine.DocumentId;
                break;

            default:
                documentId = "@SYS342615"; //More than one journal line attached to the parm line
                break;
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>Name</c> field from the order line for the category based lines.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the field is being set in the table.
    /// </param>
    /// <param name="_name">
    /// The value to be set in the table.
    /// </param>
    /// <returns>
    /// The name field from the order line for order-based lines; otherwise, the description field from the
    /// invoice line.
    /// </returns>
    public edit ItemFreeTxt editName(boolean _set = false, ItemFreeTxt _name = this.VendDocumentLineMap::name())
    {
        if (_set)
        {
            this.Description = _name;
        }

        return _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPurchUnit</Name>
				<Source><![CDATA[
    edit PurchUnit editPurchUnit(boolean _set, PurchUnit _purchUnit)
    {
        PurchUnit originalUnit;

        if (_set)
        {
            originalUnit = this.PurchUnit;
            this.PurchUnit = _purchUnit;

            if (!this.validateField(fieldNum(VendInvoiceInfoLine, PurchUnit)))
            {
                this.PurchUnit = originalUnit;
            }
        }

        if (this.isNonPO())
        {
            return this.PurchUnit;
        }

        return this.purchLine().PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code by using a <c>ReasonCodeMap</c> object.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return this.VendDocumentLineMap::editReasonCode(_set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment using a <c>ReasonCodeMap</c> object.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the reason comment is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when theee <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return this.VendDocumentLineMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is link between this record and corrected record, e.g. this record is correcting record.
    /// </summary>
    /// <returns>
    /// True if link exists; Otherwise, false.
    /// </returns>
    public boolean existsCorrLink_RU()
    {
        return this.RecId &&
                (select firstonly RecId from vendInvoiceInfoLineCorrLink_RU
                    where vendInvoiceInfoLineCorrLink_RU.VendInvoiceInfoLineRecId == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedPOAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the product of the invoice quantity times the expected invoice net unit
    /// price.
    /// </summary>
    /// <returns>
    /// The expected invoice amount.
    /// </returns>
    public display ExpectedPOAmount expectedPOAmount()
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId,false);
        ExpectedPOAmount expectedPOAmount;

        if (vendInvoiceMatchingLine.RecId !=0)
        {
            expectedPOAmount = this.ReceiveNow * vendInvoiceMatchingLine.expectedNetUnitPrice();
        }

        return expectedPOAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPriceVarianceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the <c>ExtendedPriceVarianceAmount</c> value from the
    /// <c>VendInvoiceMatchingLine</c> record.
    /// </summary>
    /// <returns>
    /// The <c>ExtendedPriceVarianceAmount</c> value.
    /// </returns>
    public display ExtendedPriceVarianceAmount extendedPriceVarianceAmount()
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId,false);
        ExtendedPriceVarianceAmount extendedPriceVarianceAmount;

        if (vendInvoiceMatchingLine.RecId !=0)
        {
            VendInvoiceTrans vendInvoiceTrans;

            select sum(LineAmountTax) from vendInvoiceTrans
                where vendInvoiceTrans.InventTransId == this.InventTransId;

            if (vendInvoiceTrans && this.vendInvoiceInfoTable().purchTable().InclTax)
            {
                extendedPriceVarianceAmount = this.LineAmount + vendInvoiceMatchingLine.ExtendedPriceVarianceAmount + vendInvoiceTrans.LineAmountTax;
            }
            else
            {
                extendedPriceVarianceAmount = this.LineAmount + vendInvoiceMatchingLine.ExtendedPriceVarianceAmount;
            }
        }

        return extendedPriceVarianceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPriceVarianceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the <c>ExtendedPriceVarianceAmountMST</c> value from the
    /// <c>VendInvoiceMatchingLine</c> record.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record assocatied with this <c>PurchParmLine</c> record.
    /// </param>
    /// <returns>
    /// The <c>ExtendedPriceVarianceAmountMST</c> value.
    /// </returns>
    public display ExtendedPriceVarianceAmountMST extendedPriceVarianceAmountMST(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine= VendInvoiceMatchingLine::find(this.TableId, this.RecId, false);
        ExtendedPriceVarianceAmountMST extendedPriceVarianceAmountMST;

        if (vendInvoiceMatchingLine.RecId !=0)
        {
            extendedPriceVarianceAmountMST = this.lineAmountMST(_vendInvoiceInfoTable.updateDate(),_vendInvoiceInfoTable.ExchRate,
            _vendInvoiceInfoTable.ExchRateSecondary,Currency::noYes2UnknownNoYes(_vendInvoiceInfoTable.euroTriangulation)) + vendInvoiceMatchingLine.ExtendedPriceVarianceAmountMST;
        }

        return extendedPriceVarianceAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPriceVarianceDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the difference between the sum of the invoice line amounts for all current, pending and posted invoice lines
    /// and the expected line amount expressed as a percentage.
    /// </summary>
    /// <returns>
    /// Returns the extended price variance percentage.
    /// </returns>
    /// <remarks>
    /// A positive variance is considered undesirable. The value is intentionally not rounded for maximum precision.
    /// </remarks>
    public display ExtendedPriceVariancePercent extendedPriceVarianceDisplay()
    {
        Percent extendedPriceVariancePercent = this.extendedPriceVariancePercent();

        if (extendedPriceVariancePercent == Global::realMax())
        {
            return Global::maxUIPercent();
        }

        if (extendedPriceVariancePercent == -Global::realMax())
        {
            return -Global::maxUIPercent();
        }

        return extendedPriceVariancePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPriceVarianceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an <c>LastMatchVarianceOptions</c> that indicates whether there was an extended price variance that is larger than
    /// the allowed variance.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> table record associated with the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    /// The LastMatchVarianceOptions::Unknown enumeration value if extended price matching is not enabled; the
    /// LastMatchVarianceOptions::OK enumeration value if the variance is in the acceptable limit; otherwise, the
    /// LastMatchVarianceOptions::Error enumeration value
    /// </returns>
    public display LastMatchVarianceOptions extendedPriceVarianceStatus(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendParameters vendParameters = VendParameters::find();
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        LineAmount amountVariance;


        if (this.isNonPO())
        {
            return LastMatchVarianceOptions::Unknown;
        }

        vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId);

        if (vendInvoiceMatchingLine.RecId == 0 || vendInvoiceMatchingLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch)
        {
            return LastMatchVarianceOptions::Unknown;
        }

        // we want to report a matching discrepancy only if this is believed to be the last invoice to avoid the user
        // from having to approve the variance on partial invoices.
        if ((vendParameters.useExtendedPriceMatching() != ExtendedPriceMatching::None) && (abs(this.RemainBefore) > abs(this.ReceiveNow)))
        {
            return LastMatchVarianceOptions::OK;
        }

        switch (vendParameters.useExtendedPriceMatching())
        {
            case ExtendedPriceMatching::None:

                return LastMatchVarianceOptions::Unknown;

            case ExtendedPriceMatching::Amount:

                if (vendParameters.ExtendedPriceAmountCurrencyType == ExtendedPriceAmountCurrencyType::AccountingCurrency)
                {
                    amountVariance = this.extendedPriceVarianceAmountMST(_vendInvoiceInfoTable);
                }

                if (vendParameters.ExtendedPriceAmountCurrencyType == ExtendedPriceAmountCurrencyType::TransactionCurrency)
                {
                    amountVariance = this.extendedPriceVarianceAmount();
                }

                if (vendParameters.DisplayExtendedPriceToleranceIcon == ExtendedPriceMatchIcon::GreaterThan)
                {
                    return amountVariance > vendInvoiceMatchingLine.ExtendedPriceToleranceAmount ?
                        LastMatchVarianceOptions::Warning : LastMatchVarianceOptions::OK;
                }

                if (vendParameters.DisplayExtendedPriceToleranceIcon == ExtendedPriceMatchIcon::GreaterOrLessThan)
                {
                    if (amountVariance > vendInvoiceMatchingLine.ExtendedPriceToleranceAmount)
                    {
                        return LastMatchVarianceOptions::Warning;
                    }

                    if (abs(amountVariance) > vendInvoiceMatchingLine.ExtendedPriceToleranceAmount)
                    {
                        return LastMatchVarianceOptions::Warning;
                    }

                    return LastMatchVarianceOptions::OK;
                }

            case ExtendedPriceMatching::Percentage:

                if (vendParameters.DisplayExtendedPriceToleranceIcon == ExtendedPriceMatchIcon::GreaterThan)
                {
                    return this.extendedPriceVariancePercent() > vendInvoiceMatchingLine.ExtendedPriceTolerancePercentage ?
                        LastMatchVarianceOptions::Warning : LastMatchVarianceOptions::OK;
                }

                if (vendParameters.DisplayExtendedPriceToleranceIcon == ExtendedPriceMatchIcon::GreaterOrLessThan)
                {
                    if (this.extendedPriceVariancePercent() > vendInvoiceMatchingLine.ExtendedPriceTolerancePercentage)
                    {
                        return LastMatchVarianceOptions::Warning;
                    }

                    if (abs(this.extendedPriceVariancePercent()) > vendInvoiceMatchingLine.ExtendedPriceTolerancePercentage)
                    {
                        return LastMatchVarianceOptions::Warning;
                    }

                    return LastMatchVarianceOptions::OK;
                }

            case ExtendedPriceMatching::PercentAndAmount:
                if (vendParameters.ExtendedPriceAmountCurrencyType == ExtendedPriceAmountCurrencyType::AccountingCurrency)
                {
                    amountVariance = this.extendedPriceVarianceAmountMST(_vendInvoiceInfoTable);
                }

                if (vendParameters.ExtendedPriceAmountCurrencyType == ExtendedPriceAmountCurrencyType::TransactionCurrency)
                {
                    amountVariance = this.extendedPriceVarianceAmount();
                }

                if (vendParameters.DisplayExtendedPriceToleranceIcon == ExtendedPriceMatchIcon::GreaterThan)
                {
                    return (amountVariance > vendInvoiceMatchingLine.ExtendedPriceToleranceAmount ||
                        this.extendedPriceVariancePercent() > vendInvoiceMatchingLine.ExtendedPriceTolerancePercentage) ?
                        LastMatchVarianceOptions::Warning : LastMatchVarianceOptions::OK;
                }

                if (vendParameters.DisplayExtendedPriceToleranceIcon == ExtendedPriceMatchIcon::GreaterOrLessThan)
                {
                    if (amountVariance > vendInvoiceMatchingLine.ExtendedPriceToleranceAmount ||
                    this.extendedPriceVariancePercent() > vendInvoiceMatchingLine.ExtendedPriceTolerancePercentage)
                    {
                        return LastMatchVarianceOptions::Warning;
                    }

                    if (abs(amountVariance) > vendInvoiceMatchingLine.ExtendedPriceToleranceAmount ||
                    abs(this.extendedPriceVariancePercent()) > vendInvoiceMatchingLine.ExtendedPriceTolerancePercentage)
                    {
                        return LastMatchVarianceOptions::Warning;
                    }

                    return LastMatchVarianceOptions::OK;
                }
        }

        // default
        return LastMatchVarianceOptions::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPriceVariancePercent</Name>
				<Source><![CDATA[
    private ExtendedPriceVariancePercent extendedPriceVariancePercent()
    {
        Percent extendedPriceVariancePercentage;
        VendInvoiceMatchingLine vendInvoiceMatchingLine;

        vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId);

        if (vendInvoiceMatchingLine.RecId != 0)
        {
            if (vendInvoiceMatchingLine.ExpectedLineAmount == 0.0 && this.extendedPriceVarianceAmount() == 0.0)
            {
                return 0.0;
            }

            if (vendInvoiceMatchingLine.ExpectedLineAmount == 0.0 && this.extendedPriceVarianceAmount() > 0.0)
            {
                return Global::realMax();
            }

            if (vendInvoiceMatchingLine.ExpectedLineAmount == 0.0 && this.extendedPriceVarianceAmount() < 0.0)
            {
                return -Global::realMax();
            }

            extendedPriceVariancePercentage = percent(this.extendedPriceVarianceAmount(),vendInvoiceMatchingLine.ExpectedLineAmount);

            if (vendInvoiceMatchingLine.ExpectedLineAmount < 0)
            {
                extendedPriceVariancePercentage = extendedPriceVariancePercentage * -1.0;
            }
        }

        return extendedPriceVariancePercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    display PurchExternalItemId externalItemId()
    {
        if (this.isNonPO())
        {
            return '';
        }

        return this.purchLine().ExternalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvancedPricingInvoiceCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    /// <returns>
    /// The ID of the attribute-based calculation used.
    /// </returns>
    public PDSCalculationId getAdvancedPricingInvoiceCalculationId()
    {
        return this.VendDocumentLineMap::getAdvancedPricingInvoiceCalculationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the given <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetCheckResult</c> value which is calculated using a query.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult()
    {
        return BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCredit</Name>
				<Source><![CDATA[
    DebitCredit getDebitCredit()
    {
        DebitCredit debitCredit;

        if (this.LineAmount < 0 || this.ReceiveNow < 0)
        {
            debitCredit = DebitCredit::Credit;
        }
        else
        {
            debitCredit = DebitCredit::Debit;
        }

        return debitCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    ///    A <c>CompanyInfo</c>, <c>InventLocation</c> or <c>InventSite</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getICMSSTTaxationCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds taxation code of ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// Taxation code of ICMS-ST tax.
    /// </returns>
    public TaxationCode_BR getICMSSTTaxationCode_BR()
    {
        boolean icmsOverrideICMSSTTaxationCode = BrazilParameters::find().ICMSOverrideICMSSTTaxationCode == NoYes::Yes;
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMSST);

        if (taxOnItem.TaxationCodeTable_BR && icmsOverrideICMSSTTaxationCode)
        {
            taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMS);
        }

        TaxationCode_BR taxationCode = TaxationCodeTable_BR::findRecId(taxOnItem.TaxationCodeTable_BR).TaxationCode;

        return taxationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>ItemType</c> value for the item.
    /// </summary>
    /// <returns>
    /// The <c>ItemType</c> value for the item.
    /// </returns>
    display ItemType getItemType()
    {
        return this.VendDocumentLineMap::getItemType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets misc charges amount.
    /// </summary>
    /// <param name="_transTableId">
    /// The unique table id to find.
    /// </param>
    /// <param name="_transRecId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_documentStatus">
    /// The invoice status of current record.
    /// </param>
    /// <returns>
    /// The misc charges amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN(RefTableId _transTableId, RefRecId _transRecId, DocumentStatus _documentStatus)
    {
        Amount              notionalAmount;
        Amount              markupTotalValue;
        MarkupTrans         markupTransLoc;
        Amount              notionalCharges;
        Amount              miscChargeAmount;
        CustomsAmount_IN    landingCharges;

        while select Value, NotionalPct_IN, CurrencyCode, MarkupCategory, MarkUpAllocateAfter_IN, DocumentStatus
        from markupTransLoc
        where markupTransLoc.TransTableId == _transTableId
           && markupTransLoc.TransRecId   == _transRecId
            && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes  || markupTransLoc.NotionalCharges_IN == NoYes::Yes && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            || (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled()))
        {
            if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
            {
                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                {
                    markupTransLoc.Value = this.LineAmount * markupTransLoc.Value / 100;
                }
                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                {
                    markupTransLoc.Value = this.ReceiveNow * markupTransLoc.Value / 100;
                }
                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                {
                    markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                }
            }

            if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
            {
                markupTransLoc.Value = this.ReceiveNow * markupTransLoc.Value;
            }

            markupTotalValue    = markupTransLoc.Value;

            notionalCharges     = markupTransLoc.NotionalPct_IN/100;

            notionalAmount      = this.LineAmount * notionalCharges;

            if (notionalAmount == 0)
            {
                miscChargeAmount += markupTotalValue;
            }
            else if (markupTotalValue == 0)
            {
                miscChargeAmount += notionalAmount;
            }
            else if (notionalAmount < markupTotalValue)
            {
                miscChargeAmount += notionalAmount;
            }
            else
            {
                miscChargeAmount += markupTotalValue;
            }

            if (_documentStatus == DocumentStatus::Invoice)
            {
                if (markupTransLoc.DocumentStatus == DocumentStatus::Invoice)
                {
                    miscChargeAmount = 0;
                }
            }
        }

        if (this.purchTable().isCustomsImportOrder_IN())
        {
            landingCharges = (this.LineAmount + miscChargeAmount) * VendParameters::find().CustomsLandingChargesPct_IN / 100;
        }

        return miscChargeAmount + landingCharges + this.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextInvoiceLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next invoice line number for the given invoice.
    /// </summary>
    /// <returns>
    /// The next invoice line number for the given invoice.
    /// </returns>
    public static LineNum getNextInvoiceLineNumber(TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;

        select firstonly InvoiceLineNum from localVendInvoiceInfoLine
            order by localVendInvoiceInfoLine.InvoiceLineNum desc
            where localVendInvoiceInfoLine.TableRefId == _tableRefId;

        return localVendInvoiceInfoLine.InvoiceLineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the commitment line that is associated with the current invoice line.
    /// </summary>
    /// <param name="_forUpdate">
    /// true if the record should be selected for update; otherwise, false
    /// </param>
    /// <returns>
    /// The commitment line that is associated with the current invoice line.
    /// </returns>
    public PurchCommitmentLine_PSN getPurchCommitmentLine_PSN(boolean _forUpdate = false)
    {
        PurchCommitmentLine_PSN purchCommitmentLine_PSN;

        if (_forUpdate)
        {
            select firstonly forupdate purchCommitmentLine_PSN
                where purchCommitmentLine_PSN.RecId == this.PurchCommitmentLine_PSN;
        }
        else
        {
            select firstonly purchCommitmentLine_PSN
                where purchCommitmentLine_PSN.RecId == this.PurchCommitmentLine_PSN;
        }

        return purchCommitmentLine_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchLine</c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_original">
    /// VendInvoiceInfoLine table buffer.
    /// </param>
    /// <returns>
    /// True if the the associated <c>SourceDocumentDistribution</c> records should be updated.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(VendInvoiceInfoLine _original)
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_WLoc;
        VendInvoiceInfoLine_W vendInvoiceInfoLine_WOrig;
        boolean deleteTaxUncommitted = false;

        if (TaxParameters::checkTaxParameters_IN())
        {
            vendInvoiceInfoLine_WLoc = this.vendInvoiceInfoLine_W();
            vendInvoiceInfoLine_WOrig = _original.vendInvoiceInfoLine_W();

            deleteTaxUncommitted = vendInvoiceInfoLine_WLoc.AssessableValue_IN != vendInvoiceInfoLine_WOrig.AssessableValue_IN
                                    || vendInvoiceInfoLine_WLoc.CustomsBillOfEntryNumberTable_IN != vendInvoiceInfoLine_WOrig.CustomsBillOfEntryNumberTable_IN
                                    || vendInvoiceInfoLine_WLoc.CustomsImportInvoiceNumberTable_IN != vendInvoiceInfoLine_WOrig.CustomsImportInvoiceNumberTable_IN
                                    || vendInvoiceInfoLine_WLoc.CustomsInvoiceRegnRecId_IN != vendInvoiceInfoLine_WOrig.CustomsInvoiceRegnRecId_IN
                                    || vendInvoiceInfoLine_WLoc.MaximumRetailPrice_IN != vendInvoiceInfoLine_WOrig.MaximumRetailPrice_IN;
        }
        return deleteTaxUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    public boolean inclTax()
    {
        return this.includeTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this invoice line includes tax in the line amount.
    /// </summary>
    /// <param name="_purchTable">
    /// The corresponding purchase order header record; optional.
    /// </param>
    /// <param name="_invoiceHeader">
    /// The corresponding invoice header record; optional.
    /// </param>
    /// <returns>
    /// true if the line has tax included; otherwise, false.
    /// </returns>
    public boolean includeTax(PurchTable _purchTable = null, Common _invoiceHeader = null)
    {
        //<GIN>
        #ISOCountryRegionCodes
        //</GIN>

        VendInvoiceMap invoiceHeader = _invoiceHeader;

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return FormulaDesigner_IN::isPriceInclTaxOnLineAmount(this.TaxItemGroup);
        }
        //</GIN>
        return this.VendInvoiceLineMap::includeTax(_purchTable, invoiceHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultAdvancedPricingCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default value of attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    public void initDefaultAdvancedPricingCalculationId()
    {
        this.VendDocumentLineMap::initDefaultAdvancedPricingCalculationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDescription</Name>
				<Source><![CDATA[
    void initDescription(InventTable inventTable = this.inventTable(), EcoResCategoryId _procurementCategory = this.ProcurementCategory)
    {
        this.Description = PurchParameters::nameAndOrDescription(
                            inventTable,
                            this.vendInvoiceInfoTable().vendTable_InvoiceAccount().languageId(),
                            this.InventDimId,
                            EcoResCategory::find(_procurementCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>VendInvoiceInfoLine</c> table record intialized from the <paramref name="_agreementLine" /> record.
    /// </summary>
    /// <param name="_agreementLine">
    /// An <c>AgreementLine</c> table record used to initialize the new <c>VendInvoiceInfoLine</c> table record.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceInfoLine</c> table record was created; otherwise, false.
    /// </returns>
    public boolean initFromAgreementLine(AgreementLine _agreementLine)
    {
        Qty remainingQty;
        VendInvoiceInfoLine origVendInvoiceInfoLine = this.data().orig();

        this.clear();

        this.LineType = PurchInvoiceLineType::Standard;
        this.ItemId = _agreementLine.ItemId;
        this.AgreementLine_PSN = _agreementLine.RecId;
        this.ParmId = origVendInvoiceInfoLine.ParmId;
        this.TableRefId = origVendInvoiceInfoLine.TableRefId;

        if (_agreementLine.IsMaxEnforced)
        {
            if (_agreementLine.remainingQueried() <= 0)
            {
                return false;
            }
        }
        else
        {
            if (_agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
            {
                remainingQty = AgreementLineQuantityCommitment::find(_agreementLine.RecId).CommitedQuantity;
            }
            else
            {
                remainingQty = 0;
            }
        }

        this.defaultRow(null, null, remainingQty, 0);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        this.PurchPrice = _priceDisc.price();
        this.PriceUnit = _priceDisc.priceUnit();
        this.PurchMarkup = _priceDisc.priceMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductDimensions</Name>
				<Source><![CDATA[
    void initFromProductDimensions(InventDim _inventDim = this.inventDim())
    {
        this.initDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>VendInvoiceInfoLine</c> table record that is initialized from a specified
    /// <c>AgreementLine</c> record.
    /// </summary>
    /// <param name="_agreementLine">
    /// An <c>AgreementLine</c> table record that is used to initialize the new <c>VendInvoiceInfoLine</c>
    /// table record.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceInfoLine</c> table record was created; otherwise, false .
    /// </returns>
    public boolean initFromPurchAgreementLine(AgreementLine _agreementLine)
    {
        Qty remainingQty;

        this.clear();
        this.LineType = PurchInvoiceLineType::Standard;
        this.ItemId = _agreementLine.ItemId;
        this.AgreementLine_PSN = _agreementLine.RecId;
        this.DefaultDimension = _agreementLine.DefaultDimension;

        if (_agreementLine.IsMaxEnforced)
        {
            if (_agreementLine.remainingQueried() <= 0)
            {
                return false;
            }
        }
        else
        {
            if (_agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
            {
                remainingQty = AgreementLineQuantityCommitment::find(_agreementLine.RecId).CommitedQuantity;
            }
            else
            {
                remainingQty = 0;
            }
        }

        this.defaultRow(null, null, remainingQty, 0);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    void initFromPurchLine(PurchLine _purchLine)
    {
        PurchLine_W purchLine_W;
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        #isoCountryRegionCodes

        this.VendDocumentLineMap::initFromPurchLine(_purchLine);

        vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();

        this.TaxGroup = _purchLine.TaxGroup;
        this.TaxItemGroup = _purchLine.TaxItemGroup;
        this.OverrideSalesTax = _purchLine.OverrideSalesTax;

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            this.BudgetReservationLine_PSN  = _purchLine.BudgetReservationLine_PSN;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchLine_W = _purchLine.purchLine_W();
            vendInvoiceInfoLine_W.InvoiceGTDId_RU = purchLine_W.InvoiceGTDId_RU;
            vendInvoiceInfoLine_W.CountryRegionName_RU = purchLine_W.CountryRegionName_RU;
            vendInvoiceInfoLine_W.MarkupCode_RU = purchLine_W.MarkupCode_RU;
        }

        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(VendInvoiceInfoLine_W)))
        {
            purchLine_W = _purchLine.purchLine_W();
            vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();

            vendInvoiceInfoLine_W.sadInvoiceLineNo_PL = purchLine_W.sadInvoiceLineNo_PL;

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
            {
                vendInvoiceInfoLine_W.WithholdingTypeCode_MX = purchLine_W.WithholdingTypeCode_MX;
            }

            this.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSaved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a saved <c>VendInvoiceInfoTable</c> record to active.
    /// </summary>
    /// <param name="_parmId">
    /// The parameter ID for the active invoice.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that specifies whether to credit the remaining quantities.
    /// </param>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> associated with the invoice line; optional.
    /// </param>
    public void initFromSaved(ParmId _parmId, boolean _creditRemaining, PurchLine _purchLine = null)
    {
        PurchLine localPurchLine = _purchLine;
        PurchQuantity purchQuantity = PurchQuantity::construct(DocumentStatus::Invoice, false);
        InventQty unusedQty;

        this.ParmId = _parmId;

        if (!this.isNonPO())
        {
            if (!localPurchLine)
            {
                localPurchLine = this.purchLine(false);
            }

            this.RemainBeforeInventPhysical = localPurchLine.RemainInventPhysical;

            if (this.Closed == NoYes::No)
            {
                [unusedQty, this.RemainBeforeInvent, this.RemainAfterInvent] = purchQuantity.qtyInvent(localPurchLine, PurchUpdate::ReceiveNow, this.InventNow, _creditRemaining);
                [unusedQty, this.RemainBefore, this.RemainAfter] = purchQuantity.qtyPurch(localPurchLine, PurchUpdate::ReceiveNow, this.ReceiveNow, _creditRemaining);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current table record.
    /// </summary>
    /// <remarks>
    /// Ensures the Closed field is set to NoYes::No enumeration value.
    /// </remarks>
    public void initValue()
    {
        super();

        this.Closed = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Optionally sets the status of the corresponding <c>PurchLine</c> to be set to Open order as there
    /// is a saved pending invoice against the <c>PurchLine</c>.Optionally activates the Purchase Request
    /// workflow.Create a <c>SourceDocumentLine</c>.
    /// </summary>
    /// <param name="_defaultRelatedTables">
    /// True if related tables should be defaulted on insert; otherwise false. This parameter would
    /// typically be false when <c>VendInvoiceInfoLine</c>records are copied between the saved and active
    /// images of this document.
    /// </param>
    /// <remarks>
    /// Inserting will cause the status of the corresponding <c>PurchLine</c> table to be set to open order
    /// as there is a saved pending invoice against the <c>PurchLine</c> table.
    /// </remarks>
    public void insert(boolean _defaultRelatedTables = true)
    {
        PurchLine purchLine;
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendInvoiceInfoTable();

        ttsbegin;

        // Insert and reference a source document line
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        super();

        this.SysExtensionSerializerMap::postInsert();

        if (this.DocumentOrigin != DocumentOrigin::Service ||
            (VendInvoiceImportedWithBudgetEnabledDeleteUncommittedTaxFlight::instance().isEnabled()
                && BudgetControlConfiguration::isBudgetControlEnabledForVendorInvoiceLine()))
        {
            // Only delete tax information if the invoice line is not being inserted via AIF.
            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);

            // Delete tax Withhold information.
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                TaxWithholdUncommitted_IN::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
            }

            if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
            {
                TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
            }
        }
        // Update header round-off amounts.
        vendInvoiceInfoTable.updateFromVendLines();

        if (_defaultRelatedTables)
        {
            if (this.isNonPO())
            {
                //Set the inventory dimensions for charges based on vendor invoice line
                if (this.inventDim())
                {
                    InventDim inventDim = this.inventDim();
                    Markup::parmInventDimParameters(inventDim);
                }
                this.createMarkupTrans(this.vendInvoiceInfoTable());

                VendInvoiceInfoLine_Asset::createVendInvoiceInfoLine_Asset(this).insert();
                this.setAssetGroup();

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::Inventory);
                    FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CFOP);
                }
                // </GBR>
            }
            else
            {
                purchLine = PurchLine::findInventTransId(this.InventTransId, true);

                if (purchLine.RecId != 0)
                {
                    purchLine.setPurchStatus(true);

                    //COR submit to workflow
                    if (purchLine.PurchaseType == PurchaseType::Purch)
                    {
                        if (purchLine.calcPendingMatchedQtyPurch() < purchLine.calcPendingQtyPurch())
                        {
                            PurchCORInvReceivedWorkflow::activatePurchaseRequisitionWorkflow(purchLine);
                        }
                    }
                }
            }
        }

        if (this.isActive())
        {
            this.updateVendorInvoiceProjectFromBudgetReservation(true, false);
        }

        ttscommit;

        VendInvoiceAutomationMatchingLogger matchingLogger =  new VendInvoiceAutomationMatchingLogger();
        matchingLogger.writeInvoiceAutomationMatchStatusManually(vendInvoiceInfoTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _update = false)
    {
        return this.VendDocumentLineMap::inventDim(_update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is tracked in inventory.
    /// </summary>
    /// <returns>
    /// <c>NoYes::Yes</c> if the object is tracked in inventory; otherwise, <c>NoYes::No</c>.
    /// </returns>
    display NoYes inventoried()
    {
        return this.VendDocumentLineMap::inventoried();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteChanged_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method called wherever the InventsiteId is changed.
    /// </summary>
    public void inventSiteChanged_BR()
    {
        this.setCFOP_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(ItemId _itemId = this.ItemId, boolean _update = false)
    {
        return this.VendDocumentLineMap::inventTable(_itemId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNetUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the invoice net unit price by dividing the invoice amount by the invoice quantity.
    /// </summary>
    /// <returns>
    /// The invoice net unit price.
    /// </returns>
    /// <remarks>
    /// The value is intentionally not rounded for maximum precision.
    /// </remarks>
    public display NetUnitPrice invoiceNetUnitPrice()
    {
        NetUnitPrice invoiceNetUnitPrice;

        if (this.ReceiveNow == 0.0)
        {
            return 0.0;
        }

        invoiceNetUnitPrice = this.LineAmount / this.ReceiveNow;
        return invoiceNetUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an invoice is advanced.
    /// </summary>
    /// <returns>
    /// true if invoice is advanced; otherwise, false.
    /// </returns>
    public boolean isAdvance()
    {
        return this.VendDocumentLineMap::isAdvance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an invoice line is of type advance application.
    /// </summary>
    /// <returns>
    /// true if an invoice line is of type advance application; otherwise, false.
    /// </returns>
    public boolean isAdvanceApplication()
    {
        return this.VendInvoiceLineMap::isAdvanceApplication();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether initialization is performed from a Purchase Agreement by checking the value of
    /// the <c>AgreementLine</c> and <c>OrigPurchId</c> fields of a <c>VendInvoiceInfoLine</c> buffer.
    /// </summary>
    /// <returns>
    /// true when the <c>AgreementLine_PSN</c> field of <c>VendInvoiceInfoLine</c> buffer is set and
    /// <c>OrigPurchId</c> is not set.
    /// </returns>
    public boolean isDirectInvoice()
    {
        if (this.TableId == tableNum(VendInvoiceInfoLine))
        {
            if (this.ParmId && this.TableRefId)
            {
                return (this.AgreementLine_PSN || this.vendInvoiceInfoTable().PurchAgreementHeader_PSN) && !this.OrigPurchId;
            }
            else
            {
                return this.AgreementLine_PSN && !this.OrigPurchId;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current record has been initialized.
    /// </summary>
    /// <returns>
    /// true, if the record has been initialized; otherwise, false
    /// </returns>
    public boolean isInitialized()
    {
        return (this.RecId || this.TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupCodeEnabled_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The field MarkupCode_RU is enabled
    /// </summary>
    /// <returns>
    ///  true if enabled, otherwize - false
    /// </returns>
    public boolean isMarkupCodeEnabled_RU()
    {
        return ! this.ItemId || this.inventTable().isMarkupCodeEnabled_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an invoice line is associated with a purchase order.
    /// </summary>
    /// <returns>
    /// true if the line is not associated with a purchase order; otherwise, false.
    /// </returns>
    public boolean isNonPO()
    {
        return this.VendDocumentLineMap::isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseAdvanceApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an invoice line is of type reverse advance application.
    /// </summary>
    /// <returns>
    /// true if an invoice line is of type reverse advance application; otherwise, false.
    /// </returns>
    public boolean isReverseAdvanceApplication()
    {
        return this.LineType == PurchInvoiceLineType::ReverseAdvanceApplication;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the invoice line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode itemLineDisc()
    {
        return this.inventTable().purchLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display PurchLineShowItemName itemName()
    {
        return this.VendDocumentLineMap::itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>LedgerDimension</c> that is associated with this invoice.
    /// </summary>
    /// <returns>
    /// The <c>LedgerDimension</c> that is associated with this invoice.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDim()
    {
        return this.purchLine().LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur lineAmountExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(_transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur lineAmountExcludingTax(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, VendDocumentTableMap _parmTable = null, boolean _keepEndDisc = false)
    {
        return this.VendDocumentLineMap::lineAmountExcludingTax(transDate, _tax, _parmTable, _keepEndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    void lineAmountModified()
    {
        this.PurchPrice = 0;
        this.LineDisc = 0;
        this.LinePercent = 0;
        this.MultiLnDisc = 0;
        this.MultiLnPercent = 0;
        this.PurchMarkup = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the MST amount for <c>LineAmount</c>.
    /// </summary>
    /// <param name="exchRateDate">
    /// The date used to calculate the exchange rate.
    /// </param>
    /// <param name="exchRate">
    /// The exchange rate to use if known.
    /// </param>
    /// <param name="exchrateSecondary">
    /// The secondary exchange rate to use if known.
    /// </param>
    /// <param name="exchRatesTriangulation">
    /// The exchange rate triangulation to use if known.
    /// </param>
    /// <returns>
    /// The <c>LineAmount</c> in MST.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMST(TransDate exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),ExchRate exchRate = 0, ExchrateSecondary exchrateSecondary = 0, ExchRatesTriangulation exchRatesTriangulation = UnknownNoYes::Unknown)
    {
        return this.salesPurchLineInterface().lineAmountMST(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode lineDisc()
    {
        return VendTable::find(this.InvoiceAccount).LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscExclTax</Name>
				<Source><![CDATA[
    DiscAmount lineDiscExclTax(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.VendDocumentLineMap::lineDiscExclTax(transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMatchingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retreives the matching policy for this invoice line.
    /// </summary>
    /// <returns>
    /// The <c>PurchMatchingPolicyOption</c> value.
    /// </returns>
    public display PurchMatchingPolicyOption lineMatchingPolicy()
    {
        if (this.isNonPO())
        {
            return PurchMatchingPolicyOption::NoMatch;
        }

        return VendInvoiceMatchingLine::find(this.TableId, this.RecId, false).MatchingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePriceVarianceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the product of the quantity being invoiced times the difference between
    /// invoice net unit price and the expected net unit price.
    /// </summary>
    /// <returns>
    /// The expected invoice amount.
    /// </returns>
    public display LinePriceVarianceAmount linePriceVarianceAmount()
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        NetUnitPrice expectedNetUnitPrice;
        LinePriceVarianceAmount linePriceVarianceAmount;

        vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId,false);
        if (vendInvoiceMatchingLine.RecId != 0)
        {
            expectedNetUnitPrice = vendInvoiceMatchingLine.expectedNetUnitPrice();
            linePriceVarianceAmount = (this.invoiceNetUnitPrice() - expectedNetUnitPrice) * this.ReceiveNow;
        }

        return linePriceVarianceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the associated <c>MarkupTrans</c> table records may be added, changed, or deleted.
    /// </summary>
    /// <returns>
    /// true if modifications are enabled; otherwise, false.
    /// </returns>
    public boolean markupAllowed()
    {
        if (this.isNonPO())
        {
            return true;
        }

        return !this.purchTable().isInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns markup ledger account from the <c>MarkupCode_RU</c> record.
    /// </summary>
    /// <returns>
    /// The markup ledger account.
    /// </returns>
    public LedgerDimensionDefaultAccount markupLedgerAccount()
    {
        VendInvoiceInfoLine_W line_W = this.vendInvoiceInfoLine_W();

        return line_W.MarkupCode_RU ? MarkupTable::find(MarkupModuleType::Vend, line_W.MarkupCode_RU).CustomerLedgerDimension : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingVarianceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice line has either a quantity or price variance and returns an <c>LastMatchVarianceOptions</c>.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record assocatied with this <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    /// A LastMatchVarianceOptions::Warning if there is a variance; otherwise, a LastMatchVarianceOptions::OK
    /// enumation value .
    /// </returns>
    public display LastMatchVarianceOptions matchingVarianceStatus(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine;

        if (this.isNonPO())
        {
            return LastMatchVarianceOptions::Unknown;
        }

        vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId, this.RecId, false);
        if (vendInvoiceMatchingLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch)
        {
            return LastMatchVarianceOptions::Unknown;
        }

        return ((this.priceVarianceStatus() == LastMatchVarianceOptions::Warning) || (this.extendedPriceVarianceStatus(_vendInvoiceInfoTable) == LastMatchVarianceOptions::Warning) ||
        (this.checkIfQuantityMatch() == LastMatchVarianceOptions::Warning)) ? LastMatchVarianceOptions::Warning : LastMatchVarianceOptions::OK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a dimension set that holds the merged combination of the <c>defaultDimension</c> field and the
    /// provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set that will be merged with the <c>defaultDimension</c> field.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that will be merged with the <c>defaultDimension</c> field; optional
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object previously created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field and
    /// the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additional the entity specifies defaulting will be considered.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedClosed</Name>
				<Source><![CDATA[
    void modifiedClosed()
    {
        this.VendDocumentLineMap::modifiedClosed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCWReceiveNow</Name>
				<Source><![CDATA[
    void modifiedCWReceiveNow()
    {
        // convert first to inventQty
        InventTable inventTable = this.inventTable();
        InventQty toReceiveNowInvent = PdsCatchWeight::inventQty(inventTable.ItemId, this.PdsCWReceiveNow);

        // convert to purch qty
        this.ReceiveNow = UnitOfMeasureConverter::convert(
                toReceiveNowInvent,
                UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()),
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.purchLine().PurchUnit),
                NoYes::Yes,
                inventTable.Product);

        this.VendDocumentLineMap::modifiedReceiveNow(true);
        this.updateAndPackAccessableValue_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        Object formDataSource;
        boolean unapproveVariances;
        boolean isQtyUpdated = true;

        super(_fieldId);

        unapproveVariances = this.modifiedField_ServerPost(_fieldId);

        if (FormDataUtil::isFormDataSource(this))
        {
            if (_fieldId == fieldNum(VendInvoiceInfoLine, PurchPrice)
                    || _fieldId == fieldNum(VendInvoiceInfoLine, TaxGroup)
                        || _fieldId == fieldNum(VendInvoiceInfoLine, TaxItemGroup)
                            || _fieldId == fieldNum(VendInvoiceInfoLine, PriceUnit))
            {
                isQtyUpdated = false;
            }

            if (formDataSourceHasMethod(FormDataUtil::getFormDataSource(this), identifierStr(modifiedField)))
            {
                formDataSource = FormDataUtil::getFormDataSource(this);
                formDataSource.modifiedField(_fieldId, unapproveVariances, isQtyUpdated);
            }
        }

        this.resetAutomationMatchingWhenInvoiceIsModified();


        if (this.purchQtyMatched() != this.ReceiveNow)
        {
            this.resetSavedLineQuantities();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectRecordsForVendorPaymentRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update project related records which will be impacted by the changed of the VendInvoiceInfoLine fields.
    /// </summary>
    /// <remarks>
    /// For the case of project vendor payment scenario, it updates accounting distribution records
    /// in order to avoid conflict from user making updates on other PSA retainage related fields.
    ///</remarks>
    private void updateProjectRecordsForVendorPaymentRetention()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (this.hasRetentionTerms())
            {
                ttsbegin;
                this.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchPriceChangeForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Purch pirce on VendInvoiceInfoLine when project key is enabled.
    /// </summary>
    /// <remarks>
    /// When there is a change in unit cost price, it triggers a corresponding change in sales price on
    /// <c>VendInvoiceInfoLine_Project</c> table buffer which then updates project accounting distribution records.
    /// Hence an update is necessary to get the latest modified value on purch price.
    ///  </remarks>

    private void updatePurchPriceChangeForProject()
    {
        if(isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if(this.RecId != 0)
            {
                VendInvoiceInfoLine_Project vendInvInfoLine_Project = VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(this.RecId, true);
                if(VendInvInfoLine_project.Recid != 0)
                {
                    ttsbegin;
                    vendInvInfoLine_Project.setProjSalesPrice(this);
                    if (vendInvInfoLine_Project.isIntercompany())
                    {
                        vendInvInfoLine_Project.setTransferPrice(this);
                    }
                    vendInvInfoLine_Project.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_ServerPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes modifedField logic on the server side.
    /// </summary>
    /// <param name="_fieldId">
    /// ID of the modified field.
    /// </param>
    /// <returns>
    /// A boolean value, indicating whether the variances should be unapproved.
    /// </returns>
    private boolean modifiedField_ServerPost(FieldId _fieldId)
    {
        VendDocumentLineType vendDocumentLineType;
        boolean unapproveVariances;

        boolean isIndiaTaxMarked, isCustomsMarked;
        #ISOCountryRegionCodes

        isIndiaTaxMarked = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::checkTaxParameters_IN();

        isCustomsMarked = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                            && TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs)
                            && PurchTable::find(this.OrigPurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes;

        switch (_fieldId)
        {
            case fieldNum(VendInvoiceInfoLine, ReceiveNow):
                if (isCustomsMarked)
                {
                    this.modifiedReceiveNow_IN();
                }
                else
                {
                    this.modifiedReceiveNow();
                    this.updateAndPackAccessableValue_IN();
                }

                this.updateProjectRecordsForVendorPaymentRetention();

                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, DeliveryPostalAddress):
                LogisticsLocationSelectForm_VendInvoiceInfoLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
                break;

            case fieldNum(VendInvoiceInfoLine, InventNow):
                this.ChangedManually = NoYes::Yes;
                this.resetSavedLineQuantities();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, RemainAfter):
                this.setRemainAfterInvent();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, RemainAfterInvent):
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, LinePercent):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, PurchMarkup):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, PriceUnit):
                this.LineAmount = this.calcLineAmount();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, MultiLnDisc):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, LineDisc):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, PurchPrice):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;

                // Call the event handler so higher layer solutions can customize.
                VendInvoiceInfoLineTableHandler::modifiedField_PurchPrice(this);

                this.setAssetGroup();

                this.updatePurchPriceChangeForProject();
                break;

            case fieldNum(VendInvoiceInfoLine, MultiLnPercent):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAndPackAccessableValue_IN();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, LineAmount):
                this.lineAmountModified();
                unapproveVariances = true;
                this.updateAndPackAccessableValue_IN();
                this.updatePurchPriceChangeForProject();
                break;

            case fieldNum(VendInvoiceInfoLine, Closed):
                this.modifiedClosed();
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, TaxGroup):
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, TaxItemGroup):
                unapproveVariances = true;
                break;

            case fieldNum(VendInvoiceInfoLine, ItemId):
                vendDocumentLineType = this.type();
                this.resetFieldStateForAllFields();
                if (vendDocumentLineType != null)
                {
                    vendDocumentLineType.parmIsModifiedField(true);
                    vendDocumentLineType.parmIsItemModified(true);
                    vendDocumentLineType.defaultRow(this.ReceiveNow);
                }
                if (BrazilParameters::isEnabled())
                {
                    FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::Inventory);
                    this.setTaxGroupAndTaxItemGroupFields_BR();
                    this.setDefaultServiceCodeFromInventTable_BR();
                }
                this.updateAndPackAccessableValue_IN();
                break;

            case fieldNum(VendInvoiceInfoLine, ProcurementCategory):
                vendDocumentLineType = this.type();
                this.resetFieldStateForAllFields();
                if (vendDocumentLineType != null)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        this.setAgreementLine();
                    }

                    vendDocumentLineType.parmIsModifiedField(true);
                    vendDocumentLineType.defaultRow(this.ReceiveNow);
                }
                break;

            case fieldNum(VendInvoiceInfoLine, OrigCountryRegionId):
                this.OrigStateId = '';
                break;

            default:
                // Call the vent handler to handle other cases that may be present in higher layers.
                VendInvoiceInfoLineTableHandler::modifiedField_OtherFields(_fieldId, this);
                break;
        }

        return unapproveVariances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the received data now.
    /// </summary>
    void modifiedReceiveNow(boolean _setCWQuantities = false)
    {
        this.VendDocumentLineMap::modifiedReceiveNow(_setCWQuantities);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNowWithPromptDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements additional logic after <c>ReceiveNow</c> quantity has been changed.
    /// </summary>
    /// <param name = "_setCWQuantities">
    /// Determines if catch weight quantities should be updated. Default is no update.
    /// </param>
    /// <param name = "_setSubLineReceiveNowPromptResult">
    /// Determines if a prompt is shown to a user in case the record is connected to
    /// a product receipt sub line and the modified <c>ReceiveNow</c> quantity deviates from the
    /// received quantity. Default is to show the prompt.
    /// </param>
    public void modifiedReceiveNowWithPromptDefault(
        boolean      _setCWQuantities                  = false,
        UnknownNoYes _setSubLineReceiveNowPromptResult = UnknownNoYes::Unknown)
    {
        this.vendDocumentLineInterface().modifiedReceiveNowWithPromptDefault(
            _setCWQuantities,
            _setSubLineReceiveNowPromptResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNow_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the received data now.
    /// </summary>
    public void modifiedReceiveNow_IN()
    {
        this.VendDocumentLineMap::modifiedReceiveNow_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    void modifyInventDim(InventDim _inventDim, FieldId _dimFieldId)
    {
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);
        InventDimId oldInventDimId;

        if (!this.ItemId)
        {
            return;
        }

        // Remember the old value to check for changes
        oldInventDimId = this.InventDimId;
        this.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;

        if (InventDim::isFieldIdProductDimension(_dimFieldId))
        {
            this.initFromProductDimensions(_inventDim);
        }

        switch (_dimFieldId)
        {
            case fieldNum(InventDim,InventLocationId):
            //fall throough and possibly update dimension.

            case fieldNum(InventDim,InventSiteId):
                // If a new InventDim is selected then default dimensions.
                if (this.InventDimId != oldInventDimId)
                {
                    this.DefaultDimension = this.copyDimension(this.DefaultDimension);
                }
                break;
        }

        if (InventDim::mustUseFieldPurchPriceDisc(_dimFieldId, inventDimGroupSetup))
        {
            this.salesPurchLineInterface().resetPriceAgreement();
            this.setPriceDisc(_inventDim);
        }

        if (BrazilParameters::isEnabled())
        {
            this.postModifyInventDimBR(_inventDim, _dimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeDeducted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line must be deducted before an invoice is matched.
    /// </summary>
    /// <returns>
    /// true if the order line must be deducted before the invoice is matched; otherwise, false.
    /// </returns>
    public boolean mustBeDeducted()
    {
        if (this.isCategoryBased())
        {
            return (VendParameters::find().editUseInvoiceMatching() && EcoResCategory::getProcCategoryDeductionRequirement(this.ProcurementCategory, CompanyInfo::current()));
        }
        else
        {
            return InventMovement::construct(this).mustBeDeducted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line must be received before an invoice is matched.
    /// </summary>
    /// <returns>
    /// true if the order line must be received before an invoice is matched; otherwise, false.
    /// </returns>
    public boolean mustBeReceived()
    {
        if (this.isCategoryBased())
        {
            return (VendParameters::find().editUseInvoiceMatching() && EcoResCategory::getProcCategoryReceivingRequirement(this.ProcurementCategory, CompanyInfo::current()));
        }
        else
        {
            return InventMovement::construct(this).mustBeReceived();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCFOPChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax information and the fiscal document texts when the CFOP is changed.
    /// </summary>
    /// <param name="_modifiedField">
    /// The ID of the field that was modified.
    /// </param>
    public void onCFOPChange_BR(FieldId _modifiedField = fieldNum(VendInvoiceInfoLine_W, cfopTable_BR))
    {
        if (this.vendInvoiceInfoLine_W().cfopTable_BR)
        {
            this.setTaxGroupAndTaxItemGroupFields_BR();
        }

        FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustVendAC orderAccount()
    {
        return this.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PackingSlipId packingSlipId(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        return this.documentId(_vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoLine_BR</c> record into this record as an extension.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine_BR">
    /// A <c>VendInvoiceInfoLine_BR</c> record to pack.
    /// </param>
    public void packVendInvoiceInfoLine_BR(VendInvoiceInfoLine_BR _vendInvoiceInfoLine_BR)
    {
        _vendInvoiceInfoLine_BR.VendInvoiceInfoLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoLine_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoLine_W</c> record into this record as an extension.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine_W">
    /// A <c>VendInvoiceInfoLine_W</c> record to pack.
    /// </param>
    public void packVendInvoiceInfoLine_W(VendInvoiceInfoLine_W _vendInvoiceInfoLine_W)
    {
        _vendInvoiceInfoLine_W.VendInvoiceInfoLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        if (VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
        {
            return this.vendInvoiceInfoTable().parmExchangeRateDate();
        }
        else
        {
            return this.vendInvoiceInfoTable().updateDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_VendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_VendorInvoice::VendorInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(this.vendInvoiceInfoTable().SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total quantity of a matched packing slips for the current invoice line in the
    /// catch weight unit of measure.
    /// </summary>
    /// <returns>
    /// The quantity of matched packing slips in the catch weight unit of measure.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyMatched()
    {
        return VendInvoiceInfoSubLine::pdsCWQtyMatchAvailable(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the effective unit purchase price for the line.
    /// </summary>
    /// <returns>
    /// The effective unit purchase price for the line.
    /// </returns>
    /// <remarks>
    /// For a line that uses advanced pricing, this will be the adjusted unit price, otherwise it is the
    /// standard unit price value on the line.
    /// </remarks>
    public PurchPrice pdsPurchPrice()
    {
        PurchPrice price;

        if (this.pdsCalculationId)
        {
            price = this.pdsCalculatedUnitPrice;
        }
        else
        {
            price = this.PurchPrice;
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModifyInventDimBR</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets field values on the order line based on the changed inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    ///   A record.
    /// </param>
    /// <param name="_dimFieldId">
    ///   A field ID.
    /// </param>
    /// <param name="_resetPrice">
    ///   A boolean value indicating if the price should be reset.
    /// </param>
    public void postModifyInventDimBR(InventDim _inventDim, FieldId _dimFieldId, boolean _resetPrice = true)
    {
        if (_dimFieldId == fieldNum(InventDim, InventSiteId))
        {
            this.inventSiteChanged_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId priceGroupId()
    {
        return VendTable::find(this.InvoiceAccount).PriceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceVarianceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an <c>LastMatchVarianceOptions</c> that indicates whether there was a price variance more than the enabled variance.
    /// </summary>
    /// <returns>
    /// A <c>LastMatchVarianceOptions</c> that specifies whether the variance is in the acceptable limit of the price variance.
    /// </returns>
    public display LastMatchVarianceOptions priceVarianceStatus()
    {
        PriceTolerancePercentage priceTolerancePercentage;

        if (this.isNonPO())
        {
            return LastMatchVarianceOptions::Unknown;
        }

        VendInvoiceMatchingLine vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId,false);

        if (vendInvoiceMatchingLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch)
        {
            return LastMatchVarianceOptions::Unknown;
        }

        if (this.ParmId != '' && this.vendInvoiceInfoTable().PerformFullInvoiceMatching == NoYes::No && vendInvoiceMatchingLine.RecId != 0)
        {
            priceTolerancePercentage = vendInvoiceMatchingLine.PriceTolerancePercentage;
        }
        else
        {
            priceTolerancePercentage = PurchPriceTolerance::find(this.ItemId, this.InvoiceAccount);
        }

        PriceVariancePercent priceVariancePercent = this.priceVariancePercent();

        if (priceVariancePercent == 0.0)
        {
            return LastMatchVarianceOptions::OK;
        }

        if (priceVariancePercent > priceTolerancePercentage)
        {
            return LastMatchVarianceOptions::Warning;
        }

        if ((abs(priceVariancePercent) > priceTolerancePercentage) && (VendParameters::find(false).DisplayPriceMatchIcon == DisplayPriceMatchOption::GreaterOrLessThan))
        {
            return LastMatchVarianceOptions::Warning;
        }

        return LastMatchVarianceOptions::OK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceVariancePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the difference between the expected net unit price and the invoice net unit
    /// price expressed as a percentage.
    /// </summary>
    /// <returns>
    /// The price variance percentage.
    /// </returns>
    /// <remarks>
    /// A positive variance is considered unwanted.
    /// </remarks>
    public PriceVariancePercent priceVariancePercent()
    {
        PriceVariancePercent priceVariancePercent = 0.0;
        NetUnitPrice expectedNetUnitPrice;
        PurchLine purchLine;
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        NetUnitPrice invoiceNetUnitPrice;
        ExpectedLineAmount expectedLineAmount;

        if (this.ParmId != '' && this.vendInvoiceInfoTable().PerformFullInvoiceMatching == NoYes::No)
        {
            if (this.checkProjVendorRetentionAmountReleaseInvoice())
            {
                expectedNetUnitPrice = 0;
            }
            else
            {
                vendInvoiceMatchingLine = VendInvoiceMatchingLine::find(this.TableId,this.RecId,false);
                if (vendInvoiceMatchingLine.RecId !=0)
                {
                    expectedNetUnitPrice = vendInvoiceMatchingLine.expectedNetUnitPrice();
                    expectedLineAmount = vendInvoiceMatchingLine.ExpectedLineAmount;
                }
            }
        }
        else
        {
            purchLine = this.purchLine();
            if (purchLine.RecId != 0)
            {
                if (purchLine.PurchQty == 0)
                {
                    expectedNetUnitPrice = 0;
                }
                else
                {
                    expectedNetUnitPrice = purchLine.LineAmount / purchLine.PurchQty;
                }

                expectedLineAmount = purchLine.LineAmount;
            }
        }

        invoiceNetUnitPrice = this.invoiceNetUnitPrice();

        if (invoiceNetUnitPrice != expectedNetUnitPrice)
        {
            if (expectedNetUnitPrice == 0)
            {
                priceVariancePercent = Global::realMax();
            }
            else
            {
                priceVariancePercent = percent((invoiceNetUnitPrice - expectedNetUnitPrice), expectedNetUnitPrice);

                if ((this.ReceiveNow < 0.0) || (invoiceNetUnitPrice == 0 && expectedLineAmount < 0))
                {
                    priceVariancePercent = priceVariancePercent * -1.0;
                }
            }
        }

        return priceVariancePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceVariancePercentDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the difference between the expected net unit price and the invoice net unit
    /// price expressed as a percentage.
    /// </summary>
    /// <returns>
    /// The price variance percentage.
    /// </returns>
    /// <remarks>
    /// A positive variance is considered unwanted.
    /// </remarks>
    public display PriceVariancePercent priceVariancePercentDisplay()
    {
        PriceVariancePercent priceVariancePercent = this.priceVariancePercent();

        if (priceVariancePercent == Global::realMax())
        {
            priceVariancePercent = Global::maxUIPercent();
        }

        return priceVariancePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaSetRetainage</Name>
				<Source><![CDATA[
    void psaSetRetainage(AmountCur _lineAmount, DocumentStatus _documentStatus = DocumentStatus::None, PurchLine _purchLine = null)
    {
        PurchLine purchLine;
        AmountCur invoicedAmount, invoicedAmountToNow, retainAmount, releaseAmount;
        PSAVendorRetentionTermsLine vendorRetentionTermLine;
        PurchQty invoicedQty;

        //calculate retainage according to the invoice amount
        purchLine = _purchLine;

        if (Project::Enabled())
        {
            this.PSARetainageBalance = purchLine.PSATotalRetainAmount;

            if (_documentStatus == DocumentStatus::Invoice || _documentStatus == DocumentStatus::ApproveJournal)
            {
                this.PSARetainageAmount = 0;
                this.PSARetainagePercent = 0;

                if (purchLine.psaRetainScheduleId)
                {
                    invoicedAmountToNow = purchLine.psaInvoicedAmount();
                    invoicedAmount = invoicedAmountToNow;
                    invoicedQty = purchLine.psaInvoicedQty();

                    select firstonly PaymentRetentionReleasePercentage, WorkPercentageComplete, PaymentRetentionPercentage, VendorRetentionTermId from vendorRetentionTermLine
                        order by vendorRetentionTermLine.WorkPercentageComplete
                        where vendorRetentionTermLine.VendorRetentionTermId == purchLine.psaRetainScheduleId &&
                            vendorRetentionTermLine.WorkPercentageComplete >= ((this.ReceiveNow + invoicedQty) / purchLine.PurchQty) * 100;

                    if (vendorRetentionTermLine.PaymentRetentionPercentage)
                    {
                        AmountCur lineAmount;
						if (this.LineAmount)
                        {
							lineAmount = this.LineAmount;

							// Considering gross amount(original amount + tax amount) for retention calculation when <c>VendorRetentionOptions</c> is set to 'Based on gross amount'.
							if (ProjParameters::find().VendorRetentionOptions == ProjDefaultRetentionOptions::BasedOnGrossAmount)
							{
                                lineAmount += TaxUncommitted::getCalculatedTaxAmountForSourceLine(purchLine.TableId, purchLine.RecId, false);
							}
                        }

                        retainAmount = retainAmount + vendorRetentionTermLine.PaymentRetentionPercentage * (lineAmount + invoicedAmountToNow - invoicedAmount) / 100;
                    }

                    if (vendorRetentionTermLine.PaymentRetentionReleasePercentage && this.PSARetainageBalance && this.LineAmount)
                    {
						releaseAmount = releaseAmount + (purchLine.PSATotalRetainAmount * vendorRetentionTermLine.PaymentRetentionReleasePercentage) /100;
                    }

                    invoicedAmount = this.LineAmount + invoicedAmountToNow;

                    if (retainAmount)
                    {
                        this.PSARetainageAmount = CurrencyExchangeHelper::amount(retainAmount, this.CurrencyCode);
                        this.PSARetainagePercent = vendorRetentionTermLine.PaymentRetentionPercentage;
                    }
                    else
                    {
                        this.PSARetainagePercent = 0;
                    }

                    if (releaseAmount > 0 || this.PSAReleaseAmount > 0)
                    {
                        this.PSAReleaseAmount = CurrencyExchangeHelper::amount(releaseAmount, this.CurrencyCode);

                        if (vendorRetentionTermLine.PaymentRetentionReleasePercentage && releaseAmount)
                        {
                            this.PSAReleasePercent = vendorRetentionTermLine.PaymentRetentionReleasePercentage;
                        }
                        else
                        {
                            if (purchLine.PSATotalRetainAmount)
                            {
                                this.PSAReleasePercent = (releaseAmount / purchLine.PSATotalRetainAmount) *100;
                            }
                            else
                            {
                                this.PSAReleasePercent = 0;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    PurchLine purchLine(boolean _forUpdate = false)
    {
        PurchLine purchLine;

        if (this.DocumentOrigin == DocumentOrigin::Service)
        {
            if (this.InventTransId)
            {
                // Retrieve by InventTransId (supplied by the service)
                purchLine = PurchLine::findInventTransId(this.InventTransId, _forUpdate);
            }
            else
            {
                purchLine = PurchLine::findRecId(this.PurchLineRecId, _forUpdate);
            }
        }
        else
        {
            purchLine = this.VendDocumentLineMap::purchLine(_forUpdate);
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmUpdate</Name>
				<Source><![CDATA[
    public PurchParmUpdate purchParmUpdate(boolean _forUpdate = false)
    {
        return this.vendInvoiceInfoTable().purchParmUpdate(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total quantity of a matched packing slips for the current invoice line in the
    /// purchasing unit of measure.
    /// </summary>
    /// <returns>
    /// The quantity of matched packing slips in the purchasing unit of measure.
    /// </returns>
    public display PurchQty purchQtyMatched()
    {
        return VendInvoiceInfoSubLine::purchQtyMatchAvailable(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    public PurchTable purchTable(boolean update = false)
    {
        return this.VendDocumentLineMap::purchTable(update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the status of the associated qualtiy orders.
    /// </summary>
    /// <returns>
    /// Current quality order status.
    /// </returns>
    public display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return this.purchLine().qualityOrderStatusDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistribution_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes and regenerates the distributions for the current document.
    /// </summary>
    public void resetDistribution_RU()
    {
        SourceDocumentLineAccountingStatus accountingStatus = SourceDocumentLine::find(this.SourceDocumentLine).AccountingStatus;

        if (accountingStatus == SourceDocumentLineAccountingStatus::Canceled || accountingStatus == SourceDocumentLineAccountingStatus::Finalized)
        {
            return;
        }

        if (accountingStatus == SourceDocumentLineAccountingStatus::Completed)
        {
            SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
        }

        SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes and regenerates the distributions for the current document.
    /// </summary>
    /// <param name="_fullyDistribute">
    /// The boolean value that indicates if the sourcedocumentline should be fully distributed or not; optional.
    /// </param>
    /// <param name="_caller">
    /// The caller that invoked this method; optional;
    /// </param>
    /// <remarks>
    /// This is used to reset the accounting distributions for the current line.
    /// </remarks>
    public void resetDistributions(boolean _fullyDistribute = false, SourceDocumentProcessorCaller _caller = null)
    {
        SourceDocumentLine sourceDocumentLine;

        // Check to see that the commitments feature is enabled and that there are existing distributions.
        if (AccountingDistribution::existSourceDocumentLine(this.SourceDocumentLine))
        {
            select firstonly sourceDocumentLine
                where sourceDocumentLine.RecId == this.SourceDocumentLine;

            // set the accounting state to draft
            SourceDocumentLineProcessor::submitSourceDocumentLine(sourceDocumentLine, false, SourceDocumentLineAccountingStatus::Draft, _caller);

            if (_fullyDistribute)
            {
                // set the accounting state back to fully distributed
                SourceDocumentLineProcessor::submitSourceDocumentLine(sourceDocumentLine, false, SourceDocumentLineAccountingStatus::FullyDistributed, _caller);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFieldStateForAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the fieldstate of all fields for the Table.
    /// </summary>
    public void resetFieldStateForAllFields()
    {
        DictTable dictTable = new DictTable(tableName2id(tableStr(VendInvoiceInfoLine)));

        for (int i = 1; i <= dictTable.fieldCnt(); i++)
        {
            this.fieldState( dictTable.fieldCnt2Id(i), FieldState::NotSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromHeader</Name>
				<Source><![CDATA[
    void setAddressFromHeader(VendInvoiceInfoTable _vendInvoiceInfoTable = this.vendInvoiceInfoTable())
    {
        this.AddressRefRecId = _vendInvoiceInfoTable.AddressRefRecId;
        this.AddressRefTableId = _vendInvoiceInfoTable.AddressRefTableId;
        this.DeliveryName = _vendInvoiceInfoTable.DeliveryName;
        this.DeliveryPostalAddress = _vendInvoiceInfoTable.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventDim</Name>
				<Source><![CDATA[
    void setAddressFromInventDim(InventDim _inventDim)
    {
        InventLocation inventLocation;
        InventSite inventSite;
        LogisticsLocationRecId location;
        // <GIN>
        TransTaxInformation transTaxInformation;
        #ISOCountryRegionCodes
        // </GIN>

        if (_inventDim.RecId)
        {
            inventLocation = InventLocation::find(_inventDim.InventLocationId);
            location = InventLocation::getLocationFromRole(inventLocation.RecId, LogisticsLocationRoleType::Delivery);

            if (location)
            {
                this.setDeliveryPostalAddress(location, inventLocation);
            }
            else if (inventLocation.VendAccount)
            {
                VendTable locationVendTable = VendTable::find(inventLocation.VendAccount);
                location = LogisticsPostalAddress::getLocation(DirParty::primaryPostalAddress(locationVendTable.Party).RecId);

                if (location)
                {
                    this.setDeliveryPostalAddress(location, locationVendTable);
                    this.DeliveryName = locationVendTable.name();
                }
            }

            if (!location)
            {
                inventSite = InventSite::find(_inventDim.InventSiteId);
                if (inventSite)
                {
                    location = LogisticsLocationDefault::findSimpleDefaultByRoleType(inventSite, LogisticsLocationRoleType::Delivery).RecId;
                }

                if (location)
                {
                    this.setDeliveryPostalAddress(location, inventSite);
                }
                else
                {
                    this.setAddressFromHeader();
                }
            }

            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this);
                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.selectForUpdate(true);
                    transTaxInformation.CompanyLocation = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(_inventDim.InventLocationId,_inventDim.InventSiteId);
                    transTaxInformation.TaxInformation = TaxInformation_IN::findDefaultbyLocation(transTaxInformation.CompanyLocation).RecId;
                    TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
                    transTaxInformation.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromVendTable</Name>
				<Source><![CDATA[
    void setAddressFromVendTable(VendTable _vendTable)
    {
        this.DeliveryName = _vendTable.name();
        this.DeliveryPostalAddress = DirParty::primaryPostalAddress(_vendTable.Party).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdvancedPricingInvoiceCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    /// <param name="_calculationId">
    /// The calculation ID to set; optional.
    /// </param>
    public void setAdvancedPricingInvoiceCalculationId(PDSCalculationId _calculationId = '')
    {
        this.VendDocumentLineMap::setAdvancedPricingInvoiceCalculationId(_calculationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>AgreementLine</c> and <c>CurrencyCode</c> fields when the procurement category is changed for a vendor invoice line.
    /// </summary>
    private void setAgreementLine()
    {
        EcoResCategory ecoResCategory, ecoResCategoryChildren;
        AgreementLine agreementLineLocal;

        if (this.isCategoryBased())
        {
            select firstOnly RecId from ecoResCategory
                order by ecoResCategory.Level desc
                join Category, Agreement from agreementLineLocal
                    where ecoResCategory.RecId == agreementLineLocal.Category
                        && agreementLineLocal.Agreement == this.vendInvoiceInfoTable().PurchAgreementHeader_PSN
                        && agreementLineLocal.IsDeleted == NoYes::No
                        && agreementLineLocal.InventDimDataAreaId == appl.company().dataArea(tablenum(InventDim))
                        && agreementLineLocal.ExpirationDate >= (this.vendInvoiceInfoTable().TransDate ? this.vendInvoiceInfoTable().TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                        && agreementLineLocal.EffectiveDate <= (this.vendInvoiceInfoTable().TransDate ? this.vendInvoiceInfoTable().TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                exists join ParentCategory, RecId from ecoResCategoryChildren
                    where ecoResCategoryChildren.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                        && ecoResCategoryChildren.NestedSetLeft >= ecoResCategory.NestedSetLeft
                        && ecoResCategoryChildren.NestedSetRight <= ecoResCategory.NestedSetRight
                        && (ecoResCategory.RecId == this.ProcurementCategory || ecoResCategoryChildren.RecId == this.ProcurementCategory);

            if (agreementLineLocal)
            {
                this.AgreementLine_PSN = agreementLineLocal.RecId;
                this.currencyCode = agreementLineLocal.purchAgreementHeader().Currency;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>AlcoholLicenseSeriesNum_RU</c> field of the current line.
    /// </summary>
    /// <param name="_documentDate">
    ///    Date which is used to find the appropriate license.
    /// </param>
    public void setAlcoholLicenseSeriesNum_RU(DocumentDate _documentDate)
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        InventTable inventTable;

        if (!this.isNonPO())
        {
            inventTable = this.inventTable();

            if (inventTable.AlcoholProductionTypeId_RU)
            {
                vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();

                vendInvoiceInfoLine_W.AlcoholLicenseSeriesNum_RU = AlcoholLicenseTable_RU::findByTypeDateOwner(
                                                            this.inventDim().inventProfile_RU().AlcoholActivityType,
                                                            inventTable.AlcoholProductionTypeId_RU,
                                                            _documentDate,
                                                            VendTable::find(this.InvoiceAccount).Party,
                                                            CustVend_RU::Vend).LicenseSeriesNum;

                this.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default CFOP code and related fields
    /// </summary>
    /// <param name="_askToUser">
    /// boolean to define if should request user interaction
    /// </param>
    public void setCFOP_BR(boolean _askToUser = false)
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        CFOPValidation_BR cfopValidation = CFOPValidation_BR::construct(this);

        if (!cfopValidation.checkCFOP(_askToUser))
        {
            vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();
            vendInvoiceInfoLine_W.cfopTable_BR = cfopValidation.getDefaultCFOP(_askToUser);

            this.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);

            this.onCFOPChange_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCWRemainAfterInvent</Name>
				<Source><![CDATA[
    public void setCWRemainAfterInvent()
    {
        // convert first to inventQty
        InventTable inventTable = this.inventTable();
        InventQty localRemainAfterInvent = PdsCatchWeight::inventQty(inventTable.ItemId, this.PdsCWRemainAfter);

        // convert to purch qty
        this.RemainAfter = UnitOfMeasureConverter::convert(
                localRemainAfterInvent,
                UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()),
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.purchLine().PurchUnit),
                NoYes::Yes,
                inventTable.Product);

        if (!this.VendDocumentLineMap::isNonPO())
        {
            this.RemainAfterInvent = localRemainAfterInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>VendInvoiceInfoLine.inventDimId</c> field and
    /// applies default values.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that is applied to the <c>VendInvoiceInfoLine.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer that is related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;

        _inventDim.setInventSiteFromParentIfModified(this, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    /// <c>InventDimId</c> value to the <c>VendInvoiceInfoLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that is referenced by the current <c>VendInvoiceInfoLine</c>
    /// record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim inventDim = InventDim::findOrCreate(_inventDim);

        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReceiveNow</Name>
				<Source><![CDATA[
    public void setInventReceiveNow(boolean _setInventNow = true)
    {
        this.VendDocumentLineMap::setInventReceiveNow(_setInventNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    public void setLineAmount(Qty _qty = this.ReceiveNow, PurchLine _purchLine = null)
    {
        AgreementLineVolumeCommitment agreementLineVolumeCommitment;

        if (this.isDirectInvoice())
        {
            if (AgreementLine::find(this.AgreementLine_PSN).isQuantityBased())
            {
                this.LineAmount = AgreementLineQuantityCommitment::find(this.AgreementLine_PSN).lineAmount();
            }
            else
            {
                agreementLineVolumeCommitment = AgreementLineVolumeCommitment::find(this.AgreementLine_PSN);

                if (agreementLineVolumeCommitment)
                {
                    if (agreementLineVolumeCommitment.CommitedAmount < agreementLineVolumeCommitment.AgreedReleaseLineMinAmount)
                    {
                        this.LineAmount = agreementLineVolumeCommitment.CommitedAmount;
                    }
                    else if (VendDirectInvoiceChangeDimensionNotUpdateLineAmountFlight::instance().isEnabled() &&
                        agreementLineVolumeCommitment.AgreedReleaseLineMinAmount)
                    {
                        this.LineAmount = agreementLineVolumeCommitment.AgreedReleaseLineMinAmount;
                    }
                }
            }
        }
        else
        {
            this.VendDocumentLineMap::setLineAmount(_qty, _purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceLineNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and sets all invoice line numbers for the given invoice.
    /// </summary>
    /// <returns>
    /// True if any of the invoice line numbers were set, otherwise false.
    /// </returns>
    public static boolean setInvoiceLineNumbers(TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        boolean ret = VendInvoiceInfoLine::checkForInvalidInvoiceLineNum(_tableRefId);

        if (ret)
        {
            LineNum maxLineNum = VendInvoiceInfoLine::getNextInvoiceLineNumber(_tableRefId);

            // update all rows with 0 as a invoice line number
            ttsbegin;
            while select forupdate RecId from vendInvoiceInfoLine
                order by vendInvoiceInfoLine.RecId asc
                where vendInvoiceInfoLine.TableRefId == _tableRefId
                    && vendInvoiceInfoLine.InvoiceLineNum == 0
            {
                vendInvoiceInfoLine.InvoiceLineNum = maxLineNum;
                vendInvoiceInfoLine.doUpdate();

                maxLineNum++;
            }
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    void setLocation(LogisticsLocationRecId _locationRecId)
    {
        LogisticsLocation location = LogisticsLocation::find(_locationRecId);

        if (location.Description)
        {
            this.DeliveryName = location.Description;
        }

        this.DeliveryPostalAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryPostalAddress</Name>
				<Source><![CDATA[
    void setDeliveryPostalAddress(LogisticsLocationRecId _locationRecId, Common _source = null)
    {
        this.DeliveryPostalAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(_locationRecId);

        if (_source)
        {
            LogisticsLocationSelectForm_VendInvoiceInfoLine::construct(this).copyAddressToCaller(_source, this.DeliveryPostalAddress);
        }
        else
        {
            LogisticsLocationSelectForm_VendInvoiceInfoLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(InventDim _inventDim, boolean _doCallPriceDate = false, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    void setPriceDisc(InventDim inventDim)
    {
        this.setPriceAgreement(inventDim);
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    void setQty(DocumentStatus _documentStatus, boolean _creditRemaining, boolean _setInventNow = true, boolean _setInventQtys = true)
    {
        this.VendDocumentLineMap::setQty(_documentStatus, _creditRemaining, _setInventNow, _setInventQtys);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainAfterInvent</Name>
				<Source><![CDATA[
    public void setRemainAfterInvent()
    {
        this.VendDocumentLineMap::setRemainAfterInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set VendInvoiceInfoLine.TaxGroup and VendInvoiceInfoLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup taxGroup;
        TaxItemGroup taxItemGroup;
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendInvoiceInfoTable();

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.vendInvoiceInfoLine_W().cfopTable_BR,
                                                                           vendInvoiceInfoTable.vendInvoiceInfoTable_W().SalesPurchOperationType_BR,
                                                                           SalesPurchTrntype_BR::Purchase,
                                                                           CustVendType_BR::Vendor,
                                                                           vendInvoiceInfoTable.OrderAccount,
                                                                           this.ItemId,
                                                                           this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());
        if (!taxGroup)
        {
            taxGroup = vendInvoiceInfoTable.TaxGroup;
        }

        if (!taxItemGroup)
        {
            taxItemGroup = this.inventTable().purchTaxItemGroupId();
        }

        this.TaxGroup = taxGroup ? taxGroup : this.TaxGroup;
        this.TaxItemGroup = taxItemGroup ? taxItemGroup : this.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultServiceCodeFromInventTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Vendor Invoice's Service Code to the Item's default Service Code,
    /// considering either the service code or service code for the delivery address' city according to Service Code On Delivery Address value
    /// </summary>
    public void setDefaultServiceCodeFromInventTable_BR()
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();

        LogisticsPostalAddress deliveryAddress = this.vendInvoiceInfoTable().vendInvoiceInfoTable_W().ServiceCodeOnDlvAddress_BR == NoYes::Yes ?
                            LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress) : null;

        vendInvoiceInfoLine_W.TaxServiceCode_BR = this.inventTable().serviceCode_BR(deliveryAddress).ServiceCodeId;

        this.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the delivery name based on the Delivery postal address.
    /// </summary>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    TransDate taxDate(TransDate _transDate)
    {
        return this.VendDocumentLineMap::taxDate(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(_transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCodeType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold code type.
    /// </summary>
    /// <returns>
    /// The tax withhold code type.
    /// </returns>
    public TaxWithholdCodeType_IN taxWithholdCodeType_IN()
    {
        VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(this.RecId);
        TaxWithholdCodeType_IN taxWithholdCodeType = TaxWithholdCodeType_IN::None;

        if (vendInvoiceInfoLineTaxExtension.tdsGroup != '')
        {
            taxWithholdCodeType = TaxWithholdCodeType_IN::TDS;
        }
        else if (vendInvoiceInfoLineTaxExtension.tcsGroup != '')
        {
            taxWithholdCodeType = TaxWithholdCodeType_IN::TCS;
        }

        return taxWithholdCodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the strategy used for validation and applying default values.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record used for applying the default values; optional.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// A <c>PurchParmUpdate</c> table record used for applying the default values; optional.
    /// </param>
    /// <returns>
    /// The strategy used for validation and applying default values.
    /// </returns>
    private VendDocumentLineType type(PurchLine _purchLine = null, PurchParmUpdate _purchParmUpdate = null)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (this.Ordering == DocumentStatus::None)
        {
            select Ordering, DocumentOrigin from vendInvoiceInfoTable
                where vendInvoiceInfoTable.TableRefId == this.TableRefId &&
                    vendInvoiceInfoTable.ParmId == this.ParmId;

            this.Ordering = vendInvoiceInfoTable.Ordering;
            this.DocumentOrigin = vendInvoiceInfoTable.DocumentOrigin;
        }

        this.Ordering = DocumentStatus::Invoice;
        return VendDocumentLineType::construct(this, _purchLine, _purchParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VendDocumentLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>VendDocumentLineInterface</c> object.
    /// </returns>
    public VendDocumentLineInterface vendDocumentLineInterface()
    {
        return this.VendDocumentLineMap::vendDocumentLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine original = this.orig();
        #ISOCountryRegionCodes

        super();

        this.SysExtensionSerializerMap::postUpdate();

        if (this.ReceiveNow != original.ReceiveNow)
        {
            if(VendInvoiceReceiveQtyUpdateTelemetryFlight::instance().isEnabled())
            {
                var logger = SysInstrumentationLoggerFactory::CreateLogger("VendInoviceInfoLine::Update");
                logger.logInformation(strFmt("VendInoviceInfoLine:TableRefId->%1, original receiveNow->%2, updated receiveNow->%3, inventNow->%4", original.TableRefId, original.ReceiveNow, this.ReceiveNow, this.InventNow));
            }
            VendInvoiceInfoLineMarkupMatchingTrans::reapplyVendInvoiceInfoLineMarkupTrans(this.RecId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && !DimensionDefaultFacade::areEqual(this.DefaultDimension, original.DefaultDimension))
        {
            this.resetDistribution_RU();
        }

        if (this.ProcurementCategory != original.ProcurementCategory || (!this.PurchPrice && (this.ReceiveNow != original.ReceiveNow)))
        {
            this.resetDistributions();
        }

        // Update distributions if line item is changed.
        boolean distributionUpdateNeeded = this.distributionUpdateNeeded(original);
        if (distributionUpdateNeeded)
        {
            vendInvoiceInfoTable = this.vendInvoiceInfoTable();

            TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                // Only delete tax information if the invoice line is not being inserted via AIF.
                TaxWithholdUncommitted_IN::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
            }

            this.updateDistribution();
            vendInvoiceInfoTable.updateFromVendLines();
            if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }

        // if the PurchCommitmentLine_PSN field has been changed, then reset the distributions
        if (((original.BudgetReservationLine_PSN != this.BudgetReservationLine_PSN) && PublicSectorUtils::isBudgetReservationEnabled()) || ((this.PurchCommitmentLine_PSN != original.PurchCommitmentLine_PSN) && PublicSectorUtils::isFrenchRegulatoryEnabled()))
        {
            this.resetDistributions(true, AccountingDistributionViewModelCaller::construct(AccountingDistributionMethod::None));
        }

        if (FinTagConfiguration::isFinTagConfigurationSet(this.DataAreaId) 
            && PurchaseOrderFinTagFeature::isEnabled() && this.FinTag != original.FinTag)
        {
            AccountingDistributionFinTagPropagator::updateForLine(this.SourceDocumentLine, this.FinTag);
        }

        if (this.isActive())
        {
            boolean hadBudgetReservationLine = original.isBudgetReservationLineReferenced();
            this.updateVendorInvoiceProjectFromBudgetReservation(false, hadBudgetReservationLine);
        }

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled()
            && (this.isWithholdUpdated(original) || distributionUpdateNeeded))
        {
            if (!vendInvoiceInfoTable)
            {
                vendInvoiceInfoTable = this.vendInvoiceInfoTable();
            }

            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWithholdUpdated</Name>
				<Source><![CDATA[
    private boolean isWithholdUpdated(VendInvoiceInfoLine _vendInvoiceInfoLineOrig)
    {
        return this.TaxWithholdGroup != _vendInvoiceInfoLineOrig.TaxWithholdGroup ||
            this.TaxWithholdItemGroupHeadingId != _vendInvoiceInfoLineOrig.TaxWithholdItemGroupHeadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPackAccessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update and Pack AccessableValue_IN
    /// </summary>
    private void updateAndPackAccessableValue_IN()
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;

        if (TaxParameters::checkTaxParameters_IN())
        {
            vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();
            vendInvoiceInfoLine_W.AssessableValue_IN = this.getMiscChargesAmount_IN(this.TableId, this.RecId, DocumentStatus::Invoice);
            this.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistribution</Name>
				<Source><![CDATA[
    public void updateDistribution()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountByAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified vendor invoice line amount fits the corresponding purchase
    /// agreement line.
    /// </summary>
    public boolean validateAmountByAgreement()
    {
        AgreementLine agreementLine;
        AmountCur agreementRemainingAmount, origLineAmount;
        boolean isAmountValid = true;

        if (this.AgreementLine_PSN)
        {
            agreementLine = AgreementLine::find(this.AgreementLine_PSN);

            if (agreementLine && agreementLine.IsMaxEnforced)
            {
                // Because of the way the remaining amount is calculated the original amount of the current line
                // will be subtracted from it which can cause incorrect calculations if we are changing the amount on
                // an existing row so add the original amount to the remaining amount.
                origLineAmount = this.orig().LineAmount;
                agreementRemainingAmount = agreementLine.remainingQueried() + origLineAmount;

                if (agreementLine.AgreedReleaseLineMinAmount && (this.LineAmount < agreementLine.AgreedReleaseLineMinAmount))
                {
                    isAmountValid = checkFailed(strFmt("@SYS329992", this.LineAmount, agreementLine.AgreedReleaseLineMinAmount));
                }
                else if (agreementLine.AgreedReleaseLineMaxAmount && (this.LineAmount > agreementLine.AgreedReleaseLineMaxAmount))
                {
                    isAmountValid = checkFailed(strFmt("@SYS329993", this.LineAmount, agreementLine.AgreedReleaseLineMaxAmount));
                }

                if (agreementRemainingAmount < this.LineAmount)
                {
                    isAmountValid = checkFailed("@SYS305711");
                }
            }
        }

        return isAmountValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId field, PurchLine _purchLine = null)
    {
        boolean isValid;

        if (field == fieldNum(VendInvoiceInfoLine, ItemId))
        {
            // ItemId needs to be validated in validateFieldValue, after any Item string substitution has happened
            isValid = true;
        }
        else
        {
            isValid = this.validateFieldId(field, _purchLine);
        }

        return isValid && super(field);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to the given field Id.
    /// </summary>
    /// <param name="field">
    /// ID of the validated field.
    /// </param>
    /// <param name="_purchLine">
    /// <c>PurchLine</c> table record corresponding to current invoice line; optional.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    private boolean validateFieldId(FieldId field, PurchLine _purchLine = null)
    {
        boolean isValid = true;
        VendDocumentLineType vendDocumentLineType = this.type(_purchLine);

        if (vendDocumentLineType != null)
        {
            isValid = vendDocumentLineType.validateField(field);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a field value.
    /// </summary>
    /// <param name="_fieldName">
    ///    A string value that contains the field name.
    /// </param>
    /// <param name="_arrayIndex">
    ///    An integer that contains the array index, applies only if the field has array elements.
    /// </param>
    /// <returns>
    ///    True if validation succeeded; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean isValid = super(_fieldName, _arrayIndex);

        if (isValid)
        {
            switch (_fieldName)
            {
                case fieldStr(VendInvoiceInfoLine, TaxItemGroup):
                    isValid = TaxItemGroupHeading::validatePOTForGTA_IN(this.vendInvoiceInfoTable().vendTable_OrderAccount(), this.TaxItemGroup);
                    break;

                case fieldStr(VendInvoiceInfoLine, ItemId):
                    isValid = this.validateFieldId(fieldNum(VendInvoiceInfoLine, ItemId));
                    break;
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyAndAmount</Name>
				<Source><![CDATA[
    boolean validateQtyAndAmount()
    {
        return this.VendDocumentLineMap::validateQtyAndAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
        container taxCheck;

        isValid = this.validateWrite_ServerPre();

        isValid = isValid && this.validateAmountByAgreement();

        if (this.isBudgetReservationLineReferenced())
        {
            isValid = isValid && this.validateBudgetReservationLineByAmount();
        }

        if (isValid)
        {
            isValid = super();
        }

        if (isValid)
        {
            taxCheck = [this.LineAmount, this.Tax1099Amount, this.Tax1099StateAmount, this.Tax1099Fields, this.Tax1099State];
            isValid = Tax1099ElectronicCheck::tax1099EntryValidation(taxCheck);
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_ServerPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method was created to move execution of the logic for <c>validateWrite</c>
    /// onto the server. The logic is placed before other validation logic because the kernel
    /// validates information that will not be exposed as faults.
    /// </remarks>
    private boolean validateWrite_ServerPre()
    {
        #ISOCountryRegionCodes
        container tax1099check;
        boolean isValid = true;
        VendDocumentLineType vendDocumentLineType = this.type();

        if (vendDocumentLineType != null)
        {
            isValid = vendDocumentLineType.validateRow();
        }

        if (isValid && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            tax1099check = [this.LineAmount, this.Tax1099Amount, this.Tax1099StateAmount, this.Tax1099Fields, this.Tax1099State];
            isValid = Tax1099ElectronicCheck::tax1099EntryValidation(tax1099check);
        }

        // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
        isValid = isValid
            && (CheckTaxGroups::Error != Tax::isValidTaxGroupIntersectionV2(
                                            this.TaxGroup,
                                            this.TaxItemGroup,
                                            Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase)));

        // Verify that a withholding tax code is derived for the given Withholding tax Group and Item withholding tax Group.
        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            isValid = isValid
                && TaxWithholdIntersection::isValidWHTGroupIntersection(
                    TaxWithholdParameters::find().CheckIntersection,
                    this.TaxWithholdGroup,
                    this.TaxWithholdItemGroupHeadingId) != TaxWithholdCheckWHTGroups::Error;
            }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLine_Asset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the VendInvoiceInfoLine_Asset line for the given <c>VendInvoiceInfoLine</c> table
    /// buffer, if a line exists.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A single <c>VendInvoiceInfoLine_Asset</c> table record if it exists.
    /// </returns>
    /// <remarks>
    /// If the record does not exist, an empty <c>VendInvoiceInfoLine_Asset</c> table record is returned.
    /// </remarks>
    public VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset(boolean _forUpdate = false)
    {
        return VendInvoiceInfoLine_Asset::findByVendInvoiceInfoLineRecId(this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceInfoLine_BR</c> record that is associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceInfoLine_BR</c> record that is associated with this record
    /// if one exists; otherwise, an empty record.
    /// </returns>
    public VendInvoiceInfoLine_BR vendInvoiceInfoLine_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoLine_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLine_Project</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>VendInvoiceInfoLine_Project</c> record for the given <c>VendInvoiceInfoLine</c>
    /// table buffer.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendInvoiceInfoLine_Project</c> table; otherwise, an empty record.
    /// </returns>
    public VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project(boolean _forUpdate = false)
    {
        return VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceInfoLine_W</c> record that is associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceInfoLine_W</c> record that is associated with this record
    /// if one exists; otherwise, an empty record.
    /// </returns>
    public VendInvoiceInfoLine_W vendInvoiceInfoLine_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoLine_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLineCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>VendInvoiceInfoLineCorrLink_RU</c> record for current <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name="_forupdate">
    /// Specify true, if record should be selected for update.
    /// </param>
    /// <returns>
    /// <c>VendInvoiceInfoLineCorrLink_RU</c> record for current <c>VendInvoiceInfoLine</c> record.
    /// </returns>
    public VendInvoiceInfoLineCorrLink_RU vendInvoiceInfoLineCorrLink_RU(boolean _forupdate = false)
    {
        return VendInvoiceInfoLineCorrLink_RU::findVendInvoiceInfoLine(this.RecId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    VendInvoiceInfoSubTable vendInvoiceInfoSubTable(boolean update = false)
    {
        return VendInvoiceInfoSubTable::find(this.ParmId, this.TableRefId, this.OrigPurchId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable</Name>
				<Source><![CDATA[
    VendInvoiceInfoTable vendInvoiceInfoTable(boolean _forUpdate = false)
    {
        return VendInvoiceInfoTable::find(this.ParmId, this.TableRefId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantitySign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the signs of the supplied quantities are the same.
    /// </summary>
    /// <param name="_invoiceQty">
    /// The value of the invoice quantity field to be validated.
    /// </param>
    /// <param name="_orderQty">
    /// The ordered quantity in purchasing or inventory unit of measure.
    /// </param>
    /// <param name="_errorMessage">
    /// The error message to display if the quantities fail validation.
    /// </param>
    /// <returns>
    /// true if the signs are the same; otherwise, false.
    /// </returns>
    public static boolean checkQuantitySign(Qty _invoiceQty, Qty _orderQty, str _errorMessage = '')
    {
        boolean isValid = true;

        #VendInvoiceFaults

        if (_invoiceQty * _orderQty < 0)
        {
            if (_errorMessage != '')
            {
                AifFault::checkFailedLogFault(_errorMessage, #InvoiceQtyAndOrderQtyHaveOppositeSigns);
            }
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromPurchParmUpdateNotPending</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete lines from <c>VendInvoiceInfoLine</c> for a ParmId, but not if they are pending
    /// </summary>
    /// <param name="_purchParmUpdate">
    /// The parmId to delete for is given by this parameter.
    /// </param>
    /// <param name="_deleteNonPO">
    /// A Boolean to indicate whether lines without a PO should be deleted; optional.
    /// </param>
    static void deleteFromPurchParmUpdateNotPending(PurchParmUpdate _purchParmUpdate, boolean _deleteNonPO = false)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        delete_from vendInvoiceInfoLine
        where vendInvoiceInfoLine.ParmId == _purchParmUpdate.ParmId
            && (_deleteNonPO
                || vendInvoiceInfoLine.OrigPurchId != ''
                || vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication)
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                && vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>VendInvoiceInfoLine</c> record occurs in the table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID used to check whether the record exists.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (select firstonly RecId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveNotSaved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are invoice lines in the <c>VendInvoiceInfoLine</c> table that matches specified
    /// criteria that do not correspond to draft invoice lines saved in the <c>VendInvoiceInfoLine</c>
    /// table.
    /// </summary>
    /// <param name="_parmId">
    /// The paremeter ID of the records to search for in the <c>VendInvoiceInfoLine</c> table.
    /// </param>
    /// <param name="_inventTransId">
    /// The inventory transaction ID of the records to search for in the <c>VendInvoiceInfoLine</c> table.
    /// </param>
    /// <returns>
    /// true if any lines are found in the <c>VendInvoiceInfoLine</c> table that match specified criteria;
    /// otherwise, false.
    /// </returns>
    public static boolean existActiveNotSaved(ParmId _parmId, TradeInventTransId _inventTransId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_parmId && _inventTransId)
        {
            select firstonly RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == _parmId &&
                    vendInvoiceInfoLine.InventTransId == _inventTransId
                exists join vendInvoiceInfoTable
                    where vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                        vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                        vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::New;

            return vendInvoiceInfoLine.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAnyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any unposted <c>VendInvoiceInfoLine</c> exists for a given <c>PurchId</c>.
    /// </summary>
    /// <param name="_origPurchId">
    /// The <c>PurchId</c> to search for.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existAnyPurch(PurchId _origPurchId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.OrigPurchId == _origPurchId
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                    && vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

        return (vendInvoiceInfoLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDifferentCurrency</Name>
				<Source><![CDATA[
    static boolean existDifferentCurrency(ParmId _parmId, TradeLineRefId _tableRefId, CurrencyCode _currencyCode)
    {
        if (!_tableRefId || !_currencyCode)
        {
            return false;
        }

        return (select firstonly RecId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId == _parmId
                        && vendInvoiceInfoLine.TableRefId == _tableRefId
                        && vendInvoiceInfoLine.CurrencyCode != _currencyCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the existance of any Non PO lines for a given invoice based on ParmId and TableRefId values
    /// </summary>
    /// <param name = "_parmId">The ParmId (session) value used to find any Non PO lines.</param>
    /// <param name = "_tableRefId">The TableRefId value used to find any Non PO lines.</param>
    /// <returns>True if any Non PO lines exist; otherwise, False.</returns>
    static boolean existNonPO(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        return (select firstonly RecId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId == _parmId &&
                        vendInvoiceInfoLine.TableRefId == _tableRefId &&
                        !vendInvoiceInfoLine.OrigPurchId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the existance of any PO lines for a given invoice based on <c>ParmId</c> and TableRefId values
    /// </summary>
    /// <param name = "_parmId">The ParmId (session) value used to find any PO lines.</param>
    /// <param name = "_tableRefId">The TableRefId value used to find any PO lines.</param>
    /// <returns>True if any PO lines exist; otherwise, False.</returns>
    internal static boolean existPO(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        return (select firstonly RecId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId == _parmId
                        && vendInvoiceInfoLine.TableRefId == _tableRefId
                        && vendInvoiceInfoLine.OrigPurchId != '').RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurch</Name>
				<Source><![CDATA[
    static boolean existPurch(ParmId _parmId, PurchId _origPurchId)
    {
        if (_origPurchId)
        {
            return (select firstonly RecId from vendInvoiceInfoLine
                        where vendInvoiceInfoLine.ParmId == _parmId &&
                            vendInvoiceInfoLine.OrigPurchId == _origPurchId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTableRefId</Name>
				<Source><![CDATA[
    static boolean existTableRefId(ParmId parmId, TradeLineRefId tableRefId)
    {
        if (tableRefId)
        {
            return (select firstonly RecId from vendInvoiceInfoLine
                        where vendInvoiceInfoLine.ParmId == parmId
                            && vendInvoiceInfoLine.TableRefId == tableRefId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPendingPrepayInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks for any pending prepayment invoices for a purchase order.
    /// </summary>
    /// <param name="_purchId">
    ///   A purchase order ID value.
    /// </param>
    /// <returns>
    ///   true, if there are pending prepayment invoices for the PO; otherwise, false.
    /// </returns>
    public static boolean existPendingPrepayInvoice(PurchId _purchId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.OrigPurchId == _purchId &&
                vendInvoiceInfoLine.LineType == PurchInvoiceLineType::Advance
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>VendInvoiceInfoLine</c> record with the specified <c>PurchLineRecId</c> field value.
    /// </summary>
    /// <param name="_purchLineRefRecId">
    /// The <c>PurchLineRecId</c> field value to use to find the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that specifies whether the record buffer should be able to be updated.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoLine</c> record buffer.
    /// </returns>
    static VendInvoiceInfoLine findByPurchLineRefRecId(PurchLineRefRecId _purchLineRefRecId, boolean _update = false)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (_purchLineRefRecId)
        {
            vendInvoiceInfoLine.selectForUpdate(_update);

            select firstonly vendInvoiceInfoLine
                where vendInvoiceInfoLine.PurchLineRecId == _purchLineRefRecId &&
                    vendInvoiceInfoLine.ParmId != '';
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field for which to search.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field for which to search.
    /// </param>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> field for which to search.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record buffer can be updated.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoLine</c> record.
    /// </returns>
    static VendInvoiceInfoLine findInventTransId(ParmId _parmId, TradeLineRefId _tableRefId, TradeInventTransId _inventTransId, boolean _update = false )
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        vendInvoiceInfoLine.selectForUpdate(_update);

        select firstonly vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _parmId
                && vendInvoiceInfoLine.TableRefId == _tableRefId
                && vendInvoiceInfoLine.InventTransId == _inventTransId;

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the specified invoice line for the given record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoLine</c> table record if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// If the record does not exist, an empty <c>VendInvoiceInfoLine</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoLine findRecId(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (_recId != 0)
        {
            if (_forUpdate)
            {
                vendInvoiceInfoLine.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoLine.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendInvoiceInfoLine
                where vendInvoiceInfoLine.RecId == _recId;
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendInvoiceInfoLine</c> record by the <c>SourceDocumentLine</c> field.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A <c>SourceDocumentLine</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoLine</c> record.
    /// </returns>
    public static VendInvoiceInfoLine findSourceDocumentLine(RefRecId _sourceDocumentLine, boolean _forUpdate = false)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoLineRefRecId vendInvoiceInfoLineRecId;
        SelectableDataArea dataAreaId;
        SysGlobalObjectCache sysGlobalObjectCache;
        container result;

        if (_sourceDocumentLine)
        {
            sysGlobalObjectCache = new sysGlobalObjectCache();
            result = sysGlobalObjectCache.find(funcName(), [_sourceDocumentLine]);

            if (result != conNull())
            {
                vendInvoiceInfoLineRecId = conPeek(result, 1);
                dataAreaId = conPeek(result, 2);

                changeCompany(dataAreaId)
                {
                    vendInvoiceInfoLine = vendInvoiceInfoLine::findRecId(vendInvoiceInfoLineRecId, _forUpdate);
                }
            }

            if (!vendInvoiceInfoLine)
            {
                vendInvoiceInfoLine.selectForUpdate(_forUpdate);

                select firstonly crossCompany vendInvoiceInfoLine
                    where vendInvoiceInfoLine.SourceDocumentLine == _sourceDocumentLine;

                if (vendInvoiceInfoLine)
                {
                    sysGlobalObjectCache.insert(funcName(), [_sourceDocumentLine], [vendInvoiceInfoLine.RecId, vendInvoiceInfoLine.dataAreaId]);
                }
            }
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableRefIdInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the invoice line for the given <c>TableRefId</c> and <c>InventTransId</c> fields.
    /// </summary>
    /// <param name="_tableRefId">
    /// The number of the invoice to be deleted.
    /// </param>
    /// <param name="_inventTransId">
    /// The line identifier of the invoice line to be deleted.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    /// A single <c>VendInvoiceInfoLine</c> table record if it exists.
    /// </returns>
    /// <remarks>
    /// If the record does not exist, an empty <c>VendInvoiceInfoLine</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoLine findTableRefIdInventTransId(TradeLineRefId _tableRefId, TradeInventTransId _inventTransId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (_tableRefId && _inventTransId)
        {
            if (_forUpdate)
            {
                vendInvoiceInfoLine.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoLine.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendInvoiceInfoLine
                where vendInvoiceInfoLine.TableRefId == _tableRefId &&
                    vendInvoiceInfoLine.InventTransId == _inventTransId &&
                    vendInvoiceInfoLine.ParmId == '';
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectedInvoiceLines_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates links between <c>VendInvoiceInfoLine</c> records for current <c>VendInvoiceInfoTable</c> and
    /// <c>VendInvoiceTrans</c> records.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// <c>VendInvoiceInfoTable</c> record for which lines links should be set.
    /// </param>
    static void initCorrectedInvoiceLines_RU(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        Query query;
        QueryRun queryRun;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans invoiceTrans;
        VendInvoiceJour invoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoiceInfoLineCorrLink_RU corrLineLink;
        VendInvoiceJourCorrLink_RU corrJourLink;
        VendInvoiceJour origInvoiceJour;

        void findSourceInvoiceLine(boolean _controlItemDim)
        {
            query = CustVendInvoiceTrans::queryCorrectedTrans_RU(_vendInvoiceInfoTable.vendInvoiceInfoTable_RU().CorrectedInvoiceId_RU,
                                                             _vendInvoiceInfoTable.vendInvoiceInfoTable_RU().CorrectedInvoiceDate_RU,
                                                             _vendInvoiceInfoTable.InvoiceAccount,
                                                             _vendInvoiceInfoTable.CurrencyCode,
                                                             vendInvoiceInfoLine.purchLine(),
                                                             _controlItemDim);

            query.dataSourceTable(tableNum(VendInvoiceTrans)).firstOnly(true);

            queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                vendInvoiceTrans = queryRun.get(tableNum(VendInvoiceTrans));
                VendInvoiceInfoLineCorrLink_RU::createLink(vendInvoiceInfoLine.RecId, vendInvoiceTrans.RecId);
            }
        }

        if (!_vendInvoiceInfoTable.vendInvoiceInfoTable_RU().CorrectedInvoiceId_RU || !_vendInvoiceInfoTable.vendInvoiceInfoTable_RU().CorrectedInvoiceDate_RU)
        {
            return;
        }

        origInvoiceJour = _vendInvoiceInfoTable.vendInvoiceInfoTable_RU().getOriginalJour();

        ttsbegin;

        while select forupdate vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTable.TableRefId
            notexists join corrLineLink
                where corrLineLink.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
            exists join invoiceTrans
                where invoiceTrans.RecId == corrLineLink.CorrTransRecId
            exists join invoiceJour
                where invoiceJour.PurchId == invoiceTrans.PurchID
                    && invoiceJour.InvoiceId == invoiceTrans.InvoiceId
                    && invoiceJour.InvoiceDate == invoiceTrans.InvoiceDate
                    && invoiceJour.NumberSequenceGroup == invoiceTrans.NumberSequenceGroup
                    && invoiceJour.InternalInvoiceId == invoiceTrans.InternalInvoiceId
                    && invoiceJour.CurrencyCode == _vendInvoiceInfoTable.CurrencyCode
            exists join corrJourLink
                where corrJourLink.JourRecId == invoiceJour.RecId
                    && corrJourLink.CorrJourRecId == origInvoiceJour.refOriginalInvoiceRecId_RU()
        {
            VendInvoiceInfoLineCorrLink_RU::clearLinks(vendInvoiceInfoLine.RecId);

            findSourceInvoiceLine(true);
            if (!vendInvoiceInfoLine.existsCorrLink_RU() && !VendParameters::find().ItemDimAdjustLineControl_RU)
            {
                findSourceInvoiceLine(false);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRequestStatus</Name>
				<Source><![CDATA[
    public static void resetRequestStatus(RecId _vendInvoiceRecId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_vendInvoiceRecId);

        update_recordset vendInvoiceInfoLine
        setting RequestStatus = VendInvoiceRequestStatus::Draft
            where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                && vendInvoiceInfoLine.ParmId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>RequestStatus</c> field in the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///  The <c>RecId</c> parameter to update.
    /// </param>
    /// <param name="_requestStatus">
    /// The <c>RequestStatus</c> parameter that updates the record.
    /// </param>
    static public void setRequestStatus(RecId _recId, VendInvoiceRequestStatus _requestStatus)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        ttsbegin;

        vendInvoiceInfoLine.skipDataMethods(true);

        update_recordset vendInvoiceInfoLine
        setting RequestStatus = _requestStatus
        where vendInvoiceInfoLine.RecId == _recId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ParmId</c> of <c>VendInvoiceInfoLine</c> records for a given invoice.
    /// </summary>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfoLine</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    public static void updateParmId(TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        vendInvoiceInfoLine.skipDataMethods(true);
        vendInvoiceInfoLine.skipEvents(true);
        vendInvoiceInfoLine.skipDatabaseLog(true);

        update_recordset vendInvoiceInfoLine
        setting ParmId = _newParmId
            where vendInvoiceInfoLine.TableRefId == _tableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoLineTaxExtension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoLineTaxExtension_IN</c> record into this record as an extension.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineTaxExtension_IN">
    /// A <c>VendInvoiceInfoLineTaxExtension_IN</c> record to pack.
    /// </param>
    public void packVendInvoiceInfoLineTaxExtension_IN(VendInvoiceInfoLineTaxExtension_IN _vendInvoiceInfoLineTaxExtension_IN)
    {
        _vendInvoiceInfoLineTaxExtension_IN.VendInvoiceInfoLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceInfoLineTaxExtension_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>AssessableValueAccountingCurrency</c> field.
    /// </summary>
    /// <param name="_assessableValueAccountingCurrency">
    /// The value of <c>AssessableValueAccountingCurrency</c> field to set.
    /// </param>
    /// <returns>
    /// <c>AssessableValueAccountingCurrency_IN</c> from VendInvoiceInfoLine_W table
    /// </returns>
    public AmountMST parmAssessableValueAccountingCurrency(AmountMST _assessableValueAccountingCurrency)
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        vendInvoiceInfoLine_W = this.vendInvoiceInfoLine_W();
        vendInvoiceInfoLine_W.AssessableValueAccountingCurrency_IN = _assessableValueAccountingCurrency;
        this.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
        return vendInvoiceInfoLine_W.AssessableValueAccountingCurrency_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLineTaxExtension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceInfoLineTaxExtension_IN</c> record that is associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceInfoLineTaxExtension_IN</c> record that is associated with this record
    /// if one exists; otherwise, an empty record.
    /// </returns>
    public VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceInfoLineTaxExtension_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionReleaseVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current sourceDocumentLine is a vendor retention release or not.
    /// </summary>
    /// <param name="_refRecId">
    /// The SourceDocumentLine RecId.
    /// </param>
    /// <returns>
    /// True if the current sourceDocumentLine is vendor retention release else false.
    /// </returns>
    public static boolean isRetentionReleaseVendInvoice(RefRecId _refRecId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        boolean isRetReleaseVendinvoice = false;

        vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(_refRecId);

        if ((vendInvoiceInfoLine.ReceiveNow == 0) && (vendInvoiceInfoLine.PSAReleaseAmount != 0))
        {
            isRetReleaseVendinvoice = true;
        }

        return isRetReleaseVendinvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMarkupTransWithTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor invoice line has charges with taxes applied to them.
    /// </summary>
    /// <returns>
    /// True if the vendor invoice line has <c>MarkupTrans</c> with taxes; otherwise, false.
    /// </returns>
    public boolean hasMarkupTransWithTaxes()
    {
        MarkupTrans markupTrans;

        select firstonly RecId from markupTrans
            where markupTrans.TransTableId == tableNum(VendInvoiceInfoLine)
                && markupTrans.TransRecId == this.RecId
                && markupTrans.TaxGroup != ''
                && markupTrans.TaxItemGroup != '';

        return markupTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> VendInvoiceInfoTable </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.vendInvoiceInfoTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this vend invoice info line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineVendInvoiceImpl</c> object </returns>
    public TaxModelDocLineVendInvoiceImpl initTaxModelDocLine()
    {
        TaxModelDocLineVendInvoiceImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineVendInvoiceImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this vend invoice info line record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineVendInvoiceImpl_IN</c> object </returns>
    public TaxModelDocLineVendInvoiceImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLineVendInvoiceImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineVendInvoiceImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the head table.
    /// </summary>
    /// <returns>The record for VendInvoiceInfoTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.vendInvoiceInfoTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:VendInvoiceInfoLineTaxDocumentRowDisplayFormat", this.LineNum, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget reservation line related to the current invoice line.
    /// </summary>
    /// <returns>
    /// The budget reservation line related to the current invoice line.
    /// </returns>
    public BudgetReservationLine_PSN getBudgetReservationLine()
    {
        return BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetReservationLineReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget reservation line is referenced on the vendor invoice line or not.
    /// </summary>
    /// <returns>
    /// true if the budget reservation line is referenced; otherwise, false.
    /// </returns>
    public boolean isBudgetReservationLineReferenced()
    {
        boolean isReferenced;

        isReferenced = this.BudgetReservationLine_PSN != 0 && PublicSectorUtils::isBudgetReservationEnabled();

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetReservationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the remaining balance on a budget reservation line.
    /// </summary>
    public void checkBudgetReservationBalance()
    {
        if (this.isBudgetReservationLineReferenced())
        {
            BudgetReservation_PSN::checkBudgetReservationBalance(
                this.BudgetReservationLine_PSN,
                this.vendInvoiceInfoTable().SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current vendor invoice line is active.
    /// </summary>
    /// <returns>
    /// true if the current invoice line is active; otherwise, false.
    /// </returns>
    public boolean isActive()
    {
        return this.ParmId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationLineByAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// <c>BudgetReservationLine_PSN</c> records are not allowed to have both a
    /// positive and negative amount for the same <c>VendInvoiceInfoTable</c> record
    /// </summary>
    /// <returns>
    /// true if the line amount is positive or zero; otherwise false.
    /// </returns>
    public boolean validateBudgetReservationLineByAmount()
    {
        boolean isValidLineByAmount = true;

        if (this.isBudgetReservationLineReferenced())
        {
            if (this.LineAmount < 0)
            {
                warning("@Budgeting_BudgetReservationPS:CannotHaveNegativeInvoiceLineError");
                isValidLineByAmount = false;
            }
        }

        return isValidLineByAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorInvoiceProjectFromBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates, updates, or deletes a <c>VendInvoiceInfoLine_Project</c> record related to a budget reservation.
    /// </summary>
    /// <param name="_isInsert">
    /// A boolean value used to determine if this was called from table insert or update method.
    /// </param>
    /// <param name="_hadBudgetReservationLine">
    /// A boolean value used to evaluate when to delete old project information.
    /// </param>
    private void updateVendorInvoiceProjectFromBudgetReservation(boolean _isInsert, boolean _hadBudgetReservationLine)
    {
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
        BudgetReservationLine_PSN budgetReservationLine;
        boolean hasProject;

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            boolean hasBudgetReservationLine  = this.isBudgetReservationLineReferenced();

            if (hasBudgetReservationLine)
            {
                budgetReservationLine = budgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);
                hasProject = budgetReservationLine.ProjId != '';
            }

            if ((_hadBudgetReservationLine && !hasBudgetReservationLine)
                || (hasBudgetReservationLine && !hasProject))
            {
                delete_from vendInvoiceInfoLine_Project
                    where VendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == this.RecId;
            }
            else if (hasProject)
            {
                if (!_isInsert)
                {
                    vendInvoiceInfoLine_Project = VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(this.RecId, true);
                }

                vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId = this.RecId;
                vendInvoiceInfoLine_Project.initValue();
                vendInvoiceInfoLine_Project.initFromBudgetReservationLine(budgetReservationLine);

                if (vendInvoiceInfoLine_Project.validateWrite())
                {
                    vendInvoiceInfoLine_Project.write();
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get AssessableValue.
    /// </summary>
    /// <returns>
    /// The AssesableValue.
    /// </returns>
    public AmountCur getAssessableValue()
    {
        return VendInvoiceInfoLine_W::findByVendInvoiceInfoLine(this.RecId).AssessableValue_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRetentionTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if this invoice has a project retained schedule item invoice.
    /// </summary>
    /// <returns>ture if this is a project retain schedule item invoice; otherwise, false.</returns>
    internal boolean hasRetentionTerms()
    {
        boolean isRetainScheduleInvoice;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            PurchLine purchLine = PurchLine::findRecId(this.PurchLineRecId);
            isRetainScheduleInvoice = purchLine.PSARetainScheduleId ? true : false;
        }

        return isRetainScheduleInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetainedInvoiceSourceDocumentLineInCompletedState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this retained schedule item invoice source document line is in completed state.
    /// </summary>
    /// <returns>true if this retained schedule item invoice source document line is in completed state; otherwise, false.</returns>
    internal boolean isRetainedInvoiceSourceDocumentLineInCompletedState()
    {
        boolean result;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.hasRetentionTerms())
        {
            SourceDocumentLine sourceDocumentLine;

            select firstonly RecId from sourceDocumentLine
                where sourceDocumentLine.RecId == this.SourceDocumentLine &&
                    sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed;

            result = sourceDocumentLine.RecId ? true : false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIncompleteRetainedInvoiceByInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether if this invoice invent's transd ID has any incomplete retained schedule item invoice.
    /// </summary>
    /// <returns>true if this invoice invent's trand ID has any incomplete retained schedule item invoice; otherwise, false.</returns>
    internal boolean hasIncompleteRetainedInvoiceByInventTransId()
    {
        boolean result;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.InventTransId)
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            PurchLine purchLine;
            SourceDocumentLine sourceDocumentLine;

            select firstonly RecId from vendInvoiceInfoLine
                exists join purchLine
                    where purchLine.InventTransId == this.InventTransId &&
                        purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                exists join sourceDocumentLine
                    where sourceDocumentLine.RecId == vendInvoiceInfoLine.SourceDocumentLine &&
                        (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed
                            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft);

            result = vendInvoiceInfoLine.RecId ? true : false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAllRetainedAmountForThisInventTransBeenReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if all retained amount for this invent trans ID has been released.
    /// </summary>
    /// <returns>true if all retained amount has been released for this invent trans ID; otherwise, false.</returns>
    internal boolean hasAllRetainedAmountForThisInventTransBeenReleased()
    {
        boolean result;

        // For the case of retention, the calculation  of the retainage amount and the release amount is
        // calculated by multiplication of retention percentage and release percentage. Hence there will be rounding error
        // and round adjustment is used for this matter.
        // If this rounding adjustment is not used, then it may not be capable to identifier that all retained amount has been released.
        const real roundingAdjustment = 0.01;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.InventTransId)
        {
            // Verify if all retainage amount been released For the project vendor payment retainage scenario.
            PurchLine purchLine = PurchLine::findInventTransId(this.InventTransId);

            if (purchLine.PSARetainScheduleId)
            {
                VendInvoiceInfoLine vendInvoiceInfoLine;
                SourceDocumentLine sourceDocumentLine;

                select sum(PSARetainageAmount), sum(PSAReleaseAmount) from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.PurchLineRecId == purchLine.RecId
                exists join sourceDocumentLine
                    where sourceDocumentLine.RecId == vendInvoiceInfoLine.SourceDocumentLine &&
                        sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed;

                result = abs(vendInvoiceInfoLine.PSARetainageAmount - vendInvoiceInfoLine.PSAReleaseAmount) <= roundingAdjustment;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasICMSSTTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current line has ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// True if current line has ICMS-ST tax; otherwise false.
    /// </returns>
    public boolean hasICMSSTTax_BR()
    {
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.TaxItemGroup, this.TaxGroup, TaxType_BR::ICMSST);
        return TaxOnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>willAllRetainedAmountForThisInventTransBeReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine will retained amount for this invent trans ID be released.
    /// </summary>
    /// <returns>true if all retained amount will be released for this invent trans ID; otherwise, false.</returns>
    internal boolean willAllRetainedAmountForThisInventTransBeReleased()
    {
        boolean result;

        // For the case of retention, the calculation  of the retainage amount and the release amount is
        // calculated by multiplication of retention percentage and release percentage. Hence there will be rounding error
        // and round adjustment is used for this matter.
        // If this rounding adjustment is not used, then it may not be capable to identifier that all retained amount will been released.
        const real roundingAdjustment = 0.01;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.InventTransId)
        {
            // Verify if all retainage amount be released For the project vendor payment retainage scenario.
            PurchLine purchLine = PurchLine::findInventTransId(this.InventTransId);

            if (purchLine.PSARetainScheduleId)
            {
                VendInvoiceInfoLine vendInvoiceInfoLine;

                select sum(PSARetainageAmount), sum(PSAReleaseAmount) from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.PurchLineRecId == purchLine.RecId;

                result = abs(vendInvoiceInfoLine.PSARetainageAmount - vendInvoiceInfoLine.PSAReleaseAmount) <= roundingAdjustment;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetGroupBasedOnAssetRule</Name>
				<Source><![CDATA[
    private AssetGroupId getAssetGroupBasedOnAssetRule()
    {
        AssetGroupId assetGroup;

        #AssetRules
        if (this.RecId
            && this.ProcurementCategory
            && this.PurchPrice
            && this.currencyCode
            && AssetParameters::canAssetBeAutoCreated())
        {
            container assetRules = this.findAndProcessRule();

            assetGroup = conPeek(assetRules, #AssetQualifierAssetGroupPosition);
        }

        return assetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndProcessRule</Name>
				<Source><![CDATA[
    public container findAndProcessRule()
    {
        return AssetRule::findAndProcessRule(
            this.ProcurementCategory, 
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
            this.CurrencyCode, 
            this.PurchPrice, 
            CompanyInfo::findDataArea(curext()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetGroup</Name>
				<Source><![CDATA[
    private void setAssetGroup()
    {
        if (this.shouldSetAssetGroup())
        {
            AssetGroupId assetGroup = this.getAssetGroupBasedOnAssetRule();

            if (assetGroup)
            {
                // If procurement product of the vendor invoice line is valid,
                // then updating the asset group to vendor invoice line based on the fixed asset business rule.
                VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset = VendInvoiceInfoLine_Asset::findByVendInvoiceInfoLineRecId(this.RecId, true);

                if (!vendInvoiceInfoLine_Asset.AssetId)
                {
                    vendInvoiceInfoLine_Asset.setAssetGroupBasedOnAssetRule(assetGroup);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetAssetGroup</Name>
				<Source><![CDATA[
    private boolean shouldSetAssetGroup()
    {
        boolean shouldSetAssetGroup = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
            && AssetVendInvoiceLineProjectCreateFixedAssetFeature::isEnabled())
        {
            PurchLine purchLine = this.purchLine();
            if (purchLine.RecId != 0)
            {
                shouldSetAssetGroup = purchLine.allowCreateFixedAsset();
            }
            else
            {
                //For the non purchase order line scenario, try to find the invoice project information
                if (this.RecId != 0)
                {
                    VendInvoiceInfoLine_Project vendInvInfoLine_Project = VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(this.RecId);
                    if (vendInvInfoLine_Project.Recid != 0
                        && vendInvInfoLine_Project.ProjId != '')
                    {
                        shouldSetAssetGroup = false;
                    }
                }

            }
        }

        return shouldSetAssetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendInvoiceLine</Name>
				<Source><![CDATA[
    private void populateVendInvoiceLine(VendInvoiceStandardLineTemplate _vendInvoiceStandardLineTemplate,
                                          VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        this.ParmId = _vendInvoiceInfoTable.ParmId;
        this.TableRefId = _vendInvoiceInfoTable.TableRefId;
        this.InvoiceAccount = _vendInvoiceInfoTable.InvoiceAccount;
        this.OrderAccount = _vendInvoiceInfoTable.OrderAccount;
        this.LineNum = _vendInvoiceStandardLineTemplate.LineNum;
        this.Description = _vendInvoiceStandardLineTemplate.Description;
        this.Description= _vendInvoiceStandardLineTemplate.LineTxt;
        this.DefaultDimension = _vendInvoiceStandardLineTemplate.DefaultDimension;
        this.OrigStateId = _vendInvoiceStandardLineTemplate.OrigState;
        this.IntrastatCommodity = _vendInvoiceStandardLineTemplate.IntrastatCommodity;
        this.Transport = _vendInvoiceStandardLineTemplate.Transport;
        this.TransactionCode = _vendInvoiceStandardLineTemplate.TransactionCode;
        this.Port = _vendInvoiceStandardLineTemplate.Port;
        this.StatProcId = _vendInvoiceStandardLineTemplate.StatProcId;
        this.AccountingDistributionTemplate = _vendInvoiceStandardLineTemplate.AccountingDistributionTemplate;
        this.OrigCountryRegionId = _vendInvoiceStandardLineTemplate.OrigCountryRegionId;
        this.ProcurementCategory = _vendInvoiceStandardLineTemplate.ProcurementCategory;
        this.ItemId = _vendInvoiceStandardLineTemplate.ItemId;
        this.currencyCode = _vendInvoiceInfoTable.CurrencyCode;

        if (this.ItemId)
        {
            this.modifiedField(fieldNum(VendInvoiceInfoLine, ItemId));
        }

        else if (this.ProcurementCategory)
        {
            this.setInventDimId(InventDim::findOrCreateBlank().InventDimId);
        }

        this.PurchPrice = _vendInvoiceStandardLineTemplate.UnitPrice;
        this.ReceiveNow = _vendInvoiceStandardLineTemplate.Quantity;
        this.modifiedField(fieldNum(VendInvoiceInfoLine, ReceiveNow));

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromVendInvoiceLineTemplate</Name>
				<Source><![CDATA[
    public void insertFromVendInvoiceLineTemplate(
        VendInvoiceLineTemplate _vendInvoiceLineTemplate,
        VendInvoiceInfoTable _vendInvoiceInfoTable,
        VendTable _vendTable = null,
        VendRecurrenceInvoiceDefaultType _vendRecurrenceInvoiceDefaultType = VendRecurrenceInvoiceDefaultType::InvoiceTemplate)
    {
        VendInvoiceStandardLineTemplate vendInvoiceStandardLineTemplate;
        VendInvoiceMarkupTransTemplate vendInvoiceMarkupTransTemplate;
        VendTable vendTable;

        this.SourceDocumentLine = 0;
        this.VendInvoiceLineTemplate = _vendInvoiceLineTemplate.RecId;
        if (_vendInvoiceLineTemplate.getInstanceRelationType() == tableStr(VendInvoiceStandardLineTemplate))
        {
            vendInvoiceStandardLineTemplate = _vendInvoiceLineTemplate;

            this.populateVendInvoiceLine(vendInvoiceStandardLineTemplate, _vendInvoiceInfoTable);

            if (_vendRecurrenceInvoiceDefaultType == VendRecurrenceInvoiceDefaultType::InvoiceTemplate)
            {
                this.TaxGroup = vendInvoiceStandardLineTemplate.TaxGroup;
                this.OverrideSalesTax = vendInvoiceStandardLineTemplate.OverrideSalesTax;
                this.TaxItemGroup  = vendInvoiceStandardLineTemplate.TaxItemGroup;
            }
            else
            {
                if (_vendTable == null)
                {
                    vendTable = VendTable::find(_vendInvoiceInfoTable.OrderAccount);
                }
                else
                {
                    vendTable = _vendTable;
                }

                if (vendInvoiceStandardLineTemplate.TaxItemGroup)
                {
                    this.TaxItemGroup = vendInvoiceStandardLineTemplate.TaxItemGroup;
                }
                

                this.TaxGroup = vendTable.TaxGroup;
                this.OverrideSalesTax = vendTable.OverrideSalesTax;
                this.TaxItemGroup = this.TaxItemGroup ? this.TaxItemGroup : Tax::taxItemGroup();
            }
    
            if (VendInvoiceDistributionTemplate::recordCountForTemplateLine(vendInvoiceStandardLineTemplate.RecId) == 1)
            {
                VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;
                select firstonly LedgerDimension from vendInvoiceDistributionTemplate
                    where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == vendInvoiceStandardLineTemplate.RecId;

                DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(vendInvoiceDistributionTemplate.LedgerDimension);

                if (dimensionDefault)
                {
                    this.DefaultDimension = dimensionDefault;
                }
            }
            this.LineType = PurchInvoiceLineType::Standard;

            this.insert();

            if (vendInvoiceStandardLineTemplate.ProjId)
            {
                VendInvoiceInfoLine_Project::createFromVendInvoiceInfoLineTemplate(this, vendInvoiceStandardLineTemplate);
            }

            if (vendInvoiceStandardLineTemplate.Weight)
            {
                VendInvoiceLineForeignTradeCategory::createFromVendInvoiceLineTemplate(this, vendInvoiceStandardLineTemplate);
            }

            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformation transTaxInformation = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(this);

                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.selectForUpdate(true);
                    TransTaxInformationHelper::initDefaultCustVendTaxInformation(transTaxInformation, _vendTable);
                    transTaxInformation.update();
                    ttscommit;
                }
            }

            while select * from vendinvoiceMarkupTransTemplate
                where vendinvoiceMarkupTransTemplate.VendInvoiceTemplate == _vendInvoiceLineTemplate.VendInvoiceTemplate
                    && vendInvoiceMarkupTransTemplate.LineRefRecId == _vendInvoiceLineTemplate.RecId
            {
                this.insertFromMarkupTransTemplate(this, vendInvoiceMarkupTransTemplate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromMarkupTransTemplate</Name>
				<Source><![CDATA[
    private void insertFromMarkupTransTemplate(VendInvoiceInfoLine _vendInvoiceInfoLine, VendInvoiceMarkupTransTemplate _vendInvoiceMarkupTransTemplate)
    {
        MarkupTrans markupTrans;

        markupTrans.initFromVendInvoiceInfoLine(_vendInvoiceInfoLine);
        markupTrans.TransRecId = _vendInvoiceInfoLine.RecId;
        markupTrans.TransTableId = _vendInvoiceInfoLine.TableId;
        markupTrans.LineNum = _vendInvoiceMarkupTransTemplate.LineNum;
        markupTrans.MarkupCategory = _vendInvoiceMarkupTransTemplate.MarkupCategory;
        markupTrans.Txt = _vendInvoiceMarkupTransTemplate.Description;
        markupTrans.TaxGroup = _vendInvoiceMarkupTransTemplate.TaxGroup;
        markupTrans.TaxItemGroup = _vendInvoiceMarkupTransTemplate.TaxItemGroup;
        markupTrans.MarkupCode = _vendInvoiceMarkupTransTemplate.MarkupCode;
        if (!markupTrans.Txt)
        {
            markupTrans.modifiedField(fieldNum(MarkupTrans, MarkupCode));
        }
        markupTrans.Value = _vendInvoiceMarkupTransTemplate.AmountCur;
        markupTrans.VendInvoiceLineTemplate = _vendInvoiceMarkupTransTemplate.RecId;
        markupTrans.CurrencyCode = _vendInvoiceMarkupTransTemplate.CurrencyCode;

        markupTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjVendorRetentionAmountReleaseInvoice</Name>
				<Source><![CDATA[
    private boolean checkProjVendorRetentionAmountReleaseInvoice()
    {
        if (ProjReleaseVendorRetentionAmountWithZeroQuantityFlight::instance().isEnabled())
        {
            if (this.purchLine().ProjId != '' && this.ReceiveNow == 0 && this.PSAReleaseAmount != 0 )
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126106</DeveloperDocumentation>
	<Label>@SYS108836</Label>
	<SingularLabel>@SYS313555</SingularLabel>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>OrigPurchId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>TableRefIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoLineMarkupMatchingTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoLineMarkupMatchingTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetPurchTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetPurchTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoLine_Asset</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoLine_Asset</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoLine_Project</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoLine_Project</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoLineTaxExtension_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoLineTaxExtension_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoSubLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoSubLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceLineForeignTradeCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceLineForeignTradeCategory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceMatchingLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceMatchingLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoLineQuantities</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoLineQuantities</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfterInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Advance</Name>
			<Label>@SYS7604</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceApplicationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentPreview</Name>
			<Label>@SYS117648</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseLineLineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementLine_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryQuantity</Name>
			<Label>@SYS21676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainBeforeInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBeforeInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfterInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS128435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>changedManually</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlip</Name>
			<Label>@SYS128445</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainAfter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSCalculation</Name>
			<Label>@SYS24047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSCalculatedUnitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSCalculationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWPurchaseQuantity</Name>
			<Label>@PDS1447</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReceiveNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAVendPaymentRetentionDetails</Name>
			<Label>@PSA11254</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSARetainagePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARetainageAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARetainageBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAReleasePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAReleaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAIsFinal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseLineInvoice</Name>
			<Label>@SYS128446</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseLines</Name>
			<Label>@SYS9664</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>currencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseQuantity</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchCommitment_PSN</Name>
			<Label>@SPS1834</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchCommitmentLine_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RequestStatus</Name>
			<Label>@sys312690</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@SYS132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099GroupFields</Name>
			<Label>@SYS24226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxWithholdGroup</Name>
			<Label>@SYS81854</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeadingId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSDiscount</Name>
			<Label>@SYS300378</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSForeignTrade</Name>
			<Label>@SYS317518</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTriangularDeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSGeneral</Name>
			<Label>@SYS317517</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>externalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>packingSlipId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSMeasurement</Name>
			<Label>@SYS34883</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayUnitWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetReservationLine_PSN</Name>
			<Label>@Budgeting_BudgetReservationPS:GeneralBudgetReservation</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoGeneratedLine</Name>
			<Label>@AccountsPayable:VendInvoiceLineAutogenerated</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsAutogenerated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvanceApplicationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementLine_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>AgreementLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>changedManually</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS28792</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS332457</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>currencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceLineDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>DocumentOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS2934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6901</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchInvoiceLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnDisc</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Ordering</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS2934</Label>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdOrig</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PayrollLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PDSCalculatedUnitPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSCalculatedUnitPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSCalculationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSCalculationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS84</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainAfter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PRO2380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainBefore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS147</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAIsFinal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA11488</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAReleaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS62867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAReleasePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAReleasePercent</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSARetainageAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS62867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSARetainageBalance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@PSA11263</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSARetainagePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSARetainPercent</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchaseLineLineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchCommitmentLine_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1834</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS2934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAfter</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAfterInvent</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBefore</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS8459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBeforeInvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS8459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBeforeInventPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeRemainBeforeInventPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@sys312693</Label>
			<EnumType>VendInvoiceRequestStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
			<Label>@sys132694</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099BoxDetail</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099Fields</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
			<Label>@SYS128436</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099State</ExtendedDataType>
			<Label>@SYS128439</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Label>@SYS128442</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeadingId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendDirective_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustVendDirectiveRecId_PSN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetReservationLine_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationLineRecId_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAutogenerated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceLineAutogenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<Null>Yes</Null>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceLineTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>PurchaseOrderFinTagFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TableRefIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigPurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrigPurchIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OrigPurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FieldsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLine</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099BoxDetailIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099BoxDetail</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementLine_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendDirective_PSNIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VendDirective_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineTypeAdvanceApplicationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LineType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdvanceApplicationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchLineRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdTableRefIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAReleaseAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSARetainageAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchLineRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterParmLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PreviousQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceLineRecId</MapField>
					<MapFieldTo>PurchLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditNoteDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsMaxRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAsPerOriginalInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VendDocumentLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>changedManually</MapField>
					<MapFieldTo>changedManually</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>closed</MapField>
					<MapFieldTo>closed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>currencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentOrigin</MapField>
					<MapFieldTo>DocumentOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FinTag</MapField>
					<MapFieldTo>FinTag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventNow</MapField>
					<MapFieldTo>InventNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Ordering</MapField>
					<MapFieldTo>Ordering</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWReceiveNow</MapField>
					<MapFieldTo>PdsCWReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainAfter</MapField>
					<MapFieldTo>PdsCWRemainAfter</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainBefore</MapField>
					<MapFieldTo>PdsCWRemainBefore</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcurementCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseLineLineNumber</MapField>
					<MapFieldTo>PurchaseLineLineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchLineRecId</MapField>
					<MapFieldTo>PurchLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiveNow</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainAfter</MapField>
					<MapFieldTo>RemainAfter</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainAfterInvent</MapField>
					<MapFieldTo>RemainAfterInvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainBefore</MapField>
					<MapFieldTo>RemainBefore</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainBeforeInvent</MapField>
					<MapFieldTo>RemainBeforeInvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainBeforeInventPhysical</MapField>
					<MapFieldTo>RemainBeforeInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdGroup</MapField>
					<MapFieldTo>TaxWithholdGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdItemGroupHeadingId</MapField>
					<MapFieldTo>TaxWithholdItemGroupHeadingId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VendInvoiceLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AdvanceApplicationId</MapField>
					<MapFieldTo>AdvanceApplicationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineType</MapField>
					<MapFieldTo>LineType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcurementCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PSAReleaseAmount</MapField>
					<MapFieldTo>PSAReleaseAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchID</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDistributionTemplate_VendInvoiceInfoLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementLine_PSN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementLine_PSN</Name>
					<Field>AgreementLine_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>currencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>currencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryPostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim_InventDimId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_InventDimId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayrollLedgerDimension</Name>
					<Field>PayrollLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcurementCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProcurementCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchCommitmentLine_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchCommitmentLine_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchCommitmentLine_PSN</Name>
					<Field>PurchCommitmentLine_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineRecId</Name>
					<SourceEDT>PurchLineRefRecId</SourceEDT>
					<Field>PurchLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPurchId</Name>
					<SourceEDT>PurchIdOrig</SourceEDT>
					<Field>OrigPurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentLine</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099BoxDetail</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>Tax1099BoxDetail</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099BoxDetail</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Tax1099BoxDetail_PSN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099BoxDetail</Name>
					<Field>Tax1099BoxDetail</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099Fields</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099Fields</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Fields</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099Fields</Name>
					<Field>Tax1099Fields</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Tax1099State</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099State</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<SourceEDT>Tax1099State</SourceEDT>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeadingId</Name>
					<Field>TaxWithholdItemGroupHeadingId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendDirective_PSN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendDirective_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendDirective_PSN</Name>
					<Field>VendDirective_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoSubTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126107</EntityRelationshipRole>
			<RelatedTable>VendInvoiceInfoSubTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoSubTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPurchId</Name>
					<Field>OrigPurchId</Field>
					<RelatedField>OrigPurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceJourAdvanceApplicationId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvanceApplicationId</Name>
					<Field>AdvanceApplicationId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_InvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_InvoiceAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_OrderAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressState_VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetReservationLine_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetReservationLine_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReservationLine_PSN</Name>
					<Field>BudgetReservationLine_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceLineTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceLineTemplate</Name>
					<Field>VendInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>