<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpVATComponentTotals_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpVATComponentTotals_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBaseCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code from the <c>CompanyInfo</c> table.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    display CurrencyCode getBaseCurrency()
    {
        return  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get Secondary Currency code from the CompanyInfo table.
    /// </summary>
    /// <returns>
    /// return the Secondary Currency code.
    /// </returns>
    display CurrencyCode getSecondaryCurrency()
    {
        return  Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatComponentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the table buffer for tax calculation.
    /// </summary>
    /// <param name="_tmpVATInquiryTable">
    /// The table buffer used to point the record.
    /// </param>
    /// <param name="_common">
    /// The table buffer used to point the record.
    /// </param>
    /// <returns>
    /// The table buffer.
    /// </returns>
    public TmpVATComponentTotals_IN vatComponentTotals(
        TmpVATInquiryTable_IN   _tmpVATInquiryTable,
        Common                  _common)
    {
        TmpVATComponentTotals_IN    tmpVATComponentTotals;
        TmpVATInquiryTable_IN       tmpVATInquiryTableLoc;
        VATTotal_IN                 vatTotal;
        CurrencyExchangeHelper      currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                            _tmpVATInquiryTable.TransDate);

        switch (_common.TableId)
        {
            case tablenum(VATTotal_IN):
                vatTotal = _common;
                while select sum(TaxAmount), sum(RetentionAmount), TaxComponentTable from _tmpVATInquiryTable
                    group by TaxComponentTable
                {
                    tmpVATComponentTotals.TaxComponentTable          = _tmpVATInquiryTable.TaxComponentTable;
                    tmpVATComponentTotals.AmountMST                  = TmpVATComponentTotals_IN::getAmountMST(_tmpVATInquiryTable.TaxComponentTable,
                                                                                                              vatTotal,
                                                                                                              _tmpVATInquiryTable);

                    tmpVATComponentTotals.AccumulatedAmountMST       = _tmpVATInquiryTable.TaxAmount + _tmpVATInquiryTable.RetentionAmount;

                    tmpVATComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                               tmpVATComponentTotals.AmountMST,
                                                                                                                               true);
                    tmpVATComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                               tmpVATComponentTotals.AccumulatedAmountMST,
                                                                                                                               true);
                    tmpVATComponentTotals.insert();
                }
                break;

            case tablenum(TmpVATInquiryTable_IN):
                tmpVATInquiryTableLoc = _common;
                while select sum(TaxAmount), sum(RetentionAmount), TaxComponentTable from _tmpVATInquiryTable
                    group by TaxComponentTable
                {
                    tmpVATComponentTotals.TaxComponentTable          = _tmpVATInquiryTable.TaxComponentTable;
                    tmpVATComponentTotals.AmountMST                  = TmpVATComponentTotals_IN::getAmountMST(_tmpVATInquiryTable.TaxComponentTable,
                                                                                                              null,
                                                                                                              tmpVATInquiryTableLoc);
                    tmpVATComponentTotals.AccumulatedAmountMST       = _tmpVATInquiryTable.TaxAmount + _tmpVATInquiryTable.RetentionAmount;
                    tmpVATComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                               tmpVATComponentTotals.AmountMST,
                                                                                                                               true);
                    tmpVATComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                               tmpVATComponentTotals.AccumulatedAmountMST,
                                                                                                                               true);
                    tmpVATComponentTotals.insert();
                }
                break;

            default:
                break;
        }

        return tmpVATComponentTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount from the table buffer.
    /// </summary>
    /// <param name="_taxComponent">
    /// The field that is used to find the record.
    /// </param>
    /// <param name="_vatTotal">
    /// The table buffer used to point the record.
    /// </param>
    /// <param name="_tmpVATInquiryTable">
    /// The table buffer used to point the record.
    /// </param>
    /// <returns>
    /// The amount in the table buffer.
    /// </returns>
    public static AmountMST getAmountMST(
        TaxComponentRecId_IN      _taxComponent,
        VATTotal_IN               _vatTotal           = null,
        TmpVATInquiryTable_IN     _tmpVATInquiryTable = null)
    {
        AmountMST amount;

        if (_vatTotal)
        {
            if (_taxComponent == _vatTotal.TaxComponentTable)
            {
                amount = _vatTotal.TaxAmount;
            }
            else
            {
                amount = 0;
            }
        }
        else
        {
            if (_taxComponent == _tmpVATInquiryTable.TaxComponentTable)
            {
                amount = _tmpVATInquiryTable.TaxAmount;
            }
            else
            {
                amount = 0;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6594</Label>
	<TitleField1>TaxComponentTable</TitleField1>
	<TitleField2>AmountMST</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS25443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS6075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS83899</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxComponentRecId_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TmpVATComponentTotals_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>