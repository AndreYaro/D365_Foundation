<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpVATDefermentBal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpVATDefermentBal_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean     ok;

        ok = super();
        if (this.TaxIdentificationNumber == 0)
        {
            ok = checkFailed(strfmt("@SYS26332","@GLS5096"));
        }
        if (this.TaxPeriod  == '')
        {
            ok = checkFailed(strfmt("@SYS26332","@GLS6030"));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the tax transaction with the given records of table buffers TmpVATDefermentBal_IN and TmpVATDefermentBalLine_IN.
    /// </summary>
    /// <param name="_tmpVATDefermentBal">
    /// The table buffer used to point the record.
    /// </param>
    /// <param name="_tmpVATDefermentBalLine">
    /// The table buffer used to point the record.
    /// </param>
    static void showData(
        TmpVATDefermentBal_IN       _tmpVATDefermentBal,
        TmpVATDefermentBalLine_IN   _tmpVATDefermentBalLine)
    {
        TaxReportPeriod                 taxReportPeriod;
        TaxTrans                        taxTrans;
        TaxTrans                        taxTransLoc;
        TaxTrans                        taxTransLoc1;
        TaxTrans                        taxTransOrig;
        LedgerJournalTrans              ledgerJournalTrans;
        Amount                          deferredDebit;
        Amount                          deferredCredit;
        Amount                          openingDebit;
        Amount                          openingCredit;
        DefermentScheduleTransLines_IN  deferment;
        VendInvoiceTrans                vendInvoiceTrans;
        VendInvoiceTransTaxExtensionIN  vendInvoiceTransTaxExtensionIN;
        TaxTrans_IN                     taxTransLocal;
        DefermentScheduleTrans_IN       defermentSchedule;
        boolean                         showData = false;
        TransTaxInformation             transTaxInformation;
        TransTaxInformationHelper		transTaxInformationHelper = TransTaxInformationHelper::newHelper();

        delete_from _tmpVATDefermentBalLine;

        taxReportPeriod = TaxReportPeriod::find(_tmpVATDefermentBal.TaxPeriod, _tmpVATDefermentBal.FromDate);
        if (taxReportPeriod)
        {
            while select JournalNum, Voucher, SourceRecId,sourceTableId from taxTrans
                group by JournalNum, Voucher, SourceRecId,sourceTableId
                where taxTrans.TaxPeriod == taxReportPeriod.TaxPeriod
                   && taxTrans.Source    == TaxModuleType::Voucher
                   && taxTrans.TaxOrigin == TaxOrigin::Tax
            {
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.Voucher           == taxTrans.Voucher
                       && ledgerJournalTrans.JournalNum        == taxTrans.JournalNum
                       && ledgerJournalTrans.RecId             ==  taxTrans.SourceRecId
                       && taxTrans.sourceTableId               == tablenum(LedgerJournalTrans);

                transTaxInformation = transTaxInformationHelper.getTransTaxInformationByRecord(ledgerJournalTrans);

                if (ledgerJournalTrans && transTaxInformation.VATGoodsType == VATGoodsType_IN::CapitalGoods)
                {
                    defermentSchedule = DefermentScheduleTrans_IN::findExtRecId(ledgerJournalTrans.RecId);

                    while select deferment
                        where deferment.FatherRecId == defermentSchedule.RecId
                    {
                        if (deferment.Period    >= taxReportPeriod.FromDate
                            && deferment.Period <= taxReportPeriod.ToDate)
                        {
                            while select SourceCurrencyCode, RecId from taxTransLoc
                                where taxTransLoc.TaxPeriod   == taxReportPeriod.TaxPeriod
                                   && taxTransLoc.Voucher     == ledgerJournalTrans.Voucher
                                   && taxTransLoc.JournalNum  == ledgerJournalTrans.JournalNum
                                   && taxTransLoc.TransDate   == ledgerJournalTrans.TransDate
                                   && taxTransLoc.TaxOrigin == TaxOrigin::Tax
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransLoc.RecId);
                                if (!confind(deferment.TransferDetails, taxTransLoc.RecId))
                                {
                                    if (taxTransLocal.PostedTaxAmout > 0)
                                    {
                                        deferredDebit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Debit, taxTransLoc.SourceCurrencyCode);
                                    }
                                    else
                                    {
                                        deferredCredit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Debit, taxTransLoc.SourceCurrencyCode);
                                    }
                                }
                                else
                                {
                                    if (deferment.Transferred && confind(deferment.TransferDetails,taxTransLoc.RecId))
                                    {
                                        showData = true;
                                    }
                                    else
                                    {
                                        showData = false;
                                    }
                                }
                            }
                        }
                        if (deferment.Period     < taxReportPeriod.FromDate)
                        {
                            while select SourceCurrencyCode, RecId from taxTransLoc
                                where taxTransLoc.TaxPeriod   == taxReportPeriod.TaxPeriod
                                   && taxTransLoc.Voucher     == ledgerJournalTrans.Voucher
                                   && taxTransLoc.JournalNum  == ledgerJournalTrans.JournalNum
                                   && taxTransLoc.TransDate   == ledgerJournalTrans.TransDate
                                   && taxTransLoc.TaxOrigin == TaxOrigin::Tax
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransLoc.RecId);
                                if (!confind(deferment.TransferDetails, taxTransLoc.RecId))
                                {
                                    if (taxTransLocal.PostedTaxAmout > 0)
                                    {
                                        openingDebit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Debit, taxTransLoc.SourceCurrencyCode);
                                    }
                                    else
                                    {
                                        openingCredit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Debit, taxTransLoc.SourceCurrencyCode);
                                    }
                                }
                                else
                                {
                                    if (deferment.Transferred && confind(deferment.TransferDetails, taxTransLoc.RecId))
                                    {
                                        showData = true;
                                    }
                                    else
                                    {
                                        showData = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            while select InventTransId from taxTrans
                group by InventTransId
                where taxTrans.TaxPeriod == taxReportPeriod.TaxPeriod
                   && taxTrans.Source    == TaxModuleType::Purch
            {
                select vendInvoiceTrans
                    where vendInvoiceTrans.InventTransId     == taxTrans.InventTransId
                       && vendInvoiceTrans.vatGoodsType_IN   == VATGoodsType_IN::CapitalGoods
                exists join vendInvoiceTransTaxExtensionIN
                    where vendInvoiceTrans.RecId                            == vendInvoiceTransTaxExtensionIN.VendInvoiceTrans
                        && vendInvoiceTransTaxExtensionIN.TaxInformation_IN == _tmpVATDefermentBal.TaxIdentificationNumber;

                if (vendInvoiceTrans.InventRefTransId)
                {
                    defermentSchedule = DefermentScheduleTrans_IN::findExtRecId(VendInvoiceTrans::findInventTransId(vendInvoiceTrans.InventRefTransId).RecId);

                    while select deferment
                        where deferment.FatherRecId == defermentSchedule.RecId
                    {
                        if (deferment.Period    >= taxReportPeriod.FromDate
                            && deferment.Period <= taxReportPeriod.ToDate)
                        {
                            while select SourceCurrencyCode, TaxCode, RecId from taxTransLoc
                                where taxTransLoc.InventTransId == vendInvoiceTrans.InventTransId
                            {
                                if (TaxTrans_IN::findRefRecId(taxTransLoc.RecId).DeferredLedgerDimension)
                                {
                                    select firstonly RecId from taxTransLoc1
                                        where taxTransLoc1.InventTransId == vendInvoiceTrans.InventRefTransId
                                           && taxTransLoc1.TaxCode       == taxTransLoc.TaxCode;

                                    taxTransLocal = TaxTrans_IN::findRefRecId(taxTransLoc1.RecId);

                                    if (!confind(deferment.TransferDetails,taxTransLoc.RecId))
                                    {
                                        deferredCredit -= CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Credit, taxTransLoc.SourceCurrencyCode);
                                    }
                                    else
                                    {
                                        if (deferment.Transferred && confind(deferment.TransferDetails, taxTransLoc.RecId))
                                        {
                                            showData = true;
                                        }
                                        else
                                        {
                                            showData = false;
                                        }
                                    }
                                }
                            }
                        }
                        if (deferment.Period     < taxReportPeriod.FromDate)
                        {
                            while select SourceCurrencyCode, TaxCode, RecId from taxTransLoc
                                where taxTransLoc.TaxPeriod     == taxReportPeriod.TaxPeriod
                                   && taxTransLoc.InventTransId == vendInvoiceTrans.InventTransId
                            {
                                select firstonly RecId from taxTransOrig
                                    where taxTransOrig.InventTransId == vendInvoiceTrans.InventRefTransId
                                       && taxTransOrig.TaxCode       == taxTransLoc.TaxCode;

                                    taxTransLocal = TaxTrans_IN::findRefRecId(taxTransOrig.RecId);

                                if (!confind(deferment.TransferDetails,taxTransLoc.RecId))
                                {
                                    openingCredit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Credit, taxTransLoc.SourceCurrencyCode);
                                }
                                else
                                {
                                    if (deferment.Transferred && confind(deferment.TransferDetails, taxTransLoc.RecId))
                                    {
                                        showData = true;
                                    }
                                    else
                                    {
                                        showData = false;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    defermentSchedule = DefermentScheduleTrans_IN::findExtRecId(vendInvoiceTrans.RecId);

                    while select deferment
                        where deferment.FatherRecId == defermentSchedule.RecId
                    {
                        if (deferment.Period    >= taxReportPeriod.FromDate
                            && deferment.Period <= taxReportPeriod.ToDate)
                        {
                            while select SourceCurrencyCode, RecId from taxTransLoc
                                where taxTransLoc.TaxPeriod     == taxReportPeriod.TaxPeriod
                                   && taxTransLoc.InventTransId == vendInvoiceTrans.InventTransId
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransLoc.RecId);
                                if (!confind(deferment.TransferDetails, taxTransLoc.RecId))
                                {
                                    deferredDebit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Debit, taxTransLoc.SourceCurrencyCode);
                                }
                                else
                                {
                                    if (deferment.Transferred && confind(deferment.TransferDetails, taxTransLoc.RecId))
                                    {
                                        showData = true;
                                    }
                                    else
                                    {
                                        showData = false;
                                    }
                                }
                            }
                        }
                        if (deferment.Period < taxReportPeriod.FromDate)
                        {
                            while select SourceCurrencyCode, RecId from taxTransLoc
                                where taxTransLoc.TaxPeriod     == taxReportPeriod.TaxPeriod
                                   && taxTransLoc.InventTransId == vendInvoiceTrans.InventTransId
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransLoc.RecId);
                                if (!confind(deferment.TransferDetails, taxTransLoc.RecId))
                                {
                                    openingDebit += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / defermentSchedule.vatDefermentAmount * deferment.Debit, taxTransLoc.SourceCurrencyCode);
                                }
                                else
                                {
                                    if (deferment.Transferred && confind(deferment.TransferDetails,taxTransLoc.RecId))
                                    {
                                        showData = true;
                                    }
                                    else
                                    {
                                        showData = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if (taxReportPeriod && (openingDebit || openingCredit || deferredDebit || deferredCredit))
        {
            _tmpVATDefermentBalLine.RefRecId     = _tmpVATDefermentBal.RecId;
            _tmpVATDefermentBalLine.From         = taxReportPeriod.FromDate;
            _tmpVATDefermentBalLine.To           = taxReportPeriod.ToDate;
            _tmpVATDefermentBalLine.OpeningBal   = openingDebit - openingCredit;
            _tmpVATDefermentBalLine.Deferred     = deferredDebit + deferredCredit;
            _tmpVATDefermentBalLine.insert();

            showData = false;
        }
        if (showData)
        {
            throw error("@GLS6025");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6029</Label>
	<TitleField1>TaxIdentificationNumber</TitleField1>
	<TitleField2>TaxPeriod</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS4083</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxIdentificationNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS5096</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<Label>@GLS6030</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS67</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxIdentificationNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxIdentificationNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxIdentificationNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_TmpVATDefermentBal_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxIdentificationNumber</Name>
					<Field>TaxIdentificationNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>