<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionPurchTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionPurchTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the account relation ID.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether to set the account relation ID.
    /// </param>
    /// <param name="_accountRelationId">
    ///    The account relation ID to set.
    /// </param>
    /// <returns>
    ///    The account relation ID of the record in the <c>JournalizingDefinitionPurchTrans</c> table.
    /// </returns>
    public edit VendAccountRelationId editAccountRelation(boolean set, VendAccountRelationId _accountRelationId)
    {
        if (set)
        {
            this.setAccountRelation(_accountRelationId);
        }
        else
        {
            _accountRelationId = this.getAccountRelation();
        }

        return _accountRelationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the item relation ID.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether to set the item relation ID.
    /// </param>
    /// <param name="_itemRelationId">
    ///    The item relation ID to be set.
    /// </param>
    /// <returns>
    ///    The item relation ID of the record in the <c>JournalizingDefinitionPurchTrans</c> table
    /// </returns>
    public edit ItemRelationId editItemRelation(boolean set, ItemRelationId _itemRelationId)
    {
        if (set)
        {
            this.setItemRelation(_itemRelationId);
        }
        else
        {
            _itemRelationId = this.getItemRelation();
        }

        return _itemRelationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editJournalizngDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the journalizing definition code.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether to set the journalizing definition code.
    /// </param>
    /// <param name="_journalizingDefinitionCode">
    ///    The journalizing definition code to set.
    /// </param>
    /// <returns>
    ///    The journalizing definition code of the record in the <c>JournalizingDefinition</c> table.
    /// </returns>
    public edit JournalizingDefinitionCode editJournalizngDefinition(boolean set, JournalizingDefinitionCode _journalizingDefinitionCode)
    {
        if (set)
        {
            if (JournalizingDefinition::exist(_journalizingDefinitionCode))
            {
                if (JournalizingDefinition::checkExistJournalizingDefinitionByModule(_journalizingDefinitionCode, JournalizingDefinitionModuleId::Purchasing))
                {
                    this.JournalizingDefinition = JournalizingDefinition::find(_journalizingDefinitionCode).RecId;
                }
            }
            else
            {
                checkFailed(strFmt("@SYS136712",_journalizingDefinitionCode));
            }
        }
        else
        {
            _journalizingDefinitionCode = JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionCode;
        }

        return _journalizingDefinitionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the account relation ID of the record.
    /// </summary>
    /// <returns>
    ///    The account relation ID of the record in the <c>JournalizingDefinitionPurchTrans</c> table.
    /// </returns>
    VendAccountRelationId getAccountRelation()
    {
        VendAccountRelationId   accountRelationId;

        switch ( this.VendAccountCode )
            {
                case TableGroupAll::GroupId:
                    accountRelationId = this.VendGroup;
                    break;

                case TableGroupAll::Table:
                    accountRelationId = this.VendAccount;
                    break;

                case TableGroupAll::All:
                    accountRelationId = '';
                    break;
            }
        return accountRelationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the item relation ID of the record.
    /// </summary>
    /// <returns>
    ///    The item relation ID of the record in the <c>JournalizingDefinitionPurchTrans</c> table.
    /// </returns>
    ItemRelationId getItemRelation()
    {
        ItemRelationId   itemRelationId;

        switch ( this.ItemCode )
            {
                case TableGroupCategoryAll::Group:
                    itemRelationId = this.ItemGroupId;
                    break;

                case TableGroupCategoryAll::Table:
                    itemRelationId = this.ItemId;
                    break;

                case TableGroupCategoryAll::All:
                    itemRelationId = '';
                    break;
            }
        return itemRelationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizingDefinitionDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the posting definition description based on a posting definition code.
    /// </summary>
    /// <returns>
    ///    The posting definition description to display to the user.
    /// </returns>
    /// <remarks>
    ///    This method returns the posting definition description based on a posting definition code.
    /// </remarks>
    display JournalizingDefinitionDesc journalizingDefinitionDescription()
    {
        return JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the account relation ID of the record.
    /// </summary>
    /// <param name="_accountRelationId">
    ///    The account relation ID of the record to set in the <c>JournalizingDefinition</c> table.
    /// </param>
    void setAccountRelation(VendAccountRelationId _accountRelationId)
    {
        if (!_accountRelationId)
        {
            this.VendAccount = '';
            this.VendGroup = '';
        }
        else
        {
            switch ( this.VendAccountCode )
            {
                case TableGroupAll::GroupId:
                    if (!VendGroup::find(_accountRelationId).RecId)
                    {
                        checkFailed(strFmt("@SYS112224", _accountRelationId, fieldPName(VendGroup, VendGroup), tablePName(VendGroup)));
                    }
                    else
                    {
                        this.VendGroup = _accountRelationId;
                        this.VendAccount = '';
                    }
                    break;

                case TableGroupAll::Table:
                    if (!VendTable::find(_accountRelationId).RecId)
                    {
                        checkFailed(strFmt("@SYS112224", _accountRelationId, fieldPName(VendTable, AccountNum), tablePName(VendTable)));
                    }
                    else
                    {
                        this.VendAccount = _accountRelationId;
                        this.VendGroup = '';
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the item relation ID of the record.
    /// </summary>
    /// <param name="_itemRelationId">
    ///    The item relation ID of the record to set in the <c>JournalizingDefinition</c> table.
    /// </param>
    void setItemRelation(ItemRelationId _itemRelationId)
    {
        if (!_itemRelationId)
        {
            this.ItemId = '';
            this.ItemGroupId = '';
        }
        else
        {
            switch ( this.ItemCode )
            {
                case TableGroupCategoryAll::Group:
                    if (!InventItemGroup::find(_itemRelationId).RecId)
                    {
                        checkFailed(strFmt("@SYS112224", _itemRelationId, fieldPName(InventItemGroup, ItemGroupId), tablePName(InventItemGroup)));
                    }
                    else
                    {
                        this.ItemGroupId = _itemRelationId;
                        this.ItemId = '';
                    }
                    break;
                case TableGroupCategoryAll::Table:
                    if (!InventTable::find(_itemRelationId).RecId)
                    {
                        checkFailed(strFmt("@SYS112224", _itemRelationId, fieldPName(InventTable, ItemId), tablePName(InventTable)));
                    }
                    else
                    {
                        this.ItemId = _itemRelationId;
                        this.ItemGroupId = '';
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(JournalizingDefinitionPurchTrans,EcoResCategory):
                if (this.EcoResCategory)
                {
                    ret = ret && EcoResCategory::checkCategoryRole(this.EcoResCategory, EcoResCategoryNamedHierarchyRole::Procurement);
                    break;
                }
                else
                {
                    ret = false;
                }
            case fieldNum(JournalizingDefinitionPurchTrans, JournalizingDefinition):
                ret = JournalizingDefinition::checkExistJournalizingDefinitionByModule(JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionCode, JournalizingDefinitionModuleId::Purchasing);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((this.VendAccountCode == TableGroupAll::GroupId && !this.VendGroup) ||
            (this.VendAccountCode == TableGroupAll::Table && !this.VendAccount))
        {
            ret = checkFailed("@SYS56456");
        }
        if ((this.ItemCode == TableGroupCategoryAll::Group && !this.ItemGroupId) ||
            (this.ItemCode == TableGroupCategoryAll::Table && !this.ItemId) )
        {
            ret = checkFailed("@SYS56455");
        }
        else if ((this.ItemCode ==TableGroupCategoryAll::Category && !this.EcoResCategory))
        {
            ret = checkFailed("@SYS129519");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>JournalizingDefinitionPurchTrans</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The posting definition code of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!JournalizingDefinitionPurchTrans::exist(_recId))
        {
            ret = checkFailed(strFmt(JournalizingDefinitionPurchTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>JournalizingDefinitionPurchTrans</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinitionPurchTrans
                    where
                        journalizingDefinitionPurchTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchasingTransactionPostingDefinition</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchasingTransactionPostingDefinition</c> table; otherwise, an empty record.
    /// </returns>
    public static JournalizingDefinitionPurchTrans find(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionPurchTrans journalizingDefinitionPurchTrans;

        journalizingDefinitionPurchTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionPurchTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionPurchTrans
            where
            journalizingDefinitionPurchTrans.RecId == _recId;

        return journalizingDefinitionPurchTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalizingDefinitionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchasingTransactionPostingDefinition</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model to use when reading the record for update.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchasingTransactionPostingDefinition</c> table.
    /// </returns>
    public static JournalizingDefinitionPurchTrans findByJournalizingDefinitionId(
        JournalizingDefinitionId _journalizingDefinitionId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionPurchTrans journalizingDefinitionPurchTrans;

        journalizingDefinitionPurchTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionPurchTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionPurchTrans
            where
            journalizingDefinitionPurchTrans.JournalizingDefinition == _journalizingDefinitionId;

        return journalizingDefinitionPurchTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>LedgerPostingDefinition</c> table does not
    ///    exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128269";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeToPurchasingTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value of <c>PurchaseTransactionType</c> that is related to the specified <c>LedgerPostingType</c>.
    /// </summary>
    /// <param name = "_ledgerPostingType">The <c>LedgerPostingType</c>.</param>
    /// <returns>A value of <c>PurchaseTransactionType</c> that is related to the specified <c>LedgerPostingType</c>.</returns>
    internal static PurchasingTransactionType ledgerPostingTypeToPurchasingTransactionType(LedgerPostingType _ledgerPostingType)
    {
        PurchasingTransactionType purchasingTransactionType;

        switch (_ledgerPostingType)
        {
            case LedgerPostingType::PurchReq :
                purchasingTransactionType = PurchasingTransactionType::PurchaseRequisition;
                break;

            case LedgerPostingType::PurchOrder :
                purchasingTransactionType = PurchasingTransactionType::PurchaseOrder;
                break;

            case LedgerPostingType::PurchOrderYearEnd :
                purchasingTransactionType = PurchasingTransactionType::PurchaseOrderYearEnd;
                break;
        }

        return purchasingTransactionType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS344919</DeveloperDocumentation>
	<FormRef>JournalizingDefinitionTrans</FormRef>
	<Label>@SYS133930</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PurchasingTransactionType</TitleField1>
	<TitleField2>JournalizingDefinition</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>JournalizingDefinitionPurchTrans</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchasingTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editAccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>journalizingDefinitionDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchasingTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchasingTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchasingTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCategoryRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemTableGroupCategoryAllId</ExtendedDataType>
			<EnumType>TableGroupCategoryAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchasingTransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchasingTransactionTypeId</ExtendedDataType>
			<EnumType>PurchasingTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendorTableGroupAllId</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionPurchTrans</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchasingTransactionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EcoResCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalizingDefinitionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JournalizingDefinitionPurchTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResCategory</Name>
					<Field>EcoResCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<SourceEDT>ItemGroupId</SourceEDT>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinition</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>JournalizingDefinitionPurchTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinition</Name>
					<Field>JournalizingDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroup</Name>
					<SourceEDT>VendGroupId</SourceEDT>
					<Field>VendGroup</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>