<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResAttributeDefaultValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResAttributeDefaultValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates the specified record.
    /// </summary>
    /// <param name="_duplicatedAttribute">
    ///    The record ID of a <c>EcoResAttribute</c> record to duplicate.
    /// </param>
    public void pcDuplicate(RefRecId _duplicatedAttribute)
    {
        EcoResAttributeDefaultValue duplicate;
        EcoResValue                 value;

        duplicate.data(this);

        duplicate.Attribute = _duplicatedAttribute;

        value = EcoResValue::find(this.Value);

        duplicate.Value = value.pcDuplicate();

        duplicate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSetDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the text value associated with the current default value definition.
    /// </summary>
    /// <param name="_set">
    /// true if the text value is set; otherwise, false;
    /// </param>
    /// <param name="_value">
    /// The new text value when the <paramref name="set"/> parameter is true.
    /// </param>
    /// <returns>
    /// The current text value of the default value definition.
    /// </returns>
    /// <remarks>
    /// This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit AttributeValueText pcGetSetDefaultValue(boolean _set, AttributeValueText _value)
    {
        EcoResTextValue         currentValue;
        EcoResAttribute         attribute;
        EcoResAttributeType            domain;

        if (_set)
        {
            if (_value)
            {
                select  firstonly domain
                join    RecId from attribute where attribute.AttributeType == domain.RecId
                &&      attribute.RecId == this.Attribute;

                if (!PCModelingLibrary::validateAttributeTypeValue(domain, _value))
                {
                    throw error(strfmt("@SYS32810", "@SYS40175"));
                }
                else
                {
                    ttsbegin;
                    //add / change value
                    currentValue = EcoResTextValue::find(this.Value, true);
                    currentValue.TextValue = _value;
                    //insert or update
                    currentValue.write();
                    this.Value = currentValue.RecId;
                    this.write();
                    ttscommit;
                }
            }
            else
            {
                //delete existing value
                ttsbegin;
                currentValue = EcoResTextValue::find(this.Value, true);
                currentValue.TextValue = '';
                if (currentValue)
                {
                    currentValue.delete();
                }
                ttscommit;
                this.Value = 1;
            }
            return currentValue.TextValue;
        }
        else
        {
            currentValue = EcoResTextValue::find(this.Value, false);
            return currentValue.TextValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcToXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The XML writer that is used to store the XML representation of this record.
    /// </param>
    public void pcToXML(PCXmlWriter _xmlWriter)
    {
        #PC
        EcoResValue value;
        str         strValue;

        value = EcoResValue::find(this.Value);
        strValue = value.pcGetStringValue();
        if (strValue != '')
        {
            _xmlWriter.writeAttributeString(#defaultAttribute, value.pcGetStringValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// The purpose to create this method is to delete attribute default value if value is empty.
    /// </summary>
    /// <remarks>
    /// Catalog validation does not complain error if we have empty value in EcoResAttributeDefaultValue.
    /// </remarks>
    public static void deleteEmptyDefaultValues()
    {
        EcoResAttributeDefaultValue attributeDefaultValue;
        EcoResTextValue     textValue;
        EcoResBooleanValue  booleanValue;
        EcoResFloatValue    floatValue;
        EcoResDateTimeValue dateTimeValue;
        EcoResIntValue      intValue;
        EcoResCurrencyValue currencyValue;
        EcoResReferenceValue ecoResReferenceValue;

        ttsBegin;

        delete_from attributeDefaultValue
            exists join textValue
            where textValue.RecId == attributeDefaultValue.Value
             && !textValue.TextValue;

        delete_from attributeDefaultValue
            exists join booleanValue
            where booleanValue.RecId == attributeDefaultValue.Value
             && !booleanValue.BooleanValue;

        delete_from attributeDefaultValue
            exists join floatValue
            where floatValue.RecId == attributeDefaultValue.Value
             && !floatValue.FloatValue && !floatValue.FloatUnitOfMeasure;

        delete_from attributeDefaultValue
            exists join dateTimeValue
            where dateTimeValue.RecId == attributeDefaultValue.Value
             && !dateTimeValue.DateTimeValue;

        delete_from attributeDefaultValue
            exists join intValue
            where intValue.RecId == attributeDefaultValue.Value
             && !intValue.IntValue && !intValue.IntUnitOfMeasure;

        delete_from attributeDefaultValue
            exists join currencyValue
            where currencyValue.RecId == attributeDefaultValue.Value
             && !currencyValue.CurrencyValue;

        delete_from attributeDefaultValue
            exists join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeDefaultValue.Value
                && !ecoResReferenceValue.RefRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record in the <c>EcoResAttributeDefaultValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResAttributeDefaultValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResAttributeDefaultValue</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResAttributeDefaultValue</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResAttributeDefaultValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResAttributeDefaultValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResAttributeDefaultValue</c> table by using the specified
    /// record ID.
    /// </summary>
    /// <param name="_attributeRecId">
    /// The record ID of the attribute record related to the domain.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttributeDefaultValue</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResAttributeDefaultValue findByAttribute(RefRecId _attributeRecId, boolean _forupdate = false)
    {
        EcoResAttributeDefaultValue defaultValue;

        if (!_attributeRecId)
        {
            return defaultValue;
        }

        defaultValue.selectForUpdate(_forupdate);
        select firstonly defaultValue
        where defaultValue.Attribute == _attributeRecId;

        return defaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEcoResValueAndDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>EcoResAttributeDefaultValue</c> for the specified value and attribute
    /// </summary>
	/// <param name = "_value">The value</param>
	/// <param name = "_attribute">the attribute</param>
    public static void createEcoResValueAndDefaultValue(EcoResValue _value, EcoResAttribute _attribute)
    {
        ttsbegin;

        EcoResAttributeDefaultValue defaultValue;

        defaultValue.Attribute = _attribute.RecId;
        defaultValue.Value = _value.RecId;
        defaultValue.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152867</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResAttribute</FormRef>
	<Label>@SYS152866</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Attribute</TitleField1>
	<TitleField2>Value</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS77030</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310150</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Attribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResAttribute</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResAttribute_EcoResAttributeDefaultValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResValue</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResValue_EcoResAttributeDefaultValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Value</Name>
					<Field>Value</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>