<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetTaxAllowanceHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetTaxAllowanceHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approvedRegisterTransExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if register of a provided type exists for the period taken from this record.
    /// </summary>
    /// <param name="_assessedRegType">
    /// A register type.
    /// </param>
    /// <returns>
    /// true if register records exist on a period; false otherwise.
    /// </returns>
    public boolean approvedRegisterTransExists(RAssetType _rAssetType, RAssetAssessedTaxRegType _assessedRegType)
    {
        boolean ret;

        if (RAssetTable::find(this.AssetId).AssetType == _rAssetType)
        {
            RTax25RegisterId registerId = enum2Symbol(enumNum(RAssetAssessedTaxRegType), _assessedRegType);
            int periodYear = year(this.StartDate);
            int periodNumMth = mthOfYr(this.StartDate);
            int periodNumQtr = date2Qtr(this.StartDate);
            int periodNumHalfYr = any2int(roundUp(periodNumMth / 6, 1));
            int periodNumYr = 1;

            RTax25RegisterJournalTrans registerJournalTrans;

            select firstonly RecId from registerJournalTrans
                where registerJournalTrans.RegisterId == registerId
                    && registerJournalTrans.AssessedTaxRegisterType == _assessedRegType
                    && registerJournalTrans.Approved == NoYes::Yes
                    && registerJournalTrans.Cancelled == NoYes::No
                    && registerJournalTrans.FiscalYear == periodYear
                    && ((registerJournalTrans.PeriodType == RTax25PeriodType::Month && registerJournalTrans.PeriodNum == periodNumMth)
                    || (registerJournalTrans.PeriodType == RTax25PeriodType::Quarter && registerJournalTrans.PeriodNum == periodNumQtr)
                    || (registerJournalTrans.PeriodType == RTax25PeriodType::HalfYear && registerJournalTrans.PeriodNum == periodNumHalfYr)
                    || (registerJournalTrans.PeriodType == RTax25PeriodType::Year && registerJournalTrans.PeriodNum == periodNumYr));

            ret = registerJournalTrans.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current history line is the last one.
    /// </summary>
    /// <returns>
    /// true if the current history line is the last one; otherwise, false.
    /// </returns>
    public boolean isLast()
    {
        RAssetTaxAllowanceHistory allowanceHistory;

        select firstonly RecId from allowanceHistory
			where allowanceHistory.AssetId == this.AssetId
				&& allowanceHistory.StartDate > this.StartDate;

        return !allowanceHistory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFieldInAssetTable</Name>
				<Source><![CDATA[
    public boolean clearFieldInAssetTable(FieldId _thisTableField, FieldId _assetTableFieldId, RAssetTable _assetTable)
    {
        boolean updateAssetTable;

        if (this.(_thisTableField)
			&& _assetTable.(_assetTableFieldId))
        {
            _assetTable.(_assetTableFieldId) = nullValue(_assetTable.(_assetTableFieldId));
            updateAssetTable = true;
        }

        return updateAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFieldInDistributionTable</Name>
				<Source><![CDATA[
    public boolean clearFieldInDistributionTable(FieldId _thisTableField, FieldId _distributionTableFieldId, RAssetDistribution _assetDistribution)
    {
        boolean updateDistributionTable;

        if (this.(_thisTableField)
			&& _assetDistribution.(_distributionTableFieldId))
        {
            _assetDistribution.(_distributionTableFieldId) = nullValue(_assetDistribution.(_distributionTableFieldId));
            updateDistributionTable = true;
        }

        return updateDistributionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionDataExistsForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if distribution data exists for the asset and for the period date.
    /// </summary>
    /// <returns>
    /// true if distribution data exists; false otherwise.
    /// </returns>
    /// <remarks>
    /// The method first checks if the history data for asset distribution exists on a date.
    /// If there are no asset distribution history records, the method checks if asset distributions exist whatsoever,
    /// and if they are, we assume that the distribution data do exist.
    /// </remarks>
    public boolean distributionDataExistsForPeriod()
    {
        boolean ret;

        if (!this.RAssetDistribution
            && RAssetTable::find(this.AssetId).AssetType != RAssetType::LandBuilding)
        {
            RAssetTaxAllowanceHistory firstDistributionHistory = RAssetTaxAllowanceHistory::findFirstDistributionHistory(this.AssetId);
            if (firstDistributionHistory)
            {
                ret = this.StartDate >= firstDistributionHistory.StartDate;
            }
            else if (RAssetDistribution::distributionsExistForAsset(this.AssetId))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.updatePrevPeriodRecordsForNewValues();

        super();

        this.resetInitialTableValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>landTaxCalcApprovedRegisterTransExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if "Land tax - ground areas" register exists for the period taken from this record.
    /// </summary>
    /// <returns>
    /// true if register records exist on a period; false otherwise.
    /// </returns>
    public boolean landTaxCalcApprovedRegisterTransExists()
    {
        return this.approvedRegisterTransExists(RAssetType::Land, RAssetAssessedTaxRegType::LandTaxCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a location id.
    /// </summary>
    /// <returns>
    /// The value to show in the field.
    /// </returns>
    /// <remarks>
    /// If distribution exists, then the data is taken from distribution.
    /// </remarks>
    public display RAssetLocationId location()
    {
        RAssetLocationId locationIdRet;

        if (this.RAssetDistribution)
        {
            locationIdRet = RAssetDistribution::findRecId(this.RAssetDistribution).Location;
        }

        return locationIdRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>okato</Name>
				<Source><![CDATA[
    public display OKATO_RU okato()
    {
        return RAssetLocation::find(this.location()).okato;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInitialTableValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the values for some fields in the initial table as zero
    /// when they are non-zero in this table and also non-zero in the initial table.
    /// </summary>
    public void resetInitialTableValues()
    {
        boolean updateAssetTable = false;
        boolean updateDistributionTable = false;
        RAssetTable rAssetTable = RAssetTable::find(this.AssetId, true);
        RAssetDistribution rAssetDistribution = RAssetDistribution::findRecId(this.RAssetDistribution, true);

        if (rAssetDistribution)
        {
            //clear in RAssetDistribution
            updateDistributionTable = this.clearFieldInDistributionTable(
				FieldNum(RAssetTaxAllowanceHistory, TaxBase), FieldNum(RAssetDistribution, TaxBase), rAssetDistribution);

            updateDistributionTable = this.clearFieldInDistributionTable(
				FieldNum(RAssetTaxAllowanceHistory, NumeratorShareOwned), FieldNum(RAssetDistribution, NumeratorShare), rAssetDistribution);

            updateDistributionTable = this.clearFieldInDistributionTable(
				FieldNum(RAssetTaxAllowanceHistory, DenominatorShareOwned), FieldNum(RAssetDistribution, DenominatorShare), rAssetDistribution);
        }
        else
        {
            //clear in RAssetTable
            updateAssetTable = this.clearFieldInAssetTable(
				FieldNum(RAssetTaxAllowanceHistory, TaxBase), FieldNum(RAssetTable, TaxBase), rAssetTable);

            updateAssetTable = this.clearFieldInAssetTable(
				FieldNum(RAssetTaxAllowanceHistory, LandCadastralNum), FieldNum(RAssetTable, LandCadastralNum), rAssetTable);

            updateAssetTable = this.clearFieldInAssetTable(
				FieldNum(RAssetTaxAllowanceHistory, LandType), FieldNum(RAssetTable, LandType), rAssetTable);

            updateAssetTable = this.clearFieldInAssetTable(
				FieldNum(RAssetTaxAllowanceHistory, NumeratorShareOwned), FieldNum(RAssetTable, NumeratorShare), rAssetTable);

            updateAssetTable = this.clearFieldInAssetTable(
				FieldNum(RAssetTaxAllowanceHistory, DenominatorShareOwned), FieldNum(RAssetTable, DenominatorShare), rAssetTable);
        }


        if (updateAssetTable)
        {
            rAssetTable.update();
        }

        if (updateDistributionTable)
        {
            rAssetDistribution.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.updatePrevPeriodRecordsForNewValues();

        super();

        this.resetInitialTableValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrevPeriodRecordsForNewValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates history records with previous periods for fields which were zero in all history records
    /// for the asset or asset distribution.
    /// </summary>
    /// <remarks>
    /// The values for update are taken from the initial asset or asset distribution record.
    /// </remarks>
    public void updatePrevPeriodRecordsForNewValues()
    {
        RAssetTable assetTable = RAssetTable::find(this.AssetId);
        RAssetDistribution assetDistribution = RAssetDistribution::findRecId(this.RAssetDistribution);
        RAssetTaxAllowanceHistory allowanceHistory;

        LandCadastralNum_W landCadastralNum = assetTable.LandCadastralNum;
        LandType_W landType = assetTable.LandType;
        TaxBase taxBase = assetDistribution ? assetDistribution.TaxBase : assetTable.TaxBase;
        RAssetOwnedShare numeratorShare = assetDistribution ? assetDistribution.NumeratorShare : assetTable.NumeratorShare;
        RAssetOwnedShare denominatorShare = assetDistribution ? assetDistribution.DenominatorShare : assetTable.DenominatorShare;

        //landCadastralNum
        if (!RAssetTaxAllowanceHistory::nonEmptyLandCadastrialNumberExists(this.AssetId, this.RAssetDistribution)
			&& this.LandCadastralNum
			&& landCadastralNum)
        {
            update_recordSet allowanceHistory
            setting LandCadastralNum = landCadastralNum
            where allowanceHistory.AssetId == this.AssetId
                && allowanceHistory.RAssetDistribution == this.RAssetDistribution
                && allowanceHistory.StartDate < this.StartDate;
        }

        //landType
        if (!RAssetTaxAllowanceHistory::nonEmptyLandTypeExists(this.AssetId, this.RAssetDistribution)
			&& this.LandType
			&& landType)
        {
            update_recordSet allowanceHistory
            setting LandType = landType
            where allowanceHistory.AssetId == this.AssetId
                && allowanceHistory.RAssetDistribution == this.RAssetDistribution
                && allowanceHistory.StartDate < this.StartDate;
        }

        //taxBase
        if (!RAssetTaxAllowanceHistory::nonZeroTaxBaseExists(this.AssetId, this.RAssetDistribution)
			&& this.TaxBase
			&& taxBase)
        {
            update_recordSet allowanceHistory
            setting TaxBase = taxBase
            where allowanceHistory.AssetId == this.AssetId
                && allowanceHistory.RAssetDistribution == this.RAssetDistribution
                && allowanceHistory.StartDate < this.StartDate;
        }

        //owned share
        if (!RAssetTaxAllowanceHistory::nonEmptyOwnedShareExists(this.AssetId, this.RAssetDistribution)
			&& (this.NumeratorShareOwned || this.DenominatorShareOwned)
			&& (numeratorShare || denominatorShare))
        {
            update_recordSet allowanceHistory
            setting NumeratorShareOwned = numeratorShare,
                DenominatorShareOwned = denominatorShare
            where allowanceHistory.AssetId == this.AssetId
                && allowanceHistory.RAssetDistribution == this.RAssetDistribution
                && allowanceHistory.StartDate < this.StartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(RAssetTaxAllowanceHistory, UntaxedAreaPartAllowanceRecId):
            if (!this.UntaxedAreaPartAllowanceRecId)
                {
                    this.DenominatorShare = 0;
                    this.NumeratorShare   = 0;
                }
                break;

            case fieldNum(RAssetTaxAllowanceHistory, TaxAllowanceRecId):
            if (this.TaxAllowanceRecId)
                {
                    this.TaxAllowance395RecId = 0;
                }
                break;

            case fieldNum(RAssetTaxAllowanceHistory, TaxAllowance395RecId):
            if (this.TaxAllowance395RecId)
                {
                    this.TaxAllowanceRecId = 0;
                }

            case fieldNum(RAssetTaxAllowanceHistory, StartDate):
            if (this.StartDate)
                {
                    this.StartDate = dateStartMth(this.StartDate);
                }
                break;

            case fieldNum(RAssetTaxAllowanceHistory, TaxBase):
            case fieldNum(RAssetTaxAllowanceHistory, DenominatorShareOwned):
            case fieldNum(RAssetTaxAllowanceHistory, NumeratorShareOwned):
                if (!this.RAssetDistribution && this.distributionDataExistsForPeriod())
                {
                    ret = checkFailed("@RussianFixedAssets:RAssetTaxAllowanceHistory_EditNotAllowed");
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        RAssetTaxAllowanceHistory lastHistory = RAssetTaxAllowanceHistory::findLastWithDistribution(this.StartDate - 1, this.AssetId, false, this.RAssetDistribution);
        RAssetTaxAllowanceHistory firstDistributionHistory = RAssetTaxAllowanceHistory::findFirstDistributionHistory(this.AssetId);

        boolean ret = super();

        if ((this.NumeratorShare && !this.DenominatorShare)
			||(this.NumeratorShareOwned && !this.DenominatorShareOwned))
        {
            ret = checkFailed("@GLS117114");
        }
        else if ((this.DenominatorShare && !this.NumeratorShare)
			||(this.DenominatorShareOwned && !this.NumeratorShareOwned))
        {
            ret = checkFailed("@GLS117115");
        }
        else if ((this.NumeratorShare > this.DenominatorShare)
			||(this.NumeratorShareOwned > this.DenominatorShareOwned))
        {
            ret = checkFailed("@GLS117061");
        }

        if (this.UntaxedAreaPartAllowanceRecId && !this.NumeratorShare)
        {
            ret = checkFailed("@GLS117116");
        }

        if (RAssetTaxAllowanceHistory::historyRecordsIdentical(this, lastHistory))
        {
            ret = checkFailed("@RussianFixedAssets:RecordShouldNotBeFullyIdenticalToThePreviousRecord");
        }

        if (this.RAssetDistribution
            && ((this.StartDate < firstDistributionHistory.StartDate)
            || (!firstDistributionHistory && this.StartDate < RAssetTaxAllowanceHistory::findLast(maxDate(), this.AssetId).StartDate)))
        {
            ret = checkFailed("@RussianFixedAssets:PeriodShouldNotBeEarlierThanTheLastAssetHistoryRecordOrTheFirstDistributionHistoryRecord");
        }

        if (this.approvedRegisterTransExists(RAssetType::Land, RAssetAssessedTaxRegType::LandTaxCalc))
        {
            warning(strFmt("@RussianFixedAssets:ApprovedRegisterExistsForTheSelectedPeriod", enum2Value(RAssetAssessedTaxRegType::LandTaxCalc)));
        }

        if (this.approvedRegisterTransExists(RAssetType::LandBuilding, RAssetAssessedTaxRegType::AssessedTax))
        {
            warning(strFmt("@RussianFixedAssets:ApprovedRegisterExistsForTheSelectedPeriod", enum2Value(RAssetAssessedTaxRegType::AssessedTax)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RAssetTaxAllowanceHistory find(StartDate _startDate, RAssetId _rAssetId, boolean _forupdate = false)
    {
        RAssetTaxAllowanceHistory history;

        history.selectForUpdate(_forupdate);

        if (_startDate && _rAssetId)
        {
            select firstonly history
            where history.StartDate == _startDate
				&& history.AssetId == _rAssetId;
        }

        return history;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDistributionHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with asset distribution which is first by the period date.
    /// </summary>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_forupdate">
    /// true if the record is taken for update; false otherwise.
    /// </param>
    /// <returns>
    /// An <c>RAssetTaxAllowanceHistory</c> record.
    /// </returns>
    public static RAssetTaxAllowanceHistory findFirstDistributionHistory(RAssetId _rAssetId, boolean _forupdate = false)
    {
        RAssetTaxAllowanceHistory history;

        history.selectForUpdate(_forupdate);

        if (_rAssetId)
        {
            select firstonly history
            order by StartDate asc
            where history.AssetId == _rAssetId
                && history.RAssetDistribution != 0;
        }

        return history;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a last <c>RAssetTaxAllowanceHistory</c> record for the date provided.
    /// </summary>
    /// <param name="_startDate">
    /// A date for which to search the latest record.
    /// </param>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_forupdate">
    /// true if the record is taken for update; false otherwise.
    /// </param>
    /// <returns>
    /// An <c>RAssetTaxAllowanceHistory</c> record.
    /// </returns>
    public static RAssetTaxAllowanceHistory findLast(
        StartDate _startDate,
        RAssetId _rAssetId,
        boolean _forupdate = false)
    {
        return RAssetTaxAllowanceHistory::findLastWithDistribution(_startDate, _rAssetId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastWithDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a last <c>RAssetTaxAllowanceHistory</c> record for the date provided.
    /// </summary>
    /// <param name="_startDate">
    /// A date for which to search the latest record.
    /// </param>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_forupdate">
    /// true if the record is taken for update; false otherwise.
    /// </param>
    /// <param name="_rAssetDistribution">
    /// An asset distribution; optional.
    /// </param>
    /// <returns>
    /// An <c>RAssetTaxAllowanceHistory</c> record.
    /// </returns>
    public static RAssetTaxAllowanceHistory findLastWithDistribution(
        StartDate _startDate,
        RAssetId _rAssetId,
        boolean _forupdate = false,
        RefRecId _rAssetDistribution = 0)
    {
        RAssetTaxAllowanceHistory  history;

        history.selectForUpdate(_forupdate);

        if (_startDate && _rAssetId)
        {
            select firstonly history
            order by StartDate desc
            where history.StartDate <= _startDate
                && history.AssetId == _rAssetId
                && history.RAssetDistribution == _rAssetDistribution;
        }

        return history;
    }

]]></Source>
			</Method>
			<Method>
				<Name>historyRecordsIdentical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if two provided records of <c>RAssetTaxAllowanceHistory</c> table are identical.
    /// </summary>
    /// <param name="_recordOne">
    /// A first <c>RAssetTaxAllowanceHistory</c> record.
    /// </param>
    /// <param name="_recordTwo">
    /// A second <c>RAssetTaxAllowanceHistory</c> record.
    /// </param>
    /// <returns>
    /// true if the records are identical; false otherwise.
    /// </returns>
    /// <remarks>
    /// It uses the predefined container of table fields for the checking.
    /// </remarks>
    public static boolean historyRecordsIdentical(RAssetTaxAllowanceHistory _recordOne, RAssetTaxAllowanceHistory _recordTwo)
    {
        boolean ret = true;
        container fieldsCon = [
			fieldNum(RAssetTaxAllowanceHistory, TaxAllowanceRecId),
			fieldNum(RAssetTaxAllowanceHistory, TaxAllowance395RecId),
			fieldNum(RAssetTaxAllowanceHistory, NumeratorShare),
			fieldNum(RAssetTaxAllowanceHistory, DenominatorShare),
			fieldNum(RAssetTaxAllowanceHistory, UntaxedAreaPartAllowanceRecId),
			fieldNum(RAssetTaxAllowanceHistory, TaxBase),
			fieldNum(RAssetTaxAllowanceHistory, LandCadastralNum),
			fieldNum(RAssetTaxAllowanceHistory, LandType),
			fieldNum(RAssetTaxAllowanceHistory, NumeratorShareOwned),
			fieldNum(RAssetTaxAllowanceHistory, DenominatorShareOwned)];

        for (int idx = 1; idx <= conLen(fieldsCon); idx++)
        {
            FieldId fieldIdBuffer = conPeek(fieldsCon, idx);
            if (_recordOne.(fieldIdBuffer) != _recordTwo.(fieldIdBuffer))
            {
                ret = false;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonEmptyLandCadastrialNumberExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any record with the non-empty field <c>LandCadastralNum</c> exists in the table.
    /// </summary>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_rAssetDistribution">
    /// An asset distribution record id; optional.
    /// </param>
    /// <returns>
    /// true if the record with given condition exists; false otherwise.
    /// </returns>
    public static boolean nonEmptyLandCadastrialNumberExists(RAssetId _rAssetId, RefRecId _rAssetDistribution = 0)
    {
        RAssetTaxAllowanceHistory rAssetTaxAllowanceHistory;

        select firstOnly RecId from rAssetTaxAllowanceHistory
        where rAssetTaxAllowanceHistory.AssetId == _rAssetId
            && rAssetTaxAllowanceHistory.RAssetDistribution == _rAssetDistribution
            && rAssetTaxAllowanceHistory.LandCadastralNum != '';

        return rAssetTaxAllowanceHistory.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonEmptyRoomCadastrialNumberExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any record with the non-empty field <c>RoomCadastralNum</c> exists in the table.
    /// </summary>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_rAssetDistribution">
    /// An asset distribution record id; optional.
    /// </param>
    /// <returns>
    /// true if the record with given condition exists; false otherwise.
    /// </returns>
    public static boolean nonEmptyRoomCadastrialNumberExists(RAssetId _rAssetId, RefRecId _rAssetDistribution = 0)
    {
        RAssetTaxAllowanceHistory rAssetTaxAllowanceHistory;

        select firstOnly RecId from rAssetTaxAllowanceHistory
            where rAssetTaxAllowanceHistory.AssetId == _rAssetId
                && rAssetTaxAllowanceHistory.RAssetDistribution == _rAssetDistribution
                && rAssetTaxAllowanceHistory.RoomCadastralNum;

        return rAssetTaxAllowanceHistory.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonEmptyLandTypeExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any record with the non-empty field <c>LandType</c> exists in the table.
    /// </summary>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_rAssetDistribution">
    /// An asset distribution record id; optional;
    /// </param>
    /// <returns>
    /// true if the record with given condition exists; false otherwise.
    /// </returns>
    public static boolean nonEmptyLandTypeExists(RAssetId _rAssetId, RefRecId _rAssetDistribution = 0)
    {
        RAssetTaxAllowanceHistory rAssetTaxAllowanceHistory;

        select firstOnly RecId from rAssetTaxAllowanceHistory
        where rAssetTaxAllowanceHistory.AssetId == _rAssetId
            && rAssetTaxAllowanceHistory.RAssetDistribution == _rAssetDistribution
            && rAssetTaxAllowanceHistory.LandType != '';

        return rAssetTaxAllowanceHistory.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonEmptyOwnedShareExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any record with the non-zero field <c>NumeratorShareOwned</c> or <c>DenominatorShareOwned</c>
    /// exists in the table.
    /// </summary>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_rAssetDistribution">
    /// An asset distribution record id; optional;
    /// </param>
    /// <returns>
    /// true if the record with given condition exists; false otherwise.
    /// </returns>
    public static boolean nonEmptyOwnedShareExists(RAssetId _rAssetId, RefRecId _rAssetDistribution = 0)
    {
        RAssetTaxAllowanceHistory rAssetTaxAllowanceHistory;

        select firstOnly RecId from rAssetTaxAllowanceHistory
        where rAssetTaxAllowanceHistory.AssetId == _rAssetId
            && rAssetTaxAllowanceHistory.RAssetDistribution == _rAssetDistribution
            && (rAssetTaxAllowanceHistory.NumeratorShareOwned != 0
				|| rAssetTaxAllowanceHistory.DenominatorShareOwned != 0);

        return rAssetTaxAllowanceHistory.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonZeroTaxBaseExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any record with the non-zero field <c>TaxBase</c> exists in the table.
    /// </summary>
    /// <param name="_rAssetId">
    /// An asset id.
    /// </param>
    /// <param name="_rAssetDistribution">
    /// An asset distribution record id; optional;
    /// </param>
    /// <returns>
    /// true if the record with given condition exists; false otherwise.
    /// </returns>
    public static boolean nonZeroTaxBaseExists(RAssetId _rAssetId, RefRecId _rAssetDistribution = 0)
    {
        RAssetTaxAllowanceHistory rAssetTaxAllowanceHistory;

        select firstOnly RecId from rAssetTaxAllowanceHistory
        where rAssetTaxAllowanceHistory.AssetId == _rAssetId
            && rAssetTaxAllowanceHistory.RAssetDistribution == _rAssetDistribution
            && rAssetTaxAllowanceHistory.TaxBase != 0;

        return rAssetTaxAllowanceHistory.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RAssetTaxAllowanceHistory</FormRef>
	<Label>@GLS117040</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>StartDate</TitleField1>
	<TitleField2>TaxAllowanceRecId</TitleField2>
	<ClusteredIndex>StartDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>RAsset</Modules>
	<PrimaryIndex>StartDateIdx</PrimaryIndex>
	<ReplacementKey>StartDateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowance395RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowance395RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RAssetDistribution</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allowance</Name>
			<Label>@SYS67399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowance395RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AreaPart</Name>
			<Label>@GLS117011</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UntaxedAreaPartAllowanceRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowance395RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Share</Name>
			<Label>@GLS117112</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumeratorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenominatorShare</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Distribution</Name>
			<Label>@SYS70458</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RAssetDistribution</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LandTax</Name>
			<Label>@GLS116997</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DenominatorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenominatorShareOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LandCadastralNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LandType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumeratorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumeratorShareOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowance395RecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UntaxedAreaPartAllowanceRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OwnedShare</Name>
			<Label>@GLS117119</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumeratorShareOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenominatorShareOwned</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportTax</Name>
			<Label>@GLS116928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DenominatorShare</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetTaxPrivilegeShare</ExtendedDataType>
			<Label>@RussianFixedAssets:AllowanceShareDenominator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumeratorShare</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetTaxPrivilegeShare</ExtendedDataType>
			<Label>@RussianFixedAssets:AllowanceShareNumerator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetPeriod</ExtendedDataType>
			<Label>@SYS101256</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxAllowance395RecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetTaxAllowanceExemption</ExtendedDataType>
			<Label>@GLS117010</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxAllowanceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetTaxAllowanceRecId</ExtendedDataType>
			<Label>@GLS117009</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UntaxedAreaPartAllowanceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetTaxAllowanceUntaxedAreaPart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DenominatorShareOwned</Name>
			<ExtendedDataType>RAssetOwnedShare</ExtendedDataType>
			<Label>@RussianFixedAssets:OwnedShareDenominator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LandCadastralNum</Name>
			<ExtendedDataType>LandCadastralNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoomCadastralNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoomCadastralNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LandType</Name>
			<ExtendedDataType>LandType_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumeratorShareOwned</Name>
			<ExtendedDataType>RAssetOwnedShare</ExtendedDataType>
			<Label>@RussianFixedAssets:OwnedShareNumerator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RAssetDistribution</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBase</Name>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Label>@GLS106040</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StartDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RAssetDistribution</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxAllowanceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UntaxedAreaPartAllowanceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>UntaxedAreaPartAllowanceRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxAllowance395idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxAllowance395RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxAllowance</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTaxAllowance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTaxAllowance</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTaxAllowanceHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAllowanceRecId</Name>
					<Field>TaxAllowanceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxAllowance395</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTaxAllowance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxAllowance395</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTaxAllowanceHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_Extern</Name>
					<RelatedField>TaxType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_Extern_1</Name>
					<RelatedField>TaxType</RelatedField>
					<Value>8</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType_Extern</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAllowance395RecId</Name>
					<Field>TaxAllowance395RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UntaxedAreaPartAllowance</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTaxAllowance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UntaxedAreaPartAllowance</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTaxAllowanceHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_Extern</Name>
					<RelatedField>TaxType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_Extern_1</Name>
					<RelatedField>TaxType</RelatedField>
					<Value>8</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType_Extern</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<Value>4</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UntaxedAreaPartAllowanceRecId</Name>
					<Field>UntaxedAreaPartAllowanceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetDistribution</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetDistribution</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RAssetDistribution</Name>
					<Field>RAssetDistribution</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LandTypeTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LandTypeTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LandType</Name>
					<SourceEDT>LandType_W</SourceEDT>
					<Field>LandType</Field>
					<RelatedField>LandType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>