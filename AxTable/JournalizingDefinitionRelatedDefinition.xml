<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionRelatedDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionRelatedDefinition extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a date-effective delete if the server cache has the <c>CreateNewTimePeriod</c> value;
    /// otherwise, performs simple delete.
    /// </summary>
    public void delete()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayParentJournalizingDefinitionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the code of the journalizing definition that has assigned a linked journalizing definition.
    /// </summary>
    /// <returns>
    ///    The code of the journalizing definition that has assigned a linked journalizing definition.
    /// </returns>

    public display JournalizingDefinitionCode displayParentJournalizingDefinitionCode()
    {
        JournalizingDefinitionCode journalizingDefinitionCode;

        journalizingDefinitionCode = JournalizingDefinition::findByRecId(JournalizingDefinitionVersion::find(this.ParentJournalizingDefinitionVersion).JournalizingDefinition).JournalizingDefinitionCode;

        return journalizingDefinitionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayParentJournalizingDefinitionDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the code of the journalizing definition which has assigned a linked journalizing definition.
    /// </summary>
    /// <returns>
    /// The code of the journalizing definition which has assigned a linked journalizing definition.
    /// </returns>

    public display JournalizingDefinitionDesc displayParentJournalizingDefinitionDesc()
    {
        JournalizingDefinitionDesc journalizingDefinitionDesc;

        journalizingDefinitionDesc = JournalizingDefinition::findByRecId(JournalizingDefinitionVersion::find(this.ParentJournalizingDefinitionVersion).JournalizingDefinition).JournalizingDefinitionDesc;

        return journalizingDefinitionDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRelatedJournalizingDefinitionDesc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the journalizing definition that is a linked journalizing definition.
    /// </summary>
    /// <returns>
    ///    The description of the journalizing definition that is a linked journalizing definition.
    /// </returns>

    public display JournalizingDefinitionDesc displayRelatedJournalizingDefinitionDesc()
    {
        JournalizingDefinitionDesc journalizingDefinitionDesc;

        journalizingDefinitionDesc = JournalizingDefinition::findByRecId(this.JournalizingDefinitionRelated).JournalizingDefinitionDesc;

        return journalizingDefinitionDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editJournalizingDefinitionRelatedCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the related linked journalizing definition for the main journalizing definition.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether to set the journalizing definition code.
    /// </param>
    /// <param name="_linkedJournalizingDefinitionCode">
    ///    The new linked posting definition when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The linked definition code of the record in the <c>JournalizingDefinitionRelatedDefinition</c>
    ///    table.
    /// </returns>
    public edit JournalizingDefinitionCode editJournalizingDefinitionRelatedCode(boolean set, JournalizingDefinitionCode _linkedJournalizingDefinitionCode)
    {
        JournalizingDefinitionCode linkedJournalizingDefinition;

        if (set)
        {
            if (JournalizingDefinition::exist(_linkedJournalizingDefinitionCode))
            {
                this.JournalizingDefinitionRelated = JournalizingDefinition::find(_linkedJournalizingDefinitionCode).RecId;
            }
            else
            {
                checkFailed(strfmt("@SYS112224", _linkedJournalizingDefinitionCode, "@SYS128173", tablepname(JournalizingDefinition)));
            }
        }
        else
        {
            linkedJournalizingDefinition = JournalizingDefinition::findByRecId(this.JournalizingDefinitionRelated).JournalizingDefinitionCode;
        }
        return linkedJournalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>JournalizingDefinitionRelatedDefinition</c> record by using a
    ///    <c>JournalizingDefinitionVersion</c> record when a new record is created.
    /// </summary>
    /// <param name="_journalizingDefinitionVersion">
    ///    The <c>JournalizingDefinitionVersion</c> record with which to assign the
    ///    <c>JournalizingDefinition</c> field.
    /// </param>
    public void initFromJournalizingDefinition(JournalizingDefinitionVersion _journalizingDefinitionVersion)
    {
        this.ParentJournalizingDefinitionVersion = _journalizingDefinitionVersion.RecId;
        this.JournalizingDefinitionRelated = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a date effective insert if the server cache has the <c>CreateNewTimePeriod</c> value;
    /// otherwise, performs a simple insert.
    /// </summary>
    public void insert()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRelatedJournalizingDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a lookup for the journalizing definitions that can be assigned as linked journalizing
    ///    definitions.
    /// </summary>
    /// <param name="_formStringControl">
    ///    The <c>FormStringControl</c> object to use to perform the lookup.
    /// </param>
    /// <param name="_journalizingDefinitionId">
    ///    The current journalizing definition, which will be filtered out of the result set.
    /// </param>
    /// <param name="_journalizingDefinitionModuleValue">
    ///    The journalizing definition module to filter in the lookup.
    /// </param>
    public void lookupRelatedJournalizingDefinitions (FormStringControl _formStringControl,
                                                    JournalizingDefinitionId _journalizingDefinitionId,
                                                    JournalizingDefinitionModuleValue _journalizingDefinitionModuleValue)
    {
        Query query = new Query();
        QueryBuildDataSource dsJournalizingDefinition;
        QueryBuildDataSource dsJournalizingDefinitionRelatedDefinition;
        QueryBuildDataSource dsJournalizingDefinitionVersion;

        QueryBuildRange qrRecId;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(JournalizingDefinition), _formStringControl);

        query.validTimeStateDateRange(dateNull(), dateMax());
        dsJournalizingDefinition = query.addDataSource(tablenum(JournalizingDefinition));

        dsJournalizingDefinitionVersion = dsJournalizingDefinition.addDataSource(tablenum(JournalizingDefinitionVersion));
        dsJournalizingDefinitionVersion.joinMode(JoinMode::NoExistsJoin);
        dsJournalizingDefinitionVersion.addLink(
            fieldnum(JournalizingDefinition, RecId),
            fieldnum(JournalizingDefinitionVersion, JournalizingDefinition));

        dsJournalizingDefinitionRelatedDefinition = dsJournalizingDefinitionVersion.addDataSource(tablenum(JournalizingDefinitionRelatedDefinition));
        dsJournalizingDefinitionRelatedDefinition.joinMode(JoinMode::InnerJoin);
        dsJournalizingDefinitionRelatedDefinition.addLink(
            fieldnum(JournalizingDefinitionVersion, RecId),
            fieldnum(JournalizingDefinitionRelatedDefinition, ParentJournalizingDefinitionVersion));

        qrRecId = dsJournalizingDefinition.addRange(fieldnum(JournalizingDefinition, RecId));
        qrRecId.value('!= '+ queryValue(_journalizingDefinitionId));

        // A journalizing definition cannot be assigned to itself as an linked journalizing definition, therefore remove from lookup

        //Add range to filter by module

        dsJournalizingDefinition.addRange(fieldnum(JournalizingDefinition, JournalizingDefinitionModuleValue)).value(queryValue(_journalizingDefinitionModuleValue));

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldnum(JournalizingDefinition, JournalizingDefinitionCode));
        sysTableLookup.addLookupfield(fieldnum(JournalizingDefinition, JournalizingDefinitionDesc));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a date effective update if the server cache has the <c>CreateNewTimePeriod</c> value;
    /// otherwise, performs a simple update.
    /// </summary>
    public void update()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRelatedJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the validation for the journalizing definition related field.
    /// </summary>
    /// <returns>
    ///    true if the journalizing definition related field data is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Checks that the journalizing definition that is linked has no additional journalizing definitions
    ///    linked.Also, checks whether the journalizing definition is not linked to itself or another
    ///    journalizing definition that belongs to some other module.
    /// </remarks>
    private boolean validateRelatedJournalizingDefinition()
    {
        boolean ret = true;

        if (JournalizingDefinitionRelatedDefinition::existRelatedJournalizingDefinitions(this.JournalizingDefinitionRelated))
        {
            ret = checkFailed(strfmt("@SYS112224", JournalizingDefinition::findByRecId(this.JournalizingDefinitionRelated).JournalizingDefinitionCode, "@SYS128173", "@SYS128264"));
        }
        else if (JournalizingDefinitionVersion::find(this.ParentJournalizingDefinitionVersion).JournalizingDefinition == this.JournalizingDefinitionRelated)
        {
            ret = checkFailed(strfmt("@SYS128566",
                                    JournalizingDefinition::findByRecId(this.JournalizingDefinitionRelated).JournalizingDefinitionCode));
        }
        else if (JournalizingDefinition::findByRecId(JournalizingDefinitionVersion::find(this.ParentJournalizingDefinitionVersion).JournalizingDefinition).JournalizingDefinitionModuleValue
                            != JournalizingDefinition::findByRecId(this.JournalizingDefinitionRelated).JournalizingDefinitionModuleValue)
        {
           ret = checkFailed(strfmt("@SYS112224", JournalizingDefinition::findByRecId(this.JournalizingDefinitionRelated).JournalizingDefinitionCode, "@SYS128173", "@SYS128264"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        ret = ret && this.validateRelatedJournalizingDefinition();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record based on <paramref name = "_journalizingDefinitionParentVersionId"/> and <paramref name = "_journalizingDefinitionRelatedId"/>  exist in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_journalizingDefinitionParentVersionId">
    /// The journalizing definition to find.
    /// </param>
    /// <param name="_journalizingDefinitionRelatedId">
    /// The related journalizing definition to find.
    /// </param>
    /// <returns>
    /// true if the field values exist in the table; otherwise, false.
    /// </returns>
    public static boolean checkExist(JournalizingDefinitionVersionId _journalizingDefinitionParentVersionId, JournalizingDefinitionId _journalizingDefinitionRelatedId)
    {
        boolean ret = true;
        JournalizingDefinitionCode journalizingDefinitionParentCode;
        JournalizingDefinitionCode journalizingDefinitionRelatedCode;

        if (!JournalizingDefinitionRelatedDefinition::exist(_journalizingDefinitionParentVersionId, _journalizingDefinitionRelatedId))
        {
            journalizingDefinitionParentCode = JournalizingDefinition::findByRecId(JournalizingDefinitionVersion::find(_journalizingDefinitionParentVersionId).JournalizingDefinition).JournalizingDefinitionCode;
            journalizingDefinitionRelatedCode  =  JournalizingDefinition::findByRecId(_journalizingDefinitionRelatedId).JournalizingDefinitionCode;
            ret = checkFailed(strfmt(JournalizingDefinitionRelatedDefinition::txtNotExist(), journalizingDefinitionParentCode, journalizingDefinitionRelatedCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>JournalizingDefinitionRelatedDefinition</c>
    ///    table by using the journalizing definition version and related journalizing definition.
    /// </summary>
    /// <param name="_parentJournalizingDefinitionVersionId">
    ///    The journalizing definition version to find.
    /// </param>
    /// <param name="_journalizingDefinitionRelatedId">
    ///    The related journalizing definition to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists in the table; otherwise, false.
    /// </returns>
    public static boolean exist(JournalizingDefinitionVersionId _parentJournalizingDefinitionVersionId, JournalizingDefinitionId _journalizingDefinitionRelatedId)
    {
        boolean found;

        found = (select firstonly
                           RecId
                           from
                               journalizingDefinitionRelatedDefinition
                           where
                               (journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == _parentJournalizingDefinitionVersionId) &&
                               (journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated == _journalizingDefinitionRelatedId)).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existParentJournalizingDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified journalizing definition has parent journalizing definitions
    ///    assigned.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    ///    The journalizing definition to find.
    /// </param>
    /// <returns>
    ///    true if the journalizing definition has parent journalizing definitions assigned; otherwise, false.
    /// </returns>
    public static boolean existParentJournalizingDefinitions(JournalizingDefinitionId _journalizingDefinitionId)
    {
        boolean found;

        found = (select firstonly ParentJournalizingDefinitionVersion
                    from journalizingDefinitionRelatedDefinition
                    where journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated == _journalizingDefinitionId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRelatedJournalizingDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified journalizing definition has additional journalizing definitions
    ///    assigned.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    ///    The journalizing definition to find.
    /// </param>
    /// <returns>
    ///    true if the journalizing definition has additional journalizing definitions assigned; otherwise,
    ///    false.
    /// </returns>
    public static boolean existRelatedJournalizingDefinitions(JournalizingDefinitionId _journalizingDefinitionId)
    {
        JournalizingDefinition                  journalizingDefinition;
        JournalizingDefinitionVersion           journalizingDefinitionVersion;
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;
        date                                    beginDate, endDate;

        beginDate = dateNull();
        endDate = dateMax();

        select validTimeState(beginDate, endDate) RecId
            from  journalizingDefinition
            where journalizingDefinition.RecId == _journalizingDefinitionId
                join RecId from journalizingDefinitionVersion
                where  journalizingDefinitionVersion.JournalizingDefinition == journalizingDefinition.RecId
                    join ParentJournalizingDefinitionVersion from journalizingDefinitionRelatedDefinition
                    where journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == journalizingDefinitionVersion.RecId;

        return journalizingDefinition.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>JournalizingDefinitionRelatedDefinition</c> table by using the
    ///    specified journalizing definition and the related journalizing definition.
    /// </summary>
    /// <param name="_parentJournalizingDefintionVersionId">
    ///    The journalizing definition version to find together with the related journalizing definition.
    /// </param>
    /// <param name="_journalizingDefinitionRelatedId">
    ///    The related journalizing definition to find together with the parent journalizing definition.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A <c>JournalizingDefinitionRelatedDefinition</c> table buffer.
    /// </returns>
    public static JournalizingDefinitionRelatedDefinition find(
        JournalizingDefinitionVersionId _parentJournalizingDefintionVersionId,
        JournalizingDefinitionId        _journalizingDefinitionRelatedId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;

        journalizingDefinitionRelatedDefinition.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionRelatedDefinition.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionRelatedDefinition
            where
                (journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == _parentJournalizingDefintionVersionId) &&
                (journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated == _journalizingDefinitionRelatedId);

        return journalizingDefinitionRelatedDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedJournalizingDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds all the <c>JournalizingDefinitionRelatedDefinition</c> records for the specified journalizing
    ///    definition.
    /// </summary>
    /// <param name="_journalizingDefintionVersionId">
    ///    The journalizing definition version to find together with the related journalizing definition.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A <c>JournalizingDefinitionRelatedDefinition</c> buffer if records are found.
    /// </returns>

    public static JournalizingDefinitionRelatedDefinition findRelatedJournalizingDefinitions(
        JournalizingDefinitionVersionId _journalizingDefintionVersionId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;

        journalizingDefinitionRelatedDefinition.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionRelatedDefinition.concurrencyModel(_concurrencyModel);
        }
        select  journalizingDefinitionRelatedDefinition
            where
            (journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == _journalizingDefintionVersionId);
        return journalizingDefinitionRelatedDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectParentJournalizingDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a query that selects the journalizing definitions that link the passed in journalizing
    ///    definition.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    ///    The ID of the journalizing definition to select the parent definitions for.
    /// </param>
    /// <returns>
    ///    A query that will select the journalizing definitions that link the passed in journalizing
    ///    definition.
    /// </returns>
    public static Query selectParentJournalizingDefinitions(JournalizingDefinitionId _journalizingDefinitionId)

    {
        Query query = new Query();
        QueryBuildDataSource dsJournalizingDefinitionRelatedDefinition;
        QueryBuildDataSource dsJournalizingDefinitionVersion;
        QueryBuildRange queryBuildRange;

        dsJournalizingDefinitionRelatedDefinition = query.addDataSource(tablenum(JournalizingDefinitionRelatedDefinition));
        dsJournalizingDefinitionVersion = dsJournalizingDefinitionRelatedDefinition.addDataSource(tablenum(JournalizingDefinitionVersion));
        dsJournalizingDefinitionVersion.joinMode(JoinMode::InnerJoin);
        dsJournalizingDefinitionVersion.addLink(
            fieldnum(JournalizingDefinitionRelatedDefinition, ParentJournalizingDefinitionVersion),
            fieldnum(JournalizingDefinitionVersion, RecId));

        queryBuildRange = dsJournalizingDefinitionRelatedDefinition.addRange(fieldnum(JournalizingDefinitionRelatedDefinition, JournalizingDefinitionRelated));
        queryBuildRange.value(int642str(_journalizingDefinitionId));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>JournalizingDefinition</c> table does not exist.
    /// </summary>
    /// <returns>
    /// A message that indicates the record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128374";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS319338</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS128264</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RecId</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>JournalizingDefinitionRelated</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>JournalizingDefinitionRelated</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentJournalizingDefinitionVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionRelated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionRelated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentJournalizingDefinitionVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionRelated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentJournalizingDefinitionVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinitionRelated</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentJournalizingDefinitionVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentJournalizingDefinitionVersion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalizingDefinitionRelated</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalizingDefinitionRelated</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentJournalizingDefinitionVersion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinition</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>JournalizingDefinition_JournalizingDefinitionRelatedDefinition</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinitionRelated</Name>
					<Field>JournalizingDefinitionRelated</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinitionVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinitionVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinitionVersion</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>JournalizingDefinitionVersion_JournalizingDefinitionRelatedDefinition</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentJournalizingDefinitionVersion</Name>
					<Field>ParentJournalizingDefinitionVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>