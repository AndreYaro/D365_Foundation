<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCatalogProductRelationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatCatalogProductRelationType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cloneRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of the <c>CatCatalogProductRelationType</c> table by duplicating this record.
    /// </summary>
    /// <param  name='_tblCatalog'>
    /// The <c>CatProcureCatalogTable</c> record the cloned <c>CatCatalogProductRelationType</c> record will point to.
    /// </param>
    /// <returns>
    /// The cloned instance of the <c>CatCatalogProductRelationType</c> data type.
    /// </returns>
    /// <remarks>
    /// The cloned record is not inserted into the database.
    /// </remarks>
    public CatCatalogProductRelationType cloneRecord(CatProcureCatalogTable _tblCatalog)
    {
        CatCatalogProductRelationType tblProductRelationTypeDup;

        tblProductRelationTypeDup.clear();
        tblProductRelationTypeDup.Catalog = _tblCatalog.RecId;
        tblProductRelationTypeDup.ProductRelationType = this.ProductRelationType;
        tblProductRelationTypeDup.DisplayOrder = this.DisplayOrder;

        return tblProductRelationTypeDup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNextDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next <c>CatCatalogProductRelationType</c> record based on the display order.
    /// </summary>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatCatalogProductRelationType</c> data type.
    /// </returns>
    public CatCatalogProductRelationType findByNextDisplayOrder(boolean _forUpdate = false)
    {
        CatCatalogProductRelationType tblCatalogPRType;

        tblCatalogPRType.selectForUpdate(_forUpdate);

        select firstonly * from tblCatalogPRType
        order by DisplayOrder
        where
            tblCatalogPRType.Catalog == this.Catalog &&
            tblCatalogPRType.DisplayOrder > this.DisplayOrder;

        return tblCatalogPRType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPreviousDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous <c>CatCatalogProductRelationType</c> record based on the display order.
    /// </summary>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatCatalogProductRelationType</c> data type.
    /// </returns>
    public CatCatalogProductRelationType findByPreviousDisplayOrder(boolean _forUpdate = false)
    {
        CatCatalogProductRelationType tblCatalogPRType;

        tblCatalogPRType.selectForUpdate(_forUpdate);

        select firstonly * from tblCatalogPRType
        order by DisplayOrder desc
        where
            tblCatalogPRType.Catalog == this.Catalog &&
            tblCatalogPRType.DisplayOrder < this.DisplayOrder;

        return tblCatalogPRType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDownDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Increases the display order, unless the display order is the maximum.
    /// </summary>
    /// <returns>
    ///    true if the display order increased; otherwise, false.
    /// </returns>
    public boolean moveDownDisplayOrder()
    {
        boolean ret = false;
        CatCatalogProductRelationType swapCatCatalogProductRelationType;

        // Find the record to swap with and swap
        swapCatCatalogProductRelationType = this.findByNextDisplayOrder(true);
        if (swapCatCatalogProductRelationType)
        {
            this.swapDisplayOrder(swapCatCatalogProductRelationType);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUpDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the display order, unless the display order is the minimum.
    /// </summary>
    /// <returns>
    ///    true if the display order decreased; otherwise, false.
    /// </returns>
    public boolean moveUpDisplayOrder()
    {
        CatCatalogProductRelationType swapCatCatalogProductRelationType;
        boolean ret = false;

        // Find the record to swap with and swap
        swapCatCatalogProductRelationType = this.findByPreviousDisplayOrder(true);
        if (swapCatCatalogProductRelationType)
        {
            this.swapDisplayOrder(swapCatCatalogProductRelationType);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the display order with another instance of <c>CatCatalogProductRelationType</c>
    /// </summary>
    /// <param  name='_swapCatCatalogProductRelationType'>
    /// An instance of <c>CatCatalogProductRelationType</c> to swap the display order with.
    /// </param>
    private void swapDisplayOrder(CatCatalogProductRelationType _swapCatCatalogProductRelationType)
    {
        int newDisplayOrder = _swapCatCatalogProductRelationType.DisplayOrder;

        ttsbegin;
        _swapCatCatalogProductRelationType.DisplayOrder = this.DisplayOrder;
        this.DisplayOrder = 0;
        this.selectForUpdate(true);
        this.update();
        _swapCatCatalogProductRelationType.selectForUpdate(true);
        _swapCatCatalogProductRelationType.update();
        this.DisplayOrder = newDisplayOrder;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given catalog and product relation type exists.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <param  name='_displayOrder'>
    /// The display order.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExistByDisplayOrder(RefRecId _catalog, int _displayOrder)
    {
        if (!CatCatalogProductRelationType::existByDisplayOrder(_catalog, _displayOrder))
        {
            return checkFailed(strfmt(CatCatalogProductRelationType::txtNotExist(), _catalog, "@SYS11111", _displayOrder));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByProductRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given catalog and product relation type exists.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <param  name='_productRelationType'>
    /// An instance of the <c>RefRecId</c> data type, for the product relation type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExistByProductRelationType(RefRecId _catalog, RefRecId _productRelationType)
    {
        if (!CatCatalogProductRelationType::existByProductRelationType(_catalog, _productRelationType))
        {
            return checkFailed(strfmt(CatCatalogProductRelationType::txtNotExist(), _catalog, "@SYS11111", _productRelationType));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given catalog and product relation type exists.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <param  name='_displayOrder'>
    /// The display order.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean existByDisplayOrder(RefRecId _catalog, int _displayOrder)
    {
        return (CatCatalogProductRelationType::findByDisplayOrder(_catalog, _displayOrder).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByProductRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given catalog and product relation type exists.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <param  name='_productRelationType'>
    /// An instance of the <c>RefRecId</c> data type, for the product relation type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean existByProductRelationType(RefRecId _catalog, RefRecId _productRelationType)
    {
        return (CatCatalogProductRelationType::findByProductRelationType(_catalog, _productRelationType).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given catalog and display order exists.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <param  name='_displayOrder'>
    /// The display order.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatCatalogProductRelationType</c> data type.
    /// </returns>
    public static CatCatalogProductRelationType findByDisplayOrder(RefRecId _catalog, int _displayOrder, boolean _forUpdate = false)
    {
        CatCatalogProductRelationType tblCatalogPRType;

        if (_catalog)
        {
            tblCatalogPRType.selectForUpdate(_forUpdate);

            select firstonly * from tblCatalogPRType
                where tblCatalogPRType.Catalog == _catalog
                    && tblCatalogPRType.DisplayOrder == _displayOrder;
        }

        return tblCatalogPRType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given catalog and product relation type exists.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <param  name='_productRelationType'>
    /// An instance of the <c>RefRecId</c> data type, for the product relation type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatCatalogProductRelationType</c> data type.
    /// </returns>
    public static CatCatalogProductRelationType findByProductRelationType(RefRecId _catalog, RefRecId _productRelationType, boolean _forUpdate = false)
    {
        CatCatalogProductRelationType tblCatalogPRType;

        if (_catalog && _productRelationType)
        {
            tblCatalogPRType.selectForUpdate(_forUpdate);

            select firstonly * from tblCatalogPRType
                where tblCatalogPRType.Catalog == _catalog
                    && tblCatalogPRType.ProductRelationType == _productRelationType;
        }

        return tblCatalogPRType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum display order for the associated catalog's production relation types.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <returns>
    /// Maximum display order for the product relation type for the associated catalog.
    /// </returns>
    public static int maxDisplayOrder(RefRecId _catalog)
    {
        CatCatalogProductRelationType tblCatalogPRType;

        if (_catalog)
        {
            select maxof(DisplayOrder) from tblCatalogPRType
                where tblCatalogPRType.Catalog == _catalog;
        }

        return tblCatalogPRType.DisplayOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the minimum display order for the product relation type for the associated catalog.
    /// </summary>
    /// <param  name='_catalog'>
    /// An instance of the <c>RefRecId</c> data type, for the catalog.
    /// </param>
    /// <returns>
    /// Minimum display order for the product relation type for the associated catalog.
    /// </returns>
    public static int minDisplayOrder(RefRecId _catalog)
    {
        CatCatalogProductRelationType tblCatalogPRType;

        if (_catalog)
        {
            select minof(DisplayOrder) from tblCatalogPRType
                where tblCatalogPRType.Catalog == _catalog;
        }

        return tblCatalogPRType.DisplayOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static str txtNotExist()
    {
        return "@SYS11111";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS324146</DeveloperDocumentation>
	<Label>@SYS130977</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Catalog</TitleField1>
	<TitleField2>ProductRelationType</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CatalogProductRelationTypeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS190915</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DisplayOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS190888</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS190887</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatalogDisplayOrderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DisplayOrder</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatalogProductRelationTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductRelationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatProcureCatalogTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CatProcureCatalogTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatProcureCatalogTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatProcureCatalogTable_CatCatalogProductRelationType</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductRelationType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductRelationType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProductRelationType</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResProductRelationType_CatCatalogProductRelationType</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductRelationType</Name>
					<Field>ProductRelationType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>