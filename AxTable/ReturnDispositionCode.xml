<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReturnDispositionCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReturnDispositionCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the Return disposition code in scope has a return action of type CreditOnly.
    /// </summary>
    /// <returns>
    ///    false if credit only is detected; otherwise, true.
    /// </returns>
    public boolean createInterCompany()
    {
        boolean ret = true;
        switch (this.DispositionAction)
        {
            case DispositionAction::CreditOnly:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the Return disposition code in scope has a return action that involves the creation
    ///    of a Replacement order.
    /// </summary>
    /// <returns>
    ///    true if Replacement is detected, otherwise false.
    /// </returns>
    public boolean createReplacement()
    {
        boolean ret = false;
        switch (this.DispositionAction)
        {
            case DispositionAction::ReplaceCredit:
            case DispositionAction::ReplaceScrap:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScrap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the Return disposition code in scope has a return action of type Scrap or Replace and
    ///    scrap.
    /// </summary>
    /// <returns>
    ///    true if scrapping is detected, otherwise false.
    /// </returns>
    public boolean createScrap()
    {
        boolean ret = false;
        switch (this.DispositionAction)
        {
            case DispositionAction::Scrap:
            case DispositionAction::ReplaceScrap:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrice2Zero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the Return disposition code in scope has a return action of type Return to customer.
    /// </summary>
    /// <returns>
    ///    true if Return to customer is detected; otherwise, false.
    /// </returns>
    public boolean setPrice2Zero()
    {
        boolean ret = false;
        switch (this.DispositionAction)
        {
            case DispositionAction::ReturnToCust:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionForReturnToCust_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return to customer disposition type is not allowed for Brazil, and this method will check for this code.
    /// </summary>
    /// <returns>
    /// If the value is Return to customer the value is false, otherwise true.
    /// </returns>
    public boolean validateActionForReturnToCust_BR()
    {
        boolean returnValue = true;

        if (BrazilParameters::isEnabled())
        {
            if (this.DispositionAction == DispositionAction::ReturnToCust)
            {
                returnValue = checkFailed("@GLS50903");
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(ReturnDispositionCode, DispositionAction))
        {
            if (BrazilParameters::isEnabled() && this.DispositionAction == DispositionAction::ReturnToCust)
            {
                ret = checkFailed("@GLS50903");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDispositionAction_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return to customer disposition type is verified, given the Diposition code.
    /// </summary>
    /// <param name="_returnDispositionCodeId">
    /// The Id of Disposition code for which a record will be retrieved and dispostion action will be verified.
    /// </param>
    /// <returns>
    /// Returns the value by calling method validateActionForReturnToCust_BR.
    /// </returns>
    public static boolean checkDispositionAction_BR(ReturnDispositionCodeId _returnDispositionCodeId)
    {
        return ReturnDispositionCode::find(_returnDispositionCodeId).validateActionForReturnToCust_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ReturnDispositionCodeId _dispositionCodeId)
    {
        return _dispositionCodeId && (select RecId from returnDispositionCode where returnDispositionCode.DispositionCodeId == _dispositionCodeId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ReturnDispositionCode find(ReturnDispositionCodeId _dispositionCodeId, boolean _forupdate = false)
    {
        ReturnDispositionCode dispositionTable = null;

        if (_dispositionCodeId)
        {
            dispositionTable.selectForUpdate(_forupdate);

            select firstonly dispositionTable where dispositionTable.DispositionCodeId == _dispositionCodeId;
        }

        return dispositionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static ReturnDispositionCode findRecId(recId      _recId,
                                           boolean    update = false)
    {
        ReturnDispositionCode  returnDispositionCode;

        returnDispositionCode.selectForUpdate(update);

        if (_recId)
        {
            select firstonly returnDispositionCode
                   where returnDispositionCode.RecId == _recId;
        }

        return returnDispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDispositionActionsNoCreditOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a set containing the base AX disposition actions excluding Credit Only.  These same actions are used with return orders and this method was created
    ///    in order to centralize this list to help with maintenance and future mods.
    /// </summary>
    /// <returns>
    ///    a Set containing the disposition code actions excluding Credit Only.
    /// </returns>
    public static Set getDispositionActionsNoCreditOnly()
    {
        Set     setDispositionActions = new Set(Types::Enum);

        setDispositionActions.add(DispositionAction::Credit);
        setDispositionActions.add(DispositionAction::ReturnToCust);
        setDispositionActions.add(DispositionAction::Scrap);
        setDispositionActions.add(DispositionAction::ReplaceCredit);
        setDispositionActions.add(DispositionAction::ReplaceScrap);

        return setDispositionActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDispositionCode</Name>
				<Source><![CDATA[
    static void lookupDispositionCode(FormStringControl _ctrl, str _filterStr, Set _dispositionAction)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbdsDispositionCode;
        SetEnumerator           setEnumerator;

        sysTableLookup = SysTableLookup::newParameters(tablenum(ReturnDispositionCode),_ctrl);

        query = new Query();
        qbdsDispositionCode = query.addDataSource(tablenum(ReturnDispositionCode));

        sysTableLookup.addLookupfield(fieldnum(ReturnDispositionCode,DispositionCodeId));
        sysTableLookup.addLookupfield(fieldnum(ReturnDispositionCode,DispositionAction));
        sysTableLookup.addLookupfield(fieldnum(ReturnDispositionCode,Description));

        qbdsDispositionCode.addRange(fieldnum(ReturnDispositionCode,DispositionCodeId)).value(_filterStr+'*');

        if (_dispositionAction)
        {
            setEnumerator = _dispositionAction.getEnumerator();
            while (setEnumerator.moveNext())
            {
                qbdsDispositionCode.addRange(fieldnum(ReturnDispositionCode,DispositionAction)).value(queryValue(setEnumerator.current()));
            }
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDispositionCodeNoCreditOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all disposition codes where the action is 'No Credit.'
    /// </summary>
    /// <param name="_ctrl">
    /// The form control that will display the lookup results.
    /// </param>
    public static void lookupDispositionCodeNoCreditOnly(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbdsDispositionCode;

        sysTableLookup = SysTableLookup::newParameters(tableNum(ReturnDispositionCode),_ctrl);

        query = new Query();
        qbdsDispositionCode = query.addDataSource(tableNum(ReturnDispositionCode));

        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode,DispositionCodeId));
        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode,DispositionAction));
        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode,Description));

        qbdsDispositionCode.addRange(fieldNum(ReturnDispositionCode, DispositionAction)).value(SysQuery::valueNot(DispositionAction::CreditOnly));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS120344";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ReturnItem</ConfigurationKey>
	<DeveloperDocumentation>@SYS122880</DeveloperDocumentation>
	<FormRef>ReturnDispositionCode</FormRef>
	<Label>@SYS104049</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>DispositionCodeId</TitleField1>
	<TitleField2>DispositionAction</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>DispositionCodeIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>DispositionCodeIdx</PrimaryIndex>
	<ReplacementKey>DispositionCodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SalesLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>SalesLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispositionAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispositionAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispositionAction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispositionCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispositionAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DispositionAction</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DispositionAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispositionCodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DispositionCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DispositionCodeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>