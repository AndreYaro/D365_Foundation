<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AdvancedLedgerEntryLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustAmountWithProject</Name>
				<Source><![CDATA[
    /// <summary>
///     Handles the debit and credit amount value on the basis of cost price and quantity.
/// </summary>
public void adjustAmountWithProject()
{
    AmountCur   amountCur;

    if (this.ProjId)
    {
        if (this.Quantity)
        {
            if (this.CostPrice
                && ProjCategory::find(this.ProjCategoryId).CategoryType != ProjCategoryType::Revenue)
            {
                amountCur = CurrencyExchangeHelper::amount(this.CostPrice * this.Quantity);
            }
            else
            {
                if (this.AmountCurDebit)
                {
                    amountCur = this.Quantity < 0 ? this.AmountCurDebit : - abs(this.AmountCurDebit);
                }
                else
                {
                   amountCur = this.Quantity < 0 ? abs(this.AmountCurCredit) : -this.AmountCurCredit;
                }
            }
        }
        else
        {
            if (this.AmountCurDebit)
            {
                amountCur = this.AmountCurDebit;
            }
            else
            {
                amountCur = this.AmountCurCredit > 0 ? -this.AmountCurCredit : abs(this.AmountCurCredit);
            }
        }

        if (amountCur < 0)
        {
            this.AmountCurCredit = abs(amountCur);
            this.AmountCurDebit = 0;
        }
        else
        {
            this.AmountCurDebit = amountCur;
            this.AmountCurCredit = 0;
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>advancedLedgerEntryHeaderRecord</Name>
				<Source><![CDATA[
    /// <summary>
///     Retrieves the advanced ledger entry header for this line.
/// </summary>
/// <returns>
///     The <c>AdvancedLedgerEntryHeader</c> record that is the parent for this line.
/// </returns>
public AdvancedLedgerEntryHeader advancedLedgerEntryHeaderRecord()
{
    return AdvancedLedgerEntryHeader::find(this.AdvancedLedgerEntryHeader);
}

]]></Source>
			</Method>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    /// <summary>
///     Checks budget for the advanced ledger entry line.
/// </summary>
/// <param name="_checkAdvancedLedgerEntryBudgetControlStatus">
///     A boolean to indicate whether or not the budgetary control setting for performing budget check on advanced ledger entry line save should be considered
///     in determining whether budgetary control is required for advanced ledger entry.
/// </param>
public void checkBudget(boolean _checkAdvancedLedgerEntryBudgetControlStatus = true)
{
    AdvancedLedgerEntryManager advancedLedgerEntryManager = AdvancedLedgerEntryManager::newForAdvancedLedgerEntryLine(this, this.orig());

    advancedLedgerEntryManager.checkBudgetLine(_checkAdvancedLedgerEntryBudgetControlStatus);
}

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
///     Defaults a value for a field.
/// </summary>
/// <param name="_fieldId">
///     The field ID that corresponds to the field being defaulted.
/// </param>
/// <param name="_axAdvancedLedgerEntryLine">
///     The instance of the <c>AxAdvancedLedgerEntryLine</c> class that is associated with the defaulted
///     field; optional.
/// </param>
/// <remarks>
///     Passed when called through the AIF framework.
/// </remarks>
public void defaultField(
    FieldId                   _fieldId,
    AxAdvancedLedgerEntryLine _axAdvancedLedgerEntryLine = null)
{
    AxAdvancedLedgerEntryLine axAdvancedLedgerEntryLine;

    axAdvancedLedgerEntryLine = _axAdvancedLedgerEntryLine;

    if (_axAdvancedLedgerEntryLine == null)
    {
        axAdvancedLedgerEntryLine = AxAdvancedLedgerEntryLine::construct();
        axAdvancedLedgerEntryLine.advancedLedgerEntryLine(this);
    }

    AdvancedLedgerEntryLineUtil::construct(axAdvancedLedgerEntryLine).defaultField(_fieldId);
}

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
///     Defaults the field values for a <c>AdvancedLedgerEntryLine</c> record.
/// </summary>
/// <param name="_axAdvancedLedgerEntryLine">
///     The instance of the <c>AxAdvancedLedgerEntryLine</c> class that is associated with the defaulted row;
///     optional.
/// </param>
/// <remarks>
///     Passed when called through the AIF framework.
/// </remarks>
public void defaultRow(AxAdvancedLedgerEntryLine _axAdvancedLedgerEntryLine = null)
{
    AxAdvancedLedgerEntryLine axAdvancedLedgerEntryLine;

    axAdvancedLedgerEntryLine = _axAdvancedLedgerEntryLine;

    if (_axAdvancedLedgerEntryLine == null)
    {
        axAdvancedLedgerEntryLine = AxAdvancedLedgerEntryLine::construct();
        axAdvancedLedgerEntryLine.advancedLedgerEntryLine(this);
    }

    AdvancedLedgerEntryLineUtil::construct(axAdvancedLedgerEntryLine).defaultRow();
}

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prevents deletion of a line if the document has been submitted to workflow.
    /// </summary>
    public void delete()
    {
        if (this.advancedLedgerEntryHeaderRecord().WorkFlowStatus == AdvancedLedgerEntryWFApprovalStatus::Submitted)
            throw error(strFmt("@SPS1602", this.advancedLedgerEntryHeaderRecord().TransactionNumber));

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(this.SourceDocumentLine, ProjFundingLimitTrackingAction::Release);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the budget check result value for the record.
/// </summary>
/// <returns>
/// The budget check result value for the record.
/// </returns>
public display BudgetCheckResult displayBudgetCheckResult()
{
	return this.getBudgetCheckResult();
}

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
///     Calculates the <c>BudgetCheckResult</c> value for the given <c>AdvancedLedgerEntryLine</c> record.
/// </summary>
/// <returns>
///     A <c>BudgetCheckResult</c> value which is calculated using the query.
/// </returns>
public BudgetCheckResult getBudgetCheckResult()
{
    return AdvancedLedgerEntryBudgetControl::getBudgetSourceLineBudgetCheckResult(this);
}

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
///     Submits the advanced ledger entry source document line implementation for processing in an accounting process.
/// </summary>
/// <remarks>
///     This method has been overridden to create source document line record corresponding to the advanced ledger entry source document.
/// </remarks>
public void insert()
{
    this.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(this.LedgerDimension);
    this.SourceDocumentLine = 0;
    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

    super();
}

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
///     Handles the <c>AdvancedLedgerEntryLine</c> field modifications.
/// </summary>
/// <param name="_fieldId">
///     ID of the table field which is modified.
/// </param>
public void modifiedField(FieldId _fieldId)
{
    super (_fieldId);

    switch (_fieldId)
    {
        case fieldNum(AdvancedLedgerEntryLine, AmountCurDebit):
            if (this.AmountCurDebit != 0)
            {
                this.AmountCurCredit = 0;
                this.setProjectQuantityForAmount();
                this.setProjectCostPrice();
                this.setProjectSalesPrice();
                this.adjustAmountWithProject();
            }
            break;

        case fieldNum(AdvancedLedgerEntryLine, AmountCurCredit):
            if (this.AmountCurCredit != 0)
            {
                this.AmountCurDebit = 0;
                this.setProjectQuantityForAmount();
                this.setProjectCostPrice();
                this.setProjectSalesPrice();
                this.adjustAmountWithProject();
            }
            break;

        case fieldNum(AdvancedLedgerEntryLine, ProjId):
            this.setProjectAttributes();
            this.setProjInvoiceLineLedgerDimension();
            this.setProjectQuantity();
            this.setProjectCostPrice();
            this.setProjectSalesPrice();
            this.resetDistributionsForBlankProject();
            break;

        case fieldNum(AdvancedLedgerEntryLine, ProjCategoryId),
             fieldNum(AdvancedLedgerEntryLine, ProjFundingSource):
            this.setProjInvoiceLineLedgerDimension();
            this.setProjectQuantityForAmount();
            this.setProjectCostPrice();
            this.setProjectSalesPrice();
            this.adjustAmountWithProject();
            this.setProjCategoryTaxItemGroupId();
            break;

        case fieldNum(AdvancedLedgerEntryLine, Quantity):
            this.setProjectCostPrice();
            this.setProjectSalesPrice();
            this.adjustAmountWithProject();
            break;

        case fieldNum(AdvancedLedgerEntryLine, Resource):
            this.setResourceCategory();
            this.setProjectSalesPrice();
            break;

        case fieldNum(AdvancedLedgerEntryLine, ResourceCategory):
            this.setProjectSalesPrice();
            break;

        case fieldNum(AdvancedLedgerEntryLine, TransactionCurrency):
            this.setProjectSalesPrice();
            break;

        case fieldNum(AdvancedLedgerEntryLine, CostPrice):
            this.setProjectQuantity();
            this.adjustAmountWithProject();
            this.setProjectSalesPrice();
            break;
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>resetDistributionsForBlankProject</Name>
				<Source><![CDATA[
/// <summary>
/// If the project ID field is not set the accounting distributions for the line are reset.
/// </summary>
protected void resetDistributionsForBlankProject()
{
    ProjTable projTable = ProjTable::find(this.ProjId);

    if (!projTable.RecId)
    {
        // reset accounting distributions
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets the value of Accounting Date field of the <c>AdvancedLedgerEntryHeader</c> record.
/// </summary>
/// <returns>
///     The <c>AccountingDate</c> value.
/// </returns>
public AccountingDate parmExchangeRateDate()
{
    return this.advancedLedgerEntryHeaderRecord().AccountingDate;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets the parent source document line.
/// </summary>
/// <returns>
///     Always returns null.
/// </returns>
public SourceDocumentLine parmParentSourceDocumentLine()
{
    return null;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets the source document line enum name.
/// </summary>
/// <returns>
///     Always returns SourceDocumentLine_AdvancedLedgerEntry.
/// </returns>
public EnumName parmSourceDocLineTypeEnumName()
{
    return enumStr(SourceDocumentLine_AdvancedLedgerEntry);
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets the source document line type enum value.
/// </summary>
/// <returns>
///     Always returns SourceDocumentLine_AdvancedLedgerEntry::AdvancedLedgerEntryLine.
/// </returns>
public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
{
    return SourceDocumentLine_AdvancedLedgerEntry::AdvancedLedgerEntryLine;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets a source document header record associated with the parent advanced ledger entry header.
/// </summary>
/// <returns>
///     A <c>SourceDocumentHeader</c> buffer.
/// </returns>
public SourceDocumentHeader parmSourceDocumentHeader()
{
    SourceDocumentHeader sourceDocumentHeader;

    sourceDocumentHeader = SourceDocumentHeader::find(this.advancedLedgerEntryHeaderRecord().SourceDocumentHeader);

    return sourceDocumentHeader;
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjectAttributes</Name>
				<Source><![CDATA[
    /// <summary>
///     Initializes the project related fields
/// </summary>
public void setProjectAttributes()
{
    CustAccount custAccount;
    ProjTable   projTable;

    if (this.ProjId)
    {
        // default the category id from the parameter setup if empty
        projTable   = ProjTable::find(this.ProjId);
        custAccount = projTable.CustAccount;

        this.ProjSalesCurrency  = projTable.currencyId();
        this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(projTable.ProjId, this.ProjCategoryId);
        this.ProjTaxGroupId     = projTable.TaxGroupId;
    }
    else
    {
        this.ProjSalesCurrency  = '';
        this.ProjLinePropertyId = '';
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjectCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
///     Sets the Cost Price of project on the basis of the <c>ProjCategory</c>, <c>Quantity</c>, <c>AmountCurDebit</c> and <c>AmountCurCredit</c> fields.
/// </summary>
public void setProjectCostPrice()
{
    AmountCur debitCredit;

    if (this.ProjId != '' && ProjCategory::find(this.ProjCategoryId).CategoryType != ProjCategoryType::Revenue)
    {
        if (this.Quantity)
        {
            debitCredit = this.AmountCurDebit ? this.AmountCurDebit : this.AmountCurCredit;
            this.CostPrice = abs(CurrencyExchangeHelper::price(debitCredit / this.Quantity));
        }
    }
    else
    {
        this.CostPrice = 0;
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjectQuantity</Name>
				<Source><![CDATA[
    /// <summary>
///     Sets the Hours/Quantity of project on the basis of the <c>ProjId</c>, <c>AmountCurDebit</c> and <c>AmountCurCredit</c> fields.
/// </summary>
public void setProjectQuantity()
{
    AmountCurDebit debitCredit;

    if (this.Quantity == 0)
    {
        if (this.ProjId)
        {
            if (ProjCategory::find(this.ProjCategoryId).CategoryType != ProjCategoryType::Revenue)
            {
                this.Quantity = (this.AmountCurCredit > 0 || this.AmountCurDebit < 0) ? -1 : 1;
            }
            else
            {
                this.Quantity = (this.AmountCurCredit > 0 || this.AmountCurDebit < 0) ? 1 : -1;
            }
        }
        else
        {
            this.Quantity = 0;
        }
    }
    else if (this.Quantity
                    && ProjCategory::find(this.ProjCategoryId).CategoryType != ProjCategoryType::Revenue
                        && this.CostPrice)
    {
        debitCredit = this.AmountCurDebit ? this.AmountCurDebit : this.AmountCurCredit;

        if (debitCredit != 0)
        {
            this.Quantity = CurrencyExchangeHelper::amount(debitCredit / this.CostPrice);
        }

        if (this.AmountCurCredit && this.CostPrice < 0)
        {
            this.Quantity = abs(this.Quantity);
        }
        else if (this.CostPrice > 0 && this.AmountCurCredit)
        {
            this.Quantity = -this.Quantity;
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjectQuantityForAmount</Name>
				<Source><![CDATA[
    /// <summary>
///     Sets the Hours/Quantity of project on the basis of <c>AmountCurDebit</c> and <c>AmountCurCredit</c> fields.
/// </summary>
public void setProjectQuantityForAmount()
{
    boolean  isProjectCategoryTypeFee;

    isProjectCategoryTypeFee = ProjCategory::find(this.ProjCategoryId).CategoryType == ProjCategoryType::Revenue;

    if (!this.Quantity)
    {
        this.setProjectQuantity();
    }
    else
    {
        if (this.AmountCurDebit < 0 || this.AmountCurCredit > 0)
        {
            this.Quantity = isProjectCategoryTypeFee ? abs(this.Quantity) : -abs(this.Quantity);
        }

        if (this.AmountCurDebit > 0 || this.AmountCurCredit < 0)
        {
            this.Quantity = isProjectCategoryTypeFee ? -abs(this.Quantity) : abs(this.Quantity);
        }

        if (this.AmountCurDebit == 0 && this.AmountCurCredit == 0)
        {
            this.Quantity = abs(this.Quantity);
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjectSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
///     Sets the Sales Price of project.
/// </summary>
public void setProjectSalesPrice()
{
    boolean priceFound = false;
    TransDate aleTransDate = this.advancedLedgerEntryHeaderRecord().AccountingDate;
    ProjPriceParameters priceParams;

    switch (ProjCategory::find(this.ProjCategoryId).CategoryType)
    {
        case ProjCategoryType::Hour:
            priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                this.ProjId,
                this.Resource,
                this.ProjCategoryId,
                this.ProjLinePropertyId,
                this.CostPrice,
                this.TransactionCurrency,
                aleTransDate,
                '',
                '',
                '',
                this.ResourceCategory);
            [this.SalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);
            break;

        case ProjCategoryType::Cost:
            priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
				this.ProjId,
                this.Resource,
                this.ProjCategoryId,
                this.CostPrice,
                this.TransactionCurrency,
                this.ProjSalesCurrency,
                aleTransDate);
            [this.SalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
			break;

        case ProjCategoryType::Revenue:
            this.SalesPrice = 0;
            priceFound = true;
            break;
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
///     Sets the Project funding source on the basis of the <c>ProjId</c> field.
/// </summary>
/// <returns>
///     Record Id of the <c>ProjFundingSource</c>.
/// </returns>
public RefRecId setProjFundingSource()
{
    ProjFundingSource   projFundingSource;
    ProjTable           projTable;
    ProjInvoiceTable    projInvoiceTable;

    projTable = ProjTable::find(this.ProjId);
    projInvoiceTable = projTable.projInvoice();

    if (ProjFundingSource::numberOfFundingSources(projInvoiceTable.ProjInvoiceProjId) > 1)
    {
        this.ProjFundingSource = 0;
    }
    else
    {
        select ContractId, RecId from projFundingSource
            where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId;

        this.ProjFundingSource = projFundingSource.RecId;
    }

    return this.ProjFundingSource;
}

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if project details exist.
    /// </summary>
    /// <returns>
    ///     true if project details exist; otherwise, false.
    /// </returns>
    public boolean checkProjectDetails()
    {
        ProjTable projTable = ProjTable::find(this.ProjId);
        ProjCategory projCategory = ProjCategory::find(this.ProjCategoryId);

        return projTable.RecId && projCategory.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceLineLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the ledger dimension of project on the basis of <c>ProjId</c>, <c>ProjCategoryId</c> and <c>ProjFundingSource</c> fields.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The value for the default dimension.
    /// </param>
    public void setProjInvoiceLineLedgerDimension(DimensionDefault _defaultDimension = 0)
    {
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount ledgerDimensionAccount;
        ProjFundingSource projFundingSource;

        ProjTable projTable = ProjTable::find(this.ProjId);
        ProjCategory projCategory = ProjCategory::find(this.ProjCategoryId);

        if (this.checkProjectDetails())
        {
            projFundingSource = ProjFundingSource::find(this.ProjFundingSource);

            defaultLedgerDimension = ProjectPosting::getProjectLedgerDimension(
                                        projTable,
                                        projCategory,
                                        projFundingSource,
                                        null);

            MainAccountLegalEntity mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(
                MainAccount::getMainAccountRecIdFromLedgerDimension(defaultLedgerDimension), CompanyInfo::current());

            if (mainAccountLegalEntity.DefaultDimension)
            {
                this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
                    mainAccountLegalEntity.DefaultDimension,
                    projTable.DefaultDimension);
            }
            else
            {
                this.DefaultDimension = projTable.DefaultDimension;
            }

            // if editing is not allowed then we can only replace empty financial dimension attribute value.
            if (LedgerParameters::find().AllowALELedgerDimensionEdit_PSN == NoYes::No && _defaultDimension)
            {
                this.DefaultDimension = AdvancedLedgerEntryLine::replaceEmptyFinancialDimension(projTable.DefaultDimension, _defaultDimension);
            }
            else if (LedgerParameters::find().AllowALELedgerDimensionEdit_PSN == NoYes::Yes && _defaultDimension)
            {
                this.DefaultDimension = _defaultDimension;
            }

            ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.DefaultDimension);

            if (ledgerDimensionAccount)
            {
                this.LedgerDimension = ledgerDimensionAccount;
            }
        }
        else
        {
            if (LedgerParameters::find().AllowALELedgerDimensionEdit_PSN == NoYes::Yes && _defaultDimension)
            {
                this.DefaultDimension = _defaultDimension;
            }
            else
            {
                this.DefaultDimension = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
{
    date accountingDate;

    accountingDate = this.advancedLedgerEntryHeaderRecord().AccountingDate;
    this.ResourceCategory = ResourceFacade::getResourceCategory(this.Resource,
        (accountingDate ? accountingDate :DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
}

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets the accounting status of the source document line corresponding to this line.
/// </summary>
/// <returns>
///     A <c>SourceDocumentLineAccountingStatus</c> value.
/// </returns>
display SourceDocumentLineAccountingStatus sourceDocumentLineStatus()
{
    SourceDocumentLine sourceDocumentLine;

    sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

    return sourceDocumentLine.AccountingStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
///     Overridden to submit the source document line implementation.
/// </summary>
public void update()
{
    this.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(this.LedgerDimension);

    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

    super();
}

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
{
    boolean isValid = true;
    AdvancedLedgerEntryHeader advancedLedgerEntryHeader;

    isValid = super();

    if (isValid)
    {
        advancedLedgerEntryHeader = this.advancedLedgerEntryHeaderRecord();
        // Only Draft transactions can be deleted.
        isValid = AdvancedLedgerEntryManager::checkTransactionStatusForDelete(advancedLedgerEntryHeader.TransactionStatus, advancedLedgerEntryHeader.TransactionNumber);
    }

    return isValid;
}

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
///     Handles the advanced ledger entry line field validations.
/// </summary>
/// <param name="_fieldIdToCheck">
///     ID of the table field which is being validated.
/// </param>
/// <param name="_axAdvancedLedgerEntryLine">
///     An <c>AxAdvancedLedgerEntryLine</c> instance to be used for validation.
/// </param>
/// <returns>
///     true if the field value is valid; otherwise, false.
/// </returns>
public boolean validateField(
    FieldId                   _fieldIdToCheck,
    AxAdvancedLedgerEntryLine _axAdvancedLedgerEntryLine = null)
{
    boolean                     isValid;
    AxAdvancedLedgerEntryLine   axAdvancedLedgerEntryLine;

    axAdvancedLedgerEntryLine = _axAdvancedLedgerEntryLine;

    if (axAdvancedLedgerEntryLine == null)
    {
        axAdvancedLedgerEntryLine = new AxAdvancedLedgerEntryLine();
        axAdvancedLedgerEntryLine.advancedLedgerEntryLine(this);
    }

    isValid = AdvancedLedgerEntryLineUtil::construct(axAdvancedLedgerEntryLine).validateField(_fieldIdToCheck);

    isValid = isValid && super(_fieldIdToCheck);

    return isValid;
}

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectFromProjGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
///     Handles the project group validations associated with the project.
/// </summary>
/// <returns>
///     true if the field value is valid; otherwise, false.
/// </returns>
    public boolean validateProjectFromProjGroupSetup()
    {
        boolean isValid = true;

        ProjTable projTable = ProjTable::find(this.ProjId);

        ProjLedgerStatus emplLedgerStatus = ProjRevRecHelper::getEmplLedgerStatus(projTable);
        NoYes revenueTransTurnover = ProjRevRecHelper::postWIPFeeForProject(projTable);

        if (emplLedgerStatus == ProjLedgerStatus::Never || emplLedgerStatus == ProjLedgerStatus::None)
        {
            this.ProjId = "";
            isValid = AifFault::checkFailedLogFault("@SPS2392");
        }

        if (revenueTransTurnover == NoYes::Yes)
        {
            this.ProjId = "";
            isValid = AifFault::checkFailedLogFault("@SPS2391");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
{
    boolean isValid = true;
    ProjValCheckTrans projValCheckTrans;

    isValid = super();

    if (isValid && (this.ProjId || this.ProjCategoryId))
    {
        if (!this.ProjId)
        {
            isValid = AifFault::checkFailedLogFault(strFmt("@SPS1378", fieldPName(AdvancedLedgerEntryLine, ProjId)));
        }

        if (isValid && !this.ProjCategoryId)
        {
            isValid = AifFault::checkFailedLogFault(strFmt("@SPS1378", fieldPName(AdvancedLedgerEntryLine, ProjCategoryId)));
        }

        if (isValid && !this.CostPrice
                        && ProjCategory::find(this.ProjCategoryId).CategoryType != ProjCategoryType::Revenue)
        {
            isValid = AifFault::checkFailedLogFault(strFmt("@SPS1378", fieldPName(AdvancedLedgerEntryLine, CostPrice)));
        }

        if (isValid)
        {
            projValCheckTrans = new ProjValCheckTrans();
            isValid = ProjTable::exist(this.ProjId);
            isValid = isValid && ProjTable::find(this.ProjId).status().validateWriteCreateJournal();
            isValid = isValid && projValCheckTrans.validateMandatory(this);
            isValid = isValid && AdvancedLedgerEntryManager::checkProjCategoryId(this.ProjCategoryId);
            isValid = isValid && AdvancedLedgerEntryManager::checkProjFundingSource(this.ProjId, this.ProjFundingSource);
        }
    }

    if (isValid && this.AmountCurCredit && this.AmountCurDebit)
    {
        isValid = AifFault::checkFailedLogFault("@SYS93729");
    }

    if (isValid && this.AmountCurCredit == 0 && this.AmountCurDebit == 0)
    {
        isValid = AifFault::checkFailedLogFault("@SPS1639");
    }

    return isValid;
}

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
{
    boolean doesExist = true;

    if (!AdvancedLedgerEntryLine::exist(_recId))
    {
        doesExist = checkFailed(strFmt(AdvancedLedgerEntryLine::txtNotExist(), _recId));
    }

    return doesExist;
}

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
///     Determines whether the specified record in the <c>AdvancedLedgerEntryLine</c> table exists.
/// </summary>
/// <param name="_recId">
///     The record ID of the <c>AdvancedLedgerEntryLine</c> table to check for existence.
/// </param>
/// <returns>
///     true if the specified record exists; otherwise, false.
/// </returns>
public static boolean exist(RecId _recId)
{
    AdvancedLedgerEntryLine advancedLedgerEntryLine;

    select firstonly RecId from advancedLedgerEntryLine
        where advancedLedgerEntryLine.RecId == _recId;

    return advancedLedgerEntryLine.RecId != 0;
}

]]></Source>
			</Method>
			<Method>
				<Name>existByALEHeaderLineNum</Name>
				<Source><![CDATA[
    /// <summary>
///     Determines whether the specified record in the <c>AdvancedLedgerEntryLine</c> table exists.
/// </summary>
/// <param name="_advancedLedgerEntryHeader">
///     The record ID of the <c>AdvancedLedgerEntryHeader</c> table to check for existence.
/// </param>
/// <param name="_lineNumber">
///     The current line number of the <c>AdvancedLedgerEntryLine</c> table to check for existence.
/// </param>
/// <returns>
///     true if the specified record exists; otherwise, false.
/// </returns>
public static boolean existByALEHeaderLineNum(
    RefRecId    _advancedLedgerEntryHeader,
    LineNum     _lineNumber)
{
    AdvancedLedgerEntryLine advancedLedgerEntryLine;

    select firstonly RecId from advancedLedgerEntryLine
        where advancedLedgerEntryLine.AdvancedLedgerEntryHeader == _advancedLedgerEntryHeader
           && advancedLedgerEntryLine.LineNumber == _lineNumber;

    return advancedLedgerEntryLine.RecId != 0;
}

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
///     Finds the specified record in the <c>AdvancedLedgerEntryLine</c> table.
/// </summary>
/// <param name="_recId">
///     The record ID of the <c>AdvancedLedgerEntryLine</c> table to find.
/// </param>
/// <param name="_forUpdate">
///     A boolean value that indicates whether to read the record for update; optional.
/// </param>
/// <param name="_concurrencyModel">
///     The concurrency model option to be used when reading the record; optional.
/// </param>
/// <returns>
///     A record of the <c>AdvancedLedgerEntryLine</c> table if found; otherwise, an empty buffer.
/// </returns>
public static AdvancedLedgerEntryLine find(
    RecId             _recId,
    boolean           _forUpdate = false,
    ConcurrencyModel  _concurrencyModel = ConcurrencyModel::Auto)
{
    AdvancedLedgerEntryLine advancedLedgerEntryLine;

    if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
    {
        advancedLedgerEntryLine.concurrencyModel(_concurrencyModel);
    }

    if (_recId)
    {
        advancedLedgerEntryLine.selectForUpdate(_forUpdate);

        select firstonly advancedLedgerEntryLine
            where advancedLedgerEntryLine.RecId == _recId;
    }

    return advancedLedgerEntryLine;
}

]]></Source>
			</Method>
			<Method>
				<Name>findByALEHeaderLineNum</Name>
				<Source><![CDATA[
    /// <summary>
///     Finds the specified record in the <c>AdvancedLedgerEntryLine</c> table.
/// </summary>
/// <param name="_advancedLedgerEntryHeader">
///     The record ID of the advanced ledger entry header for the line.
/// </param>
/// <param name="_lineNumber">
///     The line number of the record to find.
/// </param>
/// <param name="_forupdate">
///     A Boolean value that indicates whether to read the record for update; optional.
/// </param>
/// <param name="_concurrencyModel">
///     The concurrency model option to use when the record is read; optional.
/// </param>
/// <returns>
///     A record in the <c>AdvancedLedgerEntryLine</c> table; otherwise, an empty record.
/// </returns>
public static AdvancedLedgerEntryLine findByALEHeaderLineNum(
    RefRecId            _advancedLedgerEntryHeader,
    LineNum             _lineNumber,
    boolean             _forupdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
{
    AdvancedLedgerEntryLine advancedLedgerEntryLine;

    advancedLedgerEntryLine.selectForUpdate(_forupdate);
    if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
    {
        advancedLedgerEntryLine.concurrencyModel(_concurrencyModel);
    }

    select firstonly advancedLedgerEntryLine
        where advancedLedgerEntryLine.AdvancedLedgerEntryHeader == _advancedLedgerEntryHeader
           && advancedLedgerEntryLine.LineNumber == _lineNumber;

    return advancedLedgerEntryLine;
}

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
///     Finds an advanced ledger entry line using a source document line.
/// </summary>
/// <param name="_sourceDocumentLine">
///     A record ID of the source document line.
/// </param>
/// <returns>
///     An <c>AdvancedLedgerEntryLine</c> buffer.
/// </returns>
public static AdvancedLedgerEntryLine findBySourceDocumentLine(RefRecId _sourceDocumentLine)
{
    AdvancedLedgerEntryLine advancedLedgerEntryLine;

    select firstonly advancedLedgerEntryLine
        where advancedLedgerEntryLine.SourceDocumentLine == _sourceDocumentLine;

    return advancedLedgerEntryLine;
}

]]></Source>
			</Method>
			<Method>
				<Name>replaceEmptyFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
///    Replace the financial dimension segment only, if an empty segment found in _toDefaultDimension financial dimension.
/// </summary>
/// <param name="_toDefaultDimension">
///    The default dimension record ID which is defaulted from the project.
/// </param>
/// <param name="_fromDefaultDimension">
///    The default dimension record ID, send from the web service.
/// </param>
/// <returns>
///    New financial dimension record ID, which is formed after updating the _toDefaultDimension financial dimension record.
/// </returns>
public static DimensionDefault replaceEmptyFinancialDimension(DimensionDefault _toDefaultDimension, DimensionDefault _fromDefaultDimension)
{
    return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_toDefaultDimension, _fromDefaultDimension);
}

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
{
    return "@SPS1280";
}

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategoryTaxItemGroupId</Name>
				<Source><![CDATA[
/// <summary>
/// Sets the <c>TaxItemGroupId</c> field of the line table if the <c>ProjectCategory</c> field is set.
/// </summary>
public void setProjCategoryTaxItemGroupId()
{    
    if (this.ProjCategoryId)    
    {
        this.ProjTaxItemGroupId = ProjCategory::find(this.projCategoryId).TaxItemGroupId;        
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>AdvancedLedgerEntry</ConfigurationKey>
	<DeveloperDocumentation>@SPS2507</DeveloperDocumentation>
	<FormRef>AdvancedLedgerEntry</FormRef>
	<Label>@SPS1213</Label>
	<SingularLabel>@SPS1174</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TransactionCurrency</TitleField1>
	<TitleField2>TransactionText</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdvanceLedgerEntryLine</Name>
			<Label>@SPS1213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurDebit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurCredit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SPS1244</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SPS1246</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS119345</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SPS1245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvancedLedgerEntryHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurCredit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurCredit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurDebit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<Label>@SPS1244</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1229</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@SPS1240</Label>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@SYS41087</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Label>@SPS1239</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS84</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SPS1241</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SPS1204</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SPS1245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AdvancedLedgerEntryTransText</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>AdvancedLedgerEntryWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AdvancedLedgerEntryLineNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AdvancedLedgerEntryHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>smmActivitiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AdvancedLedgerEntryHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AdvancedLedgerEntryHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AdvancedLedgerEntryHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvancedLedgerEntryHeader</Name>
					<Field>AdvancedLedgerEntryHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TransactionCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinition</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinition</Name>
					<Field>JournalizingDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjSalesCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ProjSalesCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLederEntryLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjActivityNumber</Name>
					<SourceEDT>smmActivityId</SourceEDT>
					<Field>ProjActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AdvancedLedgerEntryLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>