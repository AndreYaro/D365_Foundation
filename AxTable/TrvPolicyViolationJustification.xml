<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvPolicyViolationJustification</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvPolicyViolationJustification extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (strLTrim(this.Justification) != '')
        {
            if (!this.JustificationId)
            {
                this.JustificationId = newGuid();
            }

            super();

            this.insertItemizedLinesJustification();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (strLTrim(this.Justification) != '')
        {
            super();

            this.updateItemizedLinesJustification();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>justificationExists</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines whether the record has any justification.
    /// </summary>
    /// <param name="_violatingRecId">
    /// The record ID.
    /// </param>
    /// <param name="_actionType">
    /// An action type, optional.
    /// </param>
    /// <param name="_justificationType">
    /// The type of the justification. Specifies which table the record ID corresponds to.
    /// </param>
    /// <returns>
    /// true if a justification exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method checks whether a <c>TrvPolicyViolationJustification</c> record exists for the specified record.
    /// </remarks>
    public static boolean justificationExists(recId _violatingRecId, TrvWorkflowAction _actionType = TrvWorkflowAction::Submit,
        TrvPolicyViolationJustificationTypeEnum _justificationType = TrvPolicyViolationJustificationTypeEnum::TrvExpLine)
    {
        TrvPolicyViolationJustification justification;

        select firstOnly recId
            from justification
            where justification.ViolatingRecord == _violatingRecId
                && justification.ViolationJustificationType == _justificationType
                && justification.Action == _actionType;

        return justification.recId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the policy violation justification given the violating record ID, workflow action type,
    /// and justification type.
    /// </summary>
    /// <param name="_violatingRecId">
    /// The <c>RecId</c> of the violating line.
    /// </param>
    /// <param name="_actionType">
    /// The action type.
    /// </param>
    /// <param name="_justificationType">
    /// The type of the justification. Specifies which table the record ID corresponds to.
    /// </param>
    /// <param name="_forupdate">
    /// Boolean value indicating whether the returned buffer is to be selected for update.
    /// </param>
    /// <returns>
    /// The policy violation justification record.
    /// </returns>
    public static TrvPolicyViolationJustification find(recId _violatingRecId, TrvWorkflowAction _actionType,
        TrvPolicyViolationJustificationTypeEnum _justificationType, boolean _forupdate = false)
    {
        TrvPolicyViolationJustification justification;

        if (_violatingRecId)
        {
            justification.selectForUpdate(_forupdate);

            select firstOnly justification
                where justification.ViolatingRecord == _violatingRecId
                    && justification.ViolationJustificationType == _justificationType
                    && justification.Action == _actionType;
        }

        return justification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record if it doesn't exist yet; otherwise updates it.
    /// </summary>
    /// <param name="_justification">
    /// The <c>TrvPolicyViolationJustification</c> record to insert or update.
    /// </param>
    /// <remarks>
    /// When updating, only updates the <c>Justification</c> field, and only if the justification has actually changed.
    /// </remarks>
    public static void insertOrUpdate(TrvPolicyViolationJustification _justification)
    {
        TrvPolicyViolationJustification existingJustification = TrvPolicyViolationJustification::find(
            _justification.ViolatingRecord, _justification.Action, _justification.ViolationJustificationType, true);

        if (existingJustification.RecId == 0)
        {
            // Doesn't already exist; so insert the record we were passed
            _justification.insert();
        }
        // The record does exist, so update the one we found...but only do so if the justification has actually changed
        else if (_justification.Justification != existingJustification.Justification)
        {
            existingJustification.Justification = _justification.Justification;

            ttsBegin;
            existingJustification.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemizedLinesJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record for Itemized lines when we insert Itemzied header Justification, if it doesn't exist yet.
    /// </summary>
    public void insertItemizedLinesJustification()
    {
        TrvExpTrans trvExpTrans;
        TrvPolicyViolationJustification trvPolicyViolationJustification, trvPolicyViolationJustificationLocal;
        TrvPolicyViolationsCache trvPolicyViolationsCache;
  
        while select RecId from trvExpTrans
                where trvExpTrans.ParentRecId == this.ViolatingRecord
            join trvPolicyViolationsCache
                where trvPolicyViolationsCache.Line == trvExpTrans.RecId
            notexists join trvPolicyViolationJustificationLocal
                where trvPolicyViolationJustificationLocal.ViolatingRecord == trvExpTrans.RecId
                    && trvPolicyViolationJustificationLocal.Action == TrvWorkflowAction::Approve
        {
            trvPolicyViolationJustification.ViolatingRecord = trvExpTrans.RecId;
            trvPolicyViolationJustification.JustificationId = newGuid();
            trvPolicyViolationJustification.Action = this.Action;
            trvPolicyViolationJustification.Justification = this.Justification;
            trvPolicyViolationJustification.ViolationJustificationType = this.ViolationJustificationType;
            trvPolicyViolationJustification.JustifyingWorker = this.JustifyingWorker;
            trvPolicyViolationJustification.insert();
        }
                
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemizedLinesJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the record for Itemized lines when we update Itemzied header Justification, if it exist.
    /// </summary>
    public void updateItemizedLinesJustification()
    {
        TrvExpTrans trvExpTrans;
        TrvPolicyViolationJustification trvPolicyViolationJustification;
        TrvPolicyViolationsCache trvPolicyViolationsCache;
        TrvSubmitterJustification justification = this.Justification;

        update_recordset trvPolicyViolationJustification 
        setting Justification = justification                   
        join trvExpTrans
        where trvExpTrans.ParentRecId == this.ViolatingRecord
            && trvPolicyViolationJustification.ViolatingRecord == trvExpTrans.RecId
            && trvPolicyViolationJustification.Justification != this.Justification
        join trvPolicyViolationsCache
            where trvPolicyViolationsCache.Line == trvExpTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS319471</DeveloperDocumentation>
	<Label>@SYS302366</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>JustifyingWorker</TitleField1>
	<TitleField2>Action</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Expense</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViolatingRecord</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViolationJustificationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JustifyingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JustifyingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViolationJustificationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViolationJustificationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JustifyingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS38585</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViolatingRecord</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>JustificationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Action</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvWorkflowAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Justification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvSubmitterJustification</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JustifyingWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ViolatingRecord</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViolationJustificationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS302367</Label>
			<EnumType>TrvPolicyViolationJustificationTypeEnum</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JustificationId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JustificationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvJustifyingWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JustifyingWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvJustificationViolationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ViolatingRecord</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ViolationJustificationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JustifyingWorker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Action</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvHcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Justifies</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JustifiedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JustifyingWorker</Name>
					<Field>JustifyingWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>