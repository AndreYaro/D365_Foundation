<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResSize</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResSize extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResSize</c> table exists.
    /// </summary>
    /// <param name="_size">
    ///    The ID of the <c>EcoResSize</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(RefRecId _size)
    {
        if (!_size)
        {
            return false;
        }

        return (select firstonly RecId from ecoResSize
                    where ecoResSize.RecId == _size).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResSize</c> table.
    /// </summary>
    /// <param name="_size">
    ///    The ID of the <c>EcoResSize</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResSize</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResSize find(RefRecId _size, boolean _forUpdate = false)
    {
        EcoResSize ecoResSize;

        ecoResSize.selectForUpdate(_forUpdate);

        if (0 != _size)
        {
            select firstonly ecoResSize
                where ecoResSize.RecId == _size;
        }
        return ecoResSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResSize</c> table.
    /// </summary>
    /// <param name="_name">
    ///    A value of the <c>Name</c> field of the <c>EcoResSize</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResSize</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResSize findByName(EcoResSizeName _name, boolean _forUpdate = false)
    {
        EcoResSize  ecoResSize;

        ecoResSize.selectForUpdate(_forUpdate);

        if (_name)
        {
            select firstonly ecoResSize
                where ecoResSize.Name == _name;
        }

        return ecoResSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Go to Main Table form option to Name lookup.
    /// </summary>
    /// <param name="_name">
    /// A <c>EcoResSizeName</c> value for which to look up.
    /// </param>
    /// <remarks>
    /// This method opens the relevant Size form.
    /// </remarks>
    public static void jumpRef(EcoResSizeName _name)
    {
        Args args = new Args();

        args.lookupField(fieldNum(EcoResSize, Name));
        args.lookupValue(_name);

        new MenuFunction(menuitemDisplayStr(RetailEcoResSize), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string with the label of the <c>EcoResSizeName</c> extended data type.
    /// </summary>
    /// <returns>
    ///    A string that contains the label.
    /// </returns>
    static FieldLabel label()
    {
        return new SysDictType(extendedTypeNum(EcoResSizeName)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form to select a size for a product.
    /// </summary>
    /// <param name="_formControl">
    /// A control for which a lookup is to be performed.
    /// </param>
    /// <param name="_useLookupValue">
    /// True if filter should be used in the lookup; otherwise false.
    /// </param>
    /// <remarks>
    /// The sizes that are displayed are chosen from the sizes that are assigned to the product master.
    /// </remarks>
    public static void lookupName(FormControl _formControl, boolean _useLookupValue = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource  = query.addDataSource(tableNum(EcoResSize));
        SysTableLookup          tableLookup = SysTableLookup::newParameters(tablenum(EcoResSize), _formControl);
        tableLookup.addLookupfield(fieldnum(EcoResSize, Name));
        tableLookup.parmQuery(query);
        tableLookup.parmUseLookupValue(_useLookupValue);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductVariantSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form to select a size for a product variant.
    /// </summary>
    /// <param name="_formControl">
    /// A control for which a lookup is performed.
    /// </param>
    /// <param name="_productMaster">
    /// A value that indicates which generic product model that sizes assigned to is displayed in the
    /// lookup form.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The ID of a record in the <c>EcoResProductDimensionAttribute</c> table that indicates the dimension
    /// attribute for which sizes are displayed in the lookup form.
    /// </param>
    /// <returns>
    /// A selected <c>EcoResSize</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The sizes that are displayed are chosen from the sizes that are assigned to the product master.
    /// </remarks>
    public static EcoResSize lookupProductVariantSize(
        FormControl             _formControl,
        RefRecId                _productMaster,
        RefRecId                _productDimensionAttribute)
    {
        SysReferenceTableLookup sysReferenceTableLookup;
        Query                   query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(EcoResSize), _formControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResSize, Name));

        query = new Query(queryStr(EcoResProductVariantSizeLookup));
        query.dataSourceTable(tableNum(EcoResProductMasterSize)).rangeField(fieldNum(EcoResProductMasterSize, SizeProductMaster)).value(queryValue(_productMaster));
        query.dataSourceTable(tableNum(EcoResProductMasterSize)).rangeField(fieldNum(EcoResProductMasterSize, SizeProductDimensionAttribute)).value(queryValue(_productDimensionAttribute));

        sysReferenceTableLookup.parmQuery(query);
        return sysReferenceTableLookup.performFormLookup() as EcoResSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertTmpStr</Name>
				<Source><![CDATA[
    private static TmpMCRStr mcrInsertTmpStr()
    {
        TmpMCRStr                               tmpMCRStr;
        EcoResSize                              ecoResSize;
        EcoResProductMasterSize                 ecoResProductMasterSize;
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        insert_recordset tmpMCRStr (String15, Str60, Str1260)
            select  firstOnly Name from  ecoResSize
                join ecoResProductMasterSize
                    where ecoResProductMasterSize.Size == ecoResSize.RecId
                join Name, Description from productMasterDimValueTranslation
                    where productMasterDimValueTranslation.ProductMasterDimensionValue == ecoResProductMasterSize.RecId
                    && productMasterDimValueTranslation.LanguageId == SystemParameters::getSystemLanguageId();

        select firstonly tmpMCRStr; //needed due to insert_Recordset to set pointer at top.
        return tmpMCRStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertTmpStrByProduct</Name>
				<Source><![CDATA[
    private static TmpMCRStr mcrInsertTmpStrByProduct(RefRecId _productId)
    {
        TmpMCRStr                               tmpMCRStr;
        EcoResSize                              ecoResSize;
        EcoResProductMasterSize                 ecoResProductMasterSize;
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        if (_productId)
        {
            insert_recordset tmpMCRStr (String15, Str60, Str1260)
                select Name from  ecoResSize
                    join ecoResProductMasterSize
                        where ecoResProductMasterSize.SizeProductMaster == _productId
                        && ecoResSize.RecId == ecoResProductMasterSize.Size
                    outer join Name, Description from productMasterDimValueTranslation
                        where productMasterDimValueTranslation.ProductMasterDimensionValue == ecoResProductMasterSize.RecId
                        && productMasterDimValueTranslation.LanguageId == SystemParameters::getSystemLanguageId();
        }

        select firstonly tmpMCRStr; //needed due to insert_Recordset to set pointer at top.
        return tmpMCRStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Displays a lookup form to use to choose a size.
    /// </summary>
    /// <param name="_formControl">
    ///  A control for which a lookup is performed.
    /// </param>
    /// <remarks>
    ///  The sizes that are displayed are chosen from the sizes that are assigned to the product master.
    /// </remarks>
    public static void mcrlookupAll(FormControl    _formControl)
    {
        SysTableLookup                      sysTableLookup = SysTableLookup::newParameters(tableNum(TmpMCRStr), _formControl);
        TmpMCRStr                           tmpMCRStr;

        tmpMCRStr = EcoResSize::mcrInsertTmpStr();

        sysTableLookup.parmTmpBuffer(tmpMCRStr);
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, String15));
        sysTableLookup.setLabel("@SYS28127");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str60));
        sysTableLookup.setLabel("@SYS25589");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str1260));
        sysTableLookup.setLabel("@SYS127587");

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form to use to choose a size.
    /// </summary>
    /// <param name="_formControl">
    /// A control for which a lookup is performed.
    /// </param>
    /// <param name="_itemGroupId">
    /// A value that specifies group ID of sizes to add to lookup form.
    /// </param>
    /// <remarks>
    /// The size that are displayed are chosen from the sizes that are assigned to the product master.
    /// </remarks>
    public static void mcrlookupByGroup(
        FormControl         _formControl,
        ItemGroupId         _itemGroupId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(EcoResSize), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbdsSize;
        QueryBuildDataSource    qbdsSizeMaster;
        QueryBuildDataSource    qbdsProductMaster;
        QueryBuildDataSource    qbdsInventTable;
        QueryBuildRange         queryBuildRange;

        QueryBuildDataSource    qbdsInventItemGroupItem;

        qbdsSize           =    query.addDataSource(tableNum(EcoResSize));
        qbdsSizeMaster     =    qbdsSize.addDataSource(tableNum(EcoResProductMasterSize));
        qbdsProductMaster  =    qbdsSizeMaster.addDataSource(tableNum(EcoResProductMaster));
        qbdsInventTable    =    qbdsProductMaster.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(EcoResProductMaster, RecId), fieldNum(InventTable, Product));

        qbdsInventItemGroupItem     = qbdsInventTable.addDataSource(tableNum(InventItemGroupItem));
        queryBuildRange             = qbdsInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));
        queryBuildRange.value(_itemGroupId);

        sysTableLookup.addLookupfield(fieldNum(EcoResSize, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByItemOrProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up Size by item or product (no need for item if product is supplied).
    /// </summary>
    /// <param name="_formControl">
    /// A control for which a lookup is performed.
    /// </param>
    /// <param name="_itemId">
    /// An item for which the sizes are being looked up.
    /// </param>
    /// <param name="_product">
    /// A product for which the sizes are being looked up.
    /// </param>
    /// <remarks>
    /// If a product <c>RefRecId</c> is supplied, the Item will get disregarded.
    /// </remarks>
    public static void mcrlookupByItemOrProduct(
        FormControl             _formControl,
        ItemId                  _itemId,
        RefRecId                _product = 0)
    {
        SysTableLookup                      sysTableLookup = SysTableLookup::newParameters(tableNum(TmpMCRStr), _formControl);
        RefRecId                            productID = _product;
        TmpMCRStr                           tmpMCRStr;

        if (productID == 0 && _itemId)
        {
            productID = EcoResProductMaster::find(InventTable::find(_itemId).Product).RecId;
        }

        tmpMCRStr = EcoResSize::mcrInsertTmpStrByProduct(productID);

        sysTableLookup.parmTmpBuffer(tmpMCRStr);
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, String15));
        sysTableLookup.setLabel("@SYS28127");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str60));
        sysTableLookup.setLabel("@SYS25589");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str1260));
        sysTableLookup.setLabel("@SYS127587");

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProductVariantSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EcoResSize</c> table.
    /// </summary>
    /// <param name="_sizeName">
    ///    The name of a size to find.
    /// </param>
    /// <param name="_productMaster">
    ///    The ID of an <c>EcoResProductMaster</c> record that identifies a product master for which a size
    ///    might have been assigned.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of an <c>EcoResProductDimensionAttribute</c> record.
    /// </param>
    /// <returns>
    ///    An <c>EcoResSize</c> buffer.
    /// </returns>
    /// <remarks>
    ///    The function is used to resolve a size name to the ID of an <c>EcoResSize</c> record.The resolution
    ///    is made based on the sizes assigned to the product master.
    /// </remarks>
    static EcoResSize resolveProductVariantSize(
        EcoResSizeName     _sizeName,
        RefRecId            _productMaster,
        RefRecId            _productDimensionAttribute)
    {
        EcoResSize              ecoResSize;
        EcoResProductMasterSize ecoResProductMasterSize;

        select firstonly ecoResSize
            where ecoResSize.Name == _sizeName
        exists join ecoResProductMasterSize
            where ecoResProductMasterSize.Size                          == ecoResSize.RecId
               && ecoResProductMasterSize.SizeProductMaster             == _productMaster
               && ecoResProductMasterSize.SizeProductDimensionAttribute == _productDimensionAttribute;

        if (!ecoResSize.RecId)
        {
            // Assigning null to selectedRecord does not cause the kernel to receive a true NULL value, but rather
            // just an empty record. Return NULL directly so the kernel knows that the intent is to not clear the
            // selected value.
            return null;
        }

        return ecoResSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        System.Text.RegularExpressions.Match regExMatch;
        str expectedFormat = '^#[a-fA-F0-9]{6}$';

        ret = super(_fieldIdToCheck);

            
        if (this.HexCode)
        {
            regExMatch = System.Text.RegularExpressions.Regex::Match(this.HexCode, expectedFormat);

            ret = regExMatch.get_Success();

            if (!ret)
            {
                ret = checkFailed("@Retail:RetailHexCodeValidationError");
            }

        }

        return ret;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>EcoResProductSize</ConfigurationKey>
	<DeveloperDocumentation>@SYS133208</DeveloperDocumentation>
	<FormRef>EcoResProductMasterDimensionPerCompany</FormRef>
	<Label>@SYS73745</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailSizeGroupTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RetailSizeGroupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductMasterSize</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductMasterSize</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductVariantSize</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductVariantSize</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisplayOrder</Name>
			<Label>@Retail:RetailGlobalDisplayOrder</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResSizeName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>RetailGlobalDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Url</Name>
			<ExtendedDataType>MediaUrl</ExtendedDataType>
			<FeatureClass>RetailColorSwatchFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HexCode</Name>
			<ExtendedDataType>RetailHexCode</ExtendedDataType>
			<FeatureClass>RetailColorSwatchFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefinerGroup</Name>
			<ExtendedDataType>RetailRefinerGroup</ExtendedDataType>
			<FeatureClass>RetailColorSwatchFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>