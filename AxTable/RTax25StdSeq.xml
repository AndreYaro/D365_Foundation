<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25StdSeq</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25StdSeq extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SeqNum = (select maxof(SeqNum) from rTax25StdSeq).SeqNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        RTax25StdExpressionLine expressionLine;
        super();

        if (this.ChannelType == RTax25StdChannelType::DeferralsFactor)
        {
            update_recordset expressionLine
                setting RefIdFrom = this.ChannelId
                where expressionLine.SeqNum   == this.SeqNum &&
                      expressionLine.LineType == RTax25StdLineType::DeferralsWritingOff;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean                 ret;
        container               deferralsGroup;
        RDeferralsGroup         rDefferalsGroup;
        int                     i;
        Set                     deferralsBook;
        RTax25StdExpressionLine expressionLine;

        ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(RTax25StdSeq, ChannelId) :
                    if (this.ChannelType == RTax25StdChannelType::Deferral)
                    {
                        deferralsGroup = RTax25RegParametersEngine::parameters2Con(this.ChannelId);
                        deferralsBook  = new Set(Types::String);
                        for (i = 1; i <= conLen(deferralsGroup); i++)
                        {
                            rDefferalsGroup  = RDeferralsGroup::find(conPeek(deferralsGroup, i));
                            if (rDefferalsGroup.RecId)
                            {
                                if (deferralsBook.in(rDefferalsGroup.DeferralsBookId))
                                {
                                    ret = checkFailed(strFmt("@GLS107191", rDefferalsGroup.DeferralsBookId));
                                    break;
                                }
                                deferralsBook.add(rDefferalsGroup.DeferralsBookId);
                            }
                            else
                            {
                                ret = checkFailed(strFmt("@GLS104241", conPeek(deferralsGroup, i)));
                                break;
                            }
                        }
                        if (ret)
                        {
                            while select RefIdFrom from expressionLine
                                where expressionLine.SeqNum   == this.SeqNum &&
                                      expressionLine.LineType == RTax25StdLineType::DeferralsWritingOff
                            {
                                if (! conFind(deferralsGroup, expressionLine.RefIdFrom))
                                    warning(strFmt("@GLS107220", expressionLine.RefIdFrom, RTax25ProfitTable::find(expressionLine.rTax25ProfitTable).ProfitId, expressionLine.LineNum));
                            }
                        }
                    }
                    else if (this.ChannelType == RTax25StdChannelType::DeferralsFactor &&
                        ! RDeferralsGroup::find(this.ChannelId).RecId)
                    {
                        ret = checkFailed(strFmt("@GLS104241", this.ChannelId));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && ! this.RecId &&
            (select firstonly RecId from rTax25StdSeq
                 where rTax25StdSeq.SeqNum == this.SeqNum &&
                       rTax25StdSeq.RecId  != this.RecId).RecId != 0)
        {
            ret = checkFailed(strFmt("@SYS153389", tablePName(RTax25StdSeq), this.SeqNum));
        }

        if (ret && this.ChannelType == RTax25StdChannelType::DeferralsFactor &&
            (select firstonly RecId from rTax25StdSeq
                where rTax25StdSeq.ChannelType == RTax25StdChannelType::DeferralsFactor &&
                      rTax25StdSeq.ChannelId   == this.ChannelId                        &&
                      rTax25StdSeq.RecId       != this.RecId).RecId != 0)
            ret = checkFailed(strFmt("@GLS107226", this.ChannelId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RTax25StdSeqNum _seqNum)
    {
        if (! RTax25StdSeq::exist(_seqNum))
            return checkFailed(strFmt(RTax25StdSeq::txtNotExist(), _seqNum));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RTax25StdSeqNum _seqNum)
    {
        return _seqNum && (select firstonly RecId from rTax25StdSeq
                              where rTax25StdSeq.SeqNum == _seqNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25StdSeq find(RTax25StdSeqNum _seqNum,
                                    boolean         _forupdate = false)
    {
        RTax25StdSeq seqTable;

        seqTable.selectForUpdate(_forupdate);

        if (_seqNum)
        {
            select firstonly seqTable
                index hint SeqNumIdx
                where seqTable.SeqNum == _seqNum;
        }
        return seqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStdDeferralsGroupId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupStdDeferralsGroupId(FormStringControl    _ctrl,
                                                 RTax25StdChannelType _channelType)
    {
        Query                   query = new Query();
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RDeferralsGroup), _ctrl);
        QueryBuildDataSource    qbdS;

        qbdS = query.addDataSource(tableNum(RDeferralsGroup));

        _ctrl.replaceOnLookup(false);
        if (_channelType == RTax25StdChannelType::DeferralsFactor)
            _ctrl.replaceOnLookup(true);

        sysTableLookup.addLookupfield(fieldNum(RDeferralsGroup, DeferralsGroupId), true);
        sysTableLookup.addLookupfield(fieldNum(RDeferralsGroup, Name));
        sysTableLookup.addLookupfield(fieldNum(RDeferralsGroup, DeferralsBookId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStdRegisterId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupStdRegisterId(FormStringControl _ctrl)
    {
        Query                   query = new Query();
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RTax25RegisterTable), _ctrl);
        RTax25RegisterTable     registerTable;
        Range                   idListRange;

        while select RegisterId, RegisterType
            from registerTable
        {
            if (SysDictClass::isSuperclass(classIdGet(RTax25RegType::construct(registerTable.RegisterType)),
                                           classNum(RTax25RegType_Std)))
            {
                idListRange += (idListRange ? "@SYS35667" : "") + registerTable.RegisterId;
            }
        }

        if (! idListRange)
        {
            idListRange = SysQuery::valueEmptyString();
        }
        query.addDataSource(tableNum(RTax25RegisterTable)).addRange(fieldNum(RTax25RegisterTable, RegisterId)).value(idListRange);

        sysTableLookup.addLookupfield(fieldNum(RTax25RegisterTable, RegisterId), true);
        sysTableLookup.addLookupfield(fieldNum(RTax25RegisterTable, RegisterName));
        sysTableLookup.addLookupfield(fieldNum(RTax25RegisterTable, RegisterType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupARStdRegisterId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on the standard sequence tax registers for the Accounts Receivable module.
    /// </summary>
    /// <param name = "_ctrl">The conrol the lookup is built on.</param>
    public static void lookupARStdRegisterId(FormStringControl _ctrl)
    {
        Query                   query = new Query();
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RTax25RegisterTable), _ctrl);
        RTax25RegisterTable     registerTable;
        Range                   idListRange;

        while select RegisterId, RegisterType
        from registerTable
        {
            if (RTax25RegType::construct(registerTable.RegisterType).isARStdType())
            {
                idListRange += (idListRange ? "@SYS35667" : "") + registerTable.RegisterId;
            }
        }

        if (! idListRange)
        {
            idListRange = SysQuery::valueEmptyString();
        }
        query.addDataSource(tableNum(RTax25RegisterTable)).addRange(fieldNum(RTax25RegisterTable, RegisterId)).value(idListRange);

        sysTableLookup.addLookupfield(fieldNum(RTax25RegisterTable, RegisterId), true);
        sysTableLookup.addLookupfield(fieldNum(RTax25RegisterTable, RegisterName));
        sysTableLookup.addLookupfield(fieldNum(RTax25RegisterTable, RegisterType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@GLS104134";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RTax25StdSeq</FormRef>
	<Label>@GLS104128</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SeqNum</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>SeqNumIdx</ClusteredIndex>
	<Modules>RTax25</Modules>
	<PrimaryIndex>SeqNumIdx</PrimaryIndex>
	<ReplacementKey>SeqNumIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RTax25StdExpressionTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RTax25StdExpressionTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Channel</Name>
			<Label>@GLS104099</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChannelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChannelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25StdChannelId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChannelType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RTax25StdChannelType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>RTax25StdModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25StdSeqNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SeqNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SeqNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DeferralsGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RDeferralsGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DeferralsGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RTax25StdSeq</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>RTax25StdModuleType::Deferrals</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ChannelType</Name>
					<Field>ChannelType</Field>
					<ValueStr>RTax25StdChannelType::Deferral</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChannelId</Name>
					<Field>ChannelId</Field>
					<RelatedField>DeferralsGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RegisterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25RegisterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RegisterTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RTax25StdSeq</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>RTax25StdModuleType::ProfitTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ChannelType</Name>
					<Field>ChannelType</Field>
					<ValueStr>RTax25StdChannelType::Register</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChannelId</Name>
					<Field>ChannelId</Field>
					<RelatedField>RegisterId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>