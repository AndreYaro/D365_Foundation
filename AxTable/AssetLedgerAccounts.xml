<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetLedgerAccounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetLedgerAccounts extends common
{
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        LedgerCache::clearScope(LedgerCacheScope::FixedAssetMainAccDimensionListProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.BookId          = AssetParameters::find().BookIdDefault;
        this.AccountCode     = TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        LedgerCache::clearScope(LedgerCacheScope::FixedAssetMainAccDimensionListProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        LedgerCache::clearScope(LedgerCacheScope::FixedAssetMainAccDimensionListProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId p1)
    {
        boolean ret;

        ret = super(p1);

        switch (p1)
        {
            case fieldnum(AssetLedgerAccounts, LedgerDimension):
                ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.LedgerDimension));
                break;

            case fieldnum(AssetLedgerAccounts, OffsetLedgerDimension):
                ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.OffsetLedgerDimension));
                break;

            case fieldnum(AssetLedgerAccounts, AccountRelation):
                ret = this.validateAccountRelation();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountRelation</Name>
				<Source><![CDATA[
    private boolean validateAccountRelation()
    {
        boolean returnValue = true;

        if ((this.AccountCode== TableGroupAll::Table
            || this.AccountCode== TableGroupAll::GroupId)
            && !this.AccountRelation)
        {
            returnValue = checkFailed(strFmt("@SYS110217", "@FixedAssets:AccountRelation"));
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllocationRule</Name>
				<Source><![CDATA[
    private boolean validateAllocationRule()
    {
        boolean ret = true;

        if (this.AssetAllocationRule &&
            !this.allowUseAllocationRules())
        {
            ret = checkFailed(strFmt("@FixedAssets:FA_AssetLedgerAccountsTable_WarningMessage_AllocationRulesValidation", this.TransType, this.DataAreaId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBookCanPostToGeneralLedger</Name>
				<Source><![CDATA[
    private boolean validateBookCanPostToGeneralLedger()
    {
        return AssetBookTable::validateCanPostToGeneralLedger(this.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUseAllocationRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Shows whether allocation rule could be initialized or not.
    /// </summary>
    /// <returns>
    ///   True in case if allocation rules can be used with current record, otherwise false.
    /// </returns>
    public boolean allowUseAllocationRules()
    {
        boolean ret = false;

        if ((this.TransType == AssetTransType::Depreciation ||
             this.TransType == AssetTransType::ExtraordinaryDepreciation) &&
             SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoJP], this.DataAreaId))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateAccountRelation();
        ret = ret && this.validateAllocationRule();
        ret = ret && this.validateBookCanPostToGeneralLedger();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension to which to post for a transaction with a fixed assets main account.
    /// </summary>
    /// <param name="_assetId">
    ///    The fixed asset.
    /// </param>
    /// <param name="_assetBookId">
    ///    The asset book of the fixed asset.
    /// </param>
    /// <param name="_assetTransType">
    ///    The transaction type of the fixed asset.
    /// </param>
    /// <param name="_assetPostingProfile">
    ///    The posting profile to use; optional.
    /// </param>
    /// <param name="_assetDocumentType_JP">
    ///    The japan asset document type; optional.
    /// </param>
    /// <param name="_assetDocumentEntryRecId">
    ///    The japan asset document entry recid; optional.
    /// </param>
    /// <returns>
    ///  The ledger dimension to which to post a transaction with a fixed assets main account.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A posting profile is not specified and no default posting profile is in the <c>AssetParameters</c>
    ///    table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A posting profile is not specified and no default posting profile is in the <c>AssetParameters</c>
    ///    table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A posting profile exists, but no ledger dimension is found for the given transaction type.
    /// </exception>
    public static LedgerDimensionDefaultAccount assetLedgerDimension(
        AssetId               _assetId,
        AssetBookId           _assetBookId,
        AssetTransType        _assetTransType,
        AssetPostingProfile   _assetPostingProfile     = '',
        AssetDocumentType_JP  _assetDocumentType_JP    =  AssetDocumentType_JP::None,
        AssetDocumentRecId_JP _assetDocumentEntryRecId = 0
    )
    {
        LedgerDimensionDefaultAccount   assetledgerDimension;
        AssetPostingProfile             assetPostingProfile  = _assetPostingProfile;

        // For French derogatory deprecation value models, we don't need to
        // find the posting accounts.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR])
            && AssetBook::find(_assetId, _assetBookId).IsDerogatoryBook_FR)
        {
            return assetledgerDimension;
        }

        if (assetPostingProfile)
        {
            assetledgerDimension = AssetLedgerAccounts::findAssetLedgerDimension(_assetId,
                                                                                _assetBookId,
                                                                                _assetTransType,
                                                                                true,
                                                                                assetPostingProfile
                                                                                // <GJP>
                                                                                ,_assetDocumentType_JP
                                                                                // </GJP>
                                                                                ,''
                                                                                // <GJP>
                                                                                ,_assetDocumentEntryRecId
                                                                                // </GJP>
                                                                                );
        }

        if (!assetledgerDimension)
        {
            AssetPostingProfile defaultPostingProfile = AssetParameters::find().postingProfile();
            if (defaultPostingProfile)
            {
                if (defaultPostingProfile != assetPostingProfile)
                {
                    assetledgerDimension = AssetLedgerAccounts::findAssetLedgerDimension(_assetId,
                                                                                        _assetBookId,
                                                                                        _assetTransType,
                                                                                        true,
                                                                                        defaultPostingProfile
                                                                                        // <GJP>
                                                                                        ,_assetDocumentType_JP
                                                                                        // </GJP>
                                                                                        ,''
                                                                                        // <GJP>
                                                                                        ,_assetDocumentEntryRecId
                                                                                        // </GJP>
                                                                                        );
                }
            }
            else
            {
                throw error("@SYS67359");
            }
        }

        if (!assetledgerDimension)
        {
            // <GJP>
            if (_assetDocumentType_JP != AssetDocumentType_JP::None)
            {
                throw error(strFmt("@FixedAssets:FA_MessageValidation_AccountDoesNotExistForDocumentTypeBook", _assetDocumentType_JP, _assetBookId, _assetId));
            }
            else
            {
            // </GJP>
                throw error(strFmt("@FixedAssets:FA_MessageError_AccountDoesNotExistForTransactionType",_assetTransType,_assetBookId,_assetId));
            // <GJP>
            }
            // </GJP>
        }
        return assetledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension to which to post for a transaction with a fixed assets offset
    ///    account.
    /// </summary>
    /// <param name="_assetId">
    ///    The fixed asset.
    /// </param>
    /// <param name="_assetBookId">
    ///    The asset book of the fixed asset.
    /// </param>
    /// <param name="_assetTransType">
    ///    The transaction type of the fixed asset.
    /// </param>
    /// <param name="_assetPostingProfile">
    ///    The posting profile to use; optional.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates whether errors may be thrown; optional.
    /// </param>
    /// <param name="_assetDocumentType_JP">
    ///    The japan asset document type; optional.
    /// </param>
    /// <param name="_assetDocumentEntryRecId">
    ///    The japan asset document entry recid; optional.
    /// </param>
    /// <returns>
    ///    The ledger dimension to which to post a transaction with a fixed assets offset account.
    /// </returns>
    /// <remarks>
    ///    If a posting profile is not specified, the default profile in the <c>AssetParameters</c> table will
    ///    be used.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A posting profile is not specified and no default posting profile is in the <c>AssetParameters</c>
    ///    table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A posting profile is not specified and no default posting profile is in the <c>AssetParameters</c>
    ///    table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A posting profile exists, but no ledger dimension is found for the given transaction type.
    /// </exception>
    public static LedgerDimensionDefaultAccount assetOffsetLedgerDimension(
        AssetId               _assetId,
        AssetBookId           _assetBookId,
        AssetTransType        _assetTransType,
        AssetPostingProfile   _assetPostingProfile     = '',
        boolean               _throwError              = false,
        AssetDocumentType_JP  _assetDocumentType_JP    =  AssetDocumentType_JP::None,
        AssetDocumentRecId_JP _assetDocumentEntryRecId = 0
    )
    {
        LedgerDimensionDefaultAccount assetOffsetLedgerDimension;
        AssetPostingProfile defaultAssetPostingProfile = AssetParameters::find().PostingProfile;

        if (!_assetPostingProfile && !defaultAssetPostingProfile && _throwError)
        {
            // The posting profile was not specified by the caller, no default exists and the
            // caller has requested that an error be thrown.
            throw error("@SYS67359");
        }

        if (_assetPostingProfile)
        {
            // Try to find the ledger dimension for the specified posting profile.
            assetOffsetLedgerDimension = AssetLedgerAccounts::findAssetLedgerDimension(_assetId,
                                                                                    _assetBookId,
                                                                                    _assetTransType,
                                                                                    false,
                                                                                    _assetPostingProfile
                                                                                    // <GJP>
                                                                                    ,_assetDocumentType_JP
                                                                                    // </GJP>
                                                                                    ,''
                                                                                    // <GJP>
                                                                                    ,_assetDocumentEntryRecId
                                                                                    // </GJP>
                                                                                    );
        }

        if (!assetOffsetLedgerDimension && defaultAssetPostingProfile)
        {
            // The ledger dimension wasn't found for the specified posting profile, so attempt to find it using
            // the default posting profile.
            if (defaultAssetPostingProfile != _assetPostingProfile)
            {
                assetOffsetLedgerDimension = AssetLedgerAccounts::findAssetLedgerDimension(_assetId,
                                                                                        _assetBookId,
                                                                                        _assetTransType,
                                                                                        false,
                                                                                        defaultAssetPostingProfile
                                                                                        // <GJP>
                                                                                        ,_assetDocumentType_JP
                                                                                        // </GJP>
                                                                                        ,''
                                                                                        // <GJP>
                                                                                        ,_assetDocumentEntryRecId
                                                                                        // </GJP>
                                                                                        );
            }
        }

        if (!assetOffsetLedgerDimension && _throwError)
        {
            // <GJP>
            if (_assetDocumentType_JP != AssetDocumentType_JP::None)
            {
                throw error(strFmt("@FixedAssets:FA_MessageValidation_OffsetAccountDoesNotExistForDocumentTypeBook", _assetDocumentType_JP, _assetBookId, _assetId));
            }
            else
            {
            // </GJP>
                // The ledger dimension wasn't found for either the specified or default posting profiles and the
                // caller has requested that an error be thrown.
                throw error(strFmt("@FixedAssets:FA_MessageValidation_OffsetAccountDoesNotExistForTransactionTypeBook",_assetTransType,_assetBookId,_assetId));
            // <GJP>
            }
            // </GJP>
        }

        return assetOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        AssetBookId         _bookId,
        AssetPostingProfile _postingProfile,
        AssetTransType      _transType,
        AssetTableGroupAll  _accountCode,
        AssetId             _accountRelation)
    {
        boolean ret = true;

        if (!AssetLedgerAccounts::exist(_bookId, _postingProfile, _transType, _accountCode, _accountRelation))
        {
            ret = checkFailed(AssetLedgerAccounts::txtNotExist());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        AssetBookId         _bookId,
        AssetPostingProfile _postingProfile,
        AssetTransType      _transType,
        AssetTableGroupAll  _accountCode,
        AssetId             _accountRelation)
    {
        boolean found;

        found = (select firstonly
                    RecId
                 from
                    assetLedgerAccounts
                 where
                    assetLedgerAccounts.BookId == _bookId &&
                    assetLedgerAccounts.PostingProfile == _postingProfile &&
                    assetLedgerAccounts.TransType == _transType &&
                    assetLedgerAccounts.AccountCode == _accountCode &&
                    assetLedgerAccounts.AccountRelation == _accountRelation).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetLedgerAccounts find(
        AssetBookId         _bookId,
        AssetPostingProfile _postingProfile,
        AssetTransType      _transType,
        AssetTableGroupAll  _accountCode,
        AssetId             _accountRelation,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetLedgerAccounts assetLedgerAccounts;

        assetLedgerAccounts.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetLedgerAccounts.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetLedgerAccounts
        where
            assetLedgerAccounts.BookId == _bookId &&
            assetLedgerAccounts.PostingProfile == _postingProfile &&
            assetLedgerAccounts.TransType == _transType &&
            assetLedgerAccounts.AccountCode == _accountCode &&
            assetLedgerAccounts.AccountRelation == _accountRelation;

        return assetLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for posting a transaction with a fixed assets offset.
    /// </summary>
    /// <param name="_assetId">
    /// The fixed asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The asset book of the fixed asset.
    /// </param>
    /// <param name="_assetTransType">
    /// The transaction type of the fixed asset.
    /// </param>
    /// <param name="_returnledgerDimension">
    /// A Boolean value that indicates whether to post the transaction to the <c>LedgerDimension</c> table
    /// or the <c>OffsetLedgerDimension</c> table.
    /// </param>
    /// <param name="_assetPostingProfile">
    /// The posting profile to use; optional.
    /// </param>
    /// <param name="_assetDocumentType_JP">
    ///    The japan asset document type; optional.
    /// </param>
    /// <param name="_assetGroupId">
    ///    The asset group id; optional.
    /// </param>
    /// <param name="_assetDocumentEntryRecId">
    ///    The japan asset document entry recid; optional.
    /// </param>
    /// <returns>
    /// The ledger dimension or the <c>OffsetLedgerDimension</c> to which to post the transaction.
    /// </returns>
    /// <remarks>
    /// This method makes up to three attempts to find the ledger dimension or the
    /// <c>OffsetLedgerDimension</c>. If the <paramref name="_assetPosingProfile" /> parameter is not
    /// specified, the method will use the profile that is stored in the <c>AssetParameters</c> table.
    /// </remarks>
    public static LedgerDimensionDefaultAccount findAssetLedgerDimension(
        AssetId               _assetId,
        AssetBookId           _assetBookId,
        AssetTransType        _assetTransType,
        boolean               _returnledgerDimension  = true,
        AssetPostingProfile   _assetPostingProfile    = AssetParameters::find().PostingProfile
        ,AssetDocumentType_JP _assetDocumentType_JP   = AssetDocumentType_JP::None
        ,AssetGroupId          _assetGroupId = ''
        ,AssetDocumentRecId_JP _assetDocumentEntryRecId  = 0
        )
    {
        AssetPostingProfile  assetPostingProfile = _assetPostingProfile;
        AssetLedgerAccounts  assetLedgerAccounts;
        // <GJP>
        AssetDocumentTransType_JP     assetDocumentTransType_JP = AssetDocumentTransType_JP::None;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        // </GJP>
        // ----------------------------------------------------------------------------
        // View the fixed assets posting profile form to better understand this script.
        // ----------------------------------------------------------------------------
        // <GJP>
        if (_assetDocumentType_JP != AssetDocumentType_JP::None)
        {
            assetDocumentTransType_JP = AssetDocumentUtility_JP::transTypeWithDocType2TransType_JP(_assetTransType, _assetDocumentType_JP, _assetDocumentEntryRecId);
            _assetTransType = AssetDocumentUtility_JP::transTypeWithDocType2AccTransType(_assetTransType, _assetDocumentType_JP);
        }
        // </GJP>

        // <GJP>
        if (assetDocumentTransType_JP == AssetDocumentTransType_JP::None)
        {
        // </GJP>
            assetLedgerAccounts = AssetLedgerAccounts::findPostingAccount(assetPostingProfile, _assetBookId, _assetTransType, _assetId, _assetGroupId);

            if (_returnledgerDimension)
            {
                return assetLedgerAccounts.LedgerDimension;
            }
            else
            {
                return assetLedgerAccounts.OffsetLedgerDimension;
            }
        // <GJP>
        }
        else
        {
            ledgerDimensionDefaultAccount = AssetDocumentLedgerAccounts_JP::findAssetLedgerDimension(
                                                _assetId,
                                                _assetBookId,
                                                assetDocumentTransType_JP,
                                                _returnledgerDimension,
                                                _assetPostingProfile
                                                );

            return ledgerDimensionDefaultAccount;
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForAllocationRule_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction posting profile setup with its allocation rule.
    /// </summary>
    /// <param name="_assetId">
    /// The fixed asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The asset book of the fixed asset.
    /// </param>
    /// <param name="_assetTransType">
    /// The transaction type of the fixed asset.
    /// </param>
    /// <param name="_assetPostingProfile">
    /// The posting profile to use; optional.
    /// </param>
    /// <returns>
    /// The record of type <c>AssetLedgerAccounts</c> which meet the criteria, containing the
    /// AssetAllocationRule field.
    /// </returns>
    /// <remarks>
    /// This method makes up to three attempts to find the <c>AssetLedgerAccounts</c>.
    /// If the <paramref name="_assetPosingProfile" /> parameter is not specified,
    /// the method will use the profile that is stored in the <c>AssetParameters</c> table.
    /// </remarks>
    public static AssetLedgerAccounts findForAllocationRule_CN(
        AssetId _assetId,
        AssetBookId _assetBookId,
        AssetTransType _assetTransType,
        AssetPostingProfile _assetPostingProfile = AssetParameters::find().PostingProfile,
        boolean _forupdate = false)
    {
        AssetPostingProfile  assetPostingProfile = _assetPostingProfile;
        AssetLedgerAccounts  assetLedgerAccounts;
        // ----------------------------------------------------------------------------
        // View the fixed assets posting profile form to better understand this script.
        // ----------------------------------------------------------------------------

        assetLedgerAccounts.selectForUpdate(_forUpdate);

        // Firstly, try to find the associated Asset allocation rule by Value Model, Asset Transaction Type and Asset Id.
        select firstonly AssetAllocationRule from assetLedgerAccounts
            where assetLedgerAccounts.PostingProfile    == assetPostingProfile  &&
                    assetLedgerAccounts.BookId            == _assetBookId         &&
                    assetLedgerAccounts.AccountCode       == TableGroupAll::Table &&
                    assetLedgerAccounts.TransType         == _assetTransType      &&
                    assetLedgerAccounts.AccountRelation   == _assetId;

        // Secondly, try to find the associated Asset allocation rule by Value Model, Asset Transaction Type and Asset Group.
        if (!assetLedgerAccounts.RecId)
        {
            select firstonly AssetAllocationRule from assetLedgerAccounts
                where assetLedgerAccounts.PostingProfile    == assetPostingProfile    &&
                        assetLedgerAccounts.BookId            == _assetBookId           &&
                        assetLedgerAccounts.AccountCode       == TableGroupAll::GroupId &&
                        assetLedgerAccounts.TransType         == _assetTransType        &&
                        assetLedgerAccounts.AccountRelation   == AssetTable::find(_assetId).AssetGroup;
        }
        // Lastly, try to find the associated Asset allocation rule by Value Model, Asset Transaction Type.
        if (!assetLedgerAccounts.RecId)
        {
            select firstonly AssetAllocationRule from assetLedgerAccounts
                where assetLedgerAccounts.PostingProfile    == assetPostingProfile &&
                        assetLedgerAccounts.BookId            == _assetBookId        &&
                        assetLedgerAccounts.TransType         == _assetTransType     &&
                        assetLedgerAccounts.PostingProfile > ''                      &&
                        assetLedgerAccounts.AccountCode       == TableGroupAll::All;
        }

        return assetLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedAssetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find if the given ledger dimension is a fixed asset account by checking
    /// it against fixed asset posting profile.
    /// </summary>
    /// <param name="_assetBook">
    /// Asset value model
    /// </param>
    /// <param name="_assetGroupId">
    /// Asset group id.
    /// </param>
    /// <param name="_ledgerDimension">
    /// Given ledgerdimension.
    /// </param>
    /// <param name="_transType">
    /// Asset transaction type.
    /// </param>
    /// <param name="_postingLayer">
    /// posting layer.
    /// </param>
    /// <returns>
    /// true if the ledger dimension is a fixed asset account.
    /// </returns>
    public static boolean isFixedAssetAccount(AssetBook _assetBook,
        AssetGroupId    _assetGroupId,
        LedgerDimensionAccount _ledgerDimension,
        AssetTransType _transType,
        CurrentOperationsTax _postingLayer = CurrentOperationsTax::Current)
    {
        boolean isFAAccount = false;
        LedgerDimensionDefaultAccount defaultAccount;
        List bookList;
        ListEnumerator lstEnumerator;
        MainAccountNum givenMainAccount, assetMainAccount;

        givenMainAccount = MainAccount::findByLedgerDimension(_ledgerDimension).MainAccountId;
        if (_assetBook)
        {
            defaultAccount = AssetLedgerAccounts::findAssetLedgerDimension(
                _assetBook.AssetId,
                _assetBook.BookId,
                _transType);
            assetMainAccount = MainAccount::findByLedgerDimension(defaultAccount).MainAccountId;
            if (givenMainAccount == assetMainAccount)
            {
                isFAAccount = true;
            }
        }
        else
        {
            bookList = AssetGroup::getValueModels(_assetGroupId, _postingLayer);
            lstEnumerator = bookList.getEnumerator();
            while (lstEnumerator.moveNext())
            {
                defaultAccount = AssetLedgerAccounts::findAssetLedgerDimension(
                    '',
                lstEnumerator.current(),
                _transType);
                assetMainAccount = MainAccount::findByLedgerDimension(defaultAccount).MainAccountId;
                if (givenMainAccount == assetMainAccount)
                {
                    isFAAccount = true;
                    break;
                }
            }
        }

        return isFAAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS67359";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostingAccount</Name>
				<Source><![CDATA[
    private static AssetLedgerAccounts findPostingAccount(
        AssetPostingProfile        _postingProfile,
        AssetBookId                _bookId,
        AssetTransType             _transType,
        AssetId                    _assetId,
        AssetGroupId               _differentAssetGroupId = '')
    {
        AssetLedgerAccounts ret;
        AssetGroupId assetGroupId = AssetTable::find(_assetId).AssetGroup;
        select firstonly ret
            order by AccountCode asc
            where ret.PostingProfile    == _postingProfile
                && ret.BookId           == _bookId
                && ret.TransType        == _transType
                && ((ret.AccountCode    == TableGroupAll::Table
                && ret.AccountRelation  == _assetId)
                || (ret.AccountCode     == TableGroupAll::GroupId
                && (ret.AccountRelation == assetGroupId
                || (_differentAssetGroupId
                && ret.AccountRelation  == _differentAssetGroupId)))
                || (ret.AccountCode     == TableGroupAll::All));
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetLedgerAccounts</DeveloperDocumentation>
	<FormRef>AssetPosting</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetLedgerAccounts</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>PostingProfile</TitleField1>
	<TitleField2>TransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProfileAccountIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>ProfileAccountIdx</PrimaryIndex>
	<ReplacementKey>ProfileAccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetAllocationRule</Name>
			<Label>@SYS4002389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetAllocationRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationGroup_RU</Name>
			<Label>@GLS104029</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationGroupId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTableGroupAll</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountRelation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<Label>@FixedAssets:AccountRelation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetAllocationRule</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>CN,JP</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationGroupId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetDepreciationGroupId_W</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfileAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OffsetLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AllocationRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetAllocationRule_CN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetAllocationRule</Name>
					<Field>AssetAllocationRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127400</EntityRelationshipRole>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127402</EntityRelationshipRole>
			<RelatedTable>AssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>AssetPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125947</EntityRelationshipRole>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AccountRelation</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepreciationGroup_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationGroup_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationGroupId_RU</Name>
					<SourceEDT>AssetDepreciationGroupId_W</SourceEDT>
					<Field>DepreciationGroupId_RU</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>