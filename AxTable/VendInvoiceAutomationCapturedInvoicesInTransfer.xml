<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationCapturedInvoicesInTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceAutomationCapturedInvoicesInTransfer extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>removeTransferRecordsFor</Name>
				<Source><![CDATA[
    internal static void removeTransferRecordsFor(VendInvoiceAutomationInvoiceTmp _invoicesToRemove)
    {
        const int MaximumRetryNumber = 3;
        int waitBetweenRetries = VendInvoiceAutomationCapturedInvoicesInTransfer::calculateRandomWaitTimeBetweenRetries();

        VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties =
            VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(
            VendInvoiceAutomationInstrumentationTransferCapturedInvoiceActivities::createFromLoggerName(
            tableStr(VendInvoiceAutomationCapturedInvoicesInTransfer)).removeTransferRecordsContext());

        try
        {
            VendInvoiceAutomationCapturedInvoicesInTransfer capturedInvoicesInTransfer;

            ttsbegin;

            delete_from capturedInvoicesInTransfer
                exists join _invoicesToRemove
                    where _invoicesToRemove.VendInvoiceRecId == capturedInvoicesInTransfer.CapturedInvoiceRecId;

            ttscommit;
        }
        catch (Exception::Error)
        {
            errorProperties.errorProperty(_invoicesToRemove.VendInvoiceRecId);
        }
        catch (Exception::Deadlock)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount < MaximumRetryNumber)
            {
                sleep(currentRetryCount * waitBetweenRetries);
                retry;
            }
            else
            {
                errorProperties.deadLockProperty(_invoicesToRemove.VendInvoiceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRandomWaitTimeBetweenRetries</Name>
				<Source><![CDATA[
    private static int calculateRandomWaitTimeBetweenRetries()
    {
        return RandomGenerate::construct().randomInt(50, 1000);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Visibility>Internal</Visibility>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedDateTime>Yes</CreatedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CapturedInvoiceRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CapturedInvoiceDataAreaId</Name>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>