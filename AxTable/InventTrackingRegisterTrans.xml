<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingRegisterTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTrackingRegisterTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits inventDimId field for specific serial id.
    /// </summary>
    /// <param name="_inventSerialId">
    /// The serial id.
    /// </param>
    public void initFromSerialId(InventSerialId _inventSerialId)
    {
        InventDim                   trackingDim;

        trackingDim.InventSerialId = _inventSerialId;
        trackingDim = InventDim::findOrCreate(trackingDim);
        this.InventDimId = trackingDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventDim</c> record for the current register transaction.
    /// </summary>
    /// <returns>
    /// The  <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Id of the item associated with the registration.
    /// </summary>
    /// <returns>
    /// The Id of the item.
    /// </returns>
    public ItemId itemId()
    {
        return InventTransOrigin::find(this.InventTransOrigin).ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && !(this.PhysicalRefRecId || this.FinancialRefRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateFinancialJournalTrackingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates specified serial numbers to the financial journal line.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <param name="_journalLine">
    /// A financial journal buffer.
    /// </param>
    /// <param name="_physicalJournalLine">
    /// A physical journal buffer.
    /// </param>
    /// <param name="_financialQty">
    /// Quantity of updating items.
    /// </param>
    /// <param name="_remainingFinancialQty">
    /// Remaining quantity to be updated financially.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup for the current journal line.
    /// </param>
    public static void associateFinancialJournalTrackingTrans(
        InventTransOriginId     _originId,
        Common                  _journalLine,
        Common                  _physicalJournalLine,
        InventQty               _financialQty,
        InventQty               _remainingFinancialQty,
        InventDimGroupSetup     _inventDimGroupSetup
    )
    {
        InventTrackingRegisterTrans registerTrans;
        InventDimParm               inventDimParmNotAllowingBlankIssue;

        ttsbegin;

        update_recordset registerTrans
            setting
                FinancialRefTableId = _journalLine.TableId,
                FinancialRefRecId = _journalLine.RecId
            where registerTrans.InventTransOrigin == _originId
                && registerTrans.PhysicalRefRecId == _physicalJournalLine.RecId
                && registerTrans.PhysicalRefTableId == _physicalJournalLine.TableId
                && registerTrans.ReadyForFinancialUpdate
                && registerTrans.FinancialRefRecId == 0
                && !registerTrans.Cancelled;

        select sum(Qty) from registerTrans
            where registerTrans.FinancialRefRecId == _journalLine.RecId
                && registerTrans.FinancialRefTableId == _journalLine.TableId
                && registerTrans.PhysicalRefRecId == _physicalJournalLine.RecId
                && registerTrans.PhysicalRefTableId == _physicalJournalLine.TableId
                && registerTrans.InventTransOrigin == _originId
                && !registerTrans.Cancelled;

        _inventDimGroupSetup.inventDimParmSalesActiveIssueNotBlank(inventDimParmNotAllowingBlankIssue);

        if (registerTrans.Qty != _financialQty)
        {
            if (registerTrans.Qty * _financialQty < 0)
            {
                throw error(strFmt("@SYS4030011", _financialQty, registerTrans.Qty));
            }

            if (inventDimParmNotAllowingBlankIssue.InventSerialIdFlag || abs(registerTrans.Qty) > abs(_financialQty))
            {
                if (_physicalJournalLine is CustPackingSlipTrans)
                {
                    throw error(strFmt("@SYS4030013", _physicalJournalLine.(fieldNum(CustPackingSlipTrans, PackingSlipId))));
                }
                else
                {
                    throw error(strFmt("@SYS4030011", abs(_financialQty), abs(registerTrans.Qty)));
                }
            }
        }

        if (!inventDimParmNotAllowingBlankIssue.InventSerialIdFlag)
        {
            select sum(Qty) from registerTrans
                where registerTrans.FinancialRefRecId == 0
                    && registerTrans.FinancialRefTableId == 0
                    && registerTrans.PhysicalRefRecId == _physicalJournalLine.RecId
                    && registerTrans.PhysicalRefTableId == _physicalJournalLine.TableId
                    && registerTrans.InventTransOrigin == _originId
                    && !registerTrans.Cancelled;

            if (registerTrans.Qty * _remainingFinancialQty < 0)
            {
                throw error(strFmt("@SYS4009484", _remainingFinancialQty, registerTrans.Qty));
            }

            if (abs(registerTrans.Qty) > abs(_remainingFinancialQty))
            {
                throw error(strFmt("@SYS4009485", abs(_remainingFinancialQty), abs(registerTrans.Qty), abs(registerTrans.Qty - _remainingFinancialQty)));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associatePhysicalJournalTrackingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates specified serial numbers to the physical journal line.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_journalLine">
    /// A physical journal buffer.
    /// </param>
    /// <param name="_physicalQty">
    /// Quantity of updating items.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup for the current journal line.
    /// </param>
    public static void associatePhysicalJournalTrackingTrans(
        InventTransOriginId     _originId,
        ItemId                  _itemId,
        Common                  _journalLine,
        InventQty               _physicalQty,
        InventDimGroupSetup     _inventDimGroupSetup
    )
    {
        #OCCRetryCount

        InventTrackingRegisterTrans registerTrans;
        InventDim                   inventDim;
        InventSerial                inventSerial;
        InventSerial                inventSerialUpdate;
        InventDimParm               inventDimParmNotAllowingBlankIssue;

        FieldId fieldId = fieldName2id(_journalLine.TableId, fieldStr(CustPackingSlipTrans, Qty));
        
        ttsbegin;        
       
        if (fieldId)
        {
            Qty remainQty = _journalLine.(fieldId);
            while select forupdate registerTrans
                where registerTrans.InventTransOrigin == _originId
                   && !registerTrans.PhysicalRefRecId
                   && !registerTrans.Cancelled
            {
                if (abs(registerTrans.Qty) > abs(remainQty))
                {
                    InventTrackingRegisterTrans registerTransSplit = registerTrans.data();
                    registerTransSplit.Qty = registerTrans.Qty + remainQty;
                    registerTransSplit.insert();
                    registerTrans.Qty = remainQty;
                }

                remainQty += registerTrans.Qty;
                registerTrans.PhysicalRefRecId = _journalLine.Recid;
                registerTrans.PhysicalRefTableId = _journalLine.TableId;
                registerTrans.ReadyForFinancialUpdate = NoYes::yes;
                registerTrans.update();
                if (!remainQty)
                {
                    break;
                }
            }
        }
        else
        {
            update_recordset registerTrans
                setting
                    PhysicalRefRecId = _journalLine.RecId,
                    PhysicalRefTableId = _journalLine.TableId,
                    ReadyForFinancialUpdate = NoYes::Yes
                where registerTrans.InventTransOrigin == _originId
                    && !registerTrans.PhysicalRefRecId
                    && !registerTrans.Cancelled;
        }

        select sum(Qty) from registerTrans
            where registerTrans.PhysicalRefRecId == _journalLine.RecId
                && registerTrans.PhysicalRefTableId == _journalLine.TableId
                && registerTrans.InventTransOrigin == _originId
                && !registerTrans.Cancelled;

        if (registerTrans.Qty != _physicalQty)
        {
            if (registerTrans.Qty * _physicalQty < 0.0)
            {
                throw error(strFmt("@SYS4030011", _physicalQty, registerTrans.Qty));
            }

            _inventDimGroupSetup.inventDimParmSalesActiveIssueNotBlank(inventDimParmNotAllowingBlankIssue);

            if (inventDimParmNotAllowingBlankIssue.InventSerialIdFlag || abs(registerTrans.Qty) > abs(_physicalQty))
            {
                throw error(strFmt("@SYS4030011", abs(_physicalQty), abs(registerTrans.Qty)));
            }
        }

        try
        {
            insert_recordset inventSerialUpdate(InventSerialId, ItemId)
            select InventSerialId, _itemId from inventDim
                where inventDim.InventSerialId != '' // don't insert unreadable/unknown serial numbers
            exists join registerTrans
                where inventDim.InventDimId == registerTrans.InventDimId
                    && registerTrans.PhysicalRefRecId == _journalLine.RecId
                    && registerTrans.PhysicalRefTableId == _journalLine.TableId
                    && registerTrans.InventTransOrigin == _originId
                    && !registerTrans.Cancelled
            notexists join inventSerial
                where inventSerial.InventSerialId == inventDim.InventSerialId
                   && inventSerial.ItemId == _itemId;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }

            retry;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctPhysicalJournalTrackingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects serial numbers from the physical journal line. The method is executed when packing slip is canceled.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <param name="_journalLine">
    /// A journal line.
    /// </param>
    /// <param name="_physicalQty">
    /// Quantity to be updated.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup for the current journal line.
    /// </param>
    public static void correctPhysicalJournalTrackingTrans(
        InventTransOriginId     _originId,
        Common                  _journalLine,
        InventQty               _physicalQty,
        InventDimGroupSetup     _inventDimGroupSetup
    )
    {
        InventTrackingRegisterTrans registerTrans;
        InventDimParm               inventDimParmNotAllowingBlankIssue;

        if (_journalLine is CustInvoiceTrans)
        {
            // shouldn't detach, if item was invoiced. Get here when credit note is posted.
            return;
        }

        select sum(Qty) from registerTrans
            where registerTrans.InventTransOrigin == _originId
                && registerTrans.PhysicalRefRecId == _journalLine.RecId
                && registerTrans.PhysicalRefTableId == _journalLine.TableId;

        if (-registerTrans.Qty != _physicalQty)
        {
            if (-registerTrans.Qty * _physicalQty < 0)
            {
                throw error(strFmt("@SYS4030011", _physicalQty, -registerTrans.Qty));
            }

            _inventDimGroupSetup.inventDimParmSalesActiveIssueNotBlank(inventDimParmNotAllowingBlankIssue);

            if (inventDimParmNotAllowingBlankIssue.InventSerialIdFlag || abs(registerTrans.Qty) > abs(_physicalQty))
            {
                throw error(strFmt("@SYS4030011", abs(_physicalQty), abs(registerTrans.Qty)));
            }
        }

        update_recordset registerTrans
            setting
                PhysicalRefRecId = 0,
                PhysicalRefTableId = 0,
                ReadyForFinancialUpdate = NoYes::No
            where registerTrans.InventTransOrigin == _originId
                && registerTrans.PhysicalRefRecId == _journalLine.RecId
                && registerTrans.PhysicalRefTableId == _journalLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditFinancialJournalTrackingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tracking records when credit note is posted.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <param name="_journalLine">
    /// A financial journal buffer.
    /// </param>
    /// <param name="_remainingPhysicalQty">
    /// Quantity remain physical.
    /// </param>
    /// <param name="_financialQty">
    /// Quantity updated with the credit note.
    /// </param>
    /// <param name="_remainingFinancialQty">
    /// Remaining quantity still updated financially.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup for the current journal line.
    /// </param>
    public static void creditFinancialJournalTrackingTrans(
        InventTransOriginId     _originId,
        CustInvoiceTrans        _journalLine,
        InventQty               _remainingPhysicalQty,
        InventQty               _financialQty,
        InventQty               _remainingFinancialQty,
        InventDimGroupSetup     _inventDimGroupSetup
    )
    {
        InventTrackingRegisterTrans registerTrans;
        InventTrackingRegisterTrans newRegisterTrans;
        InventQty                   qty = 0;
        InventDimParm               inventDimParmNotAllowingBlankIssue;
        boolean                     keepSerialsAvailable;

        // When the "Credit remaning quantity" is checked then the serial should still be registered so they can be re-used
        keepSerialsAvailable = (_remainingPhysicalQty + _journalLine.RemainBefore == 0);

        ttsbegin;

        while select forupdate Qty, InventDimId, Cancelled, RecId, FinancialRefRecId from registerTrans
            where registerTrans.InventTransOrigin == _originId
                && registerTrans.ReadyForFinancialUpdate
                && registerTrans.FinancialRefRecId
                && !registerTrans.Cancelled
        {
            newRegisterTrans.Qty = -registerTrans.Qty;
            newRegisterTrans.InventDimId = registerTrans.InventDimId;
            newRegisterTrans.InventTransOrigin = _originId;
            newRegisterTrans.FinancialRefRecId = _journalLine.RecId;
            newRegisterTrans.FinancialRefTableId = _journalLine.TableId;
            newRegisterTrans.PhysicalRefRecId = _journalLine.RecId;
            newRegisterTrans.PhysicalRefTableId = _journalLine.TableId;
            newRegisterTrans.Cancelled = NoYes::Yes;
            newRegisterTrans.insert();

            registerTrans.Cancelled = NoYes::Yes;

            if (keepSerialsAvailable)
            {
                newRegisterTrans.clear();
                newRegisterTrans.Qty = registerTrans.Qty;
                newRegisterTrans.InventDimId = registerTrans.InventDimId;
                newRegisterTrans.InventTransOrigin = _originId;
                newRegisterTrans.insert();
            }

            registerTrans.update();

            qty -= registerTrans.Qty;
        }

        _inventDimGroupSetup.inventDimParmSalesActiveIssueNotBlank(inventDimParmNotAllowingBlankIssue);

        if (qty != _financialQty)
        {
            if (qty * _financialQty < 0)
            {
                throw error(strFmt("@SYS4030011", _financialQty, qty));
            }

            if (inventDimParmNotAllowingBlankIssue.InventSerialIdFlag || abs(qty) > abs(_financialQty))
            {
                throw error(strFmt("@SYS4030011", abs(_financialQty), abs(qty)));
            }
        }

        if (!inventDimParmNotAllowingBlankIssue.InventSerialIdFlag)
        {
            select sum(Qty) from registerTrans
                where registerTrans.FinancialRefRecId != 0
                    && registerTrans.FinancialRefTableId != 0
                    && registerTrans.InventTransOrigin == _originId
                    && !registerTrans.Cancelled;

            if (registerTrans.Qty * _remainingFinancialQty < 0)
            {
                throw error(strFmt("@SYS4009482", _remainingFinancialQty, registerTrans.Qty));
            }

            if (abs(registerTrans.Qty) > abs(_remainingFinancialQty))
            {
                throw error(strFmt("@SYS4009483", abs(_remainingFinancialQty), abs(registerTrans.Qty), abs(registerTrans.Qty - _remainingFinancialQty)));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForItemSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an <c>InventTrackingRegisterTrans</c> record exists for a particular item/serialId combination.
    /// </summary>
    /// <param name="_itemId">
    /// The item to search for.
    /// </param>
    /// <param name="_serialId">
    /// The serial number to search for.
    /// </param>
    /// <returns>
    /// true if a record exists; otherwise, false.
    /// </returns>
    public static boolean existForItemSerial(ItemId _itemId, InventSerialId _serialId)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventDim                   inventDim;
        InventTransOrigin           inventTransOrigin;

        select firstonly RecId from inventTrackingRegisterTrans
            exists join inventDim
                where inventDim.InventDimId == inventTrackingRegisterTrans.InventDimId
                   && inventDim.InventSerialId == _serialId
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrackingRegisterTrans.InventTransOrigin
                   && inventTransOrigin.ItemId == _itemId;

        return inventTrackingRegisterTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an <c>InventTrackingRegisterTrans</c> record exists for a given inventory transaction originator.
    /// </summary>
    /// <param name = "_inventTransOriginId">Inventory transaction originator ID</param>
    /// <returns>true if such a record exists; otherwise, false</returns>
    public static boolean existsForInventTransOrigin(InventTransOriginId _inventTransOriginId)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        select firstonly RecId from inventTrackingRegisterTrans
            where inventTrackingRegisterTrans.InventTransOrigin == _inventTransOriginId;

        return inventTrackingRegisterTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrackingRegistrationConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries whether tracking registration is configured.
    /// </summary>
    /// <returns>
    ///    true if tracking registration is configured; otherwise, false.
    /// </returns>
    public static boolean isTrackingRegistrationConfigured()
    {
        return InventDimGroupSetup::isAnyTrackingGroupSalesProcessActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyFinancialIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity registred from financial issue.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <returns>
    /// Quantity registred from financial issue.
    /// </returns>
    public static InventQty qtyFinancialIssue(InventTransOriginId _originId)
    {
        InventTrackingRegisterTrans tracking;

        select sum(Qty) from tracking
            where tracking.InventTransOrigin == _originId
                && !tracking.FinancialRefRecId
                && !tracking.FinancialRefTableId
                && tracking.ReadyForFinancialUpdate
                && !tracking.Cancelled;

        return tracking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyFinancialReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity registred from financial receipt.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <returns>
    /// Quantity registred from financial receipt.
    /// </returns>
    public static InventQty qtyFinancialReceipt(InventTransOriginId _originId)
    {
        InventTrackingRegisterTrans tracking;

        select sum(Qty) from tracking
            where tracking.InventTransOrigin == _originId
                && tracking.ReadyForFinancialUpdate
                && tracking.FinancialRefRecId
                && !tracking.Cancelled;

        return tracking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPhysicalIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity registred from physical issue.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <returns>
    /// Quantity registred from physical issue.
    /// </returns>
    public static InventQty qtyPhysicalIssue(InventTransOriginId _originId)
    {
        InventTrackingRegisterTrans tracking;

        select sum(Qty) from tracking
            where tracking.InventTransOrigin == _originId
                && !tracking.PhysicalRefRecId
                && !tracking.PhysicalRefTableId
                && !tracking.Cancelled;

        return tracking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPhysicalReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity registred from physical receipt.
    /// </summary>
    /// <param name="_originId">
    /// A <c>InventTransOriginId</c> value.
    /// </param>
    /// <returns>
    /// Quantity registred from physical receipt.
    /// </returns>
    public static InventQty qtyPhysicalReceipt(InventTransOriginId _originId)
    {
        InventTrackingRegisterTrans tracking;

        select sum(Qty) from tracking
            where tracking.InventTransOrigin == _originId
                && !tracking.PhysicalRefRecId
                && !tracking.PhysicalRefTableId
                && !tracking.Cancelled;

        return tracking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPostedOnPackingSlipNotInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates quantity that has been posted on the packing slip but not yet invoiced, regardless if they are selected to be invoiced or not.
    /// </summary>
    /// <param name="_originId">
    /// The inventTransId.
    /// </param>
    /// <returns>
    /// Total quantity that has been posted on the packing slip but not yet invoiced.
    /// </returns>
    public static Qty qtyPostedOnPackingSlipNotInvoiced(InventTransOriginId _originId)
    {
        InventTrackingRegisterTrans     tracking;

        select sum(Qty) from tracking
            where tracking.InventTransOrigin == _originId
                && tracking.PhysicalRefTableId
                && tracking.PhysicalRefRecId
                && !tracking.FinancialRefRecId
                && !tracking.FinancialRefTableId
                && !tracking.Cancelled;

        return tracking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an <c>InventTrackingRegisterTrans</c> record exists for a particular transId/serialId combination.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> to use to find the <c>InventTransOrigin</c>
    /// </param>
    /// <param name="_serialId">
    /// The serial number to search for.
    /// </param>
    /// <returns>
    /// True if a record exists; otherwise, false.
    /// </returns>
    public static boolean checkSerialId(
        InventTransId       _inventTransId,
        InventSerialId      _serialId)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventDim                   inventDim;
        InventTransOrigin           inventTransOrigin;
        boolean                     ret;

        select firstonly RecId from inventTrackingRegisterTrans
            exists join inventDim
                where inventDim.InventDimId     == inventTrackingRegisterTrans.InventDimId
                    && inventDim.InventSerialId == _serialId
            exists join inventTransOrigin
                where inventTransOrigin.RecId           == inventTrackingRegisterTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId  == _inventTransId;

        if (inventTrackingRegisterTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventTrackingRegisterTrans</c> record.
    /// </summary>
    /// <param name="_serialId">
    /// The <c>InventSerialId</c> used to create record.
    /// </param>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> to link to the record being created.
    /// </param>
    /// <param name="_unreadable">
    /// A boolean to determine if the serial Id was unreadable.
    /// </param>
    /// <param name="_isReturn">
    /// A boolean to determine if record is linked to a return order.
    /// </param>
    public static void createFromSerial(
        InventSerialId  _serialId,
        InventTransId   _inventTransId,
        boolean         _unreadable,
        boolean         _isReturn = false)
    {
        InventTrackingRegisterTrans inventTracking;
        InventTransOrigin           transOrigin = InventTransOrigin::findByInventTransId(_inventTransId);

        ttsBegin;

        if (_unreadable)
        {
            inventTracking.InventDimId = InventDim::inventDimIdBlank();
        }
        else
        {
            inventTracking.initFromSerialId(_serialId);
        }

        inventTracking.InventTransOrigin = transOrigin.RecId;
        inventTracking.Qty               = _isReturn ? 1 : -1;
        inventTracking.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4030014</DeveloperDocumentation>
	<Label>@SYS9516</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventTransOrigin</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventTransOriginIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReadyForFinancialUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReadyForFinancialUpdate</Name>
			<Label>@SYS4030015</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReadyForFinancialUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RegistredData</Name>
			<Label>@SYS4030017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancelled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinancialRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTrackingFinancialRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FinancialRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTrackingFinancialTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PhysicalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTrackingPhysicalRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PhysicalRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTrackingPhysicalTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReadyForFinancialUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4030015</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PhysicalRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FinancialRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FinancialRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FinancialRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Cancelled</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Financial</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinancialRefTableId</Name>
					<Field>FinancialRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinancialRefRecId</Name>
					<Field>FinancialRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTransPhysical</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoicePhysical</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysicalRefTableId</Name>
					<Field>PhysicalRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysicalRefRecId</Name>
					<Field>PhysicalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPackingSlipTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustPackingSlipTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Physical</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysicalRefTableId</Name>
					<Field>PhysicalRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysicalRefRecId</Name>
					<Field>PhysicalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>