<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResCategoryHierarchy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the project category is editable.
    /// </summary>
    /// <returns>
    /// true if the project category is editable; otherwise false.
    /// </returns>
    public boolean allowEditProjectGlobalCategory()
    {
        boolean                     allowEdit;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        if (Project::Enabled())
        {
            select firstonly RecId from ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == this.RecId &&
                    (ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement ||
                    ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Sales);

            if (ecoResCategoryHierarchyRole.RecId)
            {
                allowEdit = true;
            }
        }

        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateLastModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines when the specified category hierarchy in the <c>EcoResCategoryHierarchy</c> table was last modified.
    /// </summary>
    /// <returns>
    /// The last date that the specified category hierarchy in the <c>EcoResCategoryHierarchy</c> table was modified if the specified record exists; otherwise, zero.
    /// </returns>
    display EcoResCategoryHierarchyLastModified dateLastModified()
    {
        EcoResCategory                              ecoResCategory;
        EcoResCategoryHierarchyLastModified         retval;

        if (this.RecId &&  EcoResCategoryHierarchy::exist(this.RecId) )
        {
            retval = (select maxof(ModifiedDateTime) from ecoResCategory
                where ecoResCategory.CategoryHierarchy == this.RecId).ModifiedDateTime;
            retval = (retval > this.ModifiedDateTime)? retval:this.ModifiedDateTime;
        }
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    display EcoResCategoryHierarchyDescription getDescription()
    {
        EcoResCategoryHierarchyTranslation ecoResCat;

        ecoResCat = EcoResCategoryHierarchyTranslation::find(this.RecId,LanguageTable::defaultLanguage());
        return ecoResCat.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.HierarchyModifier = EcoResCategoryHierarchyModifier::Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVisiblePKWiUCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the PKWiU code should be displayed.
    /// </summary>
    /// <returns>
    /// true if the PKWiU should be displayed; otherwise false.
    /// </returns>
    public boolean isVisiblePKWiUCode()
    {
        boolean                     isVisible;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        #isoCountryRegionCodes

        // If we are under Polish country context
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            select firstonly RecId from ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == this.RecId
                    && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Sales;

            if (ecoResCategoryHierarchyRole.RecId)
            {
                isVisible = true;
            }
        }

        return isVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryUniqueNameTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the category hierarchy contains duplicate friendly name translations for different categories.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyId">
    /// The record Id of the category hierarchy
    /// </param>
    /// <returns>
    /// True if no duplicated translation; otherwise, false.
    /// </returns>
    public static boolean checkCategoryUniqueNameTranslations(EcoResCategoryHierarchyId _ecoResCategoryHierarchyId)
    {
        boolean ret = true;
        EcoResCategory ecoResCategory;
        EcoResCategoryTranslation ecoResCategoryTranslation;
        EcoResTmpCategoryTranslation ecoResTmpCategoryTranslation;
        EcoResCategoryHierarchy ecoResCategoryHierarchy;

        delete_from ecoResTmpCategoryTranslation;

        insert_recordset ecoResTmpCategoryTranslation(LanguageId, FriendlyName, NumOfInstances, ParentCategory)
        select LanguageId, FriendlyName, count(RecId) from ecoResCategoryTranslation
            group by LanguageId, FriendlyName
        join ParentCategory from ecoResCategory
            group by ParentCategory
        where  ecoResCategory.CategoryHierarchy == _ecoResCategoryHierarchyId &&
               ecoResCategoryTranslation.Category == ecoResCategory.RecId;

        ecoResCategoryHierarchy = EcoResCategoryHierarchy::find(_ecoResCategoryHierarchyId);

        setPrefix(strFmt("@RET4170026", ecoResCategoryHierarchy.Name));

        while select ecoResTmpCategoryTranslation
        order by LanguageId
        where ecoResTmpCategoryTranslation.NumOfInstances > 1
        {
            setPrefix(strFmt("@RET4170027", ecoResTmpCategoryTranslation.LanguageId));
            setPrefix(strFmt("@RET4170028", ecoResTmpCategoryTranslation.FriendlyName));
            while select ecoResCategory
                where ecoResCategory.ParentCategory == ecoResTmpCategoryTranslation.ParentCategory
                exists join ecoResCategoryTranslation
                where ecoResCategoryTranslation.Category == ecoResCategory.RecId &&
                ecoResCategoryTranslation.LanguageId == ecoResTmpCategoryTranslation.LanguageId &&
                ecoResCategoryTranslation.FriendlyName == ecoResTmpCategoryTranslation.FriendlyName
            {
                error(strFmt("%1", ecoResCategory.Name));
            }

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified category hierarchy exists in the <c>EcoResCategoryHierarchy</c>
    ///    table.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyId">
    ///    The category hierarchy ID in the <c>EcoResCategoryHierarchy</c> table to check for existance.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, retrieves false and displays an error message.
    /// </returns>
    public static boolean checkExist(EcoResCategoryHierarchyId _ecoResCategoryHierarchyId)
    {
        if (_ecoResCategoryHierarchyId && EcoResCategoryHierarchy::exist(_ecoResCategoryHierarchyId))
        {
            return true;
        }

        return checkFailed(strfmt(EcoResCategoryHierarchy::txtNotExist(), _ecoResCategoryHierarchyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCategoryAttributesToGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coverts category attributes to attribute groups.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchy">
    ///    The category hierarchy for which to perform the conversion.
    /// </param>
    public static void convertCategoryAttributesToGroups(EcoResCategoryHierarchyId _ecoResCategoryHierarchy)
    {
        EcoResCategory ecoResCategory;
        EcoResCategoryAttribute ecoResCategoryAttribute, existsEcoResCategoryAttribute;
        EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        EcoResAttributeGroup ecoResAttributeGroup;
        RefRecId attributeGroupRecId;
        DictEnum modifierEnum = new DictEnum(enumNum(EcoResCategoryAttributeModifier));

        // check if no attribute groups are attached to the hierarchy already
        select firstonly RecId from ecoResCategory
            where ecoResCategory.CategoryHierarchy == _ecoResCategoryHierarchy
            exists join ecoResCategoryAttributeGroup
                where ecoResCategoryAttributeGroup.Category == ecoResCategory.RecId;

        if (!ecoResCategory.RecId)
        {
            Enumerator enum = modifierEnum.getEnumerator();

            while (enum.moveNext())
            {
                EcoResCategoryAttributeModifier modifier = enum.current();

                while select ecoResCategory
                where ecoResCategory.CategoryHierarchy == _ecoResCategoryHierarchy
                exists join existsEcoResCategoryAttribute
                    where existsEcoResCategoryAttribute.Category == ecoResCategory.RecId
                       && existsEcoResCategoryAttribute.Modifier == modifier
                {
                    ecoResAttributeGroup.Name = modifierEnum.value2Label(enum2int(modifier)) + '_' + ecoResCategory.Name;

                    if (ecoResAttributeGroup::findByName(ecoResAttributeGroup.Name))
                    {
                        ecoResAttributeGroup.Name = subStr(ecoResAttributeGroup.Name, 0, 40) + int642str(ecoResCategory.RecId);
                    }
                    ecoResAttributeGroup.insert();

                    ecoResCategoryAttributeGroup.Category = ecoResCategory.RecId;
                    ecoResCategoryAttributeGroup.AttributeGroup = ecoResAttributeGroup.RecId;
                    ecoResCategoryAttributeGroup.Modifier = modifier;
                    ecoResCategoryAttributeGroup.insert();
                    attributeGroupRecId = ecoResAttributeGroup.RecId;

                    insert_recordset ecoResAttributeGroupAttribute (Attribute, AttributeGroup)
                        select Attribute, attributeGroupRecId from ecoResCategoryAttribute
                            where ecoResCategoryAttribute.Category == ecoResCategory.RecId
                               && ecoResCategoryAttribute.Modifier == modifier;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether the specified record in the <c>EcoResCategoryHierarchy</c> exists.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyId">
    /// The category hierarchy ID in the <c>EcoResCategoryHierarchy</c> table to check for existance.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(EcoResCategoryHierarchyId _ecoResCategoryHierarchyId)
    {
        return _ecoResCategoryHierarchyId &&
            (select ecoResCategoryHierarchy
                where ecoResCategoryHierarchy.RecId == _ecoResCategoryHierarchyId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Category Hierarchy Name exists in the <c>EcoResCategoryHierarchy</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyName">
    /// The Category Hierarchy Name in the <c>EcoResCategoryHierarchy</c> table to check for existance.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByName(EcoResCategoryHierarchyName _ecoResCategoryHierarchyName)
    {
        if (_ecoResCategoryHierarchyName)
        {
            return (select ecoResCategoryHierarchy
                where ecoResCategoryHierarchy.Name == _ecoResCategoryHierarchyName).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified category hierarchy in the <c>EcoResCategoryHierarchy</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyId">
    ///    The category hierarchy ID in the <c>EcoResCategoryHierarchy</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>EcoResCategoryHierarchy</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryHierarchy find(EcoResCategoryHierarchyId _ecoResCategoryHierarchyId, boolean _forUpdate = false)
    {
        EcoResCategoryHierarchy    ecoResCategoryHierarchy = null;

        if (_ecoResCategoryHierarchyId)
        {
            ecoResCategoryHierarchy.selectForUpdate(_forUpdate);
            select firstonly ecoResCategoryHierarchy where ecoResCategoryHierarchy.RecId == _ecoResCategoryHierarchyId;
        }

        return ecoResCategoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified category hierarchy name in the <c>EcoResCategoryHierarchy</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyName">
    ///    The category hierarchy name in the <c>EcoResCategoryHierarchy</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>EcoResCategoryHierarchy</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryHierarchy findByName(EcoResCategoryHierarchyName _ecoResCategoryHierarchyName, boolean _forUpdate = false)
    {
        EcoResCategoryHierarchy    ecoResCategoryHierarchy = null;

        ecoResCategoryHierarchy.selectForUpdate(_forUpdate);

        if (_ecoResCategoryHierarchyName)
        {
            select firstonly ecoResCategoryHierarchy
                where ecoResCategoryHierarchy.Name == _ecoResCategoryHierarchyName;
        }

        return ecoResCategoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultFormHierarchyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the category hierarchy to use as the default selection in forms.
    /// </summary>
    /// <returns>
    /// The record Id of the default hierarchy.
    /// </returns>
    public static EcoResCategoryHierarchyId findDefaultFormHierarchyRecId()
    {
        EcoResCategoryHierarchyRole hierarchyRole;
        EcoResCategoryHierarchy     hierarchy;

        if (RetailParameters::isRetailEnabledAndInUse())
        {
            hierarchyRole = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);
        }

        if (!hierarchyRole)
        {
            select firstOnly CategoryHierarchy from hierarchyRole order by hierarchyRole.NamedCategoryHierarchyRole;
        }

        if (hierarchyRole.CategoryHierarchy)
        {
            return hierarchyRole.CategoryHierarchy;
        }
        else
        {
            select firstonly RecId from hierarchy order by hierarchy.Name where hierarchy.HierarchyModifier == EcoResCategoryHierarchyModifier::Category;
            return hierarchy.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the category hierarchy that is associated with the product configuration or creates one if it does not exist.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyName">
    ///    The category hierarchy name in the <c>EcoResCategoryHierarchy</c> table to retrieve if it exists.
    /// </param>
    /// <param name="_ecoResCategoryHierarchyModifier">
    ///    The category hierarchy modifier in the <c>EcoResCategoryHierarchy</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>EcoResCategoryHierarchy</c> record of the category hierarchy that is associated with the product configuration.
    /// </returns>
    public static EcoResCategoryHierarchy findOrCreateCategoryHierarchy(
        EcoResCategoryHierarchyName _ecoResCategoryHierarchyName,
        EcoResCategoryHierarchyModifier _ecoResCategoryHierarchyModifier = EcoResCategoryHierarchyModifier::Category,
        boolean _forUpdate = false )
    {
        EcoResCategoryHierarchy ecoResCategoryHierarchy;

        ecoResCategoryHierarchy = EcoResCategoryHierarchy::findByName(_ecoResCategoryHierarchyName, _forUpdate);

        if (ecoResCategoryHierarchy.RecId != 0)
        {
            return ecoResCategoryHierarchy;
        }
        else
        {
            ttsbegin;
            ecoResCategoryHierarchy.Name              = _ecoResCategoryHierarchyName;
            ecoResCategoryHierarchy.HierarchyModifier = _ecoResCategoryHierarchyModifier;
            ecoResCategoryHierarchy.insert();
            ttscommit;

            EcoResCategoryHierarchyTranslation::createOrUpdateHierarchyTranslation(ecoResCategoryHierarchy.RecId, "@SYS184042");
            ecoResCategoryHierarchy.selectForUpdate(_forUpdate);

            return ecoResCategoryHierarchy;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductHierarchies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup of category hierarchies, excluding the PC hierarchies.
    /// </summary>
    /// <param name="_caller">
    /// Control to perform the lookup on.
    /// </param>
    public static void lookupProductHierarchies(FormReferenceControl _caller)
    {
        SysReferenceTableLookup lookup;
        Query                   query;
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        query       = new Query();
        dataSource  = query.addDataSource(tablenum(EcoResCategoryHierarchy), tablestr(EcoResCategoryHierarchy));
        range       = dataSource.addRange(fieldnum(EcoResCategoryHierarchy, HierarchyModifier));
        range.value(queryValue(EcoResCategoryHierarchyModifier::Category));

        lookup = SysReferenceTableLookup::newParameters(tablenum(EcoResCategoryHierarchy), _caller);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldnum(EcoResCategoryHierarchy, Name));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>EcoResCategoryHierarchy</c> table does not
    /// exist..
    /// </summary>
    /// <returns>
    /// The message that states a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS130837";
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRetailRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the hierarchy has atleast one retail role.
    /// </summary>
    /// <returns>Returns true if the hierarchy has atleast one retail role.</returns>
    public boolean hasRetailRole()
    {
        boolean ret;
        if (this.RecId && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

            select firstonly RecId from ecoResCategoryHierarchyRole
                where (ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole ==  EcoResCategoryNamedHierarchyRole::Retail
                    || ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole ==  EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                    || ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole ==  EcoResCategoryNamedHierarchyRole::RetailChannelNavigation)
                    && ecoResCategoryHierarchyRole.CategoryHierarchy == this.RecId;
            if (ecoResCategoryHierarchyRole.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNonRetailRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the hierarchy has atleast one non-retail role.
    /// </summary>
    /// <returns>Returns true if the hierarchy has atleast one non-retail role.</returns>
    public boolean hasNonRetailRole()
    {
        boolean ret;
        if (this.RecId && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResCategoryHierarchyRole localEcoResCategoryHierarchyRole;

            select firstOnly RecId from localEcoResCategoryHierarchyRole
               where localEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::Retail
                     && localEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                     && localEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::RetailChannelNavigation
                     && localEcoResCategoryHierarchyRole.CategoryHierarchy == this.RecId;
            if (localEcoResCategoryHierarchyRole.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSpecificHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if hierarchy has retail specific hierarchy role.
    /// </summary>
    /// <returns>Returns true if the hierarchy has a retail specific role.</returns>
    public boolean isRetailSpecificHierarchy()
    {
        return this.hasRetailRole() && !this.hasNonRetailRole();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS309796</DeveloperDocumentation>
	<FormRef>EcoResCategoryHierarchyListPage</FormRef>
	<Label>@SYS130840</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResCategory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResCategoryHierarchyRole</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResCategoryHierarchyRole</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dateLastModified</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Label>@SYS104926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HierarchyModifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HierarchyListPage</Name>
			<Label>@SYS130842</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dateLastModified</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@RET260070</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HierarchyModifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>EcoResCategoryHierarchyModifier</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HierarchyModifierIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HierarchyModifier</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>