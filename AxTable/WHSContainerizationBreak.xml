<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerizationBreak</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSContainerizationBreak extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayFieldName</Name>
				<Source><![CDATA[
	/// <summary>
	/// Display method for the field name.
	/// </summary>
	/// <returns>
	/// Field name of the record.
	/// </returns>
    public display FieldName displayFieldName()
    {
        DictField   dictField = new DictField(this.GroupTableId, this.GroupFieldId);
        FieldName   ret;

        if (dictField)
        {
            ret = dictField.label();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTableName</Name>
				<Source><![CDATA[
	/// <summary>
	/// Display method for the table name of the record.
	/// </summary>
	/// <returns>
	/// Table name of the record.
	/// </returns>
    public display TableName displayTableName()
    {
        DictTable   dictTable = new DictTable(this.GroupTableId);
        TableName   ret;

        if (dictTable)
        {
            ret = dictTable.label();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(WHSContainerizationBreak, GroupTableId),
                [fieldNum(WHSContainerizationBreak, MixingLogicTables)]
            ]
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(WHSContainerizationBreak, GroupTableId):
                if (this.isFieldSet(fieldNum(WHSContainerizationBreak, MixingLogicTables)))
                {
                    this.GroupTableId = WHSContainerizationBreak::mixingLogicTables2TableId(this.MixingLogicTables);
                    this.GroupFieldId = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.GroupTableId = WHSContainerizationBreak::mixingLogicTables2TableId(this.MixingLogicTables);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixingLogicTables2TableId</Name>
				<Source><![CDATA[
    public static TableId mixingLogicTables2TableId(WHSMixingLogicTables _mixingLogicTables)
    {
        return tableName2Id(enum2Symbol(enumnum(WHSMixingLogicTables), enum2int(_mixingLogicTables)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>WHSContainerizationBreak</c> record exists with given parameters.
	/// </summary>
	/// <param name="_refRecId">
	/// RecId of the containerization that record belongs to.
	/// </param>
	/// <param name="_groupTableId">
	/// Group table id of the record.
	/// </param>
	/// <param name="_groupFieldId">
	/// Group field id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(RefRecId        _refRecId,
                                RefTableId      _groupTableId,
                                RefFieldId      _groupFieldId)

    {
        return (_refRecId && _groupTableId && _groupFieldId) &&
               (select firstonly WHSContainerizationBreak
                where WHSContainerizationBreak.RefRecId         == _refRecId        &&
                      WHSContainerizationBreak.GroupTableId     == _groupTableId    &&
                      WHSContainerizationBreak.GroupFieldId     == _groupFieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSContainerizationBreak</c> record with given parameters.
	/// </summary>
    /// <param name="_refRecId">
    /// The parameter of type <c>RefRecId</c>.
    /// </param>
	/// <param name="_groupTableId">
	/// Group table id of the record.
	/// </param>
	/// <param name="_groupFieldId">
	/// Group field id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSContainerizationBreak find(RefRecId    _refRecId,
                                                RefTableId  _groupTableId,
                                                RefFieldId  _groupFieldId,
                                                boolean     _forupdate = false)
    {
        WHSContainerizationBreak    containerizationBreak;

        if (_refRecId && _groupTableId && _groupFieldId)
        {
            containerizationBreak.selectForUpdate(_forupdate);

            select firstonly containerizationBreak
                where containerizationBreak.RefRecId        == _refRecId        &&
                      containerizationBreak.GroupTableId    == _groupTableId    &&
                      containerizationBreak.GroupFieldId    == _groupFieldId;
        }

        return containerizationBreak;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4333</DeveloperDocumentation>
	<Label>@WAX3826</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>GroupTableId</TitleField1>
	<TitleField2>GroupFieldId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RefRecIdGroupTableIdGroupFieldId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>RefRecIdGroupTableIdGroupFieldId</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MixingLogicTables</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MixingLogicTables</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MixingLogicTables</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSMixingLogicTables</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdGroupTableIdGroupFieldId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupFieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdGroupFieldIdMixingTablesIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupFieldId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MixingLogicTables</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSContainerizationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSContainerizationTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>