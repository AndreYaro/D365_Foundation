<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDispute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustDispute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static CustDispute find(RecId _recId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustDispute custDispute;

        custDispute.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custDispute.concurrencyModel(_concurrencyModel);
        }

        select firstonly custDispute
            where custDispute.RecId == _recId;

        return custDispute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustDispute</c> record related to the provided <c>CustTrans</c> table reference.
    /// </summary>
    /// <param name="_custTransRecId">
    ///    The record ID of the <c>CustTrans</c> record.
    /// </param>
    /// <param name="_forupdate">
    ///    true if the record should be selected for updates; false if the record will be read only.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model to use.
    /// </param>
    /// <returns>
    ///    A <c>CustDispute</c> record related to the provided <c>CustTrans</c> table reference.
    /// </returns>
    public static CustDispute findByCustTrans(RecId _custTransRecId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustDispute custDispute;

        custDispute.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custDispute.concurrencyModel(_concurrencyModel);
        }

        select firstonly custDispute
            where custDispute.CustTrans == _custTransRecId;

        return custDispute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAutomationCreateActivity</Name>
				<Source><![CDATA[
    private void onAutomationCreateActivity()
    {
        smmActivityCategory category;
        CustTrans custTrans = CustTrans::find(this.CustTrans);

        if (this.Status == CustVendDisputeStatus::PromiseToPayBroken)
        {
            category = smmActivityCategory::Task;
        }
        else if (this.Status == CustVendDisputeStatus::PromiseToPayKept || this.Status == CustVendDisputeStatus::Resolved)
        {
            category = smmActivityCategory::Event;
        }

        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();
        context.parmStatus(this.Status);
        context.parmFollowUpDate(this.FollowUpDate);

        CustCollectionsSetTransactionStatusHelper::createActivity(
            custTrans,
            CustTable::find(custTrans.AccountNum).RecId,
            context,
            category);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisputeStatisticsForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the dispute statistics for the customer.
    /// </summary>
    /// <param name="_custAccount">
    ///    The customer to use.
    /// </param>
    /// <returns>
    ///    A container with the dispute statistics for the customer.
    /// </returns>
    /// <remarks>
    ///    The first element of the container contains the number of disputed transactions.The second element
    ///    contains the total MST balance of disputed transactions.
    /// </remarks>
    public static container getDisputeStatisticsForCustomer(CustAccount _custAccount)
    {
        CustDispute custDispute;
        CustTrans custTrans;
        CustTransOpen custTransOpen;

        select count(RecId), sum(AmountMST)
            from custTransOpen
            exists join custTrans
                where
                    custTrans.RecId == custTransOpen.RefRecId &&
                    custTransOpen.AccountNum == _custAccount
            exists join custDispute
                where
                    custDispute.CustTrans == custTrans.RecId &&
                    custDispute.Status == CustVendDisputeStatus::Disputed;

        // Safe to cast to integer since a customer won't have many disputes
        return [int642int(custTransOpen.RecId), custTransOpen.AmountMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDuplicateReasonTableRefRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a duplicate entry for in <c>ReasonTableRef</c> table for the ReasonTableRef field on record
    /// </summary>
    /// <returns>The new <c>ReasonTableRef</c> record</returns>
    public ReasonTableRef createDuplicateReasonTableRefRecord()
    {
        ReasonTableRef reasonTableRef = ReasonTableRef::find(this.ReasonTableRef);

        ReasonTableRef newReasonTableRef;
        newReasonTableRef.Reason = reasonTableRef.Reason;
        newReasonTableRef.ReasonComment = reasonTableRef.ReasonComment;
        newReasonTableRef.insert();

        return newReasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustDisputeHistory</Name>
				<Source><![CDATA[
    private void insertCustDisputeHistory()
    {
        CustDisputeHistory custDisputeHistory;
        custDisputeHistory.Status = this.Status;
        custDisputeHistory.StatusChangedDate = this.StatusChangedDate;
        custDisputeHistory.CustTrans = this.CustTrans;

        custDisputeHistory.ReasonTableRef = this.createDuplicateReasonTableRefRecord().RecId;
        custDisputeHistory.TransactionBalance = this.TransactionBalance;
        custDisputeHistory.TransactionCurrency = this.TransactionCurrency;
        custDisputeHistory.FollowUpDate = this.FollowUpDate;
        custDisputeHistory.IsAutomaticUpdate = this.IsAutomaticUpdate;
        custDisputeHistory.Note = this.Note;
        custDisputeHistory.AmountCur = this.IsAutomaticUpdate ? this.LastPayment : this.AmountCur;

        custDisputeHistory.insert();

        if (this.IsAutomaticUpdate)
        {
            this.onAutomationCreateActivity();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.insertCustDisputeHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.insertCustDisputeHistory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Collections</ConfigurationKey>
	<DeveloperDocumentation>@SYS133985</DeveloperDocumentation>
	<Label>@SYS130012</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Status</TitleField1>
	<TitleField2>StatusChangedDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>FK_CustTrans_CustDispute</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>FK_CustTrans_CustDispute</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusChangedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonTableRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusChangedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonTableRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FollowUpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS133990</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS133988</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendDisputeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StatusChangedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS133986</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FollowUpDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@AccountsReceivable:CustCollectionsSetTransactionStatusFollowUpDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<CurrencyCodeField>TransactionCurrency</CurrencyCodeField>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<CurrencyCodeField>TransactionCurrency</CurrencyCodeField>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityUserMemo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAutomaticUpdate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastPayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<CurrencyCodeField>TransactionCurrency</CurrencyCodeField>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_ReasonTableRef_CustDispute</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReasonTableRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_CustTrans_CustDispute</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustDispute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTrans</Name>
					<Field>CustTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustDispute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>