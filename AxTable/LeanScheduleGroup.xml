<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanScheduleGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanScheduleGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        LeanScheduleGroupCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>LeanScheduleGroupItem</c> record.
    /// </summary>
    public void initValue()
    {
        super();

        this.Color = LeanScheduleGroup::defaultColor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        LeanScheduleGroupCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case(fieldNum(LeanScheduleGroup, WorkCell)):
                this.validateWorkCell();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.WorkCell != this.orig().WorkCell)
        {
            LeanScheduleGroupCache::construct().clearCache();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether all schedule group items are still valid and unique across locations.
    /// </summary>
    /// <returns>
    /// true if they are still valid; otherwise, false.
    /// </returns>
    private boolean validateWorkCell()
    {
        LeanScheduleGroupItem leanScheduleGroupItem;
        boolean result = true;

        // iterate over all items and validate the uniqueness of the changed location
        while select leanScheduleGroupItem
            where leanScheduleGroupItem.ScheduleGroup == this.RecId
        {
            result = leanScheduleGroupItem.validateLocation(this.WorkCell) && result;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current <c>LeanScheduleGroup</c> table buffer.
    /// </summary>
    /// <returns>
    ///    true if the table buffer is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>WorkCell</c> field must have the record identifier of a <c>WrkCtrResourceGroup</c> record of type <c>WorkCell</c>.
    /// </remarks>
    public boolean validateWrite()
    {
        boolean ret;
        WrkCtrResourceGroup wrkCtrResourceGroup;

        ret = super();

        if (this.WorkCell)
        {
            wrkCtrResourceGroup = WrkCtrResourceGroup::find(this.WorkCell);

            if (wrkCtrResourceGroup.IsWorkCell == NoYes::No)
            {
                ret = ret && checkFailed(strFmt("@SYS135010", wrkCtrResourceGroup.WrkCtrId));
            }
        }

        ret = ret && this.validateWorkCell();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default color for lean schedule groups.
    /// </summary>
    /// <returns>
    /// The default color for schedule groups.
    /// </returns>
    public static LeanScheduleGroupColor defaultColor()
    {
        #define.defaultColor('999999')

        return #defaultColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>LeanScheduleGroup</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LeanScheduleGroup</c> record to check whether it exists.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from leanScheduleGroup
                    where leanScheduleGroup.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanScheduleGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LeanScheduleGroup</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanScheduleGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanScheduleGroup find(
        RefRecId _recId,
        boolean  _forUpdate = false)
    {
        LeanScheduleGroup leanScheduleGroup;

        if (_recId)
        {
            leanScheduleGroup.selectForUpdate(_forUpdate);

            select firstonly leanScheduleGroup
                where leanScheduleGroup.RecId == _recId;
        }

        return leanScheduleGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameAndWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanScheduleGroup</c> table.
    /// </summary>
    /// <param name="_name">
    /// The Name of the <c>LeanScheduleGroup</c> record to find.
    /// </param>
    /// <param name="_workCell">
    /// The record id of the referenced <c>WrkCtrResourceGroup</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanScheduleGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanScheduleGroup findByNameAndWorkCell(LeanScheduleGroupId _name, WrkCtrResourceGroupRefRecId _workCell, boolean  _forUpdate = false)
    {
        LeanScheduleGroup leanScheduleGroup;

        if (_name)
        {
            leanScheduleGroup.selectForUpdate(_forUpdate);

            if (_workCell)
            {
                select firstonly leanScheduleGroup
                   where leanScheduleGroup.Name == _name
                      && leanScheduleGroup.WorkCell == _workCell;
            }
            else
            {
                select firstonly leanScheduleGroup
                   where leanScheduleGroup.Name == _name;
            }
        }

        return leanScheduleGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findScheduleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the schedule group record that applies to a specific lean location, item, and inventory
    /// dimension.
    /// </summary>
    /// <param name="_wrkCtrResourceGroup">
    /// A work cell record identifier.
    /// </param>
    /// <param name="_itemId">
    /// An item identifier.
    /// </param>
    /// <param name="_inventDimId">
    /// An inventory dimension identifier.
    /// </param>
    /// <returns>
    /// A <c>LeanScheduleGroup</c> record; otherwise, an empty record.
    /// </returns>
    public static container findScheduleGroup(
        RefRecId    _wrkCtrResourceGroup,
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        LeanScheduleGroupEntrySingle    leanScheduleGroupEntrySingle;
        LeanScheduleGroupEntryGroup     leanScheduleGroupEntryGroup;
        LeanScheduleGroupItem           leanScheduleGroupItem;
        LeanScheduleGroup               leanScheduleGroup;
        ForecastItemAllocationLine      forecastItemAllocationLine;
        InventDimId                     inventDimIdBlank = InventDim::inventDimIdBlank();

        // Check for schedule group line with item and item dimensions
        select firstonly leanScheduleGroup
                where leanScheduleGroup.WorkCell                         == _wrkCtrResourceGroup
            join leanScheduleGroupItem
                where leanScheduleGroupItem.ScheduleGroup                == leanScheduleGroup.RecId
                   && leanScheduleGroupItem.EntryType                    == LeanScheduleGroupItemType::Item
            exists join leanScheduleGroupEntrySingle
                where leanScheduleGroupEntrySingle.LeanScheduleGroupItem == leanScheduleGroupItem.RecId
                   && leanScheduleGroupEntrySingle.ItemId                == _itemId
                   && leanScheduleGroupEntrySingle.InventDimId           == _inventDimId;

        // Check for schedule group line with item without item dimensions
        if (!leanScheduleGroup)
        {
            select firstonly leanScheduleGroup
                    where leanScheduleGroup.WorkCell                         == _wrkCtrResourceGroup
                join leanScheduleGroupItem
                    where leanScheduleGroupItem.ScheduleGroup                == leanScheduleGroup.RecId
                       && leanScheduleGroupItem.EntryType                    == LeanScheduleGroupItemType::Item
                exists join leanScheduleGroupEntrySingle
                    where leanScheduleGroupEntrySingle.LeanScheduleGroupItem == leanScheduleGroupItem.RecId
                       && leanScheduleGroupEntrySingle.ItemId                == _itemId
                       && leanScheduleGroupEntrySingle.InventDimId           == inventDimIdBlank;
        }

        //  Check for schedule group line with item allocation groups.
        //  The item allocation groups linked to a schedule group are checked in alphabetical sequence of the allocation group, the first match is used

        //  Verify if item and item dimension is part of the allocation group
        if (!leanScheduleGroup)
        {
            select firstonly leanScheduleGroup
                    order by leanScheduleGroup.Name
                    where leanScheduleGroup.WorkCell                        == _wrkCtrResourceGroup
                join leanScheduleGroupItem
                    where leanScheduleGroupItem.ScheduleGroup               == leanScheduleGroup.RecId
                       && leanScheduleGroupItem.EntryType                   == LeanScheduleGroupItemType::Group
                exists join leanScheduleGroupEntryGroup
                    where leanScheduleGroupEntryGroup.LeanScheduleGroupItem == leanScheduleGroupItem.RecId
                exists join forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId           == leanScheduleGroupEntryGroup.AllocationId
                       && forecastItemAllocationLine.ItemId                 == _itemId
                       && forecastItemAllocationLine.InventDimId            == _inventDimId;
        }

        // Verify if item without item dimension is part of the allocation group
        if (!leanScheduleGroup)
        {
            select firstonly leanScheduleGroup
                    order by leanScheduleGroup.Name
                    where leanScheduleGroup.WorkCell                        == _wrkCtrResourceGroup
                join leanScheduleGroupItem
                    where leanScheduleGroupItem.ScheduleGroup               == leanScheduleGroup.RecId
                       && leanScheduleGroupItem.EntryType                   == LeanScheduleGroupItemType::Group
                exists join leanScheduleGroupEntryGroup
                    where leanScheduleGroupEntryGroup.LeanScheduleGroupItem == leanScheduleGroupItem.RecId
                exists join forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId           == leanScheduleGroupEntryGroup.AllocationId
                       && forecastItemAllocationLine.ItemId                 == _itemId
                       && forecastItemAllocationLine.InventDimId            == inventDimIdBlank;
        }

        if (!leanScheduleGroup)
        {
            // If nothing is found, execute same process for schedule groups with no work cell assigned.
            if (_wrkCtrResourceGroup)
            {
                [leanScheduleGroup, leanScheduleGroupItem] = LeanScheduleGroup::findScheduleGroup(0, _itemId, _inventDimId);
            }
            else
            {
                leanScheduleGroup.initValue();
                leanScheduleGroupItem.initValue();
            }
        }

        return [leanScheduleGroup, leanScheduleGroupItem];
    }

]]></Source>
			</Method>
			<Method>
				<Name>throughputRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the throughput ratio for a given work cell.
    /// </summary>
    /// <param name="_workCell">
    /// A record ID of the <c>WrkCtrResourceGroup</c> table.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that represents product dimensions.
    /// </param>
    /// <returns>
    /// The throughput ratio for the work cell.
    /// </returns>
    public static LeanThroughputRatio throughputRatio(
        WrkCtrResourceGroupRefRecId _workCell,
        ItemId                      _itemId,
        InventDimId                 _inventDimId)
    {
        LeanScheduleGroup       leanScheduleGroup;
        LeanScheduleGroupItem   leanScheduleGroupItem;
        LeanScheduleGroupCache  leanScheduleGroupCache = LeanScheduleGroupCache::construct();

        [leanScheduleGroup,leanScheduleGroupItem] = leanScheduleGroupCache.leanScheduleGroupItem(
                                                                                _workCell,
                                                                                _itemId,
                                                                                _inventDimId);

        return leanScheduleGroupItem ? leanScheduleGroupItem.ThroughputRatio : 1.0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS320524</DeveloperDocumentation>
	<FormRef>LeanScheduleGroup</FormRef>
	<Label>@SYS132034</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkCell</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>Name</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanScheduleGroupItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanScheduleGroupItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Color</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeanScheduleGroup</Name>
			<Label>@SYS132034</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Color</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Color</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanScheduleGroupColor</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanScheduleGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkCell</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrResourceGroupRefRecId</ExtendedDataType>
			<Label>@SYS131859</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Name</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkCell</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Cell</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkCell</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrResourceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCell</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ScheduleGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkCell</Name>
					<Field>WorkCell</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>