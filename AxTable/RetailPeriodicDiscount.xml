<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscount</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class RetailPeriodicDiscount extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>discountValidationPeriodEndingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the end date of discount.
    /// </summary>
    /// <returns>
    /// The ending date of the discount.
    /// </returns>
    display RetailEndingDate discountValidationPeriodEndingDate()
    {
        return RetailDiscountValidationPeriod::find(this.ValidationPeriodId).ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountValidationPeriodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of discount validation period.
    /// </summary>
    /// <returns>
    /// The name of discount validation period.
    /// </returns>
    display Description discountValidationPeriodName()
    {
        Description ret;
        ;

        if (this.DateValidationType == RetailDateValidationTypeBase::Advanced)
        {
            ret = RetailDiscountValidationPeriod::find(this.ValidationPeriodId).Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountValidationPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the starting date of discount.
    /// </summary>
    /// <returns>
    /// The starting date of the discount.
    /// </returns>
    display RetailStartingDate discountValidationPeriodStartDate()
    {
        return RetailDiscountValidationPeriod::find(this.ValidationPeriodId).ValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        // default validation period to standard type
        this.DateValidationType = RetailDateValidationTypeBase::Standard;
        // Valid for 1 year from insertion
        this.ValidTo = DateTimeUtil::date(DateTimeUtil::addYears(DateTimeUtil::getSystemDateTime(), 1));
        this.DisabledSince = DateTimeUtil::date(DateTimeUtil::minValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is overridden to modify the values in the fields of the <c>RetailPeriodicDiscount</c> table when the fields are edited.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(RetailPeriodicDiscount, ValidationPeriodId))
        {
            this.ValidFrom = RetailDiscountValidationPeriod::find(this.ValidationPeriodId).ValidFrom;
            this.ValidTo = RetailDiscountValidationPeriod::find(this.ValidationPeriodId).validTo;

            if (!this.ValidTo)
            {
                this.ValidTo = DateTimeUtil::date(DateTimeUtil::maxValue());
            }
        }
        else if (_fieldId == fieldNum(RetailPeriodicDiscount, ValidTo))
        {
            // make sure expiration date is always set to max, not min, when unspecified
            if (!this.ValidTo)
            {
                this.ValidTo = DateTimeUtil::date(datetimeutil::maxValue());
            }
        }
        else if (_fieldId == fieldNum(RetailPeriodicDiscount, DiscountPercentValue))
        {
            RetailPricingConfigurationValidator::isValidDiscountPercentageAllowZero(this.DiscountPercentValue);
        }
        else if (_fieldId == fieldNum(RetailPeriodicDiscount, Status))
        {
            this.updateDisabledSince();
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRBODiscountOfferParentTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property for the data source fields.
    /// </summary>
    /// <param name="_enabled">
    /// A Boolean value that indicates whether the data source can be edited.
    /// </param>
    void setRBODiscountOfferParentTableEnabled(boolean _enabled)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            this.setTableFieldsEnabled(FormDataUtil::getFormDataSource(this), this.TableId, _enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRBODiscountOfferTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property for the data source fields.
    /// </summary>
    /// <param name="_enabled">
    /// A Boolean value that indicates whether the data source is editable.
    /// </param>
    public void setRBODiscountOfferTableEnabled(boolean _enabled)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            this.setTableFieldsEnabled(FormDataUtil::getFormDataSource(this), this.TableId, _enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFieldsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property for the data source fields.
    /// </summary>
    /// <param name="_dataSource">
    /// The form data source to change the ability to modify.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the data source
    /// </param>
    /// <param name="_enabled">
    /// A Boolean value that indicates whether the data source is editable.
    /// </param>
    void setTableFieldsEnabled(FormDataSource _dataSource, TableId _tableId, boolean _enabled)
    {
        #Retail

        DictTable dictTable = new DictTable(_tableId);
        int fieldCnt = dictTable.fieldCnt();
        int idx;
        FieldId fieldId;
        FormDataObject dataObject;

        for (idx = 1; idx <= fieldCnt; idx++)
        {
            fieldId = dictTable.fieldCnt2Id(idx);
            if (dictTable.fieldName(fieldId) != #StatusFieldName)
            {
                dataObject = _dataSource.object(fieldId);
                if (dataObject != null)
                {
                    dataObject.allowEdit(_enabled);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the starting date and ending date.
    /// </summary>
    /// <returns>
    /// true if starting date is less than ending date; otherwise, false.
    /// </returns>
    boolean validateDatePeriod()
    {
        if ((this.ValidFrom && this.ValidTo) && (this.ValidTo < this.ValidFrom))
        {
            return checkFailed("@RET5275");
        }

        if ((this.DateValidationType == RetailDateValidationTypeBase::Advanced)
            && !this.ValidationPeriodId)
        {
            return checkFailed("@RET260923");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConcurrencyMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the concurrency mode.
    /// </summary>
    /// <returns>true if the concurrency mode is legitimate; false if not.</returns>
    private boolean validateConcurrencyMode()
    {
        if (this.ConcurrencyMode == RetailDiscountConcurrency::AlwaysApply
            && this.PeriodicDiscountType != RetailDiscountOfferTypeBase::DiscountOffer
            && this.PeriodicDiscountType != RetailDiscountOfferTypeBase::Threshold)
        {
            return checkFailed("@RetailDiscount:ConcurrencyModeValidationFailure");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipValidatePriceGroup</Name>
				<Source><![CDATA[
    static delegate void skipValidatePriceGroup(EventHandlerResult _result){}

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceGroup</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Validates the price group.
    /// </summary>
    /// <returns>
    ///		true if the price group validation is ok; otherwise, false.
	/// </returns>
    protected final boolean validatePriceGroup()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        RetailPeriodicDiscount::skipValidatePriceGroup(eventHandlerResult);

        if (eventHandlerResult.hasResult() && eventHandlerResult.result() == true)
        {
            GUPPricingInstrumentation eventLog = new GUPPricingInstrumentation(tablestr(RetailPeriodicDiscount), 'skipValidatePriceGroup', newGuid(), '');
            eventLog.log();
            return true;
        }
        else
        {
            RetailDiscountPriceGroup discountPriceGroup;
            select firstOnly RecId from discountPriceGroup where discountPriceGroup.OfferId == this.OfferId;

            boolean  ret = true;
            if (discountPriceGroup.RecId == 0)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@RET260503");
                ret = false;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountLineMissingMessage</Name>
				<Source><![CDATA[
    protected str discountLineMissingMessage()
    {
        return "@Retail:DiscountLineMissing";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountLine</Name>
				<Source><![CDATA[
    private boolean validateDiscountLine()
    {
        RetailPeriodicDiscountLine discountLine;
        boolean     ret = true;

        select firstOnly RecId from discountLine where discountLine.OfferId == this.OfferId;

        if (discountLine.RecId == 0)
        {
            this.promptAndWriteValidationLog(
                RetailPricingValidationMessageSeverity::Error,
                this.discountLineMissingMessage());
            ret = false;
        }

        if (ret)
        {
            this.validateExcludeDiscountLines();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExcludeDiscountLines</Name>
				<Source><![CDATA[
    protected void validateExcludeDiscountLines()
    {
        boolean ret = false;

        RetailPeriodicDiscountLine discountLine;
        RetailPeriodicDiscountLine discountLineToValidate;
        RetailGroupMemberLine groupMemberLineToValidate;
        RetailGroupMemberLine groupMemberLine;

        while select discountLineToValidate
            where discountLineToValidate.OfferId == this.OfferId
            && discountLineToValidate.LineType == RetailDiscountLineIncludeExcludeTypeBase::Exclude
        {
            groupMemberLineToValidate = discountLineToValidate.groupMemberLine();

            while select discountLine
               where discountLine.OfferId == this.OfferId
                && discountLine.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                && discountLine.LineNum != discountLineToValidate.LineNum
            {
                groupMemberLine = discountLine.groupMemberLine();

                // Set return value to true if given group member line is a subset of current group member line.
                if (RetailGroupMemberLine::isSubset(groupMemberLineToValidate, groupMemberLine))
                {
                    ret = true;
                    break;
                }
            }            
        
            // Display a warning if none of the included discount lines include the products in excluded discount lines.
            if (!ret)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Warning,
                    "@Retail:ProductsInExcludeLinesNotPresentInIncludeLinesWarning");
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret 
            && this.validateDatePeriod()
            && this.validateConcurrencyMode()
            && RetailPricingConfigurationValidator::isValidDiscountPercentageAllowZero(this.DiscountPercentValue);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByOfferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RetailPeriodicDiscount</c> table exists.
    /// </summary>
    /// <param name="_offerId">
    /// The ID number of offer.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false
    /// </returns>
    public static boolean existsByOfferId(RetailDiscountOfferId _offerId)
    {
        return (RetailPeriodicDiscount::findByOfferId(_offerId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsShippingDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether configuration for Shipping Discounts exists.
    /// </summary>
    /// <returns>true if the configuration exists; otherwise, false.</returns>
    public static boolean existsShippingDiscounts()
    {
        RetailShippingThresholdDiscounts shippingDiscounts;
        select firstonly shippingDiscounts where shippingDiscounts.Status == RetailDisabledEnabled::Enabled;
        return shippingDiscounts.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailPeriodicDiscount</c> table.
    /// </summary>
    /// <param name="_periodicDiscount">
    /// The record ID of the <c>RetailPeriodicDiscount</c> table.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailPeriodicDiscount</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailPeriodicDiscount find(RefRecId _periodicDiscount, boolean _update = false)
    {
        RetailPeriodicDiscount periodicDiscount;

        if (_periodicDiscount && _update)
        {
            periodicDiscount.selectForUpdate(_update);
        }

        select firstOnly periodicDiscount
            where periodicDiscount.RecId == _periodicDiscount;

        return periodicDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOfferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailPeriodicDiscount</c> table, depending on offer number.
    /// </summary>
    /// <param name="_offerId">
    /// The ID number of offer.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailPeriodicDiscount</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailPeriodicDiscount findByOfferId(RetailDiscountOfferId _offerId, boolean _update = false)
    {
        RetailPeriodicDiscount periodicDisc;

        select firstonly periodicDisc
            where periodicDisc.OfferId == _offerId;

        if (periodicDisc.RecId)
        {
            periodicDisc.selectForUpdate(_update);
        }

        return periodicDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDiscountStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status of <c>RetailPeriodicDiscount</c> table that related to given OfferId.
    /// </summary>
    /// <param name = "retailCouponDiscountOfferId">OfferId</param>
    /// <param name = "discountStatus">Disabled/Enabled state</param>
    /// <returns>updated <c>RetailPeriodicDiscount</c> record</returns>
    public static RetailPeriodicDiscount updateDiscountStatus(RetailOfferIdEx3 retailCouponDiscountOfferId, RetailDisabledEnabled discountStatus)
    {
        RetailPeriodicDiscount  retailPeriodicDiscount;

        retailPeriodicDiscount.selectForUpdate(true);

        ttsBegin;
                 
        select firstonly retailPeriodicDiscount
            where retailPeriodicDiscount.OfferId == retailCouponDiscountOfferId;

        if (retailPeriodicDiscount)
        {
            retailPeriodicDiscount.Status = discountStatus;
            retailPeriodicDiscount.updateDisabledSince();

            if (RetailPricingSkipChangeTrackingForDisabledDiscountsFlight::instance().isEnabled())
            {
                // doUpdate() won't tirgger event handler, so manually trigger price change tracking.
                RetailPriceChangeTrackingEventHandlerDispatcher::scheduleBatchForOnUpdatedDataEvent(
                    retailPeriodicDiscount,
                    new ModifyFieldEventArgs(fieldNum(RetailPeriodicDiscount, Status)));
            }

            retailPeriodicDiscount.doUpdate();
        }

        ttsCommit;

        if (retailPeriodicDiscount)
        {
            // Put on its own tts to not revert the above one.
            RetailPeriodicDiscountPublisher::publishDiscountChanges(retailPeriodicDiscount);
        }

        return retailPeriodicDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfferIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the periodic discount offer identifiers of a given type that are available in a given retail channel for a given product.
    /// </summary>
    /// <param name="_channel">
    /// The channel to retrieve the periodic discount offers for.
    /// </param>
    /// <param name="_product">
    /// The product to retrieve the periodic discount offers for.
    /// </param>
    /// <param name="_offerTypeRangeValue">
    /// The periodic discount offer type range value.
    /// </param>
    /// <param name="_activeDate">
    /// Look for offers active on this date
    /// </param>
    /// <returns>
    /// A comma separated list of offer identifiers.
    /// </returns>
    public static Str60 getOfferIds(RefRecId _channel, EcoResProductRecId _product, str _offerTypeRangeValue, date _activeDate)
    {
        TmpRetailPriceCheckProduct tmpPriceCheck;
        tmpPriceCheck.Product = _product;
        tmpPriceCheck.insert();

        Map offerIds = RetailPeriodicDiscount::getOfferIdsByProductsV2( _channel, 0, tmpPriceCheck, _offerTypeRangeValue, _activeDate);
        if (offerIds.exists(_product))
        {
            return offerIds.lookup(_product);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount can be enabled.
    /// </summary>
    /// <returns>
    /// true if the discount can be enabled; otherwise, false.
    /// </returns>
    public boolean validateEnable()
    {
        boolean ret = true;

        if (this.Status == RetailDisabledEnabled::Enabled)
        {
            ret = this.validateDiscountLine() &&
                this.validatePriceGroup() &&
                this.validateQuantityDiscountTierForMultibuy() &&
                this.validateLineGroups();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteValidationLogs</Name>
				<Source><![CDATA[
    internal void deleteValidationLogs()
    {
        ttsbegin;
        RetailDiscountValidationLog validationLog;
        delete_from validationLog where validationLog.OfferId == this.OfferId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAndWriteValidationLog</Name>
				<Source><![CDATA[
    public void promptAndWriteValidationLog(
        RetailPricingValidationMessageSeverity _severity,
        RetailPricingValidationMessage _validationMessage)
    {
        ttsbegin;
        RetailDiscountValidationLog validationLog;
        validationLog.initValue();
        validationLog.OfferId = this.OfferId;
        validationLog.DateCreated = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        validationLog.Severity = _severity;
        validationLog.ValidationMessage = _validationMessage;
        validationLog.insert();
        ttscommit;

        MessageSeverity systemMessageSeverity;
        switch(_severity)
        {
            case RetailPricingValidationMessageSeverity::Error:
                systemMessageSeverity = MessageSeverity::Error;
                break;

            case RetailPricingValidationMessageSeverity::Warning:
                systemMessageSeverity = MessageSeverity::Warning;
                break;

            case RetailPricingValidationMessageSeverity::Informational:
            default:
                systemMessageSeverity = MessageSeverity::Informational;
                break;
        }


        Message::Add(systemMessageSeverity, _validationMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantityDiscountTierForMultibuy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount is a quantity discount and can be enabled.
    /// </summary>
    /// <returns>
    /// true if the discount is a quantity discount and can be enabled, or is another type of discount; otherwise, false.
    /// </returns>
    private boolean validateQuantityDiscountTierForMultibuy()
    {
        boolean ret = true;

        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::Multibuy)
        {
            RetailMultibuyDiscountLine retailMultibuyDiscountLine;

            select firstonly retailMultibuyDiscountLine
                where retailMultibuyDiscountLine.multibuyId == this.OfferId;

            if (!retailMultibuyDiscountLine)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@RetailDiscount:QuantityDiscountTierMissing");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfferIdsByProductsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the periodic discount offer identifiers of a given type that are available in a given retail channel for a given product.
    /// </summary>
    /// <param name="_channel">
    /// The channel to retrieve the periodic discount offers for.
    /// </param>
    /// <param name="_catalogId">
    /// The catalog to retrieve the periodic discount offers for.
    /// </param>
    /// <param name="_tmpRetailPriceCheckProduct">
    /// A temporary table populated with all the products RecIds that we want to fetch the offers for.
    /// </param>
    /// <param name="_offerTypeRangeValue">
    /// The periodic discount offer type range value.
    /// </param>
    /// <param name="_activeDate">
    /// Look for offers active on this date
    /// </param>
    /// <returns>
    /// A map of comma separated list of offer identifiers per product Id.
    /// </returns>
    public static server Map getOfferIdsByProductsV2(RetailChannelRecId _channel, CatalogRefRecId _catalogId, TmpRetailPriceCheckProduct _tmpRetailPriceCheckProduct, str _offerTypeRangeValue, date _activeDate)
    {
        RetailPeriodicDiscount retailPeriodicDiscount;
        Query query;
        date activeDatePlusOne = _activeDate + 1;
        date activeDateMinusOne = _activeDate - 1;
        Map mapProductOffIds = new Map(Types::Int64, Types::String);
        Str60 offerIds;
        RecId productRecId;

        void processQuery(TableId _tableId)
        {
            Common common;

            QueryRun queryRun = new QueryRun(query);
            queryRun.init();

            queryRun.setRecord(_tmpRetailPriceCheckProduct);

            while (queryRun.next())
            {
                common = queryRun.get(_tableId);
                productRecId = common.getFieldValue('Product');

                if (productRecId > 0)
                {
                    if (!mapProductOffIds.exists(productRecId))
                    {
                        mapProductOffIds.insert(productRecId, '');
                    }

                    offerIds = mapProductOffIds.lookup(productRecId);
                    retailPeriodicDiscount = queryRun.get(tableNum(RetailPeriodicDiscount));

                    offerIds += (offerIds ? ', ' : '') + retailPeriodicDiscount.OfferId;

                    // update mapProductOffIds map value
                    mapProductOffIds.insert(productRecId, offerIds);
                }
            }
        }

        // offers assigned to a category to which the product belongs
        query = new Query(queryStr(RetailChannelCategoryDiscountOffer));
        query.dataSourceTable(tableNum(RetailChannelPriceGroup)).rangeField(fieldNum(RetailChannelPriceGroup, RetailChannel)).value(queryValue(_channel));
        query.dataSourceTable(tableNum(RetailPeriodicDiscount)).rangeField(fieldNum(RetailPeriodicDiscount, PeriodicDiscountType)).value(_offerTypeRangeValue);
        query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidFrom))
            .value(strFmt('<%1', SysQuery::value(activeDatePlusOne)));
        query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidTo))
            .value(strFmt('>%1', SysQuery::value(activeDateMinusOne)));
        processQuery(tableNum(RetailAllProductCategories));

        if (_catalogId > 0)
        {
            // offers assigned to the catalog and category which the products belongs
            query = new Query(queryStr(RetailCatalogCategoryDiscountOffer));
            query.dataSourceTable(tableNum(RetailCatalogPriceGroup)).rangeField(fieldNum(RetailCatalogPriceGroup, Catalog)).value(queryValue(_catalogId));
            query.dataSourceTable(tableNum(RetailPeriodicDiscount)).rangeField(fieldNum(RetailPeriodicDiscount, PeriodicDiscountType)).value(_offerTypeRangeValue);
            query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidFrom))
            .value(strFmt('<%1', SysQuery::value(activeDatePlusOne)));
            query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidTo))
            .value(strFmt('>%1', SysQuery::value(activeDateMinusOne)));
            processQuery(tableNum(RetailAllProductCategories));
        }

        // offers assigned to the product directly
        query = new Query(queryStr(RetailChannelProductDiscountOffer));
        query.dataSourceTable(tableNum(RetailChannelPriceGroup)).rangeField(fieldNum(RetailChannelPriceGroup, RetailChannel)).value(queryValue(_channel));
        query.dataSourceTable(tableNum(RetailPeriodicDiscount)).rangeField(fieldNum(RetailPeriodicDiscount, PeriodicDiscountType)).value(_offerTypeRangeValue);
        query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidFrom))
            .value(strFmt('<%1', SysQuery::value(activeDatePlusOne)));
        query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidTo))
            .value(strFmt('>%1', SysQuery::value(activeDateMinusOne)));
        processQuery(tableNum(RetailGroupMemberLine));

        if (_catalogId > 0)
        {
            // offers assigned to the product and catalog directly
            query = new Query(queryStr(RetailCatalogProductDiscountOffer));
            query.dataSourceTable(tableNum(RetailCatalogPriceGroup)).rangeField(fieldNum(RetailCatalogPriceGroup, Catalog)).value(queryValue(_catalogId));
            query.dataSourceTable(tableNum(RetailPeriodicDiscount)).rangeField(fieldNum(RetailPeriodicDiscount, PeriodicDiscountType)).value(_offerTypeRangeValue);
            query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidFrom))
            .value(strFmt('<%1', SysQuery::value(activeDatePlusOne)));
            query.dataSourceTable(tableNum(RetailPeriodicDiscount)).addRange(fieldNum(RetailPeriodicDiscount, ValidTo))
            .value(strFmt('>%1', SysQuery::value(activeDateMinusOne)));
            processQuery(tableNum(RetailGroupMemberLine));
        }

        return mapProductOffIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDiscountOfferInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the discount offer information
    /// </summary>
    public void copyDiscountOfferInfo(RetailPeriodicDiscount origDiscountOffer)
    {
        RetailPeriodicDiscountLine  periodicDiscLine;

        // Check if there is any discount line
        select firstonly periodicDiscLine
            where periodicDiscLine.OfferId == this.OfferId;
        if (periodicDiscLine.RecId)
        {
            throw error("@RET4020");
        }

        // upodate discount info
        this.Name                       =   origDiscountOffer.Name;
        this.Description                =   origDiscountOffer.Description;
        this.Disclaimer                 =   origDiscountOffer.Disclaimer;
        this.Status                     =   RetailDisabledEnabled::Disabled;
        this.DiscountPercentValue       =   origDiscountOffer.DiscountPercentValue;
        this.ValidationPeriodId         =   origDiscountOffer.ValidationPeriodId;
        this.CurrencyCode               =   origDiscountOffer.CurrencyCode;
        this.PeriodicDiscountType       =   origDiscountOffer.PeriodicDiscountType;
        this.ConcurrencyMode            =   origDiscountOffer.ConcurrencyMode;
        this.DateValidationType         =   origDiscountOffer.DateValidationType;
        this.DiscountLedgerDimension    =   origDiscountOffer.DiscountLedgerDimension;
        this.IsDiscountCodeRequired     =   origDiscountOffer.IsDiscountCodeRequired;
        this.ValidFrom                  =   origDiscountOffer.ValidFrom;
        this.ValidTo                    =   origDiscountOffer.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDiscountPriceGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the price group from the original discount
    /// </summary>
    public void copyDiscountPriceGroups(RetailDiscountOfferId origOfferId)
    {
        RetailDiscountPriceGroup    retailDiscountPriceGroup, retailDiscountPriceGroupOriginal;

        // copy RetailDiscountPriceGroup
        ttsbegin;
        while select retailDiscountPriceGroupOriginal
            where retailDiscountPriceGroupOriginal.OfferId == origOfferId
        {
            select firstOnly forUpdate retailDiscountPriceGroup
                where retailDiscountPriceGroup.OfferId == this.OfferId
                    && retailDiscountPriceGroup.PriceDiscGroup == retailDiscountPriceGroupOriginal.PriceDiscGroup;
            if (!retailDiscountPriceGroup)
            {
                retailDiscountPriceGroup.OfferId = this.OfferId;
                retailDiscountPriceGroup.PriceDiscGroup = retailDiscountPriceGroupOriginal.PriceDiscGroup;
                retailDiscountPriceGroup.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the form data source.
    /// </summary>
    public void refreshDS()
    {
        if (FormDataUtil::getFormDataSource(this) != null)
        {
            FormDataUtil::getFormDataSource(this).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountPeriodicDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger account for periodic discount for the periodic discount type, discount amount, item and customer account passed as parameter.
    /// </summary>
    /// <param name="_offerId">
    /// The current value for the <c>RetailPeriodicOfferId</c>.
    /// </param>
    /// <param name="_periodicDiscAmount">
    /// The current value for the periodic discount amount.
    /// </param>
    /// <param name="_itemId">
    /// The current value of item ID.
    /// </param>
    /// <param name="_itemGroupId">
    /// The current value of Item group ID.
    /// </param>
    /// <param name="_custAccount">
    /// The current value of customer account.
    /// </param>
    /// <returns>
    /// The ledger account to which periodic discount is posted.
    /// </returns>
    /// <remarks>
    /// The ledger account returned is based on whether it is discount offer, mix and match or multibuy.
    /// </remarks>
    public static LedgerDimensionDefaultAccount ledgerAccountPeriodicDisc(RetailDiscountOfferId _offerId, DiscAmount _periodicDiscAmount, ItemId _itemId, RetailItemGroupId _itemGroupId, CustAccount _custAccount)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        RetailPeriodicDiscount periodicDiscount = RetailPeriodicDiscount::findByOfferId(_offerId);
        RetailParameters postingRetailSetup = RetailParameters::find();
        
        switch (postingRetailSetup.LedgerAccountType)
        {
            case RetailBookingLedgerAccountTypeBase::Periodic:
                if (periodicDiscount.DiscountLedgerDimension)
                {
                    ledgerDimensionDefaultAccount = periodicDiscount.DiscountLedgerDimension;
                }
                else
                {
                    switch (periodicDiscount.PeriodicDiscountType)
                    {
                        case RetailDiscountOfferTypeBase::DiscountOffer:
                            ledgerDimensionDefaultAccount = postingRetailSetup.OfferLedgerDimension;
                            break;
                        case RetailDiscountOfferTypeBase::MixAndMatch:
                            ledgerDimensionDefaultAccount = postingRetailSetup.MixMatchLedgerDimension;
                            break;
                        case RetailDiscountOfferTypeBase::Multibuy:
                            ledgerDimensionDefaultAccount = postingRetailSetup.MultiBuyLedgerDimension;
                            break;
                        case RetailDiscountOfferTypeBase::Threshold:
                            ledgerDimensionDefaultAccount = postingRetailSetup.ThresholdLedgerDimension;
                            break;
                    }
                }
                break;

            case RetailBookingLedgerAccountTypeBase::Standard:
                ledgerDimensionDefaultAccount = InventPosting::accountItemLedgerDimensionFromParameters(
                  InventPostingAccountItemLedgerDimensionParameters::newFromParameters(InventAccountType::SalesDisc,
                                              _itemId,
                                              _itemGroupId,
                                              0,
                                              _custAccount,
                                              CustTable::find(_custAccount).CustGroup,
                                              CustTable::find(_custAccount).TaxGroup));
                break;
        }
        
        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check line groups when enabling a mix and match discount.
    /// </summary>
    /// /// <returns>
    /// True if the line groups are configured correctly, otherwise false with a warning message.
    /// </returns>
    private boolean validateLineGroups()
    {
        boolean ret = true;

        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch)
        {
            RetailMixAndMatchLineGroups     mixAndMatchLineGroups;
            RetailDiscountLineMixAndMatch   discountLineMixAndMatch;

            select firstonly RecId from discountLineMixAndMatch
                where discountLineMixAndMatch.OfferId == this.OfferId
                notexists join mixAndMatchLineGroups
                where mixAndMatchLineGroups.mixAndMatchId == this.OfferId
                && mixAndMatchLineGroups.mixAndMatchLineGroup == discountLineMixAndMatch.linegroup;

            if (discountLineMixAndMatch.RecId)
            {
                this.promptAndWriteValidationLog(
                    RetailPricingValidationMessageSeverity::Error,
                    "@RetailDiscount:DiscountLineGroupNotFound");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisabledSince</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>DisabledSince</c> field value.
    /// </summary>
    protected void updateDisabledSince()
    {
        if (this.Status == RetailDisabledEnabled::Enabled)
        {
            this.DisabledSince = DateTimeUtil::date(DateTimeUtil::minValue());
        }
        else
        {
            this.DisabledSince = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the update event to capture <c>Status</c> changes.
    /// </summary>
    public void update()
    {
        if (this.Status != this.orig().Status)
        {
            RetailPeriodicDiscountPublisher::publishDiscountChanges(this);

            if (this.Status)
            {
                RetailPricingDeleteOrphanedMemberLineScheduler::scheduleDeletionJobIfNeeded();
            }
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@RET260901</DeveloperDocumentation>
	<FormRef>RetailDiscountOffer</FormRef>
	<Label>@RET2911</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>OfferIdx</ClusteredIndex>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>OfferIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCoupon</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ValidationLog</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailDiscountValidationLog</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodicDiscountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConcurrencyMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateValidationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercentValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodicDiscountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidationPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disclaimer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PricingPriorityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDescriptionOnFiscalReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodicDiscountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@RET3084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscountLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConcurrencyMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateValidationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercentValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodicDiscountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidationPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDiscountCodeRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disclaimer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchAllAssociatedPriceGroups</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Concurrency</Name>
			<Label>@RET6390</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConcurrencyMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS125925</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountCode</Name>
			<Label>@RET6316</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsDiscountCodeRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@RET6391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidationPeriod</Name>
			<Label>@RET3074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidationPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discountValidationPeriodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discountValidationPeriodStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discountValidationPeriodEndingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PricingPriorityNumber</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingPriorityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConcurrencyMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailDiscountConcurrency</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DateValidationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailDateValidationTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMemo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Disclaimer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMemo</ExtendedDataType>
			<Label>@RET260644</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DiscountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DiscountLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS75661</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscountPercentValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscountPercentValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDiscountCodeRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscountCodeRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OfferId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOfferIdEx3</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodicDiscountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailDiscountOfferTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailDisabledEnabled</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationPeriodId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscountValidationPeriodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PricingPriorityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPricingPriorityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PriceDiscGroup</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintDescriptionOnFiscalReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrintDescriptionOnFiscalReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchAllAssociatedPriceGroups</Name>
			<ExtendedDataType>RetailMatchAllAssociatedPriceGroups</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@RetailPricing:RetailPeriodicDiscount_ProcessingStatus</Label>
			<EnumType>RetailPricingDiscountProcessingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidationStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RetailPricingValidationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DisabledSince</Name>
			<ExtendedDataType>RetailDiscountDisabledSinceDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OfferIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OfferId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DiscountTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodicDiscountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DiscountLedgerDimension</Name>
					<Field>DiscountLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DiscountCode</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailDiscountCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DiscountCode</Name>
					<Field>DiscountCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailDiscountValidationPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailDiscountValidationPeriod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationPeriodId</Name>
					<SourceEDT>RetailDiscountValidationPeriodId</SourceEDT>
					<Field>ValidationPeriodId</Field>
					<RelatedField>periodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>periodIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPricingPriorityTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailPricingPriorityTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PricingPriorityNumber</Name>
					<Field>PricingPriorityNumber</Field>
					<RelatedField>PriorityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>