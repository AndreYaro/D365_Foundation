<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookTableDerived</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetBookTableDerived extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.AssetTransType = AssetPost::assetAccountType2AssetTransType(AssetAccountType::Acquisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        #ISOCountryRegionCodes
        boolean ret;

        ret = super(_p1);

        if (ret)
        {
            switch (_p1)
            {
                case fieldNum(AssetBookTableDerived, BookIdDerived):
                    if (this.BookIdDerived == this.BookId)
                    {
                        ret = checkFailed("@FixedAssets:FA_MessageValidation_BookAndDerivedBookMustNotBeTheSame");
                    }
                    break;

                case fieldNum(AssetBookTableDerived, AssetTransType):
                    // Verify that the derived value models of depreciation type cannot be assigned to
                    // derogatory value models.  These transactions need to be either created manually,
                    // or created by the proposal engine.
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR])
                        && AssetBookTable::find(this.BookId, false).AssetDerogatoryModel_FR
                        && (this.AssetTransType == AssetTransType::Depreciation
                        || this.AssetTransType == AssetTransType::DepreciationAdj
                        || this.AssetTransType == AssetTransType::DerogatoryDecrease
                        || this.AssetTransType == AssetTransType::DerogatoryIncrease))
                    {
                        //'%1' cannot be assigned as a derived value model as this value model is used for the derogatory depreciation.
                        ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_DerogatoryBookCannotBeDerived", this.AssetTransType));
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        AssetBookId         _assetBookId,
        AssetTransType      _assetTransType,
        AssetBookId         _bookIdDerived)
    {
        boolean ret = true;

        if (!AssetBookTableDerived::exist(_assetBookId,_assetTransType,_bookIdDerived))
        {
            ret = checkFailed(strFmt(AssetBookTableDerived::txtNotExist(),_bookIdDerived,_assetTransType,_assetBookId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        AssetBookId         _assetBookId,
        AssetTransType      _assetTransType,
        AssetBookId         _bookIdDerived)
    {
        boolean found;

        found = (select firstonly
                    RecId
                 from
                    assetBookTableDerived
                 where
                    assetBookTableDerived.BookId         == _assetBookId &&
                    assetBookTableDerived.AssetTransType == _assetTransType &&
                    assetBookTableDerived.BookIdDerived  == _bookIdDerived).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetBookTableDerived find(
        AssetBookId         _assetBookId,
        AssetTransType      _assetTransType,
        AssetBookId         _bookIdDerived,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetBookTableDerived  assetBookTableDerived;

        assetBookTableDerived.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetBookTableDerived.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetBookTableDerived
        where
            assetBookTableDerived.BookId         == _assetBookId &&
            assetBookTableDerived.AssetTransType == _assetTransType &&
            assetBookTableDerived.BookIdDerived  == _bookIdDerived;

        return assetBookTableDerived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@FixedAssets:FA_MessageValidation_DerivedBookAndTransactionTypeDoesNotExist";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransTypeForAllModels_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Defines whether the given transaction type is used for all asset value models.
    /// </summary>
    /// <param name="_assetTransType">The transaction type.</param>
    /// <returns>
    ///   True, if the given transaction type is used for all asset value models; otherwise, false.
    /// </returns>
    public static boolean isTransTypeForAllModels_RU(AssetTransType _assetTransType)
    {
        switch (_assetTransType)
        {
            case AssetTransType::Acquisition,
                AssetTransType::Disposal_RU,
                AssetTransType::DisposalSale,
                AssetTransType::DisposalScrap,
                AssetTransType::PartialTakeDown_RU,
                AssetTransType::Lending_RU,
                AssetTransType::LendingRet_RU,
                AssetTransType::CompanyIssue_RU,
                AssetTransType::CompanyReceipt_RU:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetBookTableDerived</DeveloperDocumentation>
	<FormRef>AssetBookTable</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetBookTableDerived</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BookId</TitleField1>
	<TitleField2>AssetTransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>BookTransTypeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>BookTransTypeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookIdDerived</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookIdDerived</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Derived</Name>
			<Label>@SYS21777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookIdDerived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookIdDerived</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BookTransTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookIdDerived</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBookTableBookId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@FixedAssets:FA_EntityField_PrimaryBook</EntityRelationshipRole>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBookTableBookId</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>AssetBookTableDerived</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetBookTableBookIdDerived</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@FixedAssets:FA_EntityField_DerivedBook</EntityRelationshipRole>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBookTableBookIdDerived</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>AssetBookTableDerived</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookIdDerived</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookIdDerived</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>