<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTotalPriceTolerance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTotalPriceTolerance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    display VendName vendName()
    {
        return VendTable::find(this.VendAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendTotalPriceTolerance find(VendAccount _vendAccount, boolean _forUpdate = false)
    {
        VendTotalPriceTolerance vtpt;

        if (_vendAccount)
        {
            vtpt.selectForUpdate(_forUpdate);

            select firstonly vtpt
                where vtpt.VendAccount == _vendAccount;
        }

        return vtpt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toleranceAmountForInvoiceRoundOff</Name>
				<Source><![CDATA[
    internal static TotalPriceVarianceAmount toleranceAmountForInvoiceRoundOff(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceVarianceAmount priceTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly PriceToleranceAmountForInvoiceRoundOff, RecId from vtpt
            where vtpt.VendAccount == _vendAccount;

        if (vtpt.RecId)
        {
            priceTolerance = vtpt.PriceToleranceAmountForInvoiceRoundOff;
        }
        else
        {
            priceTolerance = VendParameters::find().PriceToleranceForRoundOff;
        }
        return priceTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tolerancePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total price tolerance for the specified vendor account number.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number for which to search.
    /// </param>
    /// <returns>
    /// The total price tolerance found for the vendor account.
    /// </returns>
    /// <remarks>
    ///  The hierarchy of the search is as follows using the specified vendor:
    ///  <list type="number">
    ///   <item>
    ///   <description>The tolerance for the vendor.</description>
    ///   </item>
    ///   <item>
    ///   <description>The tolerance for all vendors in the current company.</description>
    ///   </item>
    ///   <item>
    ///   <description>A default of 0 total price tolerance.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public static TotalPriceTolerancePercentage tolerancePercentage(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceTolerancePercentage percentTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly TolerancePercentage, RecId from vtpt where vtpt.VendAccount == _vendAccount;

        // Return the tolerance if found, otherwise return 0 as the default
        if (vtpt.RecId)
        {
            percentTolerance = vtpt.TolerancePercentage;
        }
        else
        {
            percentTolerance = VendParameters::find().TotalPriceTolerancePercentage;
        }
        return percentTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tolerancePercentageForSubTotalAmount</Name>
				<Source><![CDATA[
    internal static TotalPriceTolerancePercentage tolerancePercentageForSubTotalAmount(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceTolerancePercentage percentTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly PriceTolerancePercentageForSubTotalAmount, RecId from vtpt 
            where vtpt.VendAccount == _vendAccount;

        // Return the tolerance if found, otherwise return 0 as the default
        if (vtpt.RecId)
        {
            percentTolerance = vtpt.PriceTolerancePercentageForSubTotalAmount;
        }
        else
        {
            percentTolerance = VendParameters::find().PriceTolerancePercentageForSubTotalAmount;
        }
        return percentTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tolerancePercentageForTotalDiscount</Name>
				<Source><![CDATA[
    internal static TotalPriceTolerancePercentage tolerancePercentageForTotalDiscount(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceTolerancePercentage percentTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly PriceTolerancePercentageForTotalDiscount, RecId from vtpt 
            where vtpt.VendAccount == _vendAccount;

        // Return the tolerance if found, otherwise return 0 as the default
        if (vtpt.RecId)
        {
            percentTolerance = vtpt.PriceTolerancePercentageForTotalDiscount;
        }
        else
        {
            percentTolerance = VendParameters::find().PriceTolerancePercentageForTotalDiscount;
        }
        return percentTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tolerancePercentageForCharges</Name>
				<Source><![CDATA[
    internal static TotalPriceTolerancePercentage tolerancePercentageForCharges(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceTolerancePercentage percentTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly PriceTolerancePercentageForCharges, RecId from vtpt 
            where vtpt.VendAccount == _vendAccount;

        // Return the tolerance if found, otherwise return 0 as the default
        if (vtpt.RecId)
        {
            percentTolerance = vtpt.PriceTolerancePercentageForCharges;
        }
        else
        {
            percentTolerance = VendParameters::find().PriceTolerancePercentageForCharges;
        }
        return percentTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tolerancePercentageForSalesTax</Name>
				<Source><![CDATA[
    internal static TotalPriceTolerancePercentage tolerancePercentageForSalesTax(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceTolerancePercentage percentTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly PriceTolerancePercentageForSalesTax, RecId from vtpt 
            where vtpt.VendAccount == _vendAccount;

        // Return the tolerance if found, otherwise return 0 as the default
        if (vtpt.RecId)
        {
            percentTolerance = vtpt.PriceTolerancePercentageForSalesTax;
        }
        else
        {
            percentTolerance = VendParameters::find().PriceTolerancePercentageForSalesTax;
        }
        return percentTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tolerancePercentageForInvoiceAmount</Name>
				<Source><![CDATA[
    internal static TotalPriceTolerancePercentage tolerancePercentageForInvoiceAmount(VendAccount _vendAccount)
    {
        VendTotalPriceTolerance vtpt;
        TotalPriceTolerancePercentage percentTolerance = 0;

        Debug::assert(VendParameters::find().editUseInvoiceMatching() == NoYes::Yes);
        Debug::assert(_vendAccount != '');

        select firstonly PriceTolerancePercentageForInvoiceAmount, RecId from vtpt 
            where vtpt.VendAccount == _vendAccount;

        // Return the tolerance if found, otherwise return 0 as the default
        if (vtpt.RecId)
        {
            percentTolerance = vtpt.PriceTolerancePercentageForInvoiceAmount;
        }
        else
        {
            percentTolerance = VendParameters::find().PriceTolerancePercentageForInvoiceAmount;
        }
        return percentTolerance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS328815</DeveloperDocumentation>
	<Label>@SYS130106</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>VendAccount</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>VendAccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>VendAccountIdx</PrimaryIndex>
	<ReplacementKey>VendAccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceTotalsTolerances</Name>
			<Label>@SYS130108</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<Label>@SYS130107</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForSubTotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForTotalDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForCharges</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForInvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceToleranceAmountForInvoiceRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceVarianceAmount</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendTotalPriceTolerance</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>