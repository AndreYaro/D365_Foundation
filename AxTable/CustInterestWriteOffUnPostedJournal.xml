<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestWriteOffUnPostedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterestWriteOffUnPostedJournal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified <c>ledgerJournalTran</c> record ID and interest note exists in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The <c>ledgerJournalTran</c> record ID to find.
    /// </param>
    /// <param name="_interestNote">
    /// The interest note to look for.
    /// </param>
    /// <returns>
    /// true if the <c>ledgerJournalTran</c> record ID exists in the table; otherwise, false.
    /// </returns>
    public static boolean checkExist(
        RefRecId _ledgerJournalTransId,
        InterestNote _interestNote)
    {
        boolean ret = true;

        if (!CustInterestWriteOffUnPostedJournal::exist(_ledgerJournalTransId, _interestNote))
        {
            ret = checkFailed(CustInterestWriteOffUnPostedJournal::txtNotExist());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified <c>ledgerJournalTran</c> record and interest note exists in the
    /// table.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The record ID of the <c>ledgerJournalTran</c> record to check for existence.
    /// </param>
    /// <param name="_interestNote">
    /// The interest note to check for existence.
    /// </param>
    /// <returns>
    /// true if the <c>ledgerJournalTran</c> record exists in the table; otherwise, false.
    /// </returns>
    public static boolean exist(
        RefRecId _ledgerJournalTransId,
        InterestNote _interestNote)
    {
        return (select RecId from custInterestWriteOffUnPostedJournal
                    where
                        custInterestWriteOffUnPostedJournal.LedgerJournalTrans == _ledgerJournalTransId &&
                        custInterestWriteOffUnPostedJournal.InterestNote == _interestNote).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified <c>ledgerJournalTran</c> record exists.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The record ID of the <c>ledgerJournalTran</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the <c>ledgerJournalTran</c> record exists; otherwise, false.
    /// </returns>
    public static boolean existLedgerJournalTrans(RefRecId _ledgerJournalTransId)
    {
        return (select firstonly RecId from custInterestWriteOffUnPostedJournal
                    order by InterestNote
                    where
                        custInterestWriteOffUnPostedJournal.LedgerJournalTrans == _ledgerJournalTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>CustInterestWriteOffUnPostedJournal</c> table for the specified natural key,
    /// <c>ledgerJournalTran</c> record, and interest note.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The record ID of the <c>ledgerJournalTran</c> record to find.
    /// </param>
    /// <param name="_interestNote">
    /// The interest note to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInterestWriteOffUnPostedJournal</c> table buffer if found.
    /// </returns>
    public static CustInterestWriteOffUnPostedJournal find(
        RefRecId _ledgerJournalTransId,
        InterestNote _interestNote,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestWriteOffUnPostedJournal custInterestWriteOffUnPostedJournal;

        custInterestWriteOffUnPostedJournal.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestWriteOffUnPostedJournal.concurrencyModel(_concurrencyModel);
        }

        select custInterestWriteOffUnPostedJournal
            where
                custInterestWriteOffUnPostedJournal.LedgerJournalTrans == _ledgerJournalTransId &&
                custInterestWriteOffUnPostedJournal.InterestNote == _interestNote;

        return custInterestWriteOffUnPostedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>CustInterestWriteOffUnPostedJournal</c> table for the specified
    /// <c>LedgerJournalTran</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The record ID of the <c>ledgerJournalTran</c> record to use.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInterestWriteOffUnPostedJournal</c> table buffer if found.
    /// </returns>
    public static CustInterestWriteOffUnPostedJournal findByLedgerJournalTrans(
        RefRecId _ledgerJournalTransId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestWriteOffUnPostedJournal custInterestWriteOffUnPostedJournal;

        custInterestWriteOffUnPostedJournal.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestWriteOffUnPostedJournal.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInterestWriteOffUnPostedJournal
            order by InterestNote
            where
                custInterestWriteOffUnPostedJournal.LedgerJournalTrans == _ledgerJournalTransId;

        return custInterestWriteOffUnPostedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102208";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS342298</DeveloperDocumentation>
	<Label>@SYS315383</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InterestNote</TitleField1>
	<TitleField2>LedgerJournalTrans</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>LedgerJournalTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestNote</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterestNote</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InterestNote</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterestJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterestJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInterestJour</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInterestJour_CustInterestWriteOffUnPostedJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestNote</Name>
					<SourceEDT>InterestNote</SourceEDT>
					<Field>InterestNote</Field>
					<RelatedField>InterestNote</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InterestIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>LedgerJournalTrans_CustInterestWriteOffJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>