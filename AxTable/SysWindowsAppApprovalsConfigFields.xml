<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysWindowsAppApprovalsConfigFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SysWindowsAppApprovalsConfigFields extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromWorkflowDocumentFieldElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the table buffer from the <c>WorkflowDocumentFieldElement</c>.
    /// </summary>
    /// <param name="_fieldElement">
    /// <c>WorkflowDocumentFieldElement</c> to initialize the table from.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromWorkflowDocumentFieldElement(WorkflowDocumentFieldElement _fieldElement)
    {
        this.DocumentFieldId            = _fieldElement.parmId();
        this.DocumentFieldLabel         = _fieldElement.parmLabelText();
        this.DocumentFieldName          = _fieldElement.parmName();
        this.DocumentFieldType          = _fieldElement.parmType();
        this.DocumentTableId            = _fieldElement.parmTableId();
        this.DocumentBaseType           = _fieldElement.parmBaseType();
        this.DocumentEnumId             = _fieldElement.parmEnumId();
        this.DocumentPlaceholderName    = _fieldElement.parmPlaceHolderName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSysDictField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromSysDictField(
        SysDictField _sysDictField,
        SysWindowsAppApprovalsConfigRecId _approvalConfigRecId,
        WorkflowDocumentTableId _documentTableId)
    {
        this.DocumentPlaceholderName    = strFmt('%1.%2', tableId2Name(_documentTableId), _sysDictField.name());
        this.DocumentBaseType           = _sysDictField.baseType();
        this.DocumentFieldId            = _sysDictField.id();
        this.DocumentEnumId             = _sysDictField.enumId();
        this.DocumentFieldName          = _sysDictField.name();
        this.DocumentFieldLabel         = _sysDictField.labelLabel();
        this.ApprovalsConfig            = _approvalConfigRecId;
        this.DocumentTableId            = _documentTableId;
        this.DocumentFieldType          = WorkflowDocumentFieldType::Field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.TileFieldType == SysWindowsAppTileFieldType::Generic && !this.LineNum)
        {
            this.LineNum = SysWindowsAppApprovalsConfigFields::findMaxLineNum(this.ApprovalsConfig) + 1;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean result = super(_fieldIdToCheck);

        if (result && _fieldIdToCheck == fieldNum(SysWindowsAppApprovalsConfigFields, DocumentPlaceholderName))
        {
            boolean                         documentFieldNameFound = false;
            SysWindowsAppApprovalsConfig    approval;

            // Get the approval name for the current field
            select firstonly ApprovalName from approval
                where approval.RecId == this.ApprovalsConfig;

            // Get the workflow document query based on the approval name
            var approvalDocumentField = WorkflowDocumentField_Approval::newElement(approval.ApprovalName);
            Map tokenMap = approvalDocumentField.getTokenList();

            // Check if specified field is in the map of available fields
            if (tokenMap.exists(this.DocumentPlaceholderName))
            {
                WorkflowDocumentFieldElement documentFieldElement = tokenMap.lookup(this.DocumentPlaceholderName);

                // Currently workflow document field types WorkItem and Workflow are disabled,
                // because SysWorkflowApprovalWorkitemService.getData() does not support them.
                if (   documentFieldElement.parmType() != WorkflowDocumentFieldType::Workflow
                    && documentFieldElement.parmType() != WorkflowDocumentFieldType::WorkItem)
                {
                    documentFieldNameFound = true;
                }
            }

            // Initialize a field group helper to check if the record that gets validated
            // belongs to any field groups
            var sysWindowsAppFieldGroupHelper = new SysWindowsAppFieldGroupHelper(approval.ApprovalName);

            var sysDictTable = new SysDictTable(this.DocumentTableId);

            // If the specified field was not found among the workflow tokens,
            // DocumentPreviewFieldGroup, WorkflowSummary and WorkflowOveriew field groups
            // and workflow document table titles, show an error.
            if (   !documentFieldNameFound
                && !sysWindowsAppFieldGroupHelper.memberExists(this.DocumentPlaceholderName)
                && !sysWindowsAppFieldGroupHelper.memberExists(this.DocumentPlaceholderName, identifierStr(WorkflowOverview))
                && !sysWindowsAppFieldGroupHelper.memberExists(this.DocumentPlaceholderName, identifierStr(WorkflowSummary))
                && this.DocumentFieldId != sysDictTable.titleField1()
                && this.DocumentFieldId != sysDictTable.titleField2())
            {
                // @SYS102242 = A record with Name %1 does not exist.
                return checkFailed(strfmt("@SYS102242", this.DocumentPlaceholderName));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that the record is valid by checking if its field
    /// <c>DocumentPlaceholderName</c> contains valid concatenation of correct
    /// table name and field name (when workflow document field type is
    /// <c>Field</c>) or correct table name and method name (when workflow document
    /// field type is <c>Method</c>).
    /// </summary>
    /// <returns>
    /// True if <c>DocumentPlaceholderName</c> contains valid concatenation of
    /// table name and field/method name; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        SysWindowsAppApprovalsConfig    approval;
        SysDictTable                    workflowDocumentTable;

        switch (this.DocumentFieldType)
        {
            case WorkflowDocumentFieldType::Method:
                select firstOnly ApprovalName from approval
                    where approval.RecId == this.ApprovalsConfig;

                var     workflowElement = new SysDictWorkflowElement(WorkflowElementType::Approval, approval.ApprovalName);
                TableId templateTableId = tableName2id(workflowElement.documentTableName());
                workflowDocumentTable   = new SysDictTable(templateTableId);

                if (workflowDocumentTable && this.DocumentPlaceholderName == workflowDocumentTable.name() + '.' + this.DocumentFieldName)
                {
                    // Table methods are supported only on the workflow document table, and not on
                    // the referenced tables: TSTimesheetTable.TSTimesheetLine.totalWeekHours() is
                    // not available in the lookup and doesn't pass validation. That's why instead
                    // of verifying if the end of DocumentPlaceholderName, the whole string is
                    // being compared.
                    return super();
                }
                break;
            case WorkflowDocumentFieldType::Field:
                workflowDocumentTable = new SysDictTable(this.DocumentTableId);
                if (workflowDocumentTable)
                {
                    var overviewField = new SysDictField(this.DocumentTableId, this.DocumentFieldId);
                    if (overviewField && strContains(this.DocumentPlaceholderName, workflowDocumentTable.name() + '.' + overviewField.name()))
                    {
                        // Placeholder name ends with "Workflow document table name"."Field name".
                        // Example: DocumentPlaceholderName = SalesTable.SalesLine.CostPrice,
                        // workflowDocumentTable = SalesLine, overviewField = CostPrice;
                        return super();
                    }
                }
        }

        // @SYS304417 = Field "%1" is invalid
        return checkFailed(strfmt("@SYS304417", this.DocumentPlaceholderName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMaxLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the maxmimum LineNum value for an approval configuration for generic field types.
    /// </summary>
    /// <param name="_approvalConfigRecId">
    /// The <c>SysWindowsAppApprovalsConfigRecId</c> record to find.
    /// </param>
    /// <returns>
    /// The maximum LineNum for an approval configuration record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LineNum findMaxLineNum(SysWindowsAppApprovalsConfigRecId _approvalConfigRecId)
    {
        SysWindowsAppApprovalsConfigFields tmpConfigFieldRow;

        select maxof(LineNum) from tmpConfigFieldRow
            where tmpConfigFieldRow.ApprovalsConfig == _approvalConfigRecId &&
                  tmpConfigFieldRow.TileFieldType   == SysWindowsAppTileFieldType::Generic;

        return tmpConfigFieldRow.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMinLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the minimum LineNum value for an approval configuration for generic field types.
    /// </summary>
    /// <param name="_approvalConfigRecId">
    /// The <c>SysWindowsAppApprovalsConfigRecId</c> record to find.
    /// </param>
    /// <returns>
    /// The minimum LineNum for an approval configuration record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LineNum findMinLineNum(SysWindowsAppApprovalsConfigRecId _approvalConfigRecId)
    {
        SysWindowsAppApprovalsConfigFields tmpConfigFieldRow;

        select minof(LineNum) from tmpConfigFieldRow
            where tmpConfigFieldRow.ApprovalsConfig == _approvalConfigRecId
                && tmpConfigFieldRow.TileFieldType  == SysWindowsAppTileFieldType::Generic;

        return tmpConfigFieldRow.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the order of the <c>SysWindowsAppApprovalsConfigFields</c> record down.
    /// </summary>
    /// <param name="_currentConfigField">
    /// The <c>SysWindowsAppApprovalsConfigFields</c> record to move down.
    /// </param>
    /// <returns>
    /// true if the moving of the record was successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean lineNumDown(SysWindowsAppApprovalsConfigFields _currentConfigField)
    {
        boolean                             result = false;
        SysWindowsAppApprovalsConfigFields  nextConfigField;

        ttsbegin;

        select firstonly forupdate nextConfigField
            order by LineNum asc
            where nextConfigField.ApprovalsConfig   == _currentConfigField.ApprovalsConfig
                && nextConfigField.TileFieldType    == SysWindowsAppTileFieldType::Generic
                && nextConfigField.LineNum          > _currentConfigField.LineNum;

        if (nextConfigField.RecId)
        {
            result = SysWindowsAppApprovalsConfigFields::switchLineNum(_currentConfigField, nextConfigField);
        }

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the order of the <c>SysWindowsAppApprovalsConfigFields</c> record up.
    /// </summary>
    /// <param name="_currentConfigField">
    /// The <c>SysWindowsAppApprovalsConfigFields</c> record to move up.
    /// </param>
    /// <returns>
    /// true if the moving of the record was successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean lineNumUp(SysWindowsAppApprovalsConfigFields _currentConfigField)
    {
        boolean                             result = false;
        SysWindowsAppApprovalsConfigFields  previousConfigField;

        ttsbegin;

        select firstonly forupdate previousConfigField
            order by LineNum desc
            where previousConfigField.ApprovalsConfig   == _currentConfigField.ApprovalsConfig
                && previousConfigField.TileFieldType    == SysWindowsAppTileFieldType::Generic
                && previousConfigField.LineNum          < _currentConfigField.LineNum;

        if (previousConfigField.RecId)
        {
            result = SysWindowsAppApprovalsConfigFields::switchLineNum(_currentConfigField, previousConfigField);
        }

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps two records of the <c>SysWindowsAppApprovalsConfigFields</c> table.
    /// </summary>
    /// <param name="_configFieldRow1">
    /// The first <c>SysWindowsAppApprovalsConfigFields</c> record to move.
    /// </param>
    /// <param name="_configFieldRow2">
    /// The second <c>SysWindowsAppApprovalsConfigFields</c> record to move.
    /// </param>
    /// <returns>
    /// true if the operation succeeded; otherwise, false.
    /// </returns>
    private static boolean switchLineNum(SysWindowsAppApprovalsConfigFields _configFieldRow1,
                                         SysWindowsAppApprovalsConfigFields _configFieldRow2)
    {
        boolean                             result = false;
        SysWindowsAppApprovalsConfigFields  configFields;

        ttsbegin;

        if (_configFieldRow1.RecId && _configFieldRow2.RecId)
        {
            LineNum tmpLineNum1 = _configFieldRow1.LineNum;
            LineNum tmpLineNum2 = _configFieldRow2.LineNum;

            _configFieldRow1.LineNum = 0;

            // Find minimal line number of the existing config field in the grid
            select firstOnly minof(LineNum) from configFields
                where configFields.ApprovalsConfig == _configFieldRow1.ApprovalsConfig;

            // Temporarily set selected line number to the value that is smaller than
            // the minimal line number of the grid to avoid line number overlappings
            _configFieldRow1.LineNum = configFields.LineNum - 1;
            _configFieldRow1.update();

            // Set the line number of the item next after selected one
            _configFieldRow2.LineNum = tmpLineNum1;
            _configFieldRow2.update();

            // Set the line number of the selected item
            _configFieldRow1.LineNum = tmpLineNum2;
            _configFieldRow1.update();

            result = true;
        }

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SysWindowsApp</ConfigurationKey>
	<DeveloperDocumentation>@SYS4007910</DeveloperDocumentation>
	<Label>@SYS4007911</Label>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>Idx</ClusteredIndex>
	<Modules>Project</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SystemTable>Yes</SystemTable>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalsConfig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentPlaceholderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TileFieldType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalsConfig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentBaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentEnumId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentFieldLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentFieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentFieldType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentPlaceholderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TileFieldType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ApprovalsConfig</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysWindowsAppApprovalsConfigRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentBaseType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>Types</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DocumentEnumId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EnumId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DocumentFieldId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentFieldLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LabelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentFieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkflowDocumentFieldName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentFieldType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WorkflowDocumentFieldType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentPlaceholderName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkflowDocumentFieldName</ExtendedDataType>
			<Label>@SYS16033</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DocumentTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkflowDocumentTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TileFieldType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SysWindowsAppTileFieldType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Idx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ApprovalsConfig</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TileFieldType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysWindowsAppApprovalsConfig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SysWindowsAppApprovalsConfig</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApprovalsConfig</Name>
					<Field>ApprovalsConfig</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>