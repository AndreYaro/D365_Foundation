<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuityScheduleLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRContinuityScheduleLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the new price to a different currency than the base currency.
    /// </summary>
    /// <param name="_currencyCode">
    /// The currency code to which to convert the new price.
    /// </param>
    /// <returns>
    /// The converted price.
    /// </returns>
    public Price convertPrice(CurrencyCode _currencyCode)
    {
        Price   convertedPrice;

        // Default to the price from the schedule.
        convertedPrice = this.NewPrice;

        // If there is a price to convert and a currency code passed, convert.
        if (convertedPrice != 0
            && _currencyCode)
        {
            convertedPrice = ExchangeRateHelper::curPrice2CurPrice(this.NewPrice, Ledger::accountingCurrency(CompanyInfo::current()), _currencyCode);
        }

        return convertedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the continuity event ID of the non-skipped event immediately previous
    /// to this one.
    /// </summary>
    /// <returns>
    /// The continuity eventID of previous event.  If no such event exists, returns 0.
    /// </returns>
    private MCRContinuityEventId getLastEvent()
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (this.ScheduleID)
        {
            select firstOnly EventID from mcrContinuityScheduleLine
                order by EventID desc
                where mcrContinuityScheduleLine.ScheduleID  == this.ScheduleID
                   && mcrContinuityScheduleLine.EventID     <  this.EventID
                   && mcrContinuityScheduleLine.ActionCode  != MCRContinuityActionCode::Skip
                   && mcrContinuityScheduleLine.RecId       != this.RecId;
        }

        return mcrContinuityScheduleLine.EventID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the continuity event ID for the non-skipped event immediately following
    /// the current one.
    /// </summary>
    /// <returns>
    /// The continuity event ID of the next event.  If no such event exists, returns 0.
    ///
    /// Note that the method does not detect whether the next event should ever be
    /// reached because of an End action code.
    /// </returns>
    public MCRContinuityEventId getNextEvent()
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (this.ScheduleID)
        {
            select firstOnly EventID from mcrContinuityScheduleLine
                order by EventID asc
                where mcrContinuityScheduleLine.ScheduleID == this.ScheduleID
                   && mcrContinuityScheduleLine.EventID    > this.EventID
                   && mcrContinuityScheduleLine.ActionCode != MCRContinuityActionCode::Skip;
        }

        return mcrContinuityScheduleLine.EventID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record.
    /// </summary>
    public void initValue()
    {
        super();

        this.ForecastProbability = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidInventDimCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the item dimension combination chosen in the line is valid.
    /// </summary>
    /// <returns>
    /// true if the item dimension combination is valid; otherwise, false.
    /// </returns>
    private boolean isValidInventDimCombo()
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        return inventDim.validateWriteMandatoryAndProductDim(this.ItemID, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item name for the item on the line.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    public display ItemName itemName()
    {
        InventTable inventTable;
        ItemName    itemName;

        if (this.ItemID)
        {
            inventTable = InventTable::find(this.ItemID);
            itemName    = inventTable.itemName();
        }
        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic after a field is modified depending on the passed field.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        MCRContinuityScheduleLine       mcrContinuityScheduleLine;
        InventTableModule               inventTableModule;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(MCRContinuityScheduleLine, EventID):
                select firstonly StartOrderDate, DaysFromLastEvent, PeriodCode, NumTimestoRepeat from mcrContinuityScheduleLine
                    where mcrContinuityScheduleLine.ScheduleID == this.ScheduleID
                       && mcrContinuityScheduleLine.EventID    == this.EventID
                       && mcrContinuityScheduleLine.RecId      != this.RecId;
                if (mcrContinuityScheduleLine)
                {
                    this.StartOrderDate     = mcrContinuityScheduleLine.StartOrderDate;
                    this.DaysFromLastEvent  = mcrContinuityScheduleLine.DaysFromLastEvent;
                    this.PeriodCode         = mcrContinuityScheduleLine.PeriodCode;
                    this.NumTimesToRepeat   = mcrContinuityScheduleLine.NumTimesToRepeat;
                }
                break;

            case fieldNum(MCRContinuityScheduleLine, ItemID):
                if (this.ItemID)
                {
                    // Default unit of measure is blank
                    if (!this.SalesQtyUOM)
                    {
                        inventTableModule = InventTableModule::find(
                            this.ItemID,
                            ModuleInventPurchSales::Sales);
                            this.SalesQtyUOM = inventTableModule.UnitId;
                    }

                    // Default Sales Quantity if blank
                    if (!this.SalesQty)
                    {
                        this.SalesQty = 1;
                    }
                }
                break;

            case fieldNum(MCRContinuityScheduleLine, SalesQtyUOM):
                if (this.ItemID)
                {
                    // Default unit of measure if blank
                    if (!this.SalesQtyUOM)
                    {
                        inventTableModule = InventTableModule::find(
                            this.ItemID,
                            ModuleInventPurchSales::Sales);
                        this.SalesQtyUOM = inventTableModule.UnitId;
                    }
                }
                break;

            case fieldNum(MCRContinuityScheduleLine, SalesQty):
                if (this.ItemID)
                {
                    // Default Sales Quantity
                    if (!this.SalesQty)
                    {
                        this.SalesQty = 1;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>price</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits or displays the <c>NewPrice</c> field from the
    /// <c>MCRContinuityScheduleLine</c> table.
    /// </summary>
    /// <param name="_set">
    /// A <c>Boolean</c> value that determines whether to assign a new value
    /// to the <c>NewPrice</c> field.
    /// </param>
    /// <param name="_newPrice">
    /// The new price when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The new price.
    /// </returns>
    /// <remarks>
    /// If the price has been overridden, then shows the price.  If a
    /// price is entered, then records the price, and that it has been
    /// overridden.  If a blank string is entered, erases the price,
    /// and updates that the price is no longer overridden.
    /// </remarks>
    edit MCRNewPrice price(boolean _set, Num _newPrice)
    {
        Num priceStr;

        if (_set)
        {
            if (_newPrice == "")
            {
                this.NewPrice        = 0;
                this.PriceOverridden = NoYes::No;
            }
            else
            {
                this.NewPrice        = str2num(_newPrice);
                this.PriceOverridden = NoYes::Yes;
            }
            return _newPrice;
        }

        if (this.PriceOverridden)
        {
            priceStr = strLTrim(num2str(this.NewPrice, 20, 2, 1, 0));
        }
        else
        {
            priceStr = "";
        }
        return priceStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits or displays the <c>StartOrderDate</c> field from the
    /// <c>MCRContinuityScheduleLine</c> table.
    /// </summary>
    /// <param name="_set">
    /// A <c>Boolean</c> value that determines whether to assign a new value
    /// to the <c>StartOrderDate</c> field.
    /// </param>
    /// <param name="_dateStr">
    /// The new start order data when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The start order date.
    /// </returns>
    edit MCRStartDate startDate(boolean _set, MCRDateStr _dateStr)
    {
        if (_set)
        {
            this.StartOrderDate = str2Date(_dateStr, 213);
            return _dateStr;
        }
        if (this.StartOrderDate == dateNull())
        {
            return "";
        }
        return date2StrUsr(this.StartOrderDate, DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOtherLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates other continuity schedule lines to have the same date and
    /// recurrence data when one continuity line is updated.
    /// </summary>
    public void updateOtherLines()
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        ttsBegin;

        while select forupdate mcrContinuityScheduleLine
            where mcrContinuityScheduleLine.ScheduleID == this.ScheduleID
                && mcrContinuityScheduleLine.EventID   == this.EventID
                && mcrContinuityScheduleLine.RecId     != this.RecId
        {
            this.initFromMCRContinuityScheduleLine(mcrContinuityScheduleLine);
            mcrContinuityScheduleLine.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMCRContinuityScheduleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values to <c>MCRContinuityScheduleLine</c> table from another <c>MCRContinuityScheduleLine</c> line.
    /// </summary>
    /// <param name = "_mcrContinuityScheduleLine">
    /// The buffer of <c>MCRContinuityScheduleLine</c> table will be used to initialize.
    /// </param>
    protected void initFromMCRContinuityScheduleLine(MCRContinuityScheduleLine _mcrContinuityScheduleLine)
    {
        _mcrContinuityScheduleLine.initValue();
        _mcrContinuityScheduleLine.StartOrderDate     = this.StartOrderDate;
        _mcrContinuityScheduleLine.PeriodCode         = this.PeriodCode;
        _mcrContinuityScheduleLine.DaysFromLastEvent  = this.DaysFromLastEvent;
        _mcrContinuityScheduleLine.NumTimesToRepeat   = this.NumTimesToRepeat;
        _mcrContinuityScheduleLine.PaymSchedId        = this.PaymSchedId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        MCRInventTable              mcrInventTable;
        #VendFaults

        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(MCRContinuityScheduleLine, StartOrderDate):
                // If the continuity order start date is less than todays date, issue an error
                if (this.StartOrderDate && this.StartOrderDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    ret = checkFailed("@MCR12484");
                }
                break;

            case fieldNum(MCRContinuityScheduleLine, ItemID):
                if (this.ItemID)
                {
                    mcrInventTable = MCRInventTable::findByItemId(this.ItemID);
                    if (mcrInventTable.ContinuityScheduleID)
                    {
                        ret = checkFailed("@MCR12708");
                    }
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;
        int                         numOfStartInfo;
        MCRInventTable              mcrInventTable;
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;

        ret = super();

        // Warn the user if their change will be to an event whose event ID is
        // less than the current event ID, and the schedule header's order type is
        // "Current".  Do not set ret to false.
        mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(this.ScheduleID);
        if (mcrContinuityScheduleHeader.OrderStart == MCRContinuityOrderStart::CurrentEvent
            && this.EventID < mcrContinuityScheduleHeader.CurrentEvent)
        {
            warning(strFmt("@MCR23479",
                this.EventID,
                mcrContinuityScheduleHeader.CurrentEvent));
        }

        // Event ID should be positive
        if (ret)
        {
            if (this.EventID <= 0)
            {
                ret = checkFailed("@MCR12172");
            }
        }

        // The number of times to repeate cannot be negative.
        if (this.NumTimesToRepeat < 0)
        {
            ret = checkFailed("@MCR12270");
        }

        // Probability must be a reasonable number
        if (this.ForecastProbability < 0 || this.ForecastProbability > 100)
        {
            ret = checkFailed("@MCR34593");
        }

        // Ensure each line has exactly one way of determing the start info
        if (this.StartOrderDate)
        {
            numOfStartInfo++;
        }
        if (this.DaysFromLastEvent)
        {
            numOfStartInfo++;
        }
        if (this.PeriodCode)
        {
            numOfStartInfo++;
        }

        if (numOfStartInfo < 1)
        {
            ret = checkFailed("@MCR12395");
        }

        // If it is set to repeat, the line must have a days-to-next or period code.
        // Otherwise, it is not possible to determine how often to repeat.
        if (ret
            && this.NumTimesToRepeat
            && this.DaysFromLastEvent == 0
            && this.PeriodCode == "")
        {
            ret = checkFailed("@MCR12192");
        }

        // If this is the first event, it cannot use the Days From Last value
        if (ret
            && this.DaysFromLastEvent
            && this.getLastEvent() == 0)
        {
            ret = checkFailed("@MCR12443");
        }

        mcrInventTable = MCRInventTable::findByItemId(this.ItemID);
        if (mcrInventTable.ContinuityScheduleID)
        {
            ret = checkFailed("@MCR12708");
        }

        ret = ret && this.isValidInventDimCombo();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>MCRContinuityScheduleLine</c> table.
    /// </summary>
    /// <remarks>
    /// Also updates the other lines on this event as is needed.
    /// </remarks>
    public void write()
    {
        super();
        this.updateOtherLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesScheduleSetUpEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether at least one event exists that has an action code of end.
    /// </summary>
    /// <param name="_mcrContinuityScheduleID">
    /// The continuity schedule ID of the schedule to check.
    /// </param>
    /// <returns>
    /// true if at least one event is marked as end; otherwise, false.
    /// </returns>
    private static boolean doesScheduleSetUpEnd(MCRContinuityScheduleID _mcrContinuityScheduleID)
    {
        if (MCRContinuityScheduleLine::findbySchedId(_mcrContinuityScheduleID, false))
        {
            // If records exist on the continuity schedule line then determine that
            // there is at least one event with an action code of end.
            if (MCRContinuityScheduleLine::findbySchedIdEndRecord(_mcrContinuityScheduleID, false))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            // No records found on set up.
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbySchedId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityScheduleLine</c> table.
    /// </summary>
    /// <param name="_mcrContinuityScheduleId">
    /// The continuity schedule ID of the <c>MCRContinuityScheduleLine</c> table
    /// record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityScheduleLine</c>; otherwise, an empty record.
    /// </returns>
    private static MCRContinuityScheduleLine findbySchedId(
        MCRContinuityScheduleID _mcrContinuityScheduleId,
        boolean                 _forUpdate = false)
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (_mcrContinuityScheduleId)
        {
            mcrContinuityScheduleLine.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityScheduleLine
                where mcrContinuityScheduleLine.ScheduleID == _mcrContinuityScheduleId;
        }

        return mcrContinuityScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbySchedIdEndRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityScheduleLine</c> table that
    /// has an action code marked as end.
    /// </summary>
    /// <param name="_mcrContinuityScheduleId">
    /// The continuity schedule ID of the <c>MCRContinuityScheduleLine</c> table
    /// record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityScheduleLine</c>; otherwise, an empty record.
    /// </returns>
    private static MCRContinuityScheduleLine findbySchedIdEndRecord(
        MCRContinuityScheduleID _mcrContinuityScheduleId,
        boolean                 _forUpdate = false)
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (_mcrContinuityScheduleId)
        {
            mcrContinuityScheduleLine.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityScheduleLine
                where mcrContinuityScheduleLine.ScheduleID  == _mcrContinuityScheduleId
                    && mcrContinuityScheduleLine.ActionCode == MCRContinuityActionCode::End;
        }
        return mcrContinuityScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSchedIdEventId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityScheduleLine</c> table.
    /// </summary>
    /// <param name="_mcrContinuityScheduleId">
    /// The continuity schedule ID of the <c>MCRContinuityScheduleLine</c> table
    /// record to find.
    /// </param>
    /// <param name="_mcrContinuityEventId">
    /// The continuity event ID of the <c>MCRContinuityScheduleLine</c> table record
    /// to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityScheduleLine</c>; otherwise, an empty record.
    /// </returns>
    public static MCRContinuityScheduleLine findSchedIdEventId(
        MCRContinuityScheduleID _mcrContinuityScheduleId,
        MCRContinuityEventId    _mcrContinuityEventId,
        boolean                 _forUpdate = false)
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (_mcrContinuityScheduleId && _mcrContinuityEventId)
        {
            mcrContinuityScheduleLine.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityScheduleLine
                where mcrContinuityScheduleLine.ScheduleID == _mcrContinuityScheduleId &&
                      mcrContinuityScheduleLine.EventID == _mcrContinuityEventId  ;
        }

        return mcrContinuityScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first event on the schedule.
    /// </summary>
    /// <param name="_mcrContinuityScheduleId">
    /// The continuity schedule ID of the <c>MCRContinuityScheduleLine</c> table record
    /// to find.
    /// </param>
    /// <returns>
    /// The first continuity schedle line.
    /// </returns>
    /// <remarks>
    /// Continuity schedule lines that are marked as skip are not counted.
    ///
    /// If the lowest event ID is shared among multiple lines, one of them is
    /// picked arbitrarily.
    /// </remarks>
    public static MCRContinuityScheduleLine getFirstEvent(
        MCRContinuityScheduleID _mcrContinuityScheduleId)
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (_mcrContinuityScheduleId)
        {
            select firstonly mcrContinuityScheduleLine
                order by EventID asc
                where mcrContinuityScheduleLine.ScheduleID  == _mcrContinuityScheduleId
                    && mcrContinuityScheduleLine.ActionCode != MCRContinuityActionCode::Skip;
        }

        return mcrContinuityScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retHighestEventId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the highest continuity event ID of a schedule.
    /// </summary>
    /// <param name="_mcrContinuityScheduleId">
    /// The continuity schedule ID of the <c>MCRContinuityScheduleLine</c>
    /// table records to check for highest event.
    /// </param>
    /// <returns>
    /// The highest continuity event ID.
    /// </returns>
    public static MCRContinuityEventId retHighestEventId(
        MCRContinuityScheduleID _mcrContinuityScheduleId)
    {
        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        if (_mcrContinuityScheduleId)
        {
            select firstonly EventID from mcrContinuityScheduleLine
                order by EventID desc
                where mcrContinuityScheduleLine.ScheduleID == _mcrContinuityScheduleId;
        }

        return mcrContinuityScheduleLine.EventID;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRContinuity</ConfigurationKey>
	<DeveloperDocumentation>@MCR24055</DeveloperDocumentation>
	<FormRef>MCRContinuitySchedule</FormRef>
	<Label>@MCR24055</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ScheduleID</TitleField1>
	<TitleField2>ItemID</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>KeyIndex</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>KeyIndex</PrimaryIndex>
	<ReplacementKey>KeyIndex</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartOrderDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysFromLastEvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumTimesToRepeat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceOverridden</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateStarted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQtyUOM</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EventInfo</Name>
			<Label>@MCR12436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartOrderDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysFromLastEvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumTimesToRepeat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRContinuity</Name>
			<Label>@MCR12291</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastProbability</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnGrouped</Name>
			<Label>@MCR23892</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQtyUOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateStarted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRContinuityActionCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateStarted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRProcessedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DaysFromLastEvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDaysFromLast</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvModeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EventID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityEventId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ForecastProbability</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRForecastProbability</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumTimesToRepeat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRNumTimesToRepeat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSchedId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceOverridden</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesQtyUOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScheduleID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityScheduleID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartOrderDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityOrderStartDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ScheduleID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EventIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EventID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ScheduleID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvModeId</Name>
					<SourceEDT>DlvModeId</SourceEDT>
					<Field>DlvModeId</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemID</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemID</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPeriodCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerPeriodCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodCode</Name>
					<SourceEDT>DateCode</SourceEDT>
					<Field>PeriodCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRContinuityScheduleHeader</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRContinuityScheduleHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScheduleID</Name>
					<SourceEDT>MCRContinuityScheduleID</SourceEDT>
					<Field>ScheduleID</Field>
					<RelatedField>ScheduleID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MCRContinuityScheduleId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSchedId</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymSchedId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>