<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanJob extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>KanbanJob.DueDateTime</c> field.
    /// </summary>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    public boolean checkDueDateTime()
    {
        boolean result = true;

        if (   this.RecId
            && this.DueDateTime != this.orig().DueDateTime
            && this.Status      == LeanKanbanJobStatus::Completed)
        {
            result =    result
                     && checkFailed(strFmt("@SYS319621",this.Status,this.kanbanId(),this.PlanActivityName));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>InventDimId</c> field and the <c>IssueInventDimId</c> field.
    /// </summary>
    /// <returns>
    /// true if the field values are valid; otherwise, false.
    /// </returns>
    public boolean checkInventDimIds()
    {
        KanbanJobType                       kanbanJobType;
        InventDim                           inventDim;
        InventDim                           issueInventDim;
        InventDim                           origInventDim;
        InventDim                           origIssueInventDim;
        InventDimGroupSetup                 inventDimGroupSetup;
        EcoResProductDimGroupSetup          productDimGroupSetup;
        KanbanJob                           origKanbanJob = this.orig();

        // receipt dimension
        if (   origKanbanJob
            && origKanbanJob.InventDimId != this.InventDimId)
        {
            inventDim           = this.inventDim();
            origInventDim       = origKanbanJob.inventDim();
            inventDimGroupSetup = InventDimGroupSetup::newInventTable(this.inventTable());

            if (!this.type().checkInventDimChange(origInventDim,inventDim,inventDimGroupSetup))
            {
                return false;
            }

            productDimGroupSetup = inventDimGroupSetup.ecoResProductDimGroupSetup();

            if (!InventDim::isInventDimEqualProductDim(productDimGroupSetup,origInventDim,inventDim))
            {
                return checkFailed(strFmt("@SYS135862",this.kanbanId(),this.PlanActivityName));
            }
        }

        // issue dimension
        if (   origKanbanJob
            && origKanbanJob.IssueInventDimId != this.IssueInventDimId)
        {
            issueInventDim      = this.issueInventDim();
            origIssueInventDim  = origKanbanJob.issueInventDim();
            inventDimGroupSetup = inventDimGroupSetup ? inventDimGroupSetup : InventDimGroupSetup::newInventTable(this.inventTable());

            if (!this.type().checkInventDimChange(origIssueInventDim,issueInventDim,inventDimGroupSetup))
            {
                return false;
            }

            productDimGroupSetup = productDimGroupSetup ? productDimGroupSetup : inventDimGroupSetup.ecoResProductDimGroupSetup();

            if (!InventDim::isInventDimEqualProductDim(productDimGroupSetup,origIssueInventDim,issueInventDim))
            {
                return checkFailed(strFmt("@SYS135862",this.kanbanId(),this.PlanActivityName));
            }
        }

        if (this.Type == LeanKanbanJobType::Transfer)
        {
            // receipt and issue sites
            inventDim      = inventDim ? inventDim : this.inventDim();
            issueInventDim = issueInventDim ? issueInventDim : this.issueInventDim();

            if (inventDim.InventSiteId != issueInventDim.InventSiteId)
            {
                kanbanJobType = this.type();

                if (   !kanbanJobType.mustBeInventoryControlledReceipt()
                    || !kanbanJobType.mustBeInventoryControlledIssue())
                {
                    return checkFailed(strFmt("@SYS135863",this.kanbanId(),this.PlanActivityName));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the kanban item for validity.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkInventMovement()
    {
        return KanbanItemCheckMovement::newStandard(this.inventMovement(),true,false).isAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>QuantityOrdered</c> field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkQuantityOrdered()
    {
        boolean result = true;

        if (   this.QuantityOrdered  < 0
            || (this.Status          == LeanKanbanJobStatus::Completed
            &&  this.QuantityOrdered != this.orig().QuantityOrdered))
        {
            result =    result
                     && checkFailed(strFmt("@SYS134359",this.kanbanId(),this.PlanActivityName));
        }

        if (   this.RecId
            && this.QuantityOrdered != this.orig().QuantityOrdered
            && this.Status          >  LeanKanbanJobStatus::Planned)
        {
            result =    result
                     && checkFailed(strFmt("@SYS134359",this.kanbanId(),this.PlanActivityName));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>QuantityReceived</c> field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkQuantityReceived()
    {
        Kanban          kanban;
        KanbanRule      kanbanRule;
        KanbanJobStatus kanbanJobStatus = this.status();
        boolean         result = true;

        result = result && (kanbanJobStatus.canHaveReceivedQty() || this.QuantityReceived == 0);
        result = result && (this.QuantityReceived >= 0);
        if (result &&
            kanbanJobStatus.canHaveReceivedQty())
        {
            kanban     = this.kanban();
            kanbanRule = kanban.kanbanRule();
            if (kanbanRule.AllowDeviatingQuantity)
            {
                //the deviating quantities are defined as deltas.
                result = result && this.QuantityReceived >= kanban.QuantityOrdered - kanbanRule.MinimumDeviatingQuantity;
                result = result && this.QuantityReceived <= kanban.QuantityOrdered + kanbanRule.MaximumDeviatingQuantity;
            }
            else
            {
                result = result && this.QuantityReceived == kanban.QuantityOrdered;
            }
        }

        return result ? true : checkFailed(strFmt("@SYS134360",this.kanbanId(),this.PlanActivityName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityScrapped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>QuantityScrapped</c> field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkQuantityScrapped()
    {
        if (   this.QuantityScrapped  < 0
            || (this.QuantityScrapped != 0
            &&  !this.status().canHaveScrapQty()))
        {
            return checkFailed(strFmt("@SYS134361",this.kanbanId(),this.PlanActivityName));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current <c>KanbanJob</c> record is valid.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID used to check against.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates whether errors must be added to the infolog; optional.
    /// </param>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean checkValid(
        KanbanJobRefRecId _refRecId,
        boolean           _silent = false)
    {
        boolean result = true;

        if (!_refRecId)
        {
            result = _silent ? false : checkFailed("@SYS134362");
        }

        if (   result
            && !this.RecId
            && _refRecId)
        {
            result = _silent ? false : checkFailed(strFmt(KanbanJob::txtNotExist(), _refRecId));
        }

        if (   result
            && this.legalEntity() != CompanyInfo::current())
        {
            result = _silent ? false : checkFailed(strFmt("@SYS332721",this.RecId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,this.legalEntity()))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a source document for the kanban job.
    /// </summary>
    public void createSourceDocument()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record.
    /// </summary>
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        if (!this.status().canDelete())
        {
            throw error(strFmt("@SYS138343", this.kanbanId(), this.PlanActivityName, this.Status, LeanKanbanJobStatus::NotPlanned));
        }

        this.status().deleting();
        
        if (this.type().deleteWMSOrder())
        {
            // check and eventually update a purchase line if the job is assigned to one
            LeanDocumentServiceController::updateSubcontractingDocuments(LeanDocumentCreationType::PurchaseOrders, this);

            super();

            this.type().deleteMovement();
            LeanRulesEngine::onKanbanJobDeleted(this);
            ReqEventProcessKanban::newStandard(this).runOperation();
            KanbanJobIssue::findKanbanJob(this.RecId, true).delete();
            KanbanJobReceipt::findKanbanJob(this.RecId, true).delete();
        }

        this.status().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorQuantity</Name>
				<Source><![CDATA[
    public display StrErrorQuantity errorQuantity()
    {
        StrErrorQuantity errorQuantity;

        if (this.QuantityScrapped != 0.0)
        {
            errorQuantity = strFmt('%1', this.QuantityScrapped);
        }
        return errorQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLaterJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a job with a later sequence number exists for the same parent <c>Kanban</c>
    /// record.
    /// </summary>
    /// <returns>
    /// true if at least one job with a later sequence number exists; otherwise, false.
    /// </returns>
    public boolean existLaterJob()
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence >  this.Sequence).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLaterJobGreaterStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a later job with a status that is later than the specified status exists for the
    /// same parent <c>Kanban</c> record.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <returns>
    /// true if at least one such job exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A later job is a job with a later sequence number than the current job.
    /// </remarks>
    public boolean existLaterJobGreaterStatus(LeanKanbanJobStatus _status)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence >  this.Sequence &&
                          kanbanJob.Status   > _status).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLaterJobInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a later job with a given status exists for the same parent <c>Kanban</c> record.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <returns>
    /// true if at least one later job with a given status exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A later job is a job with a later sequence number than the current job.
    /// </remarks>
    public boolean existLaterJobInStatus(LeanKanbanJobStatus _status)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence >  this.Sequence &&
                          kanbanJob.Status   == _status).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLaterJobNotInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a later job that is not in a given status exists for the same parent
    /// <c>Kanban</c> record.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <returns>
    /// true if at least one later job that is not in a given status exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A later job is a job with a later sequence number than the current job.
    /// </remarks>
    public boolean existLaterJobNotInStatus(LeanKanbanJobStatus _status)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence >  this.Sequence &&
                          kanbanJob.Status   != _status).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLaterJobOfType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a later job of a specified type exists for the same parent <c>Kanban</c> record.
    /// </summary>
    /// <param name="_leanKanbanJobType">
    /// The lean kanban job type to find.
    /// </param>
    /// <returns>
    /// true if at least one later job with the specified type exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A later job is a job with a later sequence number than the current job.
    /// </remarks>
    public boolean existLaterJobOfType(LeanKanbanJobType _leanKanbanJobType)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban        &&
                          kanbanJob.Type     == _leanKanbanJobType &&
                          kanbanJob.Sequence >  this.Sequence).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPreviousJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a previous job exists for the same parent <c>Kanban</c> record.
    /// </summary>
    /// <returns>
    /// true if at least one previous job exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A previous job is a job with a lower sequence number than the current job.
    /// </remarks>
    public boolean existPreviousJob()
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence <  this.Sequence).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPreviousJobGreaterStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a later job with a status that is larger than the specified status exists for the
    /// same parent <c>Kanban</c> record.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <returns>
    /// true if at least one such job exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A later job is a job with a later sequence number than the current job.
    /// </remarks>
    public boolean existPreviousJobGreaterStatus(LeanKanbanJobStatus _status)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence <  this.Sequence &&
                          kanbanJob.Status   > _status).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPreviousJobInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a previous job with a given status exists for the same parent <c>Kanban</c>
    /// record.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <returns>
    /// true if at least one such job exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A previous job is a job with a lower sequence number than the current job.
    /// </remarks>
    public boolean existPreviousJobInStatus(LeanKanbanJobStatus _status)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence <  this.Sequence &&
                          kanbanJob.Status   == _status).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPreviousJobNotInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a previous job that is not in a given status exists for the same parent
    /// <c>Kanban</c> record.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <returns>
    /// true if at least one such job exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A previous job is a job with a lower sequence number than the current job.
    /// </remarks>
    public boolean existPreviousJobNotInStatus(LeanKanbanJobStatus _status)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban   &&
                          kanbanJob.Sequence <  this.Sequence &&
                          kanbanJob.Status   != _status).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPreviousJobOfType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a previous job of the specified type exists for the same parent <c>Kanban</c>
    /// record.
    /// </summary>
    /// <param name="_leanKanbanJobType">
    /// The lean kanban job type to find.
    /// </param>
    /// <returns>
    /// true if at least one previous job of a specified type exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A previous job is a job with a lower sequence number than the current job.
    /// </remarks>
    public boolean existPreviousJobOfType(LeanKanbanJobType _leanKanbanJobType)
    {
        return (select firstonly RecId from kanbanJob
                    where kanbanJob.Kanban   == this.Kanban        &&
                          kanbanJob.Type     == _leanKanbanJobType &&
                          kanbanJob.Sequence <  this.Sequence).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpenWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an open output order for the current kanban job exists.
    /// </summary>
    /// <returns>
    /// true if an output order exists that has not been completed; otherwise, false.
    /// </returns>
    public boolean existsOpenWMSOrder()
    {
        WMSOrder    wmsOrder;

        if (this.IssueInventTransId)
        {
            select firstonly RecId from wmsOrder
                where wmsOrder.InventTransId    == this.IssueInventTransId
                   && (wmsOrder.InventTransType == InventTransType::KanbanJobTransferIssue
                   ||  wmsOrder.InventTransType == InventTransType::KanbanJobWIP)
                   && wmsOrder.Status           != WMSOrderStatus::Complete;
        }

        return wmsOrder.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchIdFromNotReceivedInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the batch id from the first associated inventory transaction that has not already been received.
    /// </summary>
    /// <returns>
    ///    The batch id from the first associated inventory transaction that has not already been received.
    /// </returns>
    public InventBatchId findBatchIdFromNotReceivedInventTrans()
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        if (this.RecId)
        {
            select firstonly InventBatchId from inventDim
                where inventDim.InventBatchId != ''
                exists join inventTrans
                    where inventTrans.InventTransOrigin == this.receiptInventTransOriginId()
                       && inventTrans.StatusReceipt     > StatusReceipt::Received
                       && inventTrans.InventDimId       == inventDim.InventDimId;
        }

        return inventDim.InventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goodQuantity</Name>
				<Source><![CDATA[
    public display StrGoodQuantity goodQuantity()
    {
        StrGoodQuantity goodQuantity;

        if (this.QuantityReceived != 0.0)
        {
            goodQuantity = strFmt('%1', this.QuantityReceived);
        }
        return goodQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban job has at least one output order.
    /// </summary>
    /// <returns>
    /// true if the kanban job has at least one output order; otherwise, false.
    /// </returns>
    public boolean hasWMSOrder()
    {
        WMSOrder    wmsOrder;

        if (this.IssueInventTransId)
        {
            select firstonly RecId from wmsOrder
                where wmsOrder.InventTransId    == this.IssueInventTransId
                   && (wmsOrder.InventTransType == InventTransType::KanbanJobTransferIssue
                   ||  wmsOrder.InventTransType == InventTransType::KanbanJobWIP);
        }

        return wmsOrder.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>Kanban</c> record.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromKanban(Kanban _kanban = this.kanban())
    {
        if (_kanban)
        {
            this.Kanban           = _kanban.RecId;
            this.QuantityOrdered  = _kanban.QuantityOrdered;
            this.DefaultDimension = this.copyDimension(_kanban.DefaultDimension);
            this.DueDateTime      = _kanban.DueDateTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLeanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>LeanProductionFlowActivity</c> record.
    /// </summary>
    /// <param name="_leanProductionFlowActivity">
    /// The <c>LeanProductionFlowActivity</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromLeanProductionFlowActivity(LeanProductionFlowActivity _leanProductionFlowActivity = this.leanProductionFlowActivity())
    {
        this.LeanProductionFlowActivity = _leanProductionFlowActivity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLeanScheduleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields in the current table buffer from a <c>LeanScheduleGroup</c> and a
    /// <c>LeanScheduleGroupItem</c> record.
    /// </summary>
    /// <param name="_leanScheduleGroup">
    /// The <c>LeanScheduleGroup</c> record that is used to initialize the fields.
    /// </param>
    /// <param name="_leanScheduleGroupItem">
    /// The <c>LeanScheduleGroupItem</c> record that is used to initialize the fields.
    /// </param>
    public void initFromLeanScheduleGroup(
        LeanScheduleGroup     _leanScheduleGroup,
        LeanScheduleGroupItem _leanScheduleGroupItem)
    {
        this.LeanScheduleGroupColor = _leanScheduleGroup.Color;
        this.LeanScheduleGroupName  = _leanScheduleGroup.Name;
        this.LeanScheduleItemRatio  = _leanScheduleGroupItem.ThroughputRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>PlanActivity</c> record.
    /// </summary>
    /// <param name="_planActivity">
    /// The <c>PlanActivity</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromPlanActivity(PlanActivity _planActivity = this.planActivity())
    {
        this.PlanActivityName = _planActivity.Name;

        switch (_planActivity.PlanActivityType)
        {
            case PlanActivityType::Process,
                 PlanActivityType::Operate:
                this.Type     = LeanKanbanJobType::Process;
                this.WorkCell = _planActivity.planActivityResourceRequirement().WrkCtrResourceGroup;
                break;
            case PlanActivityType::Transfer:
                this.Type     = LeanKanbanJobType::Transfer;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPlanActivityLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>PlanActivityLocation</c> record.
    /// </summary>
    /// <param name="_planActivityLocation">
    /// The <c>PlanActivityLocation</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromPlanActivityLocation(PlanActivityLocation _planActivityLocation = this.planActivityLocation())
    {
        if (_planActivityLocation)
        {
            this.wmsLocationId            = _planActivityLocation.wmsLocationId;
            this.wmsLocationDataAreaId    = _planActivityLocation.wmsLocationDataAreaId;
            this.InventLocationId         = _planActivityLocation.InventLocationId;
            this.InventLocationDataAreaId = _planActivityLocation.InventLocationDataAreaId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions for issue and receipt by merging the item dimensions and
    /// location dimensions.
    /// </summary>
    /// <param name="_kanban">
    /// A <c>Kanban</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_issueInventDim">
    /// A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_receiptInventDim">
    /// A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    public void initInventDimIds(
        Kanban    _kanban,
        InventDim _issueInventDim,
        InventDim _receiptInventDim)
    {
        this.type().initInventDimIds(_kanban,_issueInventDim,_receiptInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table record buffer.
    /// </summary>
    public void initValue()
    {
        super();
        this.Status                     = LeanKanbanJobStatus::NotPlanned;
        this.Executable                 = NoYes::Yes;
        this.LeanScheduleItemRatio      = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current table buffer.
    /// </summary>
    /// <param name="_dropEstimated">
    /// A Boolean value that defines if related inventory transactions must be created.
    /// </param>
    public void insert(boolean _dropEstimated = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.status().inserting();

        this.createSourceDocument();

        this.type().setInventTransIds();

        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }

        InventUpd_Estimated inventUpdEstimated;
        InventUpd_Estimated inventUpdEstimatedTransferReceipt;
        
        if (this.type().mustBeInventoryControlled())
        {
            if (!_dropEstimated)
            {
                InventMovement inventMovement = this.inventMovement();
                inventUpdEstimated = InventUpd_Estimated::newInventMovement(inventMovement);
                inventUpdEstimated.updateNow();

                if (inventMovement.isTransfer())
                {
                    inventMovement = this.inventMovement(InventMovSubType::TransferReceipt);
                    inventUpdEstimatedTransferReceipt = InventUpd_Estimated::newInventMovement(inventMovement);
                    inventUpdEstimatedTransferReceipt.updateNow();
                }
            }
        }

        this.updateCapacityConsumption();

        super();

        this.createKanbanJobIssue();
        this.createKanbanJobReceipt();

        if (!_dropEstimated)
        {
            this.updateEstimatedOwnerRelationship(inventUpdEstimated, inventUpdEstimatedTransferReceipt);

            ReqEventProcessKanban::newStandard(this).runOperation();
        }

        LeanRulesEngine::onKanbanJobStatusChange(this, LeanKanbanJobStatus::NotPlanned, false, true);

        this.status().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>KanbanJobIssue</c> record.
    /// </summary>
    public void createKanbanJobIssue()
    {
        if (this.type().mustHaveKanbanJobIssue())
        {
            ttsbegin;
            KanbanJobIssue kanbanJobIssue;
            kanbanJobIssue.KanbanJob = this.RecId;
            kanbanJobIssue.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanJobReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>KanbanJobReceipt</c> record.
    /// </summary>
    public void createKanbanJobReceipt()
    {
        if (this.type().mustHaveKanbanJobReceipt())
        {
            ttsbegin;
            KanbanJobReceipt kanbanJobReceipt;
            kanbanJobReceipt.KanbanJob = this.RecId;
            kanbanJobReceipt.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the inventory transaction ownership.
    /// </summary>
    /// <param name="_inventUpdEstimated">
    ///    An <c>InventUpd_Estimated</c> object that is related to the kanban job.
    /// </param>
    /// <param name="_inventUpdEstimatedTransferReceipt">
    ///    An <c>InventUpd_Estimated</c> object that is related to the kanban job transfer receipt.
    /// </param>
    public void updateEstimatedOwnerRelationship(
        InventUpd_Estimated _inventUpdEstimated,
        InventUpd_Estimated _inventUpdEstimatedTransferReceipt)
    {
        if (_inventUpdEstimated)
        {
            _inventUpdEstimated.updateOwnerRelationship();
        }

        if (_inventUpdEstimatedTransferReceipt)
        {
            _inventUpdEstimatedTransferReceipt.updateOwnerRelationship();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record referenced in the <c>InventDimId</c> field of the
    /// <c>KanbanJob</c> table.
    /// </summary>
    /// <returns>
    /// A <c>InventDim</c> table buffer.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and retrieves an inventory movement from the current <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <param name="_inventMovSubType">
    /// An <c>InventMovSubType</c> enumeration value; optional.
    /// </param>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    public InventMovement inventMovement(InventMovSubType _inventMovSubType = InventMovSubType::None)
    {
        return InventMovement::construct(this,_inventMovSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTable</c> record for the related kanban.
    /// </summary>
    /// <returns>
    /// A <c>InventTable</c> table buffer.
    /// </returns>
    public InventTable inventTable()
    {
        return this.kanban().inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryUpdatedFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether inventory transactions for the current <c>KanbanJob</c> table are financially
    /// updated.
    /// </summary>
    /// <returns>
    /// true if all inventory transactions related to the kanban job are financially updated; otherwise,
    /// false.
    /// </returns>
    /// <remarks>
    /// The method will always return false if the job must not be inventory controlled.
    /// </remarks>
    public boolean isInventoryUpdatedFinancial()
    {
        InventTransOriginKanbanJobProcess       inventTransOriginKanbanJobProcess;
        InventTransOriginKanbanJobTrsIssue      inventTransOriginKanbanJobTrsIssue;
        InventTransOriginKanbanJobTrsReceipt    inventTransOriginKanbanJobTrsReceipt;
        InventTransOriginKanbanJobWIP           inventTransOriginKanbanJobWIP;
        InventTrans                             inventTrans;
        InventTrans                             inventTrans_Status;
        InventTransType                         inventTransType;
        InventMovement                          inventMovement = this.inventMovement();

        //issue
        if (this.IssueInventTransId)
        {
            if (inventMovement)
            {
                inventTransType = inventMovement.transType();

                switch (inventTransType)
                {
                    case InventTransType::KanbanJobProcess:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobProcess
                                where inventTransOriginKanbanJobProcess.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobProcess.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Purchased
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    //WIP issue
                    case InventTransType::KanbanJobWIP:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobWIP
                                where inventTransOriginKanbanJobWIP.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobWIP.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Purchased
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    case InventTransType::KanbanJobTransferIssue:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobTrsIssue
                                where inventTransOriginKanbanJobTrsIssue.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobTrsIssue.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Purchased
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                }
            }
        }

        //receipt
        if (   (!this.IssueInventTransId
            ||  inventTrans.RecId)
            && this.InventTransId)
        {
            inventMovement = inventMovement && inventMovement.isTransfer()
                                ? this.inventMovement(InventMovSubType::TransferReceipt)
                                : this.inventMovement();

            if (inventMovement)
            {
                inventTransType = inventMovement.transType();

                switch (inventTransType)
                {
                    //process
                    case InventTransType::KanbanJobProcess:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobProcess
                                where inventTransOriginKanbanJobProcess.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobProcess.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Purchased
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    //WIP receipt
                    case InventTransType::KanbanJobWIP:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobWIP
                                where inventTransOriginKanbanJobWIP.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobWIP.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Purchased
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    //transfer
                    case InventTransType::KanbanJobTransferReceipt:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobTrsReceipt
                                where inventTransOriginKanbanJobTrsReceipt.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobTrsReceipt.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Purchased
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                }
            }
        }

        return inventTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryUpdatedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory transactions for the current <c>KanbanJob</c> table are physically
    /// updated.
    /// </summary>
    /// <returns>
    /// true if all inventory transactions related to the kanban job are physically updated; otherwise,
    /// false.
    /// </returns>
    /// <remarks>
    /// The method will always return false if the job must not be inventory controlled.
    /// </remarks>
    public boolean isInventoryUpdatedPhysical()
    {
        InventTransOriginKanbanJobProcess       inventTransOriginKanbanJobProcess;
        InventTransOriginKanbanJobTrsIssue      inventTransOriginKanbanJobTrsIssue;
        InventTransOriginKanbanJobTrsReceipt    inventTransOriginKanbanJobTrsReceipt;
        InventTransOriginKanbanJobWIP           inventTransOriginKanbanJobWIP;
        InventTrans                             inventTrans;
        InventTrans                             inventTrans_Status;
        InventTransType                         inventTransType;
        InventMovement                          inventMovement = this.inventMovement();

        //issue
        if (this.IssueInventTransId)
        {
            if (inventMovement)
            {
                inventTransType = inventMovement.transType();

                switch (inventTransType)
                {
                    //WIP issue
                    case InventTransType::KanbanJobWIP:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobWIP
                                where inventTransOriginKanbanJobWIP.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobWIP.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Deducted
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Received
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    case InventTransType::KanbanJobTransferIssue:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobTrsIssue
                                where inventTransOriginKanbanJobTrsIssue.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobTrsIssue.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Deducted
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Received
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                }
            }
        }

        //receipt
        if (   (!this.IssueInventTransId
            ||  inventTrans.RecId)
            && this.InventTransId)
        {
            inventMovement = inventMovement && inventMovement.isTransfer()
                                ? this.inventMovement(InventMovSubType::TransferReceipt)
                                : this.inventMovement();

            if (inventMovement)
            {
                inventTransType = inventMovement.transType();

                switch (inventTransType)
                {
                    //process
                    case InventTransType::KanbanJobProcess:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobProcess
                                where inventTransOriginKanbanJobProcess.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobProcess.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Deducted
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Received
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    //WIP receipt
                    case InventTransType::KanbanJobWIP:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobWIP
                                where inventTransOriginKanbanJobWIP.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobWIP.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Deducted
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Received
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                    //transfer
                    case InventTransType::KanbanJobTransferReceipt:
                        select firstonly RecId from inventTrans
                            exists join inventTransOriginKanbanJobTrsReceipt
                                where inventTransOriginKanbanJobTrsReceipt.KanbanJob         == this.RecId
                                   && inventTransOriginKanbanJobTrsReceipt.InventTransOrigin == inventTrans.InventTransOrigin
                            notexists join inventTrans_Status
                                where inventTrans_Status.InventTransOrigin == inventTrans.InventTransOrigin
                                   && ((inventTrans_Status.StatusIssue     != StatusIssue::Sold
                                   &&   inventTrans_Status.Qty             <  0)
                                   ||  (inventTrans_Status.StatusReceipt   != StatusReceipt::Received
                                   &&   inventTrans_Status.Qty             >  0));
                        break;
                }
            }
        }

        return inventTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubcontracted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the kanban job is subcontracted.
    /// </summary>
    /// <returns>
    /// true if the kanban job is subcontracted; otherwise, false.
    /// </returns>
    public boolean isSubcontracted()
    {
        return this.planActivity().isSubcontracted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record referenced in the <c>IssueInventDimId</c> field of the
    /// <c>KanbanJob</c> table.
    /// </summary>
    /// <returns>
    /// A <c>InventDim</c> table buffer.
    /// </returns>
    public InventDim issueInventDim()
    {
        return InventDim::find(this.IssueInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the kanban job issue.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    public InventTransOriginId issueInventTransOriginId()
    {
        InventTransOriginId     inventTransOriginId = 0;

        if (   this.RecId
            && this.type().mustBeInventoryControlledIssue())
        {
            inventTransOriginId = this.inventMovement().inventTransOriginId();
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line related to the kanban job issue.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    public SourceDocumentLineRefRecId issueSourceDocumentLine()
    {
        KanbanJobIssue  kanbanJobIssue;

        if (this.RecId)
        {
            select firstonly SourceDocumentLine from kanbanJobIssue
                where kanbanJobIssue.KanbanJob == this.RecId;
        }

        return kanbanJobIssue.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the item of the related <c>Kanban</c> record.
    /// </summary>
    /// <returns>
    /// The item of the related <c>Kanban</c> record.
    /// </returns>
    public ItemId itemId()
    {
        return this.kanban().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDueDateTime</Name>
				<Source><![CDATA[
    display DateDisplay jobDueDateTime()
    {
        DateDisplay dueDateTime;

        if (this.Type == LeanKanbanJobType::Process)
        {
            dueDateTime = DateTimeUtil::toStr(this.DueDateTime);
        }

        return dueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>Kanban</c> record referenced in the table field Kanban.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>Kanban</c> table buffer.
    /// </returns>
    public Kanban kanban(boolean _forUpdate = false)
    {
        return Kanban::find(this.Kanban,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanFlow</c> record from which the current <c>KanbanJob</c> record is derived.
    /// </summary>
    /// <returns>
    /// A buffer of the <c>KanbanFlow</c> table.
    /// </returns>
    public KanbanFlow kanbanFlow()
    {
        Kanban      kanban;
        KanbanRule  kanbanRule;
        KanbanFlow  kanbanFlow;

        select kanbanFlow
            exists join kanbanRule
                where kanbanRule.KanbanFlow == kanbanFlow.RecId
            exists join kanban
                where kanban.KanbanRule     == kanbanRule.RecId &&
                      kanban.RecId          == this.Kanban;

        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban ID.
    /// </summary>
    /// <returns>
    /// A <c>KanbanId</c> string value.
    /// </returns>
    public KanbanId kanbanId()
    {
        Kanban  kanban;

        if (this.Kanban)
        {
            select firstonly KanbanId from kanban
                where kanban.RecId == this.Kanban;
        }

        return kanban.KanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>KanbanJobIssue</c> record related to the current record.
    /// </summary>
    /// <returns>
    /// A <c>KanbanJobIssue</c> record.
    /// </returns>
    public KanbanJobIssue kanbanJobIssue()
    {
        return KanbanJobIssue::findKanbanJob(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>KanbanJobReceipt</c> record related to the current record.
    /// </summary>
    /// <returns>
    /// A <c>KanbanJobReceipt</c> record.
    /// </returns>
    public KanbanJobReceipt kanbanJobReceipt()
    {
        return KanbanJobReceipt::findKanbanJob(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanJobSchedule</c> record for the current table buffer.
    /// </summary>
    /// <returns>
    /// A <c>KanbanJobSchedule</c> table buffer.
    /// </returns>
    public KanbanJobSchedule kanbanJobSchedule()
    {
        return KanbanJobSchedule::findJob(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanRule</c> record from which the current <c>KanbanJob</c> record is derived.
    /// </summary>
    /// <returns>
    /// A <c>KanbanRule</c> table buffer.
    /// </returns>
    public KanbanRule kanbanRule()
    {
        Kanban      kanban;
        KanbanRule  kanbanRule;

        if (this.Kanban)
        {
            select kanbanRule
                exists join kanban
                    where kanban.KanbanRule     == kanbanRule.RecId &&
                          kanban.RecId          == this.Kanban;
        }

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowActivity</c> record for the current table buffer.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowActivity</c> table buffer.
    /// </returns>
    public LeanProductionFlowActivity leanProductionFlowActivity()
    {
        return LeanProductionFlowActivity::find(this.LeanProductionFlowActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowReference</c> record that is related to the kanban job.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowReference</c> table buffer.
    /// </returns>
    public LeanProductionFlowReference leanProductionFlowReference()
    {
        return LeanProductionFlowReference::findPlanReference(this.planReference().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LegalEntity</c> value that is related to the current record.
    /// </summary>
    /// <returns>
    /// A <c>LegalEntity</c> type value.
    /// </returns>
    public LegalEntity legalEntity()
    {
        return this.kanban().LegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values of the <c>dimension</c> field based on the <c>InventDim</c> record buffer
    /// values.
    /// </summary>
    /// <param name="_newInventDim">
    /// The <c>InventDim</c> record buffer linked to the current <c>KanbanJob</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    /// The <c>InventDim</c> record buffer that was linked to the current <c>KanbanJob</c> record buffer.
    /// </param>
    public void linkInventDim2Dimension(
        InventDim _newInventDim,
        InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge            = DimensionMerge::newFromTable(this,this.legalEntity()))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergedInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges two <c>InventDim</c> table buffers.
    /// </summary>
    /// <param name="_itemInventDim">
    /// A <c>InventDim</c> table buffer.
    /// </param>
    /// <param name="_locationInventDim">
    /// A <c>InventDim</c> table buffer.
    /// </param>
    /// <returns>
    /// The merged <c>inventDim</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The product dimensions are copied from the first buffer to the second.All inactive dimensions from
    /// the dimension groups are cleared.
    /// </remarks>
    public InventDimId mergedInventDimId(
        InventDim                       _itemInventDim,
        InventDim                       _locationInventDim)
    {
        InventTable                     inventTable = InventTable::find(this.itemId());
        InventDim                       inventDim = _locationInventDim.data();

        EcoResProductDimGroupSetup::copyProductDimensionsForProductMaster(inventTable.Product, _itemInventDim, inventDim);
        inventDim.clearNotActiveDim(InventDimGroupSetup::newInventTable(inventTable));
        
        if (KanbanInitFromInventDimInventoryStatusFlight::instance().isEnabled() && _itemInventDim.InventStatusId)
        {
            inventDim.InventStatusId = _itemInventDim.InventStatusId;
        }

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>kanbanJob</c> must be automatically reserved.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean mustBeAutoReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next job for the current <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The next job, if one exists; otherwise, a blank record.
    /// </returns>
    public KanbanJob nextJob(boolean _forUpdate = false)
    {
        KanbanJob kanbanJob;

        if (this.RecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                order by Sequence
                where kanbanJob.Kanban   == this.Kanban   &&
                      kanbanJob.Sequence >  this.Sequence;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_Kanban::KanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanActivity</c> record for the current table buffer.
    /// </summary>
    /// <returns>
    /// A <c>PlanActivity</c> table buffer.
    /// </returns>
    public PlanActivity planActivity()
    {
        LeanProductionFlowActivity  leanProductionFlowActivity;
        PlanActivity                planActivity;

        if (this.LeanProductionFlowActivity)
        {
            select firstonly planActivity
                exists join leanProductionFlowActivity
                    where leanProductionFlowActivity.RecId        == this.LeanProductionFlowActivity
                       && leanProductionFlowActivity.PlanActivity == planActivity.RecId;
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivityLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanActivityLocation</c> record for the current table buffer.
    /// </summary>
    /// <returns>
    /// A <c>PlanActivityLocation</c> table buffer.
    /// </returns>
    public PlanActivityLocation planActivityLocation()
    {
        LeanProductionFlowActivity  leanProductionFlowActivity;
        PlanActivityLocation        planActivityLocation;
        PlanActivity                planActivity;

        if (this.LeanProductionFlowActivity)
        {
            select firstonly planActivityLocation
                exists join planActivity
                    where planActivity.RecId == planActivityLocation.PlanActivity
                exists join leanProductionFlowActivity
                    where leanProductionFlowActivity.RecId        == this.LeanProductionFlowActivity
                       && leanProductionFlowActivity.PlanActivity == planActivity.RecId;
        }

        return planActivityLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanReference</c> record that is related to the kanban job.
    /// </summary>
    /// <returns>
    /// A <c>PlanReference</c> table buffer.
    /// </returns>
    public PlanReference planReference()
    {
        PlanReference       planReference;

        if (this.Kanban)
        {
            planReference = this.kanban().planReference();
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the previous job for the current <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The previous job, if one exists; otherwise, a blank record.
    /// </returns>
    public KanbanJob previousJob(boolean _forUpdate = false)
    {
        KanbanJob kanbanJob;

        if (this.RecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                order by Sequence desc
                where kanbanJob.Kanban   == this.Kanban   &&
                      kanbanJob.Sequence <  this.Sequence;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousJobNotInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the previous job for the current <c>KanbanJob</c> record that is not in a specified
    /// status.
    /// </summary>
    /// <param name="_status">
    /// The status to check.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The previous job, if one exists; otherwise, a blank record.
    /// </returns>
    public KanbanJob previousJobNotInStatus(
        LeanKanbanJobStatus _status,
        boolean             _forUpdate = false)
    {
        KanbanJob kanbanJob;

        if (this.RecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                where kanbanJob.Kanban   == this.Kanban   &&
                      kanbanJob.Sequence <  this.Sequence &&
                      kanbanJob.Status   != _status;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a string representation of the <c>queryValue</c> method that displays inventory transactions related to the kanban job.
    /// </summary>
    /// <returns>
    /// A string representation of the <c>queryValue</c> method.
    /// </returns>
    public str queryValueInventTransId()
    {
        str result;

        if (this.InventTransId)
        {
            result = strFmt('((%1 == \"%2\"))',fieldStr(InventTransOrigin,InventTransId),this.InventTransId);
        }

        if (this.IssueInventTransId)
        {
            if (result)
            {
                result += ' || ';
            }
            result += strFmt('((%1 == \"%2\"))',fieldStr(InventTransOrigin,InventTransId),this.IssueInventTransId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the kanban job receipt.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    public InventTransOriginId receiptInventTransOriginId()
    {
        InventTransOriginId         inventTransOriginId = 0;

        if (   this.RecId
            && this.type().mustBeInventoryControlledReceipt())
        {
            inventTransOriginId = this.inventMovement(InventMovSubType::TransferReceipt).inventTransOriginId();
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line related to the kanban job receipt.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    public SourceDocumentLineRefRecId receiptSourceDocumentLine()
    {
        KanbanJobReceipt  kanbanJobReceipt;

        if (this.RecId)
        {
            select firstonly SourceDocumentLine from kanbanJobReceipt
                where kanbanJobReceipt.KanbanJob == this.RecId;
        }

        return kanbanJobReceipt.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban job quantity that can be reserved.
    /// </summary>
    /// <returns>
    /// A <c>InventQty</c> value that defines the quantity that can be reserved.
    /// </returns>
    /// <remarks>
    /// The method is used by the inventory movement.
    /// </remarks>
    public InventQty reservQty()
    {
        InventQty   reservQty = 0;

        if (this.type().mustBeInventoryControlledIssue())
        {
            if (!this.QuantityReceived)
            {
                reservQty = -this.QuantityOrdered;
            }
        }

        return reservQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduledPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the schedule period date of a kanban job.
    /// </summary>
    /// <returns>
    /// A company timezone date.
    /// </returns>
    public display TransDate scheduledPeriodDate()
    {
        TransDate           scheduledPeriodDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ActualStartDateTime,DateTimeUtil::getCompanyTimeZone()));
        KanbanJobSchedule   kanbanJobSchedule;

        if (this.Status == LeanKanbanJobStatus::Planned
            ||  this.Status == LeanKanbanJobStatus::Prepared)
        {
            kanbanJobSchedule = this.kanbanJobSchedule();
            if (kanbanJobSchedule.RecId)
            {
                scheduledPeriodDate = kanbanJobSchedule.PlannedPeriod;
            }
        }
        return scheduledPeriodDate; //company TZ
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the subcontracting service quantity to be used for the current job.
    /// </summary>
    /// <param name="_planActivityService">
    ///    The service settings; optional.
    /// </param>
    /// <param name="_planActivity">
    ///    The <c>PlanActivity</c> record that is related to the current kanban job; optional.
    /// </param>
    /// <param name="_targetUnitOfMeasure">
    ///    A record ID of the <c>UnitOfMeasure</c> table; optional.
    /// </param>
    /// <param name="_canUseOrderedQuantityIfNotCompleted">
    ///    A Boolean value that defines if ordered quantities can be used if the kanban job was is not completed; optional.
    /// </param>
    /// <returns>
    ///    The service quantity in the specified target unit.
    /// </returns>
    public InventQty serviceQuantity(
        PlanActivityService _planActivityService                 = PlanActivityService::findKanbanJob(this,true),
        PlanActivity        _planActivity                        = this.planActivity(),
        UnitOfMeasureRecId  _targetUnitOfMeasure                 = _planActivityService.ServiceUnitOfMeasure,
        boolean             _canUseOrderedQuantityIfNotCompleted = true)
    {
        InventTable         inventTable;
        InventQty           serviceQuantity;
        UnitOfMeasureRecId  serviceUnitOfMeasure;
        InventQty           quantityIfNotCompleted = _canUseOrderedQuantityIfNotCompleted ? this.QuantityOrdered : 0;

        if (   _planActivityService
            && _planActivity
            && _planActivityService.PlanActivity == _planActivity.RecId)
        {
            inventTable = this.inventTable();

            switch (_planActivityService.ServiceQuantityCalculationBase)
            {
                case PlanActivityServiceQuantityBase::Jobs:
                    serviceQuantity      = 1.0;
                    serviceUnitOfMeasure = _planActivityService.ServiceUnitOfMeasure;
                    break;

                case PlanActivityServiceQuantityBase::ProductQuantityGood:
                    serviceQuantity      = this.Status == LeanKanbanJobStatus::Completed
                                                ? this.QuantityReceived
                                                : quantityIfNotCompleted;

                    serviceUnitOfMeasure = UnitOfMeasure::findBySymbol(inventTable.inventUnitId()).RecId;
                    break;

                case PlanActivityServiceQuantityBase::TotalOutputItemQuantity:
                    serviceQuantity      = this.Status == LeanKanbanJobStatus::Completed
                                                ? this.QuantityReceived + this.QuantityScrapped
                                                : quantityIfNotCompleted;
                    serviceUnitOfMeasure = UnitOfMeasure::findBySymbol(inventTable.inventUnitId()).RecId;
                    break;

                case PlanActivityServiceQuantityBase::ActivityTime:
                    // get the ratio that is calculated for the runtime in seconds
                    serviceQuantity      = this.Status == LeanKanbanJobStatus::Completed
                                                ? this.QuantityReceived
                                                : quantityIfNotCompleted;

                    serviceQuantity      = PlanActivityTimeCalculation::newPlannedActivity(_planActivity,
                                                                                           inventTable.ItemId,
                                                                                           this.InventDimId,
                                                                                           serviceQuantity,
                                                                                           UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(inventTable.ItemId).inventUnitId()),
                                                                                           this.LeanScheduleItemRatio).runTimeSeconds();
                    serviceUnitOfMeasure = ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Seconds);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            // apply the service ratio and convert
            serviceQuantity = serviceQuantity * _planActivityService.ServiceRatio;
            serviceQuantity = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId,
																					this.InventDimId,
																					serviceQuantity,
																					serviceUnitOfMeasure,
																					_targetUnitOfMeasure,
																					NoYes::Yes);
        }

        return serviceQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>inventDimId</c> field and applies default
    /// values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId _inventDimId,
        InventDim   _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId         = _inventDimId;
        this.InventDimDataAreaId = this.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIssueInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> value to the <c>IssueInventDimId</c> field.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value to apply to the <c>InventDimId</c> field.
    /// </param>
    public void setIssueInventDimId(InventDimId _inventDimId)
    {
        this.IssueInventDimId         = _inventDimId;
        this.IssueInventDimDataAreaId = this.IssueInventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKanbanJobCapacitySum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes <c>KanbanJobCapacitySum</c> record for the current record.
    /// </summary>
    /// <param name="_leanWorkCellScheduleCapacity">
    /// A <c>LeanWorkCellScheduleCapacity</c> object used for the calculation; optional.
    /// </param>
    /// <param name="_writeKanbanJobCapacitySum">
    /// A Boolean value that defines if the capacity sum must be written to the database; optional.
    /// </param>
    /// <returns>
    /// The <c>KanbanJobCapacitySum</c> record.
    /// </returns>
    public KanbanJobCapacitySum setKanbanJobCapacitySum(
        LeanWorkCellScheduleCapacity _leanWorkCellScheduleCapacity = null,
        boolean                      _writeKanbanJobCapacitySum    = true)
    {
        KanbanJobCapacitySum            kanbanJobCapacitySum;
        Seconds                         capacityConsumptionSeconds;
        InventQty                       capacityConsumptionThroughput;
        LeanWorkCellScheduleCapacity    leanWorkCellScheduleCapacity = _leanWorkCellScheduleCapacity;

        if (   this.RecId
            && this.Status <= LeanKanbanJobStatus::Planned
            && this.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            ttsbegin;
            if (!leanWorkCellScheduleCapacity)
            {
                leanWorkCellScheduleCapacity = LeanWorkCellScheduleCapacity::newPlanActivity(this.planActivity(),this.DueDateTime);
            }
            capacityConsumptionSeconds = leanWorkCellScheduleCapacity.estimatedCapacityConsumptionSeconds(this);

            switch (leanWorkCellScheduleCapacity.modelType())
            {
                case LeanProdFlowModelTypes::Hours:
                    kanbanJobCapacitySum          = KanbanJobCapacitySum::setPlannedCapacitySeconds(this.RecId,
                                                                                                    capacityConsumptionSeconds,
                                                                                                    _writeKanbanJobCapacitySum);
                    break;

                case LeanProdFlowModelTypes::Throughput:
                    capacityConsumptionThroughput = leanWorkCellScheduleCapacity.estimatedCapacityConsumptionThroughput(this);
                    kanbanJobCapacitySum          = KanbanJobCapacitySum::setPlannedCapacityThroughput(this.RecId,
                                                                                                       capacityConsumptionThroughput,
                                                                                                       leanWorkCellScheduleCapacity.capacityUnitOfMeasure(),
                                                                                                       capacityConsumptionSeconds,
                                                                                                       _writeKanbanJobCapacitySum);
                    break;
            }
            ttscommit;
        }

        return kanbanJobCapacitySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>KanbanJobStatus</c> class from the current table buffer.
    /// </summary>
    /// <param name="_updateKanban">
    /// A Boolean value that indicates a parameter for the <c>KanbanJobStatus</c> object; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanJobStatus</c> class.
    /// </returns>
    public KanbanJobStatus status(boolean _updateKanban = true)
    {
        return KanbanJobStatus::newKanbanJob(this,_updateKanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throughputRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the throughput ratio for the current record.
    /// </summary>
    /// <returns>
    /// the throughput ratio.
    /// </returns>
    public LeanThroughputRatio throughputRatio()
    {
        LeanScheduleGroup       leanScheduleGroup;
        LeanScheduleGroupItem   leanScheduleGroupItem;
        LeanScheduleGroupEntrySingle    leanScheduleGroupEntrySingle;
        LeanScheduleGroupEntryGroup     leanScheduleGroupEntryGroup;
        ForecastItemAllocationLine      forecastItemAllocationLine;

        ItemId itemId = this.ItemId();

        if (this.LeanScheduleGroupName
         && this.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            select firstonly ThroughputRatio from leanScheduleGroupItem
            join TableId from leanScheduleGroup
                order by WorkCell desc
                where leanScheduleGroup.RecId     == leanScheduleGroupItem.ScheduleGroup
                   && leanScheduleGroup.Name      == this.LeanScheduleGroupName
                   && (leanScheduleGroup.WorkCell == this.WorkCell
                    ||  !leanScheduleGroup.WorkCell)
                exists join leanScheduleGroupEntrySingle
                    where leanScheduleGroupEntrySingle.LeanScheduleGroupItem    == leanScheduleGroupItem.RecId
                        && leanScheduleGroupEntrySingle.ItemId                  == itemId;

            if (!leanScheduleGroupItem)
            {
                select firstonly ThroughputRatio from leanScheduleGroupItem
                join TableId from leanScheduleGroup
                    order by WorkCell desc
                    where leanScheduleGroup.RecId     == leanScheduleGroupItem.ScheduleGroup
                       && leanScheduleGroup.Name      == this.LeanScheduleGroupName
                       && (leanScheduleGroup.WorkCell == this.WorkCell
                        ||  !leanScheduleGroup.WorkCell)
                    exists join leanScheduleGroupEntryGroup
                        where leanScheduleGroupEntryGroup.LeanScheduleGroupItem     == leanScheduleGroupItem.RecId
                    exists join forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId                   == leanScheduleGroupEntryGroup.AllocationId
                       && forecastItemAllocationLine.ItemId                         == itemId;
            }
        }

        return leanScheduleGroupItem ? leanScheduleGroupItem.ThroughputRatio : 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>KanbanJobType</c> class from the current table buffer.
    /// </summary>
    /// <returns>
    /// An instance of the <c>KanbanJobType</c> class.
    /// </returns>
    public KanbanJobType type()
    {
        return KanbanJobType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current table record.
    /// </summary>
    /// <param name="_dropEstimated">
    /// A Boolean value that defines if related inventory transactions must be updated.
    /// </param>
    /// <param name="_createMode">
    /// A Boolean value that indicates if the kanban job is in the process of being created.
    /// </param>
    public void update(
        boolean _dropEstimated = false,
        boolean _createMode    = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        KanbanJob this_Orig = this.orig();

        this.status().updating();

        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }

        ReqEventProcessParm reqEventProcessParm;
        if (!_dropEstimated && this.type().mustBeInventoryControlled())
        {
            InventMovement inventMovement = this.inventMovement();
            reqEventProcessParm = ReqEventProcessParm::newInventMovement(inventMovement);

            InventUpd_Estimated inventUpd_Estimated = InventUpd_Estimated::newInventMovement(inventMovement);
            if (_createMode)
            {
                inventUpd_Estimated.parmPreEstimated(0);
                inventUpd_Estimated.parmTransEstimated(inventMovement.remainPhysical());
                inventUpd_Estimated.parmEstimated(inventUpd_Estimated.parmTransEstimated());
            }
            inventUpd_Estimated.updateNow();

            InventUpd_Estimated inventUpd_EstimatedTransferReceipt;
            if (inventMovement.isTransfer())
            {
                inventMovement = this.inventMovement(InventMovSubType::TransferReceipt);
                inventUpd_EstimatedTransferReceipt = InventUpd_Estimated::newInventMovement(inventMovement);
                if (_createMode)
                {
                    inventUpd_EstimatedTransferReceipt.parmPreEstimated(0);
                    inventUpd_EstimatedTransferReceipt.parmTransEstimated(inventMovement.remainPhysical());
                    inventUpd_EstimatedTransferReceipt.parmEstimated(inventUpd_EstimatedTransferReceipt.parmTransEstimated());
                }
                inventUpd_EstimatedTransferReceipt.updateNow();
            }

            if (_createMode)
            {
                this.updateEstimatedOwnerRelationship(inventUpd_Estimated, inventUpd_EstimatedTransferReceipt);
            }
        }

        if (this.Status != this_Orig.Status)
        {
            this.setExecutable();
        }

        if (   !_createMode
            && (this.QuantityOrdered  != this_Orig.QuantityOrdered
            ||  this.DueDateTime      != this_Orig.DueDateTime
            ||  this.ExpectedDateTime != this_Orig.ExpectedDateTime
            ||  this.Status           != this_Orig.Status))
        {
            this.type().updateKanbanJobPickingList();
        }

        if (!_createMode)
        {
            this.type().updateKanban();
        }

        this.updateCapacityConsumption();

        super();

        if (!_dropEstimated)
        {
            ReqEventProcessKanban::newStandard(this, false, false, reqEventProcessParm).runOperation();
        }

        this.status().updated(this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the valid status of the job.
    /// </summary>
    protected void setExecutable()
    {
        this.Executable = this.type().isExecutable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ordered quantity of following jobs.
    /// </summary>
    /// <param name="_orderedQuantity">
    ///    The new ordered quantity.
    /// </param>
    /// <remarks>
    ///    The method is called when a kanban job is completed or the ordered quantity of a transfer job is changed.
    /// </remarks>
    public void updateOrderedQuantities(KanbanJobQuantity _orderedQuantity)
    {
        KanbanJob       kanbanJob;
        KanbanJob       kanbanJobOrig;
        KanbanJobStatus kanbanJobStatus;
        KanbanId        kanbanId;
        boolean         result;

        ttsbegin;

        kanbanJob = this.nextJob(true);
        while (kanbanJob)
        {
            if (kanbanJob.QuantityOrdered != _orderedQuantity)
            {
                kanbanJobOrig.data(kanbanJob);

                kanbanJob.QuantityOrdered = _orderedQuantity;
                kanbanJob.update();

                // ensure plan is in sync
                KanbanJobSchedulerPlanUpdate::newStandard(kanbanJob,kanbanJobOrig).run();
            }

            //if the new quantity is zero, automatically end all following jobs
            if (!_orderedQuantity)
            {
                kanbanJobStatus = kanbanJob.status(true);
                result          = kanbanJobStatus.run(LeanKanbanJobStatus::Completed);
                kanbanId        = kanbanJob.kanban().KanbanId;

                if (result)
                {
                    info(strFmt("@SYS310072",kanbanId,kanbanJob.PlanActivityName,kanbanJob.QuantityOrdered));
                }
                else
                {
                    warning(strFmt("@SYS310073",kanbanId,kanbanJob.PlanActivityName));
                }
            }
            kanbanJob = kanbanJob.nextJob(true);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ok;

        ok = super();
        ok = ok && this.checkQuantityOrdered();
        ok = ok && this.checkQuantityReceived();
        ok = ok && this.checkQuantityScrapped();
        ok = ok && this.checkInventDimIds();
        ok = ok && this.checkDueDateTime();
        ok = ok && this.checkInventMovement();
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrderQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity of output orders that is related to the current kanban job.
    /// </summary>
    /// <param name="_openOrdersOnly">
    /// A Boolean value that determines whether only open output orders must be considered; optional.
    /// </param>
    /// <returns>
    /// The quantity of output orders that are related to the current kanban job.
    /// </returns>
    public InventQty wmsOrderQuantity(boolean _openOrdersOnly = true)
    {
        WMSOrder    wmsOrder;

        if (this.IssueInventTransId)
        {
            select sum(Qty) from wmsOrder
                where wmsOrder.InventTransId    == this.IssueInventTransId
                   && (wmsOrder.InventTransType == InventTransType::KanbanJobTransferIssue
                   ||  wmsOrder.InventTransType == InventTransType::KanbanJobWIP)
                   && (wmsOrder.Status          != WMSOrderStatus::Complete
                   ||  !_openOrdersOnly);
        }

        return wmsOrder.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the shipment record of this kanban job, if it is available.
    /// </summary>
    /// <returns>
    /// The <c>WMSShipment</c> record buffer of this kanban job, if it is available; otherwise, an empty
    /// record.
    /// </returns>
    public WMSShipment wmsShipment()
    {
        WMSShipment     wmsShipment;
        WMSOrderTrans   wmsOrderTrans;
        WMSOrder        wmsOrder;

        if (this.IssueInventTransId)
        {
            select firstonly wmsShipment
                exists join wmsOrderTrans
                    where wmsOrderTrans.ShipmentId == wmsShipment.ShipmentId
                exists join wmsOrder
                    where wmsOrder.OrderId       == wmsOrderTrans.OrderId
                       && wmsOrder.DataAreaId    == this.IssueInventTransDataAreaId
                       && wmsOrder.InventTransId == this.IssueInventTransId;
        }

        return wmsShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>WrkCtrResourceGroup</c> table record that is used when planning the current <c>KanbanJob</c> record.
    /// </summary>
    /// <returns>
    /// A <c>WrkCtrResourceGroup</c> table record or an empty table buffer.
    /// </returns>
    public WrkCtrResourceGroup wrkCtrResourceGroup()
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;

        if (this.WorkCell)
        {
            wrkCtrResourceGroup =
                WrkCtrResourceGroup::find(this.WorkCell);
        }

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>KanbanJob</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the kanban job table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from kanbanJob
                    where kanbanJob.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the Kanban job table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanJob</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJob find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        KanbanJob kanbanJob;

        if (_refRecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                where kanbanJob.RecId == _refRecId;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID of the Kanban job table to find.
    /// </param>
    /// <param name="_inventTransDataAreaId">
    ///    The inventory transaction data area ID of the Kanban job table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>KanbanJob</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJob findInventTransId(
        InventTransId _inventTransId,
        DataAreaId    _inventTransDataAreaId,
        boolean       _forUpdate = false)
    {
        KanbanJob kanbanJob;

        if (_inventTransId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                where kanbanJob.InventTransId         == _inventTransId
                   && kanbanJob.InventTransDataAreaId == _inventTransDataAreaId;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanJobSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the kanban in the <c>KanbanJob</c> table to find.
    /// </param>
    /// <param name="_kanbanJobSequence">
    /// The sequence of the <c>KanbanJob</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanJob</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJob findKanbanJobSequence(
        KanbanRefRecId      _refRecId,
        KanbanJobSequence   _kanbanJobSequence,
        boolean             _forUpdate = false)
    {
        KanbanJob kanbanJob;

        if (_refRecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                where kanbanJob.Kanban   == _refRecId
                   && kanbanJob.Sequence == _kanbanJobSequence;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLineIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The record ID of the <c>SourceDocumentLine</c> record that is used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanJob</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJob findSourceDocumentLineIssue(
        SourceDocumentLineRefRecId _sourceDocumentLineRefRecId,
        boolean                    _forUpdate = false)
    {
        KanbanJob       kanbanJob;
        KanbanJobIssue  kanbanJobIssue;

        if (_sourceDocumentLineRefRecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                exists join kanbanJobIssue
                    where kanbanJobIssue.SourceDocumentLine == _sourceDocumentLineRefRecId
                       && kanbanJobIssue.KanbanJob          == kanbanJob.RecId;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLineReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The record ID of the <c>SourceDocumentLine</c> table that is used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanJob</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJob findSourceDocumentLineReceipt(
        SourceDocumentLineRefRecId _sourceDocumentLineRefRecId,
        boolean                    _forUpdate = false)
    {
        KanbanJob           kanbanJob;
        KanbanJobReceipt    kanbanJobReceipt;

        if (_sourceDocumentLineRefRecId)
        {
            kanbanJob.selectForUpdate(_forUpdate);

            select firstonly kanbanJob
                exists join kanbanJobReceipt
                    where kanbanJobReceipt.SourceDocumentLine == _sourceDocumentLineRefRecId
                       && kanbanJobReceipt.KanbanJob          == kanbanJob.RecId;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays whether a kanban job is overdue.
    /// </summary>
    /// <param name="_dueDateTime">
    ///    The due date time of a kanban job.
    /// </param>
    /// <param name="_expectedDateTime">
    ///    The expected date time for finishing the kanban job.
    /// </param>
    /// <param name="_status">
    ///     The lean kanban job status.
    /// </param>
    /// <param name="_leanReplenishmentStrategy">
    ///     The rule replenishment strategy.
    /// </param>
    /// <param name="_replenishmentLeadTime">
    ///     The lean replenishment lead time.
    /// </param>
    /// <returns>
    ///    true if the kanban job is late; otherwise, false.
    /// </returns>
    public static boolean isOverdue(
        KanbanJobDueDateTime        _dueDateTime,
        KanbanJobExpectedDateTime   _expectedDateTime,
        LeanKanbanJobStatus         _status,
        LeanReplenishmentStrategy   _leanReplenishmentStrategy,
        LeanAverageTakt             _replenishmentLeadTime)
    {
        if (_status == LeanKanbanJobStatus::Completed)
        {
            return false;
        }

        // Currently Kanban jobs follow the same criteria as Kanbans to determine overdue
        return Kanban::isOverdue(_dueDateTime, _expectedDateTime, _leanReplenishmentStrategy, _replenishmentLeadTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntityFromRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>LegalEntity</c> value related to the current record.
    /// </summary>
    /// <param name="_kanbanJobRecId">
    ///    The record ID of the <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    A <c>LegalEntity</c> type value.
    /// </returns>
    public static LegalEntity legalEntityFromRecId(KanbanJobRefRecId _kanbanJobRecId)
    {
        KanbanJob       kanbanJob;
        Kanban          kanban;

        select firstonly LegalEntity from kanban
            exists join kanbanJob
                where kanbanJob.Kanban == kanban.RecId
                    && kanbanJob.RecId == _kanbanJobRecId;

        return kanban.LegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an <c>InventDimParm</c> table buffer with values set for all inventory dimensions
    /// that must be transferred to the next job.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> table buffer.
    /// </returns>
    public static InventDimParm nextJobInventDimParm()
    {
        InventDimParm   inventDimParm;

        inventDimParm.InventBatchIdFlag  = NoYes::Yes;
        inventDimParm.InventSerialIdFlag = NoYes::Yes;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCapacityConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the estimated capacity consumption for process jobs.
    /// </summary>
    /// <param name="_kanbanJobRecId">
    /// A record ID of the <c>KanbanJob</c> record to update.
    /// </param>
    /// <returns>
    /// The updated <c>KanbanJob</c> record.
    /// </returns>
    /// <remarks>
    /// Use this method to initialize consumption when creating jobs or resetting from planned.
    /// The method clears the expected date and time.
    /// </remarks>
    public static KanbanJob setCapacityConsumption(RefRecId _kanbanJobRecId)
    {
        KanbanJob   kanbanJob;

        ttsbegin;
        kanbanJob = KanbanJob::find(_kanbanJobRecId,true);
        kanbanJob.setKanbanJobCapacitySum();
        kanbanJob.ExpectedDateTime = DateTimeUtil::minValue();
        kanbanJob.update();
        ttscommit;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS134364";
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Given the current job status type this method will return the appropriate symbol.
    /// </summary>
    /// <returns>
    ///     Container with the image for the current record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container jobStatusImage()
    {
        return KanbanJob::getJobStatusImage(this.Status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns an icon appropriate for the given job status.
    /// </summary>
    /// <param name = "_jobStatus">
    ///     Job status for which to find appropriate icon.
    /// </param>
    /// <returns>
    ///     Container with the icon for the given job status.
    /// </returns>
    public static container getJobStatusImage(LeanKanbanJobStatus _jobStatus)
    {
        str imageName;

        switch (_jobStatus)
        {
            case LeanKanbanJobStatus::Completed :
                imageName = ImageReferenceSymbol::KanbanJobCompleted;
                break;

            case LeanKanbanJobStatus::InProgress :
                imageName = ImageReferenceSymbol::KanbanJobInProgress;
                break;

            case LeanKanbanJobStatus::NotPlanned :
                imageName = ImageReferenceSymbol::KanbanJobCreated;
                break;

            case LeanKanbanJobStatus::Planned :
                imageName = ImageReferenceSymbol::KanbanJobPlanned;
                break;

            case LeanKanbanJobStatus::Prepared :
                imageName = ImageReferenceSymbol::KanbanJobPrepared;
                break;

            default:
                imageName = ImageReferenceSymbol::NotAvailable;
                break;
        }

        ImageReference imageReference = ImageReference::constructForSymbol(imageName);

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the job is overdue.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job record.</param>
    /// <returns>True if overdue; false otherwise.</returns>
    display boolean checkOverdue(KanbanJob _kanbanJob)
    {
        return KanbanJob::isOverdue(this.DueDateTime, this.ExpectedDateTime, this.status, LeanReplenishmentStrategy::Event,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCapacityConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the capacity consumption percentage (load) on the kanban job.
    /// </summary>
    public void updateCapacityConsumption()
    {
        KanbanJobSchedulePlannedPeriod planningPeriod =
                            this.Status == LeanKanbanJobStatus::NotPlanned ?
                            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) :
                            KanbanJobSchedule::findJob(this.RecId).PlannedPeriod;

        if (planningPeriod)
        {
            this.LoadPercent = KanbanJobScheduleOperation::calculateCapacityConsumptionPct(this, planningPeriod);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS131668</DeveloperDocumentation>
	<Label>@SYS131667</Label>
	<SingularLabel>@SYS131642</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Kanban</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>KanbanSequenceIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>KanbanJobPickingList</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>KanbanJobPickingList</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>KanbanJobPlanActivityService</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>KanbanJobPlanActivityService</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>KanbanJobQualityMeasure</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>KanbanJobQualityMeasure</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityScrapped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Kanban</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS30081</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActualStartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualEndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualPreparedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueInventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueInventTransDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryLocation</Name>
			<Label>@SYS152623</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Job</Name>
			<Label>@SYS1066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Locations</Name>
			<Label>@SYS20394</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS303805</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Executable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductionFlowActivity</Name>
			<Label>@SYS152580</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanProductionFlowActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivityName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantities</Name>
			<Label>@SYS131583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuantityOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityScrapped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Kanban</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ScheduleGroup</Name>
			<Label>@SYS131901</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanScheduleGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeanScheduleGroupColor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeanScheduleItemRatio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualEndDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobEndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualPreparedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobPreparedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualStartDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobStartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DueDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobDueDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Executable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobExpectedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS153112</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS130225</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssueInventDimDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssueInventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS153113</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssueInventTransDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssueInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS130224</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Kanban</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LeanProductionFlowActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanProductionFlowActivityRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LeanScheduleGroupColor</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanScheduleGroupColor</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LeanScheduleGroupName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanScheduleGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LeanScheduleItemRatio</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanThroughputRatio</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanActivityName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityOrdered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityReceived</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobQuantityReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityScrapped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobQuantityScrapped</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobSequence</ExtendedDataType>
			<Label>@SYS131666</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentHeaderRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LeanKanbanJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LeanKanbanJobType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkCell</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrResourceGroupRefRecId</ExtendedDataType>
			<Label>@SYS131859</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KanbanSequenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Kanban</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Executable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Kanban</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActualEndDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActualEndDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KanbanIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Kanban</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimDataAreaId</Name>
					<Field>InventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationDataAreaId</Name>
					<Field>InventLocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransDataAreaId</Name>
					<Field>InventTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IssueInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IssiueInventoryDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventDimDataAreaId</Name>
					<Field>IssueInventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventDimId</Name>
					<Field>IssueInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IssueInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IssueInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventTransDataAreaId</Name>
					<Field>IssueInventTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventTransId</Name>
					<Field>IssueInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Kanban</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>Kanban</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ParentKanban</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Kanban</Name>
					<Field>Kanban</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlowActivit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlowActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionFlowActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LeanProductionFlowActivity</Name>
					<Field>LeanProductionFlowActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SourceDocumentHeader_KanbanJob</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationDataAreaId</Name>
					<Field>WMSLocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCell</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrResourceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCell</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkCell</Name>
					<Field>WorkCell</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>