<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastOnAcc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjForecastOnAcc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blankDateFields</Name>
				<Source><![CDATA[
    private void blankDateFields()
    {
        this.InvoiceDate        = dateNull();
        this.EliminationDate    = dateNull();
        this.SalesPaymDate      = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the model that is used is locked for changes.
    /// </summary>
    /// <returns>
    /// false if the model is locked; otherwise, true.
    /// </returns>
    private boolean checkModel()
    {
        boolean ret = true;
        ForecastModel budgetModel = ForecastModel::find(HeadingSub::Heading, this.ModelId);

        if (!budgetModel)
        {
            ret = checkFailed(strfmt("@SYS25942", this.ModelId));
        }

        if (budgetModel.Blocked)
        {
            ret = checkFailed(strfmt("@SYS25943", budgetModel.ModelId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values from a project estimate.
    /// </summary>
    /// <param name = "_psaActivityEstimates">A <c>PSAActivityEstimates</c> record from which to initialize the fields.</param>
    public void initFromEstimate(PSAActivityEstimates _psaActivityEstimates)
    {
        this.Qty                = _psaActivityEstimates.Quantity;
        this.Txt                = _psaActivityEstimates.Description;
        this.initFromTransDate();
        this.SalesPrice         = _psaActivityEstimates.UnitSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceDate</Name>
				<Source><![CDATA[
    void initFromInvoiceDate()
    {
        PaymTermId          paymentTermsID;
        ProjFundingSource   projFundingSource;
        ProjTable           projTable       = this.projTable();
        ProjParameters      projParameters  = ProjParameters::find();

        // sales payment date
        if (projTable.Type == ProjType::TimeMaterial || projTable.Type == ProjType::FixedPrice
            || (projTable.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()))
        {
            if (this.ProjFundingSource)
            {
                paymentTermsID = ProjFundingSource::find(this.ProjFundingSource).PaymentTermsId;
            }
            else
            {
                if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
                {
                    select PaymentTermsId from projFundingSource
                        where projFundingSource.ContractId == projTable.ProjInvoiceProjId &&
                              projFundingSource.FundingType == ProjFundingType::Customer;

                    paymentTermsID = projFundingSource.PaymentTermsId;
                }
            }

            if (paymentTermsID)
            {
                this.SalesPaymDate = PaymTerm::advanceDate(paymentTermsID, this.InvoiceDate) + projParameters.ForecastBufferDays;
            }
            else
            {
                this.SalesPaymDate      = this.InvoiceDate+ projParameters.ForecastBufferDays;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable _projTable)
    {
        if (! _projTable)
        {
            return;
        }

        if (! this.ModelId)
        {
            this.ModelId        =  ProjTable::modelId(this.ProjId);
        }

        this.CurrencyId         = _projTable.currencyId();
        this.ExchRate           = _projTable.exchRateSales(this.TransDate,this.CurrencyId);
        this.DefaultDimension   = _projTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTransDate</Name>
				<Source><![CDATA[
    void initFromTransDate()
    {
        ProjTable       projTable       = this.projTable();
        ProjParameters  projParameters  = ProjParameters::find();

        if (! this.CurrencyId)
        {
            this.CurrencyId         = projTable.currencyId();
        }

        this.ExchRate               = projTable.exchRateSales(this.TransDate,this.CurrencyId);

        //  invoice date
        if (projTable.projInvoice().ForecastInvoiceFrequency)
        {
                this.InvoiceDate        = ProjInvoiceTable::forecastInvoiceDate(this.TransDate,this.ProjId);
        }
        else
        {
            this.InvoiceDate        = this.TransDate;
        }

        this.initFromInvoiceDate();

        //  elimination date
        if (projTable.Type == ProjType::FixedPrice ||  projTable.Type == ProjType::Investment || ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (ProjTable::exist(projTable.wipProject))
            {
                this.EliminationDate = ProjTable::find(projTable.wipProject).EndDate;
            }
            else
            {
                this.EliminationDate = projTable.EndDate;
            }

            if (!this.EliminationDate)
            {
                this.EliminationDate = this.TransDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()

    {
        NumberSeq           numberSeq;
        ProjTable           projTable;

        ttsbegin;

        if (!this.TransId)
        {
            numberSeq       = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
            this.TransId    = numberSeq.num();
        }

        ttscommit;
        projTable           = this.projTable();
        this.TransDate      = projTable.returnForecastDate();
        this.initFromTransDate();
        this.Qty = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        NumberSeq   numberSeq;

        ttsbegin;

        if (!this.TransId)
        {
            numberSeq       = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
            this.TransId    = numberSeq.num();
        }

        super();

        ProjForecastPost::newPostForecastOnAcc(this).run();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProjForecastOnAcc, ProjId) :
                this.initFromProjTable(ProjTable::find(this.ProjId));
                // blank and reinitialize the date fields
                this.blankDateFields();
                this.initFromTransDate();
                break;

            case fieldnum(ProjForecastOnAcc, TransDate) :
                this.initFromTransDate();
                break;

            case fieldnum(ProjForecastOnAcc, InvoiceDate) :
                this.initFromInvoiceDate();
                break;

            case fieldnum(ProjForecastOnAcc, CurrencyId) :
                if (! this.CurrencyId)
                {
                    this.CurrencyId         = ProjTable::find(this.ProjId).currencyId();
                }
                this.ExchRate   = this.projTable().exchRateSales(this.TransDate,this.CurrencyId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable()
    {
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        ttsbegin;

        super();

        ProjForecastPost::newPostForecastOnAcc(this).run();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean         ok;
        ForecastModel   budgetModel = ForecastModel::find(HeadingSub::Heading,this.ModelId);

        if (! budgetModel.checkOpen())
        {
            ok = checkFailed("@SYS23721");
        }
        else
        {
            ok = super();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(fieldId _p1)
    {
        ForecastModel   oldBudgetModel;
        ForecastModel   forecastModel;

        boolean ret;

        ret = super(_p1);

        switch (_p1)
        {
            case(fieldnum(ProjForecastOnAcc,ModelId)):
                if (this.ModelId != this.orig().ModelId)
                {
                    oldBudgetModel  = ForecastModel::find(HeadingSub::Heading,this.orig().ModelId);
                    if (oldBudgetModel.Blocked)
                    {
                        ret = checkFailed(strfmt("@SYS25943",oldBudgetModel.ModelId));
                    }
                    forecastModel  = ForecastModel::find(HeadingSub::Heading,this.ModelId);
                    if (forecastModel.Blocked)
                    {
                        ret = checkFailed(strfmt("@SYS25943",forecastModel.ModelId));
                    }
                }
                break;

            case fieldnum(ProjForecastOnAcc, ExchRate):
                if (this.CurrencyId && ! this.ExchRate)
                {
                    ret = checkFailed(strfmt("@SYS20792", this.CurrencyId));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        ForecastModel       forecastModel;

        ret  = super();

        if (ret)
        {
            ret = ProjTable::find(this.ProjId).status().validateWriteBudgetOnAccount() && ret;
            ret = ProjForecastPost::newPostForecastOnAcc(this).runCheck() && ret;
            ret = this.checkModel() && ret;
        }

        if (ret)
        {
            if (this.InvoiceDate != dateNull())
            {
                if (this.InvoiceDate < this.TransDate)
                {
                    ret = checkFailed("@SYS96098") && ret;
                }
            }
            if (this.EliminationDate != dateNull())
            {
                if (this.ModelId)
                {
                    forecastModel = ForecastModel::find(HeadingSub::Heading,this.ModelId);
                    if (forecastModel)
                    {
                        ProjTable projTableLocal = ProjTable::find(this.ProjId);
                        //Check WIP is being used by model
                        switch (projTableLocal.Type)
                        {
                            case ProjType::FixedPrice :
                                if (forecastModel.ProjForecastWIPFixedPrice)
                                {
                                    if (this.EliminationDate < this.TransDate)
                                    {
                                        ret = checkFailed("@SYS96097") && ret;
                                    }
                                }
                                break;

                            case ProjType::TimeMaterial :
                                if (forecastModel.ProjForecastWIPTimeMaterial)
                                {
                                    if (this.EliminationDate < this.TransDate)
                                    {
                                        ret = checkFailed("@SYS96097") && ret;
                                    }
                                }
                                break;
                            case ProjType::None:
                                if (projTableLocal.ProjInvoiceProjId && (forecastModel.ProjForecastWIPFixedPrice || forecastModel.ProjForecastWIPTimeMaterial) && 
                                    this.EliminationDate < this.TransDate)
                                {
                                    ret = checkFailed("@SYS96097") && ret;
                                }
                                break;
                            default :
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ProjId _projId)
    {
        return (select projForecastOnAcc
                 where projForecastOnAcc.ProjId == _projId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ProjForecastOnAcc find(ProjOnAccTransId _transId, boolean _forUpdate = false)
    {
        ProjForecastOnAcc    projForecastOnAcc = null;

        projForecastOnAcc.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select projForecastOnAcc where projForecastOnAcc.TransId == _transId;
        }

        return projForecastOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjectBudgetForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProjForecastOnAcc</c> table.
    /// </summary>
    /// <param name="_projId">
    ///    A <c>ProjId</c> value that specifies the project ID of the record to find.
    /// </param>
    /// <param name="_projForecastBudgetType">
    ///    A <c>CategoryId</c> value that specifies the forecast budget type of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>ForecastSales</c> table buffer that contains the budget forecast row; otherwise, an empty
    ///    buffer.
    /// </returns>
    public static ProjForecastOnAcc findProjectBudgetForecast(  ProjId _projId,
                                                            ProjForecastBudgetType _projForecastBudgetType,
                                                            boolean _forUpdate = false)
    {
        ProjForecastOnAcc projForecastOnAcc;

        if (_projId &&  _projForecastBudgetType)
        {
            projForecastOnAcc.selectForUpdate(_forUpdate);

            select firstonly projForecastOnAcc
            where projForecastOnAcc.ProjId == _projId
            &&  projForecastOnAcc.ProjForecastBudgetType == _projForecastBudgetType;
        }

        return projForecastOnAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS125012</DeveloperDocumentation>
	<FormRef>ProjForecastOnAcc</FormRef>
	<Label>@SYS82769</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ModelId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TransIdx</PrimaryIndex>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjTransBudget</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjTransBudget</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetType</Name>
			<Label>@SYS153332</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjForecastBudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EliminationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPaymDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EliminationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastEliminationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastInvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastModelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjForecastBudgetType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjForecastBudgetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesPaymDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastSalesPaymDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceRevenue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjOnAccForecastTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjModelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedTransactionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PSAProjBudgetTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ModelId</MapField>
					<MapFieldTo>ModelId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjForecastOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjForecastOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelId</Name>
					<SourceEDT>ProjForecastModelId</SourceEDT>
					<Field>ModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjForecastOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjForecastOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>