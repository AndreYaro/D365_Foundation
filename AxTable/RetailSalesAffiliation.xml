<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesAffiliation</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
public class RetailSalesAffiliation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesAffiliatonXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the a XML element Affiliations on the Sales order.
    /// </summary>
    /// <param name="xmlroot">
    /// The xml document root.
    /// </param>
    /// <param name="salesId">
    /// The id of sales order.
    /// </param>
    /// <returns>
    /// The list of Affiliations on the Sales Order.
    /// Example:
    /// <Affiliations>
    ///        <Affiliation RetailAffiliationId="5637146827" RetailLoyaltyTierId = "0" RetailAffiliationType = "General"/>
    ///        <Affiliation RetailAffiliationId="5637144576" RetailLoyaltyTierId = "5637144577" RetailAffiliationType = "Loyalty"/>
    /// </Affiliations>
    /// </returns>
    public static XmlElement getSalesAffiliatonXML(XmlDocument xmlroot, SalesIDBase salesId)
    {
        #RetailCustAffiliation
        XmlElement xmlAffiliation,xmlAffiliations;
        RetailSalesAffiliation retailSalesAffiliation;
        RetailAffiliation retailAffiliation;
        
        xmlAffiliations = xmlroot.createElement(#Affiliations);

        while select RecId, Affiliation, LoyaltyTier from RetailSalesAffiliation
                where retailSalesAffiliation.SalesId == salesId
            join AffiliationType, RecId from retailAffiliation
                where retailAffiliation.RecId == RetailSalesAffiliation.Affiliation
        {
            xmlAffiliation = xmlroot.createElement(#Affiliation);
            xmlAffiliation.setAttribute(#RetailAffiliationId, int642str(RetailSalesAffiliation.Affiliation));
            xmlAffiliation.setAttribute(#RetailLoyaltyTierId, int642str(RetailSalesAffiliation.LoyaltyTier));
            xmlAffiliation.setAttribute(#RetailAffiliationType, enum2Symbol(enumNum(RetailAffiliationType), retailAffiliation.AffiliationType));

            XmlElement infoCodeLines;

            if (RetailInfoCodeLineTableV2Feature::isEnabled())
            {
                infoCodeLines = RetailTransactionServiceOrders::setAffiliationLineInfoCodeLinesV2(xmlroot, SalesTable::find(SalesId).RecId, retailAffiliation.RecId, RetailInfoCodeLineRelatedTableType::Sales);
            }
            else
            {
                using (RetailTransactionServiceOrdersContext context = RetailTransactionServiceOrdersContext::construct())
                {
                    context.parmAffiliationRecordId(retailAffiliation.RecId);
                    infoCodeLines = RetailTransactionServiceOrders::setAffiliationLineInfoCodeLines(xmlroot, SalesTable::find(SalesId).RecId);
                }
            }

            xmlAffiliation.appendChild(infoCodeLines);
            xmlAffiliations.appendChild(xmlAffiliation);
        }

        return xmlAffiliations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetAffiliatonsAndLoyaltyTiers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the affiliations and loyalty tiers for the sales order. Any old associated records are deleted.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order id.
    /// </param>
    /// <param name="_affiliationsAndTiers">
    /// The affiliations and loyalty tiers in collection of affiliation info.
    /// </param>
    public static void SetAffiliatonsAndLoyaltyTiers(SalesId _salesId, AffiliationInfoCollection _affiliationsAndTiers)
    {
        #RetailCustAffiliation

        RetailSalesAffiliation retailSalesAffiliation;

        ttsBegin;

        delete_from retailSalesAffiliation
        where retailSalesAffiliation.SalesId == _salesId;

        for (int i = 0; i < _affiliationsAndTiers.get_Count(); i++)
        {
            AffiliationInfo affiliationInfo = _affiliationsAndTiers.get_Item(i) as AffiliationInfo;
            retailSalesAffiliation.clear();
            retailSalesAffiliation.Affiliation = affiliationInfo.AffiliationRecordId;
            retailSalesAffiliation.LoyaltyTier = affiliationInfo.LoyaltyTierRecordId;
            retailSalesAffiliation.SalesId = _salesId;
            retailSalesAffiliation.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRetailSalesAffiliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the affiliations for the sales order.
    /// </summary>
    /// <param name="_newSalesId">
    /// The sales order id to copy to.
    /// </param>
    /// <param name="_origSalesId">
    /// The sales order id to copy from.
    /// </param>
    public static void copyRetailSalesAffiliation(SalesId _newSalesId, SalesId _origSalesId)
    {
        RetailSalesAffiliation retailSalesAffiliation, retailSalesAffiliationAlreadyExists,  salesAffiliationToBeInserted;

        ttsBegin;

        if (RetailParameters::isRetailEnabledAndInUse() && _newSalesId)
        {
            insert_recordset  salesAffiliationToBeInserted (SalesId, Affiliation)
                    select _newSalesId, Affiliation from retailSalesAffiliation
                    where retailSalesAffiliation.SalesId == _origSalesId
                    notExists join retailSalesAffiliationAlreadyExists
                        where retailSalesAffiliationAlreadyExists.SalesId == _newSalesId
                        && retailSalesAffiliationAlreadyExists.Affiliation == retailSalesAffiliation.Affiliation;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>affiliationDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Description for Affiliation.
    /// </summary>
    /// <returns>
    /// Description for Affiliation.
    /// </returns>
    display RetailDescriptionEx5 affiliationDescription()
    {
        RetailAffiliationTranslation affiliationTranslation;

        select firstOnly Description from affiliationTranslation
        where affiliationTranslation.Affiliation == this.Affiliation &&
           affiliationTranslation.LanguageId == SystemParameters::getSystemLanguageId();

        return affiliationTranslation.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAffiliationSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if affiliation and salesId combination exist for sales order.
    /// </summary>
    /// </param>
    /// <param name="_affiliation">
    /// The affiliation RecId.
    /// </param>
    /// <param name="_salesId">
    /// The sales order id.
    /// </param>
    static boolean existAffiliationSalesId(RecId _affiliation, SalesId _salesId)
    {
        RetailSalesAffiliation retailSalesAffiliation;

        boolean hasAffiliationSalesId = false;
        if (_affiliation)
        {
            select firstonly RecId from retailSalesAffiliation
            index SalesAffiliationLoyaltyIdx
            where retailSalesAffiliation.Affiliation == _affiliation
                    && retailSalesAffiliation.SalesId == _salesId;

            hasAffiliationSalesId = retailSalesAffiliation.RecId != 0;
        }

        return hasAffiliationSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAffiliatonSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the set of Affiliations on the Sales order.
    /// </summary>
    /// <param name="salesId">
    /// The id of sales order.
    /// </param>
    /// <returns>
    /// The set of Affiliations on the Sales Order.
    /// </returns>
    public static Set getSalesAffiliatonSet(SalesId _salesId)
    {
        RetailSalesAffiliation retailSalesAffiliation;
        RetailAffiliation retailAffiliation;
        Set salesAffiliation = new Set(Types::Int64);

        while select Affiliation from RetailSalesAffiliation
                where retailSalesAffiliation.SalesId == _salesId
        {
            salesAffiliation.add(retailSalesAffiliation.Affiliation);
        }

        return salesAffiliation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX4520127</DeveloperDocumentation>
	<Label>@REX4161255</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Affiliation</TitleField1>
	<TitleField2>LoyaltyTier</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SalesAffiliationLoyaltyIdx</ClusteredIndex>
	<Modules>TransactionsAndOrders</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Affiliation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoyaltyTier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Affiliation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoyaltyTier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Affiliation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AffiliationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoyaltyTier</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LoyaltyTierRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesAffiliationLoyaltyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Affiliation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoyaltyTier</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RetailSalesAffiliationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Affiliation</MapField>
					<MapFieldTo>Affiliation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LoyaltyTier</MapField>
					<MapFieldTo>LoyaltyTier</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailAffiliation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailAffiliation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Affiliation</Name>
					<Field>Affiliation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailLoyaltyTier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailLoyaltyTier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoyaltyTier</Name>
					<Field>LoyaltyTier</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>