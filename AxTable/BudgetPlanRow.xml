<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanRow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanRow extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanRow</c> table.
    /// </summary>
    /// <param name='_budgetPlanRowRecId'>
    /// The record ID of the <c>BudgetPlanRow</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanRow</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanRow find(
        BudgetPlanRowRecId  _budgetPlanRowRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanRow budgetPlanRow;

        if (_budgetPlanRowRecId)
        {
            budgetPlanRow.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanRow.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanRow
                where budgetPlanRow.RecId == _budgetPlanRowRecId;
        }

        return budgetPlanRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanRow</c> table.
    /// </summary>
    /// <param name='_rowFieldName'>
    /// The name of the <c>BudgetPlanRow</c> record to find.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanRow</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanRow findByFieldName(
        FieldName           _rowFieldName,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanRow budgetPlanRow;

        if (_rowFieldName != BudgetPlanningConstants::emptyString)
        {
            budgetPlanRow.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanRow.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanRow
                where budgetPlanRow.FieldName == _rowFieldName;
        }

        return budgetPlanRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFilterIsAlsoRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>FieldName</c> value exists as a <c>BudgetPlanRow</c> record for a given <c>BudgetPlanLayout</c> record ID.
    /// </summary>
    /// <param name='_budgetPlanLayoutRecId'>
    /// The record ID of the <c>BudgetPlanLayout</c> record.
    /// </param>
    /// <param name='_fieldName'>
    /// The <c>FieldName</c> value to search for use in a <c>BudgetPlanRow</c> record.
    /// </param>
    /// <returns>
    /// true if a record exists; otherwise, false.
    /// </returns>
    public static boolean checkFilterIsAlsoRow(BudgetPlanLayoutRecId _budgetPlanLayoutRecId, FieldName _fieldName)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanRow           budgetPlanRow;
        boolean                 fieldExistsAsRow;

        select firstonly RecId from budgetPlanRow
            where budgetPlanRow.FieldName == _fieldName
            exists join budgetPlanLayoutElement
                where budgetPlanLayoutElement.ElementDefinition == budgetPlanRow.RecId
                    && BudgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId;

        if (budgetPlanRow.RecId)
        {
            fieldExistsAsRow = true;
        }

        return fieldExistsAsRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanRowRecId rowRecId = this.RecId;

        super();

        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            rowRecId,
            BudgetPlanMappingRefreshType::RefreshByElement,
            rowRecId,
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            this.RecId,
            BudgetPlanMappingRefreshType::RefreshByElement,
            this.RecId,
            false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@Budget:RowDeveloperDocumentation</DeveloperDocumentation>
	<Label>@Budget:RowDisplayName</Label>
	<SingularLabel>@Budget:RowDisplayNameSingular</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>FieldName</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Extends>BudgetPlanElementDefinition</Extends>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Label>@Budget:RowFieldName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanElementDefinition</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BudgetPlanElementDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>