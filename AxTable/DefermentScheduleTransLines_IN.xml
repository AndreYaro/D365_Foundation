<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DefermentScheduleTransLines_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DefermentScheduleTransLines_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves transaction date based on the table Id passed.
    /// </summary>
    /// <param name="_record">
    /// Buffer of DefermentScheduleTrans_IN table.
    /// </param>
    /// <param name="_period">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// A boolean value; true or false.
    /// </returns>
    public boolean getTransDate(
        DefermentScheduleTrans_IN   _record,
        TransDate                   _period)
    {
        TransDate   transDate;

        switch (_record.ExtTableId)
        {
            case tablenum(VendInvoiceTrans):
                transDate = VendInvoiceTrans::findRecId(_record.ExtRecId).InvoiceDate;
                break;

            case tablenum(LedgerJournalTrans):
                transDate = LedgerJournalTrans::findRecId(_record.ExtRecId,false).TransDate;
                break;

            default:
                break;
        }
        if (_period < transDate)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets modified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(
        fieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(DefermentScheduleTransLines_IN, Debit):
                this.modifiedInstallments();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets modified installments.
    /// </summary>
    public void modifiedInstallments()
    {
        DefermentScheduleTransLines_IN  deferment;
        DefermentScheduleTrans_IN       defermentSchedule;

        select sum(Debit) from deferment
            where deferment.FatherRecId == this.FatherRecId
               && deferment.RecId       != this.RecId;

        ttsbegin;
        select forupdate defermentSchedule
            where defermentSchedule.RecId == this.FatherRecId;
        defermentSchedule.InstallmentAmountInTotal = deferment.Debit + this.Debit;

        if (defermentSchedule)
        {
            defermentSchedule.update();
            defermentSchedule.reread();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates DefermentScheduleTransLines_IN table with specified values.
    /// </summary>
    /// <param name="_common">
    /// A common record used for update.
    /// </param>
    /// <param name="_deleted">
    /// A boolean value to check if record has to be updated or inserted.
    /// </param>
    /// <param name="_period">
    /// An array of records.
    /// </param>
    void updateTrans(Array      _common,
                     boolean    _deleted = false,
                     Array      _period  = new Array(Types::Record))
    {
        DefermentScheduleTransLines_IN      scheduleTransLine,
                                            defermentScheduleTransLines;
        DefermentScheduleTrans_IN           defermentScheduleTrans;
        container                           common;
        int                                 loop;

        common = _common.pack();

        for (loop = 5; loop<= conlen(common); loop ++)
        {
            scheduleTransLine =  conpeek(common,loop);
            ttsbegin;
            if (_deleted)
            {
                defermentScheduleTransLines = DefermentScheduleTransLines_IN::find(scheduleTransLine.RecId);
                if (!defermentScheduleTransLines)
                {
                    defermentScheduleTransLines.data(scheduleTransLine);
                    defermentScheduleTransLines.insert();
                }
            }
            else
            {
                defermentScheduleTransLines = DefermentScheduleTransLines_IN::find(scheduleTransLine.RecId,true);
                if (defermentScheduleTransLines)
                {
                    defermentScheduleTransLines.Debit  = scheduleTransLine.Debit;
                    defermentScheduleTransLines.update();
                }
            }

            select sum(Debit) from scheduleTransLine
                where scheduleTransLine.FatherRecId == defermentScheduleTransLines.FatherRecId;
            defermentScheduleTrans = DefermentScheduleTrans_IN::find(defermentScheduleTransLines.FatherRecId,true);

            if (defermentScheduleTrans)
            {
                defermentScheduleTrans.InstallmentAmountInTotal = scheduleTransLine.Debit;
                defermentScheduleTrans.update();
            }
            ttscommit;
        }
        common = _period.pack();

        for (loop = 5; loop<= conlen(common); loop ++)
        {
            scheduleTransLine =  conpeek(common,loop);
            ttsbegin;
            defermentScheduleTransLines = DefermentScheduleTransLines_IN::find(scheduleTransLine.RecId,true);
            if (defermentScheduleTransLines)
            {
                defermentScheduleTransLines.Period = scheduleTransLine.Period;
                defermentScheduleTransLines.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    /// <returns>
    /// If 'True', the field value is active.
    /// </returns>
    public boolean validateFieldValue(
        fieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(DefermentScheduleTransLines_IN, Period) :
                if (this.Period)
                {
                    ret = this.getTransDate(DefermentScheduleTrans_IN::find(this.FatherRecId),this.Period);
                    if (!ret)
                    {
                        checkFailed("@GLS5601");
                    }
                }
                break;

            default:
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_recId">
    /// The father record ID of the <c>DefermentScheduleTransLines_IN</c> table record.
    /// </param>
    /// <returns>
    /// true if the rule exits; otherwise, false.
    /// </returns>
    public static boolean exist(FatherRecId   _recId)
    {
        return _recId &&
                (select firstonly RecId from defermentScheduleTransLines_IN
                    where defermentScheduleTransLines_IN.FatherRecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>DefermentScheduleTransLines_IN</c> table record.
    /// </param>
    /// <returns>
    /// true if the rule exits; otherwise, false.
    /// </returns>
    public static boolean existRecId(RecId   _recId)
    {
        return _recId &&
                (select firstonly RecId from defermentScheduleTransLines_IN
                    where defermentScheduleTransLines_IN.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the DefermentScheduleTransLines_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing DefermentScheduleTransLines_IN table.
    /// </returns>
    public static DefermentScheduleTransLines_IN find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        DefermentScheduleTransLines_IN  defermentScheduleLines;

        defermentScheduleLines.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            defermentScheduleLines.concurrencyModel(_concurrencyModel);
        }

        select firstonly defermentScheduleLines
            where defermentScheduleLines.RecId == _recId;

        return defermentScheduleLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFatherRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds deferment schedule translines by father RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// The for update flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>DefermentScheduleTransLines_IN</c> class.
    /// </returns>
    public static DefermentScheduleTransLines_IN findByFatherRecId(
        FatherRecId   _recId,
        boolean       _forUpdate = false)
    {
        DefermentScheduleTransLines_IN  defermentScheduleLines;

        if (_recId)
        {
            defermentScheduleLines.selectForUpdate(_forUpdate);

            select firstonly defermentScheduleLines
                where defermentScheduleLines.FatherRecId    == _recId;
        }
        return defermentScheduleLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update DefermentScheduleTransLines_IN table with the deferment amount.
    /// </summary>
    /// <param name="_defermentSchedule">
    /// A DefermentScheduleTrans_IN object.
    /// </param>
    /// <param name="_revoke">
    /// A boolean value to revoke if needed.
    /// </param>
    /// <param name="_deferred">
    /// The deferred amount.
    /// </param>
    static void updateCredit(
        DefermentScheduleTrans_IN   _defermentSchedule,
        boolean                     _revoke = false,
        TaxAmount                   _deferred = 0)
    {
        DefermentScheduleTransLines_IN   defermentScheduleLines;
        int                              settleLines;
        RefRecId                         lines;
        TaxTrans                         taxTransOrig,taxTransPeriodic;
        TaxTrans_IN                      taxTransLocalPeriodic;
        LedgerJournalTrans               ledgerJournalTrans;
        ComponentTransactions_IN         settleTransLocal;
        container                        defLines;

        if (_defermentSchedule.ExtTableId == tablenum(LedgerJournalTrans))
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(_defermentSchedule.ExtRecId,false);
            while select RecId from taxTransOrig
                where taxTransOrig.SourceTableId == ledgerJournalTrans.TableId
                   && taxTransOrig.SourceRecId   == ledgerJournalTrans.RecId
                   && taxTransOrig.Voucher       == ledgerJournalTrans.Voucher
            {
                while select RefRecId, vatDefLineRefRecId from taxTransLocalPeriodic
                    where taxTransLocalPeriodic.TaxTransVATRefRecId   == taxTransOrig.RecId
                       && taxTransLocalPeriodic.vatDefLineTransferred == NoYes::No
                {
                    select taxTransPeriodic
                        where taxTransPeriodic.RecId == taxTransLocalPeriodic.RefRecId;
                    select settleTransLocal
                        where settleTransLocal.TransRecid == taxTransPeriodic.RecId;

                    if (settleTransLocal && DefermentScheduleTransLines_IN::existRecId(taxTransLocalPeriodic.vatDefLineRefRecId))
                    {
                        settleLines ++;
                        defLines = conpoke(defLines,settleLines,taxTransLocalPeriodic.vatDefLineRefRecId);
                    }
                }
            }
        }

        if (_defermentSchedule.ExtTableId == tablenum(VendInvoiceTrans))
        {
            while select RecId from taxTransOrig
                where taxTransOrig.SourceTableId == _defermentSchedule.ExtTableId
                   && taxTransOrig.SourceRecId == _defermentSchedule.ExtRecId
            join vatDefLineRefRecId from taxTransLocalPeriodic
                where taxTransLocalPeriodic.TaxTransVATRefRecId   == taxTransOrig.RecId
                   && ! taxTransLocalPeriodic.vatDefLineTransferred
            join RecId from taxTransPeriodic
                where taxTransPeriodic.RecId == taxTransLocalPeriodic.RefRecId
            join RecId from settleTransLocal
                where settleTransLocal.TransRecid == taxTransPeriodic.RecId
            {
                if (DefermentScheduleTransLines_IN::existRecId(taxTransLocalPeriodic.vatDefLineRefRecId))
                {
                    settleLines ++;
                    defLines = conpoke(defLines,settleLines,taxTransLocalPeriodic.vatDefLineRefRecId);
                }
            }
        }

        select count(RecId) from defermentScheduleLines
            where defermentScheduleLines.FatherRecId    == _defermentSchedule.RecId
               && defermentScheduleLines.TaxInformation == _defermentSchedule.TaxInformation;

        lines = defermentScheduleLines.RecId;
        lines = lines - settleLines;

        if (_deferred)
        {
            ttsbegin;
            while select forupdate defermentScheduleLines
                where defermentScheduleLines.FatherRecId    == _defermentSchedule.RecId
                   && defermentScheduleLines.TaxInformation == _defermentSchedule.TaxInformation
            {
                if (!confind(defLines,defermentScheduleLines.RecId))
                {
                    defermentScheduleLines.Credit += (abs(_deferred) / lines) ;
                    defermentScheduleLines.update();
                }
            }
            ttscommit;
        }
        else
        {
            ttsbegin;
            while select forupdate defermentScheduleLines
                where defermentScheduleLines.FatherRecId    == _defermentSchedule.RecId
                   && defermentScheduleLines.TaxInformation == _defermentSchedule.TaxInformation
            {
                if (!defermentScheduleLines.Transferred)
                {
                    if (!_revoke)
                    {
                        defermentScheduleLines.Credit = defermentScheduleLines.Debit;
                    }
                    else
                    {
                        defermentScheduleLines.Credit = 0.0;
                    }
                    defermentScheduleLines.update();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64182</DeveloperDocumentation>
	<Label>@GLS5598</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>FatherRecId</TitleField1>
	<TitleField2>TaxInformation</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ExtDueDatePeriodIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Debit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Credit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferred</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FatherRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FatherRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInformation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefermentSchedule</Name>
			<Label>@GLS5212</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Debit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Credit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferred</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FatherRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInformation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transfer</Name>
			<Label>@SYS85308</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferDebitAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferCrebitAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferDetails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Credit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS7084</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Debit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS35220</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FatherRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FatherRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Period</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS40</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferCrebitAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS7084</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferDebitAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS35220</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>TransferDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransferDetails_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Transferred</Name>
			<Label>@SYS12615</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExtDueDatePeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FatherRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxInformation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Period</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DefermentScheduleTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DefermentScheduleTrans_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxInformation</Name>
					<Field>TaxInformation</Field>
					<RelatedField>TaxInformation</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FatherRecId</Name>
					<Field>FatherRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>