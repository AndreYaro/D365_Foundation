<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsPool</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionsPool extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.QueryPacked = CustCollectionsPool::defaultQuery(this.Type).pack();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        if ((select firstonly custCollectionsAgentPool where custCollectionsAgentPool.CustomerPoolId == this.Name).RecId)
        {
            error("@SYS129810");
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a default, empty query.
    /// </summary>
    /// <param name="_type">
    ///    The pool type of the query.
    /// </param>
    /// <returns>
    ///    A query with appropriate data sources and ranges.
    /// </returns>
    public static Query defaultQuery(CustPoolType _type)
    {
        Query query = new Query();
        QueryBuildDataSource custDs;
        QueryBuildDataSource partyDs;
        QueryBuildDataSource custAgingDs;
        QueryBuildDataSource custAgingLegalEntityDs;
        QueryBuildDataSource custAgingLineDs;
        QueryBuildDataSource statRepIntervalLineDs;

        custDs = query.addDataSource(tableNum(CustTable), tableStr(CustTable));

        partyDs = custDs.addDataSource(tableNum(DirPartyTable), tableStr(DirPartyTable));
        partyDs.joinMode(JoinMode::InnerJoin);
        partyDs.addLink(fieldNum(CustTable, Party), fieldNum(DirPartyTable, RecId));

        custDs.addRange(fieldNum(CustTable, AccountNum));
        partyDs.addRange(fieldNum(DirPartyTable, Name));
        partyDs.addRange(fieldNum(DirPartyTable, NameAlias));
        partyDs.addRange(fieldNum(DirPartyTable, LanguageId));
        custDs.addRange(fieldNum(CustTable, CustGroup));
        custDs.addRange(fieldNum(CustTable, CustClassificationId));
        custDs.addRange(fieldNum(CustTable, SalesPoolId));
        custDs.addRange(fieldNum(CustTable, SalesGroup));
        custDs.addRange(fieldNum(CustTable, CommissionGroup));
        custDs.addRange(fieldNum(CustTable, MainContactWorker));
        custDs.addRange(fieldNum(CustTable, StatisticsGroup));
        custDs.addRange(fieldNum(CustTable, SegmentId));
        custDs.addRange(fieldNum(CustTable, SalesDistrictId));
        custDs.addRange(fieldNum(CustTable, Blocked));

        if (_type == CustPoolType::Collection)
        {
            custAgingDs = custDs.addDataSource(tableNum(CustAging), tableStr(CustAging));
            custAgingDs.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustAging, CustTable));
            custAgingDs.addRange(fieldNum(CustAging, StatRepInterval));
            custAgingDs.joinMode(JoinMode::ExistsJoin);

            custAgingLegalEntityDs = custAgingDs.addDataSource(tableNum(CustAgingLegalEntity), tableStr(CustAgingLegalEntity));
            custAgingLegalEntityDs.addLink(fieldNum(CustAging, RecId), fieldNum(CustAgingLegalEntity, CustAging));
            custAgingLegalEntityDs.addRange(fieldNum(CustAgingLegalEntity, AmountDueMst));
            custAgingLegalEntityDs.joinMode(JoinMode::ExistsJoin);

            custAgingLineDs = custAgingLegalEntityDs.addDataSource(tableNum(CustAgingLine), tableStr(CustAgingLine));
            custAgingLineDs.addLink(fieldNum(CustAgingLegalEntity, RecId), fieldNum(CustAgingLine, CustAgingLegalEntity));
            custAgingLineDs.addRange(fieldNum(CustAgingLine, OpenBalanceMst));
            custAgingLineDs.joinMode(JoinMode::ExistsJoin);

            statRepIntervalLineDs = custAgingLineDs.addDataSource(tableNum(StatRepIntervalLine), tableStr(StatRepIntervalLine));
            statRepIntervalLineDs.addLink(fieldNum(CustAgingLine, StatRepIntervalLineName), fieldNum(StatRepIntervalLine, Name));
            statRepIntervalLineDs.addLink(fieldNum(CustAgingLine, StatRepIntervalLineNum), fieldNum(StatRepIntervalLine, LineNum));
            statRepIntervalLineDs.addRange(fieldNum(StatRepIntervalLine, Heading));
            statRepIntervalLineDs.joinMode(JoinMode::ExistsJoin);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePoolForAgingSnapshot</Name>
				<Source><![CDATA[
    public static boolean validatePoolForAgingSnapshot(CustAgingPoolId _poolId, boolean _throwError, boolean _showMessages = true)
    {
        boolean isValid = true;
        CustCollectionsPool custCollectionsPool;

        void handleError(str _errorMessage)
        {
            if (_throwError)
            {
                throw error(_errorMessage);
            }
            else if (_showMessages)
            {
                isValid = checkFailed(_errorMessage);
            }
            else
            {
                isValid = false;
            }
        }

        // The method starts here

        if (_poolId)
        {
            select firstonly Type
                from custCollectionsPool
                where custCollectionsPool.Name == _poolId;

            if (custCollectionsPool)
            {
                if (custCollectionsPool.Type != CustPoolType::Aging)
                {
                    handleError(strFmt("@SYS137491", enum2str(custCollectionsPool.Type)));
                }
            }
            else
            {
                handleError("@SYS132600");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToQueryObjectForInsertRecordset</Name>
				<Source><![CDATA[
    internal Query convertToQueryObjectForInsertRecordset()
    {
        Query q = new Query(this.QueryPacked);

        for (int i = 1; i <= q.dataSourceCount(); i ++)
        {
            this.setDataSourceForQueryObjectInsertRecordset(q, i);
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSourceForQueryObjectInsertRecordset</Name>
				<Source><![CDATA[
    /// <summary>
    /// To use query object insert recordset we must either exists join all datasources, or if outer joined then disable them.
    /// All selection fields are cleared and it is up to caller to determine use.
    /// </summary>
    /// <param name = "_q">The query.</param>
    /// <param name = "_dataSourceNumber">The data source number.</param>
    private void setDataSourceForQueryObjectInsertRecordset(Query _q, int _dataSourceNumber)
    {
        QueryBuildDataSource qbds;
        qbds = _q.dataSourceNo(_dataSourceNumber);
        qbds.fields().dynamic(NoYes::No);
        qbds.fields().clearFieldList();
                    
        if (qbds.joinMode() == JoinMode::InnerJoin && qbds.embedded())
        {
            qbds.joinMode(JoinMode::ExistsJoin);
        }
        else if (qbds.joinMode() == JoinMode::OuterJoin)
        {
            qbds.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPoolId</Name>
				<Source><![CDATA[
    internal static CustCollectionsPool findByPoolId(CustCollectionsPoolId _poolId, NoYes _forUpdate = NoYes::No)
    {
        CustCollectionsPool custCollectionsPool;

        custCollectionsPool.selectForUpdate(_forUpdate);

        select firstonly custCollectionsPool
            where custCollectionsPool.Name == _poolId;

        return custCollectionsPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPoolQueryByAccountNum</Name>
				<Source><![CDATA[
    internal static void appendPoolQueryByAccountNum(CustCollectionsPool _custCollectionsPool, QueryBuildDataSource _appendQueryToDS, FieldId _fieldToLink)
    {
        QueryBuildDataSource custTableDS = _appendQueryToDS.addDataSource(tableNum(CustTable));
        custTableDS.addLink(_fieldToLink, fieldNum(CustTable, AccountNum));
        custTableDS.joinMode(JoinMode::ExistsJoin);

        Query poolQuery = _custCollectionsPool.convertToQueryObjectForInsertRecordset();
        QueryBuildDataSource custTablePoolQueryDS = poolQuery.dataSourceTable(tableNum(CustTable));

        SysQuery::copyDataSource(custTablePoolQueryDS, custTableDS);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Collections</ConfigurationKey>
	<DeveloperDocumentation>@SYS328545</DeveloperDocumentation>
	<Label>@SYS129816</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PoolId</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Pools</Name>
			<Label>@SYS129815</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionsPoolDescription</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionsPoolId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>QueryPacked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionsPoolQueryPacked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustPoolType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PoolId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>