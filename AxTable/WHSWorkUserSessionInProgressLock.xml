<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSessionInProgressLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkUserSessionInProgressLock extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createForUserSession</Name>
				<Source><![CDATA[
    public static void createForUserSession(WHSWorkUserSession _workUserSession)
    {
        var conn = new UserConnection();

        try
        {
            conn.ttsbegin();
            WHSWorkUserSessionInProgressLock workUserSessionLock;
            workUserSessionLock.setConnection(conn);
            workUserSessionLock.WorkUserSession = _workUserSession.RecId;
            workUserSessionLock.insert();
            conn.ttscommit();
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockWorkUserSession</Name>
				<Source><![CDATA[
    public static void lockWorkUserSession(WHSUserId _userId)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        var acquiredLock = WHSWorkUserSessionInProgressLock::lockWorkUserSessionNoThrow(_userId);

        if (!acquiredLock)
        {
            throw error("@WAX:WarehouseMobileFlowInProgressForUserSession"
                        + WHSMobileAppErrorCodes::WorkUserSessionInProgressError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockWorkUserSessionNoThrow</Name>
				<Source><![CDATA[
    public static boolean lockWorkUserSessionNoThrow(WHSUserId _userId)
    {
        var workUserSession = WHSWorkUserSession::find(_userId);
        if (workUserSession)
        {
            return WHSWorkUserSessionInProgressLock::tryLockWorkUserSession(workUserSession);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockWorkUserSession</Name>
				<Source><![CDATA[
    private static boolean tryLockWorkUserSession(WHSWorkUserSession _workUserSession)
    {
        if (_workUserSession)
        {
            WHSWorkUserSessionInProgressLock workUserSessionLock;
            workUserSessionLock.readPast(true);
            workUserSessionLock.allowIndexHint(true);

            select firstonly pessimisticlock workUserSessionLock
                index hint WorkUserSessionIdx
                where workUserSessionLock.WorkUserSession == _workUserSession.RecId;

            if (!workUserSessionLock) 
            {
                // Either the record is locked by a previous request
                // Or does not exist (it should, as it is created with work user session)

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForWorkUserSession</Name>
				<Source><![CDATA[
    private static WHSWorkUserSessionInProgressLock findForWorkUserSession(RefRecId _workUserSessionRecId, boolean _forUpdate = false)
    {
        WHSWorkUserSessionInProgressLock workUserSessionLock;

        workUserSessionLock.selectForUpdate(_forUpdate);

        if (_workUserSessionRecId != 0)
        {
            select firstonly workUserSessionLock
                where workUserSessionLock.WorkUserSession == _workUserSessionRecId;
        }

        return workUserSessionLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForUserSession</Name>
				<Source><![CDATA[
    public static void deleteForUserSession(WHSWorkUserSession _workUserSession)
    {
        if (_workUserSession.RecId != 0
            && WHSWorkUserSessionInProgressLock::findForWorkUserSession(_workUserSession.RecId))
        {
            ttsbegin;

            if (WHSWorkUserSessionInProgressLock::tryLockWorkUserSession(_workUserSession))
            {
                var workUserSessionLock = WHSWorkUserSessionInProgressLock::findForWorkUserSession(_workUserSession.RecId, true);

                if (!workUserSessionLock.validateDelete())
                {
                    throw error(strFmt("@WAX:WHSCannotDeleteRecordInTable", tablePName(WHSWorkUserSessionInProgressLock)));
                }

                workUserSessionLock.delete();
            }
            else
            {
                warning("@WAX:WorkUserSessionIsLockedUponSessionDelete");
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WorkUserSessionInProgressLockDevDock</DeveloperDocumentation>
	<Label>@WAX:WorkUserSessionInProgressLock</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<Visibility>Internal</Visibility>
	<ClusteredIndex>WorkUserSessionIdx</ClusteredIndex>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkUserSession</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkUserSessionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkUserSession</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkUserSession</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WHSWorkUserSession</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkUserSession</Name>
					<Field>WorkUserSession</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>