<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSAisle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSAisle extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy locations from one aisle to another.
    /// </summary>
    /// <param name = "_otherAisle">The <c>WMSAisle</c> record to copy to.</param>
    public void copyFrom(WMSAisle _otherAisle)
    {
        #OCCRetryCount
        WMSLocation         wmsLocationThis, wmsLocationOther;
        Counter             copied;
        Counter             notCopied;
        boolean             updateName = true;

        if (_otherAisle.InventLocationId != this.InventLocationId && _otherAisle.AisleId == this.AisleId)
        {
            updateName = false;
        }

        try
        {
            ttsbegin;

            // Loop "from-locations" that we want to copy from
            while select wmsLocationOther
                where   wmsLocationOther.InventLocationId   == _otherAisle.InventLocationId &&
                        wmsLocationOther.AisleId            == _otherAisle.AisleId
            {
                // Check if new "to-location" already exist on to-warehouse
                if (!updateName)
                {
                    select firstonly wmsLocationThis
                        where wmsLocationThis.InventLocationId == this.InventLocationId &&
                              wmsLocationThis.wmsLocationId    == wmsLocationOther.wmsLocationId;
                }
                else
                {
                    select firstonly wmsLocationThis
                        where wmsLocationThis.InventLocationId == this.InventLocationId &&
                              wmsLocationThis.AisleId   == this.AisleId                 &&
                              wmsLocationThis.Rack      == wmsLocationOther.Rack        &&
                              wmsLocationThis.Level     == wmsLocationOther.Level       &&
                              wmsLocationThis.Position  == wmsLocationOther.Position;
                }
                // Create new "to-location" if do not exist
                if (!wmsLocationThis)
                {
                    wmsLocationThis.data(wmsLocationOther);
                    wmsLocationThis.InventLocationId    = this.InventLocationId;
                    wmsLocationThis.AisleId             = this.AisleId;
                    if (updateName)
                    {
                        wmsLocationThis.wmsLocationId   = wmsLocationThis.makeName();
                        wmsLocationThis.ManualName      = NoYes::No;
                        wmsLocationThis.changeCheckText(this.AisleNo);
                        wmsLocationThis.InputLocation   = wmsLocationThis.wmsLocationId;
                    }
                    if (! wmsLocationThis.wmsLocationId || WMSLocation::exist(wmsLocationThis.wmsLocationId, wmsLocationThis.InventLocationId))
                    {
                        notCopied++;
                    }
                    else
                    {
                        wmsLocationThis.insert();
                        copied++;
                    }
                }
            }

            this.updateSortCodes();

            ttscommit;

            info(strFmt("@SYS50806", copied));
            if (notCopied)
            {
                warning(strFmt("@SYS38435", notCopied));
                warning("@SYS60872");
            }
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSortCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the sort codes in the <c>WMSLocation</c> table.
    /// </summary>
    public void updateSortCodes()
    {
        #OCCRetryCount
        WMSLocation     wmsLocation;
        WMSAisle        wmsAisle;
        Integer         sortCode;
        Integer         initialSortCode;

        if (WMSParameters::find().ManualSortCode)
        {
            initialSortCode = this.SortCode;
        }
        else
        {
            select maxof(SortCode) from wmsLocation
                where   wmsLocation.InventLocationId == this.InventLocationId &&
                        !wmsLocation.ManualSortCode
                exists join wmsAisle
                    where wmsAisle.InventLocationId == wmsLocation.InventLocationId &&
                          wmsAisle.AisleId          == wmsLocation.AisleId          &&
                          wmsAisle.AisleNo           < this.AisleNo;

            initialSortCode = wmsLocation.SortCode + 1;
        }

        try
        {
            ttsbegin;

            if (this.SortDescending)
            {
                sortCode = initialSortCode;
                while select forupdate wmsLocation
                    order by Rack desc, Level, Position
                    where   wmsLocation.InventLocationId    == this.InventLocationId &&
                            wmsLocation.AisleId             == this.AisleId     &&
                            !wmsLocation.ManualSortCode
                {
                    wmsLocation.SortCode = sortCode;
                    wmsLocation.update();
                    sortCode++;
                }
            }
            else
            {
                sortCode = initialSortCode;
                while select forupdate wmsLocation
                    order by Rack, Level, Position
                    where   wmsLocation.InventLocationId    == this.InventLocationId &&
                            wmsLocation.AisleId             == this.AisleId     &&
                            !wmsLocation.ManualSortCode
                {
                    wmsLocation.SortCode = sortCode;
                    wmsLocation.update();
                    sortCode++;
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a aisle id exists in <c>WMSAisle</c> or not.
    /// </summary>
    /// <param name = "_wmsAisleId">The aisle id.</param>
    /// <param name = "_inventLocationId">The inventory location id.</param>
    /// <returns>return true if aisle id exists, otherwise false</returns>
    public static boolean exist(WMSAisleId _wmsAisleId, InventLocationId _inventLocationId)
    {
        return _wmsAisleId && (select wmsAisle
                    where wmsAisle.InventLocationId == _inventLocationId &&
                          wmsAisle.AisleId          == _wmsAisleId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WMSAisle</c> table.
    /// </summary>
    /// <param name = "_wmsAisleId">The aisle id.</param>
    /// <param name = "_inventLocationId">The inventory location id.</param>
    /// <param name = "_update">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in a <c>WMSAisle</c> table; otherwise, an empty record.</returns>
    public static WMSAisle find(
        WMSAisleId          _wmsAisleId,
        InventLocationId    _inventLocationId,
        boolean             _update = false)
    {
        WMSAisle    wmsAisle;

        wmsAisle.selectForUpdate(_update);

        if (_wmsAisleId)
        {
            select firstonly wmsAisle
                where wmsAisle.AisleId          == _wmsAisleId    &&
                      wmsAisle.InventLocationId == _inventLocationId;
        }

        return wmsAisle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAisle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for aisle, filtering on inventory location id.
    /// </summary>
    /// <param name = "_ctrl">The form string control.</param>
    /// <param name = "_inventLocationId">The inventory location id.</param>
    public static void lookupAisle(FormStringControl _ctrl, InventLocationId _inventLocationId = '')
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(WMSAisle), _ctrl);
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(WMSAisle, AisleId));
        sysTableLookup.addLookupfield(fieldNum(WMSAisle, InventLocationId));
        sysTableLookup.addLookupfield(fieldNum(WMSAisle, AisleNo));
        sysTableLookup.addLookupfield(fieldNum(WMSAisle, Name));

        if (_inventLocationId)
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tableNum(WMSAisle));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSAisle, InventLocationId));
            queryBuildRange.value(queryValue(_inventLocationId));
            sysTableLookup.parmQuery(query);
        }

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WMSBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123895</DeveloperDocumentation>
	<FormRef>WMSAisle</FormRef>
	<Label>@SYS50170</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>aisleId</TitleField1>
	<TitleField2>name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>AisleIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>AisleIdx</PrimaryIndex>
	<ReplacementKey>AisleIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WMSLocation</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WMSLocation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>aisleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>aisleNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortDescending</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>aisleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>aisleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>aisleNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sorting</Name>
			<Label>@SYS4138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortDescending</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>aisleId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSAisleId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>aisleNo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSAisleNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>sortCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSSortCode</ExtendedDataType>
			<Label>@SYS50179</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>sortDescending</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23458</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AisleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>inventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>aisleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSAisle</Name>
			<EntityRelationshipRole>@SYS123896</EntityRelationshipRole>
			<RelatedTable>WMSAisle</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>aisleId</Name>
					<Field>aisleId</Field>
					<RelatedField>aisleId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>