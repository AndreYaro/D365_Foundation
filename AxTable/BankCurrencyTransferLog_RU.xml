<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyTransferLog_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankCurrencyTransferLog_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountantName</Name>
				<Source><![CDATA[
    public Name accountantName()
    {
        return OfficialsTable_RU::nameAccountant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressPayer</Name>
				<Source><![CDATA[
    public Addressing addressPayer()
    {
        return CompanyInfo::find().postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    public str amountCur()
    {
        const int CharacterNum = 10;
        const int DecimalNum = 2;
        const int Separator1 = 2;
        const int Separator2 = 1;

        str ret;

        if (this.JournalCurrency != CompanyInfoHelper::standardCurrency())
        {
            ret = num2str(this.JournalAmount, CharacterNum, DecimalNum, Separator1, Separator2);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRub</Name>
				<Source><![CDATA[
    public str amountRub()
    {
        const int CharacterNum = 10;
        const int DecimalNum = 2;
        const int Separator1 = 2;
        const int Separator2 = 1;

        str ret;

        if (this.JournalCurrency == CompanyInfoHelper::standardCurrency())
        {
            ret = num2str(this.JournalAmount, CharacterNum, DecimalNum, Separator1, Separator2);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bank</Name>
				<Source><![CDATA[
    public str bank()
    {
        str ret;

        if (this.BankSpecConditions == BankSpecConditions_RU::bank)
        {
            ret = BankAccountTable::find(this.ledgerJournalTrans().parmOffsetAccount()).bankName_RU();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountPayer</Name>
				<Source><![CDATA[
    public BankAccount bankAccountPayer()
    {
        return BankAccountTable::find(this.ledgerJournalTrans().parmOffsetAccount()).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountPayerId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId bankAccountPayerId()
    {
        return BankAccountTable::find(this.ledgerJournalTrans().parmOffsetAccount()).AccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankBIC</Name>
				<Source><![CDATA[
    public BankBIC_RU bankBIC()
    {
        BankGroup bankGroup;

        bankGroup = BankGroup::find(BankAccountTable::find(this.BankSpecAccountId).BankGroupId);

        return  bankGroup.BankBIC_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankCurrencyDealCourse</Name>
				<Source><![CDATA[
    public ExchRate bankCurrencyDealCourse(CurrencyCode _currencyCode = '')
    {
        // when we buy currency exch rate multiplier settings should be taken from purchased Currency, when we sell - from sold currency
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(
            Ledger::current(),
            this.BankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy ? this.TransferCurrency : this.JournalCurrency);

        return exchangeRateHelper.displayStoredExchangeRate(this.BankCurrencyDealCourse);
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeOKPO</Name>
				<Source><![CDATA[
    public OKPO_RU codeOKPO()
    {
        return CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commBankAccountPayer</Name>
				<Source><![CDATA[
    public str commBankAccountPayer()
    {
        str ret;

        if (this.CommissionBankId)
        {
            ret = BankAccountTable::find(this.CommissionBankId).AccountNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>corrBankProperty</Name>
				<Source><![CDATA[
    public str corrBankProperty()
    {
        const str blank = ' ';
        const str comma = ', ';

        str              transferBankdata;
        BankAccountTable bankAccountTable = BankAccountTable::find(this.BankSpecAccountId);

        if (bankAccountTable &&
            bankAccountTable.BankGroupId != BankAccountTable::find(this.ledgerJournalTrans().parmOffsetAccount()).BankGroupId)
        {
            transferBankData = bankAccountTable.Name                                   + comma +
                               "@SYS59571" + blank + bankAccountTable.RegistrationNum + comma +
                               "@GLS111094" + blank + bankAccountTable.AccountNum      + comma +
                               "@SYS11162" + blank + bankAccountTable.CorrAccount_W   + comma +
                               "@GLS100550"     + blank + bankAccountTable.bankBIC_RU();
        }

        return transferBankdata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return this.TransferCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyDealSum</Name>
				<Source><![CDATA[
    public str currencyDealSum()
    {
        const int CharacterNum = 10;
        const int DecimalNum = 2;
        const int Separator1 = 2;
        const int Separator2 = 1;

        CurrencyExchangeHelper exchHelper;
        str                    ret;
        Amount                 amount;

        if (this.BankCurrencyDealCourse)
        {
            exchHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
            exchHelper.parmExchangeRate1(this.BankCurrencyDealCourse);

            if (this.BankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy)
            {
                amount = exchHelper.calculateAccountingToTransaction(this.TransferCurrency, this.JournalAmount, true);
            }
            else
            {
                amount = exchHelper.calculateTransactionToAccounting(this.JournalCurrency, this.JournalAmount, true);
            }

            ret = num2str(amount, CharacterNum, DecimalNum, Separator1, Separator2);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executorBankName</Name>
				<Source><![CDATA[
    // Please, do not delete this method
    public Name executorBankName()
    {
        return BankAccountTable::find(this.ledgerJournalTrans().parmAccount()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans ledgerJournalTrans()
    {
        LedgerJournalTrans      ledgerJournalTrans;

        changecompany(this.company())
        {
            select firstonly ledgerJournalTrans
                index hint BankCurrencyTransferLog_RUIdx
                where
                    ledgerJournalTrans.BankCurrencyTransferLog_RU == this.RecId;
        }

        if (! ledgerJournalTrans)
            throw error("@GLS100638");

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>market</Name>
				<Source><![CDATA[
    public str market()
    {
        const str x = 'X';
        str ret;

        if (this.BankSpecConditions == BankSpecConditions_RU::exchange)
        {
            ret = x;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>namePayer</Name>
				<Source><![CDATA[
    display CompanyName namePayer()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>payerINN</Name>
				<Source><![CDATA[
    public INN_RU payerINN()
    {
        return CompanyInfo::find().partyINNasOfDate_RU(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderDate</Name>
				<Source><![CDATA[
    public TransDate paymentOrderDate()
    {
        return this.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderNum</Name>
				<Source><![CDATA[
    public BankCurrencyTransferId_RU paymentOrderNum()
    {
        return this.BankCurrencyTransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderStatus</Name>
				<Source><![CDATA[
    display PaymOrderStatus_RU paymOrderStatus()
    {
        LedgerJournalTrans    ledgerJournalTrans;
        LedgerJournalTable    ledgerJournalTable;
        BankAccountTrans      bankAccountTrans;

        select firstonly bankAccountTrans
            where bankAccountTrans.Voucher       == this.Voucher &&
                  bankAccountTrans.PaymReference == this.BankCurrencyTransferId;

        if (bankAccountTrans)
        {
            return PaymOrderStatus_RU::Posted;
        }

        select firstonly PaymentStatus from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum  == this.JournalNum       &&
                  ledgerJournalTrans.Voucher     == this.Voucher
        exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                  ledgerJournalTable.Posted     == NoYes::No;

        switch (ledgerJournalTrans.PaymentStatus)
        {
            case CustVendPaymStatus::Sent,
                 CustVendPaymStatus::Recieved :
                return PaymOrderStatus_RU::Created;

            case CustVendPaymStatus::Rejected :
                return PaymOrderStatus_RU::Rejected;

            case CustVendPaymStatus::Confirmed :
                return PaymOrderStatus_RU::Approved;
        }

        return PaymOrderStatus_RU::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymPurchase</Name>
				<Source><![CDATA[
    public str paymPurchase()
    {
        return this.ledgerJournalTrans().BankCentralBankPurposeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presidentName</Name>
				<Source><![CDATA[
    public Name presidentName()
    {
        return OfficialsTable_RU::nameDirector();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseAmount</Name>
				<Source><![CDATA[
    public str purchaseAmount()
    {
        const int CharacterNum = 10;
        const int DecimalNum = 2;
        const int Separator1 = 2;
        const int Separator2 = 1;

        return num2str(this.JournalAmount, CharacterNum, DecimalNum, Separator1, Separator2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeCode</Name>
				<Source><![CDATA[
    public str purposeCode()
    {
        const str blank = ' ';

        BankCentralBankPurposeCode bankPurposeCode = this.ledgerJournalTrans().BankCentralBankPurposeCode;
        str ret;

        if (bankPurposeCode)
        {
            ret = bankPurposeCode + blank + BankCentralBankPurpose::find(bankPurposeCode).Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>respEmplName</Name>
				<Source><![CDATA[
    public str respEmplName()
    {
        const str blank = ' ';
        const str comma = ', ';

        HcmWorker hcmWorker = HcmWorker::find(this.ResponsibleWorker);
        Phone     phone     = hcmWorker.phone() ? hcmWorker.phone() : CompanyInfo::find().phone();

        return hcmWorker.name() + (phone ? comma + "@GLS101790" + blank + phone : "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>sellCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode sellCurrencyCode()
    {
        return this.JournalCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitBank</Name>
				<Source><![CDATA[
    public Name transitBank()
    {
        BankGroup bankGroup;

        bankGroup = BankGroup::find(BankAccountTable::find(this.BankSpecAccountId).BankGroupId);

        return  bankGroup.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitBankAccount</Name>
				<Source><![CDATA[
    public AccountNum transitBankAccount()
    {
        AccountNum ret;

        if (BankAccountTable::find(this.BankSpecAccountId).BankGroupId == BankAccountTable::find(this.ledgerJournalTrans().parmOffsetAccount()).BankGroupId)
        {
            ret = BankAccountTable::find(this.BankSpecAccountId).AccountNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchaseCurOrder</Name>
				<Source><![CDATA[
    public static void deletePurchaseCurOrder(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankCurrencyTransferLog_RU purchaseOrderLog;
        BankClientOutPaymentLog_RU bankClientLog;

        ttsbegin;

        if (BankCurrencyTransferLog_RU::existByLedgerTrans(_ledgerJournalTrans))
            purchaseOrderLog  = BankCurrencyTransferLog_RU::find(_ledgerJournalTrans.BankCurrencyTransferLog_RU, true);

        if (purchaseOrderLog)
        {
            update_recordset bankClientLog
                    setting PaymentRecId = 0, PaymentTableId = 0, PaymStatus = PaymOrderStatus_RU::Rejected
                    where bankClientLog.PaymentRecId    == purchaseOrderLog.RecId &&
                          bankClientLog.PaymentTableId  == purchaseOrderLog.TableId;

            if (!_ledgerJournalTrans.DocumentNum)
            {
                NumberSeq::releaseNumber(BankParameters::numRefTransferCurOrder_RU().NumberSequenceId, purchaseOrderLog.BankCurrencyTransferId);
            }

            purchaseOrderLog.delete();

            _ledgerJournalTrans.BankCurrencyTransferLog_RU    = 0;
            _ledgerJournalTrans.NoEdit                        = NoYes::No;
            _ledgerJournalTrans.PaymentStatus                 = CustVendPaymStatus::None;
            _ledgerJournalTrans.BankRemittanceFileId          = "";
            _ledgerJournalTrans.doUpdate();

            info(strFmt("@GLS103011", purchaseOrderLog.BankCurrencyTransferId, purchaseOrderLog.TransDate));
        }
        else
        {
            throw warning("@GLS102986");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByLedgerTrans</Name>
				<Source><![CDATA[
    public static boolean existByLedgerTrans (LedgerJournalTrans _ledgerJournalTrans)
    {
        return (select firstonly RecId from bankCurrencyTransferLog_RU
                where bankCurrencyTransferLog_RU.RecId       == _ledgerJournalTrans.BankCurrencyTransferLog_RU &&
                      bankCurrencyTransferLog_RU.JournalNum  == _ledgerJournalTrans.JournalNum                 &&
                      bankCurrencyTransferLog_RU.Voucher     == _ledgerJournalTrans.Voucher).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankCurrencyTransferLog_RU</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the BankCurrencyTransferLog_RU record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankCurrencyTransferLog_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static BankCurrencyTransferLog_RU find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankCurrencyTransferLog_RU bankCurrencyTransferLog;

        bankCurrencyTransferLog.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankCurrencyTransferLog.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankCurrencyTransferLog
            where bankCurrencyTransferLog.RecId == _recId;

        return bankCurrencyTransferLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerTrans</Name>
				<Source><![CDATA[
    public static BankCurrencyTransferLog_RU findByLedgerTrans (JournalId    _journalNum,
                                                                Voucher      _voucher,
                                                                boolean      _forUpdate = false)
    {
        BankCurrencyTransferLog_RU res;

        if (_journalNum && _voucher)
        {
            res.selectForUpdate(_forUpdate);

            select firstonly res
                where res.JournalNum    == _journalNum &&
                      res.Voucher       == _voucher;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankCurrencyTransferLog_RU</c> table.
    /// </summary>
    /// <param name="_transferCurOrderId">
    ///    The id of Currency transfer order.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankCurrencyTransferLog_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static BankCurrencyTransferLog_RU findByTransferId(BankCurrencyTransferId_RU   _transferCurOrderId,
                                                              boolean                     _forUpdate = false)
    {
        BankCurrencyTransferLog_RU res;

        if (_transferCurOrderId)
        {
            res.selectForUpdate(_forUpdate);

            select firstonly res
                where res.BankCurrencyTransferId    ==  _transferCurOrderId;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
public static BankCurrencyTransferLog_RU initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans, boolean _fillSpecAccount)
    {
        BankCurrencyTransferLog_RU  bankCurrencyTransferLog_RU;
        NumberSeq                   numberSeq;
        BankTransType               bankTransType = BankTransType::find(_ledgerJournalTrans.BankTransType);

        numberSeq = NumberSeq::newGetNum(BankParameters::numRefTransferCurOrder_RU());

        bankCurrencyTransferLog_RU.BankCurrencyTransferId = numberSeq.num();
        bankCurrencyTransferLog_RU.BankAdvancedTransType  = bankTransType.BankAdvancedTransType_RU;
        bankCurrencyTransferLog_RU.BankCurrencyDealCourse = _ledgerJournalTrans.BankCurrencyDealCourse_RU;
        bankCurrencyTransferLog_RU.TransferCurrency       = _ledgerJournalTrans.TransferCurrency_RU;
        bankCurrencyTransferLog_RU.JournalNum             = _ledgerJournalTrans.JournalNum;
        bankCurrencyTransferLog_RU.Voucher                = _ledgerJournalTrans.Voucher;
        bankCurrencyTransferLog_RU.JournalCurrency        = _ledgerJournalTrans.CurrencyCode;
        bankCurrencyTransferLog_RU.JournalAmount          = _ledgerJournalTrans.amount();

        if (_fillSpecAccount)
        {
            if (bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CashCollection)
            {
                bankCurrencyTransferLog_RU.BankSpecAccountId = _ledgerJournalTrans.BankSpecAccountId_RU;
            }
            else
            {
            bankCurrencyTransferLog_RU.BankSpecAccountId = _ledgerJournalTrans.parmOffsetAccount();
        }
        }
        else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankCurrencyTransferLog_RU.BankEntryAccountID = _ledgerJournalTrans.parmOffsetAccount();
        }

        bankCurrencyTransferLog_RU.insert();

        return bankCurrencyTransferLog_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@GLS114386</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>BankCurrencyTransferId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TransferCurOrderIdIdx</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TransferCurOrderIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyTransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionBankId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankSpecAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyTransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResponsibleWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyTransferId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankClient</Name>
			<Label>@GLS115265</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ElectronicPayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyBuy</Name>
			<Label>@GLS114379</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendDealAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyConvert</Name>
			<Label>@SYS53047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankSpecAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDealAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyTransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankSpecAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResponsibleWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionBankId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankSpecConditions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyDealCourse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDealAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAdvancedTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferAccounts</Name>
			<Label>@GLS114372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankSpecAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankEntryAccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementHeaderExt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementHeaderExtRecId_RU</ExtendedDataType>
			<Label>@GLS114396</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankAdvancedTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankAdvancedTransType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankCurrencyDealCourse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCurrencyDealCourse_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCurrencyTransferId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCurrencyTransferId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankEntryAccountID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
			<Label>@GLS114400</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankSpecAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankSpecConditions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS102982</Label>
			<EnumType>BankSpecConditions_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommissionBankId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ElectronicPayment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS115065</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>JournalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResponsibleWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS2587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendDealAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@GLS114384</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ResponsibleWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalNumVoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransferCurOrderIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BankCurrencyTransferId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderExtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHeaderExt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementHeaderExt</Name>
					<Field>AgreementHeaderExt</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCurrencyTransferLog_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResponsibleWorker</Name>
					<Field>ResponsibleWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JouranlCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JouranlCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>JournalCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransferCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransferCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCurrencyTransferLog_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TransferCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendDealAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendDealAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>