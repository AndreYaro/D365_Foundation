<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlBudgetCycle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlBudgetCycle extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalPeriodEnd</c> value relevant to the <c>BudgetCycle</c> field in the <c>BudgetControlBudgetCycle</c> table.
    /// </summary>
    /// <returns>
    /// The <c>FiscalPeriodEnd</c> value.
    /// </returns>
    public display FiscalPeriodEnd displayEndDate()
    {
        BudgetCycle budgetCycle;
        FiscalPeriodEnd endDate = dateNull();

        if (hasTableAccess(tableNum(BudgetCycle))
            && hasTableAccess(tableNum(FiscalCalendarPeriod)))
        {
            budgetCycle = BudgetCycle::find(this.BudgetCycle);

            if (budgetCycle)
            {
                endDate = budgetCycle.getEndDate();
            }
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalPeriodStart</c> value relevant to the <c>BudgetCycle</c> field in the <c>BudgetControlBudgetCycle</c> table.
    /// </summary>
    /// <returns>
    /// The <c>FiscalPeriodStart</c> value.
    /// </returns>
    public display FiscalPeriodStart displayStartDate()
    {
        BudgetCycle budgetCycle;
        FiscalPeriodStart startDate = dateNull();

        if (hasTableAccess(tableNum(BudgetCycle))
            && hasTableAccess(tableNum(FiscalCalendarPeriod)))
        {
            budgetCycle = BudgetCycle::find(this.BudgetCycle);

            if (budgetCycle)
            {
                startDate = budgetCycle.getStartDate();
            }
        }

        return  startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the budget model.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the budget model is set.
    /// </param>
    /// <param name="_budgetModelId">
    /// The new budget model value when the value of the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The budget model of the record in the <c>BudgetControlBudgetCycle</c> table.
    /// </returns>
    public edit BudgetModelId editBudgetModel(boolean _set, BudgetModelId _budgetModelId)
    {
        BudgetModelId originalBudgetModelId;
        dataAreaId originalBudgetModelDataAreaId;
        BudgetModelId budgetModelId = _budgetModelId;

        if (_set
            && hasTableAccess(tableNum(BudgetModel))
            && hasTableAccess(tableNum(CompanyInfo))
            && hasTableAccess(tableNum(Ledger)))
        {
            originalBudgetModelId = this.BudgetModelId;
            originalBudgetModelDataAreaId = this.BudgetModelDataAreaId;

            this.BudgetModelId = budgetModelId;
            this.BudgetModelSubModelId = budgetModelId;
            this.BudgetModelDataAreaId = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity());

            if (this.validateField(fieldNum(BudgetControlBudgetCycle, BudgetModelId)) == false)
            {
                // If the field validation for budget model fails, set this back to the original budget model.
                this.BudgetModelId = originalBudgetModelId;
                this.BudgetModelSubModelId = originalBudgetModelId;
                this.BudgetModelDataAreaId = originalBudgetModelDataAreaId;
            }

            this.BudgetModelType = HeadingSub::Heading;
        }

        return this.BudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vaidateBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetCycle</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetCycle</c> field is valid; otherwise, false.
    /// </returns>
    public boolean vaidateBudgetCycle()
    {
        BudgetControlBudgetCycle existingBudgetControlBudgetCycle;
        boolean isValid = true;
        BudgetCycle budgetCycle;

        if (this.BudgetCycle != 0 && this.BudgetControlConfiguration != 0)
        {
            budgetCycle = BudgetCycle::find(this.BudgetCycle);

            if (budgetCycle)
            {
                select firstonly RecId from existingBudgetControlBudgetCycle
                    where existingBudgetControlBudgetCycle.BudgetCycle == this.BudgetCycle &&
                        existingBudgetControlBudgetCycle.BudgetControlConfiguration == this.BudgetControlConfiguration &&
                        existingBudgetControlBudgetCycle.RecId != this.RecId;

                if (existingBudgetControlBudgetCycle)
                {
                    isValid = checkFailed(strFmt("@SYS320414", budgetCycle.Name));
                }
            }
            else
            {
                isValid = checkFailed(strFmt("@SYS342115", "@SYS342119"));
            }
        }
        else
        {
            // When there is no valid configuration id or budget cycle id
            // system error message is shown since those fields are mandatory fields.
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetModelId</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetModelId</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateBudgetModel()
    {
        boolean isValid = true;
        BudgetModel budgetModel;
        BudgetModel budgetModelSubModel;

        if (this.BudgetModelId && this.BudgetModelDataAreaId)
        {
            changecompany(this.BudgetModelDataAreaId)
            {
                budgetModel = BudgetModel::find(this.BudgetModelType, this.BudgetModelId, this.BudgetModelSubModelId, false);

                if (budgetModel)
                {
                    // When budget model exists then check whether the budget model
                    // contains any submodels.
                    select firstonly RecId from budgetModel
                        where budgetModel.Type == HeadingSub::Heading &&
                            budgetModel.ModelId == this.BudgetModelId
                        exists join budgetModelSubModel
                            where budgetModelSubModel.Type == HeadingSub::SubModel &&
                                budgetModelSubModel.ModelId == budgetModel.ModelId;

                    if (budgetModel)
                    {
                        isValid = checkFailed("@SYS320417");
                    }
                }
                else
                {
                    isValid = checkFailed(strFmt("@SYS320416", this.BudgetModelId, fieldStr(BudgetModel , ModelId), tablePName(BudgetModel)));
                }
            }
        }
        else
        {
            // When there is no budget model then system error message
            // is shown since this is a mandatory field.
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldNum(BudgetControlBudgetCycle, BudgetModelId)) :
                    isValid = this.validateBudgetModel();
                    break;

                case (fieldNum(BudgetControlBudgetCycle, BudgetCycle)):
                    isValid = this.vaidateBudgetCycle();
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetControlBudgetCycle</c>
    /// table exists and displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetControlBudgetCycle</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!BudgetControlBudgetCycle::exist(_recId))
        {
            ret = checkFailed(strFmt(BudgetControlBudgetCycle::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCycleNameAndConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a corresponding record in the <c>BudgetControlBudgetCycle</c>
    /// table exists for a given <c>BudgetCycle</c> name and <c>BudgetControlConfiguration</c> record ID.
    /// </summary>
    /// <param name = "_budgetCycleName">
    /// The <c>BudgetCycleName</c> value that needs to be found.
    /// </param>
    /// <param name = "_configurationRecId">
    /// The <c>BudgetControlConfigurationRecId</c> of the budget control configuration.
    /// </param>
    /// <returns>
    /// True if the corresponding record exists; otherwise, false.
    /// </returns>
    public static boolean existByCycleNameAndConfiguration(BudgetCycleName _budgetCycleName, BudgetControlConfigurationRecId _configurationRecId)
    {
        BudgetCycle budgetCycle;
        BudgetControlBudgetCycle budgetControlBudgetCycle;

        select firstonly RecId from budgetCycle
            where budgetCycle.Name == _budgetCycleName
            exists join budgetControlBudgetCycle
                where budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    && budgetControlBudgetCycle.BudgetControlConfiguration == _configurationRecId;

        return budgetCycle.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetControlBudgetCycle</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetControlBudgetCycle</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetControlBudgetCycle
                    where budgetControlBudgetCycle.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the budget model is used in the budget control configuration.
    /// </summary>
    /// <param name="_budgetModel">
    /// The budget model record for which the budget control configuration record has to be found.
    /// </param>
    /// <returns>
    /// true if the budget model is used in the budget control configuration; otherwise, false.
    /// </returns>
    public static boolean existByBudgetModel(BudgetModel _budgetModel)
    {
        boolean found = false;
        BudgetControlBudgetCycle controlCycle;

        // Check for the parent budget model and not the sub model.
        select firstonly RecId from controlCycle
            where controlCycle.BudgetModelId == _budgetModel.ModelId &&
                    controlCycle.BudgetModelSubModelId == _budgetModel.ModelId &&
                    controlCycle.BudgetModelType == HeadingSub::Heading &&
                    controlCycle.BudgetModelDataAreaId == _budgetModel.DataAreaId;

        if (controlCycle)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetControlBudgetCycle</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlBudgetCycle</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlBudgetCycle find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlBudgetCycle budgetControlBudgetCycle;

        budgetControlBudgetCycle.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlBudgetCycle.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetControlBudgetCycle
            where budgetControlBudgetCycle.RecId == _recId;

        return budgetControlBudgetCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS327329</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@SYS314459</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetCycle</TitleField1>
	<TitleField2>BudgetControlConfiguration</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetControlConfigurationBudgetCycleIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetModel</Name>
			<Label>@SYS301218</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelSubModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetControlConfiguration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetCycle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314460</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModelDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetModelId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModelSubModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetModelSubId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetModelType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>HeadingSub</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetControlConfigurationBudgetCycleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetCycle</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetControlConfigurationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetCycle</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetControlConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetControlConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetControlConfiguration</Name>
					<Field>BudgetControlConfiguration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetCycle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetCycle</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetCycle</Name>
					<Field>BudgetCycle</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelId</Name>
					<Field>BudgetModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelSubModelId</Name>
					<Field>BudgetModelSubModelId</Field>
					<RelatedField>SubModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelType</Name>
					<Field>BudgetModelType</Field>
					<RelatedField>Type</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModelDataAreaId</Name>
					<Field>BudgetModelDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>