<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTradingPartner</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InterCompanyTradingPartner extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMandatoryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the mandatory fields in a <c>InterCompanyTradingPartner</c> record have values.
    /// </summary>
    /// <returns>
    ///    true if all mandatory fields have values; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The fields that are mandatory are indicated by the value of the <c>TradingPartnerType</c> field in
    ///    the record.
    /// </remarks>
    private boolean checkMandatoryValues()
    {
        boolean     ok = true;

        switch (this.TradingPartnerType)
        {
            case InterCompanyTradingPartnerType::Customer :
                if (!this.CustomerDataAreaId || !this.CustomerParty)
                {
                    ok = checkFailed("@SYS313135");
                }
                break;

            case InterCompanyTradingPartnerType::Vendor :
                if (!this.VendorDataAreaId || !this.VendorParty)
                {
                    ok = checkFailed("@SYS313136");
                }
                break;
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustAccount</c> type.
    /// </summary>
    /// <returns>
    /// The customer ID of the record in the <c>CustTable</c> table.
    /// </returns>
    public display CustAccount custAccount()
    {
        return this.custTable().AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustTable</c> table record for the current intercompany trading partner.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c> table record.
    /// </returns>
    public CustTable custTable()
    {
        CustTable   custTable;

        if (this.CustomerParty && this.CustomerDataAreaId)
        {
            changecompany (this.CustomerDataAreaId)
            {
                custTable = CustTable::findByPartyRecId(this.CustomerParty);
            }
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyEndpointActionPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InterCompanyEndpointActionPolicy</c> table record for the current intercompany trading partner.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InterCompanyEndpointActionPolicy</c> table record.
    /// </returns>
    public InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean  _forUpdate = false)
    {
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        if (this.RecId)
        {
            interCompanyEndpointActionPolicy.selectForUpdate(_forUpdate);

            select firstonly interCompanyEndpointActionPolicy
                where interCompanyEndpointActionPolicy.InterCompanyTradingPartner == this.RecId;
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InterCompanyTradingRelation</c> table record for the current intercompany trading partner.
    /// </summary>
    /// <returns>
    /// The <c>InterCompanyTradingRelation</c> table record.
    /// </returns>
    public InterCompanyTradingRelation interCompanyTradingRelation()
    {
        InterCompanyTradingRelation interCompanyTradingRelation;

        if (this.RecId)
        {
            switch (this.TradingPartnerType)
            {
                case InterCompanyTradingPartnerType::Customer :
                    select firstonly interCompanyTradingRelation
                        where interCompanyTradingRelation.InterCompanyTradingCustomer == this.RecId;
                    break;

                case InterCompanyTradingPartnerType::Vendor :
                    select firstonly interCompanyTradingRelation
                        where interCompanyTradingRelation.InterCompanyTradingVendor == this.RecId;
                    break;
            }
        }
        return interCompanyTradingRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InterCompanyTradingValueMap</c> table record for the current intercompany trading partner.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InterCompanyTradingValueMap</c> table record.
    /// </returns>
    public InterCompanyTradingValueMap interCompanyTradingValueMap(boolean  _forUpdate = false)
    {
        InterCompanyTradingValueMap    interCompanyTradingValueMap;

        if (this.RecId)
        {
            interCompanyTradingValueMap.selectForUpdate(_forUpdate);

            select firstonly interCompanyTradingValueMap
                where interCompanyTradingValueMap.InterCompanyTradingPartner == this.RecId;
        }
        return interCompanyTradingValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret = false;

        if (this.checkMandatoryValues())
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendAccount</c> type.
    /// </summary>
    /// <returns>
    /// The vendor ID of the record in the <c>VendTable</c> table.
    /// </returns>
    public display VendAccount vendAccount()
    {
        return this.vendTable().AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VendTable</c> table record for the current intercompany trading partner.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c> table record.
    /// </returns>
    public VendTable vendTable()
    {
        VendTable   vendTable;

        if (this.VendorParty && this.VendorDataAreaId)
        {
            changecompany (this.VendorDataAreaId)
            {
                vendTable = VendTable::findByPartyRecId(this.VendorParty);
            }
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InterCompanyTradingPartner</c> table from record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InterCompanyTradingPartner</c> table; otherwise, an empty record.
    /// </returns>
    static InterCompanyTradingPartner find(recId    _recId,
                                           boolean  _forUpdate = false)
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;

        if (_recId)
        {
            interCompanyTradingPartner.selectForUpdate(_forUpdate);

            select interCompanyTradingPartner
                where interCompanyTradingPartner.RecId == _recId;
        }

        return interCompanyTradingPartner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InterCompanyTradingPartner</c> table that is based on a
    /// customer.
    /// </summary>
    /// <param name="_customerPartyID">
    /// The customer party ID of the <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_customerDataAreaID">
    /// The customer company ID of the <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingPartner</c> table; otherwise, an empty record.
    /// </returns>
    static InterCompanyTradingPartner findCustomer(InterCompanyTradingCustomerPartyID       _customerPartyID,
                                                   InterCompanyTradingCustomerDataAreaID    _customerDataAreaID,
                                                   boolean                                  _forUpdate = false)
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;

        if (_customerPartyID && _customerDataAreaID)
        {
            interCompanyTradingPartner.selectForUpdate(_forUpdate);

            select firstonly interCompanyTradingPartner
                where interCompanyTradingPartner.TradingPartnerType == InterCompanyTradingPartnerType::Customer
                &&    interCompanyTradingPartner.CustomerParty      == _customerPartyID
                &&    interCompanyTradingPartner.CustomerDataAreaId == _customerDataAreaID;
        }

        return interCompanyTradingPartner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>InterCompanyTradingPartner</c> table that is based
    /// on a customer.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer ID of the <c>InterCompanyTradingPartner</c> table record to find or create.
    /// </param>
    /// <param name="_customerDataAreaID">
    /// The customer company ID of the <c>InterCompanyTradingPartner</c> record to find or create.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingPartner</c> table if the partner is found or created;
    /// otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The method returns an empty <c>InterCompanyTradingPartner</c> record if the customer ID is not
    /// represented in the <c>CustTable</c> table.
    /// </remarks>
    static InterCompanyTradingPartner findOrCreateCustomer(CustAccount                              _custAccount,
                                                           InterCompanyTradingCustomerDataAreaID    _customerDataAreaID)
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;
        CustTable                   custTable;

        if (_custAccount && _customerDataAreaID)
        {
            changecompany (_customerDataAreaID)
            {
                custTable = CustTable::find(_custAccount);
                if (custTable)
                {
                    interCompanyTradingPartner = InterCompanyTradingPartner::findCustomer(custTable.Party, _customerDataAreaID);

                    if (!interCompanyTradingPartner)
                    {
                        interCompanyTradingPartner.clear();
                        interCompanyTradingPartner.initValue();
                        interCompanyTradingPartner.TradingPartnerType  = InterCompanyTradingPartnerType::Customer;
                        interCompanyTradingPartner.CustomerParty       = custTable.Party;
                        interCompanyTradingPartner.CustomerDataAreaId  = _customerDataAreaID;

                        if (!interCompanyTradingPartner.validateWrite())
                        {
                            throw error("@SYS319214");
                        }
                        interCompanyTradingPartner.insert();
                    }
                }
            }
        }

        return interCompanyTradingPartner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>InterCompanyTradingPartner</c> table that is based
    /// on a vendor.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor ID of the <c>InterCompanyTradingPartner</c> record to find or create.
    /// </param>
    /// <param name="_vendorDataAreaID">
    /// The vendor company ID of the <c>InterCompanyTradingPartner</c> record to find or create.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingPartner</c> table if the related record is found or created;
    /// otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The method returns an empty <c>InterCompanyTradingPartner</c> record if the vendor ID is not
    /// represented in the <c>VendTable</c> table.
    /// </remarks>
    static InterCompanyTradingPartner findOrCreateVendor(VendAccount                            _vendAccount,
                                                         InterCompanyTradingVendorDataAreaID    _vendorDataAreaID)
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;
        VendTable                   vendTable;

        if (_vendAccount && _vendorDataAreaID)
        {
            changecompany (_vendorDataAreaID)
            {
                vendTable = VendTable::find(_vendAccount);
                if (vendTable)
                {
                    interCompanyTradingPartner = InterCompanyTradingPartner::findVendor(vendTable.Party, _vendorDataAreaID);

                    if (!interCompanyTradingPartner)
                    {
                        interCompanyTradingPartner.clear();
                        interCompanyTradingPartner.initValue();
                        interCompanyTradingPartner.TradingPartnerType   = InterCompanyTradingPartnerType::Vendor;
                        interCompanyTradingPartner.VendorParty          = vendTable.Party;
                        interCompanyTradingPartner.VendorDataAreaId     = _vendorDataAreaID;

                        if (!interCompanyTradingPartner.validateWrite())
                        {
                            throw error("@SYS319214");
                        }

                        interCompanyTradingPartner.insert();
                    }
                }
            }
        }

        return interCompanyTradingPartner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTradingCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified <c>InterCompanyTradingPartner</c> record based on valid entities.
    /// </summary>
    /// <param name="_customerDataAreaID">
    /// The customer company ID of an <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_vendorDataAreaID">
    /// The vendor company ID of an <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>InterCompanyTradingPartner</c> record if found; otherwise, an empty record.
    /// </returns>
    static InterCompanyTradingPartner findTradingCustomer(
                                                   InterCompanyTradingCustomerDataAreaID    _customerDataAreaID,
                                                   InterCompanyTradingVendorDataAreaID      _vendorDataAreaID,
                                                   boolean                                  _forUpdate = false)
    {
        InterCompanyTradingPartner  vendor;
        InterCompanyTradingPartner  customer;
        InterCompanyTradingRelation  relation;

        // Assuming for example _customerDataAreaID = 'ceu' and _vendorDataAreaID = 'cee', functionally need to peform the following
        // SQL query:
        //
        // select * from INTERCOMPANYTRADINGPARTNER where
        //    CUSTOMERDATAAREAID='ceu' and
        //    RECID IN
        //        (select INTERCOMPANYTRADINGCUSTOMER from INTERCOMPANYTRADINGRELATION where
        //            ACTIVE=1 and
        //            INTERCOMPANYTRADINGVENDOR in (select RECID from INTERCOMPANYTRADINGPARTNER where VENDORDATAAREAID='cee'))
        //
        // This query translates to (using inner joins):
        //
        // select Customer.* from INTERCOMPANYTRADINGRELATION
        // join INTERCOMPANYTRADINGPARTNER as Customer on INTERCOMPANYTRADINGRELATION.INTERCOMPANYTRADINGCUSTOMER = Customer.RECID && (Customer.CustomerDataAreaId == 'ceu') &&
        // join INTERCOMPANYTRADINGPARTNER as Vendor on INTERCOMPANYTRADINGRELATION.INTERCOMPANYTRADINGVENDOR = Vendor.RECID && (vendor.VendorDataAreaId == 'cee') Where
        // INTERCOMPANYTRADINGRELATION.ACTIVE=1

        if (_vendorDataAreaID && _customerDataAreaID)
        {
            customer.selectForUpdate(_forUpdate);

            select firstonly *
                from relation
                join customer where relation.InterCompanyTradingCustomer == customer.RecId && (customer.CustomerDataAreaId == _customerDataAreaID)
                join VendorDataAreaId, RecId from vendor where relation.InterCompanyTradingVendor == vendor.RecId && (vendor.VendorDataAreaId == _vendorDataAreaID) &&
                relation.Active == 1;
        }

        return customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InterCompanyTradingPartner</c> table that is based on a vendor.
    /// </summary>
    /// <param name="_vendorPartyID">
    /// The vendor party ID of the <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_vendorDataAreaID">
    /// The vendor company ID of the <c>InterCompanyTradingPartner</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingPartner</c> table; otherwise, an empty record.
    /// </returns>
    static InterCompanyTradingPartner findVendor(InterCompanyTradingVendorPartyID       _vendorPartyID,
                                                 InterCompanyTradingCustomerDataAreaID  _vendorDataAreaID,
                                                 boolean                                _forUpdate = false)
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;

        if (_vendorPartyID && _vendorDataAreaID)
        {
            interCompanyTradingPartner.selectForUpdate(_forUpdate);

            select firstonly interCompanyTradingPartner
                where interCompanyTradingPartner.TradingPartnerType == InterCompanyTradingPartnerType::Vendor
                &&    interCompanyTradingPartner.VendorParty        == _vendorPartyID
                &&    interCompanyTradingPartner.VendorDataAreaId   == _vendorDataAreaID;
        }

        return interCompanyTradingPartner;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeInterCompany</ConfigurationKey>
	<DeveloperDocumentation>@SYS318839</DeveloperDocumentation>
	<FormRef>InterCompanyTradingRelationSetupCustomer</FormRef>
	<Label>@SYS313143</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustomerParty</TitleField1>
	<TitleField2>VendorParty</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>TradingCustomerIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InterCompanyEndpointActionPolicy</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InterCompanyEndpointActionPolicy</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InterCompanyTradingValueMap</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InterCompanyTradingValueMap</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TradingPartnerType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TradingPartnerPurchase</Name>
			<Label>@SYS315911</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TradingPartnerSales</Name>
			<Label>@SYS315909</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InterCompanyTradingVendorDataAreaID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InterCompanyTradingCustomerDataAreaID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerParty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyTradingCustomerPartyID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TradingPartnerType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>InterCompanyTradingPartnerType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorParty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyTradingVendorPartyID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TradingCustomerIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomerParty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorParty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TradingVendorIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorParty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerParty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomerDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InterCompanyTradingPartner</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerDataAreaId</Name>
					<SourceEDT>InterCompanyTradingCustomerDataAreaID</SourceEDT>
					<Field>CustomerDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>InterCompanyTradingCustomerDataAreaID</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerParty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTableCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTableCustomer_InterCompanyTradingPartner</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerParty</Name>
					<Field>CustomerParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendorDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendorDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InterCompanyTradingPartner</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorDataAreaId</Name>
					<SourceEDT>InterCompanyTradingVendorDataAreaID</SourceEDT>
					<Field>VendorDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>InterCompanyTradingVendorDataAreaID</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendorParty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTableVendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTableVendor_InterCompanyTradingPartner</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorParty</Name>
					<Field>VendorParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Customer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntercompanyTradingPartner</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerDataAreaId</Name>
					<Field>CustomerDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerParty</Name>
					<Field>CustomerParty</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Vendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntercompanyTradingPartner</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorDataAreaId</Name>
					<Field>VendorDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorParty</Name>
					<Field>VendorParty</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>