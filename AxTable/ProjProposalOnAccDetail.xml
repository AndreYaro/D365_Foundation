<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalOnAccDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalOnAccDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    display AmountCur lineAmount()
    {
        return ProjTrans::newProjProposalOnAccSale(this.projProposalOnAcc(), this, this.projOnAccTransSale()).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOnAccTransSale</Name>
				<Source><![CDATA[
    public ProjOnAccTransSale projOnAccTransSale()
    {
        return (ProjOnAccTransSale::find(this.SaleRefRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalOnAcc</Name>
				<Source><![CDATA[
    public ProjProposalOnAcc projProposalOnAcc(boolean _forUpdate = false)
    {
        return (ProjProposalOnAcc::findRecId(this.ProposalRefRecId, _forUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceInclTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the sales price including included taxes for this transaction.
    /// </summary>
    /// <param name="_includedTaxPercent_BR">
    ///     The tax percentage specified for this order; optional.
    /// </param>
    /// <returns>
    ///     The sales price including included taxes for this transaction.
    /// </returns>
    public display SalesPriceInclTax_BR salesPriceInclTax_BR(TaxValue _includedTaxPercent_BR = this.projProposalOnAcc().IncludedTaxPercent_BR)
    {
        return this.AmountCur / (1 -  _includedTaxPercent_BR / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjProposalOnAccDetail find(RefRecId _saleRefRecId, ProjProposalId _proposalId = '', boolean _forUpdate = false, boolean _forDisplay = false)
    {
        ProjProposalId              proposalId = _proposalId;
        ProjProposalOnAcc           projProposalOnAcc = null;
        ProjProposalOnAccDetail     projProposalOnAccDetail = null;

        if (! proposalId)
        {
            proposalId  = ProjProposalOnAccDetail::findActiveProposalId(_saleRefRecId, _forDisplay);
        }

        projProposalOnAccDetail.selectForUpdate(_forUpdate);

        if (_saleRefRecId && proposalId)
        {
            select projProposalOnAccDetail
                where projProposalOnAccDetail.SaleRefRecId == _saleRefRecId
                    join ProposalId, RecId from projProposalOnAcc
                        where projProposalOnAcc.RecId == projProposalOnAccDetail.ProposalRefRecId &&
                            projProposalOnAcc.ProposalId == proposalId;
        }

        return projProposalOnAccDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProposalId</Name>
				<Source><![CDATA[
    public static ProjProposalId findActiveProposalId(RefRecId _saleRefRecId, boolean _forDisplay = false)
    {
        RefRecId                    saleRefRecId = _saleRefRecId;

        ProjProposalId              proposalId;

        ProjOnAccTransSale          projOnAccTransSale = ProjOnAccTransSale::find(_saleRefRecId);
        ProjProposalOnAcc           projProposalOnAcc;
        ProjProposalOnAccDetail     projProposalOnAccDetail;
        ProjProposalJour            projProposalJour;
        ProjInvoiceOnAcc            projInvoiceOnAcc;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;

        if ((projOnAccTransSale.TransStatus   == ProjTransStatus::Posted      ||
            projOnAccTransSale.TransStatus   == ProjTransStatus::Adjusted    ||
            projOnAccTransSale.TransStatus   == ProjTransStatus::Estimated   ||
            projOnAccTransSale.TransStatus   == ProjTransStatus::Eliminated) && !_forDisplay)
        {
            return '';
        }

    //  test if only one proposal return this
        select count(RecId) from projProposalOnAccDetail
            where projProposalOnAccDetail.SaleRefRecId  == saleRefRecId;

        if (projProposalOnAccDetail.RecId <= 1)
        {
            select firstonly projProposalOnAccDetail
                where projProposalOnAccDetail.SaleRefRecId == saleRefRecId
                    join projProposalOnAcc
                        where projProposalOnAcc.RecId == projProposalOnAccDetail.ProposalRefRecId;

            proposalId = projProposalOnAcc.ProposalId;
        }
        else
        {
    //  test if no invoice exists for proposal - return this
            select projProposalOnAccDetail
                where projProposalOnAccDetail.SaleRefRecId == _saleRefRecId
                    join projProposalOnAcc
                        where projProposalOnAcc.RecId == projProposalOnAccDetail.ProposalRefRecId
                        exists join projProposalJour
                            where projProposalJour.ProposalId == projProposalOnAcc.ProposalId
                            notexists join projInvoiceOnAcc
                                where projInvoiceOnAcc.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                join projInvoiceOnAccDetail
                                    where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                                       && projInvoiceOnAccDetail.SaleRefRecId == projProposalOnAccDetail.SaleRefRecId;

            if (projProposalOnAcc)
            {
                proposalId = projProposalOnAcc.ProposalId;
            }
            else
            {
    //  test if invoice with no-ref exists for proposal - return this
                select RecId from projProposalOnAccDetail
                    where projProposalOnAccDetail.SaleRefRecId == _saleRefRecId
                        join projProposalOnAcc
                            where projProposalOnAcc.RecId == projProposalOnAccDetail.ProposalRefRecId
                            exists join projProposalJour
                                where projProposalJour.ProposalId == projProposalOnAcc.ProposalId
                                join RecId from projInvoiceOnAcc
                                    where projInvoiceOnAcc.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                    join RecId from projInvoiceOnAccDetail
                                    where  projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                                       &&  projInvoiceOnAccDetail.SaleRefRecId == _saleRefRecId
                                       && !projInvoiceOnAccDetail.RefRecId;

                if (projProposalOnAcc)
                {
                    proposalId  = projProposalOnAcc.ProposalId;
                }
            }
        }

        return proposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromTrans</Name>
				<Source><![CDATA[
    public static ProjProposalOnAccDetail initProposaleFromTrans(ProjOnAccTransSale _projOnAccTransSale)
    {
        ProjProposalOnAccDetail   projProposalOnAccDetail;

        projProposalOnAccDetail.SaleRefRecId      = _projOnAccTransSale.RecId;
        projProposalOnAccDetail.AmountCur         = _projOnAccTransSale.Amount;

        return projProposalOnAccDetail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS320566</DeveloperDocumentation>
	<Label>@SYS55263</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SaleRefRecId</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Proposal</Name>
			<Label>@SYS26457</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProposalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SaleRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProposalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SaleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SaleRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjOnAccTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjOnAccTransSale</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SaleRefRecId</Name>
					<Field>SaleRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalOnAcc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalOnAcc</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalRefRecId</Name>
					<Field>ProposalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>