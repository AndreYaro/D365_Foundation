<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetIdlePeriodTable_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetIdlePeriodTable_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupAssetIdByAssetGroupIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a look up form for AssetId field.
    /// </summary>
    /// <param name="_formControl">
    /// Form control that the look up form attached.
    /// </param>
    /// <param name="_assetGroupId">
    /// Asset group.
    /// </param>
    /// <param name="_assetBookId">
    /// Asset book.
    /// </param>
    /// <returns>
    /// Returns look up form for AssetId field.
    /// </returns>
    public static SysTableLookup lookupAssetIdByAssetGroupIdBookId(FormControl  _formControl,
                                                                   AssetGroupId _assetGroupId,
                                                                   AssetBookId  _assetBookId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildAssetBook;
        QueryBuildDataSource    queryBuildAssetTable;

        queryBuildAssetTable = query.addDataSource(tableNum(AssetTable));
        queryBuildAssetBook  = queryBuildAssetTable.addDataSource(tableNum(AssetBook));
        queryBuildAssetBook.relations(true);
        queryBuildAssetBook.joinMode(JoinMode::ExistsJoin);

        if (_assetGroupId)
        {
            queryBuildAssetBook.addRange(fieldNum(AssetBook, AssetGroup)).value(queryValue(_assetGroupId));
        }
        if (_assetBookId)
        {
            queryBuildAssetBook.addRange(fieldNum(AssetBook, BookId)).value(queryValue(_assetBookId));
        }

        sysTableLookup = SysTableLookup::newParameters(tableNum(AssetTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(AssetTable, AssetId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBookIdByAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a look up form for Asset Book id field.
    /// </summary>
    /// <param name="_formControl">
    /// Form control that the look up form attached.
    /// </param>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <returns>
    /// Returns look up form for Asset Book id field.
    /// </returns>
    public static SysTableLookup lookupBookIdByAssetId(FormControl _formControl, AssetId _assetId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildAssetBook;
        QueryBuildDataSource    queryBuildAssetBookTable;

        queryBuildAssetBookTable = query.addDataSource(tableNum(AssetBookTable));
        queryBuildAssetBook = queryBuildAssetBookTable.addDataSource(tableNum(AssetBook));
        queryBuildAssetBook.relations(true);
        queryBuildAssetBook.joinMode(JoinMode::ExistsJoin);

        if (_assetId)
        {
            queryBuildAssetBook.addRange(fieldNum(AssetBook, AssetId)).value(queryValue(_assetId));
        }

        sysTableLookup = SysTableLookup::newParameters(tableNum(AssetBookTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(AssetBookTable, BookId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetGroupByAssetIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a look up form for Asset group field.
    /// </summary>
    /// <param name="_formControl">
    /// Form control that the look up form attached.
    /// </param>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <param name="_assetGroupId">
    /// Asset group.
    /// </param>
    /// <returns>
    /// Returns look up form for Asset Book id field.
    /// </returns>
    public static SysTableLookup lookupAssetGroupByAssetIdBookId(FormControl  _formControl,
                                                                 AssetId      _assetId,
                                                                 AssetBookId  _assetBookId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildAssetBook;
        QueryBuildDataSource    queryBuildAssetGroup;

        queryBuildAssetGroup = query.addDataSource(tableNum(AssetGroup));
        queryBuildAssetBook = queryBuildAssetGroup.addDataSource(tableNum(AssetBook));
        queryBuildAssetBook.relations(true);
        queryBuildAssetBook.joinMode(JoinMode::ExistsJoin);

        if (_assetId)
        {
            queryBuildAssetBook.addRange(fieldNum(AssetBook, AssetId)).value(queryValue(_assetId));
        }
        if (_assetBookId)
        {
            queryBuildAssetBook.addRange(fieldNum(AssetBook, BookId)).value(queryValue(_assetBookId));
        }

        sysTableLookup = SysTableLookup::newParameters(tableNum(AssetGroup), _formControl);
        sysTableLookup.addLookupfield(fieldNum(AssetGroup, groupId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        AssetIdlePeriodAssign_JP    assetIdlePeriodAssign;

        super();

        select firstonly Reason from assetIdlePeriodAssign
            where assetIdlePeriodAssign.RecId == this.AssetIdlePeriodAssign_JP;

        this.Reason     = assetIdlePeriodAssign.Reason;
        this.Skip       = NoYes::Yes;

        this.initFromAssetId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        AssetTable      assetTable;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AssetIdlePeriodTable_JP, AssetId):
                this.initFromAssetId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodFrequency</Name>
				<Source><![CDATA[
    display AssetAccrual periodFrequency()
    {
        return AssetBook::find(this.AssetId, this.BookId).depreciationProfile().Accrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// checks the specified record in the <c>AssetIdlePeriodTable_JP</c> table.
    /// </summary>
    /// <param name="_assetId">
    /// The Asset Id.
    /// </param>
    /// <param name="_assetBookId">
    /// The Asset Book Id.
    /// </param>
    /// <param name="_transDate">
    /// The Tranaction date.
    /// </param>
    /// <returns>
    /// Return true, if table record found.Otherwise false.
    /// </returns>
    public static boolean exists(AssetId            _assetId,
                                 AssetBookId        _assetBookId,
                                 AssetTransDate     _transDate)
    {
        AssetIdlePeriodAssign_JP    assetIdlePeriodAssign;
        AssetIdlePeriodTable_JP     assetIdlePeriodTable;

        select firstonly RecId from assetIdlePeriodTable
            where assetIdlePeriodTable.AssetId == _assetId
               && assetIdlePeriodTable.BookId  == _assetBookId
               && assetIdlePeriodTable.Skip    == NoYes::Yes
            exists join assetIdlePeriodAssign
                where assetIdlePeriodAssign.RecId      == assetIdlePeriodTable.AssetIdlePeriodAssign_JP
                   && assetIdlePeriodAssign.Status == AssetIdlePeriodStatus_JP::Confirmed
                   && (assetIdlePeriodAssign.ValidFrom  <= _transDate
                       && assetIdlePeriodAssign.ValidTo >= _transDate);

        return assetIdlePeriodTable.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign the value asset group field based on asset id.
    /// </summary>
    private void initFromAssetId()
    {
        AssetTable  assetTable;

        if (this.AssetId)
        {
            assetTable      = AssetTable::find(this.AssetId);
            this.AssetGroup = assetTable.AssetGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssetIdlePeriodTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the records in AssetIdlePeriodTable_JP table.
    /// </summary>
    /// <param name="_assetBook">
    /// The Asset Book record.
    /// </param>
    /// <param name="_assetIdlePeriodAssignRecId">
    /// The AssetIdlePeriodAssign_JP table recId.
    /// </param>
    public void deleteAssetIdlePeriodTable(AssetBook _assetBook, RecId _assetIdlePeriodAssignRecId)
    {
        AssetIdlePeriodTable_JP assetIdlePeriodTable;

        ttsbegin;

        delete_from assetIdlePeriodTable
            where assetIdlePeriodTable.BookId  == _assetBook.BookId
               && assetIdlePeriodTable.AssetId == _assetBook.AssetId
               && assetIdlePeriodTable.AssetIdlePeriodAssign_JP == _assetIdlePeriodAssignRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>period</Name>
				<Source><![CDATA[
    display int period()
    {
        AssetTableInterval          assetTableInterval;
        AssetDepreciationProfile    assetDepreciationProfile;
        AssetIdlePeriodAssign_JP    assetIdlePeriodAssign;
        int                         period;

        select firstonly assetIdlePeriodAssign
            where assetIdlePeriodAssign.RecId == this.AssetIdlePeriodAssign_JP;

        assetDepreciationProfile = AssetBook::find(this.AssetId, this.BookId).depreciationProfile();
        assetTableInterval       = AssetTableInterval::construct(assetDepreciationProfile);

        period =  assetTableInterval.numOfPeriods(assetIdlePeriodAssign.ValidFrom, assetIdlePeriodAssign.ValidTo);

        if (((assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod  || assetDepreciationProfile.Accrual == AssetAccrual::Monthly)
                && assetTableInterval.findLastDayOfMonth(assetIdlePeriodAssign.Validto)   != assetIdlePeriodAssign.ValidTo)
             || (assetDepreciationProfile.Accrual == AssetAccrual::Yearly
                && assetTableInterval.findLastDayOfYear(assetIdlePeriodAssign.Validto)    != assetIdlePeriodAssign.ValidTo)
             || (assetDepreciationProfile.Accrual == AssetAccrual::Quarterly
                && assetTableInterval.findLastDayOfQuarter(assetIdlePeriodAssign.ValidTo) != assetIdlePeriodAssign.ValidTo)
             || (assetDepreciationProfile.Accrual == AssetAccrual::HalfYearly
                && assetTableInterval.endPeriod(assetIdlePeriodAssign.ValidTo) != assetIdlePeriodAssign.ValidTo))
        {
            period = period - 1;
        }

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AssetIdlePeriodTable_JP, AssetId):
                case fieldNum(AssetIdlePeriodTable_JP, BookId):
                    if (this.AssetId && this.BookId && !AssetBook::find(this.AssetId, this.BookId).RecId)
                    {
                        ret = checkFailed(strfmt("@FixedAssets:FA_MessageValidation_AssetIdBookIdCombination",
                                this.BookId, this.AssetId, fieldpname(AssetIdlePeriodTable_JP, BookId), fieldpname(AssetIdlePeriodTable_JP, AssetId),
                                tableId2PName(tableNum(AssetBook))));
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetName</Name>
				<Source><![CDATA[
    display AssetName assetName()
    {
        return AssetTable::find(this.AssetId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingLayer</Name>
				<Source><![CDATA[
    display CurrentOperationsTax postingLayer()
    {
        return AssetBookTable::find(this.BookId).CurrentOperationsTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_DeveloperDocumentation_AssetIdlePeriodTable</DeveloperDocumentation>
	<Label>@FixedAssets:FA_FixedAssetIdlePeriod</Label>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>BookId</TitleField2>
	<Modules>FixedAssets</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Skip</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reason</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>String30</ExtendedDataType>
			<Label>@SYS107174</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Label>@SYS95794</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetIdlePeriodAssign_JP</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Skip</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS25456</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetIdlePeriodAssign_JPIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetIdlePeriodAssign_JP</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetIdlePeriodAssign_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetIdlePeriodAssign_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetIdlePeriodAssign_JP</Name>
					<Field>AssetIdlePeriodAssign_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<Field>AssetGroup</Field>
					<RelatedField>AssetGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>