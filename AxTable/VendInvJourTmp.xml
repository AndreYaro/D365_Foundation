<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvJourTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvJourTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initForEPandCheckInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills this table with invoices associated with the payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment <c>LedgerJournalTrans</c>.
    /// </param>
    public void initForEPandCheckInvoices(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendSettlement vendSettlement;
        VendInvoiceJour vendInvJour;
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;

        delete_from this;

        if (_ledgerJournalTrans.VendTransId != 0)
        {
            while select OffsetCompany, OffsetRecId, OffsetTransVoucher, AccountNum from vendSettlement
                where vendSettlement.TransRecId == _ledgerJournalTrans.VendTransId
                    && vendSettlement.CanBeReversed == true
            {
                select firstonly crossCompany * from vendInvJour
                    exists join vendTrans
                        where vendTrans.RecId == vendSettlement.OffsetRecId
                            && vendTrans.DataAreaId == vendSettlement.OffsetCompany
                            && vendTrans.Voucher == vendInvJour.LedgerVoucher
                            && vendTrans.TransDate == vendInvJour.InvoiceDate
                            && vendTrans.AccountNum == vendInvJour.InvoiceAccount
                            && VendTrans.Invoice == vendInvJour.InvoiceId;

                if (vendInvJour.RecId == 0)
                {
                    LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
					
                    select firstonly crossCompany * from vendInvJour
                        join ledgerJournalVoucherChanged
                            where ledgerJournalVoucherChanged.ToVoucher == vendInvJour.LedgerVoucher
                                && ledgerJournalVoucherChanged.ToDate == vendInvJour.InvoiceDate
                                && ledgerJournalVoucherChanged.FromVoucher == vendSettlement.OffsetTransVoucher
                                && vendInvJour.DataAreaId == vendSettlement.OffsetCompany
                                && vendInvJour.InvoiceAccount == vendSettlement.AccountNum;
                }

                if (vendInvJour.RecId != 0)
                {
                    this.insertForPaymentHistory(vendInvJour);
                }
            }

        }
        else
        {
            while select crossCompany InvoiceId, LedgerVoucher, CurrencyCode, SumTax, InvoiceAmount, SourceDocumentHeader from vendInvJour
                exists join vendTrans
                    where vendTrans.Voucher == vendInvJour.LedgerVoucher &&
                        vendTrans.AccountNum == vendInvJour.InvoiceAccount &&
                        vendTrans.TransDate == vendInvJour.InvoiceDate
                exists join vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId
                exists join specTrans
                    where specTrans.RefRecId == vendTransOpen.RecId &&
                          specTrans.SpecRecId == _ledgerJournalTrans.RecId
            {
                this.insertForPaymentHistory(vendInvJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForPromissoryNoteInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills this table with invoices associated with the payment.
    /// </summary>
    /// <param name="_vendTrans">
    /// A promissory note that is used as a range to get invoices for a payment
    /// </param>
    public void initForPromissoryNoteInvoices(VendTrans _vendTrans)
    {
        VendPromissoryNoteInvoice vendPromissoryNoteInvoice;
        VendInvoiceJour vendInvJour;

        delete_from this;

        while select InvoiceVoucher from vendPromissoryNoteInvoice
        where vendPromissoryNoteInvoice.PromissoryNoteId == _vendTrans.PromissoryNoteID
        {
            while select crossCompany InvoiceId, LedgerVoucher, CurrencyCode, SumTax, InvoiceAmount, SourceDocumentHeader from vendInvJour
                where vendInvJour.LedgerVoucher ==vendPromissoryNoteInvoice.InvoiceVoucher
                    && vendInvJour.DataAreaId == _vendTrans.LastSettleCompany
                    && vendInvJour.InvoiceAccount == _vendTrans.AccountNum
            {
                this.insertForPaymentHistory(vendInvJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForPaymentHistory</Name>
				<Source><![CDATA[
    private void insertForPaymentHistory(VendInvoiceJour _vendInvoiceJour)
    {
        this.InvoiceId = _vendInvoiceJour.InvoiceId;
        this.LedgerVoucher = _vendInvoiceJour.LedgerVoucher;
        this.CurrencyCode = _vendInvoiceJour.CurrencyCode;
        this.SumTax = _vendInvoiceJour.SumTax;
        this.InvoiceAmount = _vendInvoiceJour.InvoiceAmount;
        this.SourceDocumentHeader = _vendInvoiceJour.SourceDocumentHeader;
        this.VendInvoiceJourRecId = _vendInvoiceJour.RecId;
        this.InvoiceCompany = _vendInvoiceJour.DataAreaId;

        this.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS320948</DeveloperDocumentation>
	<Label>@SYS12872</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SourceDocumentHeaderRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTax</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCompany</Name>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceJourRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>