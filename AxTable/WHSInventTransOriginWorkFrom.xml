<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTransOriginWorkFrom</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventTransOriginWorkFrom extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator of the work issued transactions and the work transaction.
    /// </summary>
    /// <param name="_workInventTransIssueRecId">
    /// The ID of the work issue transaction.
    /// </param>
    public static void deleteOwnerRelationship(WHSWorkInventTransRecId  _workInventTransIssueRecId)
    {
        WHSInventTransOriginWorkFrom    inventTransOriginWorkFrom;

        ttsbegin;

        delete_from inventTransOriginWorkFrom
            where inventTransOriginWorkFrom.WorkInventTransIssue   == _workInventTransIssueRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory transactions originator of the work issued transactions for the work issue transaction.
    /// </summary>
    /// <param name="_workInventTransIssueRecId">
    /// The ID of the work issue transaction.
    /// </param>
    /// <returns>
    /// The ID of the inventory transactions originator.
    /// </returns>
    public static InventTransOriginId findInventTransOriginId(WHSWorkInventTransRecId  _workInventTransIssueRecId)
    {
        WHSInventTransOriginWorkFrom    inventTransOriginWorkFrom;

        if (_workInventTransIssueRecId)
        {
            select firstonly InventTransOrigin from inventTransOriginWorkFrom
                where inventTransOriginWorkFrom.WorkInventTransIssue   == _workInventTransIssueRecId;
        }

        return inventTransOriginWorkFrom.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the work transaction to the ID of the inventory transactions originator.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The ID of the inventory transactions originator. It is the primary key on the
    ///    <c>InventTransOrigin</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the buffer should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A related record in the <c>WHSWorkInventTrans</c> table, if one exists; otherwise, an empty record.
    /// </returns>
    public static WHSWorkInventTrans workInventTrans(
        InventTransOriginId     _inventTransOriginId,
        boolean                 _forUpdate = false)
    {
        WHSWorkInventTrans              workInventTrans;
        WHSInventTransOriginWorkFrom    inventTransOriginWorkFrom;

        workInventTrans.selectForUpdate(_forUpdate);

        if (_inventTransOriginId)
        {
            select firstonly workInventTrans
                exists join inventTransOriginWorkFrom
                where inventTransOriginWorkFrom.WorkInventTransIssue  == workInventTrans.RecId
                   && inventTransOriginWorkFrom.InventTransOrigin     == _inventTransOriginId;
        }

        return workInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the relationship between the inventory transactions originator of the work issued transactions and the work transaction.
    /// </summary>
    /// <param name="_workInventTransIssueRecId">
    /// The ID of the work issue transaction.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The ID of the inventory transactions originator. It is the primary key on the <c>InventTransOrigin</c> table.
    /// </param>
    public static void writeOriginOwnerRelationship(WHSWorkInventTransRecId  _workInventTransIssueRecId,
                                                           InventTransOriginId      _inventTransOriginId)
    {
        WHSInventTransOriginWorkFrom    inventTransOriginWorkFrom;
        Counter                         logCount = infologLine();

        ttsbegin;

        try
        {
            inventTransOriginWorkFrom.InventTransOrigin       = _inventTransOriginId;
            inventTransOriginWorkFrom.WorkInventTransIssue    = _workInventTransIssueRecId;
            inventTransOriginWorkFrom.insert();
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::lastDuplicateKeyViolatingTable() == inventTransOriginWorkFrom.TableId)
            {
                update_recordset inventTransOriginWorkFrom
                    setting InventTransOrigin = _inventTransOriginId
                    where inventTransOriginWorkFrom.WorkInventTransIssue   == _workInventTransIssueRecId
                        && inventTransOriginWorkFrom.InventTransOrigin     != _inventTransOriginId;
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
            infolog.clear(logCount);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4537</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@WAX3507</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventTransOrigin</TitleField1>
	<TitleField2>WorkInventTransIssue</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkInventTransIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>WorkInventTransIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkInventTransIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkInventTransIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkInventTransIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkInventTransRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransOriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkInventTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkInventTransIssue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOrigin_InventTransOriginSalesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWorkInventTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkInventTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkInventTransIssue</Name>
					<Field>WorkInventTransIssue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>