<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MpsExcludeSpecificSourceDocumentLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MpsExcludeSpecificSourceDocumentLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateMpsExcludeSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates if the source document line should be excluded by master planning.
    /// </summary>
    /// <param name="_excludeSourceDocumentLine">
    /// A Boolean value that indicates whether the source document line should be excluded or not.
    /// </param>
    /// <param name="_inventTransId">
    /// A Boolean value that indicates whether the source document line should be excluded or not.
    /// </param>
    public static void updateMpsExcludeSourceDocumentLine(NoYes _excludeSourceDocumentLine, InventTransId _inventTransId)
    {
        if (_excludeSourceDocumentLine)
        {
            MpsExcludeSpecificSourceDocumentLine::excludeSourceDocumentLine(_inventTransId);
        }
        else
        {
            MpsExcludeSpecificSourceDocumentLine::includeSourceDocumentLine(_inventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to excludes a specific source document line.
    /// </summary>
    /// <param name="_inventTransId">
    /// The invent trans Id of a source document line to be excluded by Master planning.
    /// </param>
    /// <returns>true if the source document line is excluded; false, otherwise.</returns>
    public static boolean excludeSourceDocumentLine(InventTransId _inventTransId)
    {
        if (_inventTransId == '')
        {
            return false;
        }

        MpsExcludeSpecificSourceDocumentLine excludeSpecificSourceDocumentLine = MpsExcludeSpecificSourceDocumentLine::findByInventTransId(_inventTransId);

        if (!excludeSpecificSourceDocumentLine)
        {
            excludeSpecificSourceDocumentLine.InventTransId = _inventTransId;
            excludeSpecificSourceDocumentLine.insert();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Includes a specific source document line by its invent trans Id.
    /// </summary>
    /// <param name="_inventTransId">
    /// The invent trans Id of a line to be included by Master planning.
    /// </param>
    public static void includeSourceDocumentLine(InventTransId _inventTransId)
    {
        // if the source line hasn't be committed it cannot be excluded as this requires the source line to have an invent trans Id.
        if (_inventTransId != '')
        {
            ttsbegin;
            MpsExcludeSpecificSourceDocumentLine excludeSpecificSourceDocumentLine;

            delete_from excludeSpecificSourceDocumentLine
            where excludeSpecificSourceDocumentLine.InventTransId == _inventTransId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIgnored</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a source document line is exclude by Master planning.
    /// </summary>
    /// <param name = "_inventTransId">The invent trans Id of source document line.</param>
    /// <returns>true if a source document line is excluded; false, otherwise.</returns>
    public static boolean isIgnored(InventTransId _inventTransId)
    {
        return MpsExcludeSpecificSourceDocumentLine::findByInventTransId(_inventTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>MpsExcludeSpecificSourceDocumentLine</c> by the invent trans Id of an associated source document line.
    /// </summary>
    /// <param name = "_inventTransId">An invent trans Id.</param>
    /// <param name = "_selectForUpdate">true if the record should be selected for update; false, otherwise.</param>
    /// <returns>A <c>MpsExcludeSpecificSourceDocumentLine</c> record buffer.</returns>
    public static MpsExcludeSpecificSourceDocumentLine findByInventTransId(InventTransId _inventTransId, boolean _selectForUpdate = false)
    {
        MpsExcludeSpecificSourceDocumentLine excludeSpecificSourceDocumentLine;
        
        if (_inventTransId != '')
        {
            excludeSpecificSourceDocumentLine.selectForUpdate(_selectForUpdate);

            select firstonly excludeSpecificSourceDocumentLine
            where excludeSpecificSourceDocumentLine.InventTransId == _inventTransId;
        }

        return excludeSpecificSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeAllSalesLineBySalesOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all sales lines for a given sales order to be excluded by Master planning.
    /// </summary>
    /// <param name = "_salesId">A sales Id.</param>
    public static void excludeAllSalesLineBySalesOrderId(SalesId _salesId)
    {
        MpsExcludeSpecificSourceDocumentLine mpsExcludeSpecificSourceDocumentLine;
        MpsExcludeSpecificSourceDocumentLine mpsExcludeSpecificSourceDocumentLineNotExistsJoin;
        SalesLine salesLine;
        
        ttsbegin;

        if (MpsExcludeSpecificSalesLineFixFlight::instance().isEnabled())
        {
            update_recordset salesLine
                setting MpsExcludeSalesLine = NoYes::Yes
                where salesLine.SalesId == _salesId;
        }

        insert_recordset mpsExcludeSpecificSourceDocumentLine(InventTransId)
            select InventTransId from salesLine
                where salesLine.SalesId == _salesId
                notexists join mpsExcludeSpecificSourceDocumentLineNotExistsJoin
                    where mpsExcludeSpecificSourceDocumentLineNotExistsJoin.InventTransId == salesLine.InventTransId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAllSalesLineBySalesOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all sales lines for a given sales order to be included by Master planning.
    /// </summary>
    /// <param name = "_salesId">A sales Id.</param>
    public static void includeAllSalesLineBySalesOrderId(SalesId _salesId)
    {
        MpsExcludeSpecificSourceDocumentLine mpsExcludeSpecificSourceDocumentLine;
        SalesLine salesLine;
        
        ttsbegin;

        if (MpsExcludeSpecificSalesLineFixFlight::instance().isEnabled())
        {
            update_recordset salesLine
                setting MpsExcludeSalesLine = NoYes::No
                where salesLine.SalesId == _salesId;
        }

        delete_from mpsExcludeSpecificSourceDocumentLine
                exists join salesLine
                    where   salesLine.InventTransId == mpsExcludeSpecificSourceDocumentLine.InventTransId
                        &&  salesLine.SalesId == _salesId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SCMPlanning:MpsExcludeSpecificSourceDocumentLineDevDoc</DeveloperDocumentation>
	<Label>@SCMPlanning:MpsExcludeSpecificTransactions</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventTransId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>InventTransIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>InventTransIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<FeatureClass>MpsExcludeSpecificSalesOrdersAndSalesLinesFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>