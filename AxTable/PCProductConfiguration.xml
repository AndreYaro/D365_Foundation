<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCProductConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class PCProductConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the values in this configuration with the ones on the supplied configuration.
    /// </summary>
    /// <param name="_configuration">
    /// The configuration of the component used for comparison.
    /// </param>
    /// <returns>
    /// true if all values of this component and the subcomponents are equal; otherwise, false.
    /// </returns>
    public boolean compareTo(PCProductConfiguration _configuration)
    {
        PCComponentInstance                 thisComponentInstance;
        PCComponentInstanceRootComponent    thisRootComponentInstance;
        PCComponentInstanceValue            thisComponentInstanceValue;

        PCComponentInstance                 refComponentInstance;
        PCComponentInstanceRootComponent    refRootComponentInstance;
        PCComponentInstanceValue            refComponentInstanceValue;

        if (!this.RecId || !_configuration.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        //compare the type
        if (this.InstanceRelationType != _configuration.InstanceRelationType)
        {
            return false;
        }

        //compare number of component instances
        select  count(RecId) from refComponentInstance
        where   refComponentInstance.ProductConfiguration == _configuration.RecId;

        select  count(RecId) from thisComponentInstance
        where   thisComponentInstance.ProductConfiguration == this.RecId;

        if (refComponentInstance.RecId != thisComponentInstance.RecId)
        {
            return false;
        }

        //count the number of attribute values (the actual values are counted later)
        select  count(RecId) from refComponentInstanceValue
        join    RecId, ProductConfiguration from refComponentInstance
        where   refComponentInstance.ProductConfiguration == _configuration.RecId
        &&      refComponentInstanceValue.ComponentInstance == refComponentInstance.RecId;

        select  count(RecId) from thisComponentInstanceValue
        join    RecId, ProductConfiguration from thisComponentInstance
        where   thisComponentInstance.ProductConfiguration == this.RecId
        &&      thisComponentInstanceValue.ComponentInstance == thisComponentInstance.RecId;

        if (refComponentInstanceValue.RecId != thisComponentInstanceValue.RecId)
        {
            return false;
        }

        //proceed to comparison of values assigned
        refRootComponentInstance = PCComponentInstanceRootComponent::findByProductConfiguration(_configuration.RecId);
        thisRootComponentInstance = PCComponentInstanceRootComponent::findByProductConfiguration(this.RecId);

        return   thisRootComponentInstance.compareTo(refRootComponentInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the configuration session and associated data.
    /// </summary>
    public void delete()
    {
        PCComponentInstanceRootComponent::deleteByConfiguration(this);
        PCComponentInstanceSubComponent::deleteByConfiguration(this);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCProductConfiguration</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCProductConfiguration::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCProductConfiguration</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCProductConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductConfiguration find(RefRecId _recId, boolean _forupdate = false)
    {
        PCProductConfiguration record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153061</DeveloperDocumentation>
	<Label>@SYS153060</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RecId</TitleField1>
	<Abstract>Yes</Abstract>
	<CacheLookup>NotInTTS</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCComponentInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCComponentInstance</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>