<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentEntry_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDocumentEntry_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceleratedDepGroup</Name>
				<Source><![CDATA[
	    /// <summary>
	/// Gets the asset accelerated depreciation type
	/// </summary>
	/// <returns>
	/// Group Id <c>AssetAcceleratedDepGroupId_JP</c>
	/// </returns>
	public AssetAcceleratedDepGroupId_JP acceleratedDepGroup()
	{
	    AssetAcceleratedDepGroupId_JP groupId;
	    AssetDocumentTable_JP         assetDocumentTable;
	    AssetDocumentAcceleratedDepTable_JP acceleratedTable;
	    assetDocumentTable = AssetDocumentTable_JP::find(this.AssetDocumentTable_JP);
	    if (assetDocumentTable.Type == AssetDocumentType_JP::AssetAcceleratedDepreciation)
	    {
	        acceleratedTable = AssetDocumentAcceleratedDepTable_JP::findByAssetDocumentTable(assetDocumentTable.RecId);
	        groupId = acceleratedTable.acceleratedDepGroup();
	    }
	    return groupId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record in the database.
    /// </summary>
    public void delete()
    {
        AssetDocumentTypeExistanceCache_JP  cache;
        AssetDocumentEntry_JP               origEntry = this.orig();

        super();

        cache = AssetDocumentTypeExistanceCache_JP::Construct(origEntry.AssetId, origEntry.BookId, origEntry.type());
        cache.clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document id
    /// </summary>
    /// <returns>
    /// Asset document id <c>AssetDocumentId_JP</c>
    /// </returns>
    public AssetDocumentId_JP documentId()
    {
        return AssetDocumentTable_JP::find(this.AssetDocumentTable_JP).DocumentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>AssetDocumentEntry_JP</c> record on the specific value model/depreciation book
    /// related to the same <c>AssetDocumentTable_JP</c> record as current.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentEntry_JP</c> table record.
    /// </returns>
    public AssetDocumentEntry_JP findRelatedDocumentEntry(
        AssetId             _assetId,
        AssetBookMergeId    _bookId)
    {
        AssetDocumentEntry_JP   assetDocumentEntry_JP;

        if (_assetId && _bookId)
        {
            assetDocumentEntry_JP = AssetDocumentEntry_JP::findByDocumentAssetIdBookId(
                this.AssetDocumentTable_JP,
                _assetId,
                _bookId);
        }

        return assetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record in the database.
    /// </summary>
    public void insert()
    {
        AssetDocumentTypeExistanceCache_JP cache;

        super();

        cache = AssetDocumentTypeExistanceCache_JP::Construct(this.AssetId, this.BookId, this.type());
        cache.setExistance(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document type
    /// </summary>
    /// <returns>
    /// Asset document type <c>AssetDocumentType_JP</c>
    /// </returns>
    public AssetDocumentType_JP type()
    {
        return AssetDocumentTable_JP::find(this.AssetDocumentTable_JP).Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current record in the database.
    /// </summary>
    public void update()
    {
        AssetDocumentTypeExistanceCache_JP  cache;
        AssetDocumentEntry_JP               origEntry = this.orig();
        AssetDocumentType_JP                origType = origEntry.type();

        super();

        if (this.AssetId != origEntry.AssetId
            || this.BookId != origEntry.BookId
            || this.AssetDocumentTable_JP != origEntry.AssetDocumentTable_JP)
        {
            cache = AssetDocumentTypeExistanceCache_JP::Construct(this.AssetId, this.BookId, this.type());
            cache.setExistance(true);

            cache = AssetDocumentTypeExistanceCache_JP::Construct(origEntry.AssetId, origEntry.BookId, origType);
            cache.clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetDocumentEntry_JP</c> record based on imported parameters.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The asset book id.
    /// </param>
    /// <param name="_document">
    /// The asset document table recid.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentEntry_JP</c> table record.
    /// </returns>
    public static AssetDocumentEntry_JP create(
        AssetId                                  _assetId,
        AssetBookId                              _bookId,
        AssetDocumentTable_JP                    _document)
    {
        AssetDocumentEntry_JP                    entryTable;

        entryTable.AssetDocumentTable_JP = _document.RecId;
        entryTable.AssetId = _assetId;
        entryTable.BookId = _bookId;
        entryTable.insert();

        return entryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDocumentTypesForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is any document entry with specified type exists
    /// for specified asset value model / depreciation book.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetBookId">
    /// The book id.
    /// </param>
    /// <param name="_assetDocumentTypes">
    /// The list of document types.
    /// </param>
    /// <returns>
    /// true if exists; otherwise, return false.
    /// </returns>
    public static boolean existDocumentTypesForAsset(
        AssetId         _assetId,
        AssetBookId     _assetBookId,
        container       _assetDocumentTypes)
    {
        boolean                                 ret = false;
        boolean                                 allSet = true;
        Query                                   query;
        QueryRun                                queryRun;
        QueryBuildDataSource                    qbds;
        int                                     i;
        AssetDocumentTypeExistanceCache_JP      cache;
        AssetDocumentTable_JP                   assetDocTableLoc;

        if (_assetId
            && _assetBookId
            && _assetDocumentTypes != conNull())
        {
            for (i = 1; i <= conLen(_assetDocumentTypes) && (!ret); i++)
            {
                cache = AssetDocumentTypeExistanceCache_JP::Construct(_assetId, _assetBookId, conPeek(_assetDocumentTypes, i));

                if (cache.isSet())
                {
                    ret = cache.getExistance();
                }
                else
                {
                    allSet = false;
                }
            }

            if (ret)
            {
                return ret;
            }
            else if (allSet)
            {
                return false;
            }

            query = new Query();
            qbds = query.addDataSource(tableNum(AssetDocumentEntry_JP));
            qbds.firstOnly(true);
            qbds.addRange(fieldNum(AssetDocumentEntry_JP, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetDocumentEntry_JP, BookId)).value(SysQuery::value(_assetBookId));

            qbds = qbds.addDataSource(tableNum(AssetDocumentTable_JP));
            qbds.relations(true);
            qbds.joinMode(JoinMode::InnerJoin);
            for (i = 1; i <= conLen(_assetDocumentTypes); i++)
            {
                qbds.addRange(fieldNum(AssetDocumentTable_JP, Type)).value(SysQuery::value(conPeek(_assetDocumentTypes, i)));
            }

            queryRun = new QueryRun(query);
            ret = queryRun.next();
            if (ret)
            {
                assetDocTableLoc = queryRun.get(tableNum(AssetDocumentTable_JP));
                if (assetDocTableLoc)
                {
                    cache = AssetDocumentTypeExistanceCache_JP::Construct(_assetId, _assetBookId, assetDocTableLoc.Type);
                    cache.setExistance(true);
                }
            }
            else
            {
                for (i = 1; i <= conLen(_assetDocumentTypes) && (!ret); i++)
                {
                    cache = AssetDocumentTypeExistanceCache_JP::Construct(_assetId, _assetBookId, conPeek(_assetDocumentTypes, i));
                    cache.setExistance(false);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>AssetDocumentEntry_JP</c> recid.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentEntry_JP</c> table record.
    /// </returns>
    public static AssetDocumentEntry_JP find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDocumentEntry_JP   assetDocumentEntry_JP;

        if (_recId)
        {
            assetDocumentEntry_JP.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDocumentEntry_JP.concurrencyModel(_concurrencyModel);
            }

            select firstonly
                assetDocumentEntry_JP
            where
                assetDocumentEntry_JP.RecId == _recId;
        }
        return assetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentEntry_JP</c> table record.
    /// </returns>
    public static AssetDocumentEntry_JP findByAssetIdBookId(
        AssetId             _assetId,
        AssetBookMergeId    _bookId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDocumentEntry_JP   assetDocumentEntry_JP;

        if (_assetId && _bookId)
        {
            assetDocumentEntry_JP.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDocumentEntry_JP.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDocumentEntry_JP
            where assetDocumentEntry_JP.AssetId == _assetId
                && assetDocumentEntry_JP.BookId == _bookId;
        }
        return assetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDocumentAssetIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_documentRecId">
    /// The <c>AssetDocumentTable_JP</c> recid.
    /// </param>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentEntry_JP</c> table record.
    /// </returns>
    public static AssetDocumentEntry_JP findByDocumentAssetIdBookId(
        RefRecId            _documentRecId,
        AssetId             _assetId,
        AssetBookMergeId    _bookId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDocumentEntry_JP   assetDocumentEntry_JP;

        if (_documentRecId && _assetId && _bookId)
        {
            assetDocumentEntry_JP.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDocumentEntry_JP.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDocumentEntry_JP
            where assetDocumentEntry_JP.AssetDocumentTable_JP == _documentRecId
                && assetDocumentEntry_JP.AssetId == _assetId
                && assetDocumentEntry_JP.BookId == _bookId;
        }
        return assetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDocumentIdByAssetIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference group control object on which to perform the lookup.
    /// </param>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_docType">
    /// The fixed asset document type.
    /// </param>
    public static void lookupDocumentIdByAssetIdBookId(
        FormReferenceControl    _ctrl,
        AssetId                 _assetId,
        AssetBookMergeId        _bookId,
        AssetDocumentType_JP    _docType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(AssetDocumentEntryTableView_JP), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceDocument;

        queryBuildDataSourceDocument = query.addDataSource(tablenum(AssetDocumentEntryTableView_JP));
        queryBuildDataSourceDocument.addRange(fieldnum(AssetDocumentEntryTableView_JP, AssetId)).value(_assetId);
        queryBuildDataSourceDocument.addRange(fieldnum(AssetDocumentEntryTableView_JP, BookId)).value(_bookId);
        queryBuildDataSourceDocument.addRange(fieldNum(AssetDocumentEntryTableView_JP, Type)).value(SysQuery::value(_docType));
        sysTableLookup.addLookupfield(fieldNum(AssetDocumentEntryTableView_JP, DocumentId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAssetDocument</Name>
				<Source><![CDATA[
    /// <summary>
	/// Open the asset document.
	/// </summary>
	/// <param name="_assetDocumentEntryRecId">
	/// The asset document entry id.
	/// </param>
	public static void openAssetDocument(RefRecId _assetDocumentEntryRecId)
	{
	    AssetDocumentEntry_JP   assetDocumentEntry;
	    AssetDocumentTable_JP   assetDocumentTable;
	    Args                    args;
	    MenuFunction            menuFunction;

	    if (!_assetDocumentEntryRecId)
	    {
	        return;
	    }
	    assetDocumentEntry = AssetDocumentEntry_JP::find(_assetDocumentEntryRecId);
	    assetDocumentTable = AssetDocumentTable_JP::find(assetDocumentEntry.AssetDocumentTable_JP);
	    args = new Args();
	    args.record(assetDocumentTable);
	    switch (assetDocumentTable.MainType)
	    {
	        case AssetDocumentMainType_JP::AssetRetirementObligation:
	            menuFunction = new MenuFunction(
	            MenuItemDisplayStr(AssetRetirementObligationDocument_JP),
	            MenuItemType::Display);
	            break;
	        case AssetDocumentMainType_JP::ReductionEntry:
	            menuFunction = new MenuFunction(
	            MenuItemDisplayStr(AssetReductionEntryProfile_JP),
	            MenuItemType::Display);
	            break;
	        default:
	            break;
	    }
	    if (menuFunction && menuFunction.checkAccessRights())
	    {
	        menuFunction.run(args);
	    }
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetDocumentEntry_JP</DeveloperDocumentation>
	<Label>@SYS4004954</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>AssetDocumentTable_JP</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>AssetIdBookIdDocId</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetDocumentTable_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetDocumentTable_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetBook</Name>
			<Label>@SYS123822</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetDocumentTable</Name>
			<Label>@SYS4004938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetDocumentTable_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetDocumentTable_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetBookMergeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetIdBookIdDocId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetDocumentTable_JP</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetDocumentTable_JP</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetDocumentTable_JP</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AssetIdBookIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDocumentTable_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetDocumentTable_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetDocumentTable_JP</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetDocumentEntry_JP</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetDocumentTable_JP</Name>
					<Field>AssetDocumentTable_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_AssetId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>