<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetBookTable extends common
{
    #isoCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeDerogatoryInfo_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the derogatory information for this value model can be modified.
    /// </summary>
    /// <returns>
    ///    true if the change can be applied; otherwise, false.
    /// </returns>
    private boolean canChangeDerogatoryInfo_FR()
    {
        boolean     isValid = true;
        AssetBook   assetBook;
        AssetTrans  assetTrans;

        assetBook.selectForUpdate(false);
        select firstonly assetBook
            where assetBook.BookId == this.BookId;
        if (assetBook)
        {
            // The derogatory model '%1' is used on the '%2' value model of %3 asset. It cannot be changed.
            isValid = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_DerogatoryBookIsUsedOnAssetBook", this.orig().AssetDerogatoryModel_FR, assetBook.BookId, assetBook.AssetId));
            return isValid;
        }

        assetTrans.selectForUpdate(false);
        if ((select firstonly RecId from assetTrans
                where assetTrans.BookId == this.BookId).RecId != 0)
        {
            // %1 value model cannot be used for derogatory calculation as it already used for asset transaction.
            isValid = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_BookCannotBeUsedForDerogatoryCalculationAsItIsUsedOnTransaction", this.BookId));
            return isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record that is associated to the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDerogatoryDerivedSetting_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that asset transaction types for the derogatory tax model are created when a derogatory
    ///    tax model is assigned to the main value model.
    /// </summary>
    /// <param name="_assetBookId">
    ///    A value model ID for which to assign a derived value model.
    /// </param>
    /// <param name="_bookIdDerived">
    ///    The value of the derived model.
    /// </param>
    /// <remarks>
    ///    This is performed so that the two models will be synchronized if any one of these transactions are
    ///    created for the main value model.This method is only used for French derogatory depreciation.
    /// </remarks>
    private void createDerogatoryDerivedSetting_FR(
        AssetBookId         _assetBookId,
        AssetBookId         _bookIdDerived)
    {
    AssetBookTableDerived assetBookTableDerived;

        ttsbegin;
        assetBookTableDerived = AssetBookTableDerived::find(_assetBookId, AssetTransType::Acquisition, _bookIdDerived);
        if (!assetBookTableDerived)
        {
            assetBookTableDerived.BookId = _assetBookId;
            assetBookTableDerived.BookIdDerived = _bookIdDerived;
            assetBookTableDerived.AssetTransType = AssetTransType::Acquisition;
            assetBookTableDerived.insert();
        }

        assetBookTableDerived = AssetBookTableDerived::find(_assetBookId, AssetTransType::AcquisitionAdj, _bookIdDerived);
        if (!assetBookTableDerived)
        {
            assetBookTableDerived.BookId = _assetBookId;
            assetBookTableDerived.BookIdDerived = _bookIdDerived;
            assetBookTableDerived.AssetTransType = AssetTransType::AcquisitionAdj;
            assetBookTableDerived.insert();
        }

          assetBookTableDerived = AssetBookTableDerived::find(_assetBookId, AssetTransType::WriteDownAdj, _bookIdDerived);
        if (!assetBookTableDerived)
        {
            assetBookTableDerived.BookId = _assetBookId;
            assetBookTableDerived.BookIdDerived = _bookIdDerived;
            assetBookTableDerived.AssetTransType = AssetTransType::WriteDownAdj;
            assetBookTableDerived.insert();
        }

        assetBookTableDerived = AssetBookTableDerived::find(_assetBookId, AssetTransType::WriteUpAdj, _bookIdDerived);
        if (!assetBookTableDerived)
        {
            assetBookTableDerived.BookId = _assetBookId;
            assetBookTableDerived.BookIdDerived = _bookIdDerived;
            assetBookTableDerived.AssetTransType = AssetTransType::WriteUpAdj;
            assetBookTableDerived.insert();
        }

        assetBookTableDerived = AssetBookTableDerived::find(_assetBookId, AssetTransType::DisposalSale, _bookIdDerived);
        if (!assetBookTableDerived)
        {
            assetBookTableDerived.BookId = _assetBookId;
            assetBookTableDerived.BookIdDerived = _bookIdDerived;
            assetBookTableDerived.AssetTransType = AssetTransType::DisposalSale;
            assetBookTableDerived.insert();
        }

        assetBookTableDerived = AssetBookTableDerived::find(_assetBookId, AssetTransType::DisposalScrap, _bookIdDerived);
        if (!assetBookTableDerived)
        {
            assetBookTableDerived.BookId = _assetBookId;
            assetBookTableDerived.BookIdDerived = _bookIdDerived;
            assetBookTableDerived.AssetTransType = AssetTransType::DisposalScrap;
            assetBookTableDerived.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDerogatoryDerivedSetting_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the removal of the asset transaction types assigned as the derived value models when a
    ///    derogatory tax model is deleted from the main value model.
    /// </summary>
    /// <param name="_assetBookId">
    ///    The ID of the value model related to the derived value model.
    /// </param>
    /// <param name="_bookIdDerived">
    ///    The ID of the derived value model.
    /// </param>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation.
    /// </remarks>
    private void deleteDerogatoryDerivedSetting_FR(
        AssetBookId         _assetBookId,
        AssetBookId         _bookIdDerived)
    {
    AssetBookTableDerived assetBookTableDerived;

        ttsbegin;

        delete_from assetBookTableDerived
        where
            (assetBookTableDerived.AssetTransType == AssetTransType::Acquisition
            || assetBookTableDerived.AssetTransType == AssetTransType::AcquisitionAdj
            || assetBookTableDerived.AssetTransType == AssetTransType::WriteDownAdj
            || assetBookTableDerived.AssetTransType == AssetTransType::WriteUpAdj
            || assetBookTableDerived.AssetTransType == AssetTransType::DisposalSale
            || assetBookTableDerived.AssetTransType == AssetTransType::DisposalScrap)
            && assetBookTableDerived.BookId         == _assetBookId
            && assetBookTableDerived.BookIdDerived  == _bookIdDerived;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   This method is used to find the <c>AssetDepreciationProfile</c>.
    /// </summary>
    /// <returns>
    ///   The <c>AssetDepreciationProfile</c> record.
    /// </returns>
    public AssetDepreciationProfile depreciationProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   This method is used to find the <c>AssetDepreciationProfile</c> for alternative depreciation.
    /// </summary>
    /// <returns>
    ///   The <c>AssetDepreciationProfile</c> record.
    /// </returns>
    public AssetDepreciationProfile depreciationAltProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationAltProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurFiscalCalendar_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the current fiscal calendar based on current session date.
    /// </summary>
    /// <returns>
    /// The fiscal calendar for current session date.
    /// </returns>
    display FiscalCalendarID displayCurFiscalCalendar_JP()
    {
        return FiscalCalendar::find(this.getFiscalCalendar_JP(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))).CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the value of the Fiscal Calendar that is associated on the value model.
    /// If the value is not specified on the table, the value specified on the <c>Ledger</c> table is retrieved.
    /// </summary>
    /// <returns>
    /// Returns the <c>RecId</c> of the fiscal calendar.
    /// </returns>
    public RefRecId getFiscalCalendar()
    {
        RefRecId fiscalCalendar = this.FiscalCalendar;

        // If there is no calendar setup on the value model, find the ledger calendar.
        if (!fiscalCalendar)
        {
            fiscalCalendar = Ledger::fiscalCalendar();
        }

        return fiscalCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendar_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the value of the Fiscal Calendar that is associated on the value model.
    /// If the value is not specified on the table, the value specified on the <c>Ledger</c> table is retrieved.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// Returns the <c>RecId</c> of the fiscal calendar.
    /// </returns>
    public RefRecId getFiscalCalendar_JP(AssetTransDate _date)
    {
        return this.AssetDepBookTableMap_JP::getFiscalCalendar_JP(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProfileCombination_PL</Name>
				<Source><![CDATA[
    private boolean isValidProfileCombination_PL(AssetDepreciationMethod _depreciationProfileMethod,
        AssetDepreciationMethod _depreciationAltProfile)
    {
        boolean returnValue = true;

        if (_depreciationProfileMethod != AssetDepreciationMethod::ReducingBalance_PL
            || (_depreciationProfileMethod == AssetDepreciationMethod::ReducingBalance_PL
            && _depreciationAltProfile != AssetDepreciationMethod::StraightLine_PL
            && _depreciationAltProfile != AssetDepreciationMethod::StraightLinePercentage_PL))
        {
            returnValue = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_PolishAlternativeDepreciationIsNotAllowed",
                AssetDepreciationMethod::StraightLine_PL,
                AssetDepreciationMethod::StraightLinePercentage_PL,
                AssetDepreciationMethod::ReducingBalance_PL));
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the standard <c>modifiedFieldValue</c>and performs additional initialization.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field that has been modified
    /// </param>
    /// <param name="_arrayIndex">
    /// Position in the field array; optional.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        // <GIN>
        boolean isAssetParameters_IN;

        super(_fieldName, _arrayIndex);

        isAssetParameters_IN = AssetParameters::checkAssetParameters_IN();

        switch (_fieldName)
        {
            case fieldStr(AssetBookTable, DepreciationProfile) :
                if (isAssetParameters_IN)
                {
                    if (this.CurrentOperationsTax != CurrentOperationsTax::Current
                        || AssetDepreciationProfile::find(this.DepreciationProfile).Method != AssetDepreciationMethod::StraightLinePercentage_IN)
                    {
                        this.WorkingDays_IN           = 0;
                        this.OverRideCalendarDays_IN  = NoYes::No;
                    }
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    if (AssetDepreciationProfile::isDepMethodAllowChangeCalendar_JP(AssetDepreciationProfile::find(this.DepreciationProfile).Method))
                    {
                        this.FiscalCalendar = Ledger::fiscalCalendar();
                    }
                    if (AssetDepreciationProfile::find(this.DepreciationProfile).Method == AssetDepreciationMethod::ElectronicDepreciation_JP)
                    {
                        this.AcquisitionOnFirstDayCheckType_JP = AssetAcquisitionOnFirstDayCheckType_JP::Error;
                    }
                    else
                    {
                        this.AcquisitionOnFirstDayCheckType_JP = AssetAcquisitionOnFirstDayCheckType_JP::Allow;
                    }
                }
                break;

            case fieldStr(AssetBookTable, FiscalCalendar) :
                if (isAssetParameters_IN)
                {
                    if (this.CurrentOperationsTax != CurrentOperationsTax::Current
                        || FiscalCalendar_IN::findByFiscalCalendar(this.FiscalCalendar).CalendarType != CalendarType_IN::DayBased)
                    {
                        this.WorkingDays_IN           = 0;
                        this.OverRideCalendarDays_IN  = NoYes::No;
                    }
                }
                break;

            case fieldStr(AssetBookTable, OverRideCalendarDays_IN) :
                if (isAssetParameters_IN)
                {
                    if (this.OverRideCalendarDays_IN == NoYes::No)
                    {
                        this.WorkingDays_IN = 0;
                    }
                }
                break;

            case fieldStr(AssetBookTable, CurrentOperationsTax) :
                if (isAssetParameters_IN)
                {
                    if (this.CurrentOperationsTax != CurrentOperationsTax::Current)
                    {
                        this.WorkingDays_IN           = 0;
                        this.OverRideCalendarDays_IN  = NoYes::No;
                    }
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    if (this.CurrentOperationsTax != CurrentOperationsTax::Tax)
                    {
                        this.LinkedCurrentLayerAssetBookTable_JP = '';
                    }
                }
                break;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds the depreciation amount based on the setting for rounding specified on the value model of the asset.
    /// </summary>
    /// <param name="_assetAmount">
    ///    The amount that is used for the rounding process.
    /// </param>
    /// <returns>
    ///    The rounded amount.
    /// </returns>
    public AssetAmount roundOffDepreciation(AssetAmount _assetAmount)
    {
        #EECountryRegionCodes
        AssetAmount     assetAmount;
        AssetBookTable  derogatoryAssetBookTable;

        if (_assetAmount == 0.0 )
        {
            return (0.0);
        }

        // For derogatory depreciation make sure that the main value model and the derogatory tax model have
        // the same rounding off.  In case they differ, the main value model value will overwrite the the derogatory
        // tax model one.
        if (this.IsDerogatoryBook_FR)
        {
            select firstonly derogatoryAssetBookTable
                where derogatoryAssetBookTable.AssetDerogatoryModel_FR == this.BookId;
            if (derogatoryAssetBookTable && derogatoryAssetBookTable.RoundOffDepreciation != this.RoundOffDepreciation)
            {
                this.RoundOffDepreciation = derogatoryAssetBookTable.RoundOffDepreciation;
            }
        }

        // As the "this.RoundOffDepreciation" may be not the final used "RoundOffDepreciation" for JP,
        // so we directly use JP logic to do the rounding.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            assetAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(_assetAmount, this.RoundOffDepreciation);
            return assetAmount;
        }

        if (abs(_assetAmount) < this.RoundOffDepreciation)
        {
            assetAmount = this.RoundOffDepreciation * (abs(_assetAmount)/_assetAmount);
        }
        else
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            assetAmount = CurrencyExchange::roundWithRule(
                _assetAmount,
                this.RoundOffDepreciation,
                this.RoundOffType_W);
        }
        else
        {
        // </GEEU>
            // If the rounding amount is not specified, the round off amount will be based on the company main currency.
            if (this.RoundOffDepreciation == 0.0)
            {
                assetAmount = CurrencyExchangeHelper::amount(_assetAmount);
            }
            else
            {
                assetAmount = round(_assetAmount, this.RoundOffDepreciation);
            }
        // <GEEU>
        }
        // </GEEU>
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDepreciationReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds the depreciation amount for reporting currency based on the setting for rounding specified on the value model of the asset.
    /// </summary>
    /// <param name="_assetAmount">
    ///    The amount that is used for the rounding process.
    /// </param>
    /// <returns>
    ///    The rounded amount.
    /// </returns>
    public AssetAmount roundOffDepreciationReportingCurrency(AssetAmountReportingCurrency _assetAmount)
    {      
        AssetAmountReportingCurrency assetAmount;
              
        if (_assetAmount == 0.0 )
        {
            return (0.0);
        }        
        
        if (abs(_assetAmount) < this.RoundOffDepreciationReportingCurrency)
        {
            assetAmount = this.RoundOffDepreciationReportingCurrency * (abs(_assetAmount)/_assetAmount);
        }       
        else
        {           
            // If the rounding amount is not specified, the round off amount will be based on the company main currency.
            if (this.RoundOffDepreciationReportingCurrency == 0.0)
            {
                assetAmount = CurrencyExchangeHelper::amount(_assetAmount, Ledger::reportingCurrency());
            }
            else
            {
                assetAmount = round(_assetAmount, this.RoundOffDepreciationReportingCurrency);
            }
        }
       
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundDepreciationAmount</Name>
				<Source><![CDATA[
    internal AssetAmount roundDepreciationAmount(
        AssetAmount _amount, 
        boolean _isReportingCurrency = false,
        RoundOffType _roundOffType = RoundOffType::Ordinary)
    {
        AssetAmount roundedAmount = _amount;

        if (_roundOffType == RoundOffType::Ordinary)
        {
            if (_isReportingCurrency)
            {
                roundedAmount = this.roundOffDepreciationReportingCurrency(_amount);
            }
            else
            {
                roundedAmount = this.roundOffDepreciation(_amount);
            }
        }
        else
        {
            roundedAmount = this.roundWithRuleDepreciationAmount(_amount, _isReportingCurrency, _roundOffType);
        }

        return roundedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundWithRuleDepreciationAmount</Name>
				<Source><![CDATA[
    internal AssetAmount roundWithRuleDepreciationAmount(
        AssetAmount _amount, 
        boolean _isReportingCurrency = false,
        RoundOffType _roundOffType = RoundOffType::Ordinary)
    {
        AssetAmount roundedAmount = _amount;
        
        if ((!_isReportingCurrency && this.RoundOffDepreciation == 0.0)
            || (_isReportingCurrency && this.roundOffDepreciationReportingCurrency == 0.0))
        {
            if (_roundOffType == RoundOffType::Ordinary)
            {
                roundedAmount = CurrencyExchangeHelper::amount(_amount);
            }
            else
            {
                CurrencyCode currencyCode = _isReportingCurrency ? Ledger::reportingCurrency() : Ledger::accountingCurrency();

                roundedAmount = CurrencyExchange::roundWithRuleCurrencyCode(_amount, currencyCode, _roundOffType);
            }
        }
        else
        {
            RoundOff roundOff = _isReportingCurrency ? this.RoundOffDepreciationReportingCurrency : this.RoundOffDepreciation;
            
            roundedAmount = CurrencyExchange::roundWithRule(_amount, roundOff, _roundOffType);
        }

        return roundedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        AssetBookTable  linkedTaxLayerBookTable;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            if (this.FiscalCalendar != this.orig().FiscalCalendar)
            {
                if (this.CurrentOperationsTax == CurrentOperationsTax::Current)
                {
                    linkedTaxLayerBookTable = AssetBookTable::findByLinkedCurrentLayerBook_JP(this.BookId, true);
                    if (linkedTaxLayerBookTable)
                    {
                        linkedTaxLayerBookTable.FiscalCalendar = this.FiscalCalendar;
                        linkedTaxLayerBookTable.update();
                    }
                }
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates whether depreciation is applicable on this asset group.
    /// </summary>
    public void updateValue_IN()
    {
        // <GIN>
        AssetGroupBookSetup     assetGroupBookSetup,
                                assetGroupBookSetupLoc;

        while select BookId, AssetGroup from assetGroupBookSetupLoc
            where assetGroupBookSetupLoc.BookId == this.BookId
        {
            ttsbegin;
            assetGroupBookSetup = AssetGroupBookSetup::find(assetGroupBookSetupLoc.AssetGroup,
                                                            assetGroupBookSetupLoc.BookId,
                                                            true);
            assetGroupBookSetup.AssetGroupDepreciation_IN = NoYes::No;
            assetGroupBookSetup.doUpdate();
            ttscommit;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the current record can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        AssetBookId mainDerogatoryBookId;
        boolean     ret;
        AssetTaxDeprCategory_LV assetTaxCategory;

        ret = super();

        // Check if the value model is being used as a derogatory book.
        if (this.IsDerogatoryBook_FR)
        {
            mainDerogatoryBookId = AssetBookTable::findDerogatoryAccountingModelBookId(this.BookId);
            if (mainDerogatoryBookId)
            {
                // Derogatory tax model '%1' cannot be deleted as it is used on '%2' value model.
                ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_DerogatoryTaxBookCannotBeDeletedBecauseItIsInUse", this.BookId, mainDerogatoryBookId));
            }
        }

        if (this.CurrentOperationsTax == CurrentOperationsTax::Tax
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            select firstonly RecId from assetTaxCategory
                where assetTaxCategory.CategoryId == this.BookId;
            if (assetTaxCategory)
            {
                // Category %1 cannot be deleted while depreciation calculations exist for the category. Delete the depreciation calculations and try again.
                ret = checkFailed(strFmt('Category %1 cannot be deleted while depreciation calculations exist for the category. Delete the depreciation calculations and try again.', this.BookId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                  ret = super(_fieldIdToCheck);
        AssetDepreciationProfile depreciationProfile = this.depreciationProfile();
        AssetDepreciationProfile depreciationAltProfile = this.DepreciationAltProfile();

        AssetDepreciationProfilesValidation depreciationProfilesValidation;

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AssetBookTable, DepreciationProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationProfile();

                    break;

                case fieldNum(AssetBookTable, DepreciationAltProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationAltProfile();

                    break;

                case fieldNum(AssetBookTable, DepreciationExtProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationExtProfile();

                    break;

	            case fieldNum(AssetBookTable, DepreciationAcceleratedProfile_JP):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationAcceleratedProfile_JP();

	                break;

                // For derogatory depreciaton Negative Net Book Value are not allowed.
                case fieldNum(AssetBookTable, NegativeNetBookValue):
                    if (this.NegativeNetBookValue && (this.AssetDerogatoryModel_FR || this.IsDerogatoryBook_FR))
                    {
                        // Allow negative net book value cannot be selected for a derogatory depreciation value model.
                        ret = checkFailed("@FixedAssets:FA_MessageValidation_CannotSelectAllowNegativeNetBookValueForDerogatoryDepreciationBook");
                    }
                    break;

                case fieldNum(AssetBookTable,IsDerogatoryBook_FR):
                    if (this.IsDerogatoryBook_FR)
                    {
                        // Verify that the derogatory value model is not selected. The value model can
                        // only be an accounting value model or derogatory one.
                        if (this.AssetDerogatoryModel_FR)
                        {
                            //This model cannot be selected as a derogatory tax model as it has derogatory tax model assigned to it.
                            ret = checkFailed("@SYS110404");
                            return ret;
                        }

                        // Make sure that the depreciation check box is selected.
                        if (!this.Depreciation)
                        {
                            // You must select the depreciation option for derogatory value model '%1'.
                            return checkFailed(strFmt("@FixedAssets:FA_MessageValidation_MustSelectDepreciationOptionForDerogatoryBook", this.BookId));
                        }

                        if (this.NegativeNetBookValue)
                        {
                            // Allow negative net book value cannot be selected for a derogatory depreciation value model.
                            ret = checkFailed("@FixedAssets:FA_MessageValidation_CannotSelectAllowNegativeNetBookValueForDerogatoryDepreciationBook");
                        }

                       // Verify that full depreciation option is selected for the asset with depreciation method of reducing balance.
                        if (!this.validDerogDepreciationMethodOnProfile_FR(this.DepreciationProfile)
                        || (this.DepreciationAltProfile && !this.validDerogDepreciationMethodOnProfile_FR(this.DepreciationAltProfile)))
                        {
                            // Asset designed for derogatory depreciation with a reducing balance depreciation method must have full depreciation option selected.
                            ret = checkFailed("@SYS110407");
                            return ret;
                        }
                    }
                    break;

                // Verify that Depreciation book qualifies for a valid tax value model.
                case fieldNum(AssetBookTable,AssetDerogatoryModel_FR):

                    if (this.AssetDerogatoryModel_FR)
                    {
                        // Make sure that the Derogatory Tax Model does not assign to itself.
                        if (this.BookId == this.AssetDerogatoryModel_FR)
                        {
                            // A derogatory tax model cannot be assigned to the same value model.
                            ret = checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryTaxBookCannotBeAssignedToTheSameBook");
                            return ret;
                        }

                        // Make sure that the IsDerogatoryCheckBox is not already selected.  The value model can
                        // only be an accounting value model or derogatory one.
                        if (this.IsDerogatoryBook_FR)
                        {
                            // This value model is used as a derogatory tax value model  and another derogatory tax value model cannot be assigned.
                            ret = checkFailed("@FixedAssets:FA_MessageValidation_BookIsUsedAsDerogatoryTaxBook");
                            return ret;
                        }

                        // Make sure that the depreciation check box is selected.
                        if (!this.Depreciation)
                        {
                            // You must select the depreciation option for derogatory value model '%1'.
                            return checkFailed(strFmt("@FixedAssets:FA_MessageValidation_MustSelectDepreciationOptionForDerogatoryBook", this.BookId));
                        }

                        // Verify that Negative Net Book Values are not allowed.
                        if (this.NegativeNetBookValue)
                        {
                            // Allow negative net book value cannot be selected for a derogatory depreciation value model.
                            ret = checkFailed("@FixedAssets:FA_MessageValidation_CannotSelectAllowNegativeNetBookValueForDerogatoryDepreciationBook");
                            return ret;
                        }

                        // Verify that the user enetered a valid derogatory tax model.
                        if (!AssetBookTable::find(this.AssetDerogatoryModel_FR).IsDerogatoryBook_FR)
                        {
                            ret = checkFailed(strFmt("@SYS112466",this.AssetDerogatoryModel_FR));
                            return ret;
                        }

                        // Verify that full depreciation option is selected for the asset with depreciation method of reducing balance.
                        if (!this.validDerogDepreciationMethodOnProfile_FR(this.DepreciationProfile)
                            || ( this.DepreciationAltProfile && !this.validDerogDepreciationMethodOnProfile_FR(this.DepreciationAltProfile)))

                        {
                            // Asset designed for derogatory depreciation with a reducing balance depreciation method must have full depreciation option selected.
                            ret = checkFailed("@SYS110407");
                            return ret;
                        }
                    }

                    break;

                case fieldNum(AssetBookTable,CurrentOperationsTax):

                    if (this.IsDerogatoryBook_FR || this.AssetDerogatoryModel_FR)
                    {
                        // Posting layer cannot be modify if the value model is set up for the derogatory depreciation.
                        ret = checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryDepreciationBookPostingLayerCannotBeChanged");
                    }

                    if (ret &&
                        AssetTrans::existBookTransactions(this.BookId) ||
                        AssetBookTable::existBookJournals(this.BookId))
                    {
                        ret = checkFailed("@FixedAssets:FA_MessageError_CannotEditPostingLayerWhenTransactionsExist");
                    }

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validatePostingLayer();

                    break;

                case fieldNum(AssetBookTable,FiscalCalendar):
                    if (AssetTrans::existBookTransactions(this.BookId) ||
                        AssetBookTable::existBookJournals(this.BookId))
                    {
                        ret = checkFailed("@SYS95541");
                    }

                    else if (this.orig().FiscalCalendar != this.FiscalCalendar)
                    {
                        if (!this.FiscalCalendar && depreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
                        {
                            switch (this.checkSetDepreciationConventionToNone(depreciationProfile.DepreciationYear))
                            {
                                case DialogButton::Yes:
                                    AssetBook::setDepreciationConvention(this.BookId,AssetDepreciationConvention::None);
                                    AssetGroupBookSetup::setDepreciationConvention(this.BookId,AssetDepreciationConvention::None);
                                    break;

                                case DialogButton::No:
                                    ret =  false;
                                    break;
                            }
                        }
                    }
                    break;

                case fieldNum(AssetBookTable,Depreciation):
                    // Make sure that the depreciation check box is selected for derogatory type value models.
                    if ((this.IsDerogatoryBook_FR || this.AssetDerogatoryModel_FR) && !this.Depreciation)
                    {
                        // You must select the depreciation option for derogatory value model '%1'.
                        return checkFailed(strFmt("@FixedAssets:FA_MessageValidation_MustSelectDepreciationOptionForDerogatoryBook", this.BookId));
                    }
                    break;

                // <GEEHU>
                case fieldNum(AssetBookTable,LowCostAsset_HU):
                    if (this.LowCostAsset_HU && !AssetParameters::find().LowCostAssetThreshold_W)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00021, funcName());
                        ret = checkFailed("@GLS112918");
                    }
                    break;
                // </GEEHU>
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSetDepreciationConventionToNone</Name>
				<Source><![CDATA[
    private DialogButton checkSetDepreciationConventionToNone(AssetDepreciationYear _assetDepreciationYear)
    {
        DialogButton setDepreciationConventionToNone = DialogButton::Yes;

        // hasGUI() protects Box call in scenarios where validation is called when running in Batch or without UI
        if (hasGUI())
        {
            setDepreciationConventionToNone = Box::yesNo(strFmt("@SYS97825", _assetDepreciationYear), DialogButton::Yes, "@SYS28002");
        }

        return setDepreciationConventionToNone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field value of the asset book table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        #define.MaxPercentage(100)
        AssetDepreciationProfile    assetDepreciationProfile;
        CalendarType_IN             calendarType;
        boolean                     isAssetParametersIN;
        AssetBookTable              assetBookTableLoc;
		
        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                // <GCN>
                case fieldStr(AssetBookTable, ExpectedScrapRate_CN):
                    // Make sure that the expected scrap value is between 0 and 100%
                    if (AssetParameters::isDepreciationPolicyEnabled()
                        && this.ExpectedScrapRate_CN >= #MaxPercentage)
                    {
                        ret = checkFailed("@GLS61009");
                    }
                    break;
                // </GCN>

                // <GIN>
                case fieldStr(AssetBookTable, WorkingDays_IN):
                    if (AssetParameters::isDepreciationIncomeTaxActEnable_IN())
                    {
                        this.WorkingDays_IN = max(0,min(999,this.WorkingDays_IN));
                    }
                    break;

                case fieldStr(AssetBookTable, DepreciationProfile):
                    if (this.DepreciationProfile != ''
                        && this.FiscalCalendar != 0
                        && AssetParameters::isDepreciationCompaniesActEnable_IN())
                    {
                        assetDepreciationProfile = AssetDepreciationProfile::find(this.DepreciationProfile);
                        calendarType             = FiscalCalendar_IN::findByFiscalCalendar(this.FiscalCalendar).CalendarType;

                        if ((calendarType != CalendarType_IN::DayBased
                            && assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
                            || (calendarType == CalendarType_IN::DayBased
                                && !assetDepreciationProfile.isShiftDepreciationMethod_IN()))
                        {
                            ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_MethodWithDepreciationYearCannotBeUsedWithCalendar", assetDepreciationProfile.Method, assetDepreciationProfile.DepreciationYear, calendarType));
                        }
                    }
                    break;

                case fieldStr(AssetBookTable, FiscalCalendar):
                    isAssetParametersIN = AssetParameters::checkAssetParameters_IN();

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                    {
                        calendarType = FiscalCalendar_IN::findByFiscalCalendar(this.FiscalCalendar).CalendarType;
                    }

                    if (calendarType == CalendarType_IN::DayBased
                        && isAssetParametersIN == false)
                    {
                        // Companies act depreciation parameter or income tax act depreciation parameter must be selected in fixed asset parameters to use the calender day based.
                        ret = checkFailed("@SYS4000970");
                    }

                    if (ret
                        && this.DepreciationProfile != ""
                        && this.FiscalCalendar != 0
                        && AssetParameters::isDepreciationCompaniesActEnable_IN())
                    {
                        assetDepreciationProfile = AssetDepreciationProfile::find(this.DepreciationProfile);

                        if ((calendarType != CalendarType_IN::DayBased
                            && assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
                            || (calendarType == CalendarType_IN::DayBased
                                && !assetDepreciationProfile.isShiftDepreciationMethod_IN()))
                        {
                            ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_MethodWithDepreciationYearCannotBeUsedWithCalendar", assetDepreciationProfile.Method, assetDepreciationProfile.DepreciationYear, calendarType));
                        }
                    }
                    break;
                case fieldStr(AssetBookTable, LinkedCurrentLayerAssetBookTable_JP):
                    if (this.LinkedCurrentLayerAssetBookTable_JP)
                    {
                        select firstOnly RecId from assetBookTableLoc
                            where assetBookTableLoc.BookId                                  != this.BookId
                                && assetBookTableLoc.LinkedCurrentLayerAssetBookTable_JP    == this.LinkedCurrentLayerAssetBookTable_JP;
                        if (assetBookTableLoc.RecId)
                        {
                            // This value model is referenced by another value model in the tax layer. Select another value model.
                            ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880356");
                        }
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             isValid;
        AssetBookId         assetDerogatoryMainBookId;
        AssetBookTable      assetBookDerogatory;
        AssetGroupBookSetup assetGroupTable;
        AssetGroupBookSetup assetGroupDerTaxTable;

        isValid = super();

        // Verify if the derogatory information can be modified.
        // If the value model is already assigned to an asset or has asset transaction,
        // the iformation cannot be changed.
        if (this.orig().IsDerogatoryBook_FR != this.IsDerogatoryBook_FR ||
            this.orig().AssetDerogatoryModel_FR != this.AssetDerogatoryModel_FR)
            {
                isValid = this.canChangeDerogatoryInfo_FR();
                if (!isValid)
                {
                    this.IsDerogatoryBook_FR = this.orig().IsDerogatoryBook_FR;
                    this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                    return isValid;
                }
            }

        // Verify that if the user unselects the derogatory tax model record, the model is not already
        // assigned to an existing value model.
        if (this.orig().IsDerogatoryBook_FR && !this.IsDerogatoryBook_FR)
        {
            assetDerogatoryMainBookId = AssetBookTable::findDerogatoryAccountingModelBookId(this.BookId);
            if (assetDerogatoryMainBookId)
            {
                //Value model '%1' cannot be unselected as a Derogatory tax model as it is used on '%2' value model.
                this.IsDerogatoryBook_FR = true;
                return checkFailed(strFmt("@FixedAssets:FA_MessageValidation_CannotUnmarkDerogatoryTaxBookBecauseItIsUsedOnBook", this.BookId, assetDerogatoryMainBookId));
            }
        }

        // Verify that you cannot change the calendar info, if the value model is set up for
        // the derogatory depreciation and they calendars don't match.
        if ((this.AssetDerogatoryModel_FR || this.IsDerogatoryBook_FR)
            && this.FiscalCalendar != this.orig().FiscalCalendar)
        {
            if (this.AssetDerogatoryModel_FR)
            {
                assetBookDerogatory = AssetBookTable::find(this.AssetDerogatoryModel_FR);
                if (assetBookDerogatory && this.FiscalCalendar != assetBookDerogatory.FiscalCalendar)
                {
                    this.FiscalCalendar = this.orig().FiscalCalendar;
                    return checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryMainAndTaxBooksMustHaveSameFiscalCalendar");
                }
            }
            else
            {
                assetDerogatoryMainBookId = AssetBookTable::findDerogatoryAccountingModelBookId(this.BookId);
                if (assetDerogatoryMainBookId)
                {
                    assetBookDerogatory = AssetBookTable::find(assetDerogatoryMainBookId);
                    if (assetBookDerogatory && this.FiscalCalendar != assetBookDerogatory.FiscalCalendar)
                    {
                        this.FiscalCalendar = this.orig().FiscalCalendar;
                        return checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryMainAndTaxBooksMustHaveSameFiscalCalendar");
                    }
                }
            }
        }

        // Derogatory calculation field has been populated.
        if (this.AssetDerogatoryModel_FR)
        {
            assetBookDerogatory = AssetBookTable::find(this.AssetDerogatoryModel_FR, false);

            // Verify that posting profiles are the same the accounting value mode and depreciation book
            if (this.CurrentOperationsTax != assetBookDerogatory.CurrentOperationsTax)
            {
                // Main derogatory value model and tax derogatory model must have the same posting layers.
                this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                return checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryMainAndTaxBooksMustHaveSamePostingLayer");
            }

            if (this.AssetDerogatoryModel_FR != this.orig().AssetDerogatoryModel_FR)
            {
                // Verify that the derogatory tax model is not aready assigned to a different value model.
                assetDerogatoryMainBookId = AssetBookTable::findDerogatoryAccountingModelBookId(this.AssetDerogatoryModel_FR);
                if (assetDerogatoryMainBookId)
                {
                    // Value model '%1' cannot be selected for derogatory calculation as it is used on '%2' value model.
                    isValid = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_CannotSelectBookForDerogatoryCalculation", this.AssetDerogatoryModel_FR, assetDerogatoryMainBookId ));
                    this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                    return isValid;
                }

                if (assetBookDerogatory)
                {
                    // Verify if the calendars are the same
                    if (this.FiscalCalendar != assetBookDerogatory.FiscalCalendar )
                    {
                        // Main derogatory value model and derogator tax model must have the same fiscal calendar.
                        this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                        return checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryMainAndTaxBooksMustHaveSameFiscalCalendar");
                    }

                    // Verify that Negative Net Book Values are not allowed.
                    if (assetBookDerogatory.NegativeNetBookValue)
                    {
                        // Allow negative net book value cannot be selected for a derogatory depreciation value model.
                        this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                        return checkFailed("@FixedAssets:FA_MessageValidation_CannotSelectAllowNegativeNetBookValueForDerogatoryDepreciationBook");
                    }

                    // Verify that full depreciation option is selected for the asset with depreciation method of reducing balance.
                    if (!this.validDerogDepreciationMethodOnProfile_FR(assetBookDerogatory.DepreciationProfile)
                        || (this.DepreciationAltProfile && !this.validDerogDepreciationMethodOnProfile_FR(assetBookDerogatory.DepreciationAltProfile)))
                    {
                        // Asset designed for derogatory depreciation with a reducing balance depreciation method must have full depreciation option selected.
                        this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                        return checkFailed("@SYS110407");
                    }

                    // Verify that deprecation year and period frequency is the same for the value mode and depreciation book
                    if (!this.validDerogDepreciationAcrualOnProfile_FR(this.DepreciationProfile, assetBookDerogatory.DepreciationProfile))
                    {
                        // Main derogatory value model and tax derogatory model must have the same depreciation accrual information.
                        this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                        return checkFailed("@FixedAssets:FA_MessageValidation_DerogatoryMainAndTaxBooksMustHaveSameAccrual");
                    }

                    // Verify that the depreciation conventions are proper on the asset group for the given value model.
                    select firstonly DepreciationConvention, ServiceLife from
                    assetGroupTable join * from assetGroupDerTaxTable
                        where assetGroupTable.BookId == this.BookId
                            && assetGroupDerTaxTable.BookId == this.AssetDerogatoryModel_FR
                            && assetGroupDerTaxTable.AssetGroup == assetGroupTable.AssetGroup;

                    // Verify that the asset group information is proper.
                    // User can posibly modify the setup value models after the asset group is created.
                    if (assetGroupDerTaxTable.AssetGroup)
                    {
                        if (assetGroupDerTaxTable.DepreciationConvention != assetGroupTable.DepreciationConvention)
                        {
                            // Derogatory tax value model %1 cannot be assigned to %2.
                            // The depreciation convention specified for the value models in the asset group %3 does not match.
                            isValid = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_DerogatoryTaxBookCannotBeUsedConventionsDoNotMatch", this.AssetDerogatoryModel_FR, this.BookId, assetGroupDerTaxTable.AssetGroup));
                            this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                            return isValid;
                        }

                        if (assetGroupDerTaxTable.ServiceLife > assetGroupTable.ServiceLife)
                        {
                            // Derogatory tax value model %1 cannot be assigned to %2.
                            // Value model '%1' service life cannot be greater than of value model '%2' for asset group %3.
                            isValid = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_DerogatoryTaxBookCannotBeUsedBookServiceLifeCannotBeGreater", this.AssetDerogatoryModel_FR, this.BookId, assetGroupDerTaxTable.AssetGroup));
                            this.AssetDerogatoryModel_FR = this.orig().AssetDerogatoryModel_FR;
                            return isValid;
                        }
                    }
                }
            }
        }

        // <GIN>
        if (AssetParameters::checkAssetParameters_IN())
        {
            if (AssetDepreciationProfile::find(this.DepreciationProfile).Method == AssetDepreciationMethod::StraightLinePercentage_IN)
            {
                if (!(FiscalCalendar_IN::findByFiscalCalendar(this.getFiscalCalendar()).CalendarType == CalendarType_IN::DayBased
                    && this.CurrentOperationsTax == CurrentOperationsTax::Current))
                {
                    isValid = checkFailed("@FixedAssets:FA_MessageValidation_SLPercentageCanBeUsedOnlyWithDayBasedCalendarAndCurrentPostingLayer");
                }
            }
        }
        // </GIN>

        if (isValid && FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            isValid = AssetDepreciationProfile::validateDepreciationProfilesHaveSameDepreciationYear_JP(
                this.DepreciationProfile, 
                this.DepreciationAcceleratedProfile_JP);
        }

        if (isValid)
        {
            // Update the derived value models information is necessary.
            assetDerogatoryMainBookId = this.orig().AssetDerogatoryModel_FR;
            // Delete existing derived value models if the derogatory tax model changed.
            if (this.orig().AssetDerogatoryModel_FR &&  this.orig().AssetDerogatoryModel_FR != this.AssetDerogatoryModel_FR)
            {
                // The derived value models need to be updated.
                this.deleteDerogatoryDerivedSetting_FR(this.BookId, this.orig().AssetDerogatoryModel_FR);
            }

            // If the derogatory tax model has been added or replaced, create the derived value models.
            if ((this.orig().AssetDerogatoryModel_FR == "" && this.AssetDerogatoryModel_FR)
            || (this.orig().AssetDerogatoryModel_FR && this.AssetDerogatoryModel_FR
            &&  this.orig().AssetDerogatoryModel_FR != this.AssetDerogatoryModel_FR))
            {
                this.createDerogatoryDerivedSetting_FR(this.BookId, this.AssetDerogatoryModel_FR);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validDerogDepreciationAcrualOnProfile_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the accrual information matches for two given depreciation profiles.
    /// </summary>
    /// <param name="_accountingDepreciationProfileId">
    ///    The depreciation profile ID of the main derogatory profile.
    /// </param>
    /// <param name="_taxDepreciationProfileId">
    ///    The depreciation profile ID of the tax derogatory profile.
    /// </param>
    /// <returns>
    ///    true if the value of the deprecation year and period frequency is the same; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation.
    /// </remarks>
    private boolean validDerogDepreciationAcrualOnProfile_FR(
        AssetDepreciationProfileId  _accountingDepreciationProfileId,
        AssetDepreciationProfileId  _taxDepreciationProfileId)
    {
        boolean retValue = false;
        AssetDepreciationProfile accountingAssetDepreciationProfile;
        AssetDepreciationProfile taxAssetDepreciationProfile;

        accountingAssetDepreciationProfile = AssetDepreciationProfile::find(_accountingDepreciationProfileId, false);
        taxAssetDepreciationProfile = AssetDepreciationProfile::find(_taxDepreciationProfileId, false);
        if (accountingAssetDepreciationProfile && taxAssetDepreciationProfile )
        {
            if (taxAssetDepreciationProfile.Accrual == accountingAssetDepreciationProfile.Accrual
                && taxAssetDepreciationProfile.DepreciationYear == accountingAssetDepreciationProfile.DepreciationYear )
            {
                retValue = true;
            }
        }

    return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validDerogDepreciationMethodOnProfile_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the depreciation profile has selected the full depreciation check box for reducing
    ///    balance types.
    /// </summary>
    /// <param name="_depreciationProfileId">
    ///    The ID of a derogatory depreciation profile.
    /// </param>
    /// <returns>
    ///    true if the depreciation profile of a reducing balance type has selected the full deprecation
    ///    option; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation.
    /// </remarks>
    private boolean validDerogDepreciationMethodOnProfile_FR(AssetDepreciationProfileId _depreciationProfileId)
    {
        boolean retValue = true;
        AssetDepreciationProfile assetDepreciationProfile;

        assetDepreciationProfile = AssetDepreciationProfile::find(_depreciationProfileId, false);
        if (assetDepreciationProfile)
        {
            if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(assetDepreciationProfile.Method)
                && !assetDepreciationProfile.AssetEndDependOnServiceLife)
            {
                retValue = false;
            }
        }

    return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist( AssetBookId _bookId)
    {
        boolean ret = true;

        if (!AssetBookTable::exist(_bookId))
        {
            ret = checkFailed(strFmt(AssetBookTable::txtNotExist(), _bookId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(AssetBookId _bookId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     assetBookTable
                 where
                     assetBookTable.BookId == _bookId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAssetBookForDepreciationMethods_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// check whether Depreciation Method of China is in use, used by table AssetParameters.
    /// </summary>
    /// <returns>
    /// true if the depreciation method is used by some value model, else false.
    /// </returns>
    public static boolean existAssetBookForDepreciationMethods_CN()
    {
        boolean                     found;
        AssetBookTable              assetBookTable;
        AssetDepreciationProfile    assetDepreciationProfile;

        select firstonly RecId from assetBookTable
            exists join assetDepreciationProfile
                where assetBookTable.DepreciationProfile == assetDepreciationProfile.Profile
                    && (assetDepreciationProfile.Method == AssetDepreciationMethod::DoubleReduceBalance_CN
                        || assetDepreciationProfile.Method  == AssetDepreciationMethod::SumYearDigits_CN);

        if (assetBookTable.RecId != 0)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAssetBookForDepreciationPolicy_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// check whether the depreciation policy is set by some value model. used by table AssetParameters.
    /// </summary>
    /// <returns>
    /// true if some value model set the depreciation policy,else false.
    /// </returns>
    public static boolean existAssetBookForDepreciationPolicy_CN()
    {
        boolean found = false;

        found = (select firstonly RecId from assetBookTable
                    where assetBookTable.IsDeprecateInDisposal_CN
                          || assetBookTable.ExpectedScrapRate_CN > 0 ).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBookJournals</Name>
				<Source><![CDATA[
    public static boolean existBookJournals(AssetBookId _bookId)
    {
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        return _bookId &&
                 (select firstonly RecId from ledgerJournalTrans_Asset
                    where ledgerJournalTrans_Asset.BookId == _bookId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetBookTable find(
        AssetBookId _assetBookId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetBookTable      assetBookTable;

        assetBookTable.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetBookTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetBookTable
        where
            assetBookTable.BookId == _assetBookId;
        return assetBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLinkedCurrentLayerBook_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the tax layer book which is linked to specified current layer book.
    /// </summary>
    /// <param name="_currentLayerBookId">
    /// The current layer book ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// The tax layer book.
    /// </returns>
    public static AssetBookTable findByLinkedCurrentLayerBook_JP(
        AssetBookId             _currentLayerBookId,
        boolean                 _forupdate          = false,
        ConcurrencyModel        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetBookTable      assetBookTable;
        if (_currentLayerBookId)
        {
            assetBookTable.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetBookTable.concurrencyModel(_concurrencyModel);
            }
            select firstonly assetBookTable
                where assetBookTable.LinkedCurrentLayerAssetBookTable_JP == _currentLayerBookId;
        }
        return assetBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDerogatoryAccountingModelBookId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the ID of the main value that uses a Derogatory Tax Model for the derogatory depreciation.
    /// </summary>
    /// <param name="_assetDerobatoryTaxModelId">
    ///    The value model ID of the derogatory tax model.
    /// </param>
    /// <returns>
    ///    The value model ID of the main derogatory deprecation value model.
    /// </returns>
    /// <remarks>
    ///    This method should be only used for French derogatory depreciation.
    /// </remarks>
    public static AssetBookId findDerogatoryAccountingModelBookId(AssetBookId _assetDerobatoryTaxModelId)
    {
        AssetBookTable      assetBookTable;
        AssetBookId         returnValue;

        if (_assetDerobatoryTaxModelId)
        {
            assetBookTable.selectForUpdate(false);
            select firstonly
                assetBookTable
            where
                assetBookTable.AssetDerogatoryModel_FR == _assetDerobatoryTaxModelId;

            returnValue = assetBookTable.BookId;
        }
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProfilePolishDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the deprecation method is used for the Polish depreciation.
    /// </summary>
    /// <param name="_assetDepreciationMethod">
    /// The depreciation method to verify.
    /// </param>
    /// <returns>
    /// true if the depreciation method is used for the Polish deprecation; otherwise, false .
    /// </returns>
    public static boolean isProfilePolishDepreciationMethod(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean returnValue = AssetDepreciationProfile::isProfilePolishDepreciationMethod(_assetDepreciationMethod);

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@FixedAssets:FA_MessageValidation_BookDoesNotExist";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccrualAndYearOnProfile</Name>
				<Source><![CDATA[
    public static boolean validateAccrualAndYearOnProfile(
        AssetDepreciationProfileId _depreciationProfileId,
        AssetDepreciationYear _depreciationYear,
        AssetAccrual _accrual)
    {
        boolean ret = true;

        AssetBookTable assetBookTable;

        while select assetBookTable
            where assetBookTable.DepreciationProfile    == _depreciationProfileId
               || assetBookTable.DepreciationAltProfile == _depreciationProfileId
        {
            if (ret &&
                !assetBookTable.postToGeneralLedger() &&
                _accrual == AssetAccrual::Daily)
            {
                ret = false;
            }

            AssetDepreciationProfile assetDepreciationProfile = AssetDepreciationProfile::find(assetBookTable.DepreciationProfile);

            if (assetBookTable.DepreciationProfile == _depreciationProfileId)
            {
                AssetDepreciationProfile assetDepreciationAltProfile = AssetDepreciationProfile::find(assetBookTable.DepreciationAltProfile);

                if (ret &&
                    assetBookTable.DepreciationAltProfile &&
                    assetBookTable.DepreciationAltProfile != _depreciationProfileId &&
                    (_depreciationYear != assetDepreciationAltProfile.DepreciationYear ||
                     _accrual          != assetDepreciationAltProfile.Accrual))
                {
                    ret = false;
                }

                //restrict use of daily accrual with low value pool depreciation
                if (ret &&
                    _accrual == AssetAccrual::Daily &&
                    assetDepreciationProfile.Method == AssetDepreciationMethod::LowValuePool)
                {
                    ret = false;
                }
            }
            else if (assetBookTable.DepreciationAltProfile == _depreciationProfileId)
            {
                if (ret &&
                    assetBookTable.DepreciationProfile &&
                    (_depreciationYear != assetDepreciationProfile.DepreciationYear ||
                     _accrual          != assetDepreciationProfile.Accrual))
                {
                    ret = false;
                }
            }

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationMethodOnProfile</Name>
				<Source><![CDATA[
    public static boolean validateDepreciationMethodOnProfile(
        AssetDepreciationProfileId _depreciationProfileId,
        AssetDepreciationMethod    _depreciationMethod)
    {
        AssetBookTable assetBookTable;
        boolean ret = true;

        boolean                     isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        AssetDepreciationProfile    depreciationExtProfile;
        AssetDepreciationProfile    depreciationProfile;

        while select assetBookTable
            where assetBookTable.DepreciationProfile == _depreciationprofileId
        {
            if (assetBookTable.DepreciationProfile && assetBookTable.DepreciationAltProfile)
            {
                if (!AssetDepreciationProfile::isValidProfileForAltProfileCombination(_depreciationMethod))
                {
                    ret = false;
                }
            }

            if (isISOJP
                && AssetDepreciationProfile::isSpecialDepMethod_JP(_depreciationMethod))
            {
                ret = false;
            }

            if (!ret)
                return ret;
        }

        while select assetBookTable
            where assetBookTable.DepreciationAltProfile == _depreciationprofileId &&
                  assetBookTable.DepreciationProfile    != _depreciationprofileId
            {
                if (assetBookTable.DepreciationProfile && assetBookTable.DepreciationAltProfile)
                {
                    if (!AssetDepreciationProfile::isValidProfileForAltProfileCombination(_depreciationMethod))
                    {
                        ret = false;
                    }
                }

                if (!ret)
                    return ret;
            }

        if (isISOJP)
        {
            if (ret && _depreciationMethod == AssetDepreciationMethod::AdditionalDepreciation_JP)
            {
                select firstOnly RecId from assetBookTable
                    where assetBookTable.DepreciationExtProfile == _depreciationprofileId
                exists join depreciationProfile
                    where assetBookTable.DepreciationProfile == depreciationProfile.Profile
                       && !(depreciationProfile.Method == AssetDepreciationMethod::NewStraightLine_JP
                           || depreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance200_JP
                           || depreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance250_JP);
                if (assetBookTable.RecId)
                {
                    ret = false;
                }
            }

            if (ret
                &&!AssetDepreciationProfile::isSpecialDepMethod_JP(_depreciationMethod))
            {
                select firstonly RecId from assetBookTable
                    where assetBookTable.DepreciationExtProfile == _depreciationprofileId;

                if (assetBookTable.RecId)
                {
                    ret = false;
                }
            }

            if (ret
                && !(_depreciationMethod == AssetDepreciationMethod::NewStraightLine_JP
                    || _depreciationMethod == AssetDepreciationMethod::NewDecliningBalance200_JP
                    || _depreciationMethod == AssetDepreciationMethod::NewDecliningBalance250_JP))
            {
                select firstOnly RecId from assetBookTable
                    where assetBookTable.DepreciationProfile == _depreciationprofileId
                exists join depreciationExtProfile
                    where depreciationExtProfile.Profile == assetBookTable.DepreciationExtProfile
                       && depreciationExtProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP;

                if (assetBookTable.RecId)
                {
                    ret = false;
                }
            }
        }
        else
        {
            if (_depreciationMethod != AssetDepreciationMethod::Manual)
            {
                assetBookTable.clear();

                select firstonly RecId from assetBookTable
                    where assetBookTable.DepreciationExtProfile == _depreciationprofileId;

                if (assetBookTable.RecId)
                    ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueModelLookup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method for value models.
    /// </summary>
    /// <param name="_formcontrol">
    /// The control on which to perform lookup.
    /// </param>
    /// <param name="_currentOperationsTax">
    /// The operation tax value.
    /// </param>
    public static void valueModelLookup_IN(FormStringControl    _formcontrol,
                                           CurrentOperationsTax _currentOperationsTax)
    {
        // <GIN>
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(AssetBookTable),_formcontrol);
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(AssetBookTable,BookId));
        sysTableLookup.addLookupfield(fieldNum(AssetBookTable,CurrentOperationsTax));

        queryBuildDataSource = query.addDataSource(tableNum(AssetBookTable));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(AssetBookTable,CurrentOperationsTax));
        queryBuildRange.value(queryValue(_currentOperationsTax));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueModelLookupAll_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method for value models.
    /// </summary>
    /// <param name="_formcontrol">
    /// Control on which to perform lookup.
    /// </param>
    public static void valueModelLookupAll_IN(FormStringControl _formcontrol)
    {
        // <GIN>
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(AssetBookTable),_formcontrol);
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(AssetBookTable,BookId));
        sysTableLookup.addLookupfield(fieldNum(AssetBookTable,CurrentOperationsTax));

        queryBuildDataSource = query.addDataSource(tableNum(AssetBookTable));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(AssetBookTable,CurrentOperationsTax));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize default values for AssetBookTable
    /// </summary>
    public void initValue()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpInterCompanyBookId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs a lookup for intercompany transfer setup.
    /// </summary>
    /// <param name="_lookupCtrl">Control on which to perform lookup.</param>
    /// <param name="_company">A company id.</param>
    public static void lookUpInterCompanyBookId(FormStringControl _lookupCtrl, CompanyId _company)
    {
        if (!_company)
        {
            throw error("@GLS116690");
        }
        if (SysDataArea::checkAccessible(_company))
        {
            changecompany(_company)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(AssetBookTable), _lookupCtrl);
                sysTableLookup.addLookupfield(fieldNum(AssetBookTable, BookId));
                sysTableLookup.addLookupfield(fieldNum(AssetBookTable, Description));
                sysTableLookup.performFormLookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBookTablePostableToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Peforms a lookup for <c>AssetBookTable</c> table records
    ///   that can be posted to general ledger
    /// </summary>
    public static void lookupBookTablePostableToGeneralLedger(FormStringControl _lookupCtrl)
    {
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(AssetBookTable));
        QueryBuildRange      queryBuildRange = queryBuildDataSource.addRange(fieldNum(AssetBookTable, CurrentOperationsTax));
        queryBuildRange.value(SysQuery::valueNot(enum2int(CurrentOperationsTax::None)));
        queryBuildRange.status(RangeStatus::Hidden);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(AssetBookTable), _lookupCtrl);
        sysTableLookup.addLookupfield(fieldNum(AssetBookTable, BookId), true);
        sysTableLookup.addLookupfield(fieldNum(AssetBookTable, Description));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanPostToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Peforms a validation of the book id entered for <c>AssetBookTable</c> table records
    ///   if it can be posted to general ledger
    /// </summary>
    /// <param name = "_bookId">Book ID to validate</param>
    /// <returns>True if the book can be posted; otherwise false</returns>
    public static boolean validateCanPostToGeneralLedger(AssetBookId _bookId)
    {
        boolean ret = true;

        if (_bookId && AssetBookTable::find(_bookId).postToGeneralLedger() == NoYes::No)
        {
            ret = checkFailed(strFmt("@FixedAssets:FA_ErrorMessage_ValueModelNoLedgerPosting", _bookId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns post to general ledger value based on the posting layer specified.
    /// </summary>
    /// <returns>
    ///    Post to general ledger value based on the posting layer.
    /// </returns>
    public AssetPostToGeneralLedger postToGeneralLedger()
    {
        AssetPostToGeneralLedger postToGeneralLedger;

        if (this.CurrentOperationsTax == CurrentOperationsTax::None)
        {
            postToGeneralLedger = NoYes::No;
        }
        else
        {
            postToGeneralLedger = NoYes::Yes;
        }

        return postToGeneralLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPostToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the record with relevant posting layer.
    /// </summary>
    /// <param name = "_set">
    ///   True to set the selected value.
    /// </param>
    /// <param name = "_assetBookTable">
    ///   The <c>AssetBookTable</c> record.
    /// </param>
    /// <param name = "_postToGeneralLedger">
    ///   A new post to general ledger value.
    /// </param>
    /// <returns>
    ///   Post to general ledger value based on the posting layer.
    /// </returns>
    public edit AssetPostToGeneralLedger editPostToGeneralLedger(boolean _set, AssetBookTable _assetBookTable, AssetPostToGeneralLedger _postToGeneralLedger)
    {
        AssetPostToGeneralLedger postToGeneralLedger;

        if (_set)
        {
            if (_postToGeneralLedger == NoYes::No)
            {
                _assetBookTable.CurrentOperationsTax = CurrentOperationsTax::None;
            }
            else
            {
                _assetBookTable.CurrentOperationsTax = CurrentOperationsTax::Current;
            }

            if (!this.validateField(fieldNum(AssetBookTable, CurrentOperationsTax)))
            {
                _assetBookTable.CurrentOperationsTax = _assetBookTable.orig().CurrentOperationsTax;
            }
        }

        postToGeneralLedger = _assetBookTable.postToGeneralLedger();

        return postToGeneralLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPostingLayerString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the string value of posting layer from the current record.
    /// </summary>
    public display AssetPostingLayerString displayPostingLayerString()
    {
        return enum2Str(this.CurrentOperationsTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoundedDepreciationAmountForLastPeriodBase</Name>
				<Source><![CDATA[
    private AssetAmount getRoundedDepreciationAmountForLastPeriodBase(
        AssetAmount _depreciationAmount,
        AssetAmount _remainingDepreciableNetBookValue,
        int _acquisitionAmountSign,
        RoundOff _roundOff)
    {
        if (_roundOff
            && _depreciationAmount
            && _remainingDepreciableNetBookValue - _depreciationAmount != 0
            && (_remainingDepreciableNetBookValue - _depreciationAmount) * _acquisitionAmountSign < _roundOff)
        {
            _depreciationAmount = _remainingDepreciableNetBookValue;
        }

        return _depreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoundedDepreciationAmountForLastPeriod</Name>
				<Source><![CDATA[
    internal AssetAmount getRoundedDepreciationAmountForLastPeriod(
        AssetAmount _depreciationAmount,
        AssetAmount _remainingDepreciableNetBookValue,
        int _acquisitionAmountSign)
    {
        return this.getRoundedDepreciationAmountForLastPeriodBase(
            _depreciationAmount,
            _remainingDepreciableNetBookValue,
            _acquisitionAmountSign,
            this.RoundOffDepreciation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoundedDepreciationAmountForLastPeriodReporting</Name>
				<Source><![CDATA[
    internal AssetAmount getRoundedDepreciationAmountForLastPeriodReporting(
        AssetAmount _depreciationAmount,
        AssetAmount _remainingDepreciableNetBookValue,
        int _acquisitionAmountSign)
    {
        return this.getRoundedDepreciationAmountForLastPeriodBase(
            _depreciationAmount,
            _remainingDepreciableNetBookValue,
            _acquisitionAmountSign,
            this.RoundOffDepreciationReportingCurrency);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetBookTable</DeveloperDocumentation>
	<FormRef>AssetBookTable</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetBookTable</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BookId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>BookIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>BookIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetBookTaxCoefficient</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetBookTaxCoefficient</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetBook</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetBook</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetBookTableDerived</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetBookTableDerived</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetBookTableShiftDepreciation_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetBookTableShiftDepreciation_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetGroupBookSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetGroupBookSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetParameters</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetParameters</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetStandardInterCompany</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetStandardInterCompany</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetDepreciationGroup_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetDepreciationGroup_W</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentOperationsTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Depreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationAltProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationExtProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOffDepreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOffDepreciationReportingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOffType_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetBookValueRest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetBookValueRestReportingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTrueUpDepreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCategoryTogether_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationAcceleratedProfile_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowDepreciationAdjSameDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationPolicy</Name>
			<Label>@GLS61025</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsDeprecateInDisposal_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedScrapRate_CN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DerogatoryCalculation</Name>
			<Label>@SYS110414</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetDerogatoryModel_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDerogatoryBook_FR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS25589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LowCostAssetHU</Name>
			<Label>@GLS112919</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LowCostAsset_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS26269</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrentOperationsTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinkedCurrentLayerAssetBookTable_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionOnFirstDayCheckType_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceedingNetBookValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegativeNetBookValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkingDays_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverRideCalendarDays_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions_RU</Name>
			<Label>@SYS53632</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS12919</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfileShortage_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOff_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency_RU</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AcquisitionOnFirstDayCheckType_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetAcquisitionOnFirstDayCheckType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetDerogatoryModel_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDerogatoryValueModel_FR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrentOperationsTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CurrentOperationsTax</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DEL_CalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects60</ConfigurationKey>
			<ExtendedDataType>AssetCalendarID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Depreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationAltProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAltProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationExtProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationExtProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationAcceleratedProfile_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAcceleratedProfileId_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExceedingNetBookValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExceedingNetBookValue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedScrapRate_CN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetScrapRate_CN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalCalendarRecId</ExtendedDataType>
			<Label>@sys11839</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeprecateInDisposal_CN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationDisposal_CN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDerogatoryBook_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDerogatoryBook_FR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTrueUpDepreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedAssetTrueUpDepreciation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinkedCurrentLayerAssetBookTable_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:ReferencedValueModel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LowCostAsset_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<Label>@GLS112919</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegativeNetBookValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NegativeNetBookValue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetBookValueRest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS78079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverRideCalendarDays_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5958</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundOffDepreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
			<Label>@SYS71186</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundOffType_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>EE,CZ,HU,LT,LV,PL</CountryRegionCodes>
			<Label>@GLS105406</Label>
			<EnumType>RoundOffType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxCategoryTogether_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvAssetTaxCategoryTogether</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkingDays_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Days_IN</ExtendedDataType>
			<Label>@GLS5956</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfileShortage_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@GLS220502</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundOff_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RoundOff</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundOffDepreciationReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
			<Label>@FixedAssets:FA_TableField_RoundOffDepreciationReportingCurrency</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetBookValueRestReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Label>@FixedAssets:FA_TableField_NetBookValueRestReportingCurrency</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowDepreciationAdjSameDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@FixedAssets:FA_DepreciationGroupIsPreventDepreciationAdjHelpText</HelpText>
			<Label>@FixedAssets:FA_PreventAutomaticPostingAdjustment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPositiveDepreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@FixedAssets:FA_HelpText_CalculatePositiveDepreciation</HelpText>
			<Label>@FixedAssets:FA_CalculatePositiveDepreciation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BookIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DerTaxModelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetDerogatoryModel_FR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AssetDepBookTableMap_JP</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAcceleratedProfile</MapField>
					<MapFieldTo>DepreciationAcceleratedProfile_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAltProfile</MapField>
					<MapFieldTo>DepreciationAltProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationProfile</MapField>
					<MapFieldTo>DepreciationProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalCalendar</MapField>
					<MapFieldTo>FiscalCalendar</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NetBookValueRest</MapField>
					<MapFieldTo>NetBookValueRest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOffDepreciation</MapField>
					<MapFieldTo>RoundOffDepreciation</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetDepreciationProfilesValidationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAcceleratedProfile_JP</MapField>
					<MapFieldTo>DepreciationAcceleratedProfile_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAltProfile</MapField>
					<MapFieldTo>DepreciationAltProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationConvention</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationExtProfile</MapField>
					<MapFieldTo>DepreciationExtProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationProfile</MapField>
					<MapFieldTo>DepreciationProfile</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepreciationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationProfile</Name>
					<SourceEDT>AssetDepreciationProfileId</SourceEDT>
					<Field>DepreciationProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationAcceleratedProfile_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DepreciationAcceleratedProfile_JP</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBookTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationAcceleratedProfile_JP</Name>
					<SourceEDT>AssetDepreciationAcceleratedProfileId_JP</SourceEDT>
					<Field>DepreciationAcceleratedProfile_JP</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationAltProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DepreciationAltProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBookTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationAltProfile</Name>
					<SourceEDT>AssetDepreciationAltProfileId</SourceEDT>
					<Field>DepreciationAltProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationExtProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DepreciationExtProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBookTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationExtProfile</Name>
					<SourceEDT>AssetDepreciationExtProfileId</SourceEDT>
					<Field>DepreciationExtProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalCalendar</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FiscalCalendar</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalCalendar</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FiscalCalendar_AssetBookTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendar</Name>
					<SourceEDT>FiscalCalendarRecId</SourceEDT>
					<Field>FiscalCalendar</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LinkedCurrentLayerAssetBookTable_JP</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CurrentOperationsTax</Name>
					<RelatedField>CurrentOperationsTax</RelatedField>
					<ValueStr>CurrentOperationsTax::Current</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedCurrentLayerAssetBookTable_JP</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>LinkedCurrentLayerAssetBookTable_JP</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBookTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension_RU</Name>
					<Field>DefaultDimension_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBookTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode_RU</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode_RU</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetLedger_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile_RU</Name>
					<SourceEDT>AssetPostingProfile</SourceEDT>
					<Field>PostingProfile_RU</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetLedgerShortage_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfileShortage_RU</Name>
					<SourceEDT>AssetPostingProfile</SourceEDT>
					<Field>PostingProfileShortage_RU</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>