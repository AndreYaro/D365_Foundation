<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatRepIntervalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class StatRepIntervalLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMove</Name>
				<Source><![CDATA[
    private boolean canMove()
    {
        return this.IntervalType != PerDayWeekMthQtYr::Unlimited && this.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveDown</Name>
				<Source><![CDATA[
    public boolean canMoveDown()
    {
        StatRepIntervalLine nextColumn;
        boolean             ret;

        if (this.canMove())
        {
            nextColumn = this.nextColumn();

            if (nextColumn.Qty && nextColumn.IntervalType != PerDayWeekMthQtYr::Unlimited)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveUp</Name>
				<Source><![CDATA[
    public boolean canMoveUp()
    {
        StatRepIntervalLine prevColumn;
        boolean             ret;

        if (this.canMove())
        {
            prevColumn = this.prevColumn();

            if (prevColumn.Qty && prevColumn.IntervalType != PerDayWeekMthQtYr::Unlimited)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddAbove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a new aging period definition line can be added above the currently selected line.
    /// </summary>
    /// <returns>true if a line can be added; otherwise, false.</returns>
    public boolean canAddAbove()
    {
        boolean canAddAbove = true;

        if (this.IntervalType == PerDayWeekMthQtYr::Unlimited && !this.prevColumn())
        {
            canAddAbove = false;
        }

        return canAddAbove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddBelow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a new aging period definition line can be added below the currently selected line.
    /// </summary>
    /// <returns>true if a line can be added; otherwise, false.</returns>
    public boolean canAddBelow()
    {
        boolean canAddBelow = true;

        if (this.IntervalType == PerDayWeekMthQtYr::Unlimited && !this.nextColumn())
        {
            canAddBelow = false;
        }

        return canAddBelow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDate</Name>
				<Source><![CDATA[
    TransDate endDate(TransDate initDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Futures                 futures;
        recId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        switch (this.IntervalType)
        {
            case PerDayWeekMthQtYr::Period:
                return  LedgerFiscalCalendar::findPeriodEndDateByDateWithIndex(calendarRecId,initDate, this.Qty-1);

            case PerDayWeekMthQtYr::Day :
                futures = Futures::construct(initDate,
                                     this.Qty-1,
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Week:
                futures = Futures::construct(DateTimeUtil::getEndOfWeekDate(new Session().preferredLocale(), initDate),
                                     this.Qty   * 7 -7,
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Month:
                futures = Futures::construct(dateEndMth(initDate),
                                     this.Qty-1,
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Quarter:
                futures = Futures::construct(dateEndQtr(initDate),
                                     this.Qty   * 3 -3,
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Year:
                futures = Futures::construct(DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), initDate),
                                     this.Qty-1,
                                     PeriodUnit::Year);
                return futures.next();
            case PerDayWeekMthQtYr::Unlimited:
                return dateMax();
        }
        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqual</Name>
				<Source><![CDATA[
    public boolean isEqual(PerDayWeekMthQtYr _intervalType, TimeUnits _qty)
    {
        // Two period definitions match when one of these is true:
        // 1) Both interval types are unlimited (quantity is irrelevant)
        // 2) The interval types and quantities are the same
        return (_intervalType == PerDayWeekMthQtYr::Unlimited && this.IntervalType == PerDayWeekMthQtYr::Unlimited) ||
                (_intervalType == this.IntervalType && _qty == this.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstUnlimited</Name>
				<Source><![CDATA[
    public boolean isFirstUnlimited()
    {
        return this.Qty < 0 && this.IntervalType == PerDayWeekMthQtYr::Unlimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastUnlimited</Name>
				<Source><![CDATA[
    public boolean isLastUnlimited()
    {
        return this.Qty > 0 && this.IntervalType == PerDayWeekMthQtYr::Unlimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    StatRepIntervalLine moveDown()
    {
        StatRepIntervalLine     nextColumn;
        StatRepIntervalLine     tmpColumn;
        StatRepIntervalLine     thisColumn = this;

        if (this.canMoveDown())
        {
            ttsbegin;

            nextColumn = this.nextColumn(true);

            if (!this.selectForUpdate())
            {
                thisColumn = StatRepIntervalLine::findColumn(this.Name, this.LineNum ,true);
            }

            // Swich the two columns
            this.switchColumns(nextColumn, thisColumn);

            // Set line number to 0 for 'thisColumn' to avoid dubb idx.
            this.switchColumns(tmpColumn, thisColumn);
            thisColumn.update();

            nextColumn.update();

            // Set 'thisColmn' back to it's original value.
            this.switchColumns(tmpColumn, thisColumn);
            thisColumn.update();

            ttscommit;
        }

        return thisColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    StatRepIntervalLine moveUp()
    {
        StatRepIntervalLine     previousColumn;
        StatRepIntervalLine     tmpColumn;
        StatRepIntervalLine     thisColumn = this;

        if (this.canMoveUp())
        {
            ttsbegin;

            previousColumn  = this.prevColumn(true);

            if (!this.selectForUpdate())
            {
                thisColumn = StatRepIntervalLine::findColumn(this.Name, this.LineNum, true);
            }
            // Swich the two columns
            this.switchColumns(previousColumn, thisColumn);

            // Set line number to 0 for 'thisColumn' to avoid dubb idx.
            this.switchColumns(tmpColumn, thisColumn);
            thisColumn.update();

            previousColumn.update();

            // Set 'thisColmn' back to it's original value.
            this.switchColumns(tmpColumn, thisColumn);
            thisColumn.update();
            ttscommit;
        }

        return thisColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextColumn</Name>
				<Source><![CDATA[
    public StatRepIntervalLine nextColumn(boolean    _forUpdate = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        statRepIntervalLine.selectForUpdate(_forUpdate);

        select forupdate statRepIntervalLine
            order by LineNum
            where statRepIntervalLine.Name     == this.Name
               && statRepIntervalLine.LineNum   >  this.LineNum;

        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevColumn</Name>
				<Source><![CDATA[
    public StatRepIntervalLine prevColumn(boolean    _forUpdate = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        statRepIntervalLine.selectForUpdate(_forUpdate);

        select forupdate statRepIntervalLine
            order by LineNum desc
            where statRepIntervalLine.Name     == this.Name
               && statRepIntervalLine.LineNum   <  this.LineNum;

        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDate</Name>
				<Source><![CDATA[
    TransDate startDate(TransDate initDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Futures                 futures;
        recId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        switch (this.IntervalType)
        {
            case PerDayWeekMthQtYr::Period:
                return LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId,initDate,this.Qty+1);
            case PerDayWeekMthQtYr::Day :
                futures = Futures::construct(initDate,
                                     (this.Qty+1),
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Week:
                futures = Futures::construct(DateTimeUtil::getStartOfWeekDate(new Session().preferredLocale(), initDate),
                                     (this.Qty   * 7 +7),
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Month:
                futures = Futures::construct(dateStartMth(initDate),
                                     (this.Qty+1),
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Quarter:
                futures = Futures::construct(dateStartQtr(initDate),
                                     (this.Qty * 3 +3),
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Year:
                futures = Futures::construct(DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), initDate),
                                     (this.Qty+1),
                                     PeriodUnit::Year);
                return futures.next();
            case PerDayWeekMthQtYr::Unlimited:
                return dateNull();
        }
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchColumns</Name>
				<Source><![CDATA[
    private void switchColumns(
        StatRepIntervalLine     _line1,
        StatRepIntervalLine     _line2)
    {
        LineNum saveLineNum;

        saveLineNum = _line1.LineNum;

        _line1.LineNum = _line2.LineNum;
        _line2.LineNum  = saveLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        StatRepIntervalLine statRepIntervalLineZero;

        statRepIntervalLineZero = StatRepIntervalLine::findZeroColumn(this.Name);

        ret = super();

        if (this.RecId == statRepIntervalLineZero.RecId)
        {
            ret = checkFailed("@SYS78374");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                 ret;
        StatRepIntervalLine     statRepZeroColumn;

        ret = super(_fieldIdToCheck);
        switch (_fieldIdToCheck)
        {
            case fieldNum(StatRepIntervalLine, Qty):
                statRepZeroColumn = StatRepIntervalLine::findZeroColumn(this.Name);
                if (statRepZeroColumn.RecId)
                {
                    if (this.RecId == statRepZeroColumn.RecId && this.Qty != 0)
                    {
                        ret = checkFailed("@SYS78478");
                    }

                    if ((this.LineNum > statRepZeroColumn.LineNum) && this.Qty < 0)
                    {
                        ret = checkFailed("@SYS89706");
                    }

                    if ((this.LineNum < statRepZeroColumn.LineNum) && this.Qty > 0)
                    {
                        ret = checkFailed("@SYS89707");
                    }
                }
                else if (this.Qty != 0)
                {
                    ret = checkFailed("@SYS78477");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        StatRepIntervalLine statRepIntervalLineZero;

        statRepIntervalLineZero = StatRepIntervalLine::findZeroColumn(this.Name);

        ret = super();

        if (this.Qty == 0)
        {
            if (statRepIntervalLineZero && statRepIntervalLineZero.RecId != this.RecId)
            {
                ret = checkFailed("@SYS78383");
            }

            if (this.IntervalType == PerDayWeekMthQtYr::Unlimited &&
                   StatRepIntervalLine::findColumnLess(this.Name, this.LineNum) &&
                    StatRepIntervalLine::findColumnLarger(this.Name, this.LineNum))
            {
                ret = checkFailed("@SYS78476");
            }
        }
        else
        {
            if (this.IntervalType == PerDayWeekMthQtYr::Unlimited)
            {
                if (this.Qty < 0 && StatRepIntervalLine::findColumnLess(this.Name, this.LineNum, this.orig().LineNum))
                {
                    ret = checkFailed("@SYS78476");
                }
                if (this.Qty > 0 && StatRepIntervalLine::findColumnLarger(this.Name, this.LineNum, this.orig().LineNum))
                {
                    ret = checkFailed("@SYS78476");
                }
            }
            else
            {
                if (this.Qty < 0 && StatRepIntervalLine::findColumnLargerUnlimited(this.Name, this.LineNum))
                {
                    ret = checkFailed("@SYS78476");
                }
                if (this.Qty > 0 && StatRepIntervalLine::findColumnLessUnlimited(this.Name, this.LineNum))
                {
                    ret = checkFailed("@SYS78476");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroEndDate</Name>
				<Source><![CDATA[
    TransDate zeroEndDate(TransDate initDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Futures                 futures;
        recId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        switch (this.IntervalType)
        {
            case PerDayWeekMthQtYr::Period:
                return  LedgerFiscalCalendar::findPeriodEndDateByDateWithIndex(calendarRecId,initDate, this.Qty);

            case PerDayWeekMthQtYr::Day :
                futures = Futures::construct(initDate,
                                     this.Qty,
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Week:
                futures = Futures::construct(DateTimeUtil::getEndOfWeekDate(new Session().preferredLocale(), initDate),
                                     this.Qty   * 7,
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Month:
                futures = Futures::construct(dateEndMth(initDate),
                                     this.Qty,
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Quarter:
                futures = Futures::construct(dateEndQtr(initDate),
                                     this.Qty   * 3,
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Year:
                futures = Futures::construct(DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), initDate),
                                     this.Qty,
                                     PeriodUnit::Year);
                return futures.next();
            case PerDayWeekMthQtYr::Unlimited:
                if (StatRepIntervalLine::findColumnLarger(this.Name, this.LineNum))
                {
                    return initDate;
                }
                else
                {
                    return dateMax();
                }
        }
        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroStartDate</Name>
				<Source><![CDATA[
    TransDate zeroStartDate(TransDate initDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Futures                 futures;
        recId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        switch (this.IntervalType)
        {
            case PerDayWeekMthQtYr::Period:
                return LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId,initDate,this.Qty);
            case PerDayWeekMthQtYr::Day :
                futures = Futures::construct(initDate,
                                     (this.Qty),
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Week:
                futures = Futures::construct(DateTimeUtil::getStartOfWeekDate(new Session().preferredLocale(), initDate),
                                     (this.Qty)   * 7,
                                     PeriodUnit::Day);
                return futures.next();
            case PerDayWeekMthQtYr::Month:
                futures = Futures::construct(dateStartMth(initDate),
                                     (this.Qty),
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Quarter:
                futures = Futures::construct(dateStartQtr(initDate),
                                     (this.Qty)   * 3,
                                     PeriodUnit::Month);
                return futures.next();
            case PerDayWeekMthQtYr::Year:
                futures = Futures::construct(DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), initDate),
                                     (this.Qty),
                                     PeriodUnit::Year);
                return futures.next();
            case PerDayWeekMthQtYr::Unlimited:
                if (StatRepIntervalLine::findColumnLess(this.Name, this.LineNum))
                {
                    return initDate;
                }
                else
                {
                    return dateNull();
                }
        }
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(recId _recId )
    {
        boolean ret = true;

        if (!StatRepIntervalLine::exist(_recId))
        {
            ret = checkFailed(strFmt(StatRepIntervalLine::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDateUnlimited</Name>
				<Source><![CDATA[
    static TransDate endDateUnlimited(StatRepIntervalLine _statRepIntervalLine)
    {
        StatRepIntervalLine statRepIntervalLineLocal= StatRepIntervalLine::findColumnLarger(_statRepIntervalLine.Name,
                                                                                            _statRepIntervalLine.LineNum);
        if (!statRepIntervalLineLocal)
        {
            return dateMax();
        }
        return statRepIntervalLineLocal.startDate() -1 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(recId _recId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     statRepIntervalLine
                 where
                     statRepIntervalLine.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static StatRepIntervalLine find(
        recId _recId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        StatRepIntervalLine statRepIntervalLine;

        statRepIntervalLine.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            statRepIntervalLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            statRepIntervalLine
            where
            statRepIntervalLine.RecId == _recId;

        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findColumn</Name>
				<Source><![CDATA[
    static StatRepIntervalLine findColumn(Name     _name,
                                          LineNum  _lineNum,
                                          boolean  _forUpdate = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        if (_lineNum)
        {
            statRepIntervalLine.selectForUpdate(_forUpdate);

            select firstonly statRepIntervalLine
                where statRepIntervalLine.Name      == _name &&
                      statRepIntervalLine.LineNum   == _lineNum;
        }
        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findColumnLarger</Name>
				<Source><![CDATA[
    static StatRepIntervalLine findColumnLarger(Name     _name,
                                                LineNum  _lineNum,
                                                LineNum  _lineNumOrig   = _lineNum,
                                                boolean  _forUpdate     = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        if (_name &&_lineNum && _lineNumOrig)
        {
            statRepIntervalLine.selectForUpdate(_forUpdate);

            select firstonly statRepIntervalLine
            order by LineNum
                where statRepIntervalLine.Name      == _name
                &&    statRepIntervalLine.LineNum   >  _lineNum
                &&    statRepIntervalLine.LineNum   != _lineNumOrig;
        }
        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findColumnLargerUnlimited</Name>
				<Source><![CDATA[
    static StatRepIntervalLine findColumnLargerUnlimited(Name     _name,
                                                         LineNum  _lineNum,
                                                         boolean  _forUpdate = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        if (_name &&_lineNum)
        {
            statRepIntervalLine.selectForUpdate(_forUpdate);

            select firstonly statRepIntervalLine
            order by LineNum
                where statRepIntervalLine.Name              == _name
                &&    statRepIntervalLine.LineNum           > _lineNum
                &&    statRepIntervalLine.Qty               <  0
                &&      statRepIntervalLine.IntervalType    == PerDayWeekMthQtYr::Unlimited;
        }
        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findColumnLess</Name>
				<Source><![CDATA[
    static StatRepIntervalLine findColumnLess(Name     _name,
                                              LineNum  _lineNum,
                                              LineNum  _lineNumOrig     = _lineNum,
                                              boolean  _forUpdate       = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        if (_name &&_lineNum && _lineNumOrig)
        {
            statRepIntervalLine.selectForUpdate(_forUpdate);

            select firstonly statRepIntervalLine
            order by LineNum desc
                where statRepIntervalLine.Name      == _name
                &&    statRepIntervalLine.LineNum   <  _lineNum
                &&    statRepIntervalLine.LineNum   != _lineNumOrig;
        }
        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findColumnLessUnlimited</Name>
				<Source><![CDATA[
    static StatRepIntervalLine findColumnLessUnlimited(Name     _name,
                                                       LineNum  _lineNum,
                                                       boolean  _forUpdate = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        if (_name &&_lineNum)
        {
            statRepIntervalLine.selectForUpdate(_forUpdate);

            select firstonly statRepIntervalLine
            order by LineNum desc
                where statRepIntervalLine.Name          == _name
                &&    statRepIntervalLine.LineNum       <  _lineNum
                &&    statRepIntervalLine.Qty           >  0
                &&    statRepIntervalLine.IntervalType  == PerDayWeekMthQtYr::Unlimited;
        }
        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findZeroColumn</Name>
				<Source><![CDATA[
    static StatRepIntervalLine findZeroColumn(Name     _name,
                                              boolean  _forUpdate = false)
    {
        StatRepIntervalLine statRepIntervalLine;

        if (_name)
        {
            statRepIntervalLine.selectForUpdate(_forUpdate);

            select firstonly statRepIntervalLine
                where statRepIntervalLine.Name   == _name
                &&    statRepIntervalLine.Qty    == 0;
        }
        return statRepIntervalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceIdForAgingIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the resource ID of the icon that is used to represent the specified aging indicator.
    /// </summary>
    /// <param name="_agingIndicator">
    ///    The aging indicator.
    /// </param>
    /// <returns>
    ///    The resource ID of the icon that is used to represent the specified aging indicator; otherwise,
    ///    65535 for the <c>None</c> enumeration value of the <c>CustAgingIndicator</c> enumeration type.
    /// </returns>
    public static str getResourceIdForAgingIndicator(CustAgingIndicator _agingIndicator)
    {
        #ResAppl
        str resourceId = '';

        switch (_agingIndicator)
        {
            case CustAgingIndicator::None:
                resourceId = '';
                break;

            case CustAgingIndicator::GreenCircle:
                resourceId = #GreenCircle;
                break;

            case CustAgingIndicator::GreenCheck:
                resourceId = #GreenCheck;
                break;

            case CustAgingIndicator::YellowTriangle:
                resourceId = #YellowTriangle;
                break;

            case CustAgingIndicator::YellowExclamationPoint:
                resourceId = #YellowExclamationPoint;
                break;

            case CustAgingIndicator::RedDiamond:
                resourceId = #RedDiamond;
                break;

            case CustAgingIndicator::RedX:
                resourceId = #RedX;
                break;

            case CustAgingIndicator::Color1:
                resourceId = #BlueSquare;
                break;

            case CustAgingIndicator::Color2:
                resourceId = #RedSquare;
                break;

            case CustAgingIndicator::Color3:
                resourceId = #GreenSquare;
                break;

            case CustAgingIndicator::Color4:
                resourceId = #DarkGraySquare;
                break;

            case CustAgingIndicator::Color5:
                resourceId = #OrangeSquare;
                break;

            case CustAgingIndicator::Color6:
                resourceId = #YellowSquare;
                break;

            default:
                resourceId = '';
                break;
        }

        return resourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an aging period line for an existing aging period definition.
    /// </summary>
    /// <param name = "_agingPeriodDefinitionName">An existing aging period definition.</param>
    /// <param name = "_lineNum">The sequential line number.</param>
    /// <param name = "_name">The optional name of the line.</param>
    /// <param name = "_quantity">The quantity of time used in conjunction with the _intervalType parameter.</param>
    /// <param name = "_intervaltype">The type of interval used in conjuction with the _quantity parameter.</param>
    /// <param name = "_agingIndicator">The aging indicator icon that represents the aging period.</param>
    /// <remarks>This assumes the aging period definition exists.</remarks>
    public static void createLine(
        CustVendReportName _agingPeriodDefinitionName,
        LineNum _lineNum,
        StatRepIntervalLineHeading _name,
        TimeUnits _quantity,
        PerDayWeekMthQtYr _intervaltype,
        CustAgingIndicator _agingIndicator)
    {
        StatRepIntervalLine periodLines;

        Debug::assert(StatRepInterval::exist(_agingPeriodDefinitionName));

        periodLines.Name = _agingPeriodDefinitionName;
        periodLines.LineNum = _lineNum;
        periodLines.Heading = _name;
        periodLines.Qty = _quantity;
        periodLines.IntervalType = _intervaltype;
        periodLines.AgingIndicator = _agingIndicator;
        periodLines.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countLines</Name>
				<Source><![CDATA[
    public static int countLines(CustVendReportName _agingPeriodDefinition)
    {
        StatRepIntervalLine intervalLines;
        select count(RecId) from intervalLines
            group by Name
            where intervalLines.Name == _agingPeriodDefinition;

        return int642int(intervalLines.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countLinesInCompany</Name>
				<Source><![CDATA[
    public static int countLinesInCompany(CustVendReportName _agingPeriodDefinition, SelectableDataArea _company)
    {
        StatRepIntervalLine intervalLines;
        select crosscompany count(RecId) from intervalLines
            group by Name
            where intervalLines.Name == _agingPeriodDefinition &&
                  intervalLines.DataAreaId == _company;

        return int642int(intervalLines.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS127063</DeveloperDocumentation>
	<FormRef>custvendreportInterval</FormRef>
	<Label>@SYS28054</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Heading</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NameLineIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<OccEnabled>No</OccEnabled>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NameLineIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Heading</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntervalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Definition</Name>
			<Label>@SYS3242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Heading</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntervalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgingIndicator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgingIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Collections</ConfigurationKey>
			<EnumType>CustAgingIndicator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Heading</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StatRepIntervalLineHeading</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntervalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS12899</Label>
			<EnumType>PerDayWeekMthQtYr</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@SYS5771</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendReportName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Qty</Name>
			<ExtendedDataType>TimeUnits</ExtendedDataType>
			<Label>@SYS11959</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustVendRepInterval</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127061</EntityRelationshipRole>
			<RelatedTable>StatRepInterval</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustVendRepInterval</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>StatRepIntervalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Name</Name>
					<SourceEDT>CustVendReportName</SourceEDT>
					<Field>Name</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StatRepIntervalLineSelf</Name>
			<RelatedTable>StatRepIntervalLine</RelatedTable>
			<RelatedTableRole>StatRepIntervalLineSelf</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>StatRepIntervalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Heading</Name>
					<Field>Heading</Field>
					<RelatedField>Heading</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>