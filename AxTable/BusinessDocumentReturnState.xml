<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentReturnState</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics365.LocalizationFramework;
using System.Collections;

public class BusinessDocumentReturnState extends common
{

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method finds the record by the document type and return outgoing type name.
    /// </summary>
    /// <param name = "_businessDocumentType">The document type table reference.</param>
    /// <param name = "_returnTypeName">The return outgoing type name.</param>
    /// <param name = "_forUpdate">The flag specifying if the record should be selected for update.</param>
    /// <returns>The found record.</returns>
    public static BusinessDocumentReturnState find(
        RefRecId _businessDocumentType, 
        BusinessDocumentResponseState _returnTypeName,
        boolean _forUpdate = false)
    {
        BusinessDocumentReturnState businessDocumentReturnState;

        businessDocumentReturnState.selectForUpdate(_forUpdate);

        select firstonly businessDocumentReturnState
            where businessDocumentReturnState.BusinessDocumentTypes == _businessDocumentType
                && businessDocumentReturnState.ReturnTypeName == _returnTypeName;

        return businessDocumentReturnState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDataEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The edit method checks the existence of the specified data entity and updates the field appropriately.
    /// </summary>
    /// <param name = "_set">A flag specifying if a new value is being set.</param>
    /// <param name = "_businessDocumentReturnState">The current record being edited.</param>
    /// <param name = "_dataEntityName">The data entity name.</param>
    /// <returns>The data entity name.</returns>
    public edit DataEntityName editDataEntityName(
        boolean _set,
        BusinessDocumentReturnState _businessDocumentReturnState,
        DataEntityName _dataEntityName)
    {
        AxDataEntityView dataEntityView;
        Label label = new Label(infolog.language());

        if (_set)
        {
            dataEntityView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetDataEntityView(_dataEntityName) 
                as AxDataEntityView;

            _businessDocumentReturnState.DataEntityName = dataEntityView ? _dataEntityName : '';
        }
        else
        {
            dataEntityView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetDataEntityView(_businessDocumentReturnState.DataEntityName)
                as AxDataEntityView;
        }
       
        return dataEntityView ? 
            (dataEntityView.Label ? 
                label.extractString(dataEntityView.Label) :
                dataEntityView.Name) :
            '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>businessDocumentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the parent <c>BusinessDocumentTypes</c> record.
    /// </summary>
    /// <returns>The parent <c>BusinessDocumentTypes</c> record.</returns>
    public BusinessDocumentTypes businessDocumentTypes()
    {
        BusinessDocumentTypes businessDocumentTypes;

        select firstonly businessDocumentTypes 
            where businessDocumentTypes.RecId == this.BusinessDocumentTypes;

        return businessDocumentTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runERImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method performs return data import and updates the data model. 
    /// </summary>
    /// <param name = "_document">The electronic document to be updated.</param>
    /// <param name = "_stream">The input stream for import.</param>
    public void runERImport(Common _document, System.IO.Stream _stream)
    {
        const str recIdField = 'RecId';
        str integrationPoint = classStr(ERTableDestination) + '#' +
            (this.DataEntityName ?
            this.DataEntityName :
            this.businessDocumentTypes().TableName);
        
        ERIModelMappingDestinationRun runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(
            this.ERModelMappingTable, 
            integrationPoint, 
            false, 
            false, 
            false)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addValue(
                    _document.TableId, 
                    fieldName2Id(_document.TableId, recIdField), 
                    _document.RecId));

        runner.init();

        ERModelDefinitionParameters parameters = runner.getParameters();
        ERModelDefinitionParametersTraverser traverser = new ERModelDefinitionParametersTraverser(parameters);

        while (traverser.moveNext())
        {
            ERIImportFormatDataSourceContract current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;
            if (current)
            {
                current.parmInputDataStream(_stream);
                break;
            }
        }

        ERIRunResult result = runner.runUnattendedAndReturnResult();
        container log = 
            BusinessDocumentReturnState::getLogFromErrorCollection(result.SolutionErrors) +
            BusinessDocumentReturnState::getLogFromErrorCollection(result.ValidationErrors);

        ttsbegin;
            
        BusinessDocumentSubmission submission = BusinessDocumentSubmission::findByCommon(_document, true);
        if (submission)
        {
            boolean changed; 
            
            if (log != conNull())
            {
                submission.Log += log;
                changed = true;
            }

            if (!result.IsSuccess())
            {
                submission.ErrorMsg = "@AccountsPayable:ImportFailures";
                changed = true;
            }
            
            if (changed)
            {
                submission.update();
            }
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogFromErrorCollection</Name>
				<Source><![CDATA[
    private static container getLogFromErrorCollection(IEnumerable _errors)
    {
        container log;

        if (_errors)
        {
            IEnumerator enumerator = _errors.GetEnumerator();
        
            while (enumerator.MoveNext())
            {
                ERIRuntimeError error = enumerator.Current;
                log += [ error.Message ];
            }
        }
 
        return log;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@BusinessDocumentSubmissionService:ResponseStateDocumentStatusDevDoc</DeveloperDocumentation>
	<Label>@BusinessDocumentSubmissionService:ResponseStateDocumentStatus</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>ReturnTypeName</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ReturnTypeNameIdx</ClusteredIndex>
	<Modules>NotApplicable</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnTypeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnType</Name>
			<Label>@BusinessDocumentSubmissionService:ResponseState</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataEntityName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ERModelMappingTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnTypeName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BusinessDocumentResponseState</ExtendedDataType>
			<Label>@BusinessDocumentSubmissionService:ResponseState</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentState</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>BusinessDocumentState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataEntityName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DataEntityName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ERModelMappingTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ERModelMappingId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BusinessDocumentTypes</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReturnTypeNameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>BusinessDocumentTypes</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentState</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnTypeName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BusinessDocumentTypes</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BusinessDocumentTypes</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessDocumentTypes</Name>
					<Field>BusinessDocumentTypes</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ERModelMappingTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ERModelMappingTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ERModelMappingTable</Name>
					<Field>ERModelMappingTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>