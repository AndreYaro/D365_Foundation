<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedContabilAccountTree_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBSpedContabilAccountTree_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccountTree</Name>
				<Source><![CDATA[
    private static int createAccountTree(MainAccount _mainAccount, int _accountIndex)
    {
        MainAccount                     childMainAccount;
        FBSpedContabilAccountTree_BR    spedContabilAccountStructure;

        spedContabilAccountStructure.AccountCode        = _mainAccount.MainAccountId;
        spedContabilAccountStructure.AccountDescription = _mainAccount.Name;
        spedContabilAccountStructure.AccountLevel       = _mainAccount.getAccountLevel();
        spedContabilAccountStructure.LeftValue          = _accountIndex;
        spedContabilAccountStructure.AccountType        = _mainAccount.getType();

        if (_mainAccount.hasChildAccount())
        {
            spedContabilAccountStructure.IsAgglutinationAccount = NoYes::Yes;
        }
        else
        {
            spedContabilAccountStructure.IsAgglutinationAccount = NoYes::No;
        }

        _accountIndex++;

        while select childMainAccount
            order by childMainAccount.MainAccountId
            where   childMainAccount.ParentMainAccount      == _mainAccount.RecId
                &&  childMainAccount.LedgerChartOfAccounts  == Ledger::chartOfAccounts()
        {
            _accountIndex = FBSpedContabilAccountTree_BR::createAccountTree(childMainAccount, _accountIndex);
        }

        spedContabilAccountStructure.RightValue         = _accountIndex;
        spedContabilAccountStructure.doInsert();

        _accountIndex++;

        return _accountIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the node that represents a main account in the account structure tree.
    /// </summary>
    /// <param name="_mainAccountNum">
    /// The main account number.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the record will allow updates.
    /// </param>
    /// <returns>
    /// The node that represents a main account in the account structure tree.
    /// </returns>
    public static FBSpedContabilAccountTree_BR find(MainAccountNum _mainAccountNum, boolean _forUpdate = false)
    {
        FBSpedContabilAccountTree_BR    spedContabilAccountTree;

        if (_mainAccountNum)
        {
            spedContabilAccountTree.selectForUpdate(_forUpdate);

            select firstonly spedContabilAccountTree
                where spedContabilAccountTree.AccountCode == _mainAccountNum;
        }

        return spedContabilAccountTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the account structure according to the parent-child relationship among the accounts.
    /// </summary>
    public static void populate()
    {
        FBSpedContabilAccountTree_BR    fbSpedContabilAccountTree;
        MainAccount                     mainAccount;
        int                             accountIndex = 1;

        delete_from fbSpedContabilAccountTree;

        while select mainAccount
            order by mainAccount.MainAccountId
            where   mainAccount.ParentMainAccount       == 0
                &&  mainAccount.LedgerChartOfAccounts   == Ledger::chartOfAccounts()
        {
            accountIndex = FBSpedContabilAccountTree_BR::createAccountTree(mainAccount, accountIndex);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@FBK209</DeveloperDocumentation>
	<Visible>No</Visible>
	<Modules>FiscalBooksBrazil</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AccountLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DimensionLedgerAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndingBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAgglutinationAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeftValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OpeningBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousEndingBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RightValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>