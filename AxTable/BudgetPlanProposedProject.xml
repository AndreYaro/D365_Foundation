<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanProposedProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanProposedProject extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(BudgetPlanProposedProjectRecId _budgetPlanProposedProjectRecId)
    {
        boolean doesExist = true;

        if (!BudgetPlanProposedProject::exist(_budgetPlanProposedProjectRecId))
        {
            doesExist = checkFailed(strFmt(BudgetPlanProposedProject::txtNotExist(), _budgetPlanProposedProjectRecId));
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetPlanProposedProject</c> table exists.
    /// </summary>
    /// <param name="_budgetPlanProposedProjectRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanProposedProjectRecId _budgetPlanProposedProjectRecId)
    {
        boolean found;

        found = (select firstonly RecId from budgetPlanProposedProject
                    where budgetPlanProposedProject.RecId == _budgetPlanProposedProjectRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanProposedProject</c> table.
    /// </summary>
    /// <param name='_budgetPlanProposedProjectRecId'>
    /// The record ID of the <c>BudgetPlanProposedProject</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanProposedProject</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanProposedProject find(
        BudgetPlanProposedProjectRecId _budgetPlanProposedProjectRecId,
        boolean                        _forUpdate = false,
        ConcurrencyModel               _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanProposedProject budgetPlanProposedProject;

        if (_budgetPlanProposedProjectRecId)
        {
            budgetPlanProposedProject.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                 budgetPlanProposedProject.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanProposedProject
                where budgetPlanProposedProject.RecId == _budgetPlanProposedProjectRecId;
        }

        return budgetPlanProposedProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanProposedAsset</c> table.
    /// </summary>
    /// <param name='_budgetPlanProposedProjectName'>
    /// The name of the <c>BudgetPlanProposedAsset</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanProposedAsset</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanProposedProject findByName(
        Name                _budgetPlanProposedProjectName,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanProposedProject budgetPlanProposedProject;

        if (_budgetPlanProposedProjectName)
        {
            budgetPlanProposedProject.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                 budgetPlanProposedProject.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanProposedProject
                where budgetPlanProposedProject.Name == _budgetPlanProposedProjectName;
        }

        return budgetPlanProposedProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS150282</DeveloperDocumentation>
	<FormRef>BudgetPlanAttributes</FormRef>
	<Label>@GLS150299</Label>
	<SingularLabel>@GLS150298</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetPlanProposedProjectIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS312922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@GLS150290</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanProposedProjectIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>