<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetStandards</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetStandards extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetDeprInterval</Name>
				<Source><![CDATA[
    public RAssetDeprInterval assetDeprInterval(RAssetTransDate _transDate = dateNull())
    {
        return this.deprProfile(_transDate).DeprInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetDeprMethod</Name>
				<Source><![CDATA[
    public RAssetDeprMethod assetDeprMethod(RAssetTransDate   _transDate = dateNull())
    {
        return this.deprProfile(_transDate).DeprMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetGroup</Name>
				<Source><![CDATA[
    public RAssetGroup assetGroup()
    {
        return RAssetGroup::find(this.AssetGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetGroupName</Name>
				<Source><![CDATA[
    public display RAssetGroupName assetGroupName()
    {
        return RAssetGroup::find(this.AssetGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns ledger dimension account for current asset value model
    /// </summary>
    /// <param name="_assetStandardId">
    /// the asset value model
    /// </param>
    /// <param name="_assetPostingProfile">
    /// the posting profile of asset value model
    /// </param>
    /// <param name="_assetTransType">
    /// the transaction type which is used to select ledger account from the posting profile
    /// </param>
    /// <returns>
    /// ledger dimension account for current asset value model
    /// </returns>
    //BP Deviation documented
    public display LedgerDimensionDefaultAccount assetLedgerDimension(RAssetStandardId _assetStandardId = '',
        RAssetPostingProfile _assetPostingProfile = RAssetParameters::find().PostingProfile,
        RAssetTransType _assetTransType = RAssetTransType::Depreciation)
    {
        return RAssetLedgerAccounts::assetLedgerDimension(this.AssetId, _assetTransType, _assetStandardId, _assetPostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetName</Name>
				<Source><![CDATA[
    public display RAssetName assetName()
    {
        return RAssetTable::find(this.AssetId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns offset ledger dimension account for current asset value model
    /// </summary>
    /// <param name="_assetStandardId">
    /// the asset value model
    /// </param>
    /// <param name="_assetPostingProfile">
    /// the posting profile of asset value model
    /// </param>
    /// <param name="_assetTransType">
    /// the transaction type which is used to select ledger account from the posting profile
    /// </param>
    /// <param name="_assetTransDate">
    /// the transaction date which is used to select ledger account from the posting profile
    /// </param>
    /// <returns>
    /// offset ledger dimension account for current asset value model
    /// </returns>
    //BP Deviation documented
    public display LedgerDimensionDefaultAccount assetOffsetLedgerDimension(RAssetStandardId _assetStandardId = '',
        RAssetPostingProfile _assetPostingProfile = RAssetParameters::find().PostingProfile,
        RAssetTransType _assetTransType = RAssetTransType::Depreciation,
        RAssetTransDate _assetTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        RAssetInitDepStartDate initDepStartDate = RAssetGroup::find(this.AssetGroup).InitDepStartDate;

        if (_assetTransType == RAssetTransType::Depreciation)
        {
            RAssetTableInterval assetTableInterval = RAssetTableInterval::construct(this, _assetTransDate);
            
            RAssetTransDate assetStartDateInterval;
            if (initDepStartDate == RAssetInitDepStartDate::AcquisitionMonth
                || initDepStartDate == RAssetInitDepStartDate::RegistrationDate
                || initDepStartDate == RAssetInitDepStartDate::AcquisitionDate)
            {
                assetStartDateInterval = _assetTransDate + 1;
            }
            else
            {
                assetStartDateInterval = assetTableInterval.getStartDate(_assetTransDate);
            }

            RAssetLending assetlending = RAssetLending::findLent(this.AssetId, assetStartDateInterval);

            if (! assetlending)
            {
                RAssetLocationId assetLocation = RAssetMoveHist::findLastOperation(this.AssetId,
                    RAssetMoveType::Transfer,
                    NoYes::No,
                    assetStartDateInterval - 1).NewLocation;

                if (assetLocation)
                {
                    ledgerDimension = RAssetLedgerAccountsByLocation::assetLedgerDimension(this.AssetId, assetLocation, _assetStandardId);
                }
            }
        }

        if (! ledgerDimension)
        {
            ledgerDimension = RAssetLedgerAccounts::assetOffsetLedgerDimension(this.AssetId,
                _assetTransType,
                _assetStandardId,
                _assetPostingProfile);
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetPostingProfileName</Name>
				<Source><![CDATA[
    public display RAssetPostingProfileName assetPostingProfileName()
    {
        return RAssetLedger::find(this.PostingProfile).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetStandardName</Name>
				<Source><![CDATA[
    public display RAssetStandardName assetStandardName()
    {
        return RAssetStandardTable::find(this.AssetStandardId).AssetStandardName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeprPeriod</Name>
				<Source><![CDATA[
    public boolean checkDeprPeriod(TransDate _transDate, boolean _checkPrevPeriod = false)
    {
        boolean ret  = true;

        RAssetTransDate nextDeprDate;
        TransDate disposalDate = _transDate;

        if (RAssetTable::find(this.AssetId).AssetType != RAssetType::Land
            || !(this.assetDeprMethod(_transDate) == RAssetDeprMethod::Value
                && RAssetUse::findMth(this.AssetId, _transDate).RecId
                && !RAssetUse::mthValue(this.AssetId, _transDate)))
        {
            if (_checkPrevPeriod)
            {
                disposalDate = prevMth(disposalDate);
            }

            while (disposalDate)
            {
                RAssetSuspend assetSuspend = RAssetSuspend::findSuspend(this.AssetId, disposalDate);
                if (assetSuspend)
                {
                    disposalDate = prevMth(assetSuspend.SuspendStart);
                }
                else
                {
                    break;
                }
            }

            if (this.LastDepDate)
            {
                nextDeprDate = endmth(this.LastDepDate);
            }
            else
            {
                nextDeprDate = endmth(this.puttingIntoOperationDate());
            }

            if (nextDeprDate < endmth(disposalDate))
            {
                ret = checkFailed(strFmt("@GLS116511", this.AssetId, this.AssetStandardId));
            }

            if (ret 
                && this.LastDepDate
                && this.LastDepDate != disposalDate
                && this.assetGroup().InitDepStartDate == RAssetInitDepStartDate::AcquisitionDate)
            {
                ret = checkFailed(strFmt(
                    "@ApplicationSuite_Localization:MessageError_LastDepreciationDateIsNotTheSameAsSalesDate",
                    this.LastDepDate,
                    disposalDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costLimit</Name>
				<Source><![CDATA[
    public RAssetCostLimit costLimit(TransDate _transDate)
    {
        RAssetCostLimit ret = 0;

        if (this.isNonLinearDeprMethod(_transDate))
        {
            ret = this.deprProfile(_transDate).CostLimit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns the merged financial dimension specified in asset value model line and in the method parameter
    /// </summary>
    /// <param name="_transDate">
    /// the date which is used to read dimension from lending history
    /// </param>
    /// <param name="_defaultDimension">
    /// the dimension which is merged with the value model dimension
    /// </param>
    /// <returns>
    /// the merged financial dimension
    /// </returns>
    public DimensionDefault defaultDimension(TransDate _transDate, DimensionDefault _defaultDimension = 0)
    {
        RAssetLending assetlending = RAssetLending::findLent(this.AssetId, _transDate);
        RAssetStandardTable assetStandardTable = RAssetStandardTable::find(this.AssetStandardId);
        RAssetParameters assetParameters = RAssetParameters::find();
        DimensionDefault defaultDimension = _defaultDimension;

        if (assetlending)
        {
            defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, this.LendingDefaultDimension);
        }

        defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, this.DefaultDimension, assetStandardTable.DefaultDimension, assetParameters.DefaultDimension);

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RAssetMoveHist assetMoveHist, rAssetMoveHistIssued;
        RAssetMoveStandard assetMoveStandard;
        RAssetStandards rassetStandardsLocal;
        RAssetSumCalc assetSumCalc;

        RAssetStatusType assetStatusType = RAssetStatusType::construct(RAssetTable::find(this.AssetId));

        ttsbegin;

        RAssetTable assetTable = RAssetTable::find(this.AssetId, true);

        select firstonly forupdate assetMoveHist
            where (assetMoveHist.MoveType == RAssetMoveType::CompanyIssue
                    || assetMoveHist.MoveType == RAssetMoveType::CompanyReceipt)
                && assetMoveHist.AccountNum == this.AssetId
                && assetMoveHist.Posted == NoYes::No;

        if (assetMoveHist.RecId)
        {
            assetMoveHist.updateMoveStandard();

            delete_from assetMoveStandard
                where assetMoveStandard.RefTableId == assetMoveHist.TableId
                    && assetMoveStandard.RefRecId == assetMoveHist.RecId
                    && assetMoveStandard.rAssetStandardId == this.AssetStandardId;

            select firstonly assetMoveStandard
                where assetMoveStandard.RefTableId == assetMoveHist.TableId
                    && assetMoveStandard.RefRecId == assetMoveHist.RecId;

            if (assetMoveStandard.RecId)
            {
                select firstonly assetMoveStandard
                    where assetMoveStandard.RefTableId == assetMoveHist.TableId
                        && assetMoveStandard.RefRecId == assetMoveHist.RecId
                        && assetMoveStandard.Posted == NoYes::No;

                if (!assetMoveStandard.RecId)
                {
                    assetMoveHist.Posted = NoYes::Yes;
                    assetMoveHist.update();

                    if (assetMoveHist.MoveType == RAssetMoveType::CompanyReceipt
                        && assetStatusType.allowCompanyReceipt())
                    {
                        while select rassetStandardsLocal
                            where rassetStandardsLocal.AssetId == this.AssetId
                                && rassetStandardsLocal.AssetStandardId != this.AssetStandardId
                        {
                            assetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(rassetStandardsLocal.AssetId, rassetStandardsLocal.AssetStandardId);

                            if (assetSumCalc.netBookValue() <= 0)
                            {
                                break;
                            }
                        }

                        if (!rassetStandardsLocal.RecId)
                        {
                            assetTable.Status = RAssetStatus::Open;
                            assetTable.doUpdate();

                            if (assetMoveHist.AssetId
                                && assetMoveHist.Company)
                            {
                                rAssetMoveHistIssued = assetMoveHist.findConcerned(false, true);
                                rAssetMoveHistIssued.Receipted = NoYes::Yes;
                                rAssetMoveHistIssued.update();
                            }
                        }
                    }

                    if (assetMoveHist.MoveType == RAssetMoveType::CompanyIssue && assetStatusType.allowCompanyIssue())
                    {
                        while select AssetId,AssetStandardId from rassetStandardsLocal
                            where rassetStandardsLocal.AssetId == this.AssetId
                                && rassetStandardsLocal.AssetStandardId != this.AssetStandardId
                        {
                            assetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(rassetStandardsLocal.AssetId, rassetStandardsLocal.AssetStandardId);

                            if (assetSumCalc.netBookValue() > 0)
                            {
                                break;
                            }
                        }

                        if (!rassetStandardsLocal.RecId)
                        {
                            assetTable.Status = RAssetStatus::Disposed;
                            assetTable.doUpdate();
                        }
                    }
                }
            }
            else
            {
                assetMoveHist.delete();
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprProfile</Name>
				<Source><![CDATA[
    public RAssetDeprProfile deprProfile(RAssetTransDate _transDate = maxDate())
    {
        RAssetDeprProfileRecId deprProfileRecId = RAssetLifeHist::findDateLifeTime(this.AssetId, _transDate, this.AssetStandardId).rAssetDeprProfile;
        return RAssetDeprProfile::find(deprProfileRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>factor</Name>
				<Source><![CDATA[
    public display RAssetFactor factor(RAssetTransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetLifeHist::findDateLifeTime(this.AssetId, _transDate, this.AssetStandardId).NewFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupInterval</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetDeprInterval groupInterval()
    {
        RAssetGroup assetGroup = RAssetGroup::find(this.AssetGroup);
        return RAssetDeprProfile::find(assetGroup.rAssetDeprProfile).DeprInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupLifetime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetGroupLifeTime groupLifetime()
    {
        return RAssetGroup::find(this.AssetGroup).Lifetime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupMethod</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetDeprMethod groupMethod()
    {
        RAssetGroup assetGroup = RAssetGroup::find(this.AssetGroup);
        return RAssetDeprProfile::find(assetGroup.rAssetDeprProfile).DeprMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupPercentage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetDeprPercentage groupPercentage()
    {
        RAssetGroup assetGroup = RAssetGroup::find(this.AssetGroup);
        return RAssetDeprProfile::find(assetGroup.rAssetDeprProfile).DeprPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupProfile</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetGroupDeprProfileId groupProfile()
    {
        RAssetGroup assetGroup = RAssetGroup::find(this.AssetGroup);
        return RAssetDeprProfile::find(assetGroup.rAssetDeprProfile).DeprProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        RAssetAmount acquisitionPrice = _ledgerJournalTrans.calcLineAmountExclTax_RU();
        acquisitionPrice = CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(acquisitionPrice, _ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate, UnknownNoYes::Unknown, _ledgerJournalTrans.ExchRate, 0, false), this.CurrencyCode, _ledgerJournalTrans.TransDate, UnknownNoYes::Unknown, 0, 0, false);

        this.AcquisitionPrice = CurrencyExchangeHelper::amount(acquisitionPrice, this.CurrencyCode);
        this.DefaultDimension = _ledgerJournalTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMainGroup</Name>
				<Source><![CDATA[
    public RAssetStandards initFromMainGroup(RAssetTable _assetTable, RAssetMainGroupMember _assetMainGroupMember)
    {
        
        RAssetStandards assetStandards;
        assetStandards.initValue();
        assetStandards.AssetId = _assetTable.AccountNum;
        assetStandards.AssetGroup = _assetMainGroupMember.AssetGroup;
        assetStandards.AssetStandardId = _assetMainGroupMember.AssetStandardId;

        RAssetGroup assetGroup;
        assetGroup = RAssetGroup::find(_assetMainGroupMember.AssetGroup);
        assetStandards.updateFromAssetGroup(assetGroup);
        assetStandards.updateFromStandardTable(assetStandards.AssetStandardId);

        RAssetDeferralsAccounts::initFromRassetDeferralsAccount(assetStandards.AssetStandardId,assetStandards.AssetGroup,assetStandards.AssetId);
        assetStandards.AcquisitionPrice = _assetTable.AcquisitionPrice;

        assetStandards.AcquisitionPrice = CurrencyExchangeHelper::curAmount(assetStandards.AcquisitionPrice, assetStandards.CurrencyCode, _assetTable.AcquisitionDate);
        assetStandards.insert();

        return assetStandards;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    public void initFromPurchLine(SalesPurchLine _line)
    {
        SalesPurchLineInterface salesPurchLineInterface = _line.salesPurchLineInterface();
        
        RAssetAmount acquisitionPrice = PriceDisc::amount2Price(salesPurchLineInterface.parmLineAmount(),
            salesPurchLineInterface.parmDiscPercent(),
            salesPurchLineInterface.parmMarkup(),
            salesPurchLineInterface.parmInventQty(),
            salesPurchLineInterface.parmDiscAmount(),
            salesPurchLineInterface.parmPriceUnit(),
            salesPurchLineInterface.parmCurrencyCode(),
            salesPurchLineInterface.parmPrice());

        acquisitionPrice = round(acquisitionPrice, RAssetParameters::find().AssetRound);

        if (salesPurchLineInterface.parmCurrencyCode() != this.CurrencyCode)
        {
            acquisitionPrice = CurrencyExchangeHelper::curAmount2CurAmount(acquisitionPrice, salesPurchLineInterface.parmCurrencyCode(), this.CurrencyCode);
        }
        
        this.AcquisitionPrice = acquisitionPrice;
        this.DefaultDimension = salesPurchLineInterface.parmDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Depreciation = NoYes::Yes;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        RAssetStatusType assetStatusType = RAssetStatusType::construct(RAssetTable::find(this.AssetId));

        super();

        if (assetStatusType.checkPrice()
            && ! this.AcquisitionPrice 
            && this.Depreciation)
        {
            warning(strFmt("@GLS116241", this.AssetId));
        }
        if (this.rAssetDeprProfile || this.SubGroupId)
        {
            RAssetLifeHist::insertFirstLine(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonLinearDeprMethod</Name>
				<Source><![CDATA[
    public boolean isNonLinearDeprMethod(TransDate _transDate)
    {
        return this.deprProfile(_transDate).DeprMethod == RAssetDeprMethod::TaxLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDepDate</Name>
				<Source><![CDATA[
    public RAssetLastDepDate lastDepDate(RAssetBudgetModelId  _assetBudgetModelId = '')
    {
        RAssetLastDepDate ret;

        if (_assetBudgetModelId)
        {
            RAssetBudgetTrans assetBudgetTrans;
            select firstonly AssetDeprPeriod from assetBudgetTrans
                order by AssetDeprPeriod desc
                where assetBudgetTrans.AssetId == this.AssetId
                    && assetBudgetTrans.AssetStandardId == this.AssetStandardId
                    && assetBudgetTrans.BudgetModel == _assetBudgetModelId
                    && assetBudgetTrans.AssetTransType == RAssetTransType::Depreciation;

            ret = assetBudgetTrans.AssetDeprPeriod;
        }
        else
        {
            ret = this.LastDepDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingPostingProfileName</Name>
				<Source><![CDATA[
    public display Description lendingPostingProfileName()
    {
        return RAssetLedger::find(this.LendingPostingProfile).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifetime</Name>
				<Source><![CDATA[
    public display RAssetLifeTime lifetime(RAssetTransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetLifeHist::findDateLifeTime(this.AssetId, _transDate, this.AssetStandardId).NewLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifeTimePass</Name>
				<Source><![CDATA[
    public RAssetLifeTime lifeTimePass(RAssetTransDate _transDate)
    {
        RAssetTableInterval intervalMth = new RAssetTableInterval_Month();
        RAssetLifeTime depreciationPeriods;

        RAssetTransDate transDate = _transDate > this.LastDepDate ? this.LastDepDate : _transDate;

        if (transDate)
        {
            depreciationPeriods = intervalMth.interval(this.DepStartDate, endmth(transDate)) + 1;
            depreciationPeriods -= RAssetSuspend::suspendBefore(transDate, this);
        }

        return depreciationPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifeTimeRest</Name>
				<Source><![CDATA[
    public RAssetLifeTime lifeTimeRest(RAssetTransDate _transDate)
    {
        return this.lifetime(maxDate()) - this.lifeTimePass(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifeTimeRestItem</Name>
				<Source><![CDATA[
    public RAssetLifeTime lifeTimeRestItem()
    {
        RAssetTableInterval_Month  interval = new RAssetTableInterval_Month();
        RAssetLifeTime lifeTime  = interval.interval(this.DepStartDate, endmth(this.DisposalDate)) + 1;
        lifeTime -= RAssetSuspend::suspendBefore(this.DisposalDate, this);
        lifeTime = this.lifetime(maxDate()) - lifeTime;

        return lifeTime > 0 ? lifeTime : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile</Name>
				<Source><![CDATA[
    public RAssetPostingProfile postingProfile(TransDate  _transDate)
    {
        RAssetPostingProfile postingProfile;
        RAssetLending assetlending   = RAssetLending::findLent(this.AssetId, _transDate);

        if (assetlending)
        {
            postingProfile = this.LendingPostingProfile;
        }

        if (! postingProfile)
        {
            postingProfile = this.PostingProfile;
        }

        if (! postingProfile)
        {
            postingProfile = RAssetStandardTable::find(this.AssetStandardId).PostingProfile;
        }

        if (! postingProfile)
        {
            postingProfile = RAssetParameters::find().PostingProfile;
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>puttingIntoOperationDate</Name>
				<Source><![CDATA[
    public RAssetTransDate puttingIntoOperationDate()
    {
        return RAssetTrans::transTypeFirstDate(this.AssetId, this.AssetStandardId, RAssetTransType::Acquisition, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDepDate</Name>
				<Source><![CDATA[
    public RAssetDepStartDate startDepDate(RAssetBudgetModelId _assetBudgetModelId = '')
    {
        RAssetDepStartDate ret;

        if (_assetBudgetModelId)
        {
            RAssetBudgetTrans assetBudgetTrans;
            select firstonly TransDate from assetBudgetTrans
                order by TransDate asc
                where assetBudgetTrans.AssetId == this.AssetId
                    && assetBudgetTrans.AssetStandardId == this.AssetStandardId
                    && assetBudgetTrans.BudgetModel == _assetBudgetModelId
                    && assetBudgetTrans.AssetTransType == RAssetTransType::Acquisition;

            ret = RAssetGroup::initDepStartDate(this.AssetGroup, assetBudgetTrans.TransDate, this.AssetId);
        }
        else
        {
            ret = this.DepStartDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subGroupId</Name>
				<Source><![CDATA[
    public RAssetSubGroupId subGroupId(RAssetTransDate _transDate)
    {
        TransDate historyDate = _transDate ? (dateStartMth(_transDate) - 1) : dateNull();
        return RAssetLifeHist::findDateLifeTime(this.AssetId, historyDate, this.AssetStandardId).SubGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.rAssetDeprProfile != this.orig().rAssetDeprProfile
            || this.SubGroupId != this.orig().SubGroupId)
        {
            RAssetLifeHist::insertFirstLine(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAssetGroup</Name>
				<Source><![CDATA[
    public void updateFromAssetGroup(RAssetGroup _assetGroup)
    {
        this.rAssetDeprProfile = _assetGroup.rAssetDeprProfile;
        this.DepStartDate = RAssetGroup::initDepStartDate(_assetGroup.AssetGroupId, RAssetTable::find(this.AssetId).AcquisitionDate, this.AssetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromStandardTable</Name>
				<Source><![CDATA[
    public void updateFromStandardTable(RAssetStandardId _assetStandardId)
    {
        RAssetParameters assetParameters    = RAssetParameters::find();
        RAssetStandardTable assetStandardTable = RAssetStandardTable::find(_assetStandardId);

        this.CurrencyCode     = assetStandardTable.CurrencyCode;
        this.PostingProfile   = assetStandardTable.PostingProfile ? assetStandardTable.PostingProfile : assetParameters.PostingProfile;
        this.DefaultDimension = assetStandardTable.DefaultDimension ? assetStandardTable.DefaultDimension : assetParameters.DefaultDimension;

        if (RAssetTable::find(this.AssetId).AccountNumMain
            && RAssetStandards::find(RAssetTable::find(this.AssetId).AccountNumMain, this.AssetStandardId).Depreciation)
        {
            this.Depreciation = NoYes::No;
        }
        
        RAssetStandards rassetStandardsChild;
        RAssetTable rassetTableChild;
        select firstonly RecId from rassetStandardsChild
            where rassetStandardsChild.AssetStandardId == this.AssetStandardId
                && rassetStandardsChild.Depreciation
            join TableId from rassetTableChild
            where rassetTableChild.AccountNumMain == this.AssetId
                && rassetTableChild.AccountNum == rassetStandardsChild.AssetId;

        if (rassetStandardsChild.RecId)
        {
            this.Depreciation = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if ((select firstonly RecId from rAssetTrans
            where rAssetTrans.AccountNum == this.AssetId
                && rAssetTrans.AssetStandardId == this.AssetStandardId).RecId)
        {
            ret = checkFailed(strFmt("@GLS105629", new DictTable(tableNum(RAssetTrans)).label())); // because DeleteAction for RAssetTrans with restricted doesn't work
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        RAssetGroup assetGroup;
        boolean ret = super(_p1);

        if (ret && isFlightEnabled(RAssetFlights::RAssetStandardsEnableUpdateOnValidate))
        {
            switch (_p1)
            {
                case fieldNum(RAssetStandards, AssetGroup):
                    assetGroup = RAssetGroup::find(this.AssetGroup);
                    this.updateFromAssetGroup(assetGroup);
                    this.AssetStandardId = assetGroup.AssetStandardId;
                    this.updateFromStandardTable(this.AssetStandardId);
                    break;

                case fieldNum(RAssetStandards, AssetStandardId):
                    this.updateFromStandardTable(this.AssetStandardId);
                    this.Say = '';

                    select count(RecId) from assetGroup
                        where assetGroup.AssetStandardId == this.AssetStandardId;

                    if (assetGroup.RecId == 1)
                    {
                        select firstonly assetGroup
                            where assetGroup.AssetStandardId == this.AssetStandardId;

                        this.AssetGroup = assetGroup.AssetGroupId;
                        this.updateFromAssetGroup(assetGroup);
                    }
                    else
                    {
                        this.AssetGroup = '';
                        this.rAssetDeprProfile = 0;
                    }
                    break;

                case fieldNum(RAssetStandards, DepStartDate):
                    if (this.assetDeprMethod(this.DepStartDate) == RAssetDeprMethod::TaxNonLinearGroup)
                    {
                        this.DepStartDate = dateStartMth(this.DepStartDate);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        RAssetTable assetTable = RAssetTable::find(this.AssetId);

        boolean ret = super();

        if (!ret)
        {
            ret = false;
        }
        else if (this.Depreciation == NoYes::Yes)
        {
            RAssetFamilyTreeNode temp = new RAssetFamilyTreeNode();
            temp.buildDescendantTree(this.AssetId, this.AssetStandardId);

            if (assetTable.AccountNumMain)
            {
                RAssetFamilyTreeNode parent = new RAssetFamilyTreeNode();
                parent.initiliseFromAssetTable(RAssetTable::find(assetTable.AccountNumMain));
                temp.setparent(parent);
                temp.buildAncestorLine();
            }
            
            str message;
            if (temp.descendantMatchDepreciation(NoYes::Yes))
            {
                message = temp.descendantAssetsMatchingDepreciation(NoYes::Yes);
                ret = checkFailed(strFmt("@GLS116246", subStr(message, 1, strLen(message) - 1)));
            }

            if (temp.ancestorMatchDepreciation(NoYes::Yes))
            {
                message = temp.ancestorMatchingDepreciation(NoYes::Yes);
                ret = checkFailed(strFmt("@GLS116247", message));
            }
        }

        if (ret
            && this.BlockDepreciation == NoYes::Yes
            && this.AssetStandardId != RAssetParameters::find().StandardIdDefault)
        {
            ret = checkFailed("@RAsset:RAssetBlockDepreciationValidation");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RAssetStandards find(RAssetId _assetId, RAssetStandardId _assetStandardId, boolean _forUpdate = false)
    {
        RAssetStandards assetStandards;

        if (_assetId
            && _assetStandardId)
        {
            assetStandards.selectForUpdate(_forUpdate);

            select firstonly assetStandards index AssetIdStandardIdx
                where assetStandards.AssetId == _assetId
                    && assetStandards.AssetStandardId == _assetStandardId;
        }

        return assetStandards;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInCompany</Name>
				<Source><![CDATA[
    public static RAssetStandards findInCompany(RAssetId _assetId, RAssetStandardId _assetStandardId, CompanyId _companyId, boolean _forUpdate = false)
    {
        RAssetStandards assetStandards;

        if (_companyId)
        {

            if (SysDataArea::checkAccessible(_companyId))
            {
                changecompany(_companyId)
                {
                    if (_assetId && _assetStandardId)
                    {
                        assetStandards.selectForUpdate(_forUpdate);

                        select firstonly assetStandards
                            where assetStandards.AssetId == _assetId
                                && assetStandards.AssetStandardId == _assetStandardId;
                    }
                }
            }
        }

        return assetStandards;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLendingPosting</Name>
				<Source><![CDATA[
    public static boolean isLendingPosting(RAssetId _assetId)
    {
        return _assetId
            && (select firstonly RecId from rAssetStandards
                where rAssetStandards.AssetId == _assetId
                    && rAssetStandards.LendingPosted == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStandards</Name>
				<Source><![CDATA[
    public static void lookupStandards(FormStringControl _ctrl, RAssetId _assetId, CompanyId _company = curext())
    {
        if (SysDataArea::checkAccessible(_company))
        {
            changecompany(_company)
            {
                Args args = new Args();
                args.name(formStr(RAssetStandardsLookup));
                args.caller(_ctrl);

                FormRun ctrlFormRun = _ctrl.formRun();
                FormDataSource ctrl_ds = ctrlFormRun.dataSource();
                if (ctrl_ds)
                {
                    args.record(ctrl_ds.cursor());
                }
                
                args.parm(_assetId);
                FormRun formRun = classfactory.formRunClass(args);
                formRun.init();
                _ctrl.performFormLookup(formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLendingPosting</Name>
				<Source><![CDATA[
    public static void updateLendingPosting(RAssetId _assetId, RAssetStandardId _assetStandardId, NoYes _lending)
    {
        RAssetLending assetLending = RAssetLending::findLastLent(_assetId);
        RAssetStandards assetStandards = RAssetStandards::find(_assetId, _assetStandardId, true);

        if (assetLending
            && assetStandards)
        {
            assetStandards.LendingPosted = _lending;
            assetStandards.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional operations on field modified.
    /// </summary>
    /// <param name = "_fieldId">Modified field Id.</param>
    public void modifiedField(FieldId _fieldId)
    {
        RAssetGroup assetGroup;

        super(_fieldId);

        if (!isFlightEnabled(RAssetFlights::RAssetStandardsEnableUpdateOnValidate))
        {
            switch (_fieldId)
            {
                case fieldNum(RAssetStandards, AssetGroup):
                    assetGroup = RAssetGroup::find(this.AssetGroup);
                    this.updateFromAssetGroup(assetGroup);
                    this.AssetStandardId = assetGroup.AssetStandardId;
                    this.updateFromStandardTable(this.AssetStandardId);
                    break;

                case fieldNum(RAssetStandards, AssetStandardId):
                    this.updateFromStandardTable(this.AssetStandardId);
                    this.Say = '';

                    select count(RecId) from assetGroup
                        where assetGroup.AssetStandardId == this.AssetStandardId;

                    if (assetGroup.RecId == 1)
                    {
                        select firstonly assetGroup
                            where assetGroup.AssetStandardId == this.AssetStandardId;

                        this.AssetGroup = assetGroup.AssetGroupId;
                        this.updateFromAssetGroup(assetGroup);
                    }
                    else
                    {
                        this.AssetGroup = '';
                        this.rAssetDeprProfile = 0;
                    }
                    break;

                case fieldNum(RAssetStandards, DepStartDate):
                    if (this.assetDeprMethod(this.DepStartDate) == RAssetDeprMethod::TaxNonLinearGroup)
                    {
                        this.DepStartDate = dateStartMth(this.DepStartDate);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetBooks</DeveloperDocumentation>
	<FormRef>RAssetStandards</FormRef>
	<Label>@FixedAssets:FA_EntityField_Book</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>AssetStandardId</TitleField2>
	<ClusteredIndex>AssetIdStandardIdx</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RAssetBudgetTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetBudgetTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetDeferralsAccounts</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetDeferralsAccounts</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetDeprAccount</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetDeprAccount</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetLifeHist</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetLifeHist</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisposalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastDepDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SaleValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lifetime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Acquisition</Name>
			<Label>@GLS116117</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcquisitionPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetGroup</Name>
			<Label>@GLS116116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>groupProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>groupLifetime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>groupInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>groupMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>groupPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetOnLoanDimension</Name>
			<Label>@GLS116611</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LendingDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetOnLoanPosting</Name>
			<Label>@GLS116612</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LendingPostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lendingPostingProfileName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Say</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RAssetDeprProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lifetime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastDepDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockDepreciation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Disposal</Name>
			<Label>@GLS116236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisposalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SaleValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Lease</Name>
			<Label>@GLS116613</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LendingPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NonlinearMethod</Name>
			<Label>@GLS116631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostLimitDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS12919</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetPostingProfileName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValueModel</Name>
			<Label>@FixedAssets:FA_EntityField_Book</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetStandardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetStandardName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<ExtendedDataType>RAssetPostingProfile</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcquisitionPrice</Name>
			<ExtendedDataType>RAssetAcquisitionPrice</ExtendedDataType>
			<Label>@GLS116298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RAssetGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetStandardId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RAssetStandardId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CostLimitDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RAssetCostLimitDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Depreciation</Name>
			<ExtendedDataType>RAssetDepreciate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DepStartDate</Name>
			<ExtendedDataType>RAssetDepStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DisposalDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RAssetDisposalDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastDepDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RAssetLastDepDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LendingDefaultDimension</Name>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LendingPosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@GLS116614</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LendingPostingProfile</Name>
			<ExtendedDataType>RAssetPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RAssetDeprProfile</Name>
			<ExtendedDataType>RAssetDeprProfileRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SaleValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RAssetSaleValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Say</Name>
			<ExtendedDataType>RAssetSay</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapValue</Name>
			<ExtendedDataType>RAssetScrapValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubGroupId</Name>
			<ExtendedDataType>RAssetSubGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlockDepreciation</Name>
			<ExtendedDataType>RAssetBlockDepreciation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RAssetDeprProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RAssetDeprProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LendingDefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LendingDefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetIdStandardIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetStandardId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionDefault</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LendingDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LendingDefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LendingDefaultDimension</Name>
					<Field>LendingDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LendingPostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LendingPostingProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LendingPostingProfile</Name>
					<SourceEDT>RAssetPostingProfile</SourceEDT>
					<Field>LendingPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PostingProfile</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PostingProfile</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>RAssetPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetDeprProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetDeprProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetDeprProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RAssetDeprProfile</Name>
					<Field>RAssetDeprProfile</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<SourceEDT>RAssetGroupId</SourceEDT>
					<Field>AssetGroup</Field>
					<RelatedField>AssetGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetSayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetSayTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetSayTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Say</Name>
					<SourceEDT>RAssetSay</SourceEDT>
					<Field>Say</Field>
					<RelatedField>Say</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SayId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetStandards</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>RAssetStandards</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetStandards</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetStandardId</Name>
					<Field>AssetStandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetStandardTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetStandardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetStandardTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetStandardId</Name>
					<SourceEDT>RAssetStandardId</SourceEDT>
					<Field>AssetStandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>assetStandardIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetSubGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetSubGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetSubGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubGroupId</Name>
					<SourceEDT>RAssetSubGroupId</SourceEDT>
					<Field>SubGroupId</Field>
					<RelatedField>SubGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SubGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RAssetTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetStandards</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetStandardId</Name>
					<Field>AssetStandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>