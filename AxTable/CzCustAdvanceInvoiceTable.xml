<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCustAdvanceInvoiceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CzCustAdvanceInvoiceTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCurOpen</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display AmountCurOpen_W amountCurOpen()
    {
        AmountCur      reversalAmount = 0;
        CustSettlement settlement;

        if (this.Type == AdvanceInvoiceType_W::Reversal || this.Type == AdvanceInvoiceType_W::ReversalCancellation)
        {
            return 0;
        }

        CustTrans custTrans = CustTrans::findVoucherDate(this.Voucher, this.InvoiceDate);

        while select crosscompany OffsetCompany, OffsetRecId, SettleAmountCur from settlement
            where settlement.TransRecId   == custTrans.RecId     &&
                  settlement.TransCompany == custTrans.company() &&
                  settlement.AccountNum   == custTrans.AccountNum
        {
            changecompany(settlement.OffsetCompany)
            {
                CustTrans offsetTrans = CustTrans::find(settlement.OffsetRecid);
                CzCustAdvanceInvoiceTable offsetAdvanceInvoice = CzCustAdvanceInvoiceTable::findVoucherDate(offsetTrans.Voucher, offsetTrans.TransDate);
                if (offsetAdvanceInvoice.Type == AdvanceInvoiceType_W::Reversal)
                {
                    reversalAmount += settlement.SettleAmountCur;
                }
            }
        }

        return custTrans.AmountCur - reversalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    public AmountMST amountMST(AmountCur _amountCur)
    {
        return CurrencyExchangeHelper::mstAmount(_amountCur, this.CurrencyCode, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecond);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTOpen</Name>
				<Source><![CDATA[
    public AmountCurOpen_W amountMSTOpen()
    {
        AmountMST      reversalAmount = 0;
        CustSettlement settlement;

        if (this.Type == AdvanceInvoiceType_W::Reversal || this.Type == AdvanceInvoiceType_W::ReversalCancellation)
        {
            return 0;
        }

        CustTrans custTrans = CustTrans::findVoucherDate(this.Voucher, this.InvoiceDate);

        while select crosscompany OffsetCompany, OffsetRecId, SettleAmountMST from settlement
            where settlement.TransRecId   == custTrans.RecId     &&
                  settlement.TransCompany == custTrans.company() &&
                  settlement.AccountNum   == custTrans.AccountNum
        {
            changecompany(settlement.OffsetCompany)
            {
                CustTrans offsetTrans = CustTrans::find(settlement.OffsetRecid);
                CzCustAdvanceInvoiceTable offsetAdvanceInvoice = CzCustAdvanceInvoiceTable::findVoucherDate(offsetTrans.Voucher, offsetTrans.TransDate);
                if (offsetAdvanceInvoice.Type == AdvanceInvoiceType_W::Reversal)
                {
                    reversalAmount += settlement.SettleAmountMST;
                }
            }
        }

        return custTrans.AmountMST - reversalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    public void calcDue()
    {
        if (! this.DueDate)
        {
            this.DueDate = this.paymentDueDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAmount</Name>
				<Source><![CDATA[
    public void calcInvoiceAmount()
    {
        CzCustAdvanceInvoiceLine invoiceLine;

        select sum(AmountCur) from invoiceLine
            where invoiceLine.ParentRecId == this.RecId;

        this.InvoiceAmount = invoiceLine.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the <c>ContactPerson</c> for the advance invoice is the same
    /// as the contact for the customer account.
    /// </summary>
    /// <returns>
    /// true if the <c>ContactPerson</c> is valid; otherwise, false.
    /// </returns>
    boolean checkContactPerson()
    {
        if (this.ContactPersonId)
        {
            if (ContactPerson::find(this.ContactPersonId).getCustAccount() != this.OrderAccount)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    private void checkCurrencyCode()
    {
        if (this)
        {
            if (this.CurrencyCode != this.orig().CurrencyCode &&
                MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
            {
                warning("@SYS24528");

                this.CurrencyCode = this.orig().CurrencyCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExchRate</Name>
				<Source><![CDATA[
    private boolean checkExchRate()
    {
        boolean ret = true;

        if (this.ExchRate != 100.00 && this.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
            ret = checkFailed(strfmt("@SYS85793", exchangeRateHelper.displayStoredExchangeRate(100)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    public void convertCurrencyCode(CurrencyCode _currencyCode)
    {
        CzCustAdvanceInvoiceLine invoiceLine;

        ttsbegin;

        while select forupdate invoiceLine
            where invoiceLine.ParentRecId == this.RecId
        {
            invoiceLine.convertCurrencyCode(_currencyCode, this.InvoiceDate);
            invoiceLine.doUpdate();
        }

        this.calcInvoiceAmount();
        this.CurrencyCode = _currencyCode;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccount</Name>
				<Source><![CDATA[
    private void createOneTimeAccount()
    {
        this.OrderAccount = CustTable::createOneTimeAccount(this);
        this.initFromCustTable(this.custTable_OrderAccount());

        if (! this.InvoiceAccount)
        {
            this.InvoiceAccount = this.OrderAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    public boolean creditNote()
    {
       return (select firstonly RecId from CzCustAdvanceInvoiceLine
           where CzCustAdvanceInvoiceLine.ParentRecId == this.RecId
           && CzCustAdvanceInvoiceLine.OrigAdvanceInvoiceLineRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossrate</Name>
				<Source><![CDATA[
    display ExchRateCross_W crossrate()
    {
        ExchrateSecondary  crossrate;
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

        if (! this.ExchrateSecond)
        {
            crossrate = this.ExchRate;
        }
        else
        {
            crossrate = this.ExchRate ? (this.ExchrateSecond / this.ExchRate)*100 : 0;
        }

        return exchangeRateHelper.displayStoredExchangeRate(crossrate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyModified</Name>
				<Source><![CDATA[
    void currencyModified(boolean _selectTriangulation = true)
    {
        UnknownNoYes triangulation;

        if (this.CurrencyCode)
        {
            if (_selectTriangulation)
            {
                triangulation = Currency::noYes2UnknownNoYes(Currency::triangulation(this.CurrencyCode, this.InvoiceDate));
            }
            else
            {
                triangulation = Currency::noYes2UnknownNoYes(this.Triangulation);
            }

            if (triangulation == UnknownNoYes::Yes && !Currency::findEuroCurrencyCode())
            {
                throw error("@SYS70752");
            }

            this.ExchRate = ExchangeRateHelper::exchRate(this.CurrencyCode, this.InvoiceDate, triangulation);

            this.ExchrateSecond = ExchangeRateHelper::exchRateSecond(this.CurrencyCode, this.InvoiceDate, triangulation);

            this.Triangulation = Currency::unknownNoYes2Noyes(triangulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    public CustTable custTable_InvoiceAccount(boolean _update = false)
    {
        return CustTable::find(this.InvoiceAccount, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_OrderAccount</Name>
				<Source><![CDATA[
    private CustTable custTable_OrderAccount(boolean _update = false)
    {
        return CustTable::find(this.OrderAccount, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        SpecTransManager::newFromSpec(this).deleteAll();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExchRate</Name>
				<Source><![CDATA[
    display CustExchRate displayExchRate(date _date = this.InvoiceDate)
    {
        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
            return exchangeRateHelper.displayStoredExchangeRate(ExchangeRateHelper::exchRate(this.CurrencyCode, _date));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the secondary exchange rate for the advance invoice.
    /// </summary>
    /// <param name="_date">
    /// Date of the exchange rate.
    /// </param>
    /// <returns>
    /// The secondary exchange rate for the advance invoice.
    /// </returns>
    display ExchrateSecondary displayExchRateSecondary(date _date = this.InvoiceDate)
    {
        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
            return exchangeRateHelper.displayStoredExchangeRate(ExchangeRateHelper::exchRateSecond(this.CurrencyCode, _date));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the customer name for the advance invoice <c>InvoiceAccount</c>.
    /// </summary>
    /// <returns>
    /// <c>InvoiceAccount</c> customer name.
    /// </returns>
    display DirPartyName displayInvoiceAccountName()
    {
        return CustTable::find(this.InvoiceAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrderAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the customer name for the advance invoice <c>OrderAccount</c>.
    /// </summary>
    /// <returns>
    /// <c>OrderAccount</c> customer name.
    /// </returns>
    display DirPartyName displayOrderAccountName()
    {
        return CustTable::find(this.OrderAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    edit ContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonId contactPersonId;
        if (_set)
        {
            if (_name)
            {
                contactPersonId = this.ContactPersonId;
                ContactPerson contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;

                if (this.ContactPersonId)
                {
                    _name = ContactPerson::find(this.ContactPersonId).personName();
                }
                else
                {
                    DirPartyTable   partyTable;
                    CustTable       custTable;

                    select firstonly ContactPersonId from contactPerson
                        join TableId from custTable
                        where custTable.AccountNum          == this.OrderAccount
                           && contactPerson.ContactForParty == custTable.Party
                        join Name from partyTable
                        where partyTable.RecId == contactPerson.Party &&
                              partyTable.Name like _name;

                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId = contactPerson.ContactPersonId;
                        _name=partyTable.Name;
                    }
                }
            }
            else
            {
                this.ContactPersonId = '';
            }
            if (contactPersonId != this.ContactPersonId)
            {
                if (this.checkContactPerson())
                {
                    if (FormDataUtil::getFormDataSource(this))
                    {
                        FormDataUtil::getFormDataSource(this).refresh();
                    }
                }
                else
                {
                    this.ContactPersonId = contactPersonId;
                }
            }
        }
        else
        {
            _name = ContactPerson::find(this.ContactPersonId).personName();
        }
        return _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    edit CustExchRate editExchRate(boolean _set, CustExchRate _exchRate)
    {
        CustExchRate ret = 0;

        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

            if (_set)
            {
                if (CzCustAdvanceInvoiceEditStoredExchRateFlight::instance().isEnabled())
                {
                    this.ExchRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
                }
                else
                {
                    this.ExchRate = exchangeRateHelper.displayStoredExchangeRate(_exchRate);
                }

                if (! this.checkExchRate())
                {
                    this.ExchRate = this.orig().ExchRate;
                }
            }
           
            if (this.ExchRate)
            {
                ret = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
            }
            else
            {
                ret = exchangeRateHelper.displayStoredExchangeRate(ExchangeRateHelper::exchRate(this.CurrencyCode, this.InvoiceDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRateSecond</Name>
				<Source><![CDATA[
    edit ExchrateSecondary editExchRateSecond(boolean _set, CustExchRate _exchRate)
    {
        CustExchRate ret = 0;

        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

            if (_set)
            {
                this.ExchrateSecond = exchangeRateHelper.displayStoredExchangeRate(_exchRate);
            }

            if (this.ExchrateSecond)
            {
                ret = exchangeRateHelper.displayStoredExchangeRate(this.ExchrateSecond);
            }
            else
            {
                ret = exchangeRateHelper.displayStoredExchangeRate(ExchangeRateHelper::exchRateSecond(this.CurrencyCode, this.InvoiceDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    display ExchrateSecondary exchRateSecondary(date _date = this.InvoiceDate)
    {
        if (this.CurrencyCode)
            return ExchangeRateHelper::exchRateSecond(this.CurrencyCode, _date);
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTxt</Name>
				<Source><![CDATA[
    display Description exchRateTxt()
    {
        return ExchangeRateHelper::exchRateTxt(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode, this.exchRateSecondary(this.InvoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalInvoiceAccount_PL</Name>
				<Source><![CDATA[
    private CustTable fiscalInvoiceAccount_PL()
    {
        return CustTable::find(this.FiscalInvoiceAccount_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalInvoiceAddressing_PL</Name>
				<Source><![CDATA[
    display Addressing fiscalInvoiceAddressing_PL()
    {
        return this.fiscalInvoiceAccount_PL().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalInvoiceName_PL</Name>
				<Source><![CDATA[
    display Name fiscalInvoiceName_PL()
    {
        return this.fiscalInvoiceAccount_PL().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrderAccount_PL</Name>
				<Source><![CDATA[
    private CustTable fiscalOrderAccount_PL()
    {
        return CustTable::find(this.FiscalOrderAccount_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrderAddressing_PL</Name>
				<Source><![CDATA[
    display Addressing fiscalOrderAddressing_PL()
    {
        return this.fiscalOrderAccount_PL().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrderName_PL</Name>
				<Source><![CDATA[
    display Name fiscalOrderName_PL()
    {
        return this.fiscalOrderAccount_PL().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    public void initFromAdvanceInvoiceTable(CzCustAdvanceInvoiceTable _origTable)
    {
        this.FreeInvoiceRefRecId = _origTable.FreeInvoiceRefRecId;
        this.SalesId             = _origTable.SalesId;

        this.CurrencyCode        = _origTable.CurrencyCode;
        this.ExchRate            = _origTable.ExchRate;
        this.ExchrateSecond      = _origTable.ExchrateSecond;
        this.Triangulation       = _origTable.Triangulation;

        this.CustPostingProfile  = _origTable.CustPostingProfile;

        this.Status              = _origTable.Status;

        this.PostVAT             = _origTable.PostVAT;
        this.PostVATDate         = _origTable.PostVATDate;
        this.TaxDocumentCreate   = _origTable.TaxDocumentCreate;
        this.PostingProfile      = _origTable.PostingProfile;

        this.PostalAddress       = _origTable.PostalAddress;

        this.DefaultDimension    = _origTable.DefaultDimension;
        this.Listcode            = _origTable.Listcode;
        this.Payment             = _origTable.Payment;
        this.OneTimeCustomer     = _origTable.OneTimeCustomer;
        this.PaymentSched        = _origTable.PaymentSched;
        this.NumberSequenceGroup = _origTable.NumberSequenceGroup;
        this.LanguageId          = _origTable.LanguageId;
        this.Name                = _origTable.Name;
        this.ContactPersonId     = _origTable.ContactPersonId;
        this.PaymMode            = _origTable.PaymMode;
        this.PaymSpec            = _origTable.PaymSpec;
        this.WorkerSalesTaker    = _origTable.WorkerSalesTaker;
        this.BankConstantSymbol  = _origTable.BankConstantSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    private void initFromCustTable(CustTable _custTable)
    {
        this.Payment = _custTable.PaymTermId;
        this.initFromPayment();

        if (_custTable.PaymSched)
        {
            this.PaymentSched = _custTable.PaymSched;
        }
        this.PaymMode            = _custTable.PaymMode;
        this.PaymSpec            = _custTable.PaymSpec;

        if (! this.InvoiceDate)
        {
            this.InvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (! this.DocumentDate)
        {
            this.DocumentDate = this.InvoiceDate;
        }

        this.calcDue();

        this.LanguageId          = DirPartyTable::findRec(_custTable.Party).LanguageId;
        this.CustGroup           = _custTable.CustGroup;

        this.OrderAccount        = _custTable.AccountNum;
        this.InvoiceAccount      = this.InvoiceAccount ?
                                   this.InvoiceAccount :
                                   (_custTable.InvoiceAccount ?
                                    _custTable.InvoiceAccount :
                                    _custTable.AccountNum);

        this.NumberSequenceGroup = _custTable.NumberSequenceGroup;

        this.DefaultDimension    = _custTable.DefaultDimension;

        this.PostingProfile = CustParameters::find().PrepaymentPostingProfile;
        if (! this.PostingProfile)
        {
            this.PostingProfile = CustParameters::find().PostingProfile;
        }

        this.CurrencyCode = _custTable.Currency;
        this.currencyModified();

        this.setInvoiceAddress();

        this.setListcode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayment</Name>
				<Source><![CDATA[
    public void initFromPayment()
    {
        this.PaymentSched = this.payment().PaymSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    public void initRecord()
    {
        CustTable custTable = this.custTable_OrderAccount();
        
        this.initFromCustTable(custTable);

        if (! this.RecId &&
            this.InvoiceAccount != this.OrderAccount)
        {
            CustTable invoiceTable = CustTable::find(this.InvoiceAccount);

            if (Box::yesNo("@SYS24000"+ '\n\n' + custTable.promptCust()+ '\n\n'+
                           "@SYS15413"+ '\n\n' + invoiceTable.promptCust()+ '\n\n'+
                           "@SYS6182",
                           DialogButton::Yes,
                           "@SYS29051",
                           "@SYS29052") == DialogButton::No)
            {
                this.initFromCustTable(custTable);
            }
            else
            {
                this.initFromCustTable(invoiceTable);
                this.OrderAccount = custTable.AccountNum;
            }
        }

        this.calcDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.BankConstantSymbol = BankConstantSymbol::find(BankAccountTable::find(CompanyInfo::find().Bank).BankConstantSymbol).ConstantSymbol;
        this.CustPostingProfile = CustParameters::find().AdvanceInvoicePostingProfile_W;
        this.HeadId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        if (this.OneTimeCustomer && ! this.OrderAccount)
        {
            this.createOneTimeAccount();
        }

        if (! this.InvoiceAccount)
        {
            this.InvoiceAccount = this.OrderAccount;
        }

        this.Status = CzAdvanceInvoiceStatus::Open;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingAccount_PL</Name>
				<Source><![CDATA[
    private CustTable invoicingAccount_PL()
    {
        if (this.FiscalInvoiceAccount_PL)
        {
            return CustTable::find(this.FiscalInvoiceAccount_PL);
        }
        else
        {
            return CustTable::find(this.InvoiceAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingAddress_PL</Name>
				<Source><![CDATA[
    display Addressing invoicingAddress_PL()
    {
        if (this.FiscalInvoiceAccount_PL)
        {
            return this.invoicingAccount_PL().address();
        }
        else
        {
            return LogisticsPostalAddress::findRecId(this.PostalAddress).Address;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName_PL</Name>
				<Source><![CDATA[
    display Name invoicingName_PL()
    {
        if (this.FiscalInvoiceAccount_PL)
        {
            return this.invoicingAccount_PL().name();
        }
        else
        {
            return this.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingVatRegNum_PL</Name>
				<Source><![CDATA[
    display VATNum invoicingVatRegNum_PL()
    {
    // no VATRegNum
    //    if (this.FiscalInvoiceAccount_PL)
    //    {
                return this.invoicingAccount_PL().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.InvoiceDate);
    //    }
    //    else
    //    {
    //        return this.VatNum;
    //    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RecId</c> of the <c>LogisticsLocation</c> record associated with
    /// the advance invoice's postal address.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the <c>LogisticsLocation</c> record.
    /// </returns>
    public LogisticsLocationRecId location()
    {
        return LogisticsPostalAddress::getLocation(this.PostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(CzCustAdvanceInvoiceTable, Triangulation) :
                this.triangulationModified();
                this.refreshDataSource();
                break;

            case fieldnum(CzCustAdvanceInvoiceTable, CurrencyCode):
                this.currencyModified();
                this.refreshDataSource();
                break;

            case fieldnum(CzCustAdvanceInvoiceTable, InvoiceDate):
                this.initFromPayment();

                this.DueDate = dateNull();
                this.calcDue();

                this.currencyModified();
                this.refreshDataSource();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount_PL</Name>
				<Source><![CDATA[
    private CustTable orderAccount_PL()
    {
        if (this.FiscalOrderAccount_PL)
        {
            return CustTable::find(this.FiscalOrderAccount_PL);
        }
        else
        {
            return CustTable::find(this.OrderAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAddress_PL</Name>
				<Source><![CDATA[
    display Addressing orderAddress_PL()
    {
        return this.orderAccount_PL().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderName_PL</Name>
				<Source><![CDATA[
    display Name orderName_PL()
    {
        return this.orderAccount_PL().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderRegNum_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RegNum of the fiscal order account.
    /// </summary>
    /// <returns>
    /// RegNum of the fiscal order account.
    /// </returns>
    /// <remarks>
    /// If the fiscal order account is empty, returns the RegNum of the order account.
    /// </remarks>
    display VATNum orderRegNum_PL()
    {
        return this.orderAccount_PL().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderVatRegNum_PL</Name>
				<Source><![CDATA[
    display VATNum orderVatRegNum_PL()
    {
        return this.orderAccount_PL().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>origAdvanceInvoiceAmount</Name>
				<Source><![CDATA[
    // for credti note returns open amount for payments, linked to original advance invoice(s)
    public Amount origAdvanceInvoiceAmount()
    {
        CzCustAdvanceInvoiceLine origLine;
        CzCustAdvanceInvoiceLine line;

        if (! this.creditNote())
            return 0;

        select sum(AmountCur) from origLine
        exists join line
            where line.OrigAdvanceInvoiceLineRecId == origLine.RecId &&
                  line.ParentRecId                 == this.RecId;

        return origLine.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInvoiceAmountCur</Name>
				<Source><![CDATA[
    // For credit note returns original AI lines amount minus other credit note lines amount
    // Currency is the same - it's controlled during credit note creation
    public AmountCur origInvoiceAmountCur()
    {
        CzCustAdvanceInvoiceLine otherLine;
        CzCustAdvanceInvoiceLine origLine;
        CzCustAdvanceInvoiceLine line;

        if (! this.creditNote())
            return 0;

        select sum(AmountCur) from origLine
        join OrigAdvanceInvoiceLineRecId from line
            where line.OrigAdvanceInvoiceLineRecId == origLine.RecId &&
                  line.ParentRecId                 == this.RecId
        outer join sum(AmountCur) from otherLine
                where otherLine.ParentRecId                 != this.RecId &&
                      otherLine.OrigAdvanceInvoiceLineRecId == line.OrigAdvanceInvoiceLineRecId;

        return origLine.AmountCur - otherLine.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInvoiceId_PL</Name>
				<Source><![CDATA[
    display PlOriginalInvoiceId origInvoiceId_PL()
    {
        // PL credit note always refers to one invoice for display purposes
        CzCustAdvanceInvoiceTable originalInvoiceTable;
        CzCustAdvanceInvoiceLine  originalInvoiceLine;
        CzCustAdvanceInvoiceLine  creditNoteLine;

        select firstonly InvoiceId from originalInvoiceTable
            exists join originalInvoiceLine
                where originalInvoiceLine.ParentRecId == originalInvoiceTable.RecId
            exists join creditNoteLine
                where creditNoteLine.OrigAdvanceInvoiceLineRecId == originalInvoiceLine.RecId &&
                      creditNoteLine.ParentRecId == this.RecId;

        return originalInvoiceTable.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origPaymentAmountCur_Open</Name>
				<Source><![CDATA[
    // For credit note returns open amount for payments, linked to original advance invoice(s)
    // Assumption: payment currency is the same as related AI's curency
    // If assumption is correct, then currency is the same for all AIs - original(s) and credit note
    // If not - return 0
    public container origPaymentAmountCur_Open()
    {
        AmountCur                 ret, tmp;
        boolean                   oneCurrency = true;
        CzCustAdvanceInvoiceTable origTable;
        CzCustAdvanceInvoiceLine  origLine;
        CzCustAdvanceInvoiceLine  line;
        Set                       currencySet = new Set(Types::String);

        if (! this.creditNote())
            return [ 0, true ];

        select origTable
        exists join origLine
            where origLine.ParentRecId             == origTable.RecId
        exists join line
            where line.OrigAdvanceInvoiceLineRecId == origLine.RecId &&
                  line.ParentRecId                 == this.RecId;

        while (oneCurrency && origTable)
        {
            [tmp, oneCurrency] = origTable.paymentAmountCur_Open();

            ret += tmp;

            next origTable;
        }

        return [ oneCurrency ? ret : 0, oneCurrency ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>origPaymentAmountMST_Open</Name>
				<Source><![CDATA[
    // for credti note returns open amount for payments, linked to original advance invoice(s)
    public AmountMST origPaymentAmountMST_Open()
    {
        AmountMST                 ret;
        CzCustAdvanceInvoiceTable origTable;
        CzCustAdvanceInvoiceLine  origLine;
        CzCustAdvanceInvoiceLine  line;

        if (! this.creditNote())
            return 0;

        while select origTable
        exists join origLine
            where origLine.ParentRecId             == origTable.RecId
        exists join line
            where line.OrigAdvanceInvoiceLineRecId == origLine.RecId &&
                  line.ParentRecId                 == this.RecId
        {
            ret += origTable.paymentAmountMST_Open();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable_CustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>DirPartyTable</c> recrod for the invoice account on the
    /// advance invoice.
    /// </summary>
    /// <param name="_forUpdate">
    /// Whether to select the record for update.
    /// </param>
    /// <returns>
    /// <c>DirPartyTable</c> recrod for the invoice account.
    /// </returns>
    DirPartyTable partyTable_CustAccount(boolean _forUpdate = false)
    {
        DirPartyTable   partyTable;
        CustTable       custTable;

        if (this.InvoiceAccount)
        {
            if (_forUpdate)
            {
                partyTable.selectForUpdate(_forUpdate);
            }

            select firstonly partyTable
                exists join custTable
                where custTable.Party      == partyTable.RecId
                   && custTable.AccountNum == this.InvoiceAccount;
        }
        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    private PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmountCur_Open</Name>
				<Source><![CDATA[
    public container paymentAmountCur_Open()
    {
        AmountMST                ret;
        boolean                  oneCurrency = true;
        CustTrans                trans;
        CustTransOpen            transOpen;
        CzCustAdvanceInvoiceLink link;
        Set                      currencySet = new Set(Types::String);

        select crosscompany link
            where link.AdvanceInvoiceRecId == this.RecId &&
                  link.InvoiceCompany      == this.DataAreaId;

        while (oneCurrency && link)
        {
            changecompany(link.PaymentCompany)
            {
                while select sum(AmountCur) from transOpen
                join CurrencyCode from trans
                    group by CurrencyCode
                    where trans.RecId     == transOpen.RefRecId &&
                          trans.Voucher   == link.Voucher       &&
                          trans.TransDate == link.TransDate
                {
                    ret += transOpen.AmountCur;
                    currencySet.add(trans.CurrencyCode);
                }
            }

            if (currencySet.elements() > 1)
            {
                oneCurrency = false;
            }

            next link;
        }

        oneCurrency = currencySet.elements() == 1;

        return [ (oneCurrency ? - ret : 0), oneCurrency ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmountMST_Open</Name>
				<Source><![CDATA[
    public AmountMST paymentAmountMST_Open()
    {
        AmountMST                ret;
        CustTrans                trans;
        CustTransOpen            transOpen;
        CzCustAdvanceInvoiceLink link;

        while select crosscompany link
            where link.AdvanceInvoiceRecId == this.RecId &&
                  link.InvoiceCompany      == this.DataAreaId
        {
            changecompany(link.PaymentCompany)
            {
                select sum(AmountMST) from transOpen
                exists join trans
                    where trans.RecId     == transOpen.RefRecId &&
                          trans.Voucher   == link.Voucher       &&
                          trans.TransDate == link.TransDate;

                ret += transOpen.AmountMST;
            }

            next link;
        }

        return - ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCondition</Name>
				<Source><![CDATA[
    display PaymTxt paymentCondition()
    {
        return PaymTerm::txt(this.Payment, this.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDueDate</Name>
				<Source><![CDATA[
    private DueDate paymentDueDate()
    {
        return PaymTerm::find(this.Payment).due(this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseOrder</Name>
				<Source><![CDATA[
    display CustPurchaseOrder purchaseOrder()
    {
        return this.SalesId                                     ?
               SalesTable::find(this.SalesId).PurchOrderFormNum :
               CustInvoiceTable::findRecId(this.FreeInvoiceRefRecId).PurchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSource</Name>
				<Source><![CDATA[
    public void refreshDataSource()
    {
        if (FormDataUtil::isFormDataSource(this) && FormDataUtil::getFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
            FormDataUtil::getFormDataSource(this).active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAddress</Name>
				<Source><![CDATA[
    void setInvoiceAddress()
    {
        LogisticsLocation location;
        SalesTable salesTable;

        if (this.SalesId)
        {
            salesTable = SalesTable::find(this.SalesId);

            if (salesTable)
            {
                this.Name = salesTable.DeliveryName;
                this.PostalAddress = salesTable.DeliveryPostalAddress;
            }
        }

        if (!salesTable)
        {
            CustTable custTable = this.custTable_InvoiceAccount();
            this.Name = custTable.name();

            location = LogisticsLocationDefault::findSimpleDefault(custTable,
                LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice));
        }

        if (location)
        {
            this.PostalAddress = LogisticsPostalAddress::findByLocation(location.RecId).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>ListCode</c> field based on the advance invoice's
    /// postal address.
    /// </summary>
    void setListCode()
    {
        this.Listcode = EUSalesList::resolveListCodeByCountryState(LogisticsPostalAddress::findRecId(this.PostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transList_W</Name>
				<Source><![CDATA[
    public RecordSortedList transList_W()
    {
        CzCustAdvanceInvoiceLine trans;

        RecordSortedList ret = new RecordSortedList(tablenum(CzCustAdvanceInvoiceLine));
        ret.sortOrder(fieldnum(CzCustAdvanceInvoiceLine, LineNum), fieldnum(CzCustAdvanceInvoiceLine, RecId));

        while select trans
            where trans.ParentRecId == this.RecId
        {
            ret.ins(trans);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableID_W</Name>
				<Source><![CDATA[
    public tableId transTableID_W()
    {
        return tablenum(CzCustAdvanceInvoiceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulationModified</Name>
				<Source><![CDATA[
    public void triangulationModified()
    {
        if (this.Triangulation)
        {
            this.currencyModified(false);
        }
        else
        {
            if (this.ExchrateSecond)
            {
                this.ExchRate       = this.crossrate();
                this.ExchrateSecond = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CzCustAdvanceInvoiceTable this_Orig = this.orig();

        ttsbegin;

        this.checkCurrencyCode();

        super();

        if (this.OneTimeCustomer   &&
           (this.Name               != this_Orig.Name               ||
            this.PostalAddress      != this_Orig.PostalAddress))
        {
            CustomerEntity customer = DirParty::constructFromCommon(this.custTable_OrderAccount(true),
                                                       DateTimeUtil::getSystemDateTime(),
                                                       DirPartyType::None,
                                                       true,
                                                       false);
            customer.initFromCustAdvanceInvoiceTable_CZ(this);
            customer.update();
        }

        if (! this.InvoiceAccount)
        {
            this.InvoiceAccount = this.OrderAccount;
        }

        if (this_Orig.PaymentSched &&
            this_Orig.PaymentSched != this.PaymentSched)
        {
            CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);
        }

        if (!this.HeadId)
        {
            this.HeadId = newGuid();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (PaymTerm::isCashAccount(this.Payment) && this.PaymentSched )
        {
            ret = checkFailed("@SYS27358");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an advance invoice exists for the provided free text invoice.
    /// </summary>
    /// <param name="_invoiceRecId">
    /// The <c>RefRecId</c> value of the free text invoice.
    /// </param>
    /// <returns>
    /// true if an advance invoice exists; otherwise, false.
    /// </returns>
    public static boolean existsFreeTextInvoice(CustInvoiceTableRefRecId _invoiceRecId)
    {
        return (select firstonly RecId from czCustAdvanceInvoiceTable where
                    czCustAdvanceInvoiceTable.FreeInvoiceRefRecId == _invoiceRecId).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an advance invoice exists for the provided sales order id.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> of the sales order.
    /// </param>
    /// <returns>
    /// true if an advance invoice exists; otherwise, false.
    /// </returns>
    public static boolean existsSalesId(SalesId _salesId)
    {
        return (select firstonly RecId from czCustAdvanceInvoiceTable where
                    czCustAdvanceInvoiceTable.SalesId == _salesId).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsVoucherDate</Name>
				<Source><![CDATA[
    public static boolean existsVoucherDate(
        Voucher   _voucher,
        TransDate _date)
    {
        return (select firstonly RecId from czCustAdvanceInvoiceTable where
                    czCustAdvanceInvoiceTable.Voucher     == _voucher &&
                    czCustAdvanceInvoiceTable.InvoiceDate == _date).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureEnabled</Name>
				<Source><![CDATA[
    public static boolean featureEnabled()
    {
        #EECountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeCZHUPL)
            && (select firstonly RecId from czCustAdvanceInvoiceTable).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureEnabled_Ledger</Name>
				<Source><![CDATA[
    public static boolean featureEnabled_Ledger(
        SalesId                  _salesId  = '',
        CustInvoiceTableRefRecId _refRecID = 0)
    {
        CzCustAdvanceInvoiceTable advanceInvoiceTable;
        #ISOCountryRegionCodes

        if (_salesId && _refRecID)
            throw error(Error::wrongUseOfFunction(funcname()));

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL]))
            return false;

        // select AI related to SO, FTI or just any AI - depending on parameters
        select firstonly RecId from advanceInvoiceTable
            where (! _salesId  ||
                   advanceInvoiceTable.SalesId             == _salesId)  &&
                  (! _refRecID ||
                   advanceInvoiceTable.FreeInvoiceRefRecId == _refRecID) &&
                  advanceInvoiceTable.CustPostingProfile;

        return advanceInvoiceTable.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllForPaymentDifferentTaxGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the advance invoices linked to the specified payment that contain different tax groups than the payment.
    /// </summary>
    /// <param name="_payment">
    /// A payment that may be linked to one or more advance invoices.
    /// </param>
    /// <returns>
    /// A dataset of advance invoices with different tax groups than the given payment, positioned on the first
    /// record; otherwise, an empty record buffer.
    /// </returns>
    /// <remarks>
    /// The use of the 'firstonly' keyword is intentionally avoided so callers can iterate the possible dataset.
    /// </remarks>
    public static CzCustAdvanceInvoiceTable findAllForPaymentDifferentTaxGroups(LedgerJournalTrans _payment)
    {
        CzCustAdvanceInvoiceLink  link;
        CzCustAdvanceInvoiceLine  advanceInvoiceLine;
        CzCustAdvanceInvoiceTable advanceInvoiceTable;

        select crosscompany advanceInvoiceTable
            exists join advanceInvoiceLine
                where advanceInvoiceLine.ParentRecId == advanceInvoiceTable.RecId &&
                      (advanceInvoiceLine.TaxGroup     != _payment.TaxGroup ||
                       advanceInvoiceLine.TaxItemGroup != _payment.TaxItemGroup)
            exists join link
                where link.InvoiceCompany      == advanceInvoiceTable.DataAreaId &&
                      link.AdvanceInvoiceRecId == advanceInvoiceTable.RecId &&
                      link.PaymentCompany      == _payment.DataAreaId &&
                      link.Voucher             == _payment.Voucher &&
                      link.TransDate           == _payment.TransDate;

        return advanceInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    public static CzCustAdvanceInvoiceTable findByCompany(
        CompanyId   _companyId,
        recId       _recId ,
        boolean     _forupdate = false)
    {
        CzCustAdvanceInvoiceTable advanceInvoiceTable;

        changecompany (_companyId)
        {
            advanceInvoiceTable = CzCustAdvanceInvoiceTable::findRecId(_recId, _forupdate);
        }

        return advanceInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceId</Name>
				<Source><![CDATA[
    public static CzCustAdvanceInvoiceTable findInvoiceId(InvoiceId _invoiceId,
                                                          boolean   _update = false)
    {
        CzCustAdvanceInvoiceTable invoiceTable;

        invoiceTable.selectForUpdate(_update);

        if (_invoiceId)
        {
            select firstonly invoiceTable
                where invoiceTable.InvoiceId == _invoiceId;
        }

        return invoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static CzCustAdvanceInvoiceTable findRecId(RecId   _recId,
                                                      boolean _update = false)
    {
        CzCustAdvanceInvoiceTable invoiceTable;

        invoiceTable.selectForUpdate(_update);

        select firstonly invoiceTable
            where invoiceTable.RecId == _recId;

        return invoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    public static CzCustAdvanceInvoiceTable findVoucherDate(
        Voucher   _voucher,
        TransDate _date,
        boolean   _forupdate = false)
    {
        CzCustAdvanceInvoiceTable table;

        if (_voucher && _date)
        {
            if (_forupdate)
            {
                table.selectForUpdate(true);
            }
            select firstonly table where
                table.Voucher     == _voucher &&
                table.InvoiceDate == _date;
        }

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInvoices_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of original advance invoices for the given credit note.
    /// </summary>
    /// <param name="custAdvanceInvoiceRecId">
    /// The credit note advance invoice.
    /// </param>
    /// <param name="_separator">
    /// The separator string to use in between original invoices; optional.  Default is a new line.
    /// </param>
    /// <param name="_listPattern">
    /// The replacement pattern to use in the strFmt statement when creating the list; optional.
    /// Default is to show invoice numbers and invoice dates.
    /// Pass "%1" to show invoice numbers only.
    /// Pass "%2" to show invoice dates only.
    /// </param>
    /// <returns>
    /// A concatenated string containing a list of original advance invoices.
    /// </returns>
    /// <remarks>
    /// Intended for the Polish version of the customer advance invoice report.
    /// </remarks>  
    public static str originalInvoices_W(CzCustAdvanceInvoiceRecId custAdvanceInvoiceRecId,
                                                str _separator = '\n',
                                                str _listPattern = '\%1 \%2')
    {
        str         ret;
        Set         retSet = new Set(Types::String);
        CzCustAdvanceInvoiceLine  invoiceLine;
        CzCustAdvanceInvoiceTable origInvoiceTable;
        CzCustAdvanceInvoiceLine  origInvoiceLine;

        while select InvoiceId, InvoiceDate from origInvoiceTable
        exists join origInvoiceLine
            where origInvoiceLine.ParentRecId == origInvoiceTable.RecId
        exists join invoiceLine
            where invoiceLine.OrigAdvanceInvoiceLineRecId == origInvoiceLine.RecId &&
                  invoiceLine.ParentRecId                 == custAdvanceInvoiceRecId
        {
            str value = strFmt(_listPattern, origInvoiceTable.InvoiceId, origInvoiceTable.InvoiceDate);
            if (! retSet.in(value))
            {
                retSet.add(value);
            }
        }

        SetIterator retIt = new SetIterator(retSet);
        while (retIt.more())
        {
            ret += (ret ? _separator : '') + retIt.value();
            retIt.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    public static boolean promptConvertCurrencyCode()
    {
        return (Box::okCancel("@SYS54756", DialogButton::Ok) == DialogButton::Ok);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlCustAdvanceInvoiceItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the records in the <c>PlCustAdvanceInvoiceItems</c> table, based on the <c>CustInvoiceLine</c> records and on the <c>SalesLine</c> records.
    /// </summary>
    public void createPlCustAdvanceInvoiceItems()
    {
        PlCustAdvanceInvoiceItems   custAdvanceInvoiceItems;
        Query                       query = new Query();
    
        if (this.Posted
            && this.FiscalDocState_PL == PlFiscalDocState::Invoice
            && (this.Type == AdvanceInvoiceType_W::Common
                || this.Type == AdvanceInvoiceType_W::CreditNote)
            && (this.FreeInvoiceRefRecId
                || this.SalesId))
        {
            if (this.Type == AdvanceInvoiceType_W::CreditNote
                && !this.orig().Posted)
            {
                query = PlCustAdvanceInvoiceItems::createCreditNoteQuery(this);
            }
            else
            {
                if (PlCustAdvanceInvoiceItems::exist(this.RecId))
                {
                    warning("@SYP4881130");
    
                    delete_from custAdvanceInvoiceItems
                        where custAdvanceInvoiceItems.ParentRecId == this.RecId;
                }
    
                if (this.FreeInvoiceRefRecId)
                {
                    query.addDataSource(tableNum(CustInvoiceLine)).addRange(fieldNum(CustInvoiceLine, ParentRecId)).value(queryValue(this.FreeInvoiceRefRecId));
                }
                else
                {
                    query.addDataSource(tableNum(SalesLine)).addRange(fieldNum(SalesLine, SalesId)).value(queryValue(this.SalesId));
                }
            }
    
            QueryRun queryRun = new QueryRun(query);
    
            while (queryRun.next())
            {
                Common common = queryRun.getNo(1);
    
                custAdvanceInvoiceItems.clear();
    
                switch (common.TableId)
                {
                    case tableNum(SalesLine):
                        custAdvanceInvoiceItems.initFromSalesLine(common);
                        break;
    
                    case tableNum(CustInvoiceLine):
                        custAdvanceInvoiceItems.initFromCustInvoiceLine(common);
                        break;
    
                    case tableNum(PlCustAdvanceInvoiceItems):
                        custAdvanceInvoiceItems.initFromPlCustAdvanceInvoiceItems(common);
                        break;
    
                    default:
                        throw error(Error::wrongUseOfFunction(funcname()));
                }
    
                custAdvanceInvoiceItems.ParentRecId = this.RecId;
                custAdvanceInvoiceItems.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByHeadId</Name>
				<Source><![CDATA[
    public static CzcustAdvanceInvoiceTable findByHeadId(SysGuid _headId, boolean _forUpdate = false)
    {
        CzCustAdvanceInvoiceTable invoiceTable;

        invoiceTable.selectForUpdate(_forUpdate);

        select firstonly invoiceTable
            where invoiceTable.HeadId == _headId;

        return invoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice amount in the MST currency.
    /// </summary>
    /// <returns>Invoice amount MST.</returns>
    public AmountMST invoiceAmountMST()
    {
        return this.amountMST(this.InvoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAdvanceInvoiceContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from advance invoice contract.
    /// </summary>
    /// <param name = "_advanceInvoiceContract">The contract.</param>
    public void initFromAdvanceInvoiceContract(AdvanceInvoiceContract_W _advanceInvoiceContract)
    {
        if (!_advanceInvoiceContract)
        {
            return;
        }

        this.SalesId = _advanceInvoiceContract.parmSalesTable().SalesId;
        this.RetailStoreId = _advanceInvoiceContract.parmRetailStoreId();
        this.RetailTerminalId = _advanceInvoiceContract.parmRetailTerminalId();
        this.RetailTransactionId = _advanceInvoiceContract.parmRetailTransactionId();
        this.RetailOrderReferenceId = _advanceInvoiceContract.parmRetailOrderChannelReferenceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoicePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if invoice is posted.
    /// </summary>
    /// <returns>Invoice post status.</returns>
    private boolean isInvoicePosted()
    {
        return this.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be deleted.
    /// </summary>
    /// <returns>Record validation result.</returns>
    public boolean validateDelete()
    {
        boolean ret;
        ret = super();

        if (ret && this.isInvoicePosted())
        {
            ret = checkFailed(strFmt( "@ApplicationSuite_Localization:AdvancedInvoiceCheckDelete", this.InvoiceId));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>CZ,HU,PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS221002</DeveloperDocumentation>
	<FormRef>CzCustAdvanceInvoice</FormRef>
	<Label>@GLS107927</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InvoiceAccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CzCustAdvanceInvoiceLink</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CzCustAdvanceInvoiceLink</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CzCustAdvanceInvoiceLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CzCustAdvanceInvoiceLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address_RU</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRateSecond</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>crossrate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exchRateTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeCustomer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDoc_PL</Name>
			<Label>@GLS109778</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocState_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocDate_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalPrinterCode_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalInvoiceAccount_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalOrderAccount_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInvoiceAddress_PL</Name>
			<Label>@GLS111658</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fiscalInvoiceAddressing_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInvoiceName_PL</Name>
			<Label>@SYS27874</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalInvoiceAccount_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fiscalInvoiceName_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalOrderAddress_PL</Name>
			<Label>@SYS22223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fiscalOrderAddressing_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalOrderName_PL</Name>
			<Label>@SYS27874</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalOrderAccount_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fiscalOrderName_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiroMoneyTransferSlip</Name>
			<Label>@SYS2723</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeCustomer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocState_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GridSalesEditLines</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amountCurOpen</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VatDueDate_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAccount</Name>
			<Label>@SYS21836</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreeInvoiceRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchrateSecond</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankConstantSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VAT</Name>
			<Label>@GLS107908</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostVAT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostVATDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxDocumentCreate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Retail</Name>
			<Label>@RET3014</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailOrderReferenceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailStoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailTerminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailTransactionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoicing</Name>
			<Label>@BusinessDocumentSubmissionService:EInvocing</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubmissionUUID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalOrderAccount_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankConstantSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzConstantSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
			<Label>@SYS3815</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
			<Label>@SYS14021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchrateSecond</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FiscalDocDate_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlFiscalDocDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalDocState_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PlFiscalDocState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalInvoiceAccount_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalPrinterCode_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlFiscalPrinterCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FreeInvoiceRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzCustAdvanceInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeCustomer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeCustomer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Posted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<Label>@SYS59471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzPostVAT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostVATDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzPostVATDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CzAdvanceInvoiceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxDocumentCreate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzTaxDocumentCreateDoc</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Triangulation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AdvanceInvoiceType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAdvanceInvoiceVoucher_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesTaker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
			<Label>@SYS4466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>HeadId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailOrderReferenceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOrderChannelReferenceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailStoreId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailTerminalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailTransactionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransactionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubmissionUUID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>UUID</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferencesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FreeInvoiceRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustPostingProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailOrderReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailStoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailTerminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CzAdvanceInvoiceTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Status</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendGroup</MapField>
					<MapFieldTo>CustGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>Listcode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeCustVend</MapField>
					<MapFieldTo>OneTimeCustomer</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>Log</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPersonId</MapField>
					<MapFieldTo>ContactPersonId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
					<MapFieldTo>Posted</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankConstantSymbol</MapField>
					<MapFieldTo>BankConstantSymbol</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
					<MapFieldTo>PostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesTaker</MapField>
					<MapFieldTo>WorkerSalesTaker</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PlFiscalDocument</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PlFiscalDocumentExtension</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>FiscalDocDate</MapField>
					<MapFieldTo>FiscalDocDate_PL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalDocState</MapField>
					<MapFieldTo>FiscalDocState_PL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalInvoiceAccount</MapField>
					<MapFieldTo>FiscalInvoiceAccount_PL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalOrderAccount</MapField>
					<MapFieldTo>FiscalOrderAccount_PL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalPrinterCode</MapField>
					<MapFieldTo>FiscalPrinterCode_PL</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BankConstantSymbol</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankConstantSymbol</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankConstantSymbol</Name>
					<Field>BankConstantSymbol</Field>
					<RelatedField>ConstantSymbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustAdvanceInvoiceTable_CZ</Name>
			<RelatedTable>CzCustAdvanceInvoiceTable</RelatedTable>
			<RelatedTableRole>CzCustAdvanceInvoiceTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CzCustAdvanceInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroup</Name>
					<SourceEDT>CustGroupId</SourceEDT>
					<Field>CustGroup</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FreeInvoiceRefRecId</Name>
					<SourceEDT>CustInvoiceTableRefRecId</SourceEDT>
					<Field>FreeInvoiceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustLedger_CustPostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger_CustPostingProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustPostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>CustPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustLedger_PostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger_PostingProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustAdvanceInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>CustPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_FiscalInvoiceAccount_PL</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_FiscalInvoiceAccount_PL</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalInvoiceAccount_PL</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>FiscalInvoiceAccount_PL</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_FiscalOrderAccount_PL</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_FiscalOrderAccount_PL</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalOrderAccount_PL</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>FiscalOrderAccount_PL</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_InvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_InvoiceAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_OrderAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_OrderAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustAdvanceInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>CustPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlFiscalPrinterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PlFiscalPrinterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalPrinterCode_PL</Name>
					<SourceEDT>PlFiscalPrinterCode</SourceEDT>
					<Field>FiscalPrinterCode_PL</Field>
					<RelatedField>FiscalPrinterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FiscalPrinterIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostalAddress</Name>
					<Field>PostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesParmTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesTaker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesTaker</Name>
					<Field>WorkerSalesTaker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InvoiceId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CzCustAdvanceInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailStoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>RetailStoreId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailTerminalId</Name>
					<Field>RetailTerminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTransactionTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailTransactionTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailStoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>RetailStoreId</Field>
					<RelatedField>store</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailTerminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>RetailTerminalId</Field>
					<RelatedField>terminal</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailTransactionId</Name>
					<SourceEDT>RetailTransactionId</SourceEDT>
					<Field>RetailTransactionId</Field>
					<RelatedField>transactionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>transactionIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>