<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendItemMatchingPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendItemMatchingPolicy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    public display ItemName displayItemName()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendName</Name>
				<Source><![CDATA[
    public display VendName displayVendName()
    {
        return VendTable::find(this.VendAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(VendItemMatchingPolicy, MatchingPolicy):
                    if (!this.RecId || this.MatchingPolicy != this.orig().MatchingPolicy)
                    {
                        if (PurchMatchingPolicyManager::canMatchingPolicyBeChanged(this.MatchingPolicy) == false)
                        {
                            isValid = checkFailed(strfmt("@SYS130454", VendParameters::find().MatchingPolicy));
                        }
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>VendItemMatchingPolicy</c> table exists.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account of the record to find.
    /// </param>
    /// <param name="_itemId">
    /// The item Id of the record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(VendAccount _vendAccount, ItemId _itemId)
    {
        VendItemMatchingPolicy vendItemMatchingPolicy;

        select firstonly RecId from vendItemMatchingPolicy
            where vendItemMatchingPolicy.VendAccount == _vendAccount &&
                vendItemMatchingPolicy.ItemId == _itemId;

        return vendItemMatchingPolicy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendItemMatchingPolicy</c> table.
    /// </summary>
    /// <param name="_vendAccount">
    ///    The vendor account of the record to find.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VendItemMatchingPolicy</c> table; otherwise, an empty record.
    /// </returns>
    public static VendItemMatchingPolicy find(VendAccount _vendAccount, ItemId _itemId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendItemMatchingPolicy vendItemMatchingPolicy;

        vendItemMatchingPolicy.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendItemMatchingPolicy.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendItemMatchingPolicy
            where vendItemMatchingPolicy.VendAccount == _vendAccount &&
                  vendItemMatchingPolicy.ItemId == _itemId;

        return vendItemMatchingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static VendItemMatchingPolicy findRecId(recId _recId, boolean _forUpdate = false)
    {
        VendItemMatchingPolicy vendItemMatchingPolicy;

        if (_recId)
        {
            vendItemMatchingPolicy.selectForUpdate(_forUpdate);

            select firstonly vendItemMatchingPolicy
                where vendItemMatchingPolicy.RecId == _recId;
        }

        return vendItemMatchingPolicy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS130085</DeveloperDocumentation>
	<FormRef>PurchLineMatchingPolicy</FormRef>
	<Label>@SYS130084</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>VendAccount</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>VendAccountItemIdIdx</ClusteredIndex>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>VendAccountItemIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MatchingPolicy</Name>
			<Label>@SYS129852</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchMatchingPolicyOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendAccountItemIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>