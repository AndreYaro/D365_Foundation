<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendPaymProposalLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accumulatedCashDiscAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount of discount involved with the payment proposal in the monetary standard (MST)
    ///    currency of the account of the payment proposal.
    /// </summary>
    /// <returns>
    ///    The amount of discount involved with the payment proposal.
    /// </returns>
    /// <remarks>
    ///    The payment date is used as the exchange rate date for conversions. The amount is produced by
    ///    summing individually converted detail values instead of converting the sum of the detail values.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display CashDiscAmount accumulatedCashDiscAmountMST()
    {
        Debug::assert(this.company() == curext());

        CustVendTransOpen custVendTransOpen;
        switch (this.AccountType)
        {
            case ModuleCustVend::Cust:
                CustTransOpen custTransOpen;
                custVendTransOpen = custTransOpen;
                break;

            case ModuleCustVend::Vend:
                VendTransOpen vendTransOpen;
                custVendTransOpen = vendTransOpen;
                break;
        }

        AmountMST cashDiscAmountMst;
        SpecTrans specTransFieldList;
        while select CrossCompany RecId, CrossRate
        from specTransFieldList
            where specTransFieldList.SpecCompany == this.DataAreaId
               && specTransFieldList.SpecTableId == this.TableId
               && specTransFieldList.SpecRecId == this.RecId
        join custVendTransOpen
            where custVendTransOpen.DataAreaId == specTransFieldList.RefCompany
               && custVendTransOpen.TableId == specTransFieldList.RefTableId
               && custVendTransOpen.RecId == specTransFieldList.RefRecId
        {
            changecompany(custVendTransOpen.company())
            {
                // Get the discount grace days from the company of the transaction
                DiscGraceDays discGraceDays = this.paymModeTable().DiscGraceDays;
                CustVendTransOpenData custVendTransOpenData = CustVendTransOpenData::construct(custVendTransOpen);
                CustVendTransCashDisc custVendTransCashDisc = CustVendTransCashDisc::findByUseCashDisc(
                    this.AccountType,
                    custVendTransOpen.TableId,
                    custVendTransOpen.RecId,
                    custVendTransOpen.UseCashDisc,
                    this.PaymDate,
                    discGraceDays);
                CustVendTrans custVendTrans = custVendTransOpenData.custVendTrans();

                if (custVendTransCashDisc.CashDiscAmount != 0)
                {
                    AmountCur interimAmount;
                    // Adjust the cash discount amount by the discount already taken
                    AmountCur cashDiscToTake = custVendTransOpen.getCashDiscAmountToTake(custVendTransCashDisc.CashDiscAmount);
                    CurrencyExchangeHelper currencyExchangeHelper;

                    if (custVendTrans.CurrencyCode == this.CurrencyCode)
                    {
                        // Currencies are the same between the ref and the spec - convert to Spec company currency
                        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                            Ledger::primaryLedger(CompanyInfo::findDataArea(this.AccountNumCompany).RecId),
                            this.PaymDate);

                        cashDiscAmountMst += currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, cashDiscToTake, true);
                    }
                    else if (specTransFieldList.CrossRate != 0)
                    {
                        // The cross rate represents a direct currency conversion from the Ref currency to the Spec currency
                        // Use the cross rate to convert to Spec currency then to the Spec company currency
                        interimAmount = (cashDiscToTake  * specTransFieldList.CrossRate / 100);

                        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                            Ledger::primaryLedger(CompanyInfo::findDataArea(this.AccountNumCompany).RecId),
                            this.PaymDate);

                        cashDiscAmountMst += currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, interimAmount, true);
                    }
                    else
                    {
                        // Convert from Ref currency to Ref company currency - do not round
                        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                            Ledger::primaryLedger(CompanyInfo::findDataArea(custVendTrans.company()).RecId),
                            this.PaymDate);

                        interimAmount = currencyExchangeHelper.calculateTransactionToAccounting(custVendTrans.CurrencyCode, cashDiscToTake, false);

                        // Get the MST currency of the payment company
                        CurrencyCode pmtCompanyMstCurrency = Ledger::accountingCurrency(CompanyInfo::findDataArea(this.AccountNumCompany).RecId);

                        // Convert from Ref company currency to Spec company currency using exchange rate from Ref company
                        cashDiscAmountMst += currencyExchangeHelper.calculateAccountingToTransaction(pmtCompanyMstCurrency, interimAmount, true);
                    }
                }
            }
        }

        return cashDiscAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer account or vendor account record for the current payment proposal.
    /// </summary>
    /// <returns>
    /// A CustVendTable buffer.
    /// </returns>
    public CustVendTable custVendTable()
    {
        CustVendTable custVendTable;

        changecompany(this.AccountNumCompany)
        {
            switch (this.AccountType)
            {
                case ModuleCustVend::Cust:
                    custVendTable = CustTable::find(this.AccountNum);
                    break;

                case ModuleCustVend::Vend:
                    custVendTable = VendTable::find(this.AccountNum);
                    break;
            }
        }

        return custVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransStatic</Name>
				<Source><![CDATA[
    public CustVendTransStatic custVendTransStatic()
    {
        return CustVendTransStatic::newModuleCustVend(this.AccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        CustVendPaymProposalLine custVendPaymProposalLine;
        ttsbegin;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            delete_from custVendPaymProposalLine
                where custVendPaymProposalLine.VATPaymRefRecId_RU == this.RecId;
        }
        super();
        ttscommit;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor remittance address that is associated with the vendor remittance location on the
    /// <c>CustVendPaymProposalLine</c> table.
    /// </summary>
    /// <returns>
    /// The remittance address.
    /// </returns>
    /// <remarks>
    /// The current date effective remittance address is always returned.
    /// </remarks>
    public display RemittanceAddressing displayRemittanceAddress()
    {
        if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address), AccessType::View))
        {
            error("@SYS57330");
        }

        return LogisticsLocationEntity::location2PostalAddress(this.RemittanceLocation).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendDefaultDimension</Name>
				<Source><![CDATA[
    private DimensionDefault getCustVendDefaultDimension()
    {
        DimensionDefault defaultDimension;

        switch (this.AccountType)
        {
            case ModuleCustVend::Cust:
                defaultDimension = CustTable::find(this.AccountNum).DefaultDimension;
                break;

            case ModuleCustVend::Vend:
                defaultDimension = VendTable::find(this.AccountNum).DefaultDimension;
                break;
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // The JournalCompany field is present only to expose the dataAreaId of the record for use in queries which
        // filter for records in a specific company. The value always matches the company of the record.
        this.JournalCompany = this.company();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the latest due date for the invoices involved in the current payment proposal.
    /// </summary>
    /// <returns>
    ///    A <c>DueDate</c> value.
    /// </returns>
    public DueDate maxDueDate()
    {
        CustVendTransOpen custVendTransOpen = this.custVendTransStatic().custVendTransOpen();
        SpecTrans specTrans;
        DueDate dueDate = dateNull();

        while select CrossCompany DueDate, TransDate from custVendTransOpen
        join RecId from specTrans
            where specTrans.SpecCompany == this.DataAreaId
               && specTrans.SpecTableId == this.TableId
               && specTrans.SpecRecId   == this.RecId
               && specTrans.RefCompany  == custVendTransOpen.DataAreaId
               && specTrans.RefTableId  == custVendTransOpen.TableId
               && specTrans.RefRecId    == custVendTransOpen.RecId
        {
            if (dueDate == dateNull())
            {
                dueDate = custVendTransOpen.DueDate ? custVendTransOpen.DueDate : custVendTransOpen.TransDate;
            }
            else
            {
                if (dueDate < (custVendTransOpen.DueDate ? custVendTransOpen.DueDate : custVendTransOpen.TransDate))
                {
                    dueDate = custVendTransOpen.DueDate ? custVendTransOpen.DueDate : custVendTransOpen.TransDate;
                }
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendTrans, PaymMode):
                this.PaymModeMap::modifiedPaymMode();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicAccount parmLedgerDimension(DimensionDynamicAccount _ledgerDimension = this.LedgerDimension)
    {
        this.LedgerDimension = _ledgerDimension;
        return this.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymAccount</Name>
				<Source><![CDATA[
    public LedgerJournalAC parmPaymAccount(LedgerJournalAC _account = '', LedgerJournalACType _accountType = this.PaymAccountType)
    {
        if (!prmisDefault(_accountType))
        {
            this.PaymAccountType = _accountType;
        }

        // If company has not been specified, use the current company
        selectableDataArea proposalLineCompany = this.company();
        if (!proposalLineCompany || !xDataArea::exist(proposalLineCompany))
        {
            proposalLineCompany = curext();
        }

        LedgerJournalAC account;
        changecompany(proposalLineCompany)
        {
            // If account has been changed, update the backing ledger dimension value
            if (!prmisDefault(_account))
            {
                if (_account)
                {
                    this.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_account, _accountType);
                    account = _account;
                }
                else
                {
                    account = '';
                    this.LedgerDimension = 0;
                }
            }
            else if (this.LedgerDimension)
            {
                DimensionAttributeValueCombination ledgerDimension;
                // If the account has not been changed, then pull the value from ledger dimension as the master
                select firstonly DisplayValue from ledgerDimension where ledgerDimension.RecId == this.LedgerDimension;
                account = ledgerDimension.DisplayValue;
            }
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the proposed payment amount in the currency for the payment proposal.
    /// </summary>
    /// <returns>
    ///    The amount of the payment proposal.
    /// </returns>
    /// <remarks>
    ///    The payment date is used as the exchange rate date for conversions.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountCur paymAmountCur()
    {
        return SpecTransManager::getTotalSettleAmountForSpecReference(
            this.DataAreaId,
            this.TableId,
            this.RecId,
            this.CurrencyCode,
            this.AccountNumCompany,
            this.PaymDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the proposed payment amount in the monetary standard (MST) currency of the account of
    ///    the proposal.
    /// </summary>
    /// <returns>
    ///    The value of the payment proposal.
    /// </returns>
    /// <remarks>
    ///    The payment date is used as the exchange rate date for conversions. The amount is produced by
    ///    summing individually converted detail values instead of converting the sum of the detail values.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMST paymAmountMST()
    {
        SpecTrans specTrans;
        AmountMST paymAmountMst;

        while select specTrans
            where specTrans.SpecCompany == this.DataAreaId
               && specTrans.SpecTableId == this.TableId
               && specTrans.SpecRecId == this.RecId
        {
            paymAmountMst += this.paymTransactionAmountMST(specTrans);
        }

        return paymAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the payment mode record referenced by the current payment proposal.
    /// </summary>
    /// <returns>
    /// The <c>CustVendPaymModeTable</c> record for the current payment proposal.
    /// </returns>
    public CustVendPaymModeTable paymModeTable()
    {
        CustVendPaymModeTable custVendPaymModeTable;

        switch (this.AccountType)
        {
            case ModuleCustVend::Cust:
                custVendPaymModeTable = CustPaymModeTable::find(this.PaymMode);
                break;

            case ModuleCustVend::Vend:
                custVendPaymModeTable = VendPaymModeTable::find(this.PaymMode);
                break;
        }

        return custVendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeTableByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the payment mode record identified by the current payment proposal from the specified
    ///    company.
    /// </summary>
    /// <param name="_companyId">
    ///    The company from which to retrieve the payment mode record.
    /// </param>
    /// <returns>
    ///    The <c>CustVendPaymModeTable</c> record identified by this payment proposal from the specified
    ///    company.
    /// </returns>
    /// <remarks>
    ///    It is possible that the payment mode record identified does not exist in the specified company.
    ///    This causes an empty record.
    /// </remarks>
    public CustVendPaymModeTable paymModeTableByCompany(CompanyId _companyId)
    {
        CustVendPaymModeTable paymModeTable;

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            paymModeTable = this.paymModeTable();
        }

        return paymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymNote</Name>
				<Source><![CDATA[
    public PaymNote paymNote()
    {
        CustVendPaymNote custVendPaymNote;

        // Create the CustVendTransStatic instance in the company of the customer/vendor
        changecompany(this.AccountNumCompany)
        {
            custVendPaymNote = CustVendPaymNote::newCustVendTransStatic(CustVendTransStatic::newModuleCustVend(this.AccountType));
        }

        return custVendPaymNote.buildPaymNote(this.company(), this.TableId, this.RecId, DirPartyTable::findRec(this.custVendTable().Party).LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExchangeHelperForPaymentTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets an instance of the <c>CurrencyExchangeHelper</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>CurrencyExchangeHelper</c> class.
    /// </returns>
    protected CurrencyExchangeHelper getCurrencyExchangeHelperForPaymentTransaction()
    {
        return CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(this.AccountNumCompany).RecId),
            this.PaymDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymTransactionAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of a specific transaction in a payment proposal in the monetary standard
    /// (MST) currency of the account of the payment proposal.
    /// </summary>
    /// <param name="_specTrans">
    /// The <c>SpecTrans</c> record that references the targeted open transaction.
    /// </param>
    /// <returns>
    /// The value of the transaction in the monetary standard (MST) currency of the payment proposal.
    /// </returns>
    /// <remarks>
    /// Supplied <c>SpecTrans</c> record must reference a <c>CustTransOpen</c> or a <c>VendTransOpen</c>
    /// record.
    /// </remarks>
    public AmountMST paymTransactionAmountMST(SpecTrans _specTrans)
    {
        Debug::assert(this.company() == curext());

        AmountCur specTransBalance = _specTrans.Balance01;
        CustVendTrans custVendTrans;
        switch (_specTrans.RefTableId)
        {
            case tableNum(CustTransOpen):
                custVendTrans = _specTrans.custTrans();
                break;

            case tableNum(VendTransOpen):
                custVendTrans = _specTrans.vendTrans();

                TaxWithholdTrans taxWithholdTrans = null;

                changecompany(_specTrans.RefCompany)
                {
                    // Include withholding tax amount in Ref currency before translating to Spec currency
                    select sum(InvoiceTaxWithholdAmount) from taxWithholdTrans
                        where taxWithholdTrans.SpecTransId == _specTrans.RecId;
                }

                specTransBalance += taxWithholdTrans.InvoiceTaxWithholdAmount;
                break;

            default:
                Debug::assert(false);
        }

        if (!custVendTrans)
        {
            return 0.0;
        }

        CurrencyExchangeHelper currencyExchangeHelper = this.getCurrencyExchangeHelperForPaymentTransaction();

        AmountCur interimAmount;
        AmountMST paymTransactionAmountMst;
        if (custVendTrans.CurrencyCode == this.CurrencyCode)
        {
            // Currencies are the same between the transaction and the payment - convert directly to to Spec company currency
            paymTransactionAmountMst = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, specTransBalance, true);
        }
        else if (_specTrans.CrossRate != 0)
        {
            // The cross rate represents a direct currency conversion from the Ref currency to the Spec currency
            // Use the cross rate to convert to Spec currency then to the Spec company currency
            interimAmount = (specTransBalance * _specTrans.CrossRate / 100);

            paymTransactionAmountMst = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, interimAmount, true);
        }
        else
        {
            // Convert from Ref currency to Ref company currency - do not round
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(custVendTrans.company()).RecId),
                this.PaymDate);

            interimAmount = currencyExchangeHelper.calculateTransactionToAccounting(custVendTrans.CurrencyCode, specTransBalance, false);

            // Get the MST currency of the payment company
            CurrencyCode pmtCompanyMstCurrency = Ledger::accountingCurrency(CompanyInfo::findDataArea(this.AccountNumCompany).RecId);

            // Convert from Ref company currency to Spec company currency using the Ref company's exchange rate
            paymTransactionAmountMst = currencyExchangeHelper.calculateAccountingToTransaction(pmtCompanyMstCurrency, interimAmount, true);
        }

        return paymTransactionAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateHashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a hash key for the payment proposal line.
    /// </summary>
    /// <returns>
    /// A hash key.
    /// </returns>
    /// <remarks>
    /// When many invoices have the same characteristics, they are added to the same payment proposal line.  The hash key is generated with
    /// the specific columns from the payment proposal line. It allows for faster performance to find existing payment proposal lines with
    /// the same characteristics.
    ///</remarks>
    public int generateHashKey()
    {
        str hashInput = this.getHashInput();

        return strHash(hashInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePaymAccountAndType</Name>
				<Source><![CDATA[
    public LedgerJournalAccountAndType resolvePaymAccountAndType(
        LedgerJournalACType _defaultType = LedgerJournalACType::Ledger,
        LedgerJournalAC _defaultAccount = '',
        LedgerDimensionAccount _defaultLedgerDimension = 0)
    {
        LedgerJournalAccountAndType ledgerJournalAccountAndType = LedgerJournalAccountAndType::construct();
        if (this.LedgerDimension)
        {
            ledgerJournalAccountAndType.parmAccountType(this.PaymAccountType);
            if (this.PaymAccountType == LedgerJournalACType::Ledger)
            {
                ledgerJournalAccountAndType.parmLedgerDimension(this.parmLedgerDimension());
            }
            else
            {
                ledgerJournalAccountAndType.parmAccountNum(this.parmPaymAccount());
            }
            return ledgerJournalAccountAndType;
        }

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(this.JournalId);
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::CustBillOfExchangeDraw,
                LedgerJournalType::CustPaymRemittance,
                LedgerJournalType::CustBillOfExchangeRedraw:
                ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Cust);
                ledgerJournalAccountAndType.parmAccountNum(this.AccountNum);
                break;

            case LedgerJournalType::CustBillOfExchangeSettle:
                if (this.BankRemittanceType == BankRemittanceType::Discount)
                {
                    ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Ledger);
                    defaultLedgerDimension = CustLedgerAccounts::liabilitiesLedgerDimension(this.AccountNum, CustParameters::find().PostingProfileBillsRemitDiscount);
                    if (defaultLedgerDimension)
                    {
                        ledgerJournalAccountAndType.parmLedgerDimension(CustVendPaymProposalLine::createLedgerDimension(defaultLedgerDimension, ledgerJournalTable, this.getCustVendDefaultDimension()));
                    }
                }
                else if (this.BankRemittanceType == BankRemittanceType::Collection || this.BankRemittanceType == BankRemittanceType::None)
                {
                    ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Bank);
                    ledgerJournalAccountAndType.parmAccountNum(
                        this.CompanyBankAccountIdNegInst ?
                        this.CompanyBankAccountIdNegInst :
                        ledgerJournalTable.BankAccountId);
                }
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                if (LedgerJournalTable::find(this.JournalId).ProtestSettledBill == NoYes::Yes)
                {
                    ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Bank);
                }
                else
                {
                    ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Cust);
                    ledgerJournalAccountAndType.parmAccountNum(this.AccountNum);
                }
                break;

            case LedgerJournalType::VendPromissoryNoteDraw,
                LedgerJournalType::VendPromissoryNoteRedraw:
                ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Vend);
                ledgerJournalAccountAndType.parmAccountNum(this.AccountNum);
                break;

            case LedgerJournalType::VendPromissoryNoteSettle:
                ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Bank);
                ledgerJournalAccountAndType.parmAccountNum(
                    this.CompanyBankAccountIdNegInst ?
                    this.CompanyBankAccountIdNegInst :
                    ledgerJournalTable.BankAccountId);
                break;

            default:
                ledgerJournalAccountAndType.parmAccountType(_defaultType);
                ledgerJournalAccountAndType.parmAccountNum(_defaultAccount);
                ledgerJournalAccountAndType.parmLedgerDimension(_defaultLedgerDimension);
        }

        if (ledgerJournalAccountAndType.parmAccountNum() == '' && ledgerJournalAccountAndType.parmLedgerDimension() == 0)
        {
            CustVendPaymModeTable custVendPaymModeTable = this.paymModeTableByCompany(this.company());

            if (custVendPaymModeTable != null)
            {
                defaultLedgerDimension = 0;
                if (custVendPaymModeTable.FurtherPosting)
                {
                    ledgerJournalAccountAndType.parmAccountType(LedgerJournalACType::Ledger);
                    defaultLedgerDimension = custVendPaymModeTable.InterCompanyLedgerDimension;
                    if (defaultLedgerDimension)
                    {
                        ledgerJournalAccountAndType.parmLedgerDimension(
                            CustVendPaymProposalLine::createLedgerDimension(defaultLedgerDimension, ledgerJournalTable, this.getCustVendDefaultDimension()));
                    }
                }
                else
                {
                    ledgerJournalAccountAndType.parmAccountType(custVendPaymModeTable.paymACType());
                    if (ledgerJournalAccountAndType.parmAccountType() == LedgerJournalACType::Ledger)
                    {
                        defaultLedgerDimension = custVendPaymModeTable.offsetLedgerDimension();
                        if (defaultLedgerDimension)
                        {
                            ledgerJournalAccountAndType.parmLedgerDimension(
                                CustVendPaymProposalLine::createLedgerDimension(defaultLedgerDimension, ledgerJournalTable, this.getCustVendDefaultDimension()));
                        }
                    }
                    else
                    {
                        ledgerJournalAccountAndType.parmAccountNum(custVendPaymModeTable.parmPaymAccount());
                    }
                }
            }
        }

        if (ledgerJournalAccountAndType.parmAccountNum() == '' && ledgerJournalAccountAndType.parmLedgerDimension() == 0)
        {
            // default the account and type from the Journal
            ledgerJournalAccountAndType.parmAccountType(ledgerJournalTable.OffsetAccountType);
            if (ledgerJournalAccountAndType.parmAccountType() == LedgerJournalACType::Ledger)
            {
                defaultLedgerDimension = ledgerJournalTable.parmOffsetLedgerDimension();
                if (defaultLedgerDimension)
                {
                    ledgerJournalAccountAndType.parmLedgerDimension(CustVendPaymProposalLine::createLedgerDimension(defaultLedgerDimension, ledgerJournalTable, this.getCustVendDefaultDimension()));
                }
            }
            else
            {
                ledgerJournalAccountAndType.parmAccountNum(ledgerJournalTable.parmOffsetAccount());
            }
        }

        return ledgerJournalAccountAndType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a ledger dimension for the specified default ledger dimension.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record that specifies the default dimension
    ///    values.
    /// </param>
    /// <param name="_ledgerJournalTable">
    ///    The <c>LedgerJournalTable</c> record that is associated with the payment proposal line.
    /// </param>
    /// <param name="_custVendDefaultDimension">
    ///    The default dimension associated with the proposal line's customer or vendor account.
    /// </param>
    /// <returns>
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </returns>
    public static LedgerDimensionAccount createLedgerDimension(
        LedgerDimensionDefaultAccount _defaultLedgerDimension,
        LedgerJournalTable _ledgerJournalTable,
        DimensionDefault _custVendDefaultDimension)
    {
        if (_defaultLedgerDimension == 0)
        {
            return 0;
        }

        // Get dimension from main account
        MainAccount mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_defaultLedgerDimension);
        MainAccountLegalEntity mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, CompanyInfo::current());

        return LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, _ledgerJournalTable.DefaultDimension, _custVendDefaultDimension, mainAccountLegalEntity.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return (select firstonly RecId from CustVendPaymProposalLine where CustVendPaymProposalLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustVendPaymProposalLine find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;

        custVendPaymProposalLine.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendPaymProposalLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendPaymProposalLine
            where custVendPaymProposalLine.RecId == _recId;

        return custVendPaymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTransJournalNumAndRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find by the payment journal ID and the record ID of the payment.
    /// </summary>
    /// <param name = "_journalId">
    /// A LedgerJournalId value of the payment journal.
    /// </param>
    /// <param name = "_ledgerJournalTransRecId">
    /// The record ID of the <c>LedgerJournalTrans</c> payment record.
    /// </param>
    /// <param name = "_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name = "_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendPaymProposalLine</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendPaymProposalLine findByLedgerJournalTransJournalNumAndRecId(
        LedgerJournalId _journalId,
        RecId _ledgerJournalTransRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;

        custVendPaymProposalLine.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendPaymProposalLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId == _journalId
                && custVendPaymProposalLine.LedgerJournalTransRecId == _ledgerJournalTransRecId;

        return custVendPaymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransCursor</Name>
				<Source><![CDATA[
    static public SpecTrans getSpecTransCursor(LedgerJournalId _ledgerJournalId)
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine paymProposalLine;

        select firstonly specTrans
        join JournalId, DataAreaId, TableId, RecId from paymProposalLine
            where paymProposalLine.JournalId == _ledgerJournalId
               && paymProposalLine.DataAreaId == specTrans.SpecCompany
               && paymProposalLine.TableId == specTrans.SpecTableId
               && paymProposalLine.RecId == specTrans.SpecRecId;

        return specTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendSearchForOmittedPaymentGroupInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches the <c>VendInvoiceInfoTable</c> and <c>VendTrans</c> tables to verify whether there are
    ///    any invoices that belong to a payment group that exists in the current proposal but are not
    ///    contained in the proposal.
    /// </summary>
    /// <param name="callingTableId">
    ///    The table ID of the calling table.
    /// </param>
    /// <returns>
    ///    true if there are missing invoices; otherwise, false.
    /// </returns>
    public static boolean vendSearchForOmittedPaymentGroupInvoice(tableId callingTableId)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;
        SpecTrans specTrans;

        // We only want to do this if the feature is enabled and is being run from a vendor perspective
        if (VendParameters::find().VendPaymentGroupingEnable == NoYes::Yes && callingTableId == tableNum(VendTable))
        {
            // Count the number of records for each payment group, and grab which payment group is being counted.
            while select count(RecId), VendPaymentGroup from custVendPaymProposalLine
                group by VendPaymentGroup
                where custVendPaymProposalLine.VendPaymentGroup != ''
            join count(RecId) from specTrans
                where specTrans.SpecRecId == custVendPaymProposalLine.RecId
                    && specTrans.SpecTableId == custVendPaymProposalLine.TableId
            {
                // If they exist then show the warning
                VendInvoiceInfoTable vendInvoiceInfoTable;
                select firstonly RecId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.VendPaymentGroup == custVendPaymProposalLine.VendPaymentGroup
                        && (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                            || vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors);

                if (vendInvoiceInfoTable.RecId != 0)
                {
                    warning("@SYS135412");
                    return false;
                }

                VendTrans vendTrans;
                // Get a count of the number of invoices with this payment group that are out there.
                select count(RecId) from vendTrans
                    where vendTrans.VendPaymentGroup == custVendPaymProposalLine.VendPaymentGroup
                        && vendTrans.Closed == dateNull();

                // If there are invoices not being shown in the proposal then show a warning. This can happen if a payment group is partially marked for some reason.
                if (vendTrans.RecId != custVendPaymProposalLine.RecId)
                {
                    warning("@SYS135412");
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the payment proposals by ledger journal identification.
    /// </summary>
    /// <param name="_journalId">
    /// The _journalId that defines the payment proposal lines that will be deleted.
    /// </param>
    public static void deleteByJournalId(LedgerJournalId _journalId)
    {
        #OCCRetryCount
        const int WaitTimeAfterDeadlockInMiliseconds = 500;

        if (!CustVendPaymProposalLine::existByJournalId(_journalId))
        {
            return;
        }

        RefTableId custVendPaymProposalLineTableId = tableNum(CustVendPaymProposalLine);

        int line;
        try
        {
            line = Global::infologLine();
            CustVendPaymProposalLine custVendPaymProposalLine;

            ttsbegin;

            TmpDataAreaRecIdFilter paymentProposalFilter;
            insert_recordset paymentProposalFilter (RefDataAreaId, RefTableId, RefRecId)
                select DataAreaId, custVendPaymProposalLineTableId, RecId from custVendPaymProposalLine
                    group by DataAreaId, RecId
                        where custVendPaymProposalLine.JournalId == _journalId;

            SpecTrans::deleteSet(paymentProposalFilter);

            // Remove all payment proposals of a specific payment journal
            custVendPaymProposalLine.skipDeleteActions(true);
            custVendPaymProposalLine.skipDeleteMethod(true);

            // <GEERU>
            #ISOCountryRegionCodes
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                CustVendPaymProposalLine custVendPaymProposalLine_Base;
                delete_from custVendPaymProposalLine
                    exists join custVendPaymProposalLine_Base
                        where custVendPaymProposalLine.VATPaymRefRecId_RU == custVendPaymProposalLine_Base.RecId
                            && custVendPaymProposalLine_Base.JournalId == _journalId;
            }
            // </GEERU>

            delete_from custVendPaymProposalLine
                where custVendPaymProposalLine.JournalId == _journalId;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                sleep(WaitTimeAfterDeadlockInMiliseconds);
                infolog.clear(line);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByJournalId</Name>
				<Source><![CDATA[
    internal static boolean existByJournalId(LedgerJournalId _journalId)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;

        select firstonly RecId from custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId == _journalId;

        return custVendPaymProposalLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashInput</Name>
				<Source><![CDATA[
    protected internal str getHashInput()
    {
        str hashInput = this.JournalId +
            this.AccountNum +
            this.AccountNumCompany +
            this.CurrencyCode +
            this.PaymMode +
            this.PaymSpec +
            this.PaymId +
            this.NegInstID +
            int2Str(this.NegInstSeqNum) +
            enum2Str(this.NegInstStatus) +
            date2Str(this.PaymDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4) +
            int642Str(this.TransOpenRecId) +
            enum2Str(this.PaymAccountType) +
            int642str(this.LedgerDimension) +
            this.ThirdPartyBankAccountID +
            enum2Str(this.BankRemittanceType) +
            this.CompanyBankAccountIdNegInst +
            this.Invoice +
            this.BankCentralBankPurposeCode +
            this.BankCentralBankPurposeText +
            int642Str(this.DefaultDimension) +
            this.InvoiceTaxCode_RU +
            this.VendPaymentGroup +
            int642Str(this.RemittanceLocation) +
            int642Str(this.OffsetLedgerDimension);

        return hashInput;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS127155</DeveloperDocumentation>
	<Label>@SYS88507</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>JournalId</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SpecTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SpecTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paymAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paymAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accumulatedCashDiscAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS7439</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDisc</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>accumulatedCashDiscAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS81213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicPayment</Name>
			<Label>@GLS1122</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EPBankFolder_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPBarCodeInfo_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPInstruction_1_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPDocumentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPInstruction_2_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPPaymentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPPaymentWay_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPRemitOccCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPTypedLine_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceTaxCode_RU</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NegInst</Name>
			<Label>@SYS71438</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NegInstID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotificationToTheCentralBank</Name>
			<Label>@SYS67156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNumCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherTypeId_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paymAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paymAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accumulatedCashDiscAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymAccount</Name>
			<Label>@SYS21686</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymAmount</Name>
			<Label>@SYS1943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>paymAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paymAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymDate</Name>
			<Label>@SYS75144</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPaymentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentRef_RU</Name>
			<Label>@SYS40441</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATPaymRefRecId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remittance</Name>
			<Label>@sys152838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ThirdParty</Name>
			<Label>@SYS50697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATTaxAgent_RU</Name>
			<Label>@GLS112871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymVATAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentRequest</Name>
			<Label>Payment request</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFMPaymentRequestRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFMTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFMTaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFMPrepayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS14025</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankRemittanceType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>BankRemittanceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyBankAccountIdNegInst</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO,RU,TH</CountryRegionCodes>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPBankFolder_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPBankFolder_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPBarCodeInfo_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPBarCodeInfo_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPDocumentType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPDocumentType_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPInstruction_1_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPInstruction_BR</ExtendedDataType>
			<Label>@GLS1123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPInstruction_2_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPInstruction_BR</ExtendedDataType>
			<Label>@GLS1124</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPPaymentType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPPaymentType_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPPaymentWay_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EPPaymentWay_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EPRemitOccCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EPRemitOccCode_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EPTypedLine_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TypedLine_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceTaxCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS21686</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NegInstID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NegInstSeqNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegInstStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymVATAmount_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RemittanceLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThirdPartyBankAccountID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankThirdPartyAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransOpenRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATPaymRefRecId_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherTypeId_CN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerVoucherTypeId_CN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TmpRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CFMPaymentOrderHash</Name>
			<ExtendedDataType>CFMPaymentOrderHash</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFMPaymentRequestRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CFMPaymentRequestRef</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFMPrepayment</Name>
			<ExtendedDataType>CFMPrepayment</ExtendedDataType>
			<HelpText>@SYS59475</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CFMTaxGroup</Name>
			<ExtendedDataType>CFMTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CFMTaxItemGroup</Name>
			<ExtendedDataType>CFMTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSNVendRoutingSlipId</Name>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>VendRoutingSlipId_PSN</ExtendedDataType>
			<Label>@GLS223208</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymMode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymSpec</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransOpenRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueCombination_Cu</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyBankAccountIdNegInst</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>CompanyBankAccountIdNegInst</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127156</EntityRelationshipRole>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThirdPartyBankAccountID</Name>
					<Field>ThirdPartyBankAccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127157</EntityRelationshipRole>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymModeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127158</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127159</EntityRelationshipRole>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpen</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransOpenRecId</Name>
					<Field>TransOpenRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustVendPaymProposalLine_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendPaymProposalLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustVendPaymProposalLine_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATPaymRefRecId_RU</Name>
					<Field>VATPaymRefRecId_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea_AccountNumCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea_AccountNumCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNumCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>AccountNumCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea_JournalCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea_JournalCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>JournalCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTransRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceLocation_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceLocation</Name>
					<Field>RemittanceLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceTaxCode_RU</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>InvoiceTaxCode_RU</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127160</EntityRelationshipRole>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThirdPartyBankAccountID</Name>
					<Field>ThirdPartyBankAccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127157</EntityRelationshipRole>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymModeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127161</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127162</EntityRelationshipRole>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTransOpen</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPaymProposalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransOpenRecId</Name>
					<Field>TransOpenRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CFMPaymentRequestTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CFMPaymentRequestTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFMPaymentRequestRecId</Name>
					<Field>CFMPaymentRequestRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>