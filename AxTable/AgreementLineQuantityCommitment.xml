<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementLineQuantityCommitment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementLineQuantityCommitment extends AgreementLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustAmountToMatchCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the specified amount to match the catch weight.
    /// </summary>
    /// <param name="_agreementAmount">
    /// A real value that represents an agreement amount.
    /// </param>
    /// <param name="_roundOffType">
    /// An enumeration value that represents the rounding principle.
    /// </param>
    /// <returns>
    /// The adjusted agreement amount.
    /// </returns>
    public Amount adjustAmountToMatchCW(
        Amount         _agreementAmount,
        RoundOffType   _roundOffType)
    {
        Qty                 quantityInAgreementUnit;
        PdsCWInventQty      quantityInCWUnit;

        UnitOfMeasure       agreementUnitOfMeasure  = UnitOfMeasure::findBySymbol(this.ProductUnitOfMeasure);
        UnitOfMeasure       cwUnitOfMeasure         = UnitOfMeasure::findBySymbol(PdsCatchWeightItem::find(this.ItemId).PdsCWUnitId);

        Amount              amountAdjusted;
        Real                agreementPricePcs           = this.PricePerUnit / (this.PriceUnit ? this.PriceUnit : 1);

        // a piece price must exists
        if (! agreementPricePcs)
        {
            return _agreementAmount;
        }

        // Converts amount to quantity in agreement unit
        quantityInAgreementUnit = decRound(_agreementAmount/agreementPricePcs,agreementUnitOfMeasure.DecimalPrecision);

        // converts quantityInAgreementUnit -> quantityInCWUnit
        quantityInCWUnit = PdsCatchWeight::convertQtyToCWQty(this.ItemId,quantityInAgreementUnit,this.ProductUnitOfMeasure,false);

        switch (_roundOffType)
        {
            case RoundOffType::Ordinary:
            quantityInCWUnit = decRound(quantityInCWUnit,cwUnitOfMeasure.DecimalPrecision);
            break;

            case RoundOffType::RoundDown:
            quantityInCWUnit = RoundDownDec(quantityInCWUnit,cwUnitOfMeasure.DecimalPrecision);
            break;

            case RoundOffType::RoundUp:
            quantityInCWUnit = RoundUpDec(quantityInCWUnit,cwUnitOfMeasure.DecimalPrecision);
            break;
        }

        // convert quantityInCWUnit back to quantityInAgreementUnit
        quantityInAgreementUnit = PdsCatchWeight::inventQty(this.ItemId,quantityInCWUnit,this.ProductUnitOfMeasure);

        amountAdjusted = CurrencyExchangeHelper::amount(quantityInAgreementUnit * agreementPricePcs, this.currencyCode());

        if (amountAdjusted != _agreementAmount)
        {
            Warning("@PDS1451");
        }

        return amountAdjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caches the sales purch line record to client side session's <C>SysGlobalCache</C>.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The record of current sales purch line which has link with agreement line.
    /// </param>
    /// <remarks>
    /// The sales purch line record is cached when do the validation check. And it is cached only for current session on client side.
    /// </remarks>
    public void cacheSalesPurchLine(
        SalesPurchLine  _salesPurchLine)   
    {
        SysGlobalCache      cache;
        
        cache = classFactory.globalCache();
        cache.set(
            tableStr(AgreementLineQuantityCommitment),
            [sessionId(), curext(), this.RecId],
            _salesPurchLine);       
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAgreementRemansOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remains for <c>AgreementLine</c> records and returns them in container.
    /// </summary>
    /// <returns>
    /// A container that contains the <c>AgreementLine</c> records that have Remaining, Invoiced,
    /// Delivered(Received)-But-Not-Invoiced, and Released-But-Neither-Invoiced-Nor-Delivered(Received) as
    /// the status.
    /// </returns>
    public container calculateAgreementRemansOnServer()
    {
        #AgreementsRemains

        container                   remains;

        AgreementHeader             agreementHeader;
        AgreementLineReleasedLine   agreementLineReleasedLine;

        SalesLine                   salesLine;
        CustInvoiceTrans            custInvoiceTrans;
        ProjInvoiceItem             projInvoiceItem;

        PurchLine                   purchLine;
        VendInvoiceTrans            vendInvoiceTrans;

        SalesPurchLine              salesPurchLine;

        AgreementCommitedQuantity   commitedQuantity;

        real    invoicedTotal;
        real    deliveredButNotInvoicedTotal;
        real    releasedButNeitherInvoicedNorDelivered;
        real    receivedButNotInvoiced;
        real    releasedButNeitherInvoicedNorReceived;

        PdsCWCommitedQuantity           pdsCWCommitedQuantity;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;

        real    pdsCWInvoicedTotal;
        real    pdsCWDeliveredButNotInvoicedTotal;
        real    pdsCWReleasedButNeitherInvoicedNorDelivered;
        real    pdsCWReceivedButNotInvoiced;
        real    pdsCWReleasedButNeitherInvoicedNorReceived;

        if (!this.RecId)
        {
            // No fulfillment could exist.
            remains = conIns(remains, #RemainingIndex,                          this.CommitedQuantity);
            remains = conIns(remains, #InvoicedIndex,                           0);
            remains = conIns(remains, #DeliveredNotInvoicedIndex,               0);
            remains = conIns(remains, #ReleasedNotInvoicedNorDeliveredIndex,    0);

            remains = conins(remains, #PdsCWRemainingIndex,                          this.PdsCWCommitedQuantity);
            remains = conins(remains, #PdsCWInvoicedIndex,                           0);
            remains = conins(remains, #PdsCWDeliveredNotInvoicedIndex,               0);
            remains = conins(remains, #PdsCWReleasedNotInvoicedNorDeliveredIndex,    0);
            return remains;
        }

        agreementHeader = this.agreementHeader();

        // Commited quantity queried:
        agreementLineQuantityCommitment = AgreementLineQuantityCommitment::find(this.RecId, false);
        commitedQuantity                = agreementLineQuantityCommitment.CommitedQuantity;
        pdsCWCommitedQuantity           = agreementLineQuantityCommitment.PdsCWCommitedQuantity;

        if (agreementHeader is SalesAgreementHeader)
        {
            // SALES:
            // Find invoiced quantities...
            // ... querying CustInvoiceTrans...
            select sum(Qty)
                ,sum(PdsCWQty)
                from custInvoiceTrans
                exists join agreementLineReleasedLine
                    where agreementLineReleasedLine.AgreementLine         == this.RecId
                       && agreementLineReleasedLine.ReferenceRelationType == custInvoiceTrans.TableId
                       && agreementLineReleasedLine.CustInvoiceTrans      == custInvoiceTrans.RecId
                       && !agreementLineReleasedLine.IsDeleted;
            invoicedTotal += custInvoiceTrans.Qty;
            pdsCWInvoicedTotal += custInvoiceTrans.PdsCWQty;

            // ...adding invoiced items for proj related release lines querying projInvoiceItem.
            select sum(Qty)
                from projInvoiceItem
                exists join agreementLineReleasedLine
                    where agreementLineReleasedLine.AgreementLine           == this.RecId
                       && agreementLineReleasedLine.ReferenceRelationType   == projInvoiceItem.TableId
                       && agreementLineReleasedLine.ProjInvoiceItem         == projInvoiceItem.RecId
                       && !agreementLineReleasedLine.IsDeleted;
            invoicedTotal += projInvoiceItem.Qty;

            // Query delivered but not invoiced quantities and released, but neither delivered, nor invoiced
            select sum(RemainSalesFinancial), sum(RemainSalesPhysical), sum(PdsCWRemainInventFinancial), sum(PdsCWRemainInventPhysical)
                from salesLine
                    where salesLine.LineDeliveryType                        != LineDeliveryType::OrderLineWithMultipleDeliveries
                        && (salesLine.SalesStatus                           == SalesStatus::None
                            || salesLine.SalesStatus                        == SalesStatus::Backorder
                            || salesLine.SalesStatus                        == SalesStatus::Delivered)
                exists join agreementLineReleasedLine
                    where agreementLineReleasedLine.AgreementLine           == this.RecId
                       && agreementLineReleasedLine.ReferenceRelationType   == salesLine.TableId
                       && agreementLineReleasedLine.SalesLineDataAreaId     ==  salesLine.DataAreaId
                       && agreementLineReleasedLine.SalesLineInventTransId  == salesLine.InventTransId
                       && !agreementLineReleasedLine.IsDeleted;

            deliveredButNotInvoicedTotal           += salesLine.RemainSalesFinancial;
            releasedButNeitherInvoicedNorDelivered += salesLine.RemainSalesPhysical;

            // Packing results:
            // remaining quantity..
            remains =
                conIns(remains, #RemainingIndex,                      ( commitedQuantity
                                                                        - invoicedTotal
                                                                        - deliveredButNotInvoicedTotal
                                                                        - releasedButNeitherInvoicedNorDelivered
                                                                      ));
            remains =
                conIns(remains, #InvoicedIndex,                         invoicedTotal);
            remains =
                conIns(remains, #DeliveredNotInvoicedIndex,             deliveredButNotInvoicedTotal);
            remains =
                conIns(remains, #ReleasedNotInvoicedNorDeliveredIndex,  releasedButNeitherInvoicedNorDelivered);

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                pdsCWDeliveredButNotInvoicedTotal           += salesLine.PdsCWRemainInventFinancial;
                pdsCWReleasedButNeitherInvoicedNorDelivered += salesLine.PdsCWRemainInventPhysical;

                remains = conins(remains, #PdsCWRemainingIndex,(pdsCWCommitedQuantity
                                                                - pdsCWInvoicedTotal
                                                                - pdsCWDeliveredButNotInvoicedTotal
                                                                - pdsCWReleasedButNeitherInvoicedNorDelivered));

                remains = conins(remains, #PdsCWInvoicedIndex,                         pdsCWInvoicedTotal);
                remains = conins(remains, #PdsCWDeliveredNotInvoicedIndex,             pdsCWDeliveredButNotInvoicedTotal);
                remains = conins(remains, #PDSCWReleasedNotInvoicedNorDeliveredIndex,  pdsCWReleasedButNeitherInvoicedNorDelivered);

                // overwrite the remainInAgreementUnit with remainInCW * nominalWeight
                remains = conPoke(remains, #RemainingIndex, PdsCatchWeight::inventQty(this.ItemId,conpeek(remains,#PdsCWRemainingIndex), this.ProductUnitOfMeasure));
            }
            else
            {
                remains = conins(remains, #PdsCWRemainingIndex,                          0);
                remains = conins(remains, #PdsCWInvoicedIndex,                           0);
                remains = conins(remains, #PdsCWDeliveredNotInvoicedIndex,               0);
                remains = conins(remains, #PdsCWReleasedNotInvoicedNorDeliveredIndex,    0);
            }
        }
        else
        {
            // PURCHASE
            // Find invoiced numbers
            // by querying VendInvoiceTrans
            select sum(Qty)
                ,sum(PdsCWQty)
                from vendInvoiceTrans
                exists join agreementLineReleasedLine
                    where agreementLineReleasedLine.AgreementLine         == this.RecId
                       && agreementLineReleasedLine.ReferenceRelationType == vendInvoiceTrans.TableId
                       && agreementLineReleasedLine.VendInvoiceTrans      == vendInvoiceTrans.RecId
                       && !agreementLineReleasedLine.IsDeleted;
            invoicedTotal += vendInvoiceTrans.Qty;
            pdsCWInvoicedTotal += vendInvoiceTrans.PdsCWQty;

            // For not completelly invoiced purch lines
            // query received but not ivoiced numbers and released, but neither received, nor invoiced
            salesPurchLine = this.getCachedSalesPurchLine();

            if (salesPurchLine && salesPurchLine.TableId == tableNum(PurchLine))
            {
                select sum(RemainPurchFinancial), sum (RemainPurchPhysical)
                    ,sum(PdsCwRemainInventFinancial), sum (PdsCWRemainInventPhysical)
                    from purchLine
                    where purchLine.LineDeliveryType                        != LineDeliveryType::OrderLineWithMultipleDeliveries
                       && purchLine.PurchStatus                             != PurchStatus::Invoiced
                       && PurchLine.LineDeliveryType                        == salesPurchLine.LineDeliveryType
                    exists join agreementLineReleasedLine
                        where agreementLineReleasedLine.AgreementLine           == this.RecId
                           && agreementLineReleasedLine.ReferenceRelationType   == purchLine.TableId
                           && agreementLineReleasedLine.PurchLineDataAreaId     == purchLine.DataAreaId
                           && agreementLineReleasedLine.PurchLineInventTransId  == purchLine.InventTransId
                           && !agreementLineReleasedLine.IsDeleted;
            }
            else
            {
                select sum(RemainPurchFinancial), sum (RemainPurchPhysical)
                    ,sum(PdsCwRemainInventFinancial), sum (PdsCWRemainInventPhysical)
                    from purchLine
                    where purchLine.LineDeliveryType                        != LineDeliveryType::OrderLineWithMultipleDeliveries
                       && purchLine.PurchStatus                             != PurchStatus::Invoiced
                    exists join agreementLineReleasedLine
                        where agreementLineReleasedLine.AgreementLine           == this.RecId
                           && agreementLineReleasedLine.ReferenceRelationType   == purchLine.TableId
                           && agreementLineReleasedLine.PurchLineDataAreaId     == purchLine.DataAreaId
                           && agreementLineReleasedLine.PurchLineInventTransId  == purchLine.InventTransId
                           && !agreementLineReleasedLine.IsDeleted;
            }
           
            receivedButNotInvoiced                  += purchLine.RemainPurchFinancial;
            releasedButNeitherInvoicedNorReceived   += purchLine.RemainPurchPhysical;

            // Packing results:
            remains =
                conIns(remains, #RemainingIndex,                      ( commitedQuantity
                                                                        - invoicedTotal
                                                                        - receivedButNotInvoiced
                                                                        - releasedButNeitherInvoicedNorReceived
                                                                      ));
            remains =
                conIns(remains, #InvoicedIndex,                         invoicedTotal);
            remains =
                conIns(remains, #ReceivedNotInvoicedIndex,              receivedButNotInvoiced);
            remains =
                conIns(remains, #ReleasedNotInvoicedNorReceivedIndex,   releasedButNeitherInvoicedNorReceived);

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                pdsCWReceivedButNotInvoiced                  += purchLine.PdsCWRemainInventFinancial;
                pdsCWReleasedButNeitherInvoicedNorReceived   += purchLine.PdsCWRemainInventPhysical;

                remains = conins(remains, #PdsCWRemainingIndex, (pdsCWCommitedQuantity
                                                                 - pdsCWInvoicedTotal
                                                                 - pdsCWReceivedButNotInvoiced
                                                                 - pdsCWReleasedButNeitherInvoicedNorReceived));

                remains = conins(remains, #PdsCWInvoicedIndex,                         pdsCWInvoicedTotal);
                remains = conins(remains, #PdsCWReceivedNotInvoicedIndex,              pdsCWReceivedButNotInvoiced);
                remains = conins(remains, #PdsCWReleasedNotInvoicedNorReceivedIndex,   pdsCWReleasedButNeitherInvoicedNorReceived);

                // overwrite the remainInAgreementUnit with remainInCW * nominalWeight
                remains = conPoke(remains, #RemainingIndex, PdsCatchWeight::inventQty(this.ItemId,conpeek(remains,#PdsCWRemainingIndex), this.ProductUnitOfMeasure));
            }
            else
            {
                remains = conins(remains, #PdsCWRemainingIndex,                          0);
                remains = conins(remains, #PdsCWInvoicedIndex,                           0);
                remains = conins(remains, #PdsCWDeliveredNotInvoicedIndex,               0);
                remains = conins(remains, #PdsCWReleasedNotInvoicedNorDeliveredIndex,    0);
            }
        }
        return remains;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLinkTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified order line can be associated with the current agreement line.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The <c>SalesLine</c> or <c>PurchLine</c> record to check.
    /// </param>
    /// <returns>
    /// true if the specified record can be associated with the agreement line; otherwise, false.
    /// </returns>
    public boolean canLinkTo(SalesPurchLine _salesPurchLine)
    {
        str                 messageTxt;
        str                 titleTxt;
        UnitOfMeasureSymbol productUnitOfMeasure;

        if (!super(_salesPurchLine))
        {
            return false;
        }

        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (!this.pdsCWQuantityCheckRemaining(salesPurchLineInterface.parmCWQty()))
            {
                switch (_salesPurchLine.TableId)
                {
                    case tablenum(SalesLine) :
                        messageTxt = strFmt("@SYS305733", salesPurchLineInterface.parmCWQty(), this.pdsCWQuantityRemainingQueried());
                        titleTxt   = "@SYS305734";
                        break;
                    case tablenum(PurchLine) :
                        messageTxt = strFmt("@SYS305735", salesPurchLineInterface.parmCWQty(), this.pdsCWQuantityRemainingQueried());
                        titleTxt   = "@SYS305736";
                        break;
                }
                Box::stop(messageTxt, titleTxt);
                return false;
            }
        }
        else
        {
            if (!this.checkRemaining(salesPurchLineInterface.parmQty()))
            {
                switch (_salesPurchLine.TableId)
                {
                    case tableNum(SalesLine) :
                        messageTxt = strfmt("@SYS305733", salesPurchLineInterface.parmQty(), this.remainingQueried());
                        titleTxt   = "@SYS305734";
                        break;
                    case tableNum(PurchLine) :
                        messageTxt = strfmt("@SYS305735", salesPurchLineInterface.parmQty(), this.remainingQueried());
                        titleTxt   = "@SYS305736";
                        break;
                }
                Box::stop(messageTxt, titleTxt);
                return false;
            }
        }

        productUnitOfMeasure = salesPurchLineInterface.parmUnitId();

        if (productUnitOfMeasure && productUnitOfMeasure != this.ProductUnitOfMeasure)
        {
            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                warning("@SYS305703");
                return false;
            }

            switch (_salesPurchLine.TableId)
            {
                case tableNum(SalesLine) :
                    if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(
                            salesPurchLineInterface.parmItemId(),
                            salesPurchLineInterface.parmInventDimId(),
                            productUnitOfMeasure,
                            this.ProductUnitOfMeasure))
                    {
                        messageTxt = strFmt("@SYS305737", productUnitOfMeasure, this.ProductUnitOfMeasure);
                    }
                    else
                    {
                        messageTxt = strFmt("@SYS305702", productUnitOfMeasure, this.ProductUnitOfMeasure);
                    }
                    titleTxt   = "@SYS305703";
                    break;
                case tableNum(PurchLine) :
                    if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(
                            salesPurchLineInterface.parmItemId(),
                            salesPurchLineInterface.parmInventDimId(),
                            productUnitOfMeasure,
                            this.ProductUnitOfMeasure))
                    {
                        messageTxt = strFmt("@SYS305704", productUnitOfMeasure, this.ProductUnitOfMeasure);
                    }
                    else
                    {
                        messageTxt = strFmt("@SYS305705", productUnitOfMeasure, this.ProductUnitOfMeasure);
                    }
                    titleTxt   = "@SYS305706";
                    break;
            }
            return Box::okCancel(messageTxt, DialogButton::Ok, titleTxt) == DialogButton::Ok;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts currency dependable fields when currency code has been changed according to exchange rates
    /// between old and new currencies.
    /// </summary>
    /// <param name="_fromCurrencyCode">
    /// The old currency that is used by the <c>Agreement</c>.
    /// </param>
    /// <param name="_toCurrencyCode">
    /// The new currency that will be used by <c>Agreement</c>.
    /// </param>
    /// <param name="_exchRateDate">
    /// The date to pick appropriate exchange rate.
    /// </param>
    void convertCurrencyCode(CurrencyCode _fromCurrencyCode, CurrencyCode _toCurrencyCode, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (_fromCurrencyCode && _toCurrencyCode && (_fromCurrencyCode != _toCurrencyCode))
        {
            // Perform recalculations only if both currency codes are specified and they are not the same
            super(_fromCurrencyCode, _toCurrencyCode, _exchRateDate);

            // Recalculate PricePerUnit
            if (this.PricePerUnit)
            {
                this.PricePerUnit = ExchangeRateHelper::curPrice2CurPrice(this.PricePerUnit, _fromCurrencyCode, _toCurrencyCode, _exchRateDate);
                if (this.IsModified != NoYes::Yes)
                {
                    this.IsModified = NoYes::Yes;
                }
            }

            // Recalculate LineDiscountAmount
            if (this.LineDiscountAmount)
            {
                this.LineDiscountAmount = ExchangeRateHelper::curPrice2CurPrice(this.LineDiscountAmount, _fromCurrencyCode, _toCurrencyCode, _exchRateDate);
                if (this.IsModified != NoYes::Yes)
                {
                    this.IsModified = NoYes::Yes;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether a field in the <c>AgreementLineQuantityCommitment</c> buffer is changed related
    /// to an intercompany.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field in which to investigate for a change.
    /// </param>
    /// <returns>
    /// true if the field is changed related to an intercompany; otherwise, false.
    /// </returns>
    public boolean  fieldChanged(fieldId  _fieldId)
    {
        boolean  ret = false;

        if (!this.RecId)
        {
            ret = true;
        }

        if (this.orig().(_fieldId) != this.(_fieldId))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChangedAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the <c>AgreementLine</c> field in a <c>AgreementLineQuantityCommitment</c> buffer
    /// has changed with regard to intercompany.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to investigate for a change.
    /// </param>
    /// <returns>
    /// true if the field has changed with regard to intercompany; otherwise, false.
    /// </returns>
    public boolean  fieldChangedAgreementLine(fieldId  _fieldId)
    {
        boolean         ret = false;
        AgreementLine   agreementLine, agreementLineOrig;

        if (!this.RecId)
        {
            ret = true;
        }

        if (!ret)
        {
            agreementLine     = this;
            agreementLineOrig = agreementLine.orig();

            if (agreementLineOrig.(_fieldId) != agreementLine.(_fieldId))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromInventTable</Name>
				<Source><![CDATA[
    protected InventDim initInventDimFromInventTable(InventTable _inventTable = this.inventTable())
    {
        InventDim inventDim = this.inventDim();
        switch (this.agreementModuleType())
        {
            case ModuleSalesPurch::Sales:
                inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Sales, inventDim);
                break;

            case ModuleSalesPurch::Purch:
                inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Purch, inventDim);
                break;
        }
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AgreementLine</c> record from the <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record to initialize from.
    /// </param>
    public void initFromInventTable(InventTable _inventTable = this.inventTable())
    {
        #ISOCountryRegionCodes
     
        super(_inventTable);

        this.PriceUnit = this.inventTableModule().getPriceUnit();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            InventDim inventDim = this.initInventDimFromInventTable(_inventTable);
            inventDim.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            this.setInventDimId(inventDim.InventDimId);  
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the <c>AgreementLine</c> table and subtype tables.
    /// </summary>
    /// <remarks>
    /// For more information, see the <see cref="T:AgreementLine" />, <see
    /// cref="T:AgreementLineVolumeCommitment" />, and <see cref="T:AgreementLineQuantityCommitment" />.
    /// </remarks>
    public void insert()
    {
        super();
        if (this.IntercompanySkipUpdate != InterCompanySkipUpdate::InterCompany
         && this.IntercompanySkipUpdate != InterCompanySkipUpdate::Both
         && this is AgreementLineQuantityCommitment)
        {
            ttsbegin;
            this.intercompanySync();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyLinkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an intercompany link for the agreement line quantity exists.
    /// </summary>
    /// <returns>
    /// true if an intercompany link exists; otherwise, false.
    /// </returns>
    public boolean intercompanyLinkExist()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return (select firstonly RecId from agreementLineReference
                where (  agreementLineReference.SourceAgreementLine == this.RecId
                      || agreementLineReference.DerivedAgreementLine == this.RecId)
                   && !agreementLineReference.IsIntraCompany_RU).RecId != 0 ;
        }
        else
        {
            return (select firstonly RecId from agreementLineReference where agreementLineReference.SourceAgreementLine == this.RecId
            || agreementLineReference.DerivedAgreementLine == this.RecId).RecId != 0 ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes changed data to the intercompany agreement line quantity record that relates to the
    /// agreement line quantity record.
    /// </summary>
    public void intercompanySync()
    {
        AgreementHeader                     fromAgreementHeader;

        PurchAgreementHeader                purchAgreementHeader;
        SalesAgreementHeader                salesAgreementHeader;
        AgreementLineQuantityCommitment     agreementLineQuantityCommitment;
        CompanyId
                                            toDataAreaId;
        EcoResProduct                       ecoResProduct;
        AgreementHeaderRecId                toAgreementHeaderRecId;
        boolean                             create;
        InventDim                           fromInventDim, toInventDim;
        #ISOCountryRegionCodes
        boolean                             countryRegion_RU;

        if (this.IntercompanySkipUpdate == InterCompanySkipUpdate::InterCompany
         || this.IntercompanySkipUpdate == InterCompanySkipUpdate::Both)
        {
            return;
        }

        fromAgreementHeader = this.agreementHeader();
        if (fromAgreementHeader is PurchAgreementHeader)
        {
            purchAgreementHeader = fromAgreementHeader as PurchAgreementHeader;

            salesAgreementHeader    = purchAgreementHeader.salesAgreementHeader();
            toDataAreaId            =
                                      salesAgreementHeader.sellingCompanyInfo().DataArea;
            toAgreementHeaderRecId  = salesAgreementHeader.RecId;
        }
        else if (fromAgreementHeader is SalesAgreementHeader)
        {
            salesAgreementHeader = fromAgreementHeader as SalesAgreementHeader;

            purchAgreementHeader    = salesAgreementHeader.purchAgreementHeader();
            toDataAreaId            =
                                      purchAgreementHeader.buyingCompanyInfo().DataArea;
            toAgreementHeaderRecId  = purchAgreementHeader.RecId;
        }

        if (!toDataAreaId
         || !TradeInterCompany::checkDataAreaAccess(toDataAreaId)
         || !toAgreementHeaderRecId )
        {
            return;
        }

        create = !this.intercompanyLinkExist();

        if (create || this.fieldChanged(fieldNum(AgreementLineQuantityCommitment, InventDimId)))
        {
            fromInventDim = InventDim::find(this.InventDimId);
        }

        if (create || this.fieldChanged(fieldNum(AgreementLineQuantityCommitment, ItemId)))
        {
            ecoResProduct = EcoResProduct::find(InventTable::find(this.ItemId).Product);
        }

        changecompany(toDataAreaId)
        {
            countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

            if (create)
            {
                agreementLineQuantityCommitment.AgreementLineType   = this.AgreementLineType;
                agreementLineQuantityCommitment.Agreement           = toAgreementHeaderRecId;
                agreementLineQuantityCommitment.ItemDataAreaId      = toDataAreaId;
                agreementLineQuantityCommitment.InventDimDataAreaId = toDataAreaId;
                if (countryRegion_RU)
                {
                    if (fromAgreementHeader is PurchAgreementHeader)
                    {
                        agreementLineQuantityCommitment.DefaultDimension = salesAgreementHeader.DefaultDimension;
                    }
                    else if (fromAgreementHeader is SalesAgreementHeader)
                    {
                        agreementLineQuantityCommitment.DefaultDimension = purchAgreementHeader.DefaultDimension;
                    }
                }
            }
            else
            {
                agreementLineQuantityCommitment = this.intercompanyAgreementLine(true) as AgreementLineQuantityCommitment;
            }

            this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, LineNumber));

            if (create || this.fieldChanged(fieldNum(AgreementLineQuantityCommitment, ItemId)))
            {
                agreementLineQuantityCommitment.ItemId         = InventTable::findByProduct(ecoResProduct.RecId).ItemId;
                if (!agreementLineQuantityCommitment.ItemId)
                {
                    throw error(strFmt("@SYS340884",this.ItemId,toDataAreaId));
                }
            }

            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, IsPriceInformationMandatory));
            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, IsMaxEnforced));
            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, EffectiveDate));
            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, ExpirationDate));
            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, LineDiscountPercent));
            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, AgreedReleaseLineMinAmount));
            this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, AgreedReleaseLineMaxAmount));

            this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, CommitedQuantity));
            this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure));
            this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, PriceUnit));
            this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, PricePerUnit));
            this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, LineDiscountAmount));

            if (create || this.fieldChanged(fieldNum(AgreementLineQuantityCommitment, InventDimId)))
            {
                toInventDim   = InventDim::find(agreementLineQuantityCommitment.InventDimId);
                // only synchronize product dimensions
                toInventDim.initFromInventDim(fromInventDim, InventDim::dimProductDimensionEnabledFieldList());
                agreementLineQuantityCommitment.InventDimId = InventDim::findOrCreate(toInventDim).InventDimId;
            }

            if (countryRegion_RU)
            {
                this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, DefaultDimension));
            }

            agreementLineQuantityCommitment.IntercompanySkipUpdate = InterCompanySkipUpdate::InterCompany;

            if (create)
            {
                agreementLineQuantityCommitment.insert();
                AgreementLineReference::createRelationShip(this.RecId,agreementLineQuantityCommitment.RecId);
                TradeInterCompany::synchronizeDocuRef(this);
            }
            else
            {
                agreementLineQuantityCommitment.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanySync_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes changed data to the intracompany agreement line quantity record that relates to the
    ///     agreement line quantity record.
    /// </summary>
    public void intracompanySync_RU()
    {
        AgreementHeader                     fromAgreementHeader;

        PurchAgreementHeader                purchAgreementHeader;
        SalesAgreementHeader                salesAgreementHeader;
        AgreementLineQuantityCommitment     agreementLineQuantityCommitment;
        AgreementHeaderRecId                toAgreementHeaderRecId;
        boolean                             create;

        if (this.IntraCompanySkipUpdate_RU == InterCompanySkipUpdate::Internal
            || AgreementLineExt_RU::findByAgreementLine(this.RecId).SkipIntraCompanySync)
        {
            return;
        }

        fromAgreementHeader = this.agreementHeader();
        if (fromAgreementHeader is PurchAgreementHeader)
        {
            purchAgreementHeader = fromAgreementHeader as PurchAgreementHeader;

            salesAgreementHeader    = purchAgreementHeader.salesAgreementHeader_RU();
            toAgreementHeaderRecId  = salesAgreementHeader.RecId;
        }
        else if (fromAgreementHeader is SalesAgreementHeader)
        {
            salesAgreementHeader = fromAgreementHeader as SalesAgreementHeader;

            purchAgreementHeader    = salesAgreementHeader.purchAgreementHeader_RU();
            toAgreementHeaderRecId  = purchAgreementHeader.RecId;
        }

        if (!toAgreementHeaderRecId )
        {
            return;
        }

        create = !this.intracompanyLinkExist_RU();

        if (create)
        {
            agreementLineQuantityCommitment.AgreementLineType   = this.AgreementLineType;
            agreementLineQuantityCommitment.Agreement           = toAgreementHeaderRecId;
            agreementLineQuantityCommitment.ItemDataAreaId      = this.ItemDataAreaId;
            agreementLineQuantityCommitment.InventDimDataAreaId = this.InventDimDataAreaId;

            if (fromAgreementHeader is PurchAgreementHeader)
            {
                agreementLineQuantityCommitment.DefaultDimension = salesAgreementHeader.DefaultDimension;
            }
            else if (fromAgreementHeader is SalesAgreementHeader)
            {
                agreementLineQuantityCommitment.DefaultDimension = purchAgreementHeader.DefaultDimension;
            }
        }
        else
        {
            agreementLineQuantityCommitment = this.intracompanyAgreementLine_RU(true) as AgreementLineQuantityCommitment;
        }

        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, LineNumber));

        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, ItemId));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, InventDimId));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, IsPriceInformationMandatory));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, IsMaxEnforced));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, EffectiveDate));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, ExpirationDate));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, LineDiscountPercent));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, AgreedReleaseLineMinAmount));
        this.syncFieldAgreementLine(agreementLineQuantityCommitment,create,fieldNum(AgreementLine, AgreedReleaseLineMaxAmount));

        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, CommitedQuantity));
        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure));
        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, PriceUnit));
        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, PricePerUnit));
        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, LineDiscountAmount));

        this.syncField(agreementLineQuantityCommitment,create,fieldNum(AgreementLineQuantityCommitment, DefaultDimension));

        agreementLineQuantityCommitment.IntraCompanySkipUpdate_RU = InterCompanySkipUpdate::Internal;

        if (create)
        {
            agreementLineQuantityCommitment.insert();
            AgreementLineReference::createRelationShip(this.RecId, agreementLineQuantityCommitment.RecId, true);
        }
        else
        {
            agreementLineQuantityCommitment.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a specified order line fits for an agreement line.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The <c>SalesLine</c> or <c>PurchLine</c> record to check.
    /// </param>
    /// <param name="_showInfolog">
    /// A Boolean value that indicates whether to print the errors in the Infolog; optional.
    /// </param>
    /// <returns>
    /// true if the link between the specified record and the agreement line is valid; otherwise, false .
    /// </returns>
    public boolean isLinkValid(SalesPurchLine _salesPurchLine, boolean _showInfolog = true)
    {
        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();

        boolean             ret = true;
        ModuleSalesPurch    module = _salesPurchLine.TableId == tableNum(SalesLine) ? ModuleSalesPurch::Sales : ModuleSalesPurch::Purch;
        SalesLine           salesLine;
        PurchLine           purchLine;
        boolean             isReturnLine;

        ret = super(_salesPurchLine, _showInfolog);

        if (!ret && !_showInfolog)
        {
            return false;
        }

        if (module == ModuleSalesPurch::Sales)
        {
            salesLine = _salesPurchLine;
            isReturnLine = salesLine.returnItem();
        }
        else
        if (_salesPurchLine.TableId == tableNum(PurchLine))
        {
            purchLine = _salesPurchLine;
            isReturnLine = purchLine.PurchaseType == PurchaseType::ReturnItem;
        }

        if (salesPurchLineInterface.parmUnitId() != this.ProductUnitOfMeasure)
        {
            if (_showInfolog)
            {
                if (module == ModuleSalesPurch::Sales)
                {
                    ret = checkFailed(#PreFixField(salesLine,SalesUnit));
                }
                else
                {
                    ret = checkFailed(#PreFixField(purchLine,PurchUnit));
                }
            }
            else
            {
                return false;
            }
        }

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (!this.pdsCWQuantityCheckRemaining(salesPurchLineInterface.parmCWQty() - salesPurchLineInterface.origInstance().parmCWQty()))
            {
                //deduct current qty since it is taken into account when remaning quantity is calculated
                if (_showInfolog)
                {
                    if (module == ModuleSalesPurch::Sales)
                    {
                        ret = checkFailed(#PreFixField(salesLine,PdsCWQty));
                    }
                    else
                    {
                        ret = checkFailed(#PreFixField(purchLine,PdsCWQty));
                    }
                }
                else
                {
                    return false;
                }
            }
        }
        else
        {
            this.cacheSalesPurchLine(_salesPurchLine);

            if (!isReturnLine &&
                !this.checkRemaining(salesPurchLineInterface.parmQty() - salesPurchLineInterface.origInstance().parmQty()))
            {//deduct current qty since it is taken into account when remaning quantity is calculated
                if (_showInfolog)
                {
                    if (module == ModuleSalesPurch::Sales)
                    {
                        ret = checkFailed(#PreFixField(salesLine,SalesQty));
                    }
                    else
                    {
                        ret = checkFailed(#PreFixField(purchLine,PurchQty));
                    }
                }
                else
                {
                    return false;
                }
            }
        }

        if (
            !isReturnLine &&
            this.IsPriceInformationMandatory)
        {
            if (salesPurchLineInterface.parmCurrencyCode() != this.currencyCode())
            {
                if (_showInfolog)
                {
                    if (module == ModuleSalesPurch::Sales)
                    {
                        ret = checkFailed(#PreFixField(salesLine,CurrencyCode));
                    }
                    else
                    {
                        ret = checkFailed(#PreFixField(purchLine,CurrencyCode));
                    }
                }
                else
                {
                    return false;
                }
            }

            /* Sales agreement can set price unit different than default value 1, e.g. 2.
               If the price is $100, then the clculated final price is $50 per 1 unit.
               In retail pricing engine, we set $50 to the unit price, and price unit is set to default value 1 correspondingly to keep consistent.
            */
            boolean isRetailSales = false;

            if (module == ModuleSalesPurch::Sales)
            {
                SalesTable salesTable = SalesTable::find(salesLine.SalesId);
                if (salesTable && salesTable.isRetailSale())
                {
                    isRetailSales = true;
                }
            }

            real targetPriceUnit = isRetailSales ? 1.0 : this.PriceUnit;
            if (salesPurchLineInterface.parmPriceUnit() != targetPriceUnit)
            {
                if (_showInfolog)
                {
                    if (module == ModuleSalesPurch::Sales)
                    {
                        ret = checkFailed(#PreFixField(salesLine,PriceUnit));
                    }
                    else
                    {
                        ret = checkFailed(#PreFixField(purchLine,PriceUnit));
                    }

                }
                else
                {
                    return false;
                }
            }

            boolean isUnitPriceMatches = false;

            if (isRetailSales)
            {
                real targetPricePerUnit = this.PricePerUnit > this.LineDiscountAmount ? this.PricePerUnit - this.LineDiscountAmount : 0.0;
                targetPricePerUnit = targetPricePerUnit * (100 - this.LineDiscountPercent) / (100 * this.PriceUnit);

                // Rounding to handle the case of indivisible price unit. e.g. $100 / 3.
                real roundedCalulatedSalesAgreementPrice = CurrencyExchangeHelper::price(targetPricePerUnit, this.currencyCode());
                real roundedPrice = CurrencyExchangeHelper::price(salesPurchLineInterface.parmPrice(), this.currencyCode());

                isUnitPriceMatches = (roundedPrice == roundedCalulatedSalesAgreementPrice);
            }
            else
            {
                isUnitPriceMatches = (salesPurchLineInterface.parmPrice() == this.PricePerUnit);
            }

            if (!isUnitPriceMatches)
            {
                if (_showInfolog)
                {
                    if (module == ModuleSalesPurch::Sales)
                    {
                        ret = checkFailed(#PreFixField(salesLine,SalesPrice));
                    }
                    else
                    {
                        ret = checkFailed(#PreFixField(purchLine,PurchPrice));
                    }
                }
                else
                {
                    return false;
                }
            }

            real targetLineDiscountAmount = isRetailSales ? 0.0 : this.LineDiscountAmount;
            if (salesPurchLineInterface.parmLineDiscAmount() != targetLineDiscountAmount)
            {
                if (_showInfolog)
                {
                    if (module == ModuleSalesPurch::Sales)
                    {
                        ret = checkFailed(#PreFixField(salesLine,LineDisc));
                    }
                    else
                    {
                        ret = checkFailed(#PreFixField(purchLine,LineDisc));
                    }
                }
                else
                {
                    return false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current agreement line is quantity based.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean isQuantityBased()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values in a <c>AgreementLine</c> record when the item ID has been changed.
    /// </summary>
    public void itemIdChanged()
    {
        #ISOCountryRegionCodes

        super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setPriceDisc_RU(this.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the net amount for the current <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <returns>
    /// The net amount calculated based on quantity, unit price, and discounts.
    /// </returns>
    public LineAmount lineAmount()
    {
        LineAmount lineAmount;

        if (this.isQuantityBased())
        {
            lineAmount = PriceDisc::price2Amount(this.PricePerUnit,
                                                 this.PriceUnit,
                                                 this.LineDiscountAmount,
                                                 this.CommitedQuantity,
                                                 this.CommitedQuantity,
                                                 0,
                                                 this.LineDiscountPercent,
                                                 this.agreementHeader().Currency,
                                                 0);
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies when a field is modified on a <c>AgreementLine</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AgreementLineQuantityCommitment, CommitedQuantity):
                this.CommitedQuantity = decRound(this.CommitedQuantity, UnitOfMeasure::findBySymbol(this.ProductUnitOfMeasure).DecimalPrecision);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            switch (_fieldId)
            {
                case fieldNum(AgreementLineQuantityCommitment, CommitedQuantity):
                case fieldNum(AgreementLineQuantityCommitment, EffectiveDate):
                    this.resetPriceAgreement_RU();
                    this.setPriceDisc_RU(this.inventDim());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(AgreementLineQuantityCommitment,AgreedReleaseLineMinAmount):
                if (PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    this.AgreedReleaseLineMinAmount = this.adjustAmountToMatchCW(this.AgreedReleaseLineMinAmount,RoundOffType::RoundUp);
                }
                break;

            case fieldstr(AgreementLineQuantityCommitment,AgreedReleaseLineMaxAmount):
                if (PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    this.AgreedReleaseLineMaxAmount = this.adjustAmountToMatchCW(this.AgreedReleaseLineMaxAmount,RoundOffType::RoundDown);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the related fields when an inventory dimension field is modified.
    /// </summary>
    /// <param name="_inventDim">
    ///     The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldId">
    ///     The ID of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_resetPrice">
    ///     A Boolean value that indicates whether the price agreements are to be reset.
    /// </param>
    public void modifyInventDim_RU(
        InventDim            _inventDim,
        FieldId              _dimFieldId,
        boolean              _resetPrice = true)
    {
        InventDimGroupSetup  inventDimGroupSetup;
        boolean setPrice;

        if (this.isCategoryBased())
        {
            return;
        }

        inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);

        switch (this.agreementModuleType())
        {
            case ModuleSalesPurch::Sales:
                if (InventDim::mustUseFieldSalesPriceDisc(_dimFieldId, inventDimGroupSetup) && _resetPrice)
                {
                    setPrice = true;
                }
                break;
            case ModuleSalesPurch::Purch:
                if (InventDim::mustUseFieldPurchPriceDisc(_dimFieldId, inventDimGroupSetup) && _resetPrice)
                {
                    setPrice = true;
                }
                break;
        }

        if (setPrice)
        {
            this.resetPriceAgreement_RU();
            this.setPriceDisc_RU(_inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// A string value that represents the catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPriceAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set amounts in the agreement's line to zero.
    /// </summary>
    public void resetPriceAgreement_RU()
    {
        this.LineDiscountAmount = 0;
        this.LineDiscountPercent = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method recalculates price for agreementLine.
    /// </summary>
    /// <param name="_inventDim">
    ///     A buffer of the <c>InventDim</c> table.
    /// </param>
    public void setPriceDisc_RU(InventDim _inventDim)
    {
        //do not set price for category based item
        if (this.isCategoryBased())
        {
            return;
        }

        AgreementHeader agreementHeader = AgreementHeader::find(this.Agreement);
        if (!agreementHeader)
        {
            return;
        }

        CustVendAc                 custVendAc;
        ModuleInventPurchSales     moduleType;
        [moduleType, custVendAc] = this.getModuleTypeAndAccount(agreementHeader);

        PriceDisc priceDisc = PriceDisc::newFromPriceDiscParameters(this.createAndInitPriceDiscParameters(_inventDim, custVendAc, moduleType));

        if (priceDisc.findPrice(""))
        {
            this.PricePerUnit   = priceDisc.price();
            this.PriceUnit      = priceDisc.priceUnit();
        }
        
        priceDisc.findLineDisc("", "");
        if (priceDisc.lineDiscAmount())
        {
            this.LineDiscountAmount  = priceDisc.lineDiscAmount();
        }
        if (priceDisc.lineDiscPct())
        {
            this.LineDiscountPercent = priceDisc.lineDiscPct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleTypeAndAccount</Name>
				<Source><![CDATA[
    protected container getModuleTypeAndAccount(AgreementHeader _agreementHeader)
    {
        CustVendAc                 custVendAc;
        ModuleInventPurchSales     moduleType;
        switch (_agreementHeader.getModuleType())
        {
            case  ModuleSalesPurch::Sales:
                SalesAgreementHeader salesAgreementHeader = _agreementHeader as SalesAgreementHeader;
                custVendAc = salesAgreementHeader.CustAccount;
                moduleType = ModuleInventPurchSales::Sales;
                break;
            case ModuleSalesPurch::Purch:
                PurchagreementHeader purchAgreementHeader = _agreementHeader as PurchAgreementHeader;
                custVendAc = purchAgreementHeader.VendAccount;
                moduleType = ModuleInventPurchSales::Purch;
                break;
            default:
                return [0, 0];
         };

        return [moduleType, custVendAc];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> value.</param>
    /// <param name = "_custVendAc">A <c>CustVendAc</c> value.</param>
    /// <param name = "_moduleType">A <c>ModuleInventPurchSales</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(
        InventDim _inventDim, 
        CustVendAc _custVendAc,
        ModuleInventPurchSales _moduleType)
    {
        SalesAgreementHeader       salesAgreementHeader;
        PurchAgreementHeader       purchAgreementHeader;
        CustVendAc                 custVendAc;
        ModuleInventPurchSales     moduleType;

        AgreementHeader agreementHeader = AgreementHeader::find(this.Agreement);
        
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(_moduleType);
        parameters.parmItemId(this.ItemId);
        parameters.parmInventDim(_inventDim);
        parameters.parmUnitID(this.ProductUnitOfMeasure);
        parameters.parmPriceDiscDate(this.EffectiveDate);
        parameters.parmQty(this.CommitedQuantity);
        parameters.parmAccountNum(_custVendAc);
        parameters.parmCurrencyCode(this.currencyCode());

        AgreementHeaderExtRecId_RU agreementHeaderExtRecId = AgreementHeaderExt_RU::findByAgreementHeader(this.Agreement).RecId;
        parameters.parmAgreementHeaderExt_RU(agreementHeaderExtRecId);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes a field value from an <c>AgreementLineQuantityCommitment</c> record to another
    /// <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <param name="_toAgreementLineQuantityCommitment">
    /// The <c>AgreementLineQuantityCommitment</c> record for which to synchronize the field value.
    /// </param>
    /// <param name="_create">
    /// Specifies whether the synchronization is performed in a create scenario.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID for the field for which to synchronize the value.
    /// </param>
    /// <remarks>
    /// This method is used in intercompany scenarios.
    /// </remarks>
    public void syncField(AgreementLineQuantityCommitment _toAgreementLineQuantityCommitment, boolean _create, fieldId _fieldId)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage, toDimAttrValueSetStorage;
        int idx;

        if (_create || this.fieldChanged(_fieldId))
        {
            if (_fieldId == fieldNum(AgreementLineQuantityCommitment, DefaultDimension))
            {
                dimAttrValueSetStorage   = DimensionAttributeValueSetStorage::find(this.DefaultDimension);
                toDimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(_toAgreementLineQuantityCommitment.DefaultDimension);
                for (idx = 1; idx <= dimAttrValueSetStorage.elements(); idx++)
                {
                    if (DimensionAttribute::find(dimAttrValueSetStorage.getAttributeByIndex(idx)).Type == DimensionAttributeType::CustomList)
                    {
                        toDimAttrValueSetStorage.addItem(DimensionAttributeValue::find(dimAttrValueSetStorage.getValueByIndex(idx)));
                    }
                }
                _toAgreementLineQuantityCommitment.DefaultDimension = toDimAttrValueSetStorage.save();
            }
            else
            {
                _toAgreementLineQuantityCommitment.(_fieldId) = this.(_fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncFieldAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes a field value from one <c>AgreementLineQuantityCommitment</c> record to another
    /// <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <param name="_toAgreementLineQuantityCommitment">
    /// The <c>AgreementLineQuantityCommitment</c> record in which to synchronize the field value.
    /// </param>
    /// <param name="_create">
    /// A Boolean value that indicates whether the synchronization is performed in a create scenario.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the field to synchronize.
    /// </param>
    /// <remarks>
    /// Used in intercompany scenarios.
    /// </remarks>
    public void syncFieldAgreementLine(AgreementLineQuantityCommitment _toAgreementLineQuantityCommitment, boolean _create, fieldId _fieldId)
    {
        if (_create || this.fieldChangedAgreementLine(_fieldId))
        {
            _toAgreementLineQuantityCommitment.(_fieldId) = this.(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>AgreementLine</c> table and subtype table records.
    /// </summary>
    /// <remarks>
    /// For more information, see the <see cref="T:AgreementLine" />, <see
    /// cref="T:AgreementLineVolumeCommitment" />, <see cref="T:AgreementLineQuantityCommitment" />.
    /// </remarks>
    public void update()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.IntraCompanySkipUpdate_RU != InterCompanySkipUpdate::Internal)
            {
                ttsbegin;
                this.intracompanySync_RU();
                ttscommit;
            }
        }
        if (this.IntercompanySkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  this.IntercompanySkipUpdate != InterCompanySkipUpdate::Both
        &&  this.intercompanyLinkExist())
        {
            ttsbegin;
            this.intercompanySync();
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a field in the <c>AgreementLineQuantityCommitment</c> table.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the value in the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        AgreementLineQuantityCommitment lineOrig;
        real    qtyDelta;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AgreementLineQuantityCommitment, CommitedQuantity) :
                    //
                    // There is no point to validate quantity changes if MAX is not enforced
                    // or nothing has been released from the line...
                    if (this.IsMaxEnforced == NoYes::Yes && this.isReleased())
                    {
                        qtyDelta = this.orig().CommitedQuantity - this.CommitedQuantity;
                        if ( (qtyDelta > 0)  && (this.remainingQueried() < qtyDelta))
                        {
                            // Qty has been decreased by more than remaining quantity...
                            ret = checkFailed("@SYS302115");
                        }
                    }
                    break;

                case fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure):
                    if (this.ProductUnitOfMeasure && !UnitOfMeasure::findBySymbol(this.ProductUnitOfMeasure).RecId)
                    {
                        ret = checkFailed(strFmt("@SYP4986038",fieldStr(AgreementLineQuantityCommitment, ProductUnitOfMeasure),
                            this.ProductUnitOfMeasure,
                            tableStr(UnitOfMeasure)));
                    }

                    if (ret && this.isReleased())
                    {
                        ret = checkFailed("@SYS137220");
                    }
                    break;

                case fieldNum(AgreementLineQuantityCommitment, PriceUnit):
                case fieldNum(AgreementLineQuantityCommitment, PricePerUnit):
                case fieldNum(AgreementLineQuantityCommitment, LineDiscountAmount):
                    if (this.IsPriceInformationMandatory == NoYes::Yes && this.isReleased())
                    {
                        ret = checkFailed("@SYS137221");
                    }
                    break;
            }
            if (!ret)
            {
                lineOrig = this.orig();
                this.(_fieldIdToCheck) = lineOrig.(_fieldIdToCheck);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        Qty         qtyDelta;
        boolean     ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(AgreementLineQuantityCommitment, PdsCWCommitedQuantity) :
                // There is no point to validate quantity changes if MAX is not enforced
                // or nothing has been released from the line...
                if (this.IsMaxEnforced == NoYes::Yes && this.isReleased())
                {
                    qtyDelta = this.orig().PdsCWCommitedQuantity - this.PdsCWCommitedQuantity;
                    if ( (qtyDelta > 0)  && (this.pdsCWQuantityRemainingQueried() < qtyDelta))
                    {
                        // CW qty has been decreased by more than remaining quantity...
                        ret = checkFailed("@SYS302115");
                    }
                }
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleaseMinMaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the release maximum or minimum amount setup of the <c>AgreementLine</c> record.
    /// </summary>
    /// <returns>
    /// true if the setup is valid; otherwise, false.
    /// </returns>
    public boolean validateReleaseMinMaxAmount()
    {
        boolean     ok = true;
        LineAmount  lineAmountLimit;

        ok = super();

        if (ok)
        {
            lineAmountLimit = this.lineAmount();

            if (this.AgreedReleaseLineMinAmount > lineAmountLimit)
            {
                ok = checkFailed("@SYS303516");
            }

            if (this.AgreedReleaseLineMaxAmount > lineAmountLimit)
            {
                ok = checkFailed("@SYS302525");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AgreementLineQuantityCommitment</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AgreementLineQuantityCommitment</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AgreementLineQuantityCommitment</c> table; otherwise, an empty record.
    /// </returns>
    static AgreementLineQuantityCommitment find(recId   _recId,
                                                boolean _forUpdate = false)
    {
        AgreementLineQuantityCommitment agreementLine;

        if (_recId)
        {
            if (_forUpdate)
            {
                agreementLine.selectForUpdate(_forUpdate);
            }

            select firstonly agreementLine
                where agreementLine.RecId == _recId;
        }

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure),
                    [fieldNum(AgreementLineQuantityCommitment, ItemId)]],

            [fieldNum(AgreementLineQuantityCommitment, CommitedQuantity),
                    [fieldNum(AgreementLineQuantityCommitment, ItemId),
                     fieldNum(AgreementLineQuantityCommitment, PdsCWCommitedQuantity),
                     fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure)]],

            [fieldNum(AgreementLineQuantityCommitment, PdsCWCommitedQuantity),
                    [fieldNum(AgreementLineQuantityCommitment, ItemId)]]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AgreementLineQuantityCommitment, CommitedQuantity):
                if (this.ItemId)
                {
                    boolean isItemIdSet = this.isFieldSet(fieldNum(AgreementLineQuantityCommitment, ItemId));
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
                    if ((isItemIdSet
                            || this.isFieldSet(fieldNum(AgreementLineQuantityCommitment, PdsCWCommitedQuantity))
                            || this.isFieldSet(fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure)))
                        && isCWItem
                        && this.ProductUnitOfMeasure)
                    {
                        this.CommitedQuantity = this.deriveCommittedQty(isCWItem);
                    }
                    else if (!isCWItem && isItemIdSet)
                    {
                        this.CommitedQuantity = TradeModuleType::newFromModule(this.moduleInventPurchSales()).calcAgreementLineCommittedQty(this);
                    }
                }
                break;

            case fieldNum(AgreementLineQuantityCommitment, PdsCWCommitedQuantity):
                if (this.isFieldSet(fieldNum(AgreementLineQuantityCommitment, ItemId))
                    && !this.PdsCWCommitedQuantity
                    && PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    this.PdsCWCommitedQuantity = 1;
                }
                break;

            case fieldNum(AgreementLineQuantityCommitment, ProductUnitOfMeasure):
                if (this.isFieldSet(fieldNum(AgreementLineQuantityCommitment, ItemId)))
                {
                    this.ProductUnitOfMeasure = this.inventTableModule().UnitId;
                    // this should not be needed but there is a bug in the defaulting sequence
                    this.defaultField(fieldNum(AgreementLineQuantityCommitment, CommitedQuantity));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleInventPurchSales</Name>
				<Source><![CDATA[
    private ModuleInventPurchSales moduleInventPurchSales()
    {
        if (this.agreementModuleType() == ModuleSalesPurch::Sales)
        {
            return ModuleInventPurchSales::Sales;
        }

        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    private InventTableModule inventTableModule(ModuleInventPurchSales _moduleType = this.moduleInventPurchSales())
    {
        return InventTableModule::find(this.ItemId, _moduleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeriveCommittedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is possible to derive the committed quantity
    /// based on other fields of the record if it is possible.
    /// </summary>
    /// <param name="_isCWItem">A boolean value indicating whether the current item is a catch weight item; optional.</param>
    /// <returns>true, if the committed quantity can be derived; otherwise, false.</returns>
    private boolean canDeriveCommittedQty(boolean _isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId))
    {
        return _isCWItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deriveCommittedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Derives the committed quantity based on other fields of the record if it is possible.
    /// </summary>
    /// <param name="_isCWItem">A boolean value indicating whether the current item is a catch weight item; optional.</param>
    /// <returns>The committed quantity</returns>
    /// <remarks>This method is only applicable when the committed quantity can be derived from other field values.</remarks>
    private Qty deriveCommittedQty(boolean _isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId))
    {
        if (_isCWItem)
        {
            return PdsCatchWeight::inventQty(this.ItemId, this.PdsCWCommitedQuantity, this.ProductUnitOfMeasure);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommittedQtySameAsDerived</Name>
				<Source><![CDATA[
    /// <summary>
    /// When commited quantity can be derived from other fields, determines whether the specified committed quantity is valid.
    /// Otherwise, returns false.
    /// </summary>
    /// <returns>true, if commited quantity can be derived from other fields and the specified committed quantity is valid; otherwise, false.</returns>
    public boolean isCommittedQtySameAsDerived(boolean _isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId))
    {
        return this.canDeriveCommittedQty(_isCWItem) && this.CommitedQuantity == this.deriveCommittedQty(_isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cached sales purch line record.
    /// </summary>
    /// <returns>
    /// The sales purch line record.
    /// </returns>
    /// <remarks>
    /// The cached sales purch line record is cached by <C>cacheSalesPurchLine</C>.
    /// </remarks>
    public SalesPurchLine getCachedSalesPurchLine()
    {
        SysGlobalCache      cache;
        str                 cacheScope;
        container           cacheKey;
        SalesPurchLine      ret;
        
        cache       = classFactory.globalCache();
        cacheScope  = tableStr(AgreementLineQuantityCommitment);
        cacheKey    = [sessionId(), curext(), this.RecId];
        ret         = cache.get(cacheScope, cacheKey, null);
        
        if (ret)        
        {
            cache.remove(cacheScope, cacheKey);            
        }
        
        return ret;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>AgreementLineQuantityCommitment</c> table will update the Tax
    /// </summary>
    /// <param name="_transOrig">
    /// The transaction line original table buffer, optional.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    public boolean taxRecalculationNeeded(Common _transOrig = this.orig())
    {
        // <GTE>
        boolean updateNeeded;  
        AgreementLineQuantityCommitment agreementLineQuantityCommit_Orig = _transOrig ;

        updateNeeded =
        (
        (this.Currency                      != agreementLineQuantityCommit_Orig.Currency) ||
        (this.InventDimId                   != agreementLineQuantityCommit_Orig.InventDimId)  ||
        (this.ItemId                        != agreementLineQuantityCommit_Orig.ItemId)||
        (this.EffectiveDate                 != agreementLineQuantityCommit_Orig.EffectiveDate) ||
        (this.ExpirationDate                != agreementLineQuantityCommit_Orig.ExpirationDate) ||
        (this.LineDiscountPercent           != agreementLineQuantityCommit_Orig.LineDiscountPercent)||
        (this.LineNumber                    != agreementLineQuantityCommit_Orig.LineNumber)||
        (this.AgreedReleaseLineMaxAmount    != agreementLineQuantityCommit_Orig.AgreedReleaseLineMaxAmount)||
        (this.AgreedReleaseLineMinAmount    != agreementLineQuantityCommit_Orig.AgreedReleaseLineMinAmount)||
        (this.AgreementLineType             != agreementLineQuantityCommit_Orig.AgreementLineType)||
        (this.AgreementLineProduct          != agreementLineQuantityCommit_Orig.AgreementLineProduct)||
        (this.ProjectProjId                 != agreementLineQuantityCommit_Orig.ProjectProjId)||
        (this.PricePerUnit                  != agreementLineQuantityCommit_Orig.PricePerUnit)||
        (this.PriceUnit                     != agreementLineQuantityCommit_Orig.PriceUnit)||
        (this.CommitedQuantity              != agreementLineQuantityCommit_Orig.CommitedQuantity) ||
        !DimensionDefaultFacade::areEqual(this.DefaultDimension, agreementLineQuantityCommit_Orig.DefaultDimension)
        );

        return updateNeeded;
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SYS325326</DeveloperDocumentation>
	<Label>@SYS302522</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>CommitedQuantity</TitleField1>
	<TitleField2>ProductUnitOfMeasure</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Extends>AgreementLine</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommitedQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PricePerUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDiscountAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDiscountAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWCommitedQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricePerUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommitedQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommitedQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementCommitedQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitDiscountAmountCur</ExtendedDataType>
			<Label>@SYS11829</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWCommitedQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWCommitedQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PricePerUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementPricePerUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProductUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine1</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_AgreementLineQuantityCommitment</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductUnitOfMeasure</Name>
					<Field>ProductUnitOfMeasure</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>