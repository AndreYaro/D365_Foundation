<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveProcessingStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveProcessingStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSWaveProcessingStatus</c> tracking record for the specified wave.
    /// </summary>
    /// <param name = "_waveTable">Wave being processed.</param>
    /// <returns>The created <c>WHSWaveProcessingStatus</c> record.</returns>
    public static WHSWaveProcessingStatus createFromWave(WHSWaveTable _waveTable)
    {
        if (!_waveTable.WorkBuildId)
        {
            return null;
        }

        return WHSWaveProcessingStatus::createProcessingStatusInUserConnection(_waveTable.WaveId, _waveTable.WorkBuildId, _waveTable.ExecutingUTCDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSWaveProcessingStatus</c> tracking record from parameters.
    /// </summary>
    /// <param name = "_waveId">The <c>WHSWaveId</c> to create <c>WHSWaveProcessingStatus</c> from.</param>
    /// <param name = "_workBuildId">The <c>WHSWorkBuildId</c> to create <c>WHSWaveProcessingStatus</c> from.</param>
    ///<param name = "_executingDateTime">The <c>WHSExecutingUtcDateTime</c> to create <c>WHSWaveProcessingStatus</c> from.</param>
    /// <returns>The created <c>WHSWaveProcessingStatus</c> record.</returns>
    [Hookable(false)]
    internal static WHSWaveProcessingStatus createFromParameters(WHSWaveId _waveId, WHSWorkBuildId _workBuildId, WHSExecutingUtcDateTime _executingDateTime)
    {
        return WHSWaveProcessingStatus::createProcessingStatusInUserConnection(_waveId, _workBuildId, _executingDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessingStatusInUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSWaveProcessingStatus</c> tracking record for the specified wave.
    /// </summary>
    /// <param name = "_waveId">The <c>WHSWaveId</c> to create <c>WHSWaveProcessingStatus</c> from.</param>
    /// <param name = "_workBuildId">The <c>WHSWorkBuildId</c> to create <c>WHSWaveProcessingStatus</c> from.</param>
    /// <param name = "_executingDateTime">The <c>WHSExecutingUtcDateTime</c> to create <c>WHSWaveProcessingStatus</c> from.</param>
    /// <returns>The created <c>WHSWaveProcessingStatus</c> record.</returns>
    private static WHSWaveProcessingStatus createProcessingStatusInUserConnection(
        WHSWaveId _waveId,
        WHSWorkBuildId _workBuildId,
        WHSExecutingUtcDateTime _executingDateTime)
    {
        UserConnection conn = new UserConnection();

        Debug::assert(_waveId != '');

        try
        {
            conn.ttsbegin();

            WHSWaveProcessingStatus waveProcessingStatus;
            waveProcessingStatus.setConnection(conn);
            waveProcessingStatus.WaveId = _waveId;
            waveProcessingStatus.WorkBuildId = _workBuildId;
            waveProcessingStatus.ExecutingUTCDateTime = _executingDateTime;
            waveProcessingStatus.insert();

            conn.ttscommit();

            return waveProcessingStatus;
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWaveProcessingStatusWithRetry</Name>
				<Source><![CDATA[
    private static WHSWaveProcessingStatus findOrCreateWaveProcessingStatusWithRetry(WHSWaveTable _waveTable)
    {
        #OCCRetryCount

        try
        {
            return WHSWaveProcessingStatus::findOrCreateWaveProcessingStatus(_waveTable);
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            throw Exception::DuplicateKeyExceptionNotRecovered;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWaveProcessingStatus</Name>
				<Source><![CDATA[
    private static WHSWaveProcessingStatus findOrCreateWaveProcessingStatus(WHSWaveTable _waveTable)
    {
        WHSWaveProcessingStatus waveProcessingStatus;
        
        select firstonly waveProcessingStatus
            where waveProcessingStatus.WaveId == _waveTable.WaveId
                && waveProcessingStatus.WorkBuildId == _waveTable.WorkBuildId;

        if (!waveProcessingStatus)
        {
            waveProcessingStatus = WHSWaveProcessingStatus::createFromWave(_waveTable);
        }

        return waveProcessingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFromWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSWaveProcessingStatus</c> tracking record for the specified wave, if the record does not already exist.
    /// </summary>
    /// <param name = "_waveTable">Wave being processed.</param>
    /// <returns>The created <c>WHSWaveProcessingStatus</c> record.</returns>
    public static WHSWaveProcessingStatus findOrCreateFromWave(WHSWaveTable _waveTable)
    {
        if (!_waveTable.WorkBuildId)
        {
            return null;
        }

        Debug::assert(_waveTable.WaveId != '');

        return WHSWaveProcessingStatus::findOrCreateWaveProcessingStatusWithRetry(_waveTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a <c>WHSWaveProcessingStatus</c> record from the wave Id.
    /// </summary>
    /// <param name = "_waveId">Wave Id to find <c>WHSWaveProcessingStatus</c> from.</param>
    /// <returns>Found <c>WHSWaveProcessingStatus</c> record.</returns>
    public static WHSWaveProcessingStatus findFromWaveId(WHSWaveId _waveId)
    {
        WHSWaveProcessingStatus waveProcessingStatus;
        
        select firstonly waveProcessingStatus
            where waveProcessingStatus.WaveId == _waveId;

        return waveProcessingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WaveProcessingStatusDeveloperDocumentation</DeveloperDocumentation>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>WorkBuildId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WaveWorkBuildIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WaveWorkBuildIdx</PrimaryIndex>
	<ReplacementKey>WaveWorkBuildIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkBuildId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkBuildId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkBuildId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkBuildId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExecutingUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSExecutingUTCDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WaveWorkBuildIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkBuildId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveId</Name>
					<Field>WaveId</Field>
					<RelatedField>WaveId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>