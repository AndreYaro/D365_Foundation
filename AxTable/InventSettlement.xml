<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSettlement extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceSheetPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the balance sheet posting amount.
    /// </summary>
    /// <returns>
    ///    The balance sheet posting amount.
    /// </returns>
    public CostAmount balanceSheetPostingAmount()
    {
        if (this.BalanceSheetPosting)
        {
            return this.CostAmountAdjustment;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefInventTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the inventory transaction is correspond to inventory settlement.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The inventory transaction.
    /// </param>
    /// <returns>
    ///     true if the inventory transaction is correspond to inventory settlement; otherwise, false.
    /// </returns>
    public boolean checkRefInventTrans_RU(InventTrans _inventTrans = this.inventTrans())
    {
        if (_inventTrans.ItemId             != this.ItemId ||
            _inventTrans.InventTransOrigin  != InventTransOrigin::findByInventTransId(this.InventTransId).RecId)
        {
            return checkFailed("@SYS18484");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
    /// </summary>
    /// <returns>
    /// A <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSettlement</Name>
				<Source><![CDATA[
    public void initFromInventSettlement(InventSettlement  _inventSettlement)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        this.TransRecId       = _inventSettlement.TransRecId;
        this.InventTransId    = _inventSettlement.InventTransId;
        this.ItemId           = _inventSettlement.ItemId;
        this.ItemGroupId      = _inventSettlement.ItemGroupId;
        this.DefaultDimension = this.copyDimension(_inventSettlement.DefaultDimension);
        this.TransDate        = _inventSettlement.TransDate;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.InventTransCurrency_RU = _inventSettlement.InventTransCurrency_RU;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForStdCostAdjustment</Name>
				<Source><![CDATA[
    public void initForStdCostAdjustment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    public void initFromInventTrans(
        InventTrans _inventTrans,
        DimensionDefault _dimension)
    {
        this.initFromInventTransOrigin(_inventTrans.inventTransOrigin());

        this.TransRecId       = _inventTrans.RecId;
        this.DefaultDimension = this.copyDimension(_dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransDefaultDimension</Name>
				<Source><![CDATA[
    public void initFromInventTransDefaultDimension(InventTrans _inventTrans, DimensionDefault _dimension)
    {
        this.initFromInventTransOrigin(_inventTrans.inventTransOrigin());

        this.TransRecId       = _inventTrans.RecId;
        this.DefaultDimension = this.copyDimension(_dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    public void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        if (_inventTransOrigin.IsExcludedFromInventoryValue)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.InventTransId    = _inventTransOrigin.InventTransId;
        this.ItemId           = _inventTransOrigin.ItemId;
        this.ItemGroupId      = InventTable::find(_inventTransOrigin.ItemId).itemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(InventSettleTransId transaction = '')
    {
        this.checkBalanceSheetLedgerDimension();

        ttsbegin;

        if (! this.SettleTransId)
        {
            if (transaction)
                this.SettleTransId = transaction;
            else
                this.SettleTransId = InventSettlement::nextSettleTransId();
        }
        this.TransBeginTime = InventCostUpdateGlobal::Instance().parmTransBeginTime();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUsingInsertList</Name>
				<Source><![CDATA[
    public void insertUsingInsertList(
        RecordInsertList    _list
        )
    {
        if (! this.SettleTransId)
            this.SettleTransId = InventSettlement::nextSettleTransId();

        this.TransBeginTime = InventCostUpdateGlobal::Instance().parmTransBeginTime();

        _list.add(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTrans</Name>
				<Source><![CDATA[
    public InventTrans inventTrans(boolean _forupdate = false)
    {
        return InventTrans::findRecId(this.TransRecId,_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBackDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether this is a backdate.
    /// </summary>
    /// <param name="_transDate">
    ///    The transaction date that is used to update the inventory transaction.
    /// </param>
    /// <returns>
    ///    true if this is a backdate; otherwise, false.
    /// </returns>
    public boolean isBackDate(TransDate   _transDate)
    {
        return this.TransDate > _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemName itemName()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    ///    field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    ///    optional.
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    ///    this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationsPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the operations posting amount.
    /// </summary>
    /// <returns>
    /// The operations posting amount.
    /// </returns>
    public CostAmount operationsPostingAmount()
    {
        if (this.OperationsPosting)
        {
            if (this.BalanceSheetPosting)
            {
                return -this.CostAmountAdjustment;
            }
            else
            {
                return this.CostAmountAdjustment;
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher)
    {
        Voucher                     lastVoucher;
        TransDate                   lastTransDate;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        // <GEERU>
        LedgerBondClient_RU         ledgerBondClient;
        #ISOCountryRegionCodes
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        CurrencyExchangeHelper      currencyExchHelper;
        // <GIN>
        InventTransferTable  inventransferTable;
        InventTransOrigin    inventTransOrigin;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            inventTransOrigin = this.inventTrans().inventTransOrigin();
            if (inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip
                || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive
                || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderScrap)
            {
                inventransferTable = InventTransferTable::find(this.inventTrans().inventTransferLine().TransferId);
                if (inventransferTable.TransferType_IN == TransferType_IN::StockTransfer &&
                    !inventransferTable.StockTransferCostPriceHandlingImprovement_IN)
                {
                    return;
                }
            }
        }
        // </GIN>

        if (this.CostAmountAdjustment)
        {
            // Save the last reference
            lastVoucher = _ledgerVoucher.lastVoucher();
            lastTransDate = _ledgerVoucher.lastTransDate();

            ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject(this.Voucher, this.TransDate);

            if (ledgerVoucherObject == null)
            {
                // create a new ledger posting reference for the reference number + accounting date
                ledgerVoucherObject = LedgerVoucherObject::newVoucher(this.Voucher, this.TransDate, _ledgerVoucher.parmSysModuleDefault());
                
                // Copy transTxt for adjustment.
                var referenceLedgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject(lastVoucher, lastTransDate);
                ledgerVoucherObject.lastTransTxt(referenceLedgerVoucherObject.lastTransTxt());

                _ledgerVoucher.addVoucher(ledgerVoucherObject);
            }

            // <GEERU>
            if (!countryRegion_RU
                || (countryRegion_RU
                    && this.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur))
            {
            // </GEERU>

                currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

                ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                            ledgerVoucherObject,
                                            this.OperationsPosting,
                                            this.OperationsLedgerDimension,
                                            CompanyInfoHelper::standardCurrency(),
                                            -this.CostAmountAdjustment,
                                            currencyExchHelper);

                ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                _ledgerVoucher.addTrans(ledgerVoucherTransObject);

                if (InventoryReportingCurrencyTriangulationFeature::instance().IsEnabled())
                {
                    AmountMSTSecondary physicalReportingCurrencyAmount;

                    InventSettlement   physicalSettlement;

                    select firstonly physicalSettlement
                        where physicalSettlement.TransRecId     == this.TransRecId &&
                              physicalSettlement.InventTransId  == this.InventTransId &&
                              physicalSettlement.ItemId         == this.ItemId &&
                              physicalSettlement.ItemGroupId    == this.ItemGroupId &&
                              physicalSettlement.SettleModel    == InventSettleModel::PhysicalValue &&
                              physicalSettlement.Cancelled      == NoYes::No;

                    if (physicalSettlement)
                    {
                        physicalReportingCurrencyAmount = this.getPhysicalReportingCurrencyAmount(ledgerVoucherObject, physicalSettlement);
                    }

                    // Adjust reporting currency amount due to exchange rate adjustment
                    if (abs(this.CostAmountAdjustment)  == abs(physicalSettlement.CostAmountAdjustment)
                     && physicalReportingCurrencyAmount != 0
                     && physicalReportingCurrencyAmount != ledgerVoucherTransObject.parmReportingCurrencyAmount())
                    {
                        AmountMSTSecondary reportingCurrencyAmountDiff = ledgerVoucherTransObject.parmReportingCurrencyAmount() - (-physicalReportingCurrencyAmount);

                        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        this.OperationsPosting,
                        this.OperationsLedgerDimension,
                        CompanyInfoHelper::standardCurrency(),
                        0,
                        currencyExchHelper);

                        ledgerVoucherTransObject.parmReportingCurrencyAmount(-reportingCurrencyAmountDiff);
                        ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

                        ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createMSTDiffLedgerVoucherTransObject(
                        ledgerVoucherObject,
                        currencyExchHelper,
                        this.DefaultDimension,
                        CompanyInfoHelper::standardCurrency(),
                        reportingCurrencyAmountDiff);

                        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
                    }
                }

                if (this.BalanceSheetPosting != LedgerPostingType::None)
                {
                    ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                                ledgerVoucherObject,
                                                this.BalanceSheetPosting,
                                                this.BalanceSheetLedgerDimension,
                                                CompanyInfoHelper::standardCurrency(),
                                                this.CostAmountAdjustment,
                                                currencyExchHelper);

                    ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                    _ledgerVoucher.addTrans(ledgerVoucherTransObject);
                }

            // <GEERU>
            }
            else
            {
                ledgerVoucherObject = _ledgerVoucher.findOrCreateReferenceSecCur_RU();

                ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicSecondary_RU(
                    ledgerVoucherObject,
                    this.OperationsPosting,
                    this.OperationsLedgerDimension,
                    CompanyInfoHelper::standardCurrency(),
                    -this.CostAmountAdjustment,
                    false);

                ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                _ledgerVoucher.addTrans(ledgerVoucherTransObject);

                if (this.BalanceSheetPosting != LedgerPostingType::None)
                {
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicSecondary_RU(
                        ledgerVoucherObject,
                        this.BalanceSheetPosting,
                        this.BalanceSheetLedgerDimension,
                        CompanyInfoHelper::standardCurrency(),
                        this.CostAmountAdjustment,
                        false);

                    ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                    _ledgerVoucher.addTrans(ledgerVoucherTransObject);
                }

                _ledgerVoucher.restoreReferenceSecCur_RU();
            }

            ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
            if (ledgerBondClient)
            {
                ledgerBondClient.bondLast2();
            }
            // </GEERU>

            // Restore the last reference
            _ledgerVoucher.lastVoucher(lastVoucher);
            _ledgerVoucher.lastTransDate(lastTransDate);
        }
        this.Posted = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public display InventTransRefId transRefId()
    {
        return InventTransOrigin::referenceIdByTransId(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public display InventTransType transType()
    {
        return InventTransOrigin::referenceCategoryByTransId(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCostAmountAdjustment</Name>
				<Source><![CDATA[
    public static CostAmountAdjusted dateCostAmountAdjustment(
        TransDate       _perDate,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm,
        boolean         _physicalValue = false,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventSettlement    inventSettlement;
        InventTrans         inventTrans;
        InventDim           inventDim;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        {
            #InventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
            join TableId from inventTrans
                where inventTrans.InventDimId == inventDim.InventDimId
            join sum(CostAmountAdjustment) from inventSettlement
                where inventTrans.RecId             == inventSettlement.TransRecId      &&
                      inventSettlement.ItemId       == _itemId                          &&
                      inventSettlement.Cancelled    == NoYes::No                        &&
                      // <GEERU>
                      (!countryRegion_RU
                          || (countryRegion_RU
                              && inventSettlement.InventTransCurrency_RU == _inventTransCurrency))   &&
                      // </GEERU>
                      inventSettlement.TransDate    >  _perDate                         &&
                    ((inventSettlement.SettleModel  != InventSettleModel::PhysicalValue && ! _physicalValue) ||
                     (inventSettlement.SettleModel  == InventSettleModel::PhysicalValue &&   _physicalValue));
        }
        else
        {
            select forceplaceholders sum(CostAmountAdjustment) from inventSettlement
                where inventSettlement.ItemId       == _itemId      &&
                      inventSettlement.Cancelled    == NoYes::No    &&
                      inventSettlement.TransDate    >  _perDate     &&
                      // <GEERU>
                      (!countryRegion_RU
                          || (countryRegion_RU
                              && inventSettlement.InventTransCurrency_RU == _inventTransCurrency)) &&
                      // </GEERU>
                    ((inventSettlement.SettleModel  != InventSettleModel::PhysicalValue && ! _physicalValue) ||
                     (inventSettlement.SettleModel  == InventSettleModel::PhysicalValue &&   _physicalValue))
            join TableId from inventTrans
                where inventTrans.RecId             == inventSettlement.TransRecId
            #inventDimExistsjoin(inventTrans.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        }

        return inventSettlement.CostAmountAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static InventSettlement findRecId(RecId recId,boolean _forUpdate = false)
    {
        InventSettlement inventSettlement;

        if (recId)
        {
            inventSettlement.selectForUpdate(_forUpdate);

            select firstonly inventSettlement
                where inventSettlement.RecId== recId;
        }

        return inventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wraps the <c>LedgerDimensionFacade::serviceCreateLedgerDimension</c> method.
    /// </summary>
    /// <param name="_defaultAccount">
    /// The ID of the <c>DimensionAttributeValueCombination</c> record that represents the default account.
    /// </param>
    /// <param name="_defaultDimension">
    /// The ID of a default dimension set to use; optional.
    /// </param>
    /// <returns>
    /// The ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </returns>
    /// <remarks>
    /// Calling this method with an empty default account will not throw an exception.
    /// </remarks>
    private static LedgerDimensionAccount getLedgerDimensionFromDefaultAccount(
        LedgerDimensionDefaultAccount   _defaultAccount,
        DimensionDefault                _defaultDimension = 0)
    {
        if (!_defaultAccount)
            return 0;
        else
            return LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSettleTransId</Name>
				<Source><![CDATA[
    public static InventSettleTransId nextSettleTransId()
    {
        InventSettleTransId inventSettleTransId = NumberSeq::newGetNum(InventParameters::numRefInventSettleTransId()).num();

        if (!inventSettleTransId)
            throw error(strFmt("@SYS28626", "@SYS53840"));

        return inventSettleTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfSettlementVoucher</Name>
				<Source><![CDATA[
    public static Integer numOfSettlementVoucher(TransDate _transDate, Voucher _voucher)
    {
        return any2int((select count(RecId) from inventSettlement
                            where inventSettlement.Voucher      == _voucher &&
                                  inventSettlement.TransDate    == _transDate).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveAdjustment</Name>
				<Source><![CDATA[
    public static InventSettlement reserveAdjustment(
        LedgerVoucher       _ledgerVoucher,
        InventSettlement    _inventSettlement)
    {
        InventSettlement    reverseSettlement;

        if ((_inventSettlement.SettleModel != InventSettleModel::Adjustment &&
             _inventSettlement.SettleModel != InventSettleModel::PhysicalValue) ||
            _inventSettlement.Cancelled)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }
        reverseSettlement.initFromInventSettlement(_inventSettlement);
        reverseSettlement.SettleModel          = _inventSettlement.SettleModel;
        reverseSettlement.SettleType           = _inventSettlement.SettleType;
        reverseSettlement.TransDate            = max(_inventSettlement.TransDate, _ledgerVoucher.lastTransDate());
        reverseSettlement.Voucher              = _ledgerVoucher.lastVoucher();
        reverseSettlement.BalanceSheetLedgerDimension   = _inventSettlement.BalanceSheetLedgerDimension;
        reverseSettlement.BalanceSheetPosting  = _inventSettlement.BalanceSheetPosting;
        reverseSettlement.OperationsLedgerDimension     = _inventSettlement.OperationsLedgerDimension;
        reverseSettlement.OperationsPosting    = _inventSettlement.OperationsPosting;
        reverseSettlement.CostAmountAdjustment = -_inventSettlement.CostAmountAdjustment;

        return reverseSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>advancePhysicalAdjustmentToFinancialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances a physical adjustment to a financial adjustment.
    /// </summary>
    /// <param name="_inventMovement">The <c>InventMovement</c> that belongs to the currently processed transaction.</param>
    /// <param name="_ledgerVoucher">The <c>LedgerVoucher</c> to which the postings should be added.</param>
    /// <param name = "_physicalSettlement">The physical adjustment.</param>
    public static InventSettlement advancePhysicalAdjustmentToFinancialAdjustment(
        InventMovement      _inventMovement,
        LedgerVoucher       _ledgerVoucher,
        InventSettlement    _inventSettlement)
    {
        if ((_inventSettlement.SettleModel != InventSettleModel::Adjustment &&
             _inventSettlement.SettleModel != InventSettleModel::PhysicalValue) ||
             _inventSettlement.Cancelled)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        InventSettlement financialSettlement;

        financialSettlement.data(_inventSettlement);
        financialSettlement.SettleModel                 = InventSettleModel::Adjustment;
        financialSettlement.TransDate                   = _ledgerVoucher.lastTransDate();
        financialSettlement.Voucher                     = _ledgerVoucher.lastVoucher();
        financialSettlement.DefaultDimension            = financialSettlement.copyDimension(_inventSettlement.DefaultDimension);
        financialSettlement.BalanceSheetLedgerDimension = InventSettlement::getLedgerDimensionFromDefaultAccount(
                                                              _inventMovement.accountBalanceSheet(),
                                                              financialSettlement.DefaultDimension);
        financialSettlement.BalanceSheetPosting         = _inventMovement.postingBalanceSheet();
        financialSettlement.Posted                      = NoYes::No;

        return financialSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostPhysical2FinancialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an inventory settlement with a financial adjustment that corresponds to a physical
    ///    standard cost adjustment.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement.
    /// </param>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <param name="_inventSettlement">
    ///    An inventory settlement buffer with the physical adjustment.
    /// </param>
    /// <returns>
    ///    An inventory settlement.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The inventory settlement is not a physical adjustment or canceled.
    /// </exception>
    public static InventSettlement stdCostPhysical2FinancialAdjustment(
        LedgerVoucher       _ledgerVoucher,
        InventMovement      _inventMovement,
        InventTrans         _inventTrans,
        InventSettlement    _inventSettlement)
    {
        InventSettlement    financialAdjustment;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if ((_inventSettlement.SettleModel != InventSettleModel::Adjustment &&
             _inventSettlement.SettleModel != InventSettleModel::PhysicalValue) ||
            _inventSettlement.Cancelled)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }
        financialAdjustment.initFromInventSettlement(_inventSettlement);
        financialAdjustment.SettleModel             = InventSettleModel::Adjustment;
        financialAdjustment.SettleType              = InventSettleType::CompleteAdjustment;

        financialAdjustment.TransDate               = InventModelType_StdCost::calcFinancialTransDate(_ledgerVoucher,
                                                                                                      _inventTrans,
                                                                                                      financialAdjustment);
        financialAdjustment.Voucher                 = _ledgerVoucher.lastVoucher();

        if (_inventSettlement.BalanceSheetPosting &&
            _inventSettlement.BalanceSheetLedgerDimension &&
            !_inventSettlement.isBackDate(_inventTrans.DateFinancial))
        {
            financialAdjustment.OperationsPosting           = _inventSettlement.BalanceSheetPosting;
            financialAdjustment.OperationsLedgerDimension   = InventSettlement::getSyncdLedgerDimension(_inventSettlement.BalanceSheetLedgerDimension);
        }
        else
        {
            financialAdjustment.OperationsPosting   = LedgerPostingType::InventStdCostRoundingVariance;

            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                financialAdjustment.OperationsLedgerDimension = InventSettlement::getLedgerDimensionFromDefaultAccount(
                    InventPosting::itemExtendParm_CN(
                        InventAccountType::InventStdCostRoundingVariance,
                        InventPostingExtendParm_CN::constructInventDim(_inventMovement.inventdim()),
                        _inventMovement.itemId(),
                        _inventMovement.inventTable().itemGroupId()),
                        _inventSettlement.DefaultDimension);
            }
            else
            {
                financialAdjustment.OperationsLedgerDimension = InventSettlement::getLedgerDimensionFromDefaultAccount(
                    InventPosting::itemLedgerDimensionFromParameter(_inventMovement.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventStdCostRoundingVariance)),
                                                                    _inventSettlement.DefaultDimension);
            }
        }

        financialAdjustment.BalanceSheetPosting         = _inventMovement.postingBalanceSheet();
        financialAdjustment.BalanceSheetLedgerDimension = InventSettlement::getLedgerDimensionFromDefaultAccount(
                                                                _inventMovement.accountBalanceSheet(),
                                                                _inventSettlement.DefaultDimension);

        financialAdjustment.CostAmountAdjustment    = _inventSettlement.CostAmountAdjustment;

        return financialAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysicalReportingCurrencyAmount</Name>
				<Source><![CDATA[
    private AmountMSTSecondary getPhysicalReportingCurrencyAmount(LedgerVoucherObject _ledgerVoucherObject, InventSettlement _physicalSettlement)
    {
        AmountMSTSecondary          physicalReportingCurrencyAmount;

        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;

        while select firstonly generalJournalAccountEntry
            where generalJournalAccountEntry.TransactionCurrencyCode  == CompanyInfoHelper::standardCurrency()
               && generalJournalAccountEntry.AccountingCurrencyAmount != 0
            exists join generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                   && generalJournalEntry.Ledger                     == Ledger::current()
                   && generalJournalEntry.SubledgerVoucher           == _physicalSettlement.Voucher
                   && generalJournalEntry.SubledgerVoucherDataAreaId == _physicalSettlement.DataAreaId
                   && generalJournalEntry.AccountingDate             == _physicalSettlement.TransDate
        {
            CurrencyExchangeHelper diffCurrencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _physicalSettlement.TransDate);

            CurrencyCode transactionCurrencyCode = _ledgerVoucherObject.parmTransactionCurrencyCode();
            if (transactionCurrencyCode && CompanyInfoHelper::standardCurrency() != transactionCurrencyCode)
            {
                // Convert Accounting to Transaction, then Transaction to Reporting
                AmountCur temporaryTransactionAmount = diffCurrencyExchangeHelper.calculateAccountingToTransaction(transactionCurrencyCode, this.CostAmountAdjustment, true);
                physicalReportingCurrencyAmount      = diffCurrencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(transactionCurrencyCode, temporaryTransactionAmount);
            }
            else
            {
                physicalReportingCurrencyAmount     = diffCurrencyExchangeHelper.calculateTransactionToReporting(generalJournalAccountEntry.TransactionCurrencyCode, this.CostAmountAdjustment);
            }
        }

        return physicalReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPreInventSettlementAccordingToPreInventCostTrans</Name>
				<Source><![CDATA[
    public static InventSettlement GetPreInventSettlementAccordingToPreInventCostTrans(InventItemPrice preInventItemPrice, InventTrans inventTrans)
    {
        InventSettlement preInventSettlement;

        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            CostParameters costParameters = CostParameters::find();

            if(costParameters.DimensionDefaultingSource == DimensionDefaultingSource::Posting && preInventItemPrice && preInventItemPrice.StdCostVoucher != "")
            {
                select firstonly DefaultDimension from preInventSettlement
                    where preInventSettlement.Voucher    == preInventItemPrice.StdCostVoucher
                       && preInventSettlement.TransDate  == preInventItemPrice.StdCostTransDate
                       && preInventSettlement.TransRecId == inventTrans.RecId;
            }
        }
        return preInventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSyncdLedgerDimension</Name>
				<Source><![CDATA[
    private static LedgerDimensionAccount getSyncdLedgerDimension(LedgerDimensionAccount _ledgerDimension = 0)
    {
        // When the hierarchy is not associated with the ledger anymore, then create a new ledger dimension.
        LedgerDimensionAccount ledgerDimensionAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerDimension);
        DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerDimension);
        LedgerDimensionBase newLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionAccount, dimensionDefault);

        return newLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBalanceSheetLedgerDimension</Name>
				<Source><![CDATA[
    private void checkBalanceSheetLedgerDimension()
    {
        if (this.CostAmountAdjustment 
            && !this.BalanceSheetLedgerDimension
            && this.BalanceSheetPosting != LedgerPostingType::None)
        {
            throw error(strFmt("@SCM:CostSettlementMissingLedgerDim", this.InventTransId, this.TransRecId, this.BalanceSheetPosting));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123669</DeveloperDocumentation>
	<FormRef>InventSettlementTrans</FormRef>
	<Label>@SYS3455</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventTransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>RecIdTypeIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecIdTypeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySettled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountSettled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountAdjustment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@Sys14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventorySettlement</Name>
			<Label>@SYS3455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySettled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountSettled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWSettled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccountMarkup_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceIdMarkup_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventSettlementSecCur_RU</Name>
			<Label>@GLS102393</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@Sys3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationsPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperationsLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceSheetPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceSheetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransBeginTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BalanceSheetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@SYS10835</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BalanceSheetPosting</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPostingBalanceSheet</ExtendedDataType>
			<EnumType>LedgerPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancelled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys3012</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmountAdjustment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountAdjusted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmountSettled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountSettled</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransCurrency_RU</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransCurrency_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OperationsLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@SYS978</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationsPosting</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPostingOperations</ExtendedDataType>
			<EnumType>LedgerPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWSettled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWSettled</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1711</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtySettled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtySettled</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleModel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventSettleModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettleTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSettleTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventSettleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>TransBeginTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransBeginTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DatePosted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccountMarkup_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccountMarkup_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceIdMarkup_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceIdMarkup_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateVoucherIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettleModel</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdTypeIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SettleTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettleType</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Cancelled</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QtySettled</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostAmountAdjustment</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransCurrency_RU</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemVoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Cancelled</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BalanceSheetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BalanceSheetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BalanceSheetLedgerDimension_InventSettlement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BalanceSheetLedgerDimension</Name>
					<Field>BalanceSheetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventSettlement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventClosing</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123670</EntityRelationshipRole>
			<RelatedTable>InventClosing</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSettlement</Name>
			<EntityRelationshipRole>@SYS123671</EntityRelationshipRole>
			<RelatedTable>InventSettlement</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SettleTransId</Name>
					<Field>SettleTransId</Field>
					<RelatedField>SettleTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransOriginIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OperationsLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OperationsLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OperationsLedgerDimension_InventSettlement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OperationsLedgerDimension</Name>
					<Field>OperationsLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountMarkup_RU</Name>
					<SourceEDT>VendAccountMarkup_RU</SourceEDT>
					<Field>VendAccountMarkup_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransArchive</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransArchive</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>InventTrans</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransOriginIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>