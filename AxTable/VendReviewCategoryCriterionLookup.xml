<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendReviewCategoryCriterionLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendReviewCategoryCriterionLookup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInheritanceAtCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>VendReviewCategoryCriterionLookup</c> records based on the inheritance added at the
    ///    specified category.
    /// </summary>
    /// <param name="_ecoResCategory">
    ///    The <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    public static void addInheritanceAtCategory(EcoResCategory _ecoResCategory)
    {
        EcoResCategory                      stopInheritNode, tempStopNode;
        VendReviewCategoryCriterionLookup   vendReviewCategoryCriterionLookup;
        VendReviewCategoryCriterionGroup    vendReviewCategoryCriterionGroup;
        ProcCategoryExpanded                subTree, pathToThis, ancestor;
        ProcCategoryModifier                procCategory;

        // Use stopInheritNode concept, which means where a EcoResCategory
        // stops inheriting criterion group relationship from its ancestors.
        select maxof(Level) from stopInheritNode
            where stopInheritNode.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                && stopInheritNode.NestedSetLeft < _ecoResCategory.NestedSetLeft
                && stopInheritNode.NestedSetRight > _ecoResCategory.NestedSetRight
            notexists join procCategory
                where stopInheritNode.RecId == procCategory.Category
                    && procCategory.IsCriterionGroupInherited  == NoYes::Yes;

        select firstonly NestedSetLeft, NestedSetRight, Level, CategoryHierarchy, RecId from tempStopNode
            where tempStopNode.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                && tempStopNode.Level == stopInheritNode.Level
                && tempStopNode.NestedSetLeft < _ecoResCategory.NestedSetLeft
                && tempStopNode.NestedSetRight > _ecoResCategory.NestedSetRight;

        // Insert new vendReviewCategoryCriterionLookup records for the subTree nodes whose path
        // to _ecoResCategory only contains nodes with IsCriterionGroupInherited equals true.
        insert_recordset vendReviewCategoryCriterionLookup (CriterionGroup, OriginationCategory, Category)
            select CriterionGroup, ProcurementCategory from vendReviewCategoryCriterionGroup
                join CategoryId from subTree
                    where subTree.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                        && subTree.NestedSetLeft >= _ecoResCategory.NestedSetLeft
                        && subTree.NestedSetRight <= _ecoResCategory.NestedSetRight
                exists join ancestor
                    where ancestor.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                        && ancestor.NestedSetLeft >= tempStopNode.NestedSetLeft
                        && ancestor.NestedSetRight <= tempStopNode.NestedSetRight
                        && ancestor.NestedSetLeft < _ecoResCategory.NestedSetLeft
                        && ancestor.NestedSetRight > _ecoResCategory.NestedSetRight
                        && ancestor.CategoryId == vendReviewCategoryCriterionGroup.ProcurementCategory
                notexists join pathToThis
                    where pathToThis.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                        && pathToThis.NestedSetLeft <= subTree.NestedSetLeft
                        && pathToThis.NestedSetRight >= subTree.NestedSetRight
                        && pathToThis.NestedSetLeft >= _ecoResCategory.NestedSetLeft
                        && pathToThis.NestedSetRight <= _ecoResCategory.NestedSetRight
                        && pathToThis.IsCriterionGroupInherited == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakInheritanceAtCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>VendReviewCategoryCriterionLookup</c> records whose category field belongs to the
    ///    sub tree of the specified category and the <c>OriginationCategory</c> field that belongs to the
    ///    ancestors of the records.
    /// </summary>
    /// <param name="_ecoResCategory">
    ///    The <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    public static void breakInheritanceAtCategory(EcoResCategory _ecoResCategory)
    {
        VendReviewCategoryCriterionLookup vendReviewCategoryCriterionLookup;
        EcoResCategory      subTree, ancestor;

        // Delete old VendCategoryLookUp records, whose Category field belongs to this's
        // subTree, and OriginationCategory field belongs to this's ancestors.
        while select forupdate vendReviewCategoryCriterionLookup
            exists join subTree
                where subTree.RecId == vendReviewCategoryCriterionLookup.Category
                    && subTree.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                    && subTree.NestedSetLeft     >= _ecoResCategory.NestedSetLeft
                    && subTree.NestedSetRight    <= _ecoResCategory.NestedSetRight
            exists join ancestor
                where ancestor.RecId == vendReviewCategoryCriterionLookup.OriginationCategory
                    && ancestor.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                    && ancestor.NestedSetLeft     <  _ecoResCategory.NestedSetLeft
                    && ancestor.NestedSetRight    >  _ecoResCategory.NestedSetRight
        {
            vendReviewCategoryCriterionLookup.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>VendReviewCategoryCriterionLookup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>recId</c> field in the <c>VendReviewCategoryCriterionLookup</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false, and an error message is displayed.
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        if (_recId && VendReviewCategoryCriterionLookup::exist(_recId))
            return true;

        return checkFailed(strfmt(VendReviewCategoryCriterionLookup::txtNotExist(), _recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneOriginationCategoryCriterionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts new records into the <c>VendReviewCategoryCriterionLookup</c> table for the specified
    ///    category by duplicating records.
    /// </summary>
    /// <param name="_fromCategory">
    ///    The ID of the <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    /// <param name="_toCategory">
    ///    The ID of the <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    public static void cloneOriginationCategoryCriterionGroup(EcoResCategoryId   _fromCategory,
                                                                     EcoResCategoryId   _toCategory)
    {
        VendReviewCategoryCriterionLookup newRecord, vendReviewCategoryCriterionLookup;

        insert_recordset newRecord (CriterionGroup, Category, OriginationCategory)
            select CriterionGroup, _toCategory, OriginationCategory from vendReviewCategoryCriterionLookup
                    where vendReviewCategoryCriterionLookup.Category == _fromCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginationCategoryCriterionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the criterion group for the specified origination category.
    /// </summary>
    /// <param name="_criterionGroup">
    ///    The ID of the <c>VendReviewCriterionGroup</c> record that is used as a filter.
    /// </param>
    /// <param name="_originationCategory">
    ///    The ID of the <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    public static void deleteOriginationCategoryCriterionGroup(RefRecId           _criterionGroup,
                                                         EcoResCategoryId   _originationCategory)
    {
        VendReviewCategoryCriterionLookup vendReviewCategoryCriterionLookup;

        delete_from vendReviewCategoryCriterionLookup
                where vendReviewCategoryCriterionLookup.CriterionGroup == _criterionGroup
                    && vendReviewCategoryCriterionLookup.OriginationCategory == _originationCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record of the <c>VendReviewCategoryCriterionLookup</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID for which to search.
    /// </param>
    /// <returns>
    ///    true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (VendReviewCategoryCriterionLookup::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendReviewCategoryCriterionLookup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID for which to search.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record is to be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>VendReviewCategoryCriterionLookup</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static VendReviewCategoryCriterionLookup find(RefRecId _recId, boolean _forUpdate = false)
    {
        VendReviewCategoryCriterionLookup    vendReviewCategoryCriterionLookup = null;

        if (_recId)
        {
            vendReviewCategoryCriterionLookup.selectForUpdate(_forUpdate);
            select firstonly vendReviewCategoryCriterionLookup
                    where vendReviewCategoryCriterionLookup.RecId == _recId;
        }

        return vendReviewCategoryCriterionLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOriginationCategoryCriterionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts new records into the <c>VendReviewCategoryCriterionLookup</c> table for the specified
    ///    origination category and criterion group.
    /// </summary>
    /// <param name="_criterionGroup">
    ///    The ID of the <c>VendReviewCriterionGroup</c> record that is used as a filter.
    /// </param>
    /// <param name="_originationCategory">
    ///    The ID of the <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    public static void insertOriginationCategoryCriterionGroup(RefRecId           _criterionGroup,
                                                         EcoResCategoryId   _originationCategory)
    {
        VendReviewCategoryCriterionLookup vendReviewCategoryCriterionLookup;
        VendReviewCategoryCriterionGroup  vendReviewCategoryCriterionGroup;
        ProcCategoryExpanded              subTreeRoot, subTree;
        ProcCategoryExpanded              pathToRoot;

        // Insert new VendReviewCategoryCriterionLookup records for subTree nodes whose path
        // to subTreeRoot only contains nodes with IsCriterionGroupInherited equals true.
        insert_recordset vendReviewCategoryCriterionLookup (CriterionGroup, OriginationCategory, Category)
            select CriterionGroup, ProcurementCategory from vendReviewCategoryCriterionGroup
                    where vendReviewCategoryCriterionGroup.CriterionGroup == _criterionGroup
                        && vendReviewCategoryCriterionGroup.ProcurementCategory == _originationCategory
            join CategoryId from subTree
                exists join subTreeRoot
                    where subTreeRoot.CategoryId == _originationCategory
                        && subTree.CategoryHierarchy == subTreeRoot.CategoryHierarchy
                        && subTree.NestedSetLeft >= subTreeRoot.NestedSetLeft
                        && subTree.NestedSetRight <= subTreeRoot.NestedSetRight
                notexists join pathToRoot
                    where pathToRoot.CategoryHierarchy == subTreeRoot.CategoryHierarchy
                        && pathToRoot.NestedSetLeft <= subTree.NestedSetLeft
                        && pathToRoot.NestedSetRight >= subTree.NestedSetRight
                        && pathToRoot.NestedSetLeft > subTreeRoot.NestedSetLeft
                        && pathToRoot.NestedSetRight < subTreeRoot.NestedSetRight
                        && pathToRoot.IsCriterionGroupInherited == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static str txtNotExist()
    {
        return "@SYS302890";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginationCategoryCriterionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the criterion group value for the specified origination category.
    /// </summary>
    /// <param name="_originalCriterionGroup">
    ///    The ID of the <c>VendReviewCriterionGroup</c> record that is used as a filter.
    /// </param>
    /// <param name="_updatedCriterionGroup">
    ///    The ID of the <c>VendReviewCriterionGroup</c> record that is used as a filter.
    /// </param>
    /// <param name="_originationCategory">
    ///    The ID of the <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    public static void updateOriginationCategoryCriterionGroup(RefRecId           _originalCriterionGroup,
                                                         RefRecId           _updatedCriterionGroup,
                                                         EcoResCategoryId   _originationCategory)
    {
        VendReviewCategoryCriterionLookup vendReviewCategoryCriterionLookup;

        update_recordset vendReviewCategoryCriterionLookup
            setting CriterionGroup = _updatedCriterionGroup
                where vendReviewCategoryCriterionLookup.CriterionGroup == _originalCriterionGroup
                    && vendReviewCategoryCriterionLookup.OriginationCategory == _originationCategory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendReview</ConfigurationKey>
	<DeveloperDocumentation>@sys312607</DeveloperDocumentation>
	<FormRef>ProcCategoryAddCriterionGroup</FormRef>
	<Label>@SYS312092</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>CriterionGroup</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CriterionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginationCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CriterionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginationCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CriterionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginationCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendReviewCriterionGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CriterionGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResOriginationCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OriginationCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategory_VendReviewCategoryCriterionLookup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResOriginationCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategory_1_VendReviewCategoryCriterionLookup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginationCategory</Name>
					<Field>OriginationCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendReviewCriterionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendReviewCriterionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendReviewCriterionGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendReviewCriterionGroup_VendReviewCategoryCriterionLookup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CriterionGroup</Name>
					<Field>CriterionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>