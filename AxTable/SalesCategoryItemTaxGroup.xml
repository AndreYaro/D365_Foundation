<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCategoryItemTaxGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesCategoryItemTaxGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>SalesCategoryItemTaxGroup</c> table.
    /// </summary>
    /// <param name="_salesCategoryItemTaxGroup">
    ///    The ID of the <c>SalesCategoryItemTaxGroup</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false, and an error message is displayed.
    /// </returns>
    public static boolean checkExist(RefRecId _salesCategoryItemTaxGroup)
    {
        if (_salesCategoryItemTaxGroup && SalesCategoryItemTaxGroup::exist(_salesCategoryItemTaxGroup))
        {
            return true;
        }

        return checkFailed(strfmt(SalesCategoryItemTaxGroup::txtNotExist(), _salesCategoryItemTaxGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>SalesCategoryItemTaxGroup</c> table.
    /// </summary>
    /// <param name="_salesCategoryItemTaxGroup">
    ///    The ID of the <c>SalesCategoryItemTaxGroup</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _salesCategoryItemTaxGroup)
    {
        return (SalesCategoryItemTaxGroup::find(_salesCategoryItemTaxGroup).RecId !=0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SalesCategoryItemTaxGroup</c> table.
    /// </summary>
    /// <param name="_salesCategoryItemTaxGroup">
    ///    The ID of the <c>SalesCategoryItemTaxGroup</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SalesCategoryItemTaxGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesCategoryItemTaxGroup find(RefRecId _salesCategoryItemTaxGroup, boolean _forupdate = false)
    {
        SalesCategoryItemTaxGroup salesCategoryItemTaxGroup = null;

        if (_salesCategoryItemTaxGroup)
        {
            salesCategoryItemTaxGroup.selectForUpdate(_forupdate);
            select firstonly salesCategoryItemTaxGroup
                where salesCategoryItemTaxGroup.RecId == _salesCategoryItemTaxGroup;
        }

        return salesCategoryItemTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesCategoryItemTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item tax group that is associated with the specified category and the specified
    ///    organization.
    /// </summary>
    /// <param name="_salesCategoryId">
    ///    The category ID in the <c>EcoResCategoryId</c> table for which the tax item group is retrieved.
    /// </param>
    /// <param name="_buyingLegalEntity">
    ///    The legal entity.
    /// </param>
    /// <returns>
    ///    A record of the <c>TaxItemGroupHeading</c> table that is associated with the specified category for
    ///    the specified organization, if found; otherwise, an empty buffer.
    /// </returns>
    public static TaxItemGroupHeading getSalesCategoryItemTaxGroup(EcoResCategoryId _salesCategoryId, RefRecId _buyingLegalEntity)
    {
        SalesCategoryItemTaxGroup       salesCategoryItemTaxGroup;
        TaxItemGroupHeading             taxItemGroupHeading = null;
        CompanyInfo                     companyInfo         = null;
        EcoResCategory                  selectedCategory    = EcoResCategory::find(_salesCategoryId);
        EcoResCategory                  ecoResCategory;

        if (Global::isConfigurationkeyEnabled(configurationkeynum(ProcCategory)))
        {
            select firstonly RecId, DataArea from companyInfo
                where companyInfo.RecId == _buyingLegalEntity;

            if (companyInfo.RecId !=0 && selectedCategory.RecId !=0)
            {
                changecompany (companyInfo.DataArea)
                {
                    select firstonly taxItemGroupHeading
                        join TaxItemGroupDataAreaId, SalesCategory from salesCategoryItemTaxGroup
                            where salesCategoryItemTaxGroup.TaxItemGroup == taxItemGroupHeading.TaxItemGroup
                                && salesCategoryItemTaxGroup.TaxItemGroupDataAreaId == taxItemGroupHeading.DataAreaId
                        //this join walks up the category tree
                        join ecoResCategory
                            order by ecoResCategory.Level desc
                                where ecoResCategory.RecId == salesCategoryItemTaxGroup.SalesCategory
                                    && ecoResCategory.NestedSetLeft  <= selectedCategory.NestedSetLeft
                                    && ecoResCategory.NestedSetRight >= selectedCategory.NestedSetRight;
                }
            }
        }

        return taxItemGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static str txtNotExist()
    {
        return "@SYS302890";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS319091</DeveloperDocumentation>
	<FormRef>SalescategoryHierarchyManagement</FormRef>
	<Label>@SYS319098</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>SalesCategory</TitleField1>
	<TitleField2>TaxItemGroup</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>CategoryDataAreaIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesCategory</Name>
			<Label>@SYS319093</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryDataAreaIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxItemGroupDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxItemGroupHeadingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxItemGroupDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesCategoryItemTaxGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupDataAreaId</Name>
					<Field>TaxItemGroupDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_SalesCategoryItemTaxGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxItemGroupHeading_SalesCategoryItemTaxGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupDataAreaId</Name>
					<Field>TaxItemGroupDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>