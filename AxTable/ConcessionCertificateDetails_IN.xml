<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConcessionCertificateDetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConcessionCertificateDetails_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validate fields of ConcessionCertificateDetails_IN table.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///     The field to be validated.
    /// </param>
    /// <returns>
    ///     Returns true when all fields are correct.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        TaxWithholdReasonCode_IN    reasonCode;
        TaxWithholdCodeType_IN  taxTypeLoc;
        CertificateNumber_IN    certificate;
        str head;
        str tail;
        str alphaNumeric;
        str isAlphabets;
        str isNumbers;

        #define.10(10)
        #define.9(9)
        #define.G('G')
        #define.H('H')
        #define.numbers('0123456789')
        #define.alphabets('ABCDEFGHIJKLMNOPQRSTUVWXYZ')

        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(ConcessionCertificateDetails_IN, CertValidFrom):
                    if (this.CertValidTo && this.CertValidFrom > this.CertValidTo)
                    {
                        ret = ret && checkFailed("@SYS4003633");
                    }
                    break;

                case fieldNum(ConcessionCertificateDetails_IN, CertValidTo):
                    if (this.CertValidTo && this.CertValidFrom > this.CertValidTo)
                    {
                        ret = ret && checkFailed("@SYS4003634");
                    }
                    break;

                case fieldNum(ConcessionCertificateDetails_IN, EndingDate):
                    if (this.CertValidFrom && (!this.EndingDate || this.CertValidFrom > this.EndingDate))
                    {
                        ret = ret && checkFailed("@SYS4003653");
                    }

                    if (this.CertValidTo && (!this.EndingDate || this.CertValidTo < this.EndingDate))
                    {
                        ret = ret && checkFailed("@SYS4003654");
                    }
                    break;

                case fieldNum(ConcessionCertificateDetails_IN, TurnoverThreshold):
                    if (this.TurnoverThreshold < 0)
                    {
                        ret = ret && checkFailed("@SYS4003637");
                    }
                    break;

                case fieldNum(ConcessionCertificateDetails_IN, CertificateNumber):
                    reasonCode = TaxValueData_IN::findThreshholdSection(this.ThresholdSections,
                                this.SourceReferenceTableId,this.SourceReferenceRecId).ReasonCode;
                    taxTypeLoc = TaxValueThresholdProfile_IN::findTaxType(this.SourceReferenceRecId).TaxType_IN;
                    certificate = this.CertificateNumber;

                    // 10 digits
                    if ((taxTypeLoc == TaxWithholdCodeType_IN::TDS
                    &&  reasonCode == "@SYS80101")
                // TCS + A + 206C(9)
                    || (taxTypeLoc == TaxWithholdCodeType_IN::TCS && (reasonCode == "@SYS80101" || reasonCode == "@GLS6380")))
                    {
                        alphaNumeric = stralpha(this.CertificateNumber);
                        isAlphabets  = strkeep(#alphabets, alphaNumeric);
                        isNumbers    = strkeep(#numbers, alphaNumeric);

                        if (!isAlphabets || !isNumbers || strlen(alphaNumeric) != 10)
                        {
                            ret = ret && checkFailed("@TaxLocalization:ValidateCertificateField");
                        }

                    }

                    // start with G/H and follow with 9 digits
                    if (taxTypeLoc == TaxWithholdCodeType_IN::TDS
                        && reasonCode == "@SYS30307")
                    {
                        if(strLen(certificate) != 10 || !certificate)
                        {
                            ret = ret && checkFailed("@TaxLocalization:ValidateTheFirstDigitOfCertificate");
                            // not meet the condition, we return in case cause below code error.
                            return ret;
                        }

                        head = subStr(certificate, 0 ,1);
                        tail = subStr(certificate, 2, 9);

                        if (!((strLen(strKeep(#G, head)) == 1) || (strLen(strKeep(#H, head)) == 1)))
                        {
                            ret = checkFailed("@TaxLocalization:ValidateTheFirstDigitOfCertificate");

                            return ret;
                        }

                        isNumbers    = strkeep(#numbers, tail);
                        if(strKeep(subStr(this.CertificateNumber, 2, 9), #numbers) != subStr(this.CertificateNumber, 2, 9))
                        {
                            ret = checkFailed("@TaxLocalization:ValidateTheFirstDigitOfCertificate");
                        }
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003652</DeveloperDocumentation>
	<Label>@SYS4003652</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CertificateNumber</TitleField1>
	<TitleField2>TurnoverThreshold</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>APARShared</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TurnoverThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdSections</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceReferenceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceReferenceTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceReferenceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceReferenceTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConcessionCertificate</Name>
			<Label>@SYS4003652</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceReferenceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceReferenceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdSections</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TurnoverThreshold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CertificateNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS24050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS35904</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndingDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceReferenceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceReferenceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ThresholdSections</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TurnoverThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TurnoverThreshold_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceReferenceRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceReferenceTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TaxValueThresholdProfile_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxValueThresholdProfile_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceReferenceRecId</Name>
					<Field>SourceReferenceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceReferenceTableId</Name>
					<Field>SourceReferenceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ThresholdSections_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ThresholdSections_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThresholdSections</Name>
					<Field>ThresholdSections</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>