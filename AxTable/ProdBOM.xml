<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdBOM extends common
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    public display InventQtyAvailPhysicalDim availPhysical()
    {
        InventMovement movement = InventMovement::construct(this);

        if (this.QtyInventStUp)
        {
            return InventOnHandQty::newPhysicalUpdate(movement,movement.inventdim()).availPhysical();
        }
        else
        {
            return InventOnHandQty::newEstimatedUpdate(movement,movement.inventdim()).availPhysical();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeReleasedToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>ProdBOM</c> record can be released to warehouse.    
    /// </summary>
    /// <returns>true if the record can be released to warehouse; otherwise, false.</returns>
    public boolean canBeReleasedToWarehouse()
    {
        boolean    ret        = false;
        ProdStatus prodStatus = this.prodTable().ProdStatus;

        if (prodStatus == ProdStatus::ReportedFinished
        ||  prodStatus == ProdStatus::Released
        ||  prodStatus == ProdStatus::StartedUp)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bom</Name>
				<Source><![CDATA[
    public BOM bom(BOMId _bomId, ItemId _itemId)
    {
        BOM     bom;

        if (_bomId)
        {
            select firstonly bom
                where  bom.bomId     == _bomId
                    && bom.ItemId    == _itemId;
        }

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomQty</Name>
				<Source><![CDATA[
    public BOMQty bomQty(Qty _serieSize = 1)
    {
        return this.BOMMap::bomQty(_serieSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomQtyFormula</Name>
				<Source><![CDATA[
    public BOMQty bomQtyFormula(
        Qty    _seriesSize,
        ItemId _parentItemId)
    {
        return this.BOMMap::bomQtyFormula(_seriesSize,_parentItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostAmount</Name>
				<Source><![CDATA[
    public CostAmount calcCostAmount(InventQty _qty)
    {
        return CurrencyExchangeHelper::amount(_qty * InventTable::findCostPcsPrice(this.ItemId, this.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostAmountSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount calcCostAmountSecCur_RU(InventQty qty)
    {
        return CurrencyExchangeHelper::amount(qty * InventTable::findCostPcsPriceSecCur_RU(this.ItemId, this.InventDimId), CompanyInfoHelper::secondaryCurrency_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinancialCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the financial cost amount.
    /// </summary>
    /// <returns>
    /// A container that contains the quantity and the financial cost amount.
    /// </returns>
    /// <remarks>
    /// This is used to recalculate the <see cref="T:ProdCalcTrans" /> records for production orders that
    /// have ended.
    /// </remarks>
    public container calcFinancialCostAmount()
    {
        InventQty       qty;
        CostAmount      value;

        [qty, value] = InventTransOrigin::calcInvoicedCostValue(InventTransOriginProdBOM::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return [-qty,-value];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates line amount of the production BOM.
    /// </summary>
    /// <param name="_qty">
    /// Estimated consumption in BOM unit; optional.
    /// </param>
    /// <returns>
    /// Line amount.
    /// </returns>
    AmountCur calcLineAmount_RU(Qty _qty = this.QtyBOMCalc)
    {
        return CurrencyExchangeHelper::amount(_qty * this.Price_RU / (this.PriceUnit_RU ? this.PriceUnit_RU : 1), this.prodTable().CurrencyCode_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRealCostAmount</Name>
				<Source><![CDATA[
    public container calcRealCostAmount()
    {
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;

        select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId == this.InventTransId
            join sum(Qty), sum(CostAmountPhysical) from inventTrans
                where inventTrans.InventTransOrigin   == inventTransOrigin.RecId
                   && ( ( inventTrans.StatusIssue     == StatusIssue::Deducted   &&
                          inventTrans.StatusReceipt   == StatusReceipt::None     )
                     || ( inventTrans.StatusIssue     == StatusIssue::None       &&
                          inventTrans.StatusReceipt   == StatusReceipt::Received ) )
                   && inventTrans.ValueOpen           == InventTransOpen::Yes
                   && inventTrans.PackingSlipReturned == NoYes::No;

        return [-inventTrans.Qty, -inventTrans.CostAmountPhysical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMQty_RU</Name>
				<Source><![CDATA[
    public boolean checkBOMQty_RU(boolean _calculatingWIP = this.prodTable().calculatingWIP_RU())
    {
        if (_calculatingWIP && this.bomQty < 0)
        {
            return checkFailed("@GLS115838");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOprNum</Name>
				<Source><![CDATA[
    public boolean checkOprNum()
    {
        if (this.OprNum)
        {
            if (!(select prodRoute
                      index hint NumOprNumIdx
                      where prodRoute.ProdId    == this.ProdId &&
                            prodRoute.OprNum    == this.OprNum).RecId)
            {
                return checkFailed(strFmt("@SYS16251",this.OprNum));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdBOMType</Name>
				<Source><![CDATA[
    public boolean checkProdBOMType()
    {
        InventTable inventTable = this.inventTable();

        if (this.type().mustBeProduced()
            && !inventTable.inventItemType().canHaveBOM()
        )
        {
            return checkFailed(strFmt("@SYS7861",this.ItemId));
        }

        if (!inventTable.isStocked())
        {
            if (this.prodTable().ProdType == ProdType::Process)
            {
                return checkFailed("@PDS1438");
            }
            else
            {
                return checkFailed("@SYS183557");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefProdJournalBOM</Name>
				<Source><![CDATA[
    public boolean  checkRefProdJournalBOM(ProdJournalBOM prodJournalBOM)
    {
        if (this.ProdId        != prodJournalBOM.ProdId    ||
            this.ItemId        != prodJournalBOM.ItemId)
        {
            return checkFailed("@SYS19559");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubProduction</Name>
				<Source><![CDATA[
    public boolean checkSubProduction(ProdTable _prodTable)
    {
        if (!this.InventTransId || this.InventRefType != InventRefType::Production)
        {
            return checkFailed("@SYS9098");
        }

        if (!_prodTable.checkValid(this.InventRefId))
        {
            return false;
        }

        if (_prodTable.InventTransId != this.InventRefTransId)
        {
            return checkFailed("@SYS368");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubPurch</Name>
				<Source><![CDATA[
    public boolean checkSubPurch(PurchLine _purchLine)
    {
        if (!this.InventTransId || this.InventRefType != InventRefType::Purch)
        {
            return checkFailed("@SYS13188");
        }

        if (!_purchLine.RecId)
        {
            return checkFailed(strFmt("@SYS19258",this.ItemId));
        }

        if (_purchLine.PurchId   != this.InventRefId)
        {
            return checkFailed("@SYS18517");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean  checkValid()
    {
        if (!this.RecId)
        {
            return checkFailed("@SYS17657");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>configId</Name>
				<Source><![CDATA[
    public display EcoResItemConfigurationName configId()
    {
        return this.inventDim().ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(Common _childBuffer = null)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        ProdTable prodTable = this.prodTable();

        prodTable.status().deletingProdBOM(this);

        super(); 

        ProdJournalBOM::deleteInventTransId(this.InventTransId);

        prodTable = this.prodTable(true);

        if (prodTable)
        {
            prodTable.status().setBackStatus();
            prodTable.doUpdate();
        }

        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this,InventMovSubType::None,_childBuffer)).updateNow();

        prodTable.status().deletedProdBOM(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushingPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the flushing principle for the production BOM line.
    /// </summary>
    /// <returns>
    ///     The flushing principle for the production BOM line.
    /// </returns>
    public ProdFlushingPrincipBOM flushingPrinciple()
    {
        ProdFlushingPrincipBOM result;

        if (this.ProdFlushingPrincip != ProdFlushingPrincipBOM::Blank)
        {
            result = this.ProdFlushingPrincip;
        }
        else
        {
            result = ProdBOM::prodFlushingPrincipItem2BOM(this.inventTable().ProdFlushingPrincip);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransIdSum</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets the <c>InventTransIdSum</c> class for the operation's inventory transaction.
    /// </summary>
    /// <returns>The <c>InventTransIdSum</c> class for the operation's inventory transaction.</returns>
    public InventTransIdSum getInventTransIdSum()
    {
        return InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(this.dataAreaId, this.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceForStorageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the scheduled resource related to the operation.
    /// </summary>
    /// <returns>
    ///     The related record of the <c>WrkCtrTable</c> table; null if none exist.
    /// </returns>
    public WrkCtrTable getResourceForStorageDimensions()
    {
        WrkCtrTable                 wrkCtrTable;

        // finds resource defined on specific primary operation
        if (this.OprNum)
        {
            wrkCtrTable = ProdRoute::find(this.ProdId,this.OprNum,RouteOprPriority::Primary).getResource(true,true);
        }

        // finds resource defined on first primary operation
        if (!wrkCtrTable)
        {
            wrkCtrTable = ProdRoute::findFirst(this.ProdId).getResource(true,true);
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSetupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any of the basic setup fields have been changed.
    /// </summary>
    /// <returns>
    /// true if any of the basic setup fields have been changed; otherwise, false .
    /// </returns>
    public boolean hasSetupChanged()
    {
        return  this.Formula                != this.orig().Formula              ||
                this.bomQty                 != this.orig().bomQty               ||
                this.bomQtySerie            != this.orig().bomQtySerie          ||
                this.UnitId                 != this.orig().UnitId               ||
                this.bomConsump             != this.orig().bomConsump           ||
                this.ProdFlushingPrincip    != this.orig().ProdFlushingPrincip  ||
                this.ScrapConst             != this.orig().ScrapConst           ||
                this.ScrapVar               != this.orig().ScrapVar             ||
                this.RoundUp                != this.orig().RoundUp              ||
                this.RoundUpQty             != this.orig().RoundUpQty           ||
                this.Height                 != this.orig().Height               ||
                this.Width                  != this.orig().Width                ||
                this.Depth                  != this.orig().Depth                ||
                this.Density                != this.orig().Density              ||
                this.Constant               != this.orig().Constant             ||
                this.PdsCWQty            != this.orig().PdsCWQty                ||
                !InventDim::isInventDimEqualProductDim(EcoResProductDimGroupSetup::newItemId(this.ItemId),
                                                       this.inventDim(),
                                                       this.orig().inventDim())
                ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageOutputOrderError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the icon in the form image list.
    /// </summary>
    /// <returns>
    /// The <c>JmgLabelOutputOrderError</c> value.
    /// </returns>
    /// <remarks>
    /// 0 indicates no image. 1 indicates a warning image.
    /// </remarks>
    public display JmgLabelOutputOrderError imageOutputOrderError()
    {
        WMSOrder wmsOrder;
        while select wmsOrder where wmsOrder.InventTransId == this.InventTransId
        {
            if (wmsOrder.Qty != wmsOrder.qtyCompleted())
            {
                return 0;
            }
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    public void initFromBOM(BOM _bom)
    {
        // This will also copy the inventDimId, so all dimensions from the BOM is copied
        this.BOMMap::initFromBOMMap(_bom);
        this.bomRefRecId = _bom.RecId;
        this.MaterialOverpickPercentage = _bom.MaterialOverpickPercentage;

        if (this.ProdFlushingPrincip == ProdFlushingPrincipBOM::Blank)
        {
            this.ProdFlushingPrincip = ProdBOM::prodFlushingPrincipItem2BOM(this.inventTable().ProdFlushingPrincip);
        }

        if (this.isProjMethodConsumed() && _bom.bomType == BOMType::PeggedSupply)
        {
            this.ProjSetSubProdToConsumed = _bom.ProjSetSubProdToConsumed;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PDSPotency)))
        {
            if (this.pdsIngredientType != PDSIngredientTypeEnum::None)
            {
                this.Reservation = ProdReservation::None;
                this.bomConsump  = BOMConsumpType::Variable;
            }
        }

        this.initReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init reservation from model group
    /// </summary>
    internal void initReservation()
    {
        if (!this.prodTable().isBatchBalancingEnabled() &&
             this.pdsIngredientType != PDSIngredientTypeEnum::Active)
        {
            InventModelGroup modelGroup = this.inventTable().modelGroup();

            if (modelGroup.ItemProdReservationActive)
            {
                this.Reservation = modelGroup.ItemProdReservation;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        this.initProductMasterSpecificDefaulting(_inventTable);
        this.initDimensionsSpecificDefaulting(_inventTable);		
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductMasterSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the <c>InventTable</c> record.
    /// </summary>
    /// <param name = "_inventTable">The item record.</param>
    public void initProductMasterSpecificDefaulting(InventTable _inventTable)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        this.ItemId                     = _inventTable.ItemId;
        this.UnitId                     = _inventTable.bomUnitId;
        this.ScrapConst                 = _inventTable.ScrapConst;
        this.ScrapVar                   = _inventTable.ScrapVar;
        this.MaterialOverpickPercentage = WHSInventTable::find(_inventTable.ItemId).MaterialOverpickPercentage;

        //<GEERU>
        if (countryRegion_RU)
        {
            this.setPrice_RU();
        }
        // </GEERU>
        this.ProdLineType               = _inventTable.Phantom ? BOMType::Phantom: BOMType::Item;

        this.DefaultDimension           = this.mergeDimension(ProdTable::find(this.ProdId).DefaultDimension, _inventTable.DefaultDimension);

        InventDim inventDim = this.inventDim();
        inventDim.initProductDimensionsFromInventTable(_inventTable, inventDim);
        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension dependent fields.
    /// </summary>
    /// <param name = "_inventTable">The item record.</param>
    /// <param name = "_inventDimDefault">Input for initial defaulting of dimension values.</param>
    public void initDimensionsSpecificDefaulting(InventTable _inventTable = this.inventTable())
    {
        InventDim   inventDim = InventDim::find(this.InventDimId);

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
        {
            return;
        }

        //Limit to the same site as the parent production order
        inventDim.InventSiteId = this.prodTable().inventDim().InventSiteId;

        inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Invent, inventDim);

        this.setInventDimIdFromInventDim(inventDim);

        if (this.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(this).initFromInventTable(_inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles reinitialization if needed when an associated <c>InventDim</c> buffer is changed.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer.</param>
    /// <param name = "_inventDimFieldId">The field that was changed.</param>
    public void modifiedInventDim(InventDim _inventDim, FieldId _inventDimFieldId)
    {
        boolean isFieldProductOrSiteDimension = _inventDim.siteOrProductDimFieldModified(_inventDimFieldId);
        this.InventDimId = _inventDim.inventDimId;

        if (isFieldProductOrSiteDimension)
        {
            this.initDimensionsSpecificDefaulting();
        }

        _inventDim.refreshFormDataSource(this.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalBOM</Name>
				<Source><![CDATA[
    public void  initFromProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        this.initFromProdTable(_prodJournalBOM.prodTable());

        this.ItemId                 = _prodJournalBOM.ItemId;
        this.setInventDimId(_prodJournalBOM.InventDimId);
        this.OprNum                 = _prodJournalBOM.OprNum;
        this.Position               = _prodJournalBOM.Position;
        this.UnitId                 = _prodJournalBOM.bomUnitId;
        this.RawMaterialDate        = _prodJournalBOM.TransDate;
        this.ProjCategoryId         = _prodJournalBOM.ProjCategoryId;
        this.ProjLinePropertyId     = _prodJournalBOM.ProjLinePropertyId;
        this.DefaultDimension       = this.copyDimension(_prodJournalBOM.DefaultDimension);

        if (this.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(this).initProdBOM();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.Constant        = 1;
        this.Calculation     = NoYes::Yes;
        this.ProdId          = _prodTable.ProdId;
        this.Reservation     = _prodTable.Reservation;

        if (_prodTable.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(this).initFromProdTable(_prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqTrans</Name>
				<Source><![CDATA[
    public void initFromReqTrans(
        ReqTrans        _reqTrans,
        ReqPlanData     _reqPlanData = ReqPlanData::newReqPlanVersion(_reqTrans.PlanVersion)
        )
    {
        ReqSetupDim     setupDim        = _reqPlanData.newReqSetupDimReqTrans(_reqTrans);
        InventDim       inventDim;
        ReqPlanId       reqPlanId       = ReqPlanVersion::find(_reqTrans.PlanVersion).ReqPlanId;

        if (this.InventDimId)
        {
            // merge inventory dimensions with dimensions from reqTrans
            inventDim = InventDim::find(this.InventDimId).data();
            inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(setupDim.setup().itemId()), _reqTrans.inventDim());
            inventDim = InventDim::findOrCreate(inventDim);
        }
        else
        {
            inventDim = InventDim::find(_reqTrans.CovInventDimId);
        }

        this.setInventDimId(inventDim.InventDimId,inventDim);
        this.ReqPlanIdSched          = reqPlanId;
        this.ReqPOId                 = _reqTrans.RefId;  

        BOMTable            bomTable           = this.pmfBOMTable();
        ProdTable           prodTable          = ProdTable::find(this.ProdId);
        BOMCalcData         calcBOMData        = BOMCalcData::newProdTable(prodTable.QtySched, prodTable);
        UnitOfMeasureRecId inventUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(setupDim.setup().inventUnitId());
        UnitOfMeasureRecId prodBOMUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId);

        if (#PmfEnabled && _reqTrans.PmfPlanGroupId)
        {
            this.bomQty = this.calculateSubstituteItemBomQtyFromReqTrans(_reqTrans, inventUnitOfMeasureRecId, prodBOMUnitOfMeasureRecId, prodTable);
            
            this.ScrapConst = 0;
            this.ScrapVar   = 0;
        }
        
        BOMCalcConsumption  calcBOMConsumption = BOMCalcConsumption::construct(
            this.Formula, 
            calcBOMData,
            prodTable.PmfYieldPct, 
            bomTable.PmfBOMFormula == PmfBOMFormula::Formula, 
            bomTable);

        this.QtyBOMCalc				 = calcBOMConsumption.calcConsumption(this, ReqRoute::accError(_reqTrans.PlanVersion, _reqTrans.RefId, _reqTrans.OprNum));

        this.RemainBOMPhysical       = this.QtyBOMCalc;

        this.QtyInventCalc			 = EcoResProductUnitConverter::convertForReleasedProduct(this.ItemId,
                                                                                 this.InventDimId,
                                                                                 this.QtyBOMCalc,
                                                                                 prodBOMUnitOfMeasureRecId,
                                                                                 inventUnitOfMeasureRecId,
                                                                                 NoYes::Yes);
        this.RemainInventPhysical    = this.QtyInventCalc;

        if (#PdsEnabled && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWInventCalc = UnitOfMeasureConverter::convert(
                this.QtyBOMCalc,
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.pdsCWUnitId()),
                NoYes::Yes,
                InventTable::itemProduct(this.ItemId));

            this.PdsCWRemainPhysical = UnitOfMeasureConverter::convert(
                this.RemainBOMPhysical,
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.pdsCWUnitId()),
                NoYes::Yes,
                InventTable::itemProduct(this.ItemId));
        }

        if (this.Formula == BOMFormula::Formula5)
        {
            this.BOMQty = this.pmfStepQty(this.prodTable().QtySched);
        }

        // add margins to material date
        if (_reqTrans.Qty <= 0)
        {
            this.RawMaterialDate     = _reqPlanData.schedMarginForward(_reqTrans.ReqDate,_reqPlanData.marginIssue(setupDim),setupDim);
        }
        else
        {
            this.RawMaterialDate     = _reqPlanData.schedMarginBackward(_reqTrans.ReqDate,_reqPlanData.marginReceipt(setupDim),setupDim);
        }
        this.RawMaterialTime = _reqTrans.ReqTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSubstituteItemBomQtyFromReqTrans</Name>
				<Source><![CDATA[
    private BOMQty calculateSubstituteItemBomQtyFromReqTrans(
        ReqTrans _reqTrans,
        UnitOfMeasureFromRecId _inventUnitOfMeasureRecId,
        UnitOfMeasureToRecId _prodBOMUnitOfMeasureRecId, 
        ProdTable _prodTable)
    {
        BOMQty bomQty = 0;

        if (_reqTrans.Qty)
        {
            var reqTansQtyBOMUnit = EcoResProductUnitConverter::convertForReleasedProduct(
                this.ItemId,
                this.InventDimId,
                -_reqTrans.Qty,
                _inventUnitOfMeasureRecId,
                _prodBOMUnitOfMeasureRecId,
                NoYes::No,
                NoYes::No);
 
            if (this.BOMConsump == BOMConsumpType::Constant)
            {
                bomQty = reqTansQtyBOMUnit;
            }
            else
            {
                if (FirmingBatchOrderWithPlanGroupRecalcBOMQtyFlight::instance().isEnabled())
                {
                    bomQty = this.getBOMQtyFromPrimaryFormulaLine(_reqTrans) * (reqTansQtyBOMUnit / this.getTotalQtyFromReqTrans(_reqTrans, _prodBOMUnitOfMeasureRecId));
                }
                else
                {
                    bomQty = (reqTansQtyBOMUnit / _prodTable.QtySched) * this.bomQtySerie * _prodTable.PmfYieldPct / 100;
                }
            }
        }
            
        return bomQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMQtyFromPrimaryFormulaLine</Name>
				<Source><![CDATA[
    private BOMQty getBOMQtyFromPrimaryFormulaLine(ReqTrans _reqTrans)
    {
        BOM bomPrimary;
        BOM bomRef;

        select firstonly BOMQty from bomPrimary order by PmfPlanGroupPriority
            where bomPrimary.BOMConsump != BOMConsumpType::Constant
        exists join bomRef
            where bomRef.RecId          == _reqTrans.BOMRefRecId
            &&    bomRef.BOMId          == bomPrimary.BOMId
            &&    bomRef.PmfPlanGroupId == bomPrimary.PmfPlanGroupId;
        
        return bomPrimary.BOMQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyFromReqTrans</Name>
				<Source><![CDATA[
    private ReqQty getTotalQtyFromReqTrans(ReqTrans _reqTrans, UnitOfMeasureToRecId _prodBOMUnitOfMeasureRecId)
    {
        ReqQty      reqTransQtyTotal;
        ReqTrans    reqTransTotal;
        BOM         bomRef;
        ReqPlanData reqPlanData = ReqPlanData::newReqPlanVersion(_reqTrans.PlanVersion);
            
        while select reqTransTotal
            where reqTransTotal.PlanVersion     == _reqTrans.PlanVersion
            &&    reqTransTotal.PmfPlanGroupId  == _reqTrans.PmfPlanGroupId
            &&  ((reqTransTotal.RefId == _reqTrans.RefId    && (reqTransTotal.RefType == ReqRefType::PmfFormulaLine || reqTransTotal.RefType == ReqRefType::BOMLine))
            ||   (reqTransTotal.RefId == this.ProdId        && reqTransTotal.RefType == ReqRefType::ProdLine))
        notexists join bomRef
            where bomRef.RecId == reqTransTotal.BOMRefRecId
            &&    bomRef.BOMConsump == BOMConsumpType::Constant
        {
            ReqSetupDim         setupDim    = reqPlanData.newReqSetupDimReqTrans(reqTransTotal);
            UnitOfMeasureRecId  inventUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(setupDim.setup().inventUnitId());

            var reqTransQtyBOMUnit = EcoResProductUnitConverter::convertForReleasedProduct(
                this.ItemId,
                this.InventDimId,
                -reqTransTotal.Qty,
                inventUnitOfMeasureRecId,
                _prodBOMUnitOfMeasureRecId,
                NoYes::No,
                NoYes::No);

            reqTransQtyTotal += reqTransQtyBOMUnit;
        }

        return reqTransQtyTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Calculation    = NoYes::Yes;
        this.bomQtySerie    = 1;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the input warehouse management system (WMS) location related to current production bill of
    /// materials (BOM) line.
    /// </summary>
    /// <param name="_date">
    /// The date for which to get the location.
    /// </param>
    /// <returns>
    /// The input WMS location related to current production BOM line.
    /// </returns>
    public WMSLocation inputWMSLocation(date _date)
    {
        WMSLocation                 wmsLocation;
        WrkCtrTable                 wrkCtrTable = this.getResourceForStorageDimensions();

        if (wrkCtrTable)
        {
            wmsLocation = wrkCtrTable.inputWMSLocation(_date);
        }

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(
        boolean _dropEstimated = false,
        Common  _childBuffer   = null,
        boolean _skipLevelRecalc = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        boolean skipWHSEnabledFlightEnabled = ProdBOMSkipWHSEnabledValidationForWrkCtrConsumptionEnabledFlight::instance().isEnabled();
        InventLocation inventLocation = this.inventDim().inventLocation();

        // Picked flushing principle should be treated as start for non WHS warehouses.
        // Skip the check if resource consumption is enabled and no location is specified.
        if ((!skipWHSEnabledFlightEnabled   
                || !(this.WrkCtrConsumption == NoYes::Yes
                    && !inventLocation))
            && (!inventLocation.WHSEnabled
                && this.flushingPrinciple() == ProdFlushingPrincipBOM::Picked))
        {
            this.ProdFlushingPrincip = ProdFlushingPrincipBOM::Start;
            warning(strFmt("@WAX:PickFlushPrincipUpdatedNonWHS", this.ItemId));
        }

        ProdTable prodTable = this.prodTable();

        prodTable.status().insertingProdBOM(this);

        // check if BOM level recalculation is needed
        if (!_skipLevelRecalc)
        {
            BOMLevelCalc::checkLevelRecalcProdBOM(this);
        }


        // <GEERU>
        if (! this.checkBOMQty_RU())
        {
            throw Exception::Error;
        }
        // </GEERU>

        if (!this.InventTransId)
        {
            this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        }

        if (prodTable.ProdType == ProdType::Process)
        {
            PmfYieldPct pmfYieldPct = prodTable.PmfYieldPct;
            this.PmfQtyWithoutYield = (this.bomQty ? this.bomQty : this.PmfQtyWithoutYield);

            if (this.bomConsump == BOMConsumpType::Variable && this.ProdLineType != BOMType::Phantom)
            {
                this.bomQty = (this.PmfQtyWithoutYield * 100) / (pmfYieldPct ? pmfYieldPct : 1);
            }
            else
            {
                this.bomQty = this.PmfQtyWithoutYield;
            }
        }

        ProdBOMType prodBOMType = this.type();
        prodBOMType.setBackStatus();
        prodBOMType.setReservation();

        InventUpd_Estimated     estimated;

        if (!_dropEstimated)
        {
            estimated = InventUpd_Estimated::newProdBOM(this, _childBuffer, this.type());
            estimated.updateNow();
        }

        if (this.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(this).insertPost();
        }

        super();

        if (estimated)
        {
            estimated.updateOwnerRelationship();
            
            ReqTransPoMarkFirmCreateProdBOMContext context = ReqTransPoMarkFirmCreateProdBOMContext::current();

            if (!ReqFirmingWithBatchNumDimPrimaryStockingFlagFlight::instance().isEnabled()
                || !context 
                || !context.parmSkipDerivedDirectlyProdBOMReservation()
                || !this.inventTable().hasTrackingDimensions())
            {
                estimated.updateReservation();
            }
        }

        prodTable = this.prodTable();

        if (prodTable.BackorderStatus > this.BackorderStatus)
        {
            prodTable = this.prodTable(true);
            prodTable.BackorderStatus = this.BackorderStatus;
            prodTable.doUpdate();
        }

        prodTable.status().insertedProdBOM(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventDim</c> record that is related to the current item.
    /// </summary>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventDim</c> record; otherwise, an empty buffer.</returns>
    public InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReleased</Name>
				<Source><![CDATA[
    public display InventQty inventReleased()
    {
        InventTransIdSum transIdSum;

        transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return - transIdSum.physical() - transIdSum.financial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        InventTable inventTable;

        inventTable= InventTable::find(this.ItemId,_forUpdate);

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnit</Name>
				<Source><![CDATA[
    public display UnitOfMeasureSymbol inventUnit()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodConsumed</Name>
				<Source><![CDATA[
    public boolean isProjMethodConsumed()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        return (this.prodTable().isProjMethodConsumed() ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRelatedWorkCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether uncancelled work exists for the ProdBOM.
    /// </summary>
    /// <returns>
    /// True if related work exists; otherwise, false.
    /// </returns>
    private boolean isRelatedWorkCreated()
    {
        WhsWorkLine whsWorkLine;
        boolean ret;

        if (this.InventTransId != '' && WHSInventEnabled::exist(this.ItemId))
        {
            select firstOnly RecId from whsWorkLine
                where whsWorkLine.OrderNum == this.ProdId
                      && whsWorkLine.InventTransId == this.InventTransId
                      && whsWorkLine.WorkStatus != WHSWorkStatus::Cancelled
                      && whsWorkLine.WorkStatus != WHSWorkStatus::Closed;

            if (!whsWorkLine)
            {
                WHSWorkFrozen workFrozen;
                WHSWorkTable  connectedWork;

                select firstOnly RecId from whsWorkLine
                where whsWorkLine.OrderNum == this.ProdId
                      && whsWorkLine.InventTransId == this.InventTransId
                      && whsWorkLine.WorkStatus == WHSWorkStatus::Cancelled
                exists join workFrozen
                    where workFrozen.FrozenWorkId == whsWorkLine.WorkId
                        &&  workFrozen.InventTransId == this.InventTransId
                exists join connectedWork
                    where connectedWork.WorkId == workFrozen.WorkId
                        && connectedWork.WorkStatus  != WHSWorkStatus::Closed
                        && connectedWork.WorkStatus  != WHSWorkStatus::Cancelled
                        && connectedWork.WorkStatus  != WHSWorkStatus::Combined;
            }

            if (whsWorkLine)
            {
                ret = true;
            }
            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportedAsFinished</Name>
				<Source><![CDATA[
    public boolean isReportedAsFinished()
    {
        return this.prodTable().status().isBefore(ProdStatus::ReportedFinished) ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBOMId</Name>
				<Source><![CDATA[
    public BOMId itemBOMId(
        TransDate       _searchDate,
        FromQty         _searchQty,
        InventDim       _searchInventDim)
    {
        return this.BOMMap::itemBOMId(_searchDate, _searchQty, _searchInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameGrid</Name>
				<Source><![CDATA[
    public display ItemNameDisplayGrid itemNameGrid()
    {
        return this.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    public display ItemType itemType()
    {
        return this.inventTable().ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryPick</Name>
				<Source><![CDATA[
    public boolean mandatoryPick()
    {
        InventModelGroup inventModelGroup = InventTable::find(this.ItemId).modelGroup();
        return inventModelGroup.MandatoryPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxQtyCalcStUpBOM</Name>
				<Source><![CDATA[
    public InventQty maxQtyCalcStUpBOM()
    {
        if (this.QtyBOMCalc >= 0 && this.QtyBOMStUp >= 0)
        {
            return max(this.QtyBOMCalc,this.QtyBOMStUp);
        }

        return min(this.QtyBOMCalc,this.QtyBOMStUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxQtyCalcStUpInvent</Name>
				<Source><![CDATA[
    public InventQty maxQtyCalcStUpInvent()
    {
        if (this.QtyInventCalc >= 0 && this.QtyInventStUp >= 0)
        {
            return max(this.QtyInventCalc,this.QtyInventStUp);
        }

        return min(this.QtyInventCalc,this.QtyInventStUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// The first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// The second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates or updates the record based on modifications of some field.
    /// </summary>
    /// <param name="_fieldId">
    ///     The ID of the field changed.
    /// </param>
    /// <remarks>
    ///     Triggered when a field is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        PdsBatchAttribByItem                pdsBatchAttirbByItem;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProdBOM, ItemId)       :
                this.setPrice_RU();
                if (#PDSPotencyEnabled && this.inventTable().pdsBaseAttributeId)
                {
                    this.pdsIngredientType  = PDSIngredientTypeEnum::Active;
                    pdsBatchAttirbByItem    = PdsBatchAttribByItem::findItemId(this.ItemId,this.inventTable().pdsBaseAttributeId,TableGroupAll::Table);
                    this.pdsBaseValue       = pdsBatchAttirbByItem.pdsBatchAttrib().locale2Storage(pdsBatchAttirbByItem.pdsBaseValue);
                }
                else
                {
                    this.pdsIngredientType = PDSIngredientTypeEnum::None;
                }
                break;

            case fieldNum(ProdBOM, pdsIngredientType):
                PdsIngredient pdsIngredient = PdsIngredient::newFromType(this.pdsIngredientType);
                pdsIngredient.modifiedProdBomIngredientType(this);
                break;

            case fieldNum(ProdBOM, UnitId)       :
                this.setPrice_RU();
                break;

            case fieldNum(ProdBOM, QtyBOMCalc)   :
            case fieldNum(ProdBOM, Price_RU)     :
            case fieldNum(ProdBOM, PriceUnit_RU) :
                this.LineAmount_RU = this.calcLineAmount_RU();
                break;

            case fieldNum(ProdBOM, ProdLineType):
                if (this.ProdLineType == BOMType::PeggedSupply)
                {
                    this.Reservation = ProdReservation::Estimation;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean mustBeAutoReserved()
    {
        ProdStatusType prodStatusType = this.prodTable().status();

        if (   (this.Reservation == ProdReservation::Estimation && prodStatusType.isAfterOrEqualTo(ProdStatus::CostEstimated))
            || (this.Reservation == ProdReservation::Scheduling && prodStatusType.isAfterOrEqualTo(ProdStatus::Scheduled))
            || (this.Reservation == ProdReservation::Release    && prodStatusType.isAfterOrEqualTo(ProdStatus::Released))
            || (this.Reservation == ProdReservation::Start      && prodStatusType.isAfterOrEqualTo(ProdStatus::StartedUp)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current BOM has a valid entry in the approved vendor list entry.
    /// </summary>
    /// <returns>
    /// true if the there is a valid approved vendor list for the current BOM or if the item is not
    /// controlled by the AVL; otherwise; false .
    /// </returns>
    private boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck avlCheck;
        boolean ret = true;

        avlCheck = PdsApprovedVendorListCheck::newFromTable(this);
        ret = avlCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCopyPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the compensation principle related to the current <c>ProdBOM</c> record to the compensation principle record for the production order.
    /// </summary>
    public void pdsCopyPrinciple()
    {
        PDSProdCompensationPrinciple    prodCompensation;
        PDSCompensationPrinciple        compensation;
        ProdBOM                         activeProdBOM;

        compensation    = PDSCompensationPrinciple::find(this.bomRefRecId);

        if (compensation)
        {
            select firstonly RecId from activeProdBOM
                where  activeProdBOM.ProdId            == this.ProdId
                    && activeProdBOM.ItemId            == compensation.ActiveItemId
                    && activeProdBOM.pdsIngredientType == PDSIngredientTypeEnum::Active;

            if (activeProdBOM)
            {
                prodCompensation.clear();

                prodCompensation.ProdId          = this.ProdId;
                prodCompensation.ProdBOMRefRecId = this.RecId;
                prodCompensation.CompItemid      = this.ItemId;
                prodCompensation.ActiveItemId    = compensation.ActiveItemId;
                prodCompensation.ActiveRefRecId  = activeProdBOM.RecId;
                prodCompensation.initFromPDSCompensationPrinciple(compensation);

                prodCompensation.insert();
            }
            else
            {
                throw error(strFmt("@SYS19306", funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the physical available catch weight quantity.
    /// </summary>
    /// <returns>
    /// The physical available catch weight quantity.
    /// </returns>
    public display PdsCWAvailPhysical pdsCWAvailPhysical()
    {
        InventMovement movement = InventMovement::construct(this);

        if (this.PdsCWInventStup)
        {
            return InventOnHandQty::newPhysicalUpdate(movement,movement.inventdim()).pdsCWAvailPhysical();
        }
        else
        {
            return InventOnHandQty::newEstimatedUpdate(movement,movement.inventdim()).pdsCWAvailPhysical();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWMaxQtyCalcStUpInvent</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWMaxQtyCalcStUpInvent()
    {
        PdsCWInventQty  pdsCWInventQty;

        if (this.PdsCWInventCalc >= 0
            && this.PdsCWInventStup >= 0)
        {
            pdsCWInventQty = max(this.PdsCWInventCalc,this.PdsCWInventStup);
        }
        else
        {
            pdsCWInventQty = min(this.PdsCWInventCalc,this.PdsCWInventStup);
        }

        return pdsCWInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    public display PdsCWRemainQty pdsCWRemainInventFinancial()
    {
        InventTransIdSum transIdSum;

        transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return -transIdSum.pdsCWPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDeletePrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the production order compensation principle if it no longer applies to this <c>ProdBOM</c>.
    /// </summary>
    public void pdsDeletePrinciple()
    {
        PDSProdCompensationPrinciple    comPrinciple;
        ProdBOM                         prodBOM_Orig = this.orig();
        boolean                         typeChanged  = prodBOM_Orig.pdsIngredientType != this.pdsIngredientType;

        if (#PDSPotencyEnabled)
        {
            ttsbegin;

            if (typeChanged && prodBOM_Orig.pdsIngredientType == PDSIngredientTypeEnum::Compensating)
            {
                delete_from comPrinciple
                    where comPrinciple.ProdBOMRefRecId == this.RecId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsFillTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fill target for display purposes.
    /// </summary>
    /// <returns>
    /// The fill target value of the current <c>ProdBOM</c>.
    /// </returns>
    public display PDSFillTarget pdsFillTarget()
    {
        PDSFillTarget              fillTarget;

        fillTarget = this.bomQty;

        return decRound(fillTarget, UnitOfMeasure::findBySymbol(this.UnitId).DecimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPotencyFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if any potency related fields have been modified.
    /// </summary>
    /// <returns>
    /// true if at least one of the potency related field in this <c>ProdBOM</c> has changed; otherwise, false.
    /// </returns>
    public boolean pdsPotencyFieldModified()
    {
        ProdBOM orig = this.orig();

        return (orig.pdsIngredientType != this.pdsIngredientType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBOMPctQty</Name>
				<Source><![CDATA[
    public BOMQty pmfBOMPctQty()
    {
        BOMQty       qty;

        qty = (this.bomQtySerie * this.PmfFormulaPct)/100;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBOMTable</Name>
				<Source><![CDATA[
    public BOMTable pmfBOMTable(boolean _forupdate = true)
    {
        return this.BOMMap::pmfBOMTable(_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfStepCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BomQty</c> from the <c>PmfProdBomStep</c> record.
    /// </summary>
    /// <param name="_findQty">
    /// The quantity that is used to get the record.
    /// </param>
    /// <returns>
    /// The <c>BomQty</c> of the selected record.
    /// </returns>
    public PdsCWInventQty pmfStepCWQty (FromQty _findQty = 1)
    {
        PmfProdBOMStep bomStep;

        select firstonly PdsCWQty from bomStep
            order by FromQty desc
            where bomStep.ProdBOMRefRecId == this.RecId
               && bomStep.FromQty <= _findQty;

        return bomStep.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfStepQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BomQty</c> from the <c>PmfProdBomStep</c> record or otherwise fallsback to referenced BOM's <c>PmfBomStep</c>
    /// </summary>
    /// <param name="_findQty">
    /// The quantity that is used to get the record.
    /// </param>
    /// <returns>
    /// The <c>BomQty</c> of the selected record.
    /// </returns>
    public BOMQty pmfStepQty (FromQty _findQty = 1)
    {
        PmfProdBOMStep bomStep;

        select firstonly bomQty, RecId from bomStep
            order by FromQty desc
            where bomStep.ProdBOMRefRecId == this.RecId
               && bomStep.FromQty <= _findQty;

        if (bomStep.RecId)
        {
            return bomStep.bomQty;
        }

        return BOM::findRecId(this.BOMRefRecId).pmfStepQty(_findQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PmfProdBomStep</c> records with the referenced record ID.
    /// </summary>
    /// <returns>
    /// The <c>pmfProdBomStep</c> dataset with the referenced record ID.
    /// </returns>
    public PmfBOMStepMap pmfSteps()
    {
        PmfProdBOMStep prodBomStep;

        select prodBomStep
            where prodBomStep.ProdBOMRefRecId == this.RecId;

        return prodBomStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendorProdBOM</Name>
				<Source><![CDATA[
    public void postVendorProdBOM(
        TransDate _postDate,
        InventQty _qtyUpdateNow,
        PurchLine _purchLine)
    {
        ProdJournalCheckPostBOM     prodJournalCheckPostBOM;
        ProdJournalCreateBOM        prodJournalCreateBOM;
        ProdJournalTable            prodJournalTable;
        ProdParametersDim           prodParametersDim;
        ProdParameters              prodParameters;
        InventQty                   prodQty;
        NoYes                       endUpdatePickList;
        boolean                     ok = true;
        boolean                     isJournalCreated = false;
        ProdRoute                   prodRoute;
        boolean                     mustCreatePickList = false;

        if (   this.OprNum
            && this.type().isPeggedSupply())
        {
            if (this.verifyItemType())
            {
                prodParametersDim = this.prodTable().prodParametersDim();

                if (prodParametersDim)
                {
                    if (prodParametersDim.bomAutoConsumpPurchReceive == BOMAutoConsump::Always)
                    {
                        mustCreatePickList = true;
                    }
                    else if (prodParametersDim.bomAutoConsumpPurchReceive == BOMAutoConsump::FlushingPrincip
                             && this.flushingPrinciple() != ProdFlushingPrincipBOM::Manual)
                    {
                        mustCreatePickList = true;
                    }
                }

                // create journal
                if (mustCreatePickList)
                {
                    endUpdatePickList   = _purchLine.RemainPurchPhysical ? NoYes::No : NoYes::Yes;
                    
                    prodQty             = this.calcSeriesSizeFromInventQty(_qtyUpdateNow);

                    prodRoute           = this.prodRoute();
                    prodParameters      = ProdParameters::find();

                    setPrefix(strFmt("@SYS90210", this.ProdId));
                    setPrefix("@SYS60017");

                    prodJournalCreateBOM = ProdJournalCreateBOM::construct();
                    prodJournalCreateBOM.parmTransDate(_postDate);
                    prodJournalCreateBOM.parmProdId(this.ProdId);
                    prodJournalCreateBOM.parmEndUpdate(endUpdatePickList);

                    prodJournalCreateBOM.parmOprNumFrom(this.OprNum);
                    prodJournalCreateBOM.parmOprNumTo(this.OprNum);
                    prodJournalCreateBOM.parmQtyCalc(prodQty);
                    prodJournalCreateBOM.parmConsumpAsProposal(NoYes::Yes);
                    prodJournalCreateBOM.parmProposalAsConsump(NoYes::No);
                    prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
                    prodJournalCreateBOM.parmBOMAutoConsump(prodParametersDim.bomAutoConsumpPurchReceive);
                    prodJournalCreateBOM.parmSkipAccError(NoYes::No);
                    prodJournalCreateBOM.parmJournalNameId(prodParametersDim.bomJournalNameId);
                    prodJournalCreateBOM.parmDrawNegative(prodParameters.bomJournalDrawNegative);

                    // set both to ensure that the proposed quantity is calculated
                    prodJournalCreateBOM.parmProdIsStart( prodRoute.OprStartedUp == NoYes::No );
                    prodJournalCreateBOM.parmProdIsFinish(true);

                    if (prodParametersDim.bomJournalNameId)
                    {
                        prodJournalCreateBOM.init();
                        prodJournalCreateBOM.initProdJournalTableData(ProdJournalType::Picklist);
                    }
                    else
                    {
                        ok = checkFailed("@SYS26138");
                    }

                    ok = ok && prodJournalCreateBOM.validate();

                    if (ok)
                    {
                        prodJournalCreateBOM.runOperation();
                        prodJournalTable = prodJournalCreateBOM.usedProdJournalTable();
                    }

                    // post journal
                    if (   ok
                        && prodJournalTable.RecId
                        && prodJournalTable.JournalId)
                    {
                        isJournalCreated = true;
                        prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId,
                                                                                          prodParametersDim.PurchReceiveShowInfo);
                        prodJournalCheckPostBOM.parmThrowCheckFailed(false);

                        ok = ok && prodJournalCheckPostBOM.validateJournalTable(prodJournalTable);

                        if (ok)
                        {
                            prodJournalCheckPostBOM.runOperation();
                            _purchLine.reread();
                        }
                    }
                }
            }
        }

        if (!ok)
        {
            if (isJournalCreated)
            {
                info(strFmt("@SYS98241", prodJournalTable.JournalId));
            }

            warning("@SYS23002");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendorProdRoute</Name>
				<Source><![CDATA[
    public void postVendorProdRoute(
        TransDate _postDate,
        InventQty _qtyUpdateNow,
        PurchLine _purchLine)
    {
        ProdJournalCheckPostRoute   prodJournalCheckPostRoute;
        ProdJournalCreateRoute      prodJournalCreate;
        ProdJournalRoute            prodJournalRoute;
        ProdJournalTable            prodJournalTable;
        ProdParametersDim           prodParametersDim;
        NoYes                       endUpdateRouteCard;
        boolean                     reversed;
        ProdRoute                   prodRoute;
        ProdRoute                   prodRouteNext;
        RouteGroup                  routeGroup;
        InventQty                   prodQty;
        InventQty                   remainOprQty;
        SysInfoAction_Formrun       infoActionOper;
        SysInfoAction_Formrun       infoActionOperNext;
        boolean                     ok = true;
        boolean                     isJournalCreated = false;
        boolean                     mustCreateRouteCard = false;

        if (   this.OprNum
            && this.type().isPeggedSupply())
        {
            if (this.verifyItemType())
            {
                prodParametersDim = this.prodTable().prodParametersDim();

                if (prodParametersDim)
                {
                    if (prodParametersDim.RouteAutoConsumpPurchReceive == RouteAutoConsump::Always)
                    {
                        mustCreateRouteCard = true;
                    }
                    else if (prodParametersDim.RouteAutoConsumpPurchReceive == RouteAutoConsump::RouteDependent)
                    {
                        routeGroup = this.prodRoute().routeGroup();
                        mustCreateRouteCard = routeGroup.isAutomaticConsumptionEnabled();
                    }
                }

                // create journal
                if (mustCreateRouteCard)
                {
                    endUpdateRouteCard  = _purchLine.RemainPurchPhysical ? NoYes::No : NoYes::Yes;

                    reversed = _qtyUpdateNow < 0 &&
                        (_qtyUpdateNow + ProdRouteTrans::qtyErrorOpr(this.ProdId, this.OprNum, RouteOprPriority::Primary) + ProdRouteTrans::qtyGoodOpr(this.ProdId, this.OprNum, RouteOprPriority::Primary) == 0);

                    prodQty             = this.calcSeriesSizeFromInventQty(_qtyUpdateNow);

                    setPrefix(strFmt("@SYS90210", this.ProdId));
                    setPrefix("@SYS28452");

                    prodJournalCreate = ProdJournalCreateRoute::newParm(this.ProdId,
                                                                        _postDate,
                                                                        prodQty,
                                                                        prodParametersDim.RouteJournalNameId,
                                                                        '',
                                                                        prodParametersDim.RouteAutoConsumpPurchReceive,
                                                                        endUpdateRouteCard,
                                                                        this.OprNum,
                                                                        this.OprNum,
                                                                        NoYes::No,
                                                                        reversed);

                    ok = ok && prodJournalCreate.validate();

                    if (ok)
                    {
                        prodJournalCreate.runOperation();
                        prodJournalTable = prodJournalCreate.usedProdJournalTable();

                        prodJournalRoute.skipDataMethods(true);

                        // Picking list has been posted by postVendorProdBOM(), won't post with route card again.
                        update_recordSet prodJournalRoute
                            setting ProdPickList = NoYes::No
                            where prodJournalRoute.JournalId == prodJournalTable.JournalId;

                        // RAF should be posted as parameter setting.
                        if (prodJournalTable.AutoReportFinished
                            && ProdRoute::find(this.ProdId, this.OprNum, RouteOprPriority::Primary).OprNumNext == 0)
                        {
                            update_recordSet prodJournalRoute
                                setting ProdReportFinished = NoYes::Yes,
                                        ProdInventDimId    = this.prodTable().InventDimId
                                where prodJournalRoute.JournalId        == prodJournalTable.JournalId
                                      && prodJournalRoute.OprPriority   == RouteOprPriority::Primary;
                        }
                    }

                    // post journal
                    if (ok && prodJournalTable.RecId && prodJournalTable.JournalId)
                    {
                        isJournalCreated = true;
                        prodJournalCheckPostRoute = ProdJournalCheckPostRoute::newPostJournal(prodJournalTable.JournalId,
                                                                                              prodParametersDim.PurchReceiveShowInfo);
                        prodJournalCheckPostRoute.parmThrowCheckFailed(false);

                        ok = ok && prodJournalCheckPostRoute.validateJournalTable(prodJournalTable);

                        if (ok)
                        {
                            prodJournalCheckPostRoute.runOperation();
                            _purchLine.reread();
                        }

                        // show info
                        if (ok && prodJournalCheckPostRoute.parmCheckJournalResult() && prodParametersDim.PurchReceiveShowInfo)
                        {
                            prodRoute = ProdRoute::find(this.ProdId, this.OprNum, RouteOprPriority::Primary);

                            infoActionOper = SysInfoAction_Formrun::newFormname(formStr(ProdRoute));
                            infoActionOper.parmCallerBuffer(prodRoute);

                            info(strFmt("@SYS90039", this.OprNum, prodQty), '', infoActionOper);

                            if (_purchLine.RemainPurchPhysical)
                            {
                                remainOprQty = prodRoute.CalcQty - prodRoute.qtyGood();
                                info(strFmt("@SYS90040", this.OprNum, remainOprQty), '', infoActionOper);
                            }
                            else
                            {
                                info(strFmt("@SYS90041", this.OprNum, prodRoute.qtyGood()), '', infoActionOper);
                            }

                            if (prodRoute.OprNumNext)
                            {
                                prodRouteNext = prodRoute.nextOperation();
                                infoActionOperNext = SysInfoAction_Formrun::newFormname(formStr(ProdRoute));
                                infoActionOperNext.parmCallerBuffer(prodRouteNext);

                                info(strFmt("@SYS90042", prodRoute.OprNumNext), '', infoActionOperNext);
                            }
                            else
                            {
                                info("@SYS90043", '', infoActionOper);
                            }
                        }
                    }
                }
            }
        }

        if (!ok)
        {
            if (isJournalCreated)
            {
                info(strFmt("@SYS90214", prodJournalTable.JournalId));
            }

            warning("@SYS23002");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodCalcTrans</Name>
				<Source><![CDATA[
    ProdCalcTrans prodCalcTrans(boolean _forUpdate = false)
    {
        return ProdCalcTrans::findIdRef(this.TableId, this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodIdRef</Name>
				<Source><![CDATA[
    public ProdId prodIdRef()
    {
        ProdId                      prodIdRef;
        InventTransOriginProdBOM    inventTransOriginProdBOM;
        InventTransOrigin           inventTransOriginRef;
        InventTrans                 inventTrans;
        InventTransOriginProdTable  inventTransOriginProdTable;
        ProdTable                   locProdTable;

        if (this.InventRefType == InventRefType::Production)
        {
            prodIdRef = this.InventRefId;

            if (!prodIdRef)
            {
                select firstonly TableId from inventTransOriginProdBOM
                    where inventTransOriginProdBOM.ProdBOMDataAreaId                == this.DataAreaId
                       && inventTransOriginProdBOM.ProdBOMInventTransId             == this.InventTransId
                    join TableId from inventTrans // inventTrans records related to this prodBOM which are marked
                        where inventTrans.InventTransOrigin                         == inventTransOriginProdBOM.InventTransOrigin
                           && inventTrans.MarkingRefInventTransOrigin
                        join TableId from inventTransOriginRef // inventTrans must be marked with a production
                            where inventTransOriginRef.RecId                        == inventTrans.MarkingRefInventTransOrigin
                               && inventTransOriginRef.ReferenceCategory            == InventTransType::Production
                            join TableId from inventTransOriginProdTable
                                where inventTransOriginProdTable.InventTransOrigin  == inventTransOriginRef.RecId
                                join ProdId from locProdTable
                                    where  locProdTable.ProdId                      == inventTransOriginProdTable.ProdOrderId
                                        && locProdTable.DataAreaId                  == inventTransOriginProdTable.ProdOrderDataAreaId
                                        && locProdTable.InventRefType               == InventRefType::ProdLine
                                        && locProdTable.InventRefId                 == this.ProdId
                                        && locProdTable.InventRefTransId            == this.InventTransId;

                prodIdRef = locProdTable.ProdId;
            }
        }

        return prodIdRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRoute</Name>
				<Source><![CDATA[
    public ProdRoute prodRoute()
    {
        ProdRoute prodRoute;

        if (! this.OprNum)
        {
            return prodRoute;
        }

        select firstonly prodRoute
            index NumOprNumIdx
            where prodRoute.ProdId      == this.ProdId
               && prodRoute.OprNum      == this.OprNum
               && prodRoute.OprPriority == RouteOprPriority::Primary;

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteStatusImage</Name>
				<Source><![CDATA[
    public display container prodRouteStatusImage()
    {
        return this.prodRoute().statusImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteStatusTxt</Name>
				<Source><![CDATA[
    public str prodRouteStatusTxt()
    {
        return this.prodRoute().statusTxt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        return ProdTable::find(this.ProdId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableRef</Name>
				<Source><![CDATA[
    public ProdTable prodTableRef(boolean _forUpdate = false)
    {
        return ProdTable::find(this.prodIdRef(),_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _forUpdate = false)
    {
        return this.prodTable().projTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    public PurchLine purchLine(
        boolean _forUpdate  = false,
        boolean _throwError = false)
    {
        if (this.InventRefType != InventRefType::Purch  || ! this.InventRefTransId)
        {
            if (_throwError)
            {
                throw error("@SYS24661");
            }
            return null;
        }

        return PurchLine::findInventTransId(this.InventRefTransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineStatusImage</Name>
				<Source><![CDATA[
    public display ImageRes purchLineStatusImage()
    {
        PurchLine purchLine;

        purchLine = this.purchLine();
        return purchLine ? purchLine.deliveryStatusImage() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineStatusTxt</Name>
				<Source><![CDATA[
    public str purchLineStatusTxt()
    {
        PurchLine purchLine;

        purchLine = this.purchLine();
        return purchLine ? purchLine.deliveryStatusTxt() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    public PurchaseType purchType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptDeliveryDate</Name>
				<Source><![CDATA[
    public SchedDate receiptDeliveryDate(ReqPlanData _reqPlanData = null)
    {
        SchedDate       schedDate = this.RawMaterialDate;

        ReqSetup        setup;
        ReqSetupDim     setupDim;

        if (! _reqPlanData)
        {
            _reqPlanData = ReqPlanData::newReqPlanId(ReqPlanSched::defaultDynamicId());
        }

        if (! schedDate)
        {
            schedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        setup       = _reqPlanData.newReqSetup(this.ItemId);
        setupDim    = _reqPlanData.newReqSetupDim(setup,InventDim::find(this.InventDimId).reqCovDimId(InventDimGroupSetup::newItemId(this.ItemId)));

        schedDate   = _reqPlanData.schedMarginBackward(schedDate,_reqPlanData.marginIssue(setupDim)  ,setupDim,setupDim.reqCalendarId());
        schedDate   = _reqPlanData.schedMarginBackward(schedDate,_reqPlanData.marginReceipt(setupDim),setupDim,setupDim.reqCalendarId());

        return schedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainInventFinancial</Name>
				<Source><![CDATA[
    public display InventQty remainInventFinancial()
    {
        InventTransIdSum transIdSum;
        transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return - transIdSum.physical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding <c>ReqTrans</c> record for the current <c>ProdBOM</c> record.
    /// </summary>
    /// <param name="_reqPlanVersionRefRecId">
    /// The ID of the <c>ReqPlanVersion</c> record; optional.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>ReqTrans</c> record; otherwise, an empty record.
    /// </returns>
    public ReqTrans reqTrans(
        RefRecId  _reqPlanVersionRefRecId = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
        boolean   _forupdate              = false)
    {
        ReqTrans                    reqTrans;
        InventTransOriginProdBOM    inventTransOriginProdBOM;

        reqTrans.selectForUpdate(_forupdate);

        select firstonly reqTrans
            where reqTrans.PlanVersion  == _reqPlanVersionRefRecId
               && reqTrans.RefType      == ReqRefType::ProdLine
               && reqTrans.RefId        == this.ProdId
            exists join inventTransOriginProdBOM
                where inventTransOriginProdBOM.InventTransOrigin    == reqTrans.InventTransOrigin
                   && inventTransOriginProdBOM.ProdBOMDataAreaId    == this.DataAreaId
                   && inventTransOriginProdBOM.ProdBOMInventTransId == this.InventTransId;

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWReserveQty()
    {
        if (!this.mustBeAutoReserved())
        {
            return 0;
        }

        return this.PdsCWRemainPhysical < 0 ? 0 : -this.PdsCWRemainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public Qty reserveQty()
    {
        if (!this.mustBeAutoReserved())
        {
            return 0;
        }

        return this.RemainInventPhysical < 0 ? 0 : -this.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundValueToUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds a given value to the number of decimals specified by the UnitOfMeasure value that is used by
    /// this object.
    /// </summary>
    /// <param name="_value">
    /// The value to round.
    /// </param>
    /// <returns>
    /// The rounded value.
    /// </returns>
    public real roundValueToUnitOfMeasure(real _value)
    {
        UnitOfMeasureRecId   unitOfMeasure;

        unitOfMeasure = UnitOfMeasure::findBySymbol(this.UnitId).RecId;
        if (!unitOfMeasure)
        {
            throw error(strFmt("@SYS118115", tableMethodStr(ProdBOM, roundValueToUnitOfMeasure)));
        }

        return UnitOfMeasureConverter::convert(_value, unitOfMeasure, unitOfMeasure, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scrapConst</Name>
				<Source><![CDATA[
    public Qty scrapConst()
    {
        return this.BOMMap::scrapConst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scrapVar</Name>
				<Source><![CDATA[
    public Qty scrapVar()
    {
        return this.BOMMap::scrapVar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>ProdBOM.inventDimId</c> field and applies
    ///    default values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>ProdBOM.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId _inventDimId,
        InventDim   _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        _inventDim.setInventSiteFromParentIfModified(this, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the <paramref name="InventDim" /> parameter and
    /// applies the found <c>InventDimId</c> value to the <c>ProdBOM.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <see cref="T:InventDim" /> record buffer that should be referenced by the current <see
    /// cref="T:ProdBOM" /> record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStorageDim</Name>
				<Source><![CDATA[
    void setInventStorageDim(
        InventDim                  _inventDim      = InventDim::find(this.InventDimId),
        InventTable                _inventTable    = InventTable::find(this.ItemId),
        InventItemOrderSetupType   _setupType      = InventItemOrderSetupType::Invent)
    {
        InventItemOrderSetupMap itemOrderSetupDefaultMap = _inventTable.inventItemOrderSetupMap(_setupType);
        InventItemOrderSetupMap itemOrderSetupDimMap;

        boolean                 updateInventDim = false;

        if (!_inventDim.InventSiteId || _inventDim.InventSiteId != itemOrderSetupDefaultMap.inventSiteId(_inventDim.InventSiteId, _inventTable))
        {
            _inventDim.InventSiteId = itemOrderSetupDefaultMap.inventSiteId(_inventDim.InventSiteId, _inventTable);

            updateInventDim = true;
        }

        if (_inventDim.InventSiteId)
        {
            itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::findOrCreate(_inventDim).InventDimId);
        }
        else
        {
            itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::inventDimIdBlank());
        }

        if (!_inventDim.InventLocationId || _inventDim.InventLocationId != itemOrderSetupDimMap.inventLocationId(_inventDim.InventLocationId,
                                                                                                                _inventTable,
                                                                                                                _inventDim.InventSiteId))
        {
            _inventDim.InventLocationId = itemOrderSetupDimMap.inventLocationId(_inventDim.InventLocationId,
                                                                                _inventTable,
                                                                                _inventDim.InventSiteId);

            _inventDim.initFromInventLocation(_inventDim.inventLocation());

            updateInventDim = true;
        }

        if (updateInventDim)
        {
            _inventDim.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;

            this.setInventDimId(_inventDim.InventDimId, _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes price and calculates line amount of the production BOM.
    /// </summary>
    public void setPrice_RU()
    {
        PriceDisc   priceDisc;
        ProdTable   prodTable = this.prodTable();

        if (! prodTable.CurrencyCode_RU)
        {
            return;
        }

        this.Price_RU       = 0;
        this.PriceUnit_RU   = 0;

        priceDisc = this.createPriceDiscInstance_RU(this.createAndInitPriceDiscParameters_RU());

        if (! priceDisc.findPrice(prodTable.PriceGroup_RU))
        {
            priceDisc.findItemPrice();
        }

        this.Price_RU       = priceDisc.price();
        this.PriceUnit_RU   = priceDisc.priceUnit();
        this.LineAmount_RU  = this.calcLineAmount_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters_RU()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters_RU()
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters_RU();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.ItemId);
        parameters.parmInventDim(this.inventDim());
        parameters.parmUnitID(this.UnitId);
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(this.bomQty);
        parameters.parmCurrencyCode(this.prodTable().CurrencyCode_RU);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance_RU(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendId</Name>
				<Source><![CDATA[
    public void setVendId()
    {
        if (this.VendId)
        {
            return;
        }

        this.VendId = this.vendId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public ProdBOMType  type()
    {
        return ProdBOMType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(
        boolean _dropEstimated = false,
        Common  _childBuffer = null,
        boolean _dropBackOrderStatus = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        ProdBOM     prodBOM_Orig = this.orig();
        ProdTable   prodTable = this.prodTable();

        prodTable.status().updatingProdBOM(this);

        // check if BOM level recalculation is needed
        BOMLevelCalc::checkLevelRecalcProdBOM(this);

        if (prodTable.ProdType == ProdType::Process && this.PmfQtyWithoutYield != prodBOM_Orig.PmfQtyWithoutYield)
        {
            this.pmfInitBomQty(prodTable.PmfYieldPct);
        }

        ProdBOMType prodBOMType = this.type();
        prodBOMType.setBackStatus();

        InventUpd_Estimated     estimated;

        if (!_dropEstimated)
        {
            estimated = InventUpd_Estimated::newProdBOM(this,_childBuffer,prodBOMType);
            estimated.updateNow();
        }

        this.pdsDeletePrinciple();

        super();

        if (estimated)
        {
            if (!this.shouldSkipReservationOnBOMUpdate())
            {
                estimated.updateReservation();
            }
        }

        if (!_dropBackOrderStatus && this.BackorderStatus != prodBOM_Orig.BackorderStatus)
        {
            prodTable = this.prodTable(true);
            prodTable.status().setBackStatus();
            prodTable.doUpdate();
        }

        this.prodTable().status().updatedProdBOM(this, prodBOM_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitBomQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pmfInitBomQty(PmfYieldPct _pmfYieldPct)
    {
        if (this.bomConsump == BOMConsumpType::Variable && this.ProdLineType != BOMType::Phantom)
        {
            if (_pmfYieldPct)
            {
                this.bomQty = (this.PmfQtyWithoutYield * 100) / _pmfYieldPct;
            }
        }
        else
        {
            this.bomQty = this.PmfQtyWithoutYield;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipReservationOnBOMUpdate</Name>
				<Source><![CDATA[
    private boolean shouldSkipReservationOnBOMUpdate()
    {
        WHSRunningFromRAFContext context = WHSRunningFromRAFContext::current();

        if (context)
        {
            InventTable item = InventTable::find(this.ItemId);

            return WHSInventEnabled::exist(this.ItemId) 
                && this.inventDim().wMSLocationId == ''
                && (item.whsBatchActive()
                    || item.isItemSerialNumberActivated()
                    || item.isItemInventoryOwnerActivated());
        }
        
        if (this.QtyBOMStUp == 0 &&
            this.Reservation == ProdReservation::Start && 
            this.prodTable().ProdStatus == ProdStatus::StartedUp &&
            ProdBOMSkipReservationOnNotStartedOperationsFlight::instance().isEnabled() &&
            (this.BOMId ||
            !ProdBOMAutoReservOnPickListCreationFlight::instance().isEnabled()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimFromRefInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the not consistent inventory dimensions with inventory dimensions from a reference record.
    /// </summary>
    /// <param name="_inventDimRef">
    /// A record that holds inventory dimensions for the referred record.
    /// </param>
    public void updateInventDimFromRefInventDim(InventDim  _inventDimRef)
    {
        InventDim                   inventDimProdBOM;
        InventDimGroupSetup         inventDimGroupSetup;

        if ( this.InventDimId != _inventDimRef.InventDimId)
        {
            inventDimProdBOM        = this.inventDim();
            inventDimGroupSetup     = InventDimGroupSetup::newItemId(this.ItemId);

            if (InventDim::isInventDimEqualConsistent(inventDimGroupSetup, inventDimProdBOM, _inventDimRef))
            {
                // as all consistent dimensions are the same then we can do a merge.
                inventDimProdBOM.mergeUsedDim(inventDimGroupSetup, _inventDimRef);
                this.setInventDimIdFromInventDim(inventDimProdBOM);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the startup fields based on a BOM calculation.
    /// </summary>
    /// <param name="_prodBOMCalc">
    /// The BOM calculation based on which to update the fields.
    /// </param>
    /// <param name="_clearStartUp">
    /// A boolean value that indicates whether to clear the startup quantities.
    /// </param>
    /// <param name="_signSeriesSize">
    /// A value that indicates the sign of the startup quantities.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The sign for quantity in process may not be changed.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The remaining quantity cannot be reduced as it is used by an open picking list journal.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The remaining quantity cannot be reduced as it is used by several open picking list journals.
    /// </exception>
    public void updateStartUp(
        ProdBOMCalc   _prodBOMCalc,
        boolean       _clearStartUp,
        RealBase      _signSeriesSize = 1.0)
    {
        this.setStartUpBasedOnBomCalculation(_prodBOMCalc, _clearStartUp, _signSeriesSize);

        if (this.isStartUpValid())
        {
            this.doUpdate();
        }
        else
        {
            throw error("@SYS10312");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartUpBasedOnBomCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the startup fields based on a BOM calculation.
    /// </summary>
    /// <param name="_prodBOMCalc">
    /// The BOM calculation based on which to update the fields.
    /// </param>
    /// <param name="_clearStartUp">
    /// A boolean value that indicates whether to clear the startup quantities.
    /// </param>
    /// <param name="_signSeriesSize">
    /// A value that indicates the sign of the startup quantities.
    /// </param>
    protected void setStartUpBasedOnBomCalculation(
        ProdBOMCalc   _prodBOMCalc,
        boolean       _clearStartUp,
        RealBase      _signSeriesSize)
    {
        if (_clearStartUp)
        {
            this.QtyBOMStUp       = 0;
            this.QtyInventStUp    = 0;
            this.PdsCWInventStup  = 0;
        }
        else
        {
            this.QtyBOMStUp         += _prodBOMCalc.bomProposal()           * _signSeriesSize;
            this.QtyInventStUp      += _prodBOMCalc.inventProposal()        * _signSeriesSize;
            this.PdsCWInventStup    += _prodBOMCalc.pdsCWInventProposal()   * _signSeriesSize;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStartUpValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the startup fields.
    /// </summary>
    /// <returns>true if startup fields are valid; otherwise, false.</returns>
    protected boolean isStartUpValid()
    {
        return this.QtyBOMStUp     * this.RemainBOMFinancial   >= 0 &&
               this.QtyBOMStUp     * this.RemainBOMPhysical    >= 0 &&
               this.QtyBOMStUp     * this.QtyBOMCalc           >= 0 &&
               this.QtyInventStUp  * this.RemainInventPhysical >= 0 &&
               this.QtyInventStUp  * this.QtyInventCalc        >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates and updates the <c>DlvDate</c> and <c>DlvTime</c> fields of the <c>ProdTable</c> table
    /// on a subproduction if the <c>ProdBOM</c> table buffer has reference to a production order.
    /// </summary>
    /// <remarks>
    /// Safety margins are considered when the delivery date is calculated.
    /// </remarks>
    public void updateSubProduction()
    {
        if (this.ProdLineType   != BOMType::Item                &&
            this.InventRefType  == InventRefType::Production    &&
            this.InventRefId)
        {
            ProdTable prodTableSub = ProdTable::find(this.InventRefId,true);

            if (!prodTableSub.ProdLocked && prodTableSub.status().isBefore(ProdStatus::ReportedFinished))
            {
                if (!prodTableSub.checkValid(this.InventRefId))
                {
                    throw error("@SYS18447");
                }

                SchedDate schedDate = this.receiptDeliveryDate();

                prodTableSub.initDeliveryDateTime(schedDate, this.RawMaterialTime);
                prodTableSub.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRawMaterialDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the raw material date based on purchase lead times.
    /// </summary>
    /// <param name="_wrkCtrParmSchedule">
    /// A <c>WrkCtrParmSchedule</c> record that contains the order scheduling parameters.
    /// </param>
    public void updateRawMaterialDate(WrkCtrParmSchedule _wrkCtrParmSchedule = null)
    {
        SchedDate   schedDate;
        SchedDirection schedDirection;
        
        WorkCalendarSched   workCalendarSched = new WorkCalendarSched();
        
        if (this.ProdLineType   != BOMType::Item            &&
            this.InventRefType  == InventRefType::Purch     &&
            this.InventRefTransId)
        {
            PurchLine purchLine = this.purchLine(false, true);
            
            if (_wrkCtrParmSchedule)
            {
                schedDirection = _wrkCtrParmSchedule.schedDirection();
                schedDate = _wrkCtrParmSchedule.schedDate();
            }
            else
            {
                schedDirection = SchedDirection::Forward;
                schedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            PriceDisc_Price priceDisc = SalesPurchLine::priceDisc_PriceCache(purchLine, purchLine.inventDim(), true);
            CalendarId ourCompanyReceiptCalendar = purchLine.DeliveryType == TradeLineDlvType::DropShip ? "" : purchLine.type().internalCalendarId();
            
            SchedDate schedDateCalc = workCalendarSched.schedDate(schedDirection,
                                                                  schedDate,                  // FromDate
                                                                  priceDisc.deliveryDays(),   // LeadTime
                                                                  priceDisc.calendarDays(),
                                                                  purchLine.vendTable_OrderAccount().PurchCalendarId,
                                                                  ourCompanyReceiptCalendar);
            this.RawMaterialDate = max(schedDateCalc, this.RawMaterialDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates and updates the delivery date on the purchase order line if the <c>ProdBOM</c> table
    /// buffer has reference to a purchase order.
    /// </summary>
    /// <param name="_purchTableRecIdSet">
    /// A set of purchase orders to submit to a workflow; optional. The default value is null.
    /// </param>
    /// <remarks>
    /// Safety margins are considered when calculating the delivery date.
    /// </remarks>
    public void updateSubPurch(Set _purchTableRecIdSet = null)
    {
        if (this.ProdLineType   != BOMType::Item            &&
            this.InventRefType  == InventRefType::Purch     &&
            this.InventRefTransId)
        {
            boolean          needToSubmit       = false;
            PurchLine        purchLine          = this.purchLine(true, true);
            InventTransIdSum inventTransIdSum   = InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(purchLine.InventTransId).RecId);

            // Physical update has done, need not update delivery date.
            if (inventTransIdSum.purchased() || inventTransIdSum.received())
            {
                return;
            }

            if (!purchLine.canAutoUpdatePurchLine())
            {
                PurchTable purchTable = purchLine.purchTable(true);

                if ((purchTable.DocumentState == VersioningDocumentState::Draft
                       || !this.shouldUpdateSubPurchLineDeliveryDate(this.calculateSubPurchLineDeliveryDate(purchLine), purchLine)))
                {
                    needToSubmit = purchTable.DocumentState == VersioningDocumentState::Draft ? true : false;
                }
                else
                {
                    var versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(purchTable);
                    needToSubmit = versioningPurchaseOrder.resetToDraft();
                    purchLine.reread();
                }                                
            }

            this.updateSubPurchLineDeliveryDate(purchLine);

            var wrkCtrParmSchedule = WrkCtrParmScheduleContext::parmWrkCtrParmSchedule();

            if (needToSubmit && (!wrkCtrParmSchedule || wrkCtrParmSchedule.mustSubmitPurchToWorkflow()))
            {
                if (_purchTableRecIdSet)
                {
                    _purchTableRecIdSet.add(purchLine.purchTable().RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubPurchLineDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates and updates the delivery date of the referenced purchase order line.
    /// </summary>
    /// <param name="_purchLine">
    /// A purchase order line referenced by current production line.
    /// </param>
    protected void updateSubPurchLineDeliveryDate(PurchLine _purchLine)
    {
        SchedDate schedDate = this.calculateSubPurchLineDeliveryDate(_purchLine);

        if (this.shouldUpdateSubPurchLineDeliveryDate(schedDate, _purchLine))
        {
            _purchLine.DeliveryDate = schedDate;
            _purchLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateSubPurchLineDeliveryDate</Name>
				<Source><![CDATA[
    private boolean shouldUpdateSubPurchLineDeliveryDate(SchedDate _schedDate, PurchLine _purchLine)
    {
        return _schedDate != _purchLine.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSubPurchLineDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the delivery date of the referenced purchase order line.
    /// </summary>
    /// <param name = "_purchLine">
    /// A purchase order line referenced by production line.
    /// </param>
    /// <returns>Calculated delivery date.</returns>
    protected SchedDate calculateSubPurchLineDeliveryDate(PurchLine _purchLine)
    {
        SchedDate schedDate = this.receiptDeliveryDate();

        if (InventItemPurchSetup::find(_purchLine.ItemId, _purchLine.InventDimId).CalendarDays())
        {
            timeOfDay lastTimeOfDay = #secondsPerDay-1;

            schedDate = WorkCalendar::findOpenDateBackward(VendTable::find(_purchLine.VendAccount).PurchCalendarId, schedDate, lastTimeOfDay, true);
        }

        return schedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickedBOMQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the total picked and reserved physical at a location on the BOM.
    /// </summary>
    /// <returns>
    /// The total quantity picked and reserved physcial at a location on the BOM.
    /// </returns>
    public InventQty getPickedBOMQty()
    {
        InventTransOrigin	pickedTransOrigin;
        InventTrans			pickedTrans;
        InventQty			ret;

        select sum(Qty) from pickedTrans
            where pickedTrans.StatusIssue == StatusIssue::Picked
            exists join pickedTransOrigin
                where pickedTransOrigin.RecId		  == pickedTrans.InventTransOrigin
                &&	  pickedTransOrigin.InventTransId == this.InventTransId;

        ret += abs(pickedTrans.Qty);

        InventTransOrigin	reservedTransOrigin;
        InventTrans			reservedTrans;
        InventDim			reservedTransDim;

        select sum(Qty) from reservedTrans
            where reservedTrans.StatusIssue == StatusIssue::ReservPhysical
            exists join reservedTransDim
                where reservedTransDim.inventDimId	 == reservedTrans.inventDimId
                &&	  reservedTransDim.wMSLocationId != ''
            exists join reservedTransOrigin
                where reservedTransOrigin.RecId			== reservedTrans.InventTransOrigin
                &&	  reservedTransOrigin.InventTransId == this.InventTransId;

        ret += abs(reservedTrans.Qty);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(boolean _calledFromStatus = false)
    {
        if (!_calledFromStatus)
        {
            return this.prodTable().status().validateDeleteProdBOM(this);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(ProdBOM, ItemId):
                case fieldNum(ProdBOM, VendId):
                    if (#PdsApprovedVendorListEnabled)
                    {
                        ret = ret && this.pdsCheckApprovedVendorList();
                    }
                    break;
                case fieldNum(ProdBOM, ProdLineType):
                    if (PdsGlobal::pdsIsCWItem(this.ItemId) && this.ProdLineType == BOMType::Phantom)
                    {
                        setPrefix(strFmt("@SYS71901", this.ProdLineType));
                        ret = checkFailed(strFmt("@PRO1994", this.ItemId));
                    }
                    break;
                case fieldNum(ProdBOM, UnitId):
                    ret = this.checkUnit();
                    break;
                case fieldNum(ProdBOM, LineNum):
                    if (ProdBomLineNumUniqueFlight::instance().isEnabled())
                    {
                        ProdBOM prodBOM;
                        ProdId prodTableId = this.prodTable().ProdId;
                        select firstonly RecId from prodBOM
                            where prodBOM.LineNum == this.LineNum
                                && prodBOM.ProdId == prodTableId;
                        if (prodBOM.RecId != 0)
                        {
                            ret = checkFailed(strFmt("@PRO:ProdBomLineNumShouldBeUniqueErrorMessage", this.LineNum, prodTableId));
                        }
                    }
                    break;
            }
        }

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProdBOM, pdsIngredientType):
                if (this.inventTable().pdsBaseAttributeId
                    && this.pdsIngredientType != PDSIngredientTypeEnum::None
                    && this.pdsIngredientType != PDSIngredientTypeEnum::Active)
                {
                    ret = ret && checkFailed("@PSC87");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret && this.isProjMethodConsumed())
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateFieldPost(_fieldName, _arrayIndex);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProject</Name>
				<Source><![CDATA[
    public boolean validateProject()
    {
        return ProjInventJournalTransMapForm::construct(this).validateWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _calledFromStatus = false)
    {
        boolean     ret;

        if (!_calledFromStatus)
        {
            return this.prodTable().status().validateWriteProdBOM(this);
        }

        if (!this.checkProdBOMType())
        {
            return false;
        }

        ret = super();

        if (ret && this.isProjMethodConsumed())
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateWritePost();
        }

        if (this.prodTable().inventDim().InventSiteId != this.inventDim().InventSiteId)
        {
            ret = checkFailed("@SYS117929");
        }

        if (this.ProdFlushingPrincip == ProdFlushingPrincipBOM::Picked)
        {
                      
            if (!InventTable::find(this.ItemId).whsItemIsWHSControlled())
            {
                ret = checkFailed("@WAX:PickFlushPrincipValidation");
            }
            else if (!this.inventDim().inventLocation().WHSEnabled)
            {
                boolean skipWHSEnabledFlightEnabled = ProdBOMSkipWHSEnabledValidationForWrkCtrConsumptionEnabledFlight::instance().isEnabled();

                if (!skipWHSEnabledFlightEnabled || this.WrkCtrConsumption == NoYes::No)
                {
                    ret = checkFailed("@WAX:PickFlushPrincipValidationWarehouse");
                }
            }
        }

        // <GEERU>
        if (!this.checkBOMQty_RU())
        {
            ret = false;
        }
        
        // </GEERU>

        if (ret && #PmfEnabled)
        {
            ret = this.inventTable()
                    .pmfInventProductType().validateInventUpd();
        }
        if (ret && #PDSPotencyEnabled)
        {
            if (this.pdsIngredientType == PDSIngredientTypeEnum::Active)
            {
                if (!this.inventTable().pdsBaseAttributeId)
                {
                    ret = checkFailed(strFmt("@PSC223", this.ItemId));
                }
            }
        }

        if (ret && this.isRelatedWorkCreated())
        {
            ret = checkFailed("@SYS4009531");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendId</Name>
				<Source><![CDATA[
    public VendAccount vendId()
    {
        return this.BOMMap::calcVendId(this.prodRoute());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemsReleasedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdBOM</c> query to check for a released product Id.
    /// </summary>
    /// <param name="_prodId">
    /// The product ID to check for existence.
    /// </param>
    /// <returns>
    /// A <c>Query</c> instance.
    /// </returns>
    protected static Query isItemsReleasedQuery(ProdId _prodId)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProdBOM;

        qbdsProdBOM = query.addDataSource(tableNum(prodBOM));
        qbdsProdBOM.addSelectionField(fieldNum(ProdBOM, ItemID));
        qbdsProdBOM.addRange(fieldNum(ProdBOM, ProdId)).value(queryValue(_prodId));
        qbdsProdBOM.addRange(fieldNum(ProdBOM, RemainInventPhysical)).value(SysQuery::valueNot(0));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsItemsReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified product Id has been completely released.
    /// </summary>
    /// <param name="_prodId">
    /// The product ID to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified product has been completely released; otherwise, false.
    /// </returns>
    public static boolean checkIsItemsReleased(ProdId _prodId)
    {
        ProdBOM  prodBOM;
        boolean ok = true;
        QueryRun queryrun = new QueryRun(ProdBOM::isItemsReleasedQuery(_prodId));

        while (queryrun.next())
        {
            prodBOM =  queryrun.get(tableNum(ProdBOM));
            ok = checkFailed(strFmt("@SYS15726", prodBOM.ItemId));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record is located in the <c>ProdBOM</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from prodBOM
                    where prodBOM.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProdBOM</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProdBOM</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value hat indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProdBOM</c> table; otherwise, an empty record.
    /// </returns>
    public static ProdBOM find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        ProdBOM prodBOM;

        if (_recId)
        {
            prodBOM.selectForUpdate(_forUpdate);

            select firstonly prodBOM
                where prodBOM.RecId == _recId;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOprNum</Name>
				<Source><![CDATA[
    public static ProdBOM  findOprNum(
        ProdId   _prodId,
        OprNum   _oprNum,
        boolean  _forUpdate = false)
    {
        ProdBOM  prodBOM;

        if (_prodId)
        {
            prodBOM.selectForUpdate(_forUpdate);

            select firstonly prodBOM
                where prodBOM.ProdId    == _prodId &&
                      prodBOM.OprNum    == _oprNum;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllByOprNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified records in the <c>ProdBOM</c> table.
    /// </summary>
    /// <param name = "_prodId">The <c>ProdId</c> value.</param>
    /// <param name = "_oprNum">The <c>OprNum</c> value.</param>
    /// <returns>
    ///     Corresponding records in the <c>ProdBOM</c> table; otherwise, an empty record.
    /// </returns>
    [Hookable(false)]
    internal static ProdBOM  findAllByOprNum(
        ProdId   _prodId,
        OprNum   _oprNum)
    {
        ProdBOM  prodBOM;

        if (_prodId)
        {
            select    prodBOM
                where prodBOM.ProdId == _prodId 
                   && prodBOM.OprNum == _oprNum;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransId</Name>
				<Source><![CDATA[
    public static ProdBOM  findTransId(
        InventTransId  _transId,
        boolean         _forUpdate = false)
    {
        ProdBOM  prodBOM;

        if (_transId)
        {
            prodBOM.selectForUpdate(_forUpdate);

            select firstonly prodBOM
                index hint TransIdIdx
                where prodBOM.InventTransId == _transId;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether specified by inventory transaction ID record exists in the <c>ProdBOM</c> table.
    /// </summary>
    /// <param name="_transId">
    /// The inventory transaction ID to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existTransId(InventTransId _transId)
    {
        return _transId &&
            (select firstonly RecId from ProdBOM
                where ProdBOM.InventTransId == _transId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdPessimistic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProdBOM</c> record with the specified Lot ID and takes an update lock on it.
    /// </summary>
    /// <param name = "_transId">The Lot ID.</param>
    /// <returns>The <c>ProdBOM</c> record.</returns>
    public static ProdBOM findTransIdPessimistic(InventTransId _transId)
    {
        ProdBOM prodBOM;

        if (_transId)
        {
            select firstonly pessimisticlock prodBOM
                where prodBOM.InventTransId == _transId;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendorRefPurchId</Name>
				<Source><![CDATA[
    public static ProdRefPurchId findVendorRefPurchId(
        ProdId _prodId,
        OprNum _oprNum)
    {
        ProdBOM         prodBOM;
        InventItemType  inventItemType;
        ProdRefPurchId  refPurchId;
        boolean         uniqueRefPerOper = true;

        while select prodBOM
            where prodBOM.ProdId        == _prodId
               && prodBOM.OprNum        == _oprNum
               && prodBOM.InventRefType == InventRefType::Purch
        {
            if (prodBOM.type().isPeggedSupply())
            {
                inventItemType = prodBOM.inventTable().inventItemType();

                if (inventItemType.isServiceItem())
                {
                    if (refPurchId && refPurchId != prodBOM.InventRefId)
                    {
                        uniqueRefPerOper = false;
                    }
                    else
                    {
                        refPurchId = prodBOM.InventRefId;
                    }
                }
            }
        }

        if (!uniqueRefPerOper)
        {
            refPurchId = '';
        }

        return refPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdDim</Name>
				<Source><![CDATA[
    internal static ProdBOM findByItemIdDim(ProdId _prodId, ItemId _itemId, InventDim _inventDimCriteria, boolean _forUpdate = false)
    {
        ProdBOM prodBom;
        InventDim inventDimJoin;
        
        if (_prodId && _itemId)
        {
            if (_forUpdate)
            {
                prodBom.selectForUpdate(_forUpdate);
            }

            select firstonly prodBom
                where  prodBom.ProdId == _prodId
                    && prodBom.ItemId == _itemId
            #WHSInventDimExistsJoin(prodBom.InventDimId, inventDimJoin, _inventDimCriteria);
        }

        return prodBom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(ProdId _prodId)
    {
        return (select maxof(LineNum) from prodBOM
                    index hint NumIdx
                    where prodBOM.ProdId == _prodId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestRemainStatus</Name>
				<Source><![CDATA[
    public static ProdBackStatus lowestRemainStatus(ProdId _prodId)
    {
        return (select minof(BackorderStatus) from prodBOM
                    index hint NumRemainIdx
                    where prodBOM.ProdId == _prodId).BackorderStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOMOprNumDisplayCache</Name>
				<Source><![CDATA[
    static container prodBOMOprNumDisplayCache(
        container   _conMapProdBOM,
        container   _conMapRemainInventFinancial,
        container   _conMapAvailPhysical
        )
    {
        Map         mapProdBOM                   = (_conMapProdBOM)                 ? Map::create(_conMapProdBOM)               : new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);
        Map         mapRemainInventFinancial     = (_conMapRemainInventFinancial)   ? Map::create(_conMapRemainInventFinancial) : new Map(typeName2Type(extendedTypeStr(RecId)), Types::Real);
        Map         mapAvailPhysical             = (_conMapAvailPhysical)           ? Map::create(_conMapAvailPhysical)         : new Map(typeName2Type(extendedTypeStr(RecId)), Types::Real);

        ProdBOM     prodBOM;

        MapIterator mi = new MapIterator(mapProdBOM);

        mi.begin();
        while (mi.more())
        {
            prodBOM = mapProdBOM.lookup(mi.key());

            mapRemainInventFinancial.insert(prodBOM.RecId,prodBOM.remainInventFinancial());
            mapAvailPhysical.insert(prodBOM.RecId,prodBOM.availPhysical());

            mi.next();
        }

        return [mapRemainInventFinancial.pack(),mapAvailPhysical.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodFlushingPrincipItem2BOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>ProdFlushingPrincipItem</c> enumeration value to a <c>ProdFlushingPrincipBOM</c>
    /// enumeration value.
    /// </summary>
    /// <param name="_prodFlushingPrincipItem">
    /// The <c>ProdFlushingPrincipItem</c> enumeration value to convert.
    /// </param>
    /// <returns>
    /// The converted <c>ProdFlushingPrincipBOM</c> enumeration value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was called by using an unexpected value.
    /// </exception>
    [Replaceable]
    public static ProdFlushingPrincipBOM prodFlushingPrincipItem2BOM(ProdFlushingPrincipItem _prodFlushingPrincipItem)
    {
        switch (_prodFlushingPrincipItem)
        {
            case ProdFlushingPrincipItem::Start:
                return ProdFlushingPrincipBOM::Start;

            case ProdFlushingPrincipItem::Finish:
                return ProdFlushingPrincipBOM::Finish;

            case ProdFlushingPrincipItem::Manual:
                return ProdFlushingPrincipBOM::Manual;
                
            case ProdFlushingPrincipItem::Picked:
                return ProdFlushingPrincipBOM::Picked;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyProdJournalBOM</Name>
				<Source><![CDATA[
    public static container qtyProdJournalBOM(ProdBOM _prodBOM)
    {
        ProdJournalBOM          tmpJournalBOM;
        ProdJournalTable        prodJournalTable;
        ProdJournalIdBOM        prodJournalIdBOM = '';
        boolean                 oneJournal = true;
        InventQty               qty = 0;
        UnitQty                 bomQty = 0;
        PdsCWInventQty          cwQty = 0;

        tmpJournalBOM.selectLocked(false);

        while select forceplaceholders tmpJournalBOM
            index hint TransIdIdx
            where tmpJournalBOM.InventTransId       == _prodBOM.InventTransId   &&
                  tmpJournalBOM.InventReturnFlag    == NoYes::No
            join TableId from prodJournalTable
                index hint JournalIdx
                where prodJournalTable.JournalId    == tmpJournalBOM.JournalId  &&
                      prodJournalTable.Posted       == NoYes::No
        {
            qty     += ProdJournalBOM::maxQty(tmpJournalBOM);
            bomQty  += ProdJournalBOM::maxQtyBOM(tmpJournalBOM);
            cwQty   += ProdJournalBOM::pdsCWMaxQty(tmpJournalBOM);

            if (prodJournalIdBOM && tmpJournalBOM.JournalId != prodJournalIdBOM)
            {
                prodJournalIdBOM = '';
                oneJournal = false;
            }
            else if (!prodJournalIdBOM && oneJournal)
            {
                prodJournalIdBOM = tmpJournalBOM.JournalId;
            }
        }

        return [qty, bomQty, prodJournalIdBOM, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS12725";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExclBackStatus</Name>
				<Source><![CDATA[
    public static void updateExclBackStatus(ProdBOM _prodBOM)
    {
        _prodBOM.update(false,null,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNonePhysicalRemain</Name>
				<Source><![CDATA[
    public static void updateNonePhysicalRemain(ProdId _prodId)
    {
        ProdBOM  prodBOM;

        while select forupdate prodBOM
            index hint NumIdx
            where prodBOM.ProdId == _prodId
				&& (prodBOM.RemainInventPhysical != 0
					|| prodBOM.RemainBOMPhysical != 0)
        {
            setPrefix(#PreFixField(prodBOM,itemId));

            prodBOM.RemainInventPhysical	= 0;
            prodBOM.RemainBOMPhysical		= 0;
            prodBOM.PdsCWRemainPhysical		= 0;

            prodBOM.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewCacheBufferFromProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProdBOM</c> record ready to be used with the <c>RecordViewCache></c> class.
    /// </summary>
    /// <param name = "_prodId">The ProdId to scope the cache for.</param>
    /// <param name = "_forupdate">A Boolean indicating if the record should be selected for update; optional.</param>
    /// <returns>A <c>ProdBOM</c> record.</returns>
    public static ProdBOM viewCacheBufferFromProdId(
        ProdId  _prodId,
        boolean _forupdate = false)
    {
        ProdBOM   prodBOM;

        prodBOM.selectForUpdate(_forupdate);

        select nofetch prodBOM
            where prodBOM.ProdId == _prodId;

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity from the current <c>ProdBOM</c> record that has already been consumed
    /// using the unit of measure defined on the ProdBom
    /// </summary>
    /// <returns>
    /// Consumed quantity in the current<c>ProdBOM</c> record using the unit of measure defined on the ProdBom
    /// </returns>
    public Qty qtyConsumed()
    {
        InventTransOriginProdBOM inventTransOriginProdBOM;
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;

        select inventTransOriginProdBOM
                where inventTransOriginProdBOM.ProdBOMInventTransId == this.InventTransId
                      && inventTransOriginProdBOM.ProdBOMDataAreaId == this.DataAreaId
                    join inventTransOrigin
                        where inventTransOrigin.RecId == inventTransOriginProdBOM.InventTransOrigin
                            join sum(Qty) from inventTrans
                                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                                   && (((inventTrans.StatusIssue == StatusIssue::Deducted 
                                   || inventTrans.StatusIssue == StatusIssue::Sold ) 
                                   && inventTrans.StatusReceipt == StatusReceipt::None)
                                   || ((inventTrans.StatusReceipt == StatusReceipt::Received 
                                   || inventTrans.StatusReceipt == StatusReceipt::Purchased) 
                                   && inventTrans.StatusIssue == StatusIssue::None));

        Qty actualConsumption = -EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																									   this.InventDimId,
																									   inventTrans.Qty,
																									   this.inventUnit(),
																									   this.UnitId,
																									   NoYes::Yes);

        return actualConsumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity from the current <c>ProdBOM</c> record that has already been consumed
    /// </summary>
    /// <returns>
    /// Consumed quantity in the current<c>ProdBOM</c> record
    /// </returns>
    public InventQty qtyInventConsumed()
    {
        return this.QtyInventCalc - this.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity from the current <c>ProdBOM</c> record that has already been reserved
    /// </summary>
    /// <returns>
    /// Reserved quantity in the current<c>ProdBOM</c> record
    /// </returns>
    public InventQty qtyInventReserved()
    {
        InventTransIdSum inventTransIdSum;

        if (!this.InventTransId)
        {
            return 0;
        }

        inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(this.dataAreaId, this.InventTransId));

        return -inventTransIdSum.reserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if unit of measure is valid.
    /// </summary>
    /// <returns>
    /// true if the unit is valid; otherwise, false
    /// </returns>
    boolean checkUnit()
    {
        boolean  ok = true;

        if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
																						  this.InventDimId,
																						  InventTable::find(this.ItemId).inventUnitId(),
																						  this.UnitId))
        {
            ok = checkFailed(strFmt("@SYS28690", InventTable::find(this.ItemId).inventUnitId(), this.UnitId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the current BOM line is eligible to advanced warehousing processes.
    /// </summary>
    /// <returns>
    /// true if both the item and the warehouse in the BOM line are enabled for advanced warehousing processes;
    /// otherwise, false.
    /// </returns>
    public boolean whsEnabled()
    {
        return InventDim::find(this.InventDimId).inventLocation().WHSEnabled &&
               InventTable::find(this.ItemId).whsItemIsWHSControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemTypeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an icon representation of the item type on the BOM
    /// </summary>
    /// <returns>Container with icon representing the item type of the BOM</returns>
    public display container displayItemTypeIcon()
    {      
        return this.inventTable().displayItemTypeIcon();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(ProdBOM, ProdLineType), [fieldnum(ProdBOM, ItemId)]],
            [fieldnum(ProdBOM, Reservation), [fieldnum(ProdBOM, ProdLineType)]],
            [fieldnum(ProdBOM, BOMQty), [fieldnum(ProdBOM, ItemId), fieldnum(ProdBOM, Formula)]],
            [fieldnum(ProdBOM, EndSchedConsump), [fieldnum(ProdBOM, ProdLineType)]],
            [fieldnum(ProdBOM, InventDimId), [fieldnum(ProdBOM, WrkCtrConsumption), fieldnum(ProdBOM, OprNum)]]        
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProdBOM, BOMQty):
                this.defaultBOMQuantity();
                this.defaultFormula();
                break;

            case fieldnum(ProdBOM, ProdLineType):
                this.defaultProductionLineType();
                break;

            case fieldnum(ProdBOM, Reservation):
                this.defaultReservation();
                break;

            case fieldnum(ProdBOM, EndSchedConsump):
                this.defaultEndConsumption();
                break;

            case fieldnum(ProdBOM, InventDimId):
                this.defaultResourceConsumptionUsed();
                break;

            case fieldnum(ProdBOM, Formula):
                this.defaultFormula();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductionLineType</Name>
				<Source><![CDATA[
    private void defaultProductionLineType()
    {
        if (this.getExtensionInventTable().Phantom)
        {
            this.ProdLineType = BOMType::Phantom;
        }
        else
        {
            this.ProdLineType = BOMType::Item;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEndConsumption</Name>
				<Source><![CDATA[
    private void defaultEndConsumption()
    {
        if (this.ItemId && this.itemType() == ItemType::Service && this.type().isPeggedSupply())
        {
            this.EndSchedConsump = NoYes::Yes;
        }
        else
        {
            this.EndSchedConsump = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReservation</Name>
				<Source><![CDATA[
    private void defaultReservation()
    {
        if (this.ProdLineType == BOMType::PeggedSupply)
        {
            this.Reservation = ProdReservation::Estimation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOMQuantity</Name>
				<Source><![CDATA[
    private void defaultBOMQuantity()
    {
        if (!this.BOMQty && !this.PmfQtyWithoutYield)
        {
            this.BOMQty = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFormula</Name>
				<Source><![CDATA[
    internal void defaultFormula()
    {
        if (this.Formula == BOMFormula::Formula5)
        {
            this.PdsCWQty = 0;
            this.BOMQty = 0;
            this.PmfPctEnable = false;
            this.PmfFormulaPct = 0;
            this.PmfScalable = false;
            this.BOMConsump = BOMConsumpType::Constant;
            this.PmfQtyWithoutYield = 0;
            this.RoundUpQty = 0;
        }
        else
        {
            PmfProdBOMStep::deleteByBomRecId(this.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultResourceConsumptionUsed</Name>
				<Source><![CDATA[
    private void defaultResourceConsumptionUsed()
    {
        if (this.WrkCtrConsumption)
        {
            InventDim localInventDim = this.inventDim();
            localInventDim.InventLocationId = '';
            localInventDim = InventDim::findOrCreate(localInventDim);
            
            ProdTable bomProdTable = this.getExtensionProdTable();
            TransDate bomDate = bomProdTable.bomDate ? bomProdTable.bomDate
                                                         : (bomProdTable.DlvDate ? bomProdTable.DlvDate
                                                                                 : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                
            localInventDim.InventLocationId = this.BOMMap::routeInputInventLocationId(bomProdTable.ItemId,
                                                                                      bomProdTable.RouteId,
                                                                                      bomProdTable.inventDim().ConfigId,
                                                                                      bomProdTable.inventDim().InventSiteId,
                                                                                      this.OprNum,
                                                                                      this.WrkCtrConsumption,
                                                                                      bomDate);
            
            this.setInventDimIdFromInventDim(localInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionInventTable</Name>
				<Source><![CDATA[
    private InventTable getExtensionInventTable()
    {
        return this.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionProdTable</Name>
				<Source><![CDATA[
    private ProdTable getExtensionProdTable()
    {
        return this.prodTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInputWMSLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the input location tied to the operation number and dimensions.
    /// </summary>
    /// <returns>The input location tied to the operation number and dimensions.</returns>
    public display WMSLocationId displayInputWMSLocationId()
    {
        return WHSProdTable::getWorkCenterLocationFromProdId(this.ProdId, this.OprNum, this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemainingToReleaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the remaining to be released quantity for the bill of material.
    /// </summary>
    /// <returns>The remaining to be released quantity for the bill of material.</returns>
    public display InventQty displayRemainingToReleaseQty()
    {
        return (PdsGlobal::pdsIsCWItem(this.ItemId) ? this.PdsCWInventCalc : this.QtyInventCalc) - this.displayReleasedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReleasedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the released quantity for the bill of material.
    /// </summary>
    /// <returns>The released quantity for the bill of material.</returns>
    public display WHSReleasedInventQty displayReleasedQty()
    {
        return WHSProdBOMPool::find(this.InventTransId).ReleasedInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullyReleasedToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>ProdBOM</c> record is fully released to warehouse.
    /// </summary>
    /// <returns>true if the record is fully released to warehouse; otherwise, false</returns>
    public boolean fullyReleasedToWarehouse()
    {
        WHSProdBOMPool prodBOMPool = WHSProdBOMPool::find(this.InventTransId);
        boolean        ret;

        InventQty qtyToCompare = PdsGlobal::pdsIsCWItem(this.ItemId) ? this.PdsCWInventCalc : this.QtyInventCalc;

        if (prodBOMPool.WavedQty           == qtyToCompare
        ||  (prodBOMPool.ReleasedInventQty == qtyToCompare
        &&   WHSProdWaveLine::getOpenWaveIdForInventTransId(this.InventTransId) != ''))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the inventory unit ID for the bill of material.
    /// </summary>
    /// <returns>The inventory unit ID for the bill of material.</returns>
    public display InventUnitId displayInventUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the standard cost for the <c>ProdBOM</c>.
    /// </summary>
    /// <returns>An <c>InventItemPrice</c> record with the standard cost.</returns>
    /// <remarks>The function assumes that the item is a standard cost item.</remarks>
    internal InventItemPrice getInventItemPrice()
    {
        InventItemPrice inventItemPrice;
        InventTable inventTable = this.inventTable();
        ProdTable prodTable = this.prodTable();
        if (prodTable.ProdStatus == ProdStatus::Completed)
        {
            inventItemPrice = InventCostTrans::getFinancialIssueOrReceiptPriceForProductionOrder(inventTable, this.InventTransId, this.inventDim(), prodTable.RealDate);
        }
        else
        {
            inventItemPrice = InventItemPrice::stdCostFindDate(inventTable, maxDate(), this.InventDimId);
        }

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNonWHSItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a production order contains a non WHS enabled item.
    /// </summary>
    /// <param name = "_prodId">Production ID to find <c>ProdBOM</c> record for checking if the item is WHS enabled.</param>
    /// <returns>true if the production order contains a non WHS enabled item; otherwise, false</returns>
    public static boolean hasNonWHSItem(ProdId _prodId)
    {
        ProdBOM          prodBOM;
        WHSInventEnabled whsInventEnabled;

        select firstonly RecId from prodBOM
            where prodBOM.ProdId == _prodId
            notExists join whsInventEnabled
                where whsInventEnabled.ItemId == prodBOM.ItemId;

        return prodBOM.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWHSItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a production order contains a WHS enabled item.
    /// </summary>
    /// <param name = "_prodId">Production ID to find <c>ProdBOM</c> record for checking if the item is WHS enabled.</param>
    /// <returns>true if the production order contains a WHS enabled item; otherwise, false</returns>
    public static boolean hasWHSItem(ProdId _prodId)
    {
        ProdBOM          prodBOM;
        WHSInventEnabled whsInventEnabled;

        select firstonly RecId from prodBOM
            where prodBOM.ProdId == _prodId
            exists join whsInventEnabled
                where whsInventEnabled.ItemId == prodBOM.ItemId;

        return prodBOM.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the item type is valid for proceeding with posting.
    /// </summary>
    /// <returns>true if the item type is valid. Otherwise, false</returns>
    protected boolean verifyItemType()
    {
        return this.itemType() == ItemType::Service;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSeriesSizeFromInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates series size from inventory quantity respecting units of measurement and route operation's accumulated scrap factor.
    /// </summary>
    /// <param name="_qty">Inventory quantity of the item</param>
    /// <returns>series size respecting UOM and route operation's accumulated scrap factor</returns>
    /// <remarks>
    /// This method is extracted from other methods with some changes.
    /// Currently it is kept internal to minimize the risk by preventing extension.
    /// </remarks>
    [Hookable(false)]
    internal InventQty calcSeriesSizeFromInventQty(InventQty _qty)
    {
        Qty bomConsumptionQty = _qty;
        if (this.inventUnit() != this.UnitId)
        {
            bomConsumptionQty  = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                this.InventDimId, bomConsumptionQty, this.inventUnit(), this.UnitId, NoYes::Yes);
        }
        InventQty seriesSize = bomConsumptionQty / (this.bomQty() ? this.bomQty() : 1);

        // inverse accumulated error factor if included in estimated material consumption in order to compute producable series size
        if (this.OprNum != 0)
        {
            var accumulatedErrorFactor = ProdRoute::find(this.ProdId, this.OprNum, RouteOprPriority::Primary).AccError;

            seriesSize = seriesSize / (accumulatedErrorFactor ? accumulatedErrorFactor : 1);
        }
        return this.roundValueToUnitOfMeasure(seriesSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ProdBOM</c> material.
    /// </summary>
    [Hookable(false)]
    internal void updateMaterial()
    {
        if (!this.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(ProdBOM)));
        }
        else
        {
            //depending on setting this can lead to a reservation of the increased quantity
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickSubProductionDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a subproduction demand has sufficient reserved physically coverage based on marking relationship
    /// </summary>
    /// <param name="_demandQuantity">A demand quantity in inventory unit.</param>
    /// <returns>true if a subproduction demand can be picked; false if not sufficiently reserved.</returns>
    public boolean canPickSubProductionDemand(InventQty _demandQuantity)
    {
        boolean result = true;

        // ensures subproduction supply produced covers marked demand
        if (ProdAutoPickSubproductionFlight::instance().isEnabled() && this.type().isPeggedSupply())
        {
            InventMovement   movement = InventMovement::construct(this);
            InventTransIdSum inventTransIdSum = InventTransIdSum::newTransIdNoChildType(movement.inventTransOriginId());

            if (_demandQuantity > -inventTransIdSum.reservPhysical())
            {
                result = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124131</DeveloperDocumentation>
	<Label>@SYS26684</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PDSProdCompensationPrinciple</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PDSProdCompensationPrinciple</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdCalcTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdCalcTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyBOMCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQtySerie</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBOMPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyBOMStUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBOMFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS7916</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Calculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBomId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BomWHSReleasePolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMQuantity</Name>
			<Label>@SYS22164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyBOMCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBOMPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyBOMStUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBOMFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consumption</Name>
			<Label>@SYS853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrConsumption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionCalculation</Name>
			<Label>@SYS22165</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Formula</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfQtyWithoutYield</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQtySerie</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdFlushingPrincip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapConst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapVar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FieldsForCopying_RU</Name>
			<Label>@GLS115756</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Formula</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUpQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrConsumption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Calculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BackorderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQtySerie</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBomId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndSchedConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryQuantity</Name>
			<Label>@SYS21676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyInventCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventStup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyInventStUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineAmount_RU</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Measurement</Name>
			<Label>@SYS2021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Density</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Constant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operation</Name>
			<Label>@SYS101237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndSchedConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCW</Name>
			<Label>@PRO446</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventStup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSLotGenealogyGroup</Name>
			<Label>@PSC182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSInheritCoProductBatchAttrib</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritEndItemBatchAttrib</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritCoProductShelfLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritEndItemShelfLife</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotencyGroup</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSIngredientType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSBaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrderReference</Name>
			<Label>@SYS24657</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfFormula</Name>
			<Label>@SYS672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfScalable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfFormulaPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPctEnable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfQtyWithoutYield</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfformulaRoute</Name>
			<Label>@SYS22227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Calculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBomId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price_RU</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectConsumed</Name>
			<Label>@SYS109052</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSetSubProdToConsumed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyInventCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundingUp</Name>
			<Label>@SYS2864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoundUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUpQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subsupplier</Name>
			<Label>@SYS22167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS2934</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RawMaterialDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RawMaterialTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BackorderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConstantReleased</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseProcesses</Name>
			<Label>@WAX:WarehouseProcesses</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaterialOverpickPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BackorderStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdBackStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMConsumpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMQtySerie</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMQtySerie</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BOMRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Calculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCalcBOMLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Constant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureConstant</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConstantReleased</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdConstantReleased</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Density</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDensity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndConsump</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS83463</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndSchedConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMEndSchedConsump</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Formula</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMFormula</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBomId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumBOM</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS139</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventStup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS141</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS149</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS140</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSIngredientType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSIngredientType</ExtendedDataType>
			<EnumType>PDSIngredientTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritCoProductBatchAttrib</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritBatchAttrib</ExtendedDataType>
			<Label>@PSC179</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritCoProductShelfLife</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritShelfLife</ExtendedDataType>
			<Label>@PSC180</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritEndItemBatchAttrib</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritBatchAttrib</ExtendedDataType>
			<Label>@PSC178</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritEndItemShelfLife</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritShelfLife</ExtendedDataType>
			<Label>@PSC181</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfFormulaPct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfFormulaPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfPctEnable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PRO73</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfQtyWithoutYield</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>BOMQty</ExtendedDataType>
			<Label>@PRO408</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfScalable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PRO76</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Position</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMPosition</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<Label>@SYS23884</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdFlushingPrincip</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdFlushingPrincipBOM</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdLineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjSetSubProdToConsumed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSetSubProdToConsumed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyBOMCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMQty</ExtendedDataType>
			<Label>@SYS101273</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyBOMStUp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS4695</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyInventCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS101273</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyInventStUp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS4695</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RawMaterialDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS10375</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>RawMaterialTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedTime</ExtendedDataType>
			<Label>@SYS56407</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBOMFinancial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS26093</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBOMPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS10197</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS10197</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdSched</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdReservation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMRoundUp</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundUpQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMRoundUpQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapConst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ScrapConst</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapVar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ScrapVar</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WrkCtrConsumption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrConsumption</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSBatchBalanced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBatchBalanced</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BomWHSReleasePolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<EnumType>BomWHSReleasePolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaterialOverpickPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaterialOverpickPercentage</ExtendedDataType>
			<FeatureClass>WHSProductionRawMaterialOverpickingFlight</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumRemainIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BackStatusItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventRefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BOMMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BOMConsump</MapField>
					<MapFieldTo>BOMConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMId</MapField>
					<MapFieldTo>BOMId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMQty</MapField>
					<MapFieldTo>BOMQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMQtySerie</MapField>
					<MapFieldTo>BOMQtySerie</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMType</MapField>
					<MapFieldTo>ProdLineType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BomWHSReleasePolicy</MapField>
					<MapFieldTo>BomWHSReleasePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Calculation</MapField>
					<MapFieldTo>Calculation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Constant</MapField>
					<MapFieldTo>Constant</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Density</MapField>
					<MapFieldTo>Density</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Depth</MapField>
					<MapFieldTo>Depth</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndSchedConsump</MapField>
					<MapFieldTo>EndSchedConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Formula</MapField>
					<MapFieldTo>Formula</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Height</MapField>
					<MapFieldTo>Height</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
					<MapFieldTo>ItemBomId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
					<MapFieldTo>ItemRouteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaterialOverpickPercentage</MapField>
					<MapFieldTo>MaterialOverpickPercentage</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSBaseValue</MapField>
					<MapFieldTo>PDSBaseValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCompensationPrincipleId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSIngredientType</MapField>
					<MapFieldTo>PDSIngredientType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritCoProductBatchAttrib</MapField>
					<MapFieldTo>PDSInheritCoProductBatchAttrib</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritCoProductShelfLife</MapField>
					<MapFieldTo>PDSInheritCoProductShelfLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritEndItemBatchAttrib</MapField>
					<MapFieldTo>PDSInheritEndItemBatchAttrib</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritEndItemShelfLife</MapField>
					<MapFieldTo>PDSInheritEndItemShelfLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfFormulaPct</MapField>
					<MapFieldTo>PmfFormulaPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfPctEnable</MapField>
					<MapFieldTo>PmfPctEnable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfQtyWithoutYield</MapField>
					<MapFieldTo>PmfQtyWithoutYield</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfScalable</MapField>
					<MapFieldTo>PmfScalable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>position</MapField>
					<MapFieldTo>Position</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProdFlushingPrincip</MapField>
					<MapFieldTo>ProdFlushingPrincip</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUp</MapField>
					<MapFieldTo>RoundUp</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUpQty</MapField>
					<MapFieldTo>RoundUpQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ScrapConst</MapField>
					<MapFieldTo>ScrapConst</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ScrapVar</MapField>
					<MapFieldTo>ScrapVar</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendId</MapField>
					<MapFieldTo>VendId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Width</MapField>
					<MapFieldTo>Width</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrConsumption</MapField>
					<MapFieldTo>WrkCtrConsumption</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjInventJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BudgetReservationLine_PSN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EcoResCategory</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostAmount</MapField>
					<MapFieldTo>ProjCostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostMarkup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
					<MapFieldTo>ProjCostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjPriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>QtyInventCalc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>ProjTransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMRefRecId</Name>
					<Field>BOMRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdBOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<SourceEDT>BOMId</SourceEDT>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124132</EntityRelationshipRole>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransferOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::InventTransfer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBOM</Name>
			<EntityRelationshipRole>@SYS123434</EntityRelationshipRole>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalBOM</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS124133</EntityRelationshipRole>
			<RelatedTable>ProdJournalBOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BomJournalTransaction</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124134</EntityRelationshipRole>
			<RelatedTable>ProdRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionRoute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprNum</Name>
					<Field>OprNum</Field>
					<RelatedField>OprNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdRouteJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124135</EntityRelationshipRole>
			<RelatedTable>ProdRouteJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RouteJob</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprNum</Name>
					<Field>OprNum</Field>
					<RelatedField>OprNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124136</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionOrder</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124137</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferencedProductionOrder</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124138</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchaseOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdSched</Name>
					<Field>ReqPlanIdSched</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124174</EntityRelationshipRole>
			<RelatedTable>ReqTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NetRequirement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefType_Extern</Name>
					<RelatedField>RefType</RelatedField>
					<ValueStr>ReqRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SubBOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SubBOMTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdBOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBomId</Name>
					<SourceEDT>ItemBOMId</SourceEDT>
					<Field>ItemBomId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionBom</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdAsBuiltBOMFormulaProducts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124136</EntityRelationshipRole>
			<RelatedTable>ProdAsBuiltBOMFormulaProducts</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProdAsBuiltBOMFormulaProducts</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProductionBoms</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>