<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResBoundedAttributeTypeValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResBoundedAttributeTypeValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the value is in the domain bounds, or not.
    /// </summary>
    /// <param name="_value">
    /// The value to test whether it is in the domain bounds.
    /// </param>
    /// <returns>
    /// true if the value is in the domain bounds; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method does not perform a unit of measure comparison.
    /// </remarks>
    public boolean isValid(EcoResValue _value)
    {
        EcoResValue         ecoResValueLowerBound = EcoResValue::find(this.LowerBound);
        EcoResValue         ecoResValueUpperBound = EcoResValue::find(this.UpperBound);

        if (ecoResValueLowerBound.RecId && ecoResValueUpperBound.RecId)
        {
            if ((ecoResValueLowerBound is EcoResIntValue) ||
                (ecoResValueLowerBound is EcoResFloatValue) ||
                (ecoResValueLowerBound is EcoResDateTimeValue))
            {
                // Bounds are inclusive
                if (_value.getValue() < ecoResValueLowerBound.getValue() ||
                    _value.getValue() > ecoResValueUpperBound.getValue())
                {
                    return false;
                }

                return true;
            }
            else if (ecoResValueLowerBound is EcoResCurrencyValue)
            {
                // Bounds are inclusive
                if (ecoResValueLowerBound.compareTo(_value) == 1 ||
                    ecoResValueUpperBound.compareTo(_value) == -1)
                {
                    return false;
                }

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string representation of the domain bounds.
    /// </summary>
    /// <returns>
    /// A string representation of the domain bounds.
    /// </returns>
    public str toString()
    {
        EcoResValue     ecoResValueLowerBound   = EcoResValue::find(this.LowerBound);
        EcoResValue     ecoResValueUpperBound   = EcoResValue::find(this.UpperBound);

        if (ecoResValueLowerBound.RecId && ecoResValueUpperBound.RecId)
        {
            return strfmt("@SYS310462", ecoResValueLowerBound.value(), ecoResValueUpperBound.value());
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>EcoResBoundedAttributeTypeValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResBoundedAttributeTypeValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResBoundedAttributeTypeValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResBoundedAttributeTypeValue</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResBoundedAttributeTypeValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResBoundedAttributeTypeValue    ecoResBoundedAttributeTypeValue;

        ecoResBoundedAttributeTypeValue.selectForUpdate(_forupdate);

        if (_recId)
        {
            select firstonly ecoResBoundedAttributeTypeValue
                where ecoResBoundedAttributeTypeValue.RecId == _recId;
        }
        return ecoResBoundedAttributeTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>EcoResBoundedAttributeTypeValue</c> record that is specified by a related
    ///    <c>EcoResAttributeType</c> record.
    /// </summary>
    /// <param name="_domain">
    ///    The <c>EcoResAttributeType</c> table buffer that is related to the record to find.
    /// </param>
    /// <param name="_selectForUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResBoundedAttributeTypeValue</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResBoundedAttributeTypeValue findByAttributeType(EcoResAttributeType _domain, boolean _selectForUpdate = false)
    {
        EcoResBoundedAttributeTypeValue ecoResBoundedAttributeTypeValue;

        ecoResBoundedAttributeTypeValue.selectForUpdate(_selectForUpdate);

        select firstonly ecoResBoundedAttributeTypeValue
            where ecoResBoundedAttributeTypeValue.AttributeType == _domain.RecId;

        return ecoResBoundedAttributeTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152877</DeveloperDocumentation>
	<FormRef>EcoResAttributeType</FormRef>
	<Label>@SYS152876</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UpperBound</TitleField1>
	<TitleField2>LowerBound</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>AttributeTypeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperBound</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerBound</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperBound</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerBound</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS131474</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UpperBound</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerBound</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS333319</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LowerBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS152891</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UpperBound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS152890</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AttributeType</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResAttributeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AttributeType</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>Domain_EcoResBoundedAttributeTypeValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeType</Name>
					<Field>AttributeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LowerBoundValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LowerBoundValue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LowerBoundValue_EcoResBoundedAttributeTypeValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LowerBound</Name>
					<Field>LowerBound</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UpperBoundValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UpperBoundValue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UpperBoundValue_EcoResBoundedAttributeTypeValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UpperBound</Name>
					<Field>UpperBound</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>