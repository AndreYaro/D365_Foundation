<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceOrderTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceOrderTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLatestCompletionDateTime</Name>
				<Source><![CDATA[
    public SMALatestCompletionDateTime calcLatestCompletionDateTime()
    {
        SMAServiceLevelAgreementTable   serviceLevelAgreement;
        SMALatestCompletionDateTime     ret;
        Seconds                         secSLA;
        Seconds                         secInProgress;

        serviceLevelAgreement = SMAServiceLevelAgreementTable::find(this.ServiceLevelAgreement);

        secSLA          = serviceLevelAgreement.secondsToFinishRequest();
        secInProgress   = SMAServiceLevelAgreementLog::totalInProgress(this.ServiceOrderId);

        // Find the first entry
        ret = SMAServiceLevelAgreementLog::lastStartDateTime(this.ServiceOrderId);
        // add sec left to complete
        ret = DateTimeUtil::addSeconds(ret, secSLA - secInProgress);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceLevelAgreementCompliance</Name>
				<Source><![CDATA[
    public void calcServiceLevelAgreementCompliance()
    {
        SMAServiceLevelAgreementLog         serviceLevelAgreementLog;
        SMAServiceLevelAgreementTable       serviceLevelAgreement;
        Integer                             duration;

        serviceLevelAgreement = SMAServiceLevelAgreementTable::find(SMAAgreementTable::find(this.AgreementId).ServiceLevelAgreementId);

        this.Compliance = 0;

        if (this.ServiceLevelAgreementStatus == SMALogStatus::Closed)
        {
            while select serviceLevelAgreementLog where serviceLevelAgreementLog.ServiceOrderId == this.ServiceOrderId
            {
                duration += serviceLevelAgreementLog.duration();
            }

            if (duration > 0)
            {
                this.Compliance = (serviceLevelAgreement.Days * 24 * 60 * 60) + (serviceLevelAgreement.Hours * 60 * 60) + (serviceLevelAgreement.Minutes * 60);

                if (this.Compliance > 0)
                {
                    this.Compliance = duration / this.Compliance * 100;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRequirementSalesStatus</Name>
				<Source><![CDATA[
    public boolean checkItemRequirementSalesStatus()
    {
        return (select firstonly RecId from SalesLine
                    where SalesLine.ServiceOrderId == this.ServiceOrderId
                        && (SalesLine.SalesStatus == SalesStatus::None
                            || SalesLine.SalesStatus == SalesStatus::Backorder
                            || SalesLine.SalesStatus == SalesStatus::Delivered
                            || SalesLine.SalesStatus == SalesStatus::Canceled)).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoActiveSalesLine</Name>
				<Source><![CDATA[
    public boolean checkNoActiveSalesLine(SMAServiceFunctionType _functionType = SMAServiceFunctionType::Delete)
    {
        boolean         ret         = true;

        // check if active Item Requirement is attached to ServiceOrder
        if (this.existItemRequirement())
        {
            switch (_functionType)
            {
                case SMAServiceFunctionType::Delete :
                    // Item requirements exist on service order %1. Service order cannot be deleted.
                    ret = checkFailed(strFmt("@SYS96426", this.ServiceOrderId));
                    break;

                case SMAServiceFunctionType::Cancel :
                    // Item requirements exist on service order %1. Service order cannot be canceled.
                    ret = checkFailed(strFmt("@SYS91981", this.ServiceOrderId));
                    break;

                default:
                    ret = true;
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    public boolean checkProjId(ProjId _projId = this.ProjId)
    {
        ProjTable       projTable;
        boolean         ret = true;

        if (_projId)
        {
            projTable = ProjTable::find(_projId);

            if (projTable.Type == ProjType::Time)
            {
                ret = checkFailed(strFmt("@SYS90797", projTable.Type));
            }

            if (ret && projTable.Header)
            {
                ret = checkFailed(strFmt("@SYS96612",projTable.ProjId));
            }

            if (ret)
            {
                ret = projTable.checkActiveInTree();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkServiceDate</Name>
				<Source><![CDATA[
    boolean checkServiceDate()
    {
        SMAAgreementTable smaAgreementTable = SMAAgreementTable::find(this.AgreementId);
        boolean     ret                     = true;

        if (smaAgreementTable)
        {
            if (DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())) < smaAgreementTable.StartDate ||
               (smaAgreementTable.EndDate && DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())) > smaAgreementTable.EndDate))
            {
                    // Service date must be in between start and end date for Service agreement %1
                    warning(strFmt("@SYS106668", smaAgreementTable.AgreementId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStageAllowDelete</Name>
				<Source><![CDATA[
    public boolean checkStageAllowDelete()
    {
        boolean ret = true;

        if (SMAStageTable::find(this.StageId).StageCanDelete == NoYes::No)
        {
            ret = checkFailed(strFmt("@SYS90093", this.ServiceOrderId));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStageAllowModify</Name>
				<Source><![CDATA[
    public boolean checkStageAllowModify()
    {
        boolean ret = true;

        if (SMAStageTable::find(this.StageId).StageCanModify == NoYes::No)
        {
            ret = checkFailed(strFmt("@SYS90720",this.ServiceOrderId));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::find(this.ContactPersonId).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerName</Name>
				<Source><![CDATA[
    display CustName customerName()
    {
        CustName    custName    = '';
        DictTable   dictTable   = new DictTable(tableNum(CustTable));

        if (dictTable.rights() >= AccessType::View)
        {
            custName = CustTable::find(this.CustAccount).name();
        }

        return custName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SMAServiceLevelAgreementLog serviceLevelAgreementLog;
        SMAServiceObjectRelation    serviceObjectRelation;

        ttsbegin;

        // Is an Service level agreement attached to the service order
        if (SMAServiceLevelAgreementLog::find(this.ServiceOrderId))
        {
            // Delete the attached SLa
            serviceLevelAgreementLog = SMAServiceLevelAgreementLog::find(this.ServiceOrderId);
            delete_from serviceLevelAgreementLog where serviceLevelAgreementLog.ServiceOrderId == this.ServiceOrderId;
        }
        // Delete the primary activities attached
        smmActivityParentLink::deletePrimaryActivities(this, smmActivityParentType::ServiceOrder);

        serviceObjectRelation.skipDeleteActions();

        delete_from serviceObjectRelation
            where serviceObjectRelation.RelTableId == this.TableId
                && serviceObjectRelation.RelKeyId  == this.ServiceOrderId;

        ttscommit;

        super();

        this.deleteItemRequirement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItemRequirement</Name>
				<Source><![CDATA[
    public void deleteItemRequirement()
    {
        SalesLine   salesLine;

        //if there are any ItemRequirements and they are ok regarding SalesStatus, continue
        if (this.existItemRequirement(false) && !this.checkItemRequirementSalesStatus())
        {
            ttsbegin;
            //delete the saleslines
            delete_from salesLine where salesLine.ServiceOrderId == this.ServiceOrderId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLatestCompletionDateTime</Name>
				<Source><![CDATA[
    display public SMALatestCompletionDateTime displayLatestCompletionDateTime()
    {
        SMALatestCompletionDateTime  ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Is the service request still active?
        if (this.ServiceLevelAgreementStatus == SMALogStatus::Open)
        {
            ret = this.calcLatestCompletionDateTime();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        ContactPersonId     contactPersonId;

        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson   = ContactPerson::find(_name);

                this.ContactPersonId = contactPerson.ContactPersonId;

                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    DirPartyTable       partyTable;
                    CustTable           custTable;

                    select firstonly ContactPersonId from contactPerson
                        join TableId from custTable
                         where custTable.AccountNum == this.CustAccount
                            && contactPerson.ContactForParty ==  custTable.Party
                        join Name from partyTable
                            where partyTable.RecId == contactPerson.Party
                               && partyTable.Name  like name;

                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId = contactPerson.ContactPersonId;

                        name = partyTable.Name;
                    }
                }
                if (contactPersonId != this.ContactPersonId)
                {
                    if (ContactPerson::checkContactPerson(this.CustAccount, this.ContactPersonId, this.ContactPersonId))
                    {
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId = '';
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemRequirement</Name>
				<Source><![CDATA[
    public boolean existItemRequirement(boolean checkSalesStatus = true)
    {
        // Ranges on SalesType and ProjId were added to allow searching on SalesTypeIdx index in SalesLine table
        if ((select firstonly salesLine where salesLine.SalesType == SalesType::ItemReq && salesLine.ProjId == this.ProjId && salesLine.ServiceOrderId == this.ServiceOrderId).RecId)
        {
            if (checkSalesStatus)
            {
                return this.checkItemRequirementSalesStatus();
            }
            else
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existServiceAddress</Name>
				<Source><![CDATA[
    public boolean existServiceAddress()
    {
        boolean ret;

        ret = this.ServicePostalAddress != 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreement</Name>
				<Source><![CDATA[
    public void initFromAgreement(boolean checkUpdateDate = false)
    {
        CustTable           custTable;
        SMAAgreementTable   agreementTable = SMAAgreementTable::find(this.AgreementId);

        this.CustAccount        = agreementTable.custAccount();
        this.ProjId             = agreementTable.ProjId;

        // Only use active workers as the default value on the service order
        if (agreementTable.WorkerServiceResponsible && HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(agreementTable.WorkerServiceResponsible))
        {
            this.WorkerResponsible = agreementTable.WorkerServiceResponsible;
        }
        this.ContactPersonId    = agreementTable.ContactPersonId;
        this.Description        = (this.Description == '') ? agreementTable.AgreementDescription : this.Description;

        if (checkUpdateDate == false)
        {
            this.setServiceDate();
        }

        // Only use active workers as the default value on the service order
        if (agreementTable.WorkerPreferredTechnician && HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(agreementTable.WorkerPreferredTechnician))
        {
            this.WorkerPreferredTechnician = agreementTable.WorkerPreferredTechnician;
        }

        if (this.AgreementId)
        {
            this.ServiceLevelAgreement = agreementTable.serviceLevelAgreementId();
            if (this.ServiceLevelAgreement)
            {
                this.ServiceLevelAgreementStatus = SMALogStatus::Open;
            }
        }

        custTable = CustTable::find(this.CustAccount);

        this.ActivityTypeId         = agreementTable.ActivityTypeId;

        this.updateProjAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        SMAParameters   parameters      = SMAParameters::find();
        utcdatetime     currentDateTime = DateTimeUtil::getSystemDateTime();

        this.StageId    = SMAStageTable::firstStage();
        this.Progress   = SMAServiceOrderProgress::InProcess;

        if (parameters.CalendarId)
        {
            this.ServiceDateTime = WorkCalendar::findOpenDateTimeForward(parameters.CalendarId, currentDateTime, true);
        }
        else
        {
            this.ServiceDateTime = currentDateTime;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _isCalledFromBatch = false,boolean _activityHandling = true, smmActivities _templateActivity = null)
    {
        smmCreateActivity   smmCreateActivity;

        this.CalendarConflict =  !WorkCalendarDate::isDateOpen(SMAParameters::find().CalendarId, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())));

        // Create follow up activity for the service order if the service order has a responsible employee
        if (_activityHandling && this.WorkerResponsible && !this.ActivityNumber)
        {
            smmCreateActivity = SMAParameters::find().ServiceOrderCreateActivity;
            if (smmCreateActivity != smmCreateActivity::No && (_templateActivity || smmCreateActivity == smmCreateActivity::Yes))
            {
                this.ActivityNumber = smmActivityCreate::createActivity(this,_isCalledFromBatch,_templateActivity).ActivityNumber;
            }
        }

        if (this.AgreementId && this.ServiceLevelAgreement)
        {
            this.updateServiceLevelAgreementLog();
        }

        this.createServiceObjectRelationFromAgreement();

        super();

        // Insert parent link for activity
        if (this.ActivityNumber)
        {
            smmActivityParentLink::insertLink(this.ActivityNumber,smmActivityParentType::ServiceOrder, this.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        SMAParameters   parameters = SMAParameters::find();

        super(_fieldId);

        if (this.RecId)
        {
            switch (_fieldId)
            {
                case fieldNum(SMAServiceOrderTable, AgreementId) :
                    this.initFromAgreement();
                    break;

                case fieldNum(SMAServiceOrderTable, Priority) :
                    this.updatePriorityOnActivities();
                    break;

                case fieldNum(SMAServiceOrderTable, ActivityTypeId) :
                    this.updateActivityTypeOnActivities();
                    break;
            }
        }

        switch (_fieldId)
        {
            case fieldNum(SMAServiceOrderTable, SignOff) :
                if (this.RecId)
                {
                    this.updateSignOff();
                }
                else
                {
                    this.SignOffDateTime = DateTimeUtil::minValue();
                    this.SignOff = NoYes::No;
                }
                break;

            case fieldNum(SMAServiceOrderTable, CustAccount):
                this.ContactPersonId    = '';
                this.contactPersonName();
                this.updateCustAddress();
                break;

            case fieldNum(SMAServiceOrderTable, ProjId) :
                if (!this.CustAccount)
                {
                    this.CustAccount = ProjTable::find(this.ProjId).CustAccount;
                }

                this.updateProjAddress();
                break;

            case fieldNum(SMAServiceOrderTable, ServiceDateTime) :
                if (DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())) < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    // The preferred service time occurs in the past
                    warning("@SYS113254");
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateActions</Name>
				<Source><![CDATA[
    void preUpdateActions(boolean _activityHandling = true, boolean _isCalledFromBatch = false, smmActivities _templateActivity = null)
    {
        smmActivities           smmActivities;
        SMAServiceOrderTable    serviceOrderTableOrig;
        boolean                 createActivity = false;
        boolean                 advancePrompt;
        smmActivityId           oldActivityId;

        serviceOrderTableOrig = this.orig();
        if (_activityHandling && SMAParameters::find().ServiceOrderCreateActivity != smmCreateActivity::No)
        {
            advancePrompt  = (SMAParameters::find().ServiceOrderCreateActivity == smmCreateActivity::AdvancedPrompt);
            // Is the activity already attached to the service order
            if (this.ActivityNumber)
            {
                ttsbegin;

                // Special case - if advance prompt
                oldActivityId = (advancePrompt) ? this.orig().ActivityNumber : this.ActivityNumber;

                smmActivities = smmActivities::find(oldActivityId, true);

                // Is the required fields on the service order (and if advance prompt and activity already attached)
                if (this.WorkerResponsible && (!advancePrompt || oldActivityId == this.ActivityNumber ))
                {
                    if (smmActivities)
                    {
                        if (this.SignOff == NoYes::Yes)
                        {
                            // Close activity
                            smmActivities.Closed                 = NoYes::Yes;
                            smmActivities.DoneByWorker           = smmUtility::getCurrentContactWorker();
                            smmActivities.ActualEndDateTime      = DateTimeUtil::getSystemDateTime();
                            if (smmActivities.Category == smmActivityCategory::Task)
                            {
                                smmActivities.ActivityTaskTimeType = smmActivityTaskTimeType::Completed;
                                smmActivities.PercentageCompleted  = 100;
                            }
                            smmActivities.update();
                        }
                        else
                        {
                            // Is the employee still the same
                            if (smmActivities.ResponsibleWorker == this.WorkerResponsible)
                            {
                                // Update fields on the CRM activity
                                smmActivities.updateFromSMAServiceOrder(this);
                            }
                            else if (!advancePrompt)
                            // The responsible employee on the service order is changed
                            {
                                // Delete the attached activity for the old employee
                                smmActivities.delete(false);

                                // Create a new activity for the new responsible
                                createActivity = true;
                            }
                        }
                    }
                }
                else
                {
                    if (smmActivities)
                    {
                        // Clear the link to old activity
                        if (!advancePrompt || !this.WorkerResponsible)
                        {
                            this.ActivityNumber = '';
                        }

                        // Delete the attached activity
                        smmActivities.delete(false);
                    }
                }

                ttscommit;
            }
            else
            // Create activity for the service order if the service order has a responsible employee
            if (this.WorkerResponsible && this.Progress == SMAServiceOrderProgress::InProcess)
            {
                createActivity = this.orig().WorkerResponsible != this.WorkerResponsible;
            }

            if (createActivity && this.WorkerResponsible && this.Progress == SMAServiceOrderProgress::InProcess && !advancePrompt)
            {
                this.ActivityNumber = smmActivityCreate::createActivity(this,_isCalledFromBatch,_templateActivity).ActivityNumber;
            }
        }
        this.CalendarConflict =  !WorkCalendarDate::isDateOpen(SMAParameters::find().CalendarId, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.ServiceOrderId, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsibleFullName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full name of the worker that is responsible for the service order.
    /// </summary>
    /// <returns>
    /// A string that contains the name.
    /// </returns>
    public display DirPartyName responsibleFullName()
    {
        return HcmWorker::find(this.WorkerResponsible).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceAddress</Name>
				<Source><![CDATA[
    public display LogisticsAddressing serviceAddress()
    {
        return LogisticsPostalAddress::findRecId(this.ServicePostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceLevelAgreementStartDateTime</Name>
				<Source><![CDATA[
    display public SMASLAStartDateTime serviceLevelAgreementStartDateTime()
    {
        SMALatestCompletionDateTime  ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Find the latest start date and time
        ret = SMAServiceLevelAgreementLog::firstStartDateTime(this.ServiceOrderId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the <c>RecId</c> value of the <c>LogisticsLocation</c> table for the
    /// <c>ServicePostalAddress</c> table.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsLocationRecId</c> value of the <c>ServicePostalAddress</c> table.
    /// </returns>
    public LogisticsLocationRecId serviceLocation()
    {
        return LogisticsPostalAddress::getLocation(this.ServicePostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setServiceDate</Name>
				<Source><![CDATA[
    void setServiceDate()
    {
        SMAAgreementTable smaAgreementTable = SMAAgreementTable::find(this.AgreementId);

        // If 'today' is before Start date, we'll use Start date as Service date.
        if (smaAgreementTable && DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) < smaAgreementTable.StartDate)
        {
            this.ServiceDateTime = DateTimeUtil::newDateTime(smaAgreementTable.StartDate, 0);
        }
        else
        {
            this.ServiceDateTime = DateTimeUtil::getSystemDateTime();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>signOffServiceLines</Name>
				<Source><![CDATA[
    void signOffServiceLines()
    {
        SMAServiceOrderLine serviceOrderLine;

        ttsbegin;

        // update all lines with the same sign off vale as the service Order
        while select forupdate serviceOrderLine
            where serviceOrderLine.ServiceOrderId     == this.ServiceOrderId &&
                  serviceOrderLine.SignOff            != this.SignOff        &&
                  serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Created
        {
            serviceOrderLine.SignOff = this.SignOff;
            serviceOrderLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimatedCostAmount</Name>
				<Source><![CDATA[
    display CostAmount totalEstimatedCostAmount()
    {
        SMAServiceOrderLine serviceOrderLine;
        CostAmount           costAmount;

        // Estimate the cost prices on the lines

        while select forupdate serviceOrderLine
            where serviceOrderLine.ServiceOrderId == this.ServiceOrderId
        {
            costAmount += serviceOrderLine.costAmount();
        }
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimatedSalesAmount</Name>
				<Source><![CDATA[
    display SalesAmount totalEstimatedSalesAmount()
    {
        SMAServiceOrderLine serviceOrderLine;
        SalesAmount         salesAmount;

        // Estimate the cost prices on the lines

        while select forupdate serviceOrderLine
            where serviceOrderLine.ServiceOrderId == this.ServiceOrderId
        {
            salesAmount += serviceOrderLine.Qty * serviceOrderLine.ProjSalesPrice;
        }
        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _activityHandling = true, boolean _isCalledFromBatch = false, smmActivities _templateActivity = null, boolean updateLines = true)
    {
        SMAServiceOrderTable    serviceOrderTableOrig;
        boolean                 signOffUpdate = this.orig().SignOff != this.SignOff;

        if (this.SignOff && this.SignOffDateTime == DateTimeUtil::minValue())
        {
            this.SignOffDateTime = DateTimeUtil::utcNow();
        }
        else
        if (!this.SignOff)
        {
            this.SignOffDateTime = DateTimeUtil::minValue();
        }

        serviceOrderTableOrig = this.orig();
        this.preUpdateActions(_activityHandling, _isCalledFromBatch, _templateActivity);

        super();

        if (serviceOrderTableOrig.AgreementId != this.AgreementId)
        {
            this.updateAgreemenOnLines();
        }

        if (signOffUpdate && updateLines)
        {
            this.signOffServiceLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivityTypeOnActivities</Name>
				<Source><![CDATA[
    void updateActivityTypeOnActivities()
    {
        smmActivities               activities;
        smmActivityParentLinkTable  parentLink;

        ttsbegin;

        while select forupdate activities join parentLink
            where   activities.ActivityNumber       == parentLink.ActivityNumber &&
                    activities.Closed               == NoYes::No &&
                    parentLink.ParentType           == smmActivityParentType::ServiceOrder &&
                    parentLink.RefRecId             == this.RecId
        {
            activities.TypeId = this.ActivityTypeId;
            activities.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAgreemenOnLines</Name>
				<Source><![CDATA[
    // Update agreement id on service order lines
    void updateAgreemenOnLines()
    {
        SMAServiceOrderLine    serviceOrderLine;

        ttsbegin;

        while select forupdate serviceOrderLine where serviceOrderLine.ServiceOrderId == this.ServiceOrderId
        {
            serviceOrderLine.AgreementId = this.AgreementId;
            serviceOrderLine.AgreementLineNum = 0;
            serviceOrderLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCancelRevokeLines</Name>
				<Source><![CDATA[
    public void updateCancelRevokeLines(boolean _revoke = false)
    {
        SMAServiceOrderLine         serviceOrderLine;
        SMAServiceOrderProgress     serviceOrderProgress;
        boolean                     lineExist               = false;

        // check first that cancel action is valid for service order
        if (!_revoke && !SMAStageTable::find(this.StageId).StageCanCancel)
        {
            // Service order '%1' cannot be cancelled.
            throw error(strFmt("@SYS90091", this.ServiceOrderId));
        }

        ttsbegin;
        while select forupdate serviceOrderLine
            where serviceOrderLine.ServiceOrderId == this.ServiceOrderId
        {
            lineExist = true;

            if (_revoke && serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Canceled)
            {
                serviceOrderLine.revokeCancelLine();
            }

            if (!_revoke && serviceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Canceled)
            {
                serviceOrderLine.cancelLine();
            }
        }
        // set progress on service order
        serviceOrderProgress = (_revoke) ? SMAServiceOrderProgress::InProcess : SMAServiceOrderProgress::Canceled;

        // summarize progress based on service order line status
        if (lineExist)
        {
           this.updateProgress(serviceOrderProgress);
        }
        else
        {
            if (!_revoke)
            {
                if (this.existItemRequirement())
                {
                    throw error(strFmt("@SYS91981", this.ServiceOrderId));
                }
                else
                {
                    this.Progress = SMAServiceOrderProgress::Canceled;
                }
            }

            if (_revoke && this.Progress == SMAServiceOrderProgress::Canceled)
            {
                this.Progress = SMAServiceOrderProgress::InProcess;
            }
        }

        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustAddress</Name>
				<Source><![CDATA[
    public void updateCustAddress()
    {
        CustTable custTable;
        LogisticsLocation location;
        LogisticsPostalAddressRecId addressRecId;

        if (!this.existServiceAddress() && this.CustAccount)
        {
            custTable = CustTable::find(this.CustAccount);

            location = LogisticsLocationDefault::findSimpleDefaultByRoleType(custTable, LogisticsLocationRoleType::Service);
            addressRecId = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);

            this.ServicePostalAddress = addressRecId;
            this.AddressRefRecId = custTable.RecId;
            this.AddressRefTableId = custTable.TableId;

            if (!this.ServiceAddressName)
            {
                this.ServiceAddressName = custTable.name();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdvPromptActivity</Name>
				<Source><![CDATA[
    /* Call this before update for handling advanced prompt case.
       It should not be inside ttsbegin and ttscommit. */
    void updateFromAdvPromptActivity(SMAServiceOrderTable _orig = this.orig())
    {
        smmActivities       smmActivities;
        smmCreateActivity   smmCreateActivity;

        // If advanced prompt

        smmCreateActivity = SMAParameters::find().ServiceOrderCreateActivity;

        if (smmCreateActivity == smmCreateActivity::AdvancedPrompt || smmCreateActivity == smmCreateActivity::Prompt)
        {
            // If responsible was changed or there was no activity attached earlier
            if ( this.WorkerResponsible && ((this.WorkerResponsible != _orig.WorkerResponsible)))
            {
                smmActivities       = smmActivityCreate::createActivity(this);
                this.ActivityNumber = smmActivities.ActivityNumber;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePricesLines</Name>
				<Source><![CDATA[
    public void updatePricesLines()
    {
        SMAServiceOrderLine serviceOrderLine;

        // update the prices on the lines, only system created line s will be updated
        ttsbegin;

        while select forupdate serviceOrderLine
            where serviceOrderLine.ServiceOrderId == this.ServiceOrderId
            &&    serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Created
        {
            serviceOrderLine.ProjCostPrice  = serviceOrderLine.SMAServiceLineMap::projCostPrice();
            serviceOrderLine.ProjSalesPrice = serviceOrderLine.SMAServiceLineMap::projSalesPrice(serviceOrderLine.ProjCostPrice);

            serviceOrderLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriorityOnActivities</Name>
				<Source><![CDATA[
    void updatePriorityOnActivities()
    {
        smmActivities               activities;
        smmActivityParentLinkTable  parentLink;

        ttsbegin;

        update_recordset activities
            setting TaskPriority = this.Priority
            join parentLink
            where   activities.ActivityNumber       == parentLink.ActivityNumber &&
                    activities.Closed               == NoYes::No &&
                    parentLink.ParentType           == smmActivityParentType::ServiceOrder &&
                    parentLink.RefRecId             == this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProgress</Name>
				<Source><![CDATA[
    public void updateProgress(SMAServiceOrderProgress _progress = this.Progress)
    {
        SMAServiceOrderLine     serviceOrderLine;

        boolean                 isCanceled          = false;
        boolean                 isTransferred       = false;
        boolean                 isCreated           = false;

        // Here is the matrix of the Progress on the ServiceOrderTable
        //
        // Line(s)                          Order
        // Created  Transferred Canceled    InProgress  Transferred  Canceled
        //    X          -         -            X           -           -
        //    X          X         -            X           -           -
        //    X          -         X            X           -           -
        //    X          X         X            X           -           -
        //    -          X         -            -           X           -
        //    -          X         X            -           X           -
        //    -          -         X            -           -           x
        //
        // If Sales order exists (Item Req.)
        // - Stage : Open Order                 X           -           -
        // - Stage : Packingslip/Invoiced       -           X           -

        while select ServiceOrderId, ServiceOrderStatus
            from serviceOrderLine
            where serviceOrderLine.ServiceOrderId == this.ServiceOrderId
        {
            switch (serviceOrderLine.ServiceOrderStatus)
            {
                case SMAServiceOrderStatus::Canceled :
                    isCanceled = true;
                    break;

                case SMAServiceOrderStatus::Created  :
                    isCreated = true;
                    break;

                case SMAServiceOrderStatus::Posted   :
                    isTransferred = true;
                    break;

                default:
                    // Value out of range
                    throw error("@SYS27409");
            }
        }

        if (!isCreated && !isTransferred && isCanceled && this.existItemRequirement())
        {
            // Item requirements exist on service order %1. Service order cannot be canceled.
            throw error(strFmt("@SYS91981", this.ServiceOrderId));
        }

        this.Progress = _progress;

        if (isCreated)
        {
            this.Progress = SMAServiceOrderProgress::InProcess;
        }
        else
        {
            if (isTransferred)
            {
                this.Progress = SMAServiceOrderProgress::Transferred;
            }
            else
            {
                if (isCanceled)
                {
                    this.Progress = SMAServiceOrderProgress::Canceled;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjAddress</Name>
				<Source><![CDATA[
    public void updateProjAddress()
    {
        ProjTable projTable;
        LogisticsPostalAddress  postalAddress;

        if (this.ProjId)
        {
            projTable = ProjTable::find(this.ProjId);

            if (projTable.DeliveryLocation)
            {
                postalAddress                                    = LogisticsPostalAddress::findByLocation(projTable.DeliveryLocation);
                this.ServiceAddressName                          = postalAddress.displayLocationDescription();
                this.ServicePostalAddress                        = postalAddress.RecId;
                this.AddressRefRecId = projTable.RecId;
                this.AddressRefTableId = projTable.TableId;
            }
            else
            {
                // Default from customer
                this.updateCustAddress();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjIdLines</Name>
				<Source><![CDATA[
    public void updateProjIdLines()
    {
        SMAServiceOrderLine serviceOrderLine;
        ProjTable           projTable;

        projTable = ProjTable::find(this.ProjId);

        ttsbegin;
        // update the lines with the same value from the service order
        while select forupdate serviceOrderLine
            where serviceOrderLine.ServiceOrderId     == this.ServiceOrderId
               && serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Created
        {
            serviceOrderLine.ProjId                   = projTable.ProjId;
            serviceOrderLine.SMAServiceLineMap::initFromProjTable(projTable);

            serviceOrderLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceDateTimeOnActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the activities start/end datetime based on preferred service datetime
    /// </summary>
    /// <returns>
    /// true if it is updated; otherwise, false
    /// </returns>
    boolean updateServiceDateTimeOnActivities()
    {
        boolean                     isUpdated;
        smmActivities               activities;
        smmActivityParentLinkTable  parentLink;

        while select forupdate activities join parentLink
            where   activities.ActivityNumber       == parentLink.ActivityNumber &&
                    activities.Closed               == NoYes::No &&
                    parentLink.ParentType           == smmActivityParentType::ServiceOrder &&
                    parentLink.RefRecId             == this.RecId
        {
            activities.StartDateTime = this.ServiceDateTime;
            activities.findEndDateTimeBasedOnTotalWork();
            activities.update();
            isUpdated = true;
        }

        return isUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceLevelAgreementLog</Name>
				<Source><![CDATA[
    public void updateServiceLevelAgreementLog()
    {
        SMAServiceLevelAgreementLog     serviceLevelAgreementLog;
        SMAServiceLevelAgreementTable   serviceLevelAgreementTable;
        boolean                         checkIfDateIsOpen = true;
        SMASLAStartDateTime             startDateTime = DateTimeUtil::getSystemDateTime();

        // Insert a new entry in the time log
        ttsbegin;

        serviceLevelAgreementLog.clear();
        serviceLevelAgreementLog.ServiceOrderId = this.ServiceOrderId;
        serviceLevelAgreementLog.Status         = SMALogStatus::Open;

        serviceLevelAgreementTable = SMAServiceLevelAgreementTable::find(SMAAgreementTable::find(this.AgreementId).ServiceLevelAgreementId);

        if (serviceLevelAgreementTable.CalendarId)
        {
            serviceLevelAgreementLog.StartDateTime = WorkCalendar::findOpenDateTimeForward(serviceLevelAgreementTable.CalendarId, startDateTime, checkIfDateIsOpen);
        }
        else
        {
            serviceLevelAgreementLog.StartDateTime = startDateTime;
        }

        serviceLevelAgreementLog.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSignOff</Name>
				<Source><![CDATA[
    void updateSignOff()
    {
        if (this.SignOff == NoYes::No ||
            !SMAServiceLevelAgreementLogHelper::checkAndStopSLA(this.ServiceOrderId, this))
        {
            ttsbegin;
            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();
        ret = ret && this.checkStageAllowDelete() && this.checkNoActiveSalesLine();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             ret;
        SMAAgreementTable   agreementRecord;

        ret = super(_fieldIdToCheck);
        ret = ret && this.checkStageAllowModify();

        switch (_fieldIdToCheck)
        {
            case fieldNum(SMAServiceOrderTable, ProjId):
                ret = ret && this.checkProjId();
                break;

            case fieldNum(SMAServiceOrderTable, AgreementId):
                agreementRecord = SMAAgreementTable::find(this.AgreementId);
                if (agreementRecord.Suspended == NoYes::Yes)
                {
                    // You cannot  create Service orders on a suspended Service agreement
                    ret = checkFailed("@SYS105784");
                }
                if (agreementRecord.TemplateGroupId != '')
                {
                    // agreement template cannot be used on Service Order
                    ret = checkFailed("@SYS90377");
                }
                // check if project on the agreement is valid
                ret = ret && this.checkProjId(agreementRecord.ProjId);
                break;

            case fieldNum(SMAServiceOrderTable, ServiceDateTime):
                ret  = this.checkServiceDate();
                break;

            case fieldNum(SMAServiceOrderTable, WorkerPreferredTechnician) :
                if (ret && this.WorkerPreferredTechnician)
                {
                    ret = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(this.WorkerPreferredTechnician);
                    if (!ret)
                    {
                        error(strFmt("@SYS39817", HcmWorker::find(this.WorkerPreferredTechnician).PersonnelNumber));
                    }
                }
                break;
            case fieldNum(SMAServiceOrderTable, WorkerResponsible) :
                if (ret && this.WorkerResponsible)
                {
                    ret = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(this.WorkerResponsible);
                    if (!ret)
                    {
                        error(strFmt("@SYS39817", HcmWorker::find(this.WorkerResponsible).PersonnelNumber));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean         ret = true;
        SMAParameters   parameters = SMAParameters::find();
        HcmWorkerLookup workerLookupValidateActive = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany();

        this.CalendarConflict =  !WorkCalendarDate::isDateOpen(SMAParameters::find().CalendarId, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())));

        if (!parameters.UnattachedServiceOrder)
        {
            if (!this.AgreementId)
            {
                ret = checkFailed("@SYS91980");
            }
        }
        else
        {
            if (!this.ProjId)
            {
                ret = checkFailed("@SYS37928");
            }
        }

        ret = ret && super();

        ret = ret && this.checkProjId();
        ret = ret && this.checkServiceDate();

        if (ret && this.WorkerPreferredTechnician)
        {
            ret = workerLookupValidateActive.validateWorker(this.WorkerPreferredTechnician);
            if (!ret)
            {
                // The selected preferred technician is terminated and cannot be used
                ret = checkFailed("@SYS107366");
            }
        }

        if (ret && this.WorkerResponsible)
        {
            ret = workerLookupValidateActive.validateWorker(this.WorkerResponsible);
            if (!ret)
            {
                // The selected service responsible is terminated and cannot be used
                ret = checkFailed("@SYS111570");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistPayrollServiceOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// check whether specified ServiceOrder record exists in table SMAServiceOrderTable
    /// </summary>
    /// <param name="_serviceOrderid">
    /// a value of ServiceOrderId field
    /// </param>
    /// <param name="_projectId">
    /// a value of ProjId field
    /// </param>
    /// <param name="_progress">
    /// a value of Progress field
    /// </param>
    /// <returns>
    /// returns true if specified service order record exists, otherwise false;
    /// </returns>
    /// <remarks>
    /// this method is for ServiceOrderId validation in payroll data entry, should match all three specified values
    /// </remarks>
    static boolean checkExistPayrollServiceOrderId(SMAServiceOrderId          _serviceOrderid,
                                                   ProjId                     _projectId,
                                                   SMAServiceOrderProgress    _progress = SMAServiceOrderProgress::InProcess)
    {
        SMAServiceOrderTable serviceOrder;

        if (_projectId)
        {
            select firstonly RecId from serviceOrder
                where serviceOrder.ServiceOrderId   == _serviceOrderid &&
                      serviceOrder.ProjId           == _projectId &&
                      serviceOrder.Progress         == _progress;
        }
        else
        {
            select firstonly RecId from serviceOrder
                where serviceOrder.ServiceOrderId   == _serviceOrderid &&
                      serviceOrder.Progress         == _progress;
        }

        return (serviceOrder.RecId) ? true : checkFailed(strFmt("@GLS92381", _serviceOrderid));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSeq</Name>
				<Source><![CDATA[
    public static boolean checkNumberSeq()
    {
        NumberSequenceTable numSeq;
        boolean             ret     = true;

        numSeq = SMAParameters::numRefServiceOrderId().numberSequenceTable();
        if (!numSeq)
        {
            // Number sequence for the reference '%1' in parameters in the '%2' module has not been set up.
            ret = checkFailed(strFmt("@SYS53911", "@SYS79051", "@SYS90857"));
        }
        else
        {
            if (numSeq.Manual==NoYes::Yes)
            {
                ret = checkFailed("@SYS97544");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivitiesForServiceOrderLines</Name>
				<Source><![CDATA[
    public static void createActivitiesForServiceOrderLines(SMAServiceOrderId _serviceOrder, smmActivityPhaseId _phaseId)
    {
        SMAServiceOrderLine     serviceOrderLine;

        ttsbegin;

        while select forupdate serviceOrderLine where serviceOrderLine.ServiceOrderId == _serviceOrder && serviceOrderLine.TransactionType == SMATransactionType::Hour && serviceOrderLine.ActivityId == ''
        {
            serviceOrderLine.createUpdateActivity(_phaseId);
            serviceOrderLine.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(SMAServiceOrderId _serviceOrderId)
    {
        return _serviceOrderId && (select firstonly smaServiceOrderTable
                                    index hint ServiceOrderIdx
                                    where smaServiceOrderTable.ServiceOrderId == _serviceOrderId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SMAServiceOrderTable find(SMAServiceOrderId   _serviceOrderId,
                                            boolean             _forupdate = false,
                                            ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        SMAServiceOrderTable   serviceOrderTable = null;

        if (_serviceOrderId)
        {
            if (_forupdate)
        {
            serviceOrderTable.selectForUpdate(_forupdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                    serviceOrderTable.concurrencyModel(_concurrencyModel);
            }

            select firstonly serviceOrderTable
                index hint ServiceOrderIdx
                where serviceOrderTable.ServiceOrderId == _serviceOrderId;
        }

        return serviceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLineActivityId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a service order by an activity ID that is related to one of the service order lines.
    /// </summary>
    /// <param name="_activityNumber">
    ///    The activity number.
    /// </param>
    /// <param name="_checkRecordLevelSecurity">
    ///    A Boolean value that indicates whether record level security should be verified.
    /// </param>
    /// <returns>
    ///    A record in the <c>SMAServiceOrderTable</c> table; otherwise, an empty record.
    /// </returns>
    public static SMAServiceOrderTable findByLineActivityId(smmActivityNumber _activityNumber, boolean _checkRecordLevelSecurity = false)
    {
        SMAServiceOrderLine     serviceOrderLine;
        SMAServiceOrderTable    serviceOrderTable;

        serviceOrderLine.recordLevelSecurity(_checkRecordLevelSecurity);
        select firstonly ServiceOrderId from serviceOrderLine where serviceOrderLine.ActivityId == _activityNumber;

        serviceOrderTable.recordLevelSecurity(_checkRecordLevelSecurity);
        select firstonly serviceOrderTable where serviceOrderTable.ServiceOrderId == serviceOrderLine.ServiceOrderId;

        return serviceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAgreementIdQuery</Name>
				<Source><![CDATA[
    public static Query lookupAgreementIdQuery(CustAccount _custAcc)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource1;
        QueryBuildDataSource    queryBuildDataSource2;
        QueryBuildRange         queryBuildRange1;
        QueryBuildRange         queryBuildRange2;

        query = new Query();

        queryBuildDataSource1 = query.addDataSource(tableNum(SMAAgreementTable));
        queryBuildRange1      = queryBuildDataSource1.addRange(fieldNum(SMAAgreementTable, Suspended));
        queryBuildRange1.value(SysQuery::value(NoYes::No));
        queryBuildRange1.status(RangeStatus::Hidden);

        queryBuildRange1      = queryBuildDataSource1.addRange(fieldNum(SMAAgreementTable, TemplateGroupId));
        queryBuildRange1.value(SysQuery::valueEmptyString());
        queryBuildRange1.status(RangeStatus::Hidden);

        if (_custAcc)
        {
            queryBuildDataSource2 = queryBuildDataSource1.addDataSource(tableNum(ProjTable));
            queryBuildDataSource2.relations(true);
            queryBuildRange2     = queryBuildDataSource2.addRange(fieldNum(ProjTable, CustAccount));
            queryBuildRange2.value(SysQuery::value(_custAcc));
            queryBuildRange2.status(RangeStatus::Hidden);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPayrollServiceOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// custom lookup of ServiceOrderId in SMAServiceOrderTable table
    /// </summary>
    /// <param name="_formControl">
    /// FormControl object
    /// </param>
    /// <param name="_projectId">
    /// a value of ProjId field
    /// </param>
    /// <param name="_progress">
    /// a value of Progress field
    /// </param>
    /// <remarks>
    /// custom lookup for payroll data entry, use projId and Progress == InProgress as filters
    /// </remarks>
    public static void lookupPayrollServiceOrderId(FormControl             _formControl,
                                            ProjId                  _projectId,
                                            SMAServiceOrderProgress _progress = SMAServiceOrderProgress::InProcess)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsServiceOrder;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SMAServiceOrderTable), _formControl);

        // columns shows in lookup list
        sysTableLookup.addLookupfield(fieldNum(SMAServiceOrderTable, ServiceOrderId));
        sysTableLookup.addLookupfield(fieldNum(SMAServiceOrderTable, AgreementId));

        // create query for lookup
        qbdsServiceOrder = query.addDataSource(tableNum(SMAServiceOrderTable));
        qbdsServiceOrder.addSortField(fieldNum(SMAServiceOrderTable, ServiceOrderId));

        qbdsServiceOrder.addRange(fieldNum(SMAServiceOrderTable, ProjId)).value(queryValue(_projectId));
        qbdsServiceOrder.addRange(fieldNum(SMAServiceOrderTable, Progress)).value(queryValue(_progress));

        // perform lookup
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjIdQuery</Name>
				<Source><![CDATA[
    public static Query lookupProjIdQuery(CustAccount _custAcc)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource1;
        QueryBuildRange         queryBuildRange1;
        CustAccount             custAcc;

        #define.blank('')

        query = new Query();

        if (_custAcc)
        {
            custAcc = _custAcc;
        }

        queryBuildDataSource1 = query.addDataSource(tableNum(ProjTable));
        queryBuildDataSource1.relations(true);

        queryBuildRange1 = queryBuildDataSource1.addRange(fieldNum(ProjTable, Status));
        queryBuildRange1.value(strFmt('%1, %2, %3, %4', SysQuery::value(ProjStatus::Created),
                                                        SysQuery::value(ProjStatus::Estimated),
                                                        SysQuery::value(ProjStatus::InProcess),
                                                        SysQuery::value(ProjStatus::Scheduled)));
        queryBuildRange1.status(RangeStatus::Hidden);

        if (custAcc != #blank)
        {
            queryBuildRange1 = queryBuildDataSource1.addRange(fieldNum(ProjTable, CustAccount));
            queryBuildRange1.value(SysQuery::value(SysQuery::value(custAcc)));
            queryBuildRange1.status(RangeStatus::Hidden);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncomingWebOrders</Name>
				<Source><![CDATA[
    public static void updateIncomingWebOrders(container _tmpContainer)
    {
        SMAServiceOrderTable    smaServiceOrderTable;
        int                     counter;

        if (conLen(_tmpContainer))
        {
            ttsbegin;
            for (counter = 1;counter <= conLen(_tmpContainer);counter++)
            {
                smaServiceOrderTable = SMAServiceOrderTable::find(conPeek(_tmpContainer,counter),true);
                smaServiceOrderTable.IncomingWebOrder = NoYes::No;
                smaServiceOrderTable.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceObjectRelationFromAgreement</Name>
				<Source><![CDATA[
	/// <summary>
	/// Create service object relation between service order and service object from linked service agreement.
	/// </summary>
	public void createServiceObjectRelationFromAgreement()	
    {
	    SMAServiceObjectRelation smaServiceObjectRelation;
	    if (this.AgreementId && !this.RecId)	
        {
			while select ServiceObjectId, ServiceObjectRelationId from smaServiceObjectRelation
	            where smaServiceObjectRelation.RelTableId  == tableNum(SMAAgreementTable) &&
                      smaServiceObjectRelation.RelKeyId    == this.AgreementId            
            {
	            SMAServiceObjectRelation::createObjectRelation(smaServiceObjectRelation.ServiceObjectId, this.ServiceOrderId, this.TableId, smaServiceObjectRelation.ServiceObjectRelationId, true);	
            }
        }       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS122717</DeveloperDocumentation>
	<FormRef>SMAServiceOrderTable</FormRef>
	<Label>@SYS79051</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ServiceOrderId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ServiceOrderIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>ServiceOrderIdx</PrimaryIndex>
	<ReplacementKey>ServiceOrderIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SMARepairLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>SMARepairLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SMAServiceOrderLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SMAServiceOrderLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SMAServiceOrderReason</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SMAServiceOrderReason</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SMAServiceTaskRelation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SMAServiceTaskRelation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activty</Name>
			<Label>@SYS54618</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerPreferredTechnician</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarConflict</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdministrationEp</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerResponsible</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarConflict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertifiedPayroll</Name>
			<Label>@GLS94038</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertifiedPayroll</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultActivityType</Name>
			<Label>@SYS107413</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisplayAddress</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServicePostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FinishNoLaterThan</Name>
			<Label>@SYS104864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayLatestCompletionDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignOffDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListPage</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarConflict</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarConflict</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relation</Name>
			<Label>@SYS23779</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceAddress</Name>
			<Label>@SYS88743</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServicePostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceDate</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceLevelAgreement</Name>
			<Label>@SYS102596</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceLevelAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLevelAgreementStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Compliance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceOrder</Name>
			<Label>@SYS79077</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncomingWebOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeLogStarted</Name>
			<Label>@SYS104863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>serviceLevelAgreementStartDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Progress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS107364</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAAgreementId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarConflict</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS90870</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CertifiedPayroll</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PayrollAdministration</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS94038</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Compliance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceLevelAgreementCompliance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncomingWebOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS103408</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Origin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMAServiceOrderOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmActivityPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Progress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMAServiceOrderProgress</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceAddressName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsServiceName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ServiceDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAPreferredServiceDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceLevelAgreement</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceLevelAgreementId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceLevelAgreementStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceOrderSLAStatus</ExtendedDataType>
			<EnumType>SMALogStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceOrderId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServicePostalAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignOff</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS90738</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>SignOffDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASignOffDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StageId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerPreferredTechnician</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SMAWorkerPreferredTechnician</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerResponsible</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SMAWorkerServiceResponsible</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<Null>Yes</Null>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ServiceOrderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceOrderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProgressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Progress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ServicePostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServicePostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>ServiceOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker_PreferredTechnician</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerPreferredTechnician</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerPreferredTechnician</Name>
					<Field>WorkerPreferredTechnician</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker_Responsible</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerResponsible</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerResponsible</Name>
					<Field>WorkerResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ServicePostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SMAServiceOrderTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServicePostalAddress</Name>
					<Field>ServicePostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementId</Name>
					<Field>AgreementId</Field>
					<RelatedField>AgreementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AgreementIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAServiceLevelAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceLevelAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceLevelAgreement</Name>
					<Field>ServiceLevelAgreement</Field>
					<RelatedField>ServiceLevelAgreementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ServiceLevelAgreementIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceObjectRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceObjectRelation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceObject</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceOrderId</Name>
					<Field>ServiceOrderId</Field>
					<RelatedField>RelKeyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>RelTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceTaskRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceTaskRelation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceTask</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceOrderId</Name>
					<Field>ServiceOrderId</Field>
					<RelatedField>RelKeyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>RelTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAStageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAStageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StageId</Name>
					<Field>StageId</Field>
					<RelatedField>StageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StageIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivityTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivityTypeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityTypeId</Name>
					<Field>ActivityTypeId</Field>
					<RelatedField>TypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>