<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclatureSegmentConfigGroupItemName</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResNomenclatureSegmentConfigGroupItemName extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSegmentValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentValue(EcoResNomenclatureInput _input)
    {
        ConfigValues values = _input.parmConfigValues();
        for (int i=1; i<=conLen(values); i++)
        {
            container value = conPeek(values, i);
            ConfigGroupId curConfigGroupId = conPeek(value, ConfigChoice::conGroupIdx());
            ItemId curItemId = conPeek(value, ConfigChoice::conItemIdx());
            
            if (curItemId && curConfigGroupId == this.ItemNameConfigGroupId)
            {
                RefRecId productId      = EcoResProduct::findByProductNumber(curItemId).RecId;
                LanguageId sysLanguage  = SystemParameters::getSystemLanguageId();

                return EcoResProductTranslation::findByProductLanguage(productId, sysLanguage).Name;

            }            
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSegmentAllowedForNomenclatureType</Name>
				<Source><![CDATA[
    public static boolean isSegmentAllowedForNomenclatureType(TableId _nomenclatureType)
    {
        return (_nomenclatureType == tableNum(EcoResDimBasedConfigurationNomenclature));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ItemNameConfigGroupDataAreaId = curExt2dataareaid(tableNum(ConfigGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentSampleValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentSampleValue(EcoResNomenclatureInput _input)
    {
        EcoResNomenclatureOutput ret = "@SYS7407";

        InventTable inventTable;
        inventTable = this.getFirstOrNull(inventTable);

        if (inventTable)
        {
            RefRecId productId      = EcoResProduct::findByProductNumber(inventTable.ItemId).RecId;
            LanguageId sysLanguage  = SystemParameters::getSystemLanguageId();
            Name configName         = EcoResProductTranslation::findByProductLanguage(productId, sysLanguage).Name;

            if (configName)
            {
                _input.parmDimensionValueName(InventProductDimensionConfig::getInstance(), configName);
                ret = this.getSegmentValue(_input);
            }
        }
                       
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        
        if(ret)
        {
            changecompany(this.ItemNameConfigGroupDataAreaId)
            {
                if (!ConfigGroup::exist(this.ItemNameConfigGroupId))
                {
                    ret = checkFailed(strFmt("@SCM:TableFieldValidation", this.ItemNameConfigGroupId, '@SYS6126', '@SYS6316'));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Config</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResNomenclatureSegmentConfigGroupItemIdDevDoc</DeveloperDocumentation>
	<Label>@SCM:EcoResNomenclatureSegmentConfigGroupItemName</Label>
	<TableGroup>Group</TableGroup>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>EcoResNomenclatureSegment</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemNameConfigGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfigGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemNameConfigGroupDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConfigGroup</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemNameConfigGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemNameConfigGroupDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResNomenclatureSegment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResNomenclatureSegment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ConfigGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ConfigGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemNameConfigGroupId</Name>
					<Field>ItemNameConfigGroupId</Field>
					<RelatedField>ConfigGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>