<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoSubLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoSubLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCustomsBillOfEntryTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>VendInvoiceInfoSubLine</c> table buffer based on a Bill of Entry line.
    /// </summary>
    /// <param name="_customsVendBOETrans">
    ///    The <c>CustomsVendBOETrans_IN</c> buffer to initialize from.
    /// </param>
    void initFromCustomsBillOfEntryTrans_IN(CustomsVendBOETrans_IN _customsVendBOETrans)
    {
        this.JournalRefRecId = _customsVendBOETrans.RecId;
        this.JournalRefTableId = _customsVendBOETrans.TableId;

        this.InventNow = _customsVendBOETrans.BillOfEntryQty;
        this.ReceiveNow = _customsVendBOETrans.BillOfEntryQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLine</Name>
				<Source><![CDATA[
    public void initFromLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        this.ParmId = _vendInvoiceInfoLine.ParmId;
        this.LineRefRecId = _vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>VendInvoiceInfoSubLine</c> buffer that is based on a packing slip line.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    /// The <c>VendPackingSlipTrans</c> buffer from which to initialize the values.
    /// </param>
    void initFromVendPackingSlipTrans(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        this.JournalRefRecId = _vendPackingSlipTrans.RecId;
        this.JournalRefTableId = _vendPackingSlipTrans.TableId;

        this.InventNow = _vendPackingSlipTrans.InventQty;
        this.ReceiveNow = _vendPackingSlipTrans.Qty;
        this.DocumentId = _vendPackingSlipTrans.PackingSlipId;

        this.PdsCWInventNow = _vendPackingSlipTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        #VendInvoiceFaults

        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendInvoiceInfoSubLine, ReceiveNow):
                    if (this.ReceiveNow == 0.0)
                    {
                        AifFault::checkFailedLogFault("@SYS24140", #SubLineQtyCannotBeZero);
                        isValid = false;
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the invoice subline occurs in the table with the specified
    ///    <c>LineRefRecId</c>,<c>JournalRefTableId</c>, and <c>JournalRefRecId</c> fields.
    /// </summary>
    /// <param name="_lineRefRecId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <param name="_journalRefTableId">
    ///    The <c>JournalRefTableId</c> value of the record to check for existence.
    /// </param>
    /// <param name="_journalRefRecId">
    ///    The <c>JournalRefRecId</c> value of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if a record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PurchParmLineRefRecId _lineRefRecId,
                            PurchJournalLinkRefTableId _journalRefTableId,
                            PurchJournalLinkRefRecId _journalRefRecId)
    {
        if (_lineRefRecId && _journalRefTableId && _journalRefRecId)
        {
            return (select firstonly RecId from vendInvoiceInfoSubLine
                        where vendInvoiceInfoSubLine.LineRefRecId == _lineRefRecId
                            && vendInvoiceInfoSubLine.JournalRefTableId == _journalRefTableId
                            && vendInvoiceInfoSubLine.JournalRefRecId == _journalRefRecId).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForLine</Name>
				<Source><![CDATA[
    public static boolean existForLine(RefRecId _refRecId)
    {
        if (!_refRecId)
        {
            return false;
        }

        return (select firstonly RecId from vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnmatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an unmatched <c>VendInvoiceInfoSubLine</c> records exist.
    /// </summary>
    /// <param name="_parmId">
    /// The parameter ID in the <c>VendInvoiceInfoTable</c> table which identifies the invoice.
    /// </param>
    /// <param name="_tableRefId">
    /// The parameter ID in the <c>VendInvoiceInfoTable</c> table which identifies the invoice.
    /// </param>
    /// <returns>
    /// true if an unmatched <c>VendInvoiceInfoSubLine</c> records exist; otherwise, false.
    /// </returns>
    public static boolean existUnmatched(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        select firstonly RecId from vendInvoiceInfoSubLine
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoSubLine.JournalRefRecId == 0 // not matched yet
                    && vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId
                    && vendInvoiceInfoLine.ParmId == _parmId
                    && vendInvoiceInfoLine.TableRefId == _tableRefId;

        return (vendInvoiceInfoSubLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsUnpostedForPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an invoice subline exists for the specified packing slip line.
    /// </summary>
    /// <param name="_journalRefTableId">
    ///    The packing slip line table id.
    /// </param>
    /// <param name="_journalRefRecId">
    ///    The packing slip line record id.
    /// </param>
    /// <returns>
    ///    true if a record exists; otherwise, false.
    /// </returns>
    public static boolean existsUnpostedForPackingSlip(PurchJournalLinkRefTableId _journalRefTableId, PurchJournalLinkRefRecId _journalRefRecId)
    {
        VendInvoiceInfoTable header;
        VendInvoiceInfoLine line;
        VendInvoiceInfoSubLine subLine;

        select firstOnly RecId from subLine
            where subLine.JournalRefTableId == _journalRefTableId &&
                  subLine.JournalRefRecId == _journalRefRecId
            exists join line
                where line.RecId == subLine.LineRefRecId
            exists join header
                where header.ParmId == line.ParmId &&
                      header.TableRefId == line.TableRefId &&
                     (header.ParmJobStatus == ParmJobStatus::Waiting ||
                      header.ParmJobStatus == ParmJobStatus::ContainErrors);

        return subLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the invoice sub line for the given <c>LineRefRecId</c>,<c>JournalRefTableId</c>,
    ///    and <c>JournalRefRecId</c> fields.
    /// </summary>
    /// <param name="_lineRefRecId">
    ///    The <c>LineRefRecId</c> value to check.
    /// </param>
    /// <param name="_journalRefTableId">
    ///    The <c>JournalRefTableId</c> value to check.
    /// </param>
    /// <param name="_journalRefRecId">
    ///    The <c>JournalRefRecId</c> value to check.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    ///    A single <c>VendInvoiceInfoSubLine</c> table record.
    /// </returns>
    /// <remarks>
    ///    If the record does not exist, an empty <c>VendInvoiceInfoSubLine</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoSubLine find(PurchParmLineRefRecId _lineRefRecId,
                                          PurchJournalLinkRefTableId _journalRefTableId,
                                          PurchJournalLinkRefRecId _journalRefRecId,
                                          boolean _forUpdate = false,
                                          ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        if (_lineRefRecId && _journalRefTableId && _journalRefRecId)
        {
            if (_forUpdate)
            {
                vendInvoiceInfoSubLine.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoSubLine.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _lineRefRecId
                    && vendInvoiceInfoSubLine.JournalRefTableId == _journalRefTableId
                    && vendInvoiceInfoSubLine.JournalRefRecId == _journalRefRecId;
        }

        return vendInvoiceInfoSubLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyMatchAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves catch weight quantity that is not matched to packing slips
    ///     and is available for matching for a particular <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineRefRecId">
    ///     RecID of related <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    ///     Catch weight quantity.
    /// </returns>
    public static PdsCWInventQty pdsCWQtyMatchAvailable(VendInvoiceInfoLineRefRecId _vendInvoiceInfoLineRefRecId)
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        
        if (VendBOEInvoiceCreateMatchPackingSlipTrans_INFlight::instance().isEnabled())
        {
            select sum(PdsCWInventNow) from vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLineRefRecId
                    && vendInvoiceInfoSubLine.JournalRefRecId != 0
                    && vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans); // exclude those that are not yet matched to packing slips
        }
        else
        {
            select sum(PdsCWInventNow) from vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLineRefRecId
                    && vendInvoiceInfoSubLine.JournalRefRecId != 0; // exclude those that are not yet matched to packing slips
        }

        return vendInvoiceInfoSubLine.PdsCWInventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyMatchAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves purchase quantity that is not matched to packing slips
    ///     and is available for matching for a particular <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineRefRecId">
    ///     RecID of related <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    ///     Purchase quantity.
    /// </returns>
    public static PurchQty purchQtyMatchAvailable(VendInvoiceInfoLineRefRecId _vendInvoiceInfoLineRefRecId)
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        if (VendBOEInvoiceCreateMatchPackingSlipTrans_INFlight::instance().isEnabled())
        {
            select sum(ReceiveNow) from vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLineRefRecId
                    && vendInvoiceInfoSubLine.JournalRefRecId != 0
                    && vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans); // exclude those that are not yet matched to packing slips
        }
        else
        {
            select sum(ReceiveNow) from vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLineRefRecId
                    && vendInvoiceInfoSubLine.JournalRefRecId != 0; // exclude those that are not yet matched to packing slips
        }

        return vendInvoiceInfoSubLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLines</Name>
				<Source><![CDATA[
    public static NumberOfRecords subLines(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        // PO Invoice Refactoring: this is a weird name for what this method does. Consider renaming it.
        return (select count(RecId) from vendInvoiceInfoSubLine
                    where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLine.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLinesTable</Name>
				<Source><![CDATA[
    static NumberOfRecords subLinesTable(VendInvoiceInfoTable _vendInvoiceInfoTable, boolean _skipExactCount = false)
    {
        NumberOfRecords i;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        // PO Invoice Refactoring: this is a weird name for what this method does. Consider renaming it.
        while select RecId from vendInvoiceInfoSubLine
            group by DocumentId
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLine.RecId == vendInvoiceInfoSubLine.LineRefRecId &&
                vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTable.TableRefId &&
                vendInvoiceInfoLine.ParmId == _vendInvoiceInfoTable.ParmId
        {
            i++;
            if (_skipExactCount && i > 1)
            {
                break;
            }
        }

        return i;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpostedInvoiceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of unposted invoice quantities for the given inventory transaction ID.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID that is used to find unposted invoices.
    /// </param>
    /// <returns>
    /// The sum of unposted invoice quantities in inventory, purchasing, and catch weight units.
    /// </returns>
    public static container unpostedInvoiceQty(InventTransId _inventTransId)
    {
        VendInvoiceInfoTable header;
        VendInvoiceInfoLine line;
        VendInvoiceInfoSubLine subLine;

        select sum(PdsCWInventNow), sum(InventNow), sum(ReceiveNow) from subLine
            exists join line
                where line.RecId == subLine.LineRefRecId &&
                    line.InventTransId == _inventTransId
            exists join header
                where header.ParmId == line.ParmId &&
                    header.TableRefId == line.TableRefId &&
                    header.ParmJobStatus != ParmJobStatus::Executed;

        return [subLine.InventNow, subLine.ReceiveNow, subLine.PdsCWInventNow];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ParmId</c> of <c>VendInvoiceInfoSubLine</c> records for a given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> used to determine which <c>VendInvoiceInfoSubLine</c> to move.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfoSubLine</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    public static void updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        vendInvoiceInfoSubLine.skipDataMethods(true);
        vendInvoiceInfoSubLine.skipEvents(true);
        vendInvoiceInfoSubLine.skipDatabaseLog(true);

        update_recordset vendInvoiceInfoSubLine
        setting ParmId = _newParmId
        exists join vendInvoiceInfoLine
            where vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId
                && vendInvoiceInfoLine.ParmId == _parmId
                && vendInvoiceInfoLine.TableRefId == _tableRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126108</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS109518</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>DocumentId</TitleField1>
	<TitleField2>ReceiveNow</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RefIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventNow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchJournalLinkRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>JournalRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchJournalLinkRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceInfoLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventNow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LineRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LineRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Common</Name>
			<EntityRelationshipRole>@SYS126109</EntityRelationshipRole>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendInvoiceInfoSubLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRefTableId</Name>
					<Field>JournalRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRefRecId</Name>
					<Field>JournalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125149</EntityRelationshipRole>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoLine</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendInvoiceInfoSubLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineRefRecId</Name>
					<SourceEDT>VendInvoiceInfoLineRefRecId</SourceEDT>
					<Field>LineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>