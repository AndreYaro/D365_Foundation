<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSToteReuseTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSToteReuseTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record for a work unit if not created before.
    /// </summary>
    /// <param name="_workId">
    /// Id of the work unit.
    /// </param>
    /// <param name="_toteId">
    /// Tote id of the record created.
    /// </param>
    /// <returns>
    /// The created <c>WHSToteReuseTable</c> record.
    /// </returns>
    public static WHSToteReuseTable addNewRecord(WHSWorkId _workId, WHSToteId _toteId)
    {
        WHSToteReuseTable   toteReuseTable;

        select firstonly RecId from toteReuseTable
			where toteReuseTable.WorkId == _workId;

        // Don't create more than one record for a work unit
        if (toteReuseTable.RecId == 0)
        {
            ttsbegin;
            toteReuseTable.clear();
            toteReuseTable.WorkId    = _workId;
            toteReuseTable.ToteId    = _toteId;
            toteReuseTable.TmpToteId = WHSToteReuseTable::getTmpToteId(_workId, _toteId);

            if (!toteReuseTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSToteReuseTable)));
            }
            else
            {
                toteReuseTable.insert();
            }
            ttscommit;
        }

        return toteReuseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpToteId</Name>
				<Source><![CDATA[
    private static WHSToteId getTmpToteId(WHSWorkId _workId, WHSToteId _toteId)
    {
        WHSToteId ret = WHSToteReuseTable::getTmpToteIdSameShipmentDiffWork(_workId, _toteId);

        return ret ? ret : NumberSeq::newGetNum(WHSParameters::numRefWHSTmpToteId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpToteIdSameShipmentDiffWork</Name>
				<Source><![CDATA[
    private static WHSToteId getTmpToteIdSameShipmentDiffWork(WHSWorkId _workId, WHSToteId _toteId)
    {
        WHSToteReuseTable toteReuseSameShipment;
        WHSWorkLine workline;
        WHSWorkLine worklineSameShipment;

        select firstonly TableId from workline
            where workline.WorkId == _workId
            join TableId from worklineSameShipment
				where worklineSameShipment.ShipmentId == workline.ShipmentId
                   && worklineSameShipment.WorkId != workline.WorkId
            join TmpToteId from toteReuseSameShipment
				where toteReuseSameShipment.ToteId == _toteId
                   && toteReuseSameShipment.WorkId == worklineSameShipment.WorkId;

        return toteReuseSameShipment.TmpToteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsToteReuseTable</c> record exists.
    /// </summary>
    /// <param name="_toteId">
    /// Tote id of the record.
    /// </param>
    /// <param name="_workId">
    /// Work id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSToteId _toteId, WHSWorkId _workId)
    {
        return (_toteId && _workId) &&
                (select firstonly whsToteReuseTable
                 where whsToteReuseTable.ToteId    == _toteId   &&
                       whsToteReuseTable.WorkId    == _workId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>whsToteReuseTable</c> record with given parameters.
    /// </summary>
    /// <param name="_toteId">
    /// Tote id of the record.
    /// </param>
    /// <param name="_workId">
    /// Work id of the record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSToteReuseTable find(
        WHSToteId _toteId,
        WHSWorkId _workId,
        boolean   _forUpdate = false)
    {
        WHSToteReuseTable   toteReuseTable;

        if (_toteId && _workId)
        {
            toteReuseTable.selectForUpdate(_forUpdate);

            select firstonly toteReuseTable
                where toteReuseTable.ToteId  == _toteId  &&
                      toteReuseTable.WorkId  == _workId;
        }

        return toteReuseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimLicensePlateIdToTmpToteIdIfFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ToteId as license plate on the <c>InventDim</c> if found on the work.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    public static void setInventDimLicensePlateIdToTmpToteIdIfFound(InventDim _inventDim)
    {
        WHSToteId tmpToteId = WHSToteReuseTable::getTemporaryToteIdForInventDim(_inventDim);

        if (tmpToteId)
        {
            _inventDim.LicensePlateId = tmpToteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimLicensePlateIdToTmpToteIdIfFoundForWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ToteId as license plate on the <c>InventDim</c> if found on the work.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    /// <param name = "_workLine">The work line for which tote id was applied.</param>
    [Hookable(false)]
    internal static void setInventDimLicensePlateIdToTmpToteIdIfFoundForWorkLine(InventDim _inventDim, WHSWorkLine _workLine)
    {
        WHSToteId tmpToteId = WHSToteReuseTable::getTemporaryToteIdForInventDimAndWorkline(_inventDim, _workline);

        if (tmpToteId)
        {
            _inventDim.LicensePlateId = tmpToteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryToteIdForInventDimAndWorkline</Name>
				<Source><![CDATA[
    private static WHSToteId getTemporaryToteIdForInventDimAndWorkline(InventDim _inventDim, WHSWorkLine _workLine)
    {
        WHSToteId tempToteId;

        WHSLocationProfile locationProfile = WHSLocationProfile::find(_inventDim.wmsLocation().LocProfileId);

        if (locationProfile.LPControlled)
        {
            WHSWorkTable workTable = WHSWorkTable::find(_workLine.WorkId);

            tempToteId = WHSToteReuseTable::find(workTable.TargetLicensePlateId, _workLine.WorkId).TmpToteId;
        }

        return tempToteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryToteIdForInventDim</Name>
				<Source><![CDATA[
    private static WHSToteId getTemporaryToteIdForInventDim(InventDim _inventDim)
    {
        WHSToteId tempToteId;

        WHSLocationProfile locationProfile = WHSLocationProfile::find(_inventDim.wmsLocation().LocProfileId);

        if (locationProfile.LPControlled)
        {
            WHSWorkTable workTable = WHSWorkTable::findByLicensePlateForUpdate(_inventDim.LicensePlateId, true, WHSWorkStatus::Closed);

            tempToteId = WHSToteReuseTable::find(workTable.TargetLicensePlateId, workTable.WorkId).TmpToteId;
        }

        return tempToteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isToteReuseEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the early tote reuse is enabled and we are putting to a packing station.
    /// </summary>
    /// <param name = "_workLine"><c>WHSWorkLine</c> to determine if we are putting to a packing station.</param>
    /// <returns>true if the early tote reuse is enabled and we are putting to a packing station; otherwise false.</returns>
    public static boolean isToteReuseEnabled(WHSWorkLine _workLine)
    {
        if (WHSParameters::find().ToteReuse &&
            WHSLocationProfile::find(_workLine.getLocationProfileId()).isPackingLocationProfile())
        {
            return true;
        }
        
        return false;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4475</DeveloperDocumentation>
	<Label>@WAX2493</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TmpToteId</TitleField1>
	<TitleField2>ToteId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ToteIdWorkIdIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ToteIdWorkIdIdx</PrimaryIndex>
	<ReplacementKey>ToteIdWorkIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TmpToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TmpToteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSToteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TmpToteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSToteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ToteIdWorkIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ToteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TmpToteId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TmpToteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToteId</Name>
					<SourceEDT>WHSToteId</SourceEDT>
					<Field>ToteId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlateTmp</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TmpLicensePlate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TmpToteId</Name>
					<SourceEDT>WHSToteId</SourceEDT>
					<Field>TmpToteId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>