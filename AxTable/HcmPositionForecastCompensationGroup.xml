<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompensationGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastCompensationGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when a field is modified on a <c>HcmPositionForecastCompensationGroup</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// A field ID that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(HcmPositionForecastCompensationGroup, StepRule):
                if (this.StepRule == HcmPositionForecastStepRule::AnniversaryDate)
                {
                    this.BasisDate = dateNull();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        if (HcmPositionForecastScenario::existsByCompGroupIdAndDataAreaId(this.CompensationGroupId, this.DataAreaId))
        {
            ret = checkFailed("@SYS4005559");
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmPositionForecastComepensationGroup</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_hcmPositionForecastCompGroupRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionForecastCompGroupRecId _hcmPositionForecastCompGroupRecId)
    {
        boolean isExist = true;

        if (!HcmPositionForecastCompensationGroup::exist(_hcmPositionForecastCompGroupRecId))
        {
            isExist = checkFailed(strFmt(HcmPositionForecastCompensationGroup::txtNotExist(), tableStr(HcmPositionForecastCompensationGroup)));
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </summary>
    /// <param name="_positionForecastCompGroupRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionForecastCompGroupRecId _positionForecastCompGroupRecId)
    {
        return _positionForecastCompGroupRecId && (select firstonly RecId from hcmPositionForecastCompensationGroup
                    where hcmPositionForecastCompensationGroup.RecId == _positionForecastCompGroupRecId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompensationGroup</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_hcmPositionForecastCompGroupRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGroup find(
        HcmPositionForecastCompGroupRecId _hcmPositionForecastCompGroupRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;

        positionForecastCompensationGroup.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            positionForecastCompensationGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly positionForecastCompensationGroup
             where positionForecastCompensationGroup.RecId == _hcmPositionForecastCompGroupRecId;

        return positionForecastCompensationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompensationGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>HcmPositionForecastCompensationGroup</c> table specified by the <c>HcmPositionForecastCompGroupRecId</c> field value.
    /// </summary>
    /// <param name="_compGroupId">
    ///    A <c>HcmPositionForecastCompGroupId</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGroup findByCompensationGroupId(
        HcmPositionForecastCompensationGroupId _compGroupId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;

        positionForecastCompensationGroup.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            positionForecastCompensationGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly positionForecastCompensationGroup
            where positionForecastCompensationGroup.CompensationGroupId == _compGroupId;

        return positionForecastCompensationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompensationGrpIdDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the record in the <c>HcmPositionForecastCompensationGroup</c> table specified by the <c>HcmPositionForecastCompGroupRecId</c> field value.
    /// </summary>
    /// <param name="_compGroupId">
    ///      A <c>HcmPositionForecastCompGroupId</c> field value.
    /// </param>
    /// <param name="_dataAreaId">
    ///     A <c>DataAreaId</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///     A record from the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGroup findByCompensationGrpIdDataAreaId(
        HcmPositionForecastCompensationGroupId _compGroupId,
        DataAreaId _dataAreaId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;

        if (_compGroupId != '' && _dataAreaId != '')
        {
            container conCompanies = [strFmt('%1', _dataAreaId)];

            positionForecastCompensationGroup.selectForUpdate(_forUpdate );

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                positionForecastCompensationGroup.concurrencyModel(_concurrencyModel);
            }

            select crossCompany : conCompanies positionForecastCompensationGroup
                where positionForecastCompensationGroup.CompensationGroupId == _compGroupId;
        }

        return positionForecastCompensationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefCompGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the go to main table Form option to the shortcut menu.
    /// </summary>
    ///<param name="_object">
    /// The caller object where the event is triggered.
    /// </param>
    ///<param name="_groupDataAreaId">
    /// The data area id of caller.
    /// </param>
    /// <param name="_groupId">
    /// The group ID in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    public static void jumpRefCompGroupId(Object  _object,
                                    DataAreaId _groupDataAreaId,
                                    HcmPositionForecastCompensationGroupId _groupId)
    {
        Args    args;
        HcmPositionForecastCompensationGroup hcmPositionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(_groupId,  _groupDataAreaId);

        args = new Args();
        args.lookupField(fieldNum(HcmPositionForecastCompensationGroup, CompensationGroupId));
        args.lookupValue(hcmPositionForecastCompensationGroup.CompensationGroupId);
        args.caller(_object);

        new MenuFunction(menuitemDisplayStr(HcmPositionForecastCompGroup), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCompensationGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom <c>lookupReference</c> logic for foreign keys to the <c>HcmPositionForecastScenario</c> table that
    /// supports the look up of CompensationGroup records.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> form for which the look up is being performed.
    /// </param>
    /// <param name="_selectableDataArea">
    /// The DataAreaId of the <c>HcmPositionForecastScenario</c> table record.
    /// </param>
    public static void lookupCompensationGroupId(FormControl _formControl, SelectableDataArea  _selectableDataArea)
    {
        QueryBuildDataSource         queryBuildDataSource;
        Query                        query = new Query();
        SysTableLookup       sysTableLookup;

        query.allowCrossCompany(true);
        query.addCompanyRange(_selectableDataArea);

        sysTableLookup = SysTableLookup::newParameters(tableNum(HcmPositionForecastCompensationGroup), _formControl);

        queryBuildDataSource = query.addDataSource(tableNum(HcmPositionForecastCompensationGroup));

        sysTableLookup.addLookupfield(fieldNum(HcmPositionForecastCompensationGroup, CompensationGroupId));
        sysTableLookup.addLookupfield(fieldNum(HcmPositionForecastCompensationGroup, Description));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(HcmPositionForecastCompensationGroup, PlanId):
                if (isValid && this.PlanId && HRMCompFixedPlanTable::find(this.PlanId).Type != HcmCompensationType::Step)
                {
                    isValid = false;
                }

                if (isValid && HcmPositionForecastCompensationGroup::existByCompensationFixedPlan(this.PlanId))
                {
                    isValid = checkFailed("@SYP4940042");
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCompensationFixedPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionForecastCompensationGroup</c> table specified by the <c>HRMCompFixedPlanId</c> field value.
    /// </summary>
    /// <param name="_planId">
    /// The value of the field <c>HRMCompFixedPlanId</c> in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean existByCompensationFixedPlan(HRMCompFixedPlanId _planId)
    {
        return _planId &&
             HcmPositionForecastCompensationGroup::getCompGroupFromFixedCompensationPlan(_planId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompGroupFromFixedCompensationPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>HcmPositionForecastCompensationGroup</c> table specified by the <c>HRMCompFixedPlanId</c> field value.
    /// </summary>
    /// <param name="_planId">
    /// A <c>HRMCompFixedPlanId</c> field value.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationGroup getCompGroupFromFixedCompensationPlan(
        HRMCompFixedPlanId  _planId)
    {
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;

        select firstonly positionForecastCompensationGroup
            where positionForecastCompensationGroup.PlanId == _planId;

        return positionForecastCompensationGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4005883</DeveloperDocumentation>
	<FormRef>HcmPositionForecastCompGroup</FormRef>
	<Label>@SYS4005372</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CompensationGroupId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>HcmCompensationGroupIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>HcmPositionForecastCompensationGrid</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>HcmPositionForecastCompensationGrid</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AnnualizationRule</Name>
			<Label>@SYS4005379</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnnualHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HcmBudgetPurposeType</Name>
			<Label>@SYS4005313</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HcmBudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StepRule</Name>
			<Label>@SYS4005381</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StepRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasisDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmBudgetPurposeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AnnualHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Hours</ExtendedDataType>
			<Label>@GLS92409</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BasisDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastBasisDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompensationGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompensationGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CompensationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HcmForecastCompensationGroupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetExternalId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmBudgetPurposeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StepRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HcmPositionForecastStepRule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRMCompFixedPlanId</ExtendedDataType>
			<Label>@SYS118963</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmCompensationGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CompensationGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmBudgetPurposeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBudgetPurposeType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmBudgetPurposeType</Name>
					<Field>HcmBudgetPurposeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HRMCompFixedPlanTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>HRMCompFixedPlanTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanId</Name>
					<SourceEDT>HRMCompFixedPlanId</SourceEDT>
					<Field>PlanId</Field>
					<RelatedField>PlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>