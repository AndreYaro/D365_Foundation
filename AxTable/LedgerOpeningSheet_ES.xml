<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOpeningSheet_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerOpeningSheet_ES extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editFiscalCalendarPeriodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the fiscal calendar period name.
    /// </summary>
    /// <param name="set">
    /// true if the fiscal calendar period name is set; otherwise, false.
    /// </param>
    /// <param name="_periodName">
    /// The fiscal calendar period name when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The fiscal calendar period name of the record in the <c>FiscalCalendarPeriod</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit PeriodName editFiscalCalendarPeriodName(boolean set, PeriodName _periodName)
    {
        RecId calendarYearRecId;

        if (set)
        {
            calendarYearRecId = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(),this.PostDate).RecId;
            this.FiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(calendarYearRecId, _periodName).RecId;
        }
        else
        {
            _periodName = FiscalCalendarPeriod::find(this.FiscalCalendarPeriod).periodName();
        }

        return _periodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();
        this.PeriodCode = FiscalPeriodType::Opening;
        this.AcknowledgementDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        FiscalCalendarPeriod openingPeriod;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(LedgerOpeningSheet_ES, CurrentOperationsTax) :
                LedgerOpeningTrans_ES::updateOperationsTaxFromSheet(this);
                break;
            case fieldnum(LedgerOpeningSheet_ES, PostDate) :
                this.AcknowledgementDate = this.PostDate;
                openingPeriod = LedgerFiscalCalendar::findOpeningPeriodByDate(CompanyInfoHelper::fiscalCalendarRecId(),this.PostDate);
                this.editFiscalCalendarPeriodName(true, openingPeriod.periodName());
                break;
            case fieldnum(LedgerOpeningSheet_ES, PeriodCode) :
                if (this.PeriodCode == FiscalPeriodType::Opening)
                {
                    openingPeriod = LedgerFiscalCalendar::findOpeningPeriodByDate(CompanyInfoHelper::fiscalCalendarRecId(),this.PostDate);
                    this.editFiscalCalendarPeriodName(true, openingPeriod.periodName());
                }
                else
                {
                    this.editFiscalCalendarPeriodName(true,'');
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalances</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateBalances()
    {
        LedgerOpeningTable_ES ledgerOpeningTable;

        SysDaQueryObject queryObject = this.getLedgerOpeningSum(ledgerOpeningTable);

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.executeQuery(new SysDaFindObject(queryObject));

        this.SumTrialBalanceSheet = ledgerOpeningTable.TrialBalanceSheet;
        this.SumTransfer = ledgerOpeningTable.Transfer;
        this.SumResult = ledgerOpeningTable.Result;
        this.SumBalanceSheet = ledgerOpeningTable.BalanceSheet;
        this.SumCapital = ledgerOpeningTable.Capital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerOpeningSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects records from the <c>LedgerOpeningTable_ES</c> table to update ledger opening balances.
    /// </summary>
    /// <param name = "_ledgerOpeningTable">
    /// The <c>LedgerOpeningTable_ES</c> table to select the record.
    /// </param>
    /// <returns>
    /// The query to select records.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject getLedgerOpeningSum(LedgerOpeningTable_ES _ledgerOpeningTable)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_ledgerOpeningTable);

        queryObject.projection()
            .addSum(fieldStr(LedgerOpeningTable_ES, TrialBalanceSheet))
            .addSum(fieldStr(LedgerOpeningTable_ES, Transfer))
            .addSum(fieldStr(LedgerOpeningTable_ES, Result))
            .addSum(fieldStr(LedgerOpeningTable_ES, BalanceSheet))
            .addSum(fieldStr(LedgerOpeningTable_ES, Capital));

        queryObject.whereClause(new SysDaAndExpression(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, Sheet)), new SysDaValueExpression(this.Sheet)),
            new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::Equity))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::Liability)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::Asset)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::Expense)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::Revenue)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerOpeningTable, fieldStr(LedgerOpeningTable_ES, AccountType)), new SysDaValueExpression(DimensionLedgerAccountType::ProfitAndLoss)))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.Voucher)
            {
                ret = checkFailed("@SYS321285");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(fieldId p1)
    {
        boolean ret;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldnum(LedgerOpeningSheet_ES, PeriodCode) :
                    if (this.PeriodCode == FiscalPeriodType::Closing)
                    {
                        ret = checkFailed("@SYS321296");
                    }
                    break;
                default :
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.Voucher)
            {
                ret = checkFailed("@SYS321285");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(OpeningSheet_ES _sheet )
    {
        boolean ret = true;

        if (!LedgerOpeningSheet_ES::exist(_sheet))
        {
            ret = checkFailed(strfmt(LedgerOpeningSheet_ES::txtNotExist(), _sheet));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(OpeningSheet_ES _sheet )
    {
        LedgerOpeningSheet_ES ledgerOpeningSheet;

        select firstonly RecId from ledgerOpeningSheet
                     where ledgerOpeningSheet.Sheet == _sheet;

        return ledgerOpeningSheet.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerOpeningSheet_ES find(
        OpeningSheet_ES _sheet ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerOpeningSheet_ES ledgerOpeningSheet;

        ledgerOpeningSheet.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerOpeningSheet.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerOpeningSheet
            where
            ledgerOpeningSheet.Sheet == _sheet;

        return ledgerOpeningSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102219";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>ES</CountryRegionCodes>
	<DeveloperDocumentation>@SYS321288</DeveloperDocumentation>
	<Label>@SYS321298</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>Sheet</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<AosAuthorization>CreateReadUpdateDelete</AosAuthorization>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SheetIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>SheetIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerOpeningTable_ES</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerOpeningTable_ES</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentOperationsTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTrialBalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editFiscalCalendarPeriodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sheet</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcknowledgementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentOperationsTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editFiscalCalendarPeriodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Total</Name>
			<Label>@SYS809</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumTrialBalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumResult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumBalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumCapital</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcknowledgementDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AcknowledgementDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrentOperationsTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CurrentOperationsTax</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendarPeriod</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalCalendarPeriodRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS4083</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FiscalPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS6098</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Sheet</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OpeningSheet_ES</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumBalanceSheet</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76086</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumCapital</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS2543</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumResult</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS6769</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTransfer</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS10443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTrialBalanceSheet</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76084</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<Label>@SYS8828</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SheetIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Sheet</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalCalendarPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>FiscalCalendarPeriod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalCalendarPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerOpeningSheet_ES</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendarPeriod</Name>
					<SourceEDT>FiscalCalendarPeriodRecId</SourceEDT>
					<Field>FiscalCalendarPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>