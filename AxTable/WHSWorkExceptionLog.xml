<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExceptionLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkExceptionLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDemandReplenShortPickException</Name>
				<Source><![CDATA[
	    /// <summary>
	/// Creates a <c>WHSWorkExceptionLog</c> record for short pick exception.
	/// </summary>
	/// <param name="_workId">
	/// Work id of the order work.
	/// </param>
	/// <param name="_lineNum">
	/// Line number of the log.
	/// </param>
	/// <param name="_userId">
	/// User id of the log.
	/// </param>
	/// <param name="_replenWorkId">
	/// Replenishment work id that is short picked.
	/// </param>
	/// <param name="_replenLineNum">
	/// Replenishment work line number that is short picked.
	/// </param>
    public static void createDemandReplenShortPickException(
        WHSWorkId _workId,
        LineNum _lineNum,
        WHSUserId _userId,
        WHSWorkId _replenWorkId,
        LineNum _replenLineNum)
    {
        WHSWorkExceptionLog     workExceptionLog;
        WHSWorkTable            workTable;
        WHSWorkLine             workLine;
        LineNum                 lineNum;

        ttsbegin;

        workTable = WHSWorkTable::find(_workId);
        workLine = WHSWorkLine::find(_workId, _lineNum);

        switch (workTable.WorkTransType)
        {
            case WHSWorkTransType::Sales:
                lineNum = SalesLine::findInventTransId(workLine.InventTransId).LineNum;
                break;
            case WHSWorkTransType::TransferIssue:
                lineNum = InventTransferLine::findTransIdShip(workLine.InventTransId).LineNum;
                break;
        }

        workExceptionLog.WorkId             = _workId;
        workExceptionLog.LineNum            = _lineNum;
        workExceptionLog.WMSLocationId      = workLine.WMSLocationId;
        workExceptionLog.InventLocationId   = workTable.InventLocationId;
        workExceptionLog.Status             = WHSWorkExceptionLogStatus::Closed;
        workExceptionLog.UserId             = _userId;
        workExceptionLog.ExceptionType      = WHSExceptionType::ShortPick;
        workExceptionLog.ShipmentId         = workLine.ShipmentId;
        workExceptionLog.LoadId             = workLine.LoadId;
        workExceptionLog.OrderNum           = workLine.OrderNum;
        workExceptionLog.OrderLineNum       = lineNum;
        workExceptionLog.WorkTransType      = workTable.WorkTransType;
        workExceptionLog.Message            = strfmt("@WAX4047", _replenWorkId, _replenLineNum);

        workExceptionLog.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks if a specific <c>WHSWorkExceptionLog</c> record exists.
	/// </summary>
	/// <param name="_workId">
	/// Work id of the record.
	/// </param>
	/// <param name="_exceptionCode">
	/// Work exception code of the record.
	/// </param>
	/// <param name="_lineNum">
	/// Line number of the record.
	/// </param>
	/// <param name="_exceptionType">
	/// Work exception type of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(
        WHsWorkId _workId,
        WHSWorkExceptionCode _exceptionCode,
        LineNum _lineNum,
        WHSExceptionType _exceptionType)
    {
        return _workId && _exceptionCode && (select firstOnly RecId from WHSWorkExceptionLog
                 where WHsWorkExceptionLog.WorkExceptionCode ==_exceptionCode &&
                       WHSWorkExceptionLog.WorkId            == _workId       &&
                       WHSWorkExceptionLog.LineNum              == _lineNum      &&
                       WHSworkExceptionLog.ExceptionType     == _exceptionType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds a specific <c>WHSWorkExceptionLog</c> record with given parameters.
	/// </summary>
	/// <param name="_workId">
	/// Work id of the record.
	/// </param>
	/// <param name="_exceptionCode">
	/// Work exception code of the record.
	/// </param>
	/// <param name="_lineNum">
	/// Line number of the record.
	/// </param>
	/// <param name="_exceptionType">
	/// Work exception type of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkExceptionLog find(
        WHSWorkId _workId,
        WHSWorkExceptionCode _exceptionCode,
        LineNum _lineNum,
        WHSExceptionType _exceptionType,
        boolean _forupdate = false)
    {
        WHSWorkExceptionLog     workExceptionLog;

        if (_workId && _exceptionCode)
        {
            workExceptionLog.selectForUpdate(_forupdate);

            select firstonly workExceptionLog
                where workExceptionLog.WorkId               == _workId          &&
                      workExceptionLog.WorkExceptionCode    == _exceptionCode   &&
                      workExceptionLog.LineNum              == _lineNum         &&
                      workExceptionLog.ExceptionType        == _exceptionType;
        }

        return workExceptionLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusForWorkExceptionLogEntiresForLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status for all work exception log entries for the specified warehouse location.
    /// </summary>
    /// <param name="_wmsLocation">
    /// Warehouse location to close work exceptions for.
    /// </param>
    /// <param name="_newStatus">
    /// New status to set on all entries.
    /// </param>
    public static void updateStatusForWorkExceptionLogEntiresForLocation(WMSLocation _wmsLocation, WHSWorkExceptionLogStatus _newStatus)
    {
        WHSWorkExceptionLog workExceptionLog;

        ttsbegin;
        update_recordset workExceptionLog
            setting Status = _newStatus
            where workExceptionLog.InventLocationId == _wmsLocation.InventLocationId
                && workExceptionLog.WMSLocationId == _wmsLocation.WMSLocationId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNewWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves all <c>WHSWorkExceptionLog</c> records associated with a work line to a new work line.
    /// </summary>
    /// <param name="_origWorkId">
    ///    The Work ID the <c>WHSWorkExceptionLog</c> records are currently associated with.
    /// </param>
    /// <param name="_origLineNum">
    ///    The line number the <c>WHSWorkExceptionLog</c> records are currently associated with.
    /// </param>
    /// <param name="_newWorkId">
    ///    The Work ID the <c>WHSWorkExceptionLog</c> records must be associated with.
    /// </param>
    /// <param name="_newLineNum">
    ///    The new line number the <c>WHSWorkExceptionLog</c> records must be associated with.
    /// </param>
    internal static void moveToNewWorkLine(WHSWorkId  _origWorkId,
                                           LineNum    _origLineNum,
                                           WHSWorkId  _newWorkId,
                                           LineNum    _newLineNum)
    {
        if (!_origWorkId || !_newWorkId)
        {
            return;
        }

        WHSWorkExceptionLog workExceptionLog;

        ttsbegin;

        update_recordset workExceptionLog
            setting WorkId  = _newWorkId,
                    LineNum = _newLineNum
            where workExceptionLog.WorkId   == _origWorkId
                && workExceptionLog.LineNum == _origLineNum;

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4489</DeveloperDocumentation>
	<Label>@WAX640</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkId</TitleField1>
	<TitleField2>WorkExceptionCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Message</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Message</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExceptionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSExceptionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Message</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMessage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkExceptionCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExceptionCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkExceptionLogStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WMSLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<SourceEDT>WHSLicensePlateId</SourceEDT>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkException</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkException</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkExceptionCode</Name>
					<SourceEDT>WHSWorkExceptionCode</SourceEDT>
					<Field>WorkExceptionCode</Field>
					<RelatedField>WorkExceptionCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExceptionType</Name>
					<SourceEDT>WHSExecute</SourceEDT>
					<Field>ExceptionType</Field>
					<RelatedField>ExceptionType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocationWithWorkExceptionView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLocationWithWorkExceptionView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>WMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>