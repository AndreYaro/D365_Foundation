<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatExternalQuoteProductReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatExternalQuoteProductReference extends CatClassifiedProductReference
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateProcurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a single category for the <c>CatExternalQuoteProductReference</c> record.
    /// </summary>
    /// <param name = "_newCategory">The new <c>EcoResCategory</c> for the <c>CatExternalQuoteProductReference</c>.</param>
    /// <param name = "_catExternalQuoteProductReference">The <c>CatExternalQuoteProductReference</c> to be updated.</param>
    public static void updateProcurementCategory(EcoResCategory _newCategory, CatExternalQuoteProductReference _catExternalQuoteProductReference)
    {
        if (_newCategory && _catExternalQuoteProductReference)
        {
            ttsbegin;
            _catExternalQuoteProductReference.selectForUpdate(true);
            _catExternalQuoteProductReference.ProcurementCategory = _newCategory.RecId;
            _catExternalQuoteProductReference.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>CatCartLineState.IsSelected</c> field of all the other cart items in an external
    /// quote for an external catalog that enables line item deletion.
    /// </summary>
    /// <param name="_isSelected">
    /// Indicates that the cart is selected.
    /// </param>
    public void selected(boolean _isSelected)
    {
        CatCartLineState                    catCartLineState;
        CatCartLine                         catCartLine;
        CatExternalQuoteProductReference    catExternalQuoteProductReference;
        CatExternalCatalogQuote             catExternalCatalogQuote;
        CatExternalCatalog                  catExternalCatalog;

        catCartLineState.selectForUpdate(false);

        ttsbegin;

        // Update the cart line state for all the other cart line items in an external quote for an external catalog
        // that allows line item deletion
        while select forupdate catCartLineState
                where catCartLineState.IsSelected != _isSelected
            join catCartLine
                where catCartLine.RecId == catCartLineState.CartLine
            join catExternalQuoteProductReference
                where catExternalQuoteProductReference.RecId == catCartLine.ProductReference
                    && catExternalQuoteProductReference.ExternalQuote == this.ExternalQuote
                    && catExternalQuoteProductReference.RecId != this.RecId
            join catExternalCatalogQuote
                where catExternalCatalogQuote.RecId == catExternalQuoteProductReference.ExternalQuote
            join catExternalCatalog
                where catExternalCatalog.RecId == catExternalCatalogQuote.ExternalCatalog
                    && catExternalCatalog.QuoteItemDeletion == false
        {
            catCartLineState.IsSelected = _isSelected;
            catCartLineState.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCartLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the cart line validation that is specific to the product reference type.
    /// </summary>
    /// <param name="_catCartLine">
    /// A <c>CatCartLine</c> that should be validated
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area identifier.
    /// </param>
    /// <param name="_useCheckFailed">
    /// A Boolean value that indicates whether a validation error will cause a call to the
    /// <c>checkFailed</c> method.
    /// </param>
    /// <returns>
    /// A <c>CatCartLineInvalidityReason</c> enumeration value.
    /// </returns>
    CatCartLineInvalidityReason validateCartLine(CatCartLine _catCartLine, DataAreaId _dataAreaId, boolean _useCheckFailed = true)
    {
        CatCartLineInvalidityReason invalidityReason = CatCartLineInvalidityReason::IsValid;
        CatExternalCatalogQuote externalCatalogQuote = CatExternalCatalogQuote::find(this.ExternalQuote);
        CatExternalCatalog externalCatalog;

        invalidityReason = super(_catCartLine, _dataAreaId, _useCheckFailed);

        if ((invalidityReason == CatCartLineInvalidityReason::IsValid) && externalCatalogQuote)
        {
            if (externalCatalogQuote.ExpirationDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                invalidityReason = CatCartLineInvalidityReason::ExternalQuoteExpired;
                if (_useCheckFailed)
                {
                    checkFailed(strfmt("@SYS305435", externalCatalogQuote.Number, externalCatalogQuote.ExpirationDate));
                }
            }

            if (invalidityReason == CatCartLineInvalidityReason::IsValid)
            {
                select firstOnly recId, Name, State from externalCatalog
                    where externalCatalog.RecId == externalCatalogQuote.ExternalCatalog
                ;
                if (externalCatalog.State     != CatExternalCatalogState::Active)
                {
                    invalidityReason = CatCartLineInvalidityReason::ExternalCatalogInactive;
                    if (_useCheckFailed)
                    {
                        checkFailed(strfmt("@SYS332071",
                            externalCatalogQuote.Number,
                            externalCatalog.Name,
                            externalCatalog.State,
                            DateTimeUtil::minValue(),
                            DateTimeUtil::maxValue(),
                            DateTimeUtil::utcNow()
                        ));
                    }
                }
            }
        }

        return invalidityReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified product reference exists in the
    ///    <c>CatExternalQuoteProductReference</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the record in the <c>CatExternalQuoteProductReference</c> table to check for
    ///    existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _refRecId)
    {
        if (_refRecId && CatExternalQuoteProductReference::exist(_refRecId))
        {
            return true;
        }

        return checkFailed(strfmt("@SYS94719", _refRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given <c>_RefRecId</c> of type <c>RefRecId</c> exists.
    /// </summary>
    /// <param  name='_refRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    static boolean exist(RefRecId _refRecId)
    {
        return _refRecId && (select firstonly RecId from catExternalQuoteProductReference
                                    where catExternalQuoteProductReference.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified product reference in the <c>CatExternalQuoteProductReference</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the record in the <c>CatExternalQuoteProductReference</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatExternalQuoteProductReference</c> table; otherwise, an empty buffer.
    /// </returns>
    static CatExternalQuoteProductReference find(RefRecId _refRecId, boolean _forUpdate = false)
    {
        CatExternalQuoteProductReference catExternalQuoteProductReference;

        if (_refRecId)
        {
            catExternalQuoteProductReference.selectForUpdate(_forUpdate);
            select catExternalQuoteProductReference where catExternalQuoteProductReference.RecId == _refRecId;
        }
        return catExternalQuoteProductReference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS317882</DeveloperDocumentation>
	<Label>@SYS300239</Label>
	<SingularLabel>@SYS300239</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>ExternalQuote</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<Extends>CatClassifiedProductReference</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalQuote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalQuote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalQuote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatExternalCatalogQuoteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalQuote</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatClassifiedProductReference1_4656</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CatClassifiedProductReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatClassifiedProductReference1</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>CatClassifiedProductReference1_CatExternalQuoteProductReference1</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatExternalCatalogQuote_4656</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatExternalCatalogQuote</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CatExternalCatalogQuote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CatExternalCatalogQuote_CatExternalQuoteProductReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExternalQuote</Name>
					<Field>ExternalQuote</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>