<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionSalesTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailTransactionSalesTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified posting ledger dimension for the <c>InventAccountType::SalesConsump</c>
    /// enumeration account type.
    /// </summary>
    /// <returns>
    /// The posting ledger dimension for the account item; otherwise, <c>0</c>.
    /// </returns>
    LedgerDimensionDefaultAccount accountConsumption()
    {
        LedgerDimensionDefaultAccount   ret;

        if (this.CustAccount)
        {
            ret = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesConsump,
                    this.inventTable().itemGroupId(),
                    this.CustAccount,
                    CustTable::find(this.CustAccount).CustGroup));
        }
        else
        {
            ret = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesConsump,
                    this.inventTable().itemGroupId(),
                    "",
                    ""));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified posting ledger dimension for the <c>InventAccountType::SalesIssue</c>
    /// enumeration account type.
    /// </summary>
    /// <returns>
    /// The posting ledger dimension for the account item; otherwise, <c>0</c>.
    /// </returns>
    LedgerDimensionDefaultAccount accountIssue()
    {
        LedgerDimensionDefaultAccount ret;

        if (this.CustAccount)
        {
            ret = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesIssue,
                    this.inventTable().itemGroupId(),
                    this.CustAccount,
                    CustTable::find(this.CustAccount).CustGroup));
        }
        else
        {
            ret = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesIssue,
                    this.inventTable().itemGroupId(),
                    "",
                    ""));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified posting ledger dimension for the <c>InventAccountType::SalesRevenue</c>
    /// enumeration account type.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> table.
    /// </param>
    /// <returns>
    /// The posting ledger dimension for the account item; otherwise, <c>0</c>.
    /// </returns>
    display LedgerDimensionDefaultAccount accountSales(InventTable _inventTable = this.inventTable())
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::SalesRevenue,
                '',
                this.transactionTable().CustAccount,
                CustTable::find(this.transactionTable().CustAccount).CustGroup,
                CustTable::find(this.transactionTable().CustAccount).TaxGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_inventAccountType">An inventory account type.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <param name="_accountNum">An account number.</param>
    /// <param name="_accountGroup">An account group.</param>
    /// <param name="_taxGroup">A sales tax group.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(
        InventAccountType _inventAccountType,
        ItemGroupId _itemGroupId,
        CustVendAC _accountNum,
        CustVendGroupId _accountGroup,
        TaxGroup _taxGroup = this.TaxGroup)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            this.ItemId,
            _itemGroupId,
            0, // If a category relation is added to the table it can be supplied here
            _accountNum,
            _accountGroup,
            _taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReturnCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost amount for the specified quantity.
    /// </summary>
    /// <param name="qty">
    /// The quantity of an item.
    /// </param>
    /// <returns>
    /// The rounded amount based on the quantity and cost.
    /// </returns>
    CostAmount calcReturnCostAmount(InventQty    qty)
    {
        return CurrencyExchangeHelper::amount(qty * this.CostAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemSold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction code of the sales transaction.
    /// </summary>
    void checkItemSold()
    {
        ;
        this.TransactionCode = RetailUtils::checkItemSoldInSite(this.ItemId, this.Barcode, this.giftcard, InventLocation::find(this.InventLocationId).InventSiteId);
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimension values.
    /// </summary>
    public void initInventDimId()
    {
        InventDim               inventDim;
        InventDim               trackingRegisterInventDim;

        this.seperateTransactionInventDim(this.initTransactionInventDim(), inventDim, trackingRegisterInventDim);

        this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimension values from the current record.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> record initialized from the inventory dimension fields on the current record.
    /// </returns>
    /// <remarks>
    /// The returned <c>InventDim</c> record has not been saved.
    /// </remarks>
    public InventDim initTransactionInventDim()
    {
        InventDim               inventDim;
        RetailStoreTable        storeTable = RetailStoreTable::find(this.Store);
        InventDimCombination    inventDimCombination;
        ;

        /*
        functionalityProfile = RetailFunctionalityProfile::find(storeTable.functionalityProfile);

        if (functionalityProfile.serialNumber)
        {
            select firstonly transactionInfocodeTrans
                where transactionInfocodeTrans.store         == this.store
                &&    transactionInfocodeTrans.terminal      == this.terminalId
                &&    transactionInfocodeTrans.type == RetailInfocodeTransType::Sales
                &&    transactionInfocodeTrans.transactionId == this.transactionId
                &&    transactionInfocodeTrans.lineNum == this.lineNum
                &&    transactionInfocodeTrans.infocodeId == functionalityProfile.serialNumber;

            if (transactionInfocodeTrans)
            {
                inventDim.inventSerialId = transactionInfocodeTrans.information;
            }
        }
        */

        inventDim.InventLocationId = storeTable.InventLocation;
        inventDim.InventBatchId = this.InventBatchId;

        if (inventDim.InventLocationId)
        {
            inventDim.InventSiteId = InventLocation::find(inventDim.InventLocationId).InventSiteId;
        }

        inventDim.InventSerialId = this.InventSerialId;

        if (this.VariantId)
        {
            inventDimCombination = InventDimCombination::findVariantId(this.VariantId);
            inventDim.InventDimFieldsMap::initProductDimensionsFrom(inventDimCombination.inventDim());
        }

        inventDim = this.setStorageDimensions(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an inventory dimensions record for the specified dimension number.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>InventDim</c> table.
    /// </returns>
    InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from the current unit to an inventory model unit.
    /// </summary>
    /// <returns>
    /// A real value in the converted unit of measure.
    /// </returns>
    public InventQty inventNow()
    {
        InventQty   inventQty = 0;

        if (this.qty)
        {
            inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.itemId,
                                                                                              this.inventDimId,
                                                                                              this.qty,
                                                                                              this.Unit,
                                                                                              this.inventTable().inventUnitId(),
                                                                                              NoYes::Yes);
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>InventTable</c> table.
    /// </summary>
    /// <returns>
    /// A record in the <c>InventTable</c> table; otherwise, an empty record.
    /// </returns>
    InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the originator of the inventory transaction associated with the current record.
    /// </summary>
    /// <returns>
    ///    The originator of the inventory transaction.
    /// </returns>
    public InventTransOrigin inventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a product that this item represents.
    /// </summary>
    /// <returns>
    /// The name of the product.
    /// </returns>
    //BP deviation documented
    display ItemName itemName()
    {
        return InventTable::name(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPrevInventTransIdForAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the matching inventory transaction value and updates its quantity.
    /// </summary>
    /// <param name="_movement">
    /// An <c>InventMovement</c> object.
    /// </param>
    /// <returns>
    /// The lot ID value for transactions attached to the same inventory transaction.
    /// </returns>
    InventTransId lookupPrevInventTransIdForAggregation(InventMovement _movement)
    {
        InventTrans prevInventTrans;
        InventTransOrigin   prevInventTransOrigin;
        CustTable           custTable;
        VendTable           vendTable;
        RecId               partyId;
        ItemId                          itemId                  = _movement.itemId();
        CustVendAC                      custVend                = _movement.custVendAc();
        ProjId                          projId                  = _movement.projId();
        ProjCategoryId                  projCategoryId          = _movement.projCategoryId();
        ProjActivityNumber              activityNumber          = _movement.activityNumber();
        InventTransType                 transType               = _movement.transType();
        InventTransRefId                transRefId              = _movement.transRefId();
        TransDate                       transDate               = _movement.transDate();
        AssetId                         assetId                 = _movement.assetId();
        AssetBookId                     assetBookId             = _movement.assetBookId();
        SalesShippingDateRequested      shippingDateRequested   = _movement.shippingDateRequested();
        InventDimId                     inventDimId             = _movement.inventDimId();

        if (transType  == InventTransType::Sales
            ||  transType  == InventTransType::SalesQuotation
            ||  transType  == InventTransType::Project)
        {
            select Party, AccountNum from custTable
                where custTable.AccountNum == custVend;

            partyId = custTable.Party;
        }

        if (transType == InventTransType::Purch)
        {
            select Party, AccountNum from vendTable
                where vendTable.AccountNum == custVend;

            partyId = vendTable.Party;
        }

        // Find previous matching inventory transaction, if one exists and update its quantity instead of creating a new one.
        select firstonly forupdate prevInventTrans
        order by prevInventTrans.RecId desc
        join prevInventTransOrigin
        where
           prevInventTrans.InventTransOrigin        == prevInventTransOrigin.RecId
        && prevInventTrans.ItemId                   == itemId
        && prevInventTransOrigin.Party              == partyId
        && prevInventTrans.ProjId                   == projId
        && prevInventTrans.ProjCategoryId           == projCategoryId
        && prevInventTrans.ActivityNumber           == activityNumber
        && prevInventTransOrigin.ReferenceCategory  == transType
        && prevInventTransOrigin.ReferenceId        == transRefId // pick those belonging to the current statement
        && prevInventTrans.DateExpected             == transDate
        && prevInventTrans.ShippingDateRequested    == shippingDateRequested
        && prevInventTrans.InventDimId              == inventDimId;

        return prevInventTransOrigin.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>LedgerPostingType::SalesRevenue</c> enumeration value.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesRevenue</c> enumeration type.
    /// </returns>
    LedgerPostingType postingSales()
    {
        return LedgerPostingType::SalesRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the record.
    /// </summary>
    /// <remarks>
    /// This method throws a warning when an attempt to rename the record is made.
    /// </remarks>
    public void renamePrimaryKey()
    {
        if (Box::yesNo("@RET4036",DialogButton::No,"@RET3951","@RET4074") == DialogButton::No)
        {
            info("@RET4039");
            return;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveItemSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction code and inventory status values.
    /// </summary>
    /// <param name="skipCheckItemSold">
    /// A Boolean value that indicates whether to skip an update to the transaction code.
    /// </param>
    void reserveItemSales(boolean skipCheckItemSold = false)
    {
        ;
        if (! skipCheckItemSold)
        {
            this.checkItemSold();
        }

        //Create the inventory transactions
        if (this.TransactionCode == RetailItemTransactionCode::ItemOnFile &&
            InventTable::find(this.ItemId).isStocked())
        {
            this.updateEstimate();
        }

        this.InventStatusSales = RetailInventStatusSales::Reserved;

        // adding category if not already there.
        if (!this.CategoryId)
        {
            this.CategoryId = EcoResProductCategory::findRetailCategoryByItem(this.ItemId);
        }

        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>seperateTransactionInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Seperates an inventory dimension record into and <c>InventDim</c> record to be associated with the current record,
    ///     and an <c>InventDim</c> record to be used for registering tracking dimensions.
    /// </summary>
    /// <param name="_transactionInventDim">
    ///     A <c>InventDim</c> record specifying the inventory dimension combination to be seperated.
    /// </param>
    /// <param name="_salesTransInventDim">
    ///     A <c>InventDim</c> record which will contain the inventory dimension combination to be associated with the current record.
    /// </param>
    /// <param name="_trackingRegisterInventDim">
    ///     A <c>InventDim</c> record which will contain the inventory dimension combination to be used for registering tracking dimensions.
    /// </param>
    /// <remarks>
    ///     The _salesTransInventDim and _trackingRegisterInventDim records will contain the result of the seperation.
    /// </remarks>
    private void seperateTransactionInventDim(
        InventDim   _transactionInventDim,
        InventDim   _salesTransInventDim,
        InventDim   _trackingRegisterInventDim
    )
    {
        _salesTransInventDim.data(_transactionInventDim);
        _salesTransInventDim.moveDimParmDim(this.inventTable().inventDimParmSalesProcessActiveDim(), _trackingRegisterInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageDimensions</Name>
				<Source><![CDATA[
    private InventDim setStorageDimensions(InventDim _inventDim)
    {
        InventDirection inventDirection = this.qty > 0 ? InventDirection::Receipt : InventDirection::Issue;

        RetailStoreTable::fillInventDimWithStoreDefaults(this.ItemId, _inventDim, inventDirection);
        // Respect item level wmslocation
        _inventDim = RetailWHSHandler::updateItemInventDimLocation(this.itemId, _inventDim, inventDirection);

        _inventDim = InventDim::findOrCreate(_inventDim);

        return _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailTransactionTable</c> table.
    /// </summary>
    /// <returns>
    /// A record in the <c>RetailTransactionTable</c> table; otherwise, an empty record.
    /// </returns>
    RetailTransactionTable transactionTable()
    {
        return RetailTransactionTable::find(this.TransactionId,this.Store,this.TerminalId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RemoveReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates inventory reservation.
    /// </summary>
    void RemoveReservation()
    {
        // The inventory transactions may have been already removed due to aggregation criteria in statement posting.
        // Therefore, we need to check InventTransOrigin record.
        InventTransOrigin transOrigin = InventTransOrigin::findByInventTransId(this.inventTransId);
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        if (transOrigin && transOrigin.ReferenceCategory == InventTransType::Statement)
        {
            InventMovement inventMovement = InventMovement::construct(this);
            if (inventMovement.isReturned(inventMovement.remainPhysical()))
            {
                InventDim inventDim = this.inventDim();
                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inventDim);
                InventUpd_Registered registered = InventUpd_Registered::newParameters(inventMovement,
                                                                                 inventDim,
                                                                                 inventDimParm,
                                                                                 inventDim,
                                                                                 inventDimParm,
                                                                                 -1 * inventMovement.remainPhysical());
                registered.updateNow();
            }
        }
        else
        {
            eventSource.EventWriteInventoryPostingDeleteReservationSkipped(transOrigin.RecId, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteInventoryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes inventory reservation.
    /// </summary>
    public void DeleteInventoryReservation()
    {      
        // The inventory transactions may have been already removed due to aggregation criteria in statement posting.
        // Therefore, we need to check InventTransOrigin record.
        InventTransOrigin transOrigin = InventTransOrigin::findByInventTransId(this.inventTransId);
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        if (transOrigin && transOrigin.ReferenceCategory == InventTransType::Statement)
        {          
            InventMovement inventMovement = InventMovement::construct(this);
            InventUpd_DeleteMovement::newMovement(inventMovement).updateNow();
        }
        else 
        {
            eventSource.EventWriteInventoryPostingDeleteReservationSkipped(transOrigin.RecId, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transactions and reserve quantity values.
    /// </summary>
    /// <param name="dropInvent">
    /// A Boolean value that indicates whether to update.
    /// </param>
    void updateEstimate(boolean dropInvent = false)
    {
        InventDim               salesTransInventDim;
        InventDim               trackingRegisterInventDim;
        InventUpd_Estimated     estimated;
        NumberSeq               numberSeq;
        RetailParameters        parameters = RetailParameters::find();
        InventMovement          inventMovement;
        ;

        ttsbegin;

        inventMovement = InventMovement::construct(this, InventMovSubType::None, null);

        // Check if all requied product dimensions are set, if not abort the inventory reservation process.
        if (
            !inventMovement.checkDimPhysical(this.Qty,
                                            InventDim::find(this.InventDimId),
                                            true)
        )
        {
            ttsabort;
            throw error(strFmt("@Retail:UpdateCanceledDueToRequiredProductDimensions", this.itemId));
            CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
            eventSource.EventWriteUpdateCanceledDueToRequiredProductDimensionsNotSetError(this.itemId);
        }

        if (!this.InventTransId)
        {
            numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventTransId());
            this.InventTransId = numberSeq.num();
        }

        if (!dropInvent)
        {
            estimated = InventUpd_Estimated::newInventMovement(inventMovement);

            estimated.updateNow();

            if (inventMovement.isReturned(inventMovement.remainPhysical()))
            {
                InventDimParm                           inventDimParm;

                InventDim  inventDim = this.inventDim();
                inventDimParm.initFromInventDim(inventDim);
                InventUpd_Registered registered = InventUpd_Registered::newParameters(inventMovement,
                                                                         inventDim,
                                                                         inventDimParm,
                                                                         inventDim,
                                                                         inventDimParm,
                                                                         inventMovement.remainPhysical());
                registered.updateNow();
            }

            if (inventMovement.mustRegisterTrackingDimension())
            {
                this.seperateTransactionInventDim(this.initTransactionInventDim(), salesTransInventDim, trackingRegisterInventDim);
                InventTrackingRegisterUpdate::newFromMovement(inventMovement).registerTrackingDimension(trackingRegisterInventDim, inventMovement.transQty());
            }
        }

        if (this.RecId)
        {
            this.doUpdate();
        }

        if (estimated)
        {
            InventUpdateReservationParameters inventUpdateReservationParameters = InventUpdateReservationParameters::construct();
            inventUpdateReservationParameters.SkipOnHandCheck = true;
            estimated.parmReservationParameters(inventUpdateReservationParameters);
            estimated.updateReservation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (fieldExt2Id(_fieldIdToCheck) == fieldNum(RetailTransactionSalesTrans, ItemId))
        {
            this.validateItemId();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the section number and shelf number for an item.
    /// </summary>
    /// <remarks>
    /// This method sets the sales type based on the item type.
    /// </remarks>
    void validateItemId()
    {
        RetailInventTable                  retailInventTable;
        RetailInventItemSectionLocation    sectionLocation, sectionLocation2;
        int                             testDec;
        InventDim                       inventDim;
        InventTable                     inventTable;

        retailInventTable = RetailInventTable::find(this.ItemId);

        if (!retailInventTable)
        {
            this.TransactionCode = RetailItemTransactionCode::ItemBarcodeNotOnFile;
            return;
        }

        inventDim.InventSiteId = inventTable.inventInventSiteId();
        inventDim              = InventDim::findOrCreate(inventDim);

        if (!inventTable.inventItemInventSetup(inventDim.InventDimId).checkNotStopped())
        {
            this.TransactionCode = RetailItemTransactionCode::ItemBlocked;
        }
        else
        {
            this.TransactionCode = RetailItemTransactionCode::ItemOnFile;
        }

        select firstonly sectionLocation
            where sectionLocation.ItemId == this.ItemId
            &&    sectionLocation.StoreId == this.Store
            &&    sectionLocation.ShowsSalesStatistics == true;

        if (sectionLocation)
        {
            this.Section = sectionLocation.SectionId;
            this.Shelf = sectionLocation.ShelfId;
        }
        else
        {
            select firstonly sectionLocation2
                where sectionLocation2.ShowsSalesStatistics == true;

            if (sectionLocation2)
            {
                this.Section = sectionLocation2.SectionId;
                this.Shelf = sectionLocation2.ShelfId;
            }
            else
            {
                this.Section = "";
                this.Shelf = "";
            }
        }

        if (retailInventTable.QtyBecomesNegative)
        {
            testDec = -1;
        }
        else
        {
            testDec = 1;
        }

        if (this.ReturnNoSale)
        {
            testDec = -testDec;
        }

        if (this.ItemCorrectedLine)
        {
            if (abs(this.Qty - testDec) > (this.Qty))
            {
                this.ItemCorrectedLine = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="_transactionId">
    /// The ID of a transaction.
    /// </param>
    /// <param name="_storeId">
    /// The ID of a store.
    /// </param>
    /// <param name="_terminalId">
    /// The ID of a POS terminal.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of a transaction.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_channelRecId">
    /// The ID of a channel.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTransactionSalesTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTransactionSalesTrans find(RetailTransactionId _transactionId,
                                                RetailStoreId       _storeId,
                                                RetailTerminalId    _terminalId,
                                                LineNum          _lineNum,
                                                boolean _forUpdate = false,
                                                RetailChannelRecId _channelRecId = 0)
    {
        RetailTransactionSalesTrans transactionSalesTrans;
        if ((_transactionId && _lineNum && _storeId && _terminalId) || (_transactionId && _lineNum))
        {
            RecId localChannelRecId = _channelRecId;

            if (_channelRecId == 0 && _storeId)
            {
                localChannelRecId = RetailStoreTable::find(_storeId).RecId;
            }

            transactionSalesTrans.selectForUpdate(_forUpdate);

            select firstonly transactionSalesTrans
            index hint transactionLineIdx
            where transactionSalesTrans.Store         == _storeId
            &&    transactionSalesTrans.Channel       == localChannelRecId
            &&    transactionSalesTrans.TerminalId    == _terminalId
            &&    transactionSalesTrans.TransactionId == _transactionId
            &&    transactionSalesTrans.LineNum       == _lineNum;
        }

        return transactionSalesTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="recId">
    /// The RecId corresponding to the desired record.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTransactionSalesTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTransactionSalesTrans findByRecId(RecId _recId, boolean update = false)
    {
        RetailTransactionSalesTrans transactionSalesTrans;
        transactionSalesTrans.selectForUpdate(update);
        select firstOnly transactionSalesTrans where transactionSalesTrans.RecId == _recId;
        return transactionSalesTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="transId">
    /// The ID of an item lot.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTransactionSalesTrans</c> table; otherwise, an empty record.
    /// </returns>
    [SysObsolete('Use findInventTransIdByStore method instead.', false, 30\11\2017)]
    static RetailTransactionSalesTrans findInventTransId(InventTransId transId,
                                       boolean       update = false )
    {
        RetailTransactionSalesTrans salesTrans;
        ;

        salesTrans.selectForUpdate(update);

        select firstonly salesTrans
            index hint TransIdIdx
            where salesTrans.InventTransId == transId;

        return salesTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransIdByStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="transId">
    /// The ID of an item lot.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTransactionSalesTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTransactionSalesTrans findInventTransIdByStore(RetailStoreId   storeId,
                                                                InventTransId   transId,
                                                                boolean         update = false )
    {
        RetailTransactionSalesTrans salesTrans;
        
        salesTrans.selectForUpdate(update);

        select firstonly salesTrans
            where   salesTrans.store            == storeId
                &&  salesTrans.InventTransId    == transId;

        return salesTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTototalCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total cost amount for a specified retail department based on the retail group and
    /// item values for the specified transaction dates.
    /// </summary>
    /// <param name="_categoryId">
    /// A category value.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_dateFrom">
    /// A from date value.
    /// </param>
    /// <param name="_dateTo">
    /// A to date value.
    /// </param>
    /// <param name="_timeFrom">
    /// A from time value.
    /// </param>
    /// <param name="_timeto">
    /// A to time value.
    /// </param>
    /// <returns>
    /// The total cost amount of the sales transaction.
    /// </returns>
    public static RetailNetAmount fromTototalCostAmount(EcoResCategoryId _categoryId,
                                              ItemId        _itemId,
                                              date          _dateFrom = dateNull(),
                                              date          _dateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                              TimeOfDay     _timeFrom =0,
                                              TimeOfDay     _timeto   = 86400)
    {
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionTable transTable;
        RetailNetAmount result;
        EcoResCategory categories;
        EcoResCategory currentCategory;

        if (_categoryId)
        {
            currentCategory  = EcoResCategory::find(_categoryId);
            categories = RetailTransactionSalesTrans::getCategories(_categoryId);

            select sum(CostAmount) from salesTrans
            where  ((_itemId && (salesTrans.ItemId == _itemId)) ||
                        (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                &&      salesTrans.TransDate >= _dateFrom
                &&      salesTrans.TransTime >= _timeFrom
                &&      salesTrans.TransDate <= _dateTo
                &&      salesTrans.TransTime <= _timeto
                exists join transTable
                    where transTable.transactionId == salesTrans.transactionId
                        && transTable.terminal == salesTrans.terminalId
                        && transTable.store == salesTrans.store
                        && transTable.Channel == salesTrans.Channel
                        && transTable.type != RetailTransactionType::SuspendedTransaction
                exists join categories
                    order by categories.NestedSetLeft
                    where categories.RecId == salesTrans.CategoryId
                        &&  categories.CategoryHierarchy == currentCategory.CategoryHierarchy
                        &&  categories.NestedSetLeft  >= currentCategory.NestedSetLeft
                        &&  categories.NestedSetRight <= currentCategory.NestedSetRight;

            result = salesTrans.CostAmount;
        }
        else
        {
            select sum(CostAmount) from salesTrans
            where   ((_itemId && (salesTrans.ItemId == _itemId)) ||
                        (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                &&      salesTrans.TransDate >= _dateFrom
                &&      salesTrans.TransTime >= _timeFrom
                &&      salesTrans.TransDate <= _dateTo
                &&      salesTrans.TransTime <= _timeto
                exists join transTable
                    where transTable.transactionId == salesTrans.transactionId
                        && transTable.terminal == salesTrans.terminalId
                        && transTable.store == salesTrans.store
                        && transTable.Channel == salesTrans.Channel
                        && transTable.type != RetailTransactionType::SuspendedTransaction;

            result = salesTrans.CostAmount;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTototalDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total discount amount for a specified retail department that is based on the retail
    /// group and item values for the specified transaction dates.
    /// </summary>
    /// <param name="_categoryId">
    /// A category value.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_dateFrom">
    /// A from date value.
    /// </param>
    /// <param name="_dateTo">
    /// A to date value.
    /// </param>
    /// <param name="_timeFrom">
    /// A from time value.
    /// </param>
    /// <param name="_timeto">
    /// A to time value.
    /// </param>
    /// <param name="_statusfrom">
    /// A from entry status value.
    /// </param>
    /// <param name="_statusto">
    /// A to entry status value.
    /// </param>
    /// <returns>
    /// The total discount amount of the sales transaction.
    /// </returns>
    public static RetailNetAmount fromTototalDiscAmount(EcoResCategoryId _categoryId,
                                              ItemId            _itemId,
                                              date          _dateFrom = dateNull(),
                                              date          _dateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                              TimeOfDay     _timeFrom =0,
                                              TimeOfDay     _timeto   = 86400,
                                              RetailEntryStatus    _statusfrom = RetailEntryStatus::None,
                                              RetailEntryStatus    _statusto   = RetailEntryStatus::Posted)
    {
        RetailTransactionSalesTrans salesTrans;
        RetailNetAmount result;
        EcoResCategory categories;
        EcoResCategory currentCategory;
        RetailTransactionTable transTable;

        if (_categoryId)
        {
            currentCategory  = EcoResCategory::find(_categoryId);
            categories = RetailTransactionSalesTrans::getCategories(_categoryId);

            select sum(DiscAmount) from salesTrans
                where  ((_itemId && (salesTrans.ItemId == _itemId)) ||
                       (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                exists join transTable
                    where transTable.transactionId == salesTrans.transactionId
                        && transTable.terminal == salesTrans.terminalId
                        && transTable.store == salesTrans.store
                        && transTable.Channel == salesTrans.Channel
                        && transTable.type != RetailTransactionType::SuspendedTransaction
                exists join categories
                    order by categories.NestedSetLeft
                        where categories.RecId == salesTrans.CategoryId
                            &&  categories.CategoryHierarchy == currentCategory.CategoryHierarchy
                            &&  categories.NestedSetLeft  >= currentCategory.NestedSetLeft
                            &&  categories.NestedSetRight <= currentCategory.NestedSetRight;

            result = salesTrans.DiscAmount;
        }
        else
        {
            select sum(DiscAmount) from salesTrans
                where   ((_categoryId && (salesTrans.CategoryId == _categoryId)) ||
                        (!_categoryId && (salesTrans.CategoryId == salesTrans.CategoryId)))
                        &&  ((_itemId && (salesTrans.ItemId == _itemId)) ||
                        (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                    &&      salesTrans.TransactionStatus >= _statusfrom
                    &&      salesTrans.TransactionStatus <= _statusto
                    &&      salesTrans.TransactionStatus != RetailEntryStatus::Voided
                exists join transTable
                    order by transTable.store
                        where transTable.terminal == salesTrans.terminalId
                            && transTable.store == salesTrans.store
                            && transTable.transactionId == salesTrans.transactionId
                            && transTable.Channel == salesTrans.Channel
                            && transTable.entryStatus >= _statusfrom
                            && transTable.entryStatus <= _statusto
                            && transTable.entryStatus != RetailEntryStatus::Voided
                            && transTable.type != RetailTransactionType::SuspendedTransaction;

            result = salesTrans.DiscAmount;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTototalNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total net amount for a specified retail department that is based on the retail group
    /// and item values for the specified transaction dates.
    /// </summary>
    /// <param name="_categoryId">
    /// A category value.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_dateFrom">
    /// A from date value.
    /// </param>
    /// <param name="_dateTo">
    /// A to date value.
    /// </param>
    /// <param name="_timeFrom">
    /// A from time value.
    /// </param>
    /// <param name="_timeto">
    /// A to time value.
    /// </param>
    /// <param name="_statusfrom">
    /// A from entry status value.
    /// </param>
    /// <param name="_statusto">
    /// A to entry status value.
    /// </param>
    /// <returns>
    /// The total net amount of the sales transaction.
    /// </returns>
    public static RetailNetAmount fromTototalNetAmount(EcoResCategoryId _categoryId,
                                              ItemId            _itemId,
                                              date          _dateFrom = dateNull(),
                                              date          _dateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                              TimeOfDay     _timeFrom =0,
                                              TimeOfDay     _timeto   = 86400,
                                              RetailEntryStatus    _statusfrom = RetailEntryStatus::None,
                                              RetailEntryStatus    _statusto   = RetailEntryStatus::Posted)
    {
        RetailTransactionSalesTrans salesTrans;
        RetailNetAmount result;
        EcoResCategory categories;
        EcoResCategory currentCategory;
        RetailTransactionTable  transTable;

        if (_categoryId)
        {
            currentCategory  = EcoResCategory::find(_categoryId);
            categories = RetailTransactionSalesTrans::getCategories(_categoryId);

            select sum(NetAmount) from salesTrans
                where  ((_itemId && (salesTrans.ItemId == _itemId)) ||
                       (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                exists join transTable
                    where transTable.transactionId == salesTrans.transactionId
                        && transTable.terminal == salesTrans.terminalId
                        && transTable.store == salesTrans.store
                        && transTable.Channel == salesTrans.Channel
                        && transTable.type != RetailTransactionType::SuspendedTransaction
                exists join categories
                    order by categories.NestedSetLeft
                        where categories.RecId == salesTrans.CategoryId
                            &&  categories.CategoryHierarchy == currentCategory.CategoryHierarchy
                            &&  categories.NestedSetLeft  >= currentCategory.NestedSetLeft
                            &&  categories.NestedSetRight <= currentCategory.NestedSetRight;

            result = salesTrans.NetAmount;
        }
        else
        {
            select sum(NetAmount) from salesTrans
                where   ((_itemId && (salesTrans.ItemId == _itemId)) ||
                        (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                    &&      salesTrans.TransactionStatus >= _statusfrom
                    &&      salesTrans.TransactionStatus <= _statusto
                    &&      salesTrans.TransactionStatus != RetailEntryStatus::Voided
                exists join transTable
                    order by transTable.store
                        where transTable.terminal == salesTrans.terminalId
                            && transTable.store == salesTrans.store
                            && transTable.transactionId == salesTrans.transactionId
                            && transTable.Channel == salesTrans.Channel
                            && transTable.entryStatus >= _statusfrom
                            && transTable.entryStatus <= _statusto
                            && transTable.entryStatus != RetailEntryStatus::Voided
                            && transTable.type != RetailTransactionType::SuspendedTransaction;

            result = salesTrans.NetAmount;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTototalqty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity for a specified retail department that is based on the retail group
    /// and item values for the specified transaction dates.
    /// </summary>
    /// <param name="_categoryId">
    /// A category value.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_dateFrom">
    /// A from date value.
    /// </param>
    /// <param name="_dateTo">
    /// A to date value.
    /// </param>
    /// <param name="_timeFrom">
    /// A from time value.
    /// </param>
    /// <param name="_timeto">
    /// A to time value.
    /// </param>
    /// <param name="_statusfrom">
    /// A from entry status value.
    /// </param>
    /// <param name="_statusto">
    /// A to entry status value.
    /// </param>
    /// <returns>
    /// The total quantity of the sales transaction.
    /// </returns>
    public static Qty fromTototalqty(EcoResCategoryId _categoryId,
                                    ItemId            _itemId,
                                    date          _dateFrom = dateNull(),
                                    date          _dateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                    TimeOfDay     _timeFrom =0,
                                    TimeOfDay     _timeto   = 86400,
                                    RetailEntryStatus _statusfrom = RetailEntryStatus::None,
                                    RetailEntryStatus _statusto = RetailEntryStatus::Posted)
    {
        RetailTransactionSalesTrans salesTrans;
        Qty result;
        EcoResCategory categories;
        EcoResCategory currentCategory;
        RetailTransactionTable   transTable;

        if (_categoryId)
        {
            currentCategory  = EcoResCategory::find(_categoryId);
            categories = RetailTransactionSalesTrans::getCategories(_categoryId);

            select sum(Qty) from salesTrans
                where  ((_itemId && (salesTrans.ItemId == _itemId)) ||
                       (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                exists join transTable
                    where transTable.transactionId == salesTrans.transactionId
                        && transTable.terminal == salesTrans.terminalId
                        && transTable.store == salesTrans.store
                        && transTable.Channel == salesTrans.Channel
                        && transTable.type != RetailTransactionType::SuspendedTransaction
                exists join categories
                    order by categories.NestedSetLeft
                        where salesTrans.CategoryId == categories.RecId
                            &&  categories.CategoryHierarchy == currentCategory.CategoryHierarchy
                            &&  categories.NestedSetLeft  >= currentCategory.NestedSetLeft
                            &&  categories.NestedSetRight <= currentCategory.NestedSetRight;

            result = salesTrans.Qty;
        }
        else
        {
            select sum(Qty) from salesTrans
                where   ((_itemId && (salesTrans.ItemId == _itemId)) ||
                        (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                    &&      salesTrans.TransactionStatus >= _statusfrom
                    &&      salesTrans.TransactionStatus <= _statusto
                    &&      salesTrans.TransactionStatus != RetailEntryStatus::Voided
                exists join transTable
                    order by transTable.store
                        where transTable.terminal == salesTrans.terminalId
                            && transTable.store == salesTrans.store
                            && transTable.transactionId == salesTrans.transactionId
                            && transTable.Channel == salesTrans.Channel
                            && transTable.entryStatus >= _statusfrom
                            && transTable.entryStatus <= _statusto
                            && transTable.entryStatus != RetailEntryStatus::Voided
                            && transTable.type != RetailTransactionType::SuspendedTransaction;

            result = salesTrans.Qty;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTototalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total tax amount for a specified retail department that is based on the retail group
    /// and item values for the specified transaction dates.
    /// </summary>
    /// <param name="_categoryId">
    /// A category value.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_dateFrom">
    /// A from date value.
    /// </param>
    /// <param name="_dateTo">
    /// A to date value.
    /// </param>
    /// <param name="_timeFrom">
    /// A from time value.
    /// </param>
    /// <param name="_timeto">
    /// A to time value.
    /// </param>
    /// <param name="_statusfrom">
    /// A from entry status value.
    /// </param>
    /// <param name="_statusto">
    /// A to entry status value.
    /// </param>
    /// <returns>
    /// The total tax amount of the sales transaction.
    /// </returns>
    public static RetailNetAmount fromTototalTaxAmount(EcoResCategoryId _categoryId,
                                              ItemId            _itemId,
                                              date          _dateFrom = dateNull(),
                                              date          _dateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                              TimeOfDay     _timeFrom =0,
                                              TimeOfDay     _timeto   = 86400,
                                              RetailEntryStatus    _statusfrom = RetailEntryStatus::None,
                                              RetailEntryStatus    _statusto   = RetailEntryStatus::Posted)
    {
        RetailTransactionSalesTrans salesTrans;
        RetailNetAmount result;
        EcoResCategory categories;
        EcoResCategory currentCategory;
        RetailTransactionTable  transTable;

        if (_categoryId)
        {
            currentCategory  = EcoResCategory::find(_categoryId);
            categories = RetailTransactionSalesTrans::getCategories(_categoryId);

            select sum(TaxAmount) from salesTrans
                where  ((_itemId && (salesTrans.ItemId == _itemId)) ||
                       (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                exists join transTable
                    where transTable.transactionId == salesTrans.transactionId
                        && transTable.terminal == salesTrans.terminalId
                        && transTable.store == salesTrans.store
                        && transTable.Channel == salesTrans.Channel
                        && transTable.type != RetailTransactionType::SuspendedTransaction
                exists join categories
                    order by categories.NestedSetLeft
                        where categories.RecId == salesTrans.CategoryId
                            &&  categories.CategoryHierarchy == currentCategory.CategoryHierarchy
                            &&  categories.NestedSetLeft  >= currentCategory.NestedSetLeft
                            &&  categories.NestedSetRight <= currentCategory.NestedSetRight;

            result = salesTrans.TaxAmount;
        }
        else
        {
            select sum(TaxAmount) from salesTrans
                where   ((_itemId && (salesTrans.ItemId == _itemId)) ||
                        (!_itemId && (salesTrans.ItemId == salesTrans.ItemId)))
                    &&      salesTrans.TransDate >= _dateFrom
                    &&      salesTrans.TransTime >= _timeFrom
                    &&      salesTrans.TransDate <= _dateTo
                    &&      salesTrans.TransTime <= _timeto
                    &&      salesTrans.TransactionStatus >= _statusfrom
                    &&      salesTrans.TransactionStatus <= _statusto
                    &&      salesTrans.TransactionStatus != RetailEntryStatus::Voided
                exists join transTable
                    order by transTable.store
                        where transTable.terminal == salesTrans.terminalId
                            && transTable.store == salesTrans.store
                            && transTable.transactionId == salesTrans.transactionId
                            && transTable.Channel == salesTrans.Channel
                            && transTable.entryStatus >= _statusfrom
                            && transTable.entryStatus <= _statusto
                            && transTable.entryStatus != RetailEntryStatus::Voided
                            && transTable.type != RetailTransactionType::SuspendedTransaction;

            result = salesTrans.TaxAmount;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategories</Name>
				<Source><![CDATA[
    private static EcoResCategory getCategories(EcoResCategoryId _categoryId)
    {
        EcoResCategory resultSet;
        EcoResCategory currentCategory  = EcoResCategory::find(_categoryId);
        if (currentCategory)
        {
            resultSet = currentCategory.getDescendants();
        }

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimIdFromVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimension values from variant.
    /// </summary>
    /// <param name="_query">
    /// Query for RetailTransactionSalesTrans
    /// </param>
    public static void initInventDimIdFromVariantId(Query _query)
    {
        SysQueryRun                 queryRun;
        RetailTransactionSalesTrans retailTransactionSalesTrans;

        _query.dataSourceTable(tablenum(RetailTransactionSalesTrans)).addRange(fieldnum(RetailTransactionSalesTrans, inventDimId)).value(sysquery::valueEmptyString());
        _query.dataSourceTable(tablenum(RetailTransactionSalesTrans)).addRange(fieldnum(RetailTransactionSalesTrans, variantId)).value(sysquery::valueNotEmptyString());

        ttsBegin;

        queryRun = new SysQueryRun(_query);

        while (queryRun.next())
        {
            retailTransactionSalesTrans = queryRun.get(tableNum(RetailTransactionSalesTrans));

            retailTransactionSalesTrans.selectForUpdate(true);
            retailTransactionSalesTrans.initInventDimId();
            retailTransactionSalesTrans.update();
        }

        ttsCommit;

        _query.dataSourceTable(tablenum(RetailTransactionSalesTrans)).clearRange(fieldnum(RetailTransactionSalesTrans, inventDimId));
        _query.dataSourceTable(tablenum(RetailTransactionSalesTrans)).clearRange(fieldnum(RetailTransactionSalesTrans, variantId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPostedSalesEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of posted sales transactions.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of a transaction.
    /// </param>
    /// <returns>
    /// The total number of posted sales entries.
    /// </returns>
    public static int numberOfPostedSalesEntries(RetailStatementId _statementId)
    {
        RetailStatementTable            statementTable;
        RetailTransactionSalesTrans     salesTrans;

        statementTable = RetailStatementTable::find(_statementId);

        select count(RecId) from salesTrans
            where   salesTrans.store                == statementTable.storeId
                &&  salesTrans.StatementId          == statementTable.statementId
                &&  salesTrans.TransactionStatus    == RetailEntryStatus::Posted;

        return any2int(salesTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfUnpostedSalesEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of sales transactions with a transaction status of a <c>RetailEntryStatus::None</c>
    /// enumeration value for a specified time and date.
    /// </summary>
    /// <param name="_storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="_fromDate">
    /// A from date value.
    /// </param>
    /// <param name="_toDate">
    /// A to date value.
    /// </param>
    /// <param name="_fromTime">
    /// A from time value.
    /// </param>
    /// <param name="_toTime">
    /// A to time value.
    /// </param>
    /// <returns>
    /// The number of sales transactions.
    /// </returns>
    // changed createddate to TransDate and createdtime to Transtime
    public static int numberOfUnpostedSalesEntries(RetailStoreId _storeId, FromDate _fromDate, ToDate _toDate, FromTime _fromTime, ToTime _toTime)
    {
        RetailTransactionSalesTrans    salesTrans;
        RetailTransactionTable         transactionTable;

        #localmacro.JoinTransactionTable
            join transactionId, entrystatus
            from transactionTable
                where transactionTable.transactionId == salesTrans.transactionId
                && transactionTable.entrystatus != RetailEntryStatus::Voided
        #endmacro

        if (_fromDate == Global::dateNull() && _toDate != Global::dateNull())
            if (!_fromTime && _toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate <= _toDate
                &&      salesTrans.TransTime <= _toTime
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else if (_fromTime && !_toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate <= _toDate
                &&      salesTrans.TransTime >= _fromTime
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else if (_fromTime && _toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate <= _toDate
                &&     (salesTrans.TransTime >= _fromTime
                && salesTrans.TransTime <= _toTime)
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate <= _toDate
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;

        else if (_fromDate != Global::dateNull() && _toDate == Global::dateNull())
            if (!_fromTime && _toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate >= _fromDate
                &&      salesTrans.TransTime <= _toTime
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else if (_fromTime && !_toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate >= _fromDate
                &&      salesTrans.TransTime >= _fromTime
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else if (_fromTime && _toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate >= _fromDate
                &&     (salesTrans.TransTime >= _fromTime
                && salesTrans.TransTime <= _toTime)
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      salesTrans.TransDate >= _fromDate
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else
            if (!_fromTime && _toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&     (salesTrans.TransDate >= _fromDate && salesTrans.TransDate <= _toDate)
                &&      salesTrans.TransTime <= _toTime
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else if (_fromTime && !_toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&     (salesTrans.TransDate >= _fromDate && salesTrans.TransDate <= _toDate)
                &&      salesTrans.TransTime >= _fromTime
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else if (_fromTime && _toTime)
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&     (salesTrans.TransDate >= _fromDate && salesTrans.TransDate <= _toDate)
                &&     (salesTrans.TransTime >= _fromTime
                && salesTrans.TransTime <= _toTime)
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;
        else
                select count(RecId) from salesTrans
                where   salesTrans.Store == _storeId
                &&      (salesTrans.TransDate >= _fromDate && salesTrans.TransDate <= _toDate)
                &&      salesTrans.TransactionStatus == RetailEntryStatus::None
                #JoinTransactionTable;

        return any2int(salesTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of sales transactions for a specified transaction code.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of the transaction.
    /// </param>
    /// <param name="_transactionCode">
    /// A transaction code value.
    /// </param>
    /// <returns>
    /// The total number of posted sales entries.
    /// </returns>
    public static int statementTransactionCode( RetailStatementId           _statementId,
                                                RetailItemTransactionCode   _transactionCode)
    {
        RetailStatementTable        statementTable;
        RetailTransactionSalesTrans salesTrans;

        statementTable = RetailStatementTable::find(_statementId);

        select count(RecId) from salesTrans
            where   salesTrans.store            == statementTable.storeId
                &&  salesTrans.StatementId      == statementTable.statementId
                &&  salesTrans.TransactionCode  == _transactionCode;

        return any2int(salesTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the cost amounts for a specified store and shelf.
    /// </summary>
    /// <param name="_storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="_sectionId">
    /// A section number value.
    /// </param>
    /// <param name="_dateFilter">
    /// A transaction date value.
    /// </param>
    /// <param name="_timeFilter">
    /// A transaction time value.
    /// </param>
    /// <returns>
    /// The total cost amount of the transactions for the specified store.
    /// </returns>
    public static CostAmount totalCostAmount(RetailStoreId    _storeId,
                                             RetailSectionId  _sectionId,
    //                                         RetailShelfId    _shelfId,
    date          _dateFilter,
                                             TimeOfDay     _timeFilter)
    {
        RetailTransactionSalesTrans salesTrans;

        select sum(CostAmount) from salesTrans
        where   salesTrans.Store == _storeId
        &&      salesTrans.Section == _sectionId
    //    &&      salesTrans.shelf == _shelfId
    &&      salesTrans.TransDate == _dateFilter
        &&      salesTrans.TransTime == _timeFilter;

        return salesTrans.CostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the discount amounts for a specified store and shelf.
    /// </summary>
    /// <param name="_storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="_sectionId">
    /// A section number value.
    /// </param>
    /// <param name="_dateFilter">
    /// A transaction date value.
    /// </param>
    /// <param name="_timeFilter">
    /// A transaction time value.
    /// </param>
    /// <returns>
    /// The total discount amount of the transactions for the specified store.
    /// </returns>
    public static DiscAmount totalDiscountAmount(RetailStoreId    _storeId,
                                                   RetailSectionId  _sectionId,
    //                                               RetailShelfId    _shelfId,
    date          _dateFilter,
                                                   TimeOfDay     _timeFilter)
    {
        RetailTransactionSalesTrans salesTrans;

        select sum(DiscAmount) from salesTrans
        where   salesTrans.Store == _storeId
        &&      salesTrans.Section == _sectionId
    //    &&      salesTrans.shelf == _shelfId
    &&      salesTrans.TransDate == _dateFilter
        &&      salesTrans.TransTime == _timeFilter;

        return salesTrans.DiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the net amounts for a specified store and shelf.
    /// </summary>
    /// <param name="_storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="_sectionId">
    /// A section number value.
    /// </param>
    /// <param name="_dateFilter">
    /// A transaction date value.
    /// </param>
    /// <param name="_timeFilter">
    /// A transaction time value.
    /// </param>
    /// <returns>
    /// The total net amount of the transactions for the specified store.
    /// </returns>
    public static RetailNetAmount totalNetAmount(RetailStoreId    _storeId,
                                              RetailSectionId  _sectionId,
    //                                          RetailShelfId    _shelfId,
    date          _dateFilter,
                                              TimeOfDay     _timeFilter)
    {
        RetailTransactionSalesTrans salesTrans;

        select sum(NetAmount) from salesTrans
        where   salesTrans.Store == _storeId
        &&      salesTrans.Section == _sectionId
    //    &&      salesTrans.shelf == _shelfId
    &&      salesTrans.TransDate == _dateFilter
        &&      salesTrans.TransTime == _timeFilter;

        return salesTrans.NetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQtySoldPrSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the quantities for a specified store and shelf.
    /// </summary>
    /// <param name="_storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="_sectionId">
    /// A section number value.
    /// </param>
    /// <param name="_dateFilter">
    /// A transaction date value.
    /// </param>
    /// <returns>
    /// The total quantity of the transactions for the specified store.
    /// </returns>
    public static Qty totalQtySoldPrSection(RetailStoreId    _storeId,
                                            RetailSectionId  _sectionId,
                                            date             _dateFilter)
    {
        RetailTransactionSalesTrans salesTrans;

        select sum(Qty) from salesTrans
        where   salesTrans.Store == _storeId
        &&      salesTrans.Section == _sectionId
        &&      salesTrans.TransDate == _dateFilter;

        return salesTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalStatementDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the discount amounts for a specified statement code.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of a transaction.
    /// </param>
    /// <param name="_statementCode">
    /// A statement code value.
    /// </param>
    /// <returns>
    /// The total discount amount of sales entries.
    /// </returns>
    public static DiscAmount totalStatementDiscount(RetailStatementId   _statementId,
                                                    RetailStatementCode _statementCode)
    {
        RetailStatementTable        statementTable;
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionTable      transactionTable;

        statementTable = RetailStatementTable::find(_statementId);

        select sum(TotalDiscAmount) from salesTrans
            where   salesTrans.store                == statementTable.storeId
                &&  salesTrans.StatementId          == statementTable.statementId
                &&  salesTrans.StatementCode        == _statementCode
                &&  salesTrans.TransactionStatus    != RetailEntryStatus::Voided
            join transactionTable
                where   transactionTable.Channel        == salesTrans.Channel
                    &&  transactionTable.store          == salesTrans.store
                    &&  transactionTable.transactionId  == salesTrans.transactionId
                    &&  transactionTable.terminal       == salesTrans.terminalId
                    &&  transactionTable.type           != RetailTransactionType::SuspendedTransaction;

        return salesTrans.TotalDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalStatementLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the line discount amounts for a specified statement code.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of a transaction.
    /// </param>
    /// <param name="_statementCode">
    /// A statement code value.
    /// </param>
    /// <returns>
    /// The total line discount amount of sales entries.
    /// </returns>
    public static DiscAmount totalStatementLineDiscount(RetailStatementId   _statementId,
                                                        RetailStatementCode _statementCode)
    {
        RetailStatementTable        statementTable;
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionTable      transactionTable;

        statementTable = RetailStatementTable::find(_statementId);

        if (_statementId)
        {
            select sum(LineDscAmount) from salesTrans
                where   salesTrans.store                == statementTable.storeId
                    &&  salesTrans.StatementId          == statementTable.statementId
                    &&  salesTrans.StatementCode        == _statementCode
                    &&  salesTrans.TransactionStatus    != RetailEntryStatus::Voided
                join transactionTable
                    where   transactionTable.Channel        == salesTrans.Channel
                        &&  transactionTable.store          == salesTrans.store
                        &&  transactionTable.transactionId  == salesTrans.transactionId
                        &&  transactionTable.terminal       == salesTrans.terminalId
                        &&  transactionTable.type           != RetailTransactionType::SuspendedTransaction;
        }

        return salesTrans.LineDscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalStatementLoyaltyDiscount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the discount amounts for a specified statement code.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of a transaction.
    /// </param>
    /// <param name="_statementCode">
    /// A statement code value.
    /// </param>
    /// <returns>
    /// The loyalty discount amount of sales entries.
    /// </returns>
    public static DiscAmount totalStatementLoyaltyDiscount_RU(  RetailStatementId   _statementId,
                                                                RetailStatementCode _statementCode)
    {
        RetailStatementTable        statementTable;
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionTable      transactionTable;

        statementTable = RetailStatementTable::find(_statementId);

        select sum(LoyaltyDiscAmount_RU) from salesTrans
            where   salesTrans.store            == statementTable.storeId
                &&  salesTrans.StatementId      == statementTable.statementId
                &&  salesTrans.StatementCode    == _statementCode
            join transactionTable
                where   transactionTable.Channel        == salesTrans.Channel
                    &&  transactionTable.store          == salesTrans.store
                    &&  transactionTable.transactionId  == salesTrans.transactionId
                    &&  transactionTable.terminal       == salesTrans.terminalId
                    &&  transactionTable.type           != RetailTransactionType::SuspendedTransaction;

        return salesTrans.LoyaltyDiscAmount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalStatementNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the net amounts for a specified statement code.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of a transaction.
    /// </param>
    /// <param name="_statementCode">
    /// A statement code value.
    /// </param>
    /// <returns>
    /// The total net amount of sales entries.
    /// </returns>
    public static RetailNetAmount totalStatementNetAmount(  RetailStatementId   _statementId,
                                                            RetailStatementCode _statementCode)
    {
        RetailStatementTable        statementTable;
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionTable      transactionTable;

        statementTable = RetailStatementTable::find(_statementId);

        if (_statementId)
        {
            select sum(NetAmount) from salesTrans
                where   salesTrans.store                == statementTable.storeId
                    &&  salesTrans.StatementId          == statementTable.statementId
                    &&  salesTrans.TransactionStatus    != RetailEntryStatus::Voided
                join transactionTable
                    where   transactionTable.Channel        == salesTrans.Channel
                        &&  transactionTable.store          == salesTrans.store
                        &&  transactionTable.transactionId  == salesTrans.transactionId
                        &&  transactionTable.terminal       == salesTrans.terminalId
                        &&  transactionTable.type           != RetailTransactionType::SuspendedTransaction;
        }

        return salesTrans.NetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalStatementTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the tax amounts for a specified statement code.
    /// </summary>
    /// <param name="_statementId">
    /// The statement number of a transaction.
    /// </param>
    /// <param name="_statementCode">
    /// A statement code value.
    /// </param>
    /// <returns>
    /// The total tax amount of sales entries.
    /// </returns>
    public static TaxAmount totalStatementTaxAmount(RetailStatementId          _statementId,
                                                    RetailStatementCode        _statementCode)
    {
        RetailTransactionSalesTrans salesTrans;
        RetailStatementTable        statementTable;
        RetailTransactionTable      transactionTable;

        statementTable  = RetailStatementTable::find(_statementId);

        if (_statementId)
        {
            select sum(TaxAmount) from salesTrans
                where   salesTrans.store                == statementTable.storeId
                    &&  salesTrans.StatementId          == _statementId
                    &&  salesTrans.TransactionStatus    != RetailEntryStatus::Voided
                join transactionTable
                    where   transactionTable.Channel        == salesTrans.Channel
                        &&  transactionTable.store          == salesTrans.store
                        &&  transactionTable.transactionId  == salesTrans.transactionId
                        &&  transactionTable.terminal       == salesTrans.terminalId
                        &&  transactionTable.type           != RetailTransactionType::SuspendedTransaction;
        }

        return salesTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the original transaction if this is a returned sales trans.
    /// </summary>
    /// <returns>
    /// The original transaction.
    /// </returns>
    public InventTransId originalInventTransId()
    {
        InventTransId originalTransId;

        if (this.returnTransactionId && this.returnStore && this.returnTerminalId && this.returnLineNum)
        {
            RetailStoreTable returnStoreTable = RetailStoreTable::find(this.returnStore);

            RetailTransactionTable transactionTable;
            select firstonly salesOrderId, invoiceId, statementId from transactionTable
                index hint transactionIdx
                where transactionTable.transactionId == this.returnTransactionId &&
                      transactionTable.store == this.returnStore &&
                      transactionTable.Channel == returnStoreTable.RecId &&
                      transactionTable.terminal == this.returnTerminalId;

            if (this.statementId == transactionTable.statementId)
            {
                // Returns that happen in the same statement do not require ReturnInventTransId.
                // Inventory cost is the same for the original sale and the return.
                originalTransId = '';

                return originalTransId;
            }

            RetailEodStatementIgnoreReturnLink ignoreReturnLink = RetailStatementTable::find(this.statementId).IgnoreReturnLink;

            // Original sale is not marked in a statement and ignoreReturnLink is turned off.
            if (!transactionTable.statementId && ignoreReturnLink == NoYes::No)
            {
                throw error(strFmt("@Retail:RetailEodOriginalSaleWithoutStatement", this.statementId, this.returnTransactionId));
            }

            // Original sale has not been posted yet. If the IgnoreReturnLink parameter is set, we post the return as a blind return and don't throw an error.
            if (!transactionTable.invoiceId)
            {

                if (ignoreReturnLink == NoYes::Yes)
                {
                    // this.RecId may not be populated when transactions are aggregated.
                    CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
                    eventSource.EventWriteStatementsIgnoreReturnLinkTransactionSalesTrans(this.statementId, this.RecId);

                    originalTransId = '';

                    return originalTransId;
                }
                else
                {
                    throw error(strFmt("@Retail:RetailEodOriginalSaleNotPostedForReturn", this.statementId, this.returnTransactionId, transactionTable.statementId));
                }
            }

            RetailTransactionSalesTrans originalSalesTrans = RetailTransactionSalesTrans::find(this.returnTransactionId, this.returnStore, this.returnTerminalId, this.returnLineNum);

            if (RetailEodStatementConfigurationAccessor::constructFromStatementId(this.statementId).isAggregateBeforePosting())
            {
                Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ItemInfo itemInfo = RetailTransactionTransformer::ReadOneTransactionSalesTrans(transactionTable, originalSalesTrans);
                CustAccount custAccount = originalSalesTrans.custAccount ? originalSalesTrans.custAccount : RetailStoreTable::find(originalSalesTrans.store).DefaultCustAccount;
                originalTransId = SalesLine::findByRetailSalesTrans(transactionTable.salesOrderId, custAccount, itemInfo).InventTransId;
            }
            else
            {
                originalTransId = originalSalesTrans.inventTransId;
            }
        }

        return originalTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefLineNumRetailTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>RetailTransactionSalesTrans</c> record by using jump reference.
    /// </summary>
    /// <param name="_transactionId">
    /// The ID of a transaction.
    /// </param>
    /// <param name="_storeId">
    /// The ID of a store.
    /// </param>
    /// <param name="_terminalId">
    /// The ID of a POS terminal.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of a transaction.
    /// </param>
    /// <param name="_channelRecId">
    /// The ID of a channel.
    /// </param>
    public static void jumpRefLineNumRetailTransactionSalesTrans(RetailTransactionId _transactionId,
                                                RetailStoreId       _storeId,
                                                RetailTerminalId    _terminalId,
                                                LineNum             _lineNum,
                                                RetailChannelRecId _channelRecId)
    {
        Args args = new Args();
        args.record(RetailTransactionSalesTrans::find(_transactionId, _storeId, _terminalId, _lineNum, false, _channelRecId));
        new MenuFunction(menuitemDisplayStr(RetailTransactionSalesTrans), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4040288</DeveloperDocumentation>
	<FormRef>RetailTransactionSalesTrans</FormRef>
	<Label>@RET3214</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>transactionId</TitleField1>
	<TitleField2>lineNum</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>transactionLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>transactionLineIdx</PrimaryIndex>
	<ReplacementKey>transactionLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>receiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>store</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>netPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shelf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discAmountFromStdPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>stdNetPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discOfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>linkedItemNotOriginal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemCorrectedLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>returnNoSale</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>weightItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>weightManuallyEntered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>priceChange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>originalOfLinkedItemList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemPostingGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalRoundedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>counter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>variantId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>replicated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custInvoiceDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>unitQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>unitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalDiscPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalDiscInfoCodeLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>periodicDiscType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountAmountForPrinting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>periodicDiscGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>purchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>replicationCounterFromOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventStatusSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>returnTransactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>returnQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElectronicDeliveryEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElectronicDeliveryEmailContent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>businessDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoyaltyDiscPct_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodicPercentageDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercentageDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Exempt_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HSNCode_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAccountingCode_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingCalculatedWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonGST_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelledTransactionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discounts</Name>
			<Label>@RET3313</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>infocodeDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineDscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>periodicDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoyaltyDiscAmount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderDiscountPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET4871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transactionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@RET3059</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>variantId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>barcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>giftcard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PosIs</Name>
			<Label>@RET2364</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>prescriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pumpId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SaleDetails</Name>
			<Label>@RET3314</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>keyboardItemEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>priceInBarcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineWasDiscounted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemIdScanned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>scaleItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>priceChange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SaleOrigin</Name>
			<Label>@RET3315</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>store</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>section</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>receiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shift</Name>
			<Label>@RET3189</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shift</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shiftDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Statement</Name>
			<Label>@RET3248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>statementCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeOfTransaction</Name>
			<Label>@RET3292</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Totals</Name>
			<Label>@RET3226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discAmountWithoutTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>netAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>netAmountInclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiftCardBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxParameters</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxOverrideCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTaxExemptByTaxOverride</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>returnTransactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelledTransactionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>taxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>terminalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>transactionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailTransactionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>store</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>barcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBarCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BlockQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBlockQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>businessDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBusinessDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>comment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCommentEx5</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>costAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>counter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCounter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>custAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailAsyncCustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>custDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>custInvoiceDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>discAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>discAmountWithoutTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmountWithoutTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>discAmountFromStdPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>discGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>discOfferId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDiscountOfferId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscountAmountForPrinting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@RET3311</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ElectronicDeliveryEmail</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ElectronicDeliveryEmailContent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShipAddressEmailContent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxExemptTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>giftcard</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailGiftcard</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HSNCode_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HSNCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>infocodeDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSerialId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>inventStatusSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailInventStatusSales</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>itemCorrectedLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailItemCorrectedLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>itemIdScanned</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailItemIdScanned</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemPostingGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>keyboardItemEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailKeyboardItemEntry</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>lineDscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@RET3307</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineManualDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineManualDiscountPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>lineNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>lineWasDiscounted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLineWasDiscounted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>linkedItemNotOriginal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLinkedItemNotOriginal</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListingId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelListingId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoyaltyDiscAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyDiscAmount_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoyaltyDiscPct_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyDiscPct_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>netAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNetAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>netAmountInclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNetAmountInclTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>netPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNetPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Origin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailConnDistributionLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>originalOfLinkedItemList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOriginalOfLinkedItemList</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>originalPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalTaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalTaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>periodicDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@RET3310</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>periodicDiscGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPeriodicDiscGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>periodicDiscType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailPeriodicDiscType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PeriodicPercentageDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>prescriptionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrescriptionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>priceChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPriceChange</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>priceInBarcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPriceInBarcode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>pumpId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@RET4872</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>purchId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>receiptId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailReceiptId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>replicated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReplicated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>replicationCounterFromOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReplicationCounter</ExtendedDataType>
			<Label>@RET3920</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>returnLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@Retail:ReturnLineNumber</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>returnNoSale</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReturnNoSale</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>returnQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@Retail:ReturnQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>returnStore</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Label>@Retail:ReturnStoreId</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>returnTerminalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
			<Label>@Retail:ReturnTerminalId</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>returnTransactionId</Name>
			<AssetClassification>End User Pseudonymous Identifiers</AssetClassification>
			<ExtendedDataType>RetailTransactionId</ExtendedDataType>
			<Label>@Retail:ReturnTransactionId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFIDTagId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDTagId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>scaleItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailScaleItem</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>section</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSectionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shelf</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShelfId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shift</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShiftId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>shiftDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShiftDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipSalesLine_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>staffId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<Label>@RET3312</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>stdNetPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNetPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>taxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>totalDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@RET3308</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>totalDiscInfoCodeLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>totalDiscPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
			<Label>@RET3309</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>totalRoundedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailRoundedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>transactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailItemTransactionCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>transactionStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransEntryStatus</ExtendedDataType>
			<EnumType>RetailEntryStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>transDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>transTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>unit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>unitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>unitQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>variantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>weightItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWeightItem</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>weightManuallyEntered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWeightManuallyEntered</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccountAsync</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailAsyncCustAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FulfillmentStoreId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailFulfillmentStoreId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftCardNumber</Name>
			<AssetClassification>End User Pseudonymous Identifiers</AssetClassification>
			<ExtendedDataType>RetailGiftCardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSourceID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContinuityScheduleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityScheduleID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTransRecId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MCRCustInvoiceTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InstallmentEligible</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRInstallmentEligible</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpSellOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRUpSellOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UpSellOriginOfferId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRItemIdOfferId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentInventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GiftCardBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailGiftCardBalance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceAccountingCode_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ServiceAccountingCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>staff</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@RET3312</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercentageDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
			<Label>@SYS301377</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnInventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@Ret_HF_174393:SalesTransInventoryDimensionForReturn</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingCalculatedWMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxOverrideCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxOverrideCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTaxExemptByTaxOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsTaxExemptByTaxOverride</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiftCardOperation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailGiftCardSalesLineOperation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiftCardType</Name>
			<EnumType>RetailGiftCardType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TenderDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@Retail:TenderDiscountAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TenderDiscountPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
			<Label>@Retail:TenderDiscountPercentage</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NonGST_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonGST_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxRateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRateTypeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRatePercent</Name>
			<ExtendedDataType>RetailTaxRatePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptPriceInclusiveReductionAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTaxExemptReductionAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptPriceInclusiveOriginalPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTaxExemptOriginalPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>PickupStartTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPickupTimeslotStartTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>PickupEndTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPickupTimeslotEndTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnTrackingStatus</Name>
			<ExtendedDataType>RetailReturnTrackingStatus</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CancelledTransactionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransactionId</ExtendedDataType>
			<Label>@Retail:CancelledTransactionId</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>transactionLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Channel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>terminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>qty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>unit</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemTransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StoreDateTimeStatus</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>inventTaxCustIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>taxGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>custAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>unit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventStatusSales</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>custStmtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>custAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>statCalcUpdateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>terminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>staffId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>custAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Origin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>replicationCounterFromOrigin</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>returnTransactionLineId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>returnTerminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnStore</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StoreTransactionStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventStatusSales</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AggregatedSalesTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>unit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>price</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>taxGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>variantId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventBatchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>totalDiscPct</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodicPercentageDiscount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineManualDiscountPercentage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnInventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostingCalculatedWMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LinePercentageDiscount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GiftCard</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnStore</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnTerminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnTransactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionStatus</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AggregatedSalesTransPostInvIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>businessDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>taxGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>taxItemGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>unit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>price</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>terminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>staffId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>custAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>qty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GiftCardIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Channel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GiftCardType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GiftCardOperation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>giftcard</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustTransStatusTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Giftcard</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReceiptId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VariantId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionStatusCode</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventStatusSales</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>qty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>statementId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>taxGroup</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>terminalId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>businessDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Channel</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>costAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>currency</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>custAccount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>giftcard</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventBatchId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>price</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnLineNum</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnStore</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnTerminalId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>returnTransactionId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>unit</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>variantId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PickupTimeslotIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DlvMode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FulfillmentStoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PickupStartTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PickupEndTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>transactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReturnTrackingStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReturnTrackingStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>custAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>custAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<SourceEDT>DimensionDefault</SourceEDT>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>EcoResCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchId</Name>
					<SourceEDT>InventBatchId</SourceEDT>
					<Field>InventBatchId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>itemId</Field>
					<RelatedField>itemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>variantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>variantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemBarcode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventItemBarcode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>barcode</Name>
					<SourceEDT>ItemBarCode</SourceEDT>
					<Field>barcode</Field>
					<RelatedField>itemBarCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSerial</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSerial</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSerialId</Name>
					<SourceEDT>InventSerialId</SourceEDT>
					<Field>InventSerialId</Field>
					<RelatedField>InventSerialId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsPostalAddress</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>LogisticsPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>purchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>purchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailDiscountOffer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailPeriodicDiscount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>discOfferId</Name>
					<SourceEDT>RetailDiscountOfferId</SourceEDT>
					<Field>discOfferId</Field>
					<RelatedField>OfferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OfferIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStatementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStatementTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<SourceEDT>RetailStatementId</SourceEDT>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>statementIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>StoreID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>StoreId</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>store</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>store</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreWorkShiftTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreWorkShiftTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shiftDate</Name>
					<SourceEDT>RetailShiftDate</SourceEDT>
					<Field>shiftDate</Field>
					<RelatedField>shiftDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TerminalId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TerminalId</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>terminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>terminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>terminalIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTransactionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTransactionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>transactionId</Name>
					<SourceEDT>RetailTransactionId</SourceEDT>
					<Field>transactionId</Field>
					<RelatedField>transactionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>store</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>store</Field>
					<RelatedField>store</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>terminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>terminalId</Field>
					<RelatedField>terminal</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>Channel</Field>
					<RelatedField>Channel</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnRetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnStoreId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReturnStoreId</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>returnStore</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>returnStore</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnRetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnTerminalId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReturnTerminalId</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>returnTerminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>returnTerminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnRetailTransactionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTransactionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnRetailTransactionTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>returnTransactionId</Name>
					<SourceEDT>RetailTransactionId</SourceEDT>
					<Field>returnTransactionId</Field>
					<RelatedField>transactionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>taxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>taxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OriginalTaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginalTaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>OriginalTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OriginalTaxItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginalTaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>OriginalTaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<RelatedTable>WMSLocation</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseLocation</Name>
					<Field>WarehouseLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlate</Name>
					<Field>LicensePlate</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSInventStatus</Name>
			<RelatedTable>WHSInventStatus</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventStatus</Name>
					<Field>InventStatus</Field>
					<RelatedField>InventStatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesGroup</Name>
					<Field>SalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<RelatedTable>InventLocation</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HSNCode_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HSNCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HSNCode_IN</Name>
					<Field>HSNCode_IN</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ServiceAccountingCode_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ServiceAccountingCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceAccountingCode_IN</Name>
					<Field>ServiceAccountingCode_IN</Field>
					<RelatedField>SAC</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRateType</Name>
					<Field>TaxRateType</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>