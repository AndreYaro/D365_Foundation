<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveProcessHistoryTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransArchiveProcessHistoryTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static InventTransArchiveProcessHistoryTable create(FromDate _fromDate, ToDate _toDate)
    {
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;
        inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod = _fromDate;
        inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod = _toDate;
        inventTransArchiveProcessHistoryTable.Executed = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        inventTransArchiveProcessHistoryTable.InventTransArchiveState = InventTransArchiveState::Processing;
        inventTransArchiveProcessHistoryTable.Active = NoYes::Yes;

        UserInfo userInfo;
        select Name, networkAlias from userInfo
            where userInfo.Id == curUserId();

        inventTransArchiveProcessHistoryTable.ExecutionUserName = userInfo.name ? userInfo.name : userInfo.networkAlias;
        return inventTransArchiveProcessHistoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOverlapPeriodDate</Name>
				<Source><![CDATA[
    public static boolean existsOverlapPeriodDate(FromDate _fromDate, ToDate _toDate)
    {
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;

        select firstonly RecId from inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.IsReverse == NoYes::No
               && inventTransArchiveProcessHistoryTable.Active
               && inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod  <= _fromDate
               && inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod   >= _toDate;

        if (inventTransArchiveProcessHistoryTable.RecId)
        {
            return true;
        }

        select firstonly RecId from inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.IsReverse == NoYes::No
               && inventTransArchiveProcessHistoryTable.Active
               && (  (inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod      >= _fromDate
                      && inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod   <= _toDate)
                  || (inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod       >= _fromDate
                      && inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod    <= _toDate));
        
        if (inventTransArchiveProcessHistoryTable.RecId)
        {
            return true;
        }

        return false;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public static boolean validate(FromDate _fromDate, ToDate _toDate)
    {
        if (InventTransArchiveProcessHistoryTable::existsOverlapPeriodDate(_fromDate, _toDate))
        {
            return checkFailed("@SCM:ArchivePeriodDateOverlapExistingArchivedTransPeriodV2");
        } 

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {    
        return super() && InventTransArchiveProcessHistoryTable::validate(this.FromDateOfClosedPeriod, this.EndDateOfClosedPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySessionId</Name>
				<Source><![CDATA[
    public static InventTransArchiveProcessHistoryTable findBySessionId(SysGuidString _sessionId, boolean _forUpdate = false)
    {
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;

        if (_sessionId)
        {
            inventTransArchiveProcessHistoryTable.selectForUpdate(_forUpdate);

            select firstonly inventTransArchiveProcessHistoryTable
                where inventTransArchiveProcessHistoryTable.SessionId == _sessionId;
        }

        return inventTransArchiveProcessHistoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReverseJob</Name>
				<Source><![CDATA[
    public boolean existsReverseJob()
    {
        InventTransArchiveProcessHistoryTable reverseInventTransArchiveProcessHistoryTable;
        select firstonly RecId from reverseInventTransArchiveProcessHistoryTable
                where reverseInventTransArchiveProcessHistoryTable.ReverseArchivingRefRecId == this.RecId;

        return reverseInventTransArchiveProcessHistoryTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    public static boolean exists()
    {
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;
        select firstonly RecId from inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.Active == NoYes::Yes
               && inventTransArchiveProcessHistoryTable.IsReverse == NoYes::No;

        return inventTransArchiveProcessHistoryTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNotFinishedArchiveJob</Name>
				<Source><![CDATA[
    public static boolean existsNotFinishedArchiveJob()
    {
        inventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;
        select firstonly RecId from inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.Active
               && inventTransArchiveProcessHistoryTable.InventTransArchiveState < InventTransArchiveState::Ended;
        return inventTransArchiveProcessHistoryTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArchivingInvolvedInClosingCancel</Name>
				<Source><![CDATA[
    public static boolean checkArchivingInvolvedInClosingCancel(InventClosing _inventClosing)
    {
        if (!InventTransArchiveFeature::isEnabled())
        {
            return true;
        }

        str adjustmentTypeStr = enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType);
        if (InventTransArchiveProcessHistoryTable::existsNotFinishedArchiveJob())
        {
            return checkFailed(strFmt("@SCM:PreventClosingCancelWhenExistingArchivingJobNotFinishedV2", adjustmentTypeStr));
        }
        
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;

        // Later inventory transaction archive job exists
        select firstonly RecId from inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.Active
                && inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod >= _inventClosing.TransDate;
        if (inventTransArchiveProcessHistoryTable.RecId)
        {
            return checkFailed(strFmt("@SCM:PreventClosingCancelAsSubsequentArchivingExstisV2", adjustmentTypeStr)
                            + "\n" + "@SCM:CancelSubSequentArchivingV2");
        } 

        // Inventory tranasction archive job executed after this invenotry closing or recalculation exists
        select firstonly EndDateOfClosedPeriod from inventTransArchiveProcessHistoryTable
            order by inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod desc
            where inventTransArchiveProcessHistoryTable.Active
                && inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod <  _inventClosing.TransDate
                && inventTransArchiveProcessHistoryTable.Executed              > _inventClosing.Executed; 
        
        if (inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod)
        {
            return checkFailed(strFmt("@SCM:PreventClosingCancelAsArchivingJobExecutedAfterClosingV2",
                        adjustmentTypeStr,
                        inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod));
        }

        if (_inventClosing.AdjustmentType == InventAdjustmentType::Closing)
        {
            // Check if any inventory transaction archive job depends on this cancel closing
            select firstonly FromDateOfClosedPeriod, EndDateOfClosedPeriod from inventTransArchiveProcessHistoryTable
                order by inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod desc
                where inventTransArchiveProcessHistoryTable.Active
                   && inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod <= _inventClosing.TransDate;

            if (inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod == _inventClosing.TransDate)
            {
                return checkFailed(strFmt("@SCM:PreventClosingCancelWhenExistingArchveJobProcessedOnClosePeriodV2",
                            adjustmentTypeStr,
                            inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod,
                            inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod));

            }
            else if (inventTransArchiveProcessHistoryTable.RecId)
            {
                InventClosing firstInventoryClosingAfterArchiveJob;

                select firstonly RecId from firstInventoryClosingAfterArchiveJob
                    order by firstInventoryClosingAfterArchiveJob.TransDate asc
                    where firstInventoryClosingAfterArchiveJob.TransDate      <  _inventClosing.TransDate
                       && firstInventoryClosingAfterArchiveJob.TransDate      >= inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod
                       && firstInventoryClosingAfterArchiveJob.AdjustmentType == InventAdjustmentType::Closing;

                if (!firstInventoryClosingAfterArchiveJob.RecId)
                {
                    return checkFailed(strFmt("@SCM:PreventClosingCancelWhenExistingArchveJobProcessedOnClosePeriodV2",
                                adjustmentTypeStr,
                                inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod,
                                inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod));
                }
            }          
        } 

        InventTransArchive inventTransArchive;
        InventSettlement inventSettlement;

        select firstonly FromDateOfClosedPeriod, EndDateOfClosedPeriod from inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.Active == NoYes::Yes
            exists join inventTransArchive
            where inventTransArchive.SessionId == inventTransArchiveProcessHistoryTable.SessionId
            exists join inventSettlement
            where inventSettlement.Voucher   == _inventClosing.Voucher
               && inventSettlement.TransDate == _inventClosing.TransDate
               && inventSettlement.Cancelled == NoYes::No
               && inventTransArchive.InventTrans == inventSettlement.TransRecId;

        if (inventTransArchiveProcessHistoryTable)           
        {
            return checkFailed(strFmt("@SCM:PreventClosingCancelAsInventTransHasBeenArchivedV2",
                        inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod,
                        inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotFinishedArchiveJob</Name>
				<Source><![CDATA[
    public static boolean checkNotFinishedArchiveJob()
    {
        if (InventTransArchiveFeature::isEnabled() &&
            InventTransArchiveProcessHistoryTable::existsNotFinishedArchiveJob())
        {
            return checkFailed("@SCM:PreventClosingRecalculationWhenExistingArchivingJobNotFinishedV2");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByArchiveDate</Name>
				<Source><![CDATA[
    public static InventTransArchiveProcessHistoryTable findByArchiveDate(FromDate _fromDate, ToDate _toDate, boolean _forUpdate = false)
    {
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;

        select firstonly inventTransArchiveProcessHistoryTable
            where inventTransArchiveProcessHistoryTable.Active == NoYes::Yes
               && inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod <= _fromDate
               && inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod  >= _toDate;

        return inventTransArchiveProcessHistoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverseInventTransArchive</Name>
				<Source><![CDATA[
    internal boolean canReverseInventTransArchive()
    {
        InventTransArchive inventTransArc;

        select count(RecId) from inventTransArc
            where inventTransArc.SessionId == this.SessionId;

        boolean ret = inventTransArc.RecId > 0;

        if (ret)
        {
            // Not exists a LTR archive job
            InventTransArchiveTrans archiveTrans = InventTransArchiveTrans::findByArchiveDate(this.FromDateOfClosedPeriod, this.EndDateOfClosedPeriod);
            ret = archiveTrans.RecId == 0;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventTransArchiveProcessHisotryTableDevDoc</DeveloperDocumentation>
	<Label>@SCM:InventTransArchiveProcessingTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>FromDateOfClosedPeriod</TitleField1>
	<TitleField2>EndDateOfClosedPeriod</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>FromDateToDateIdx</ClusteredIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Session</Name>
			<Label>@SYS7115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StopRunning</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateOfClosedPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDateOfClosedPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutionUserName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReverse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDateOfClosedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDateOfClosedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExecutionUserName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>UserIdStr</ExtendedDataType>
			<Label>@SCM:InventTransArchivingUserName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReverse</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22850</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransArchiveState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>InventTransArchiveState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StopRunning</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS78017</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReverseArchivingRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Executed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Sys10114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SessionId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysGuidString</ExtendedDataType>
			<Label>@SYS7115</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BundleSize</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SCM:InventTransArchiveProcessHistoryTableBundleSize</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BundleCount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SCM:InventTransArchiveProcessHistoryTableBundleCount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaskCount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SCM:InventTransArchiveProcessHistoryTableTaskCount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DurationMs</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SCM:InventTransArchiveProcessHistoryTableDuration</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FromDateToDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FromDateOfClosedPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EndDateOfClosedPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsReverse</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SessionIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SessionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActiveEndDateExecutedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EndDateOfClosedPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Executed</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>