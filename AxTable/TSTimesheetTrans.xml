<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSTimesheetTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDate</Name>
				<Source><![CDATA[
    public boolean checkDate()
    {
        boolean ret = true;

        TSTimesheetLineWeek lineWeek;

        select firstonly RecId, DayFrom, DayTo from lineWeek
            where lineWeek.RecId == this.tsTimesheetLineWeek;

        Debug::assert(lineWeek.RecId != 0);

        if (! (this.ProjTransDate >= lineWeek.DayFrom && this.ProjTransDate <= lineWeek.DayTo) )
        {
            //Date %1 is not within the week %2 - %3
            ret = checkFailed(strFmt("@SYS183941",this.ProjTransDate,lineWeek.DayFrom, lineWeek.DayTo));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTimeCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a work time checker for the current record.
    /// </summary>
    /// <returns>A work time checker.</returns>
    protected WorkTimeCheck createWorkTimeCheck()
    {
        return new WorkTimeCheck(this.TimeFrom, this.TimeTo, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOverlapValidationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to validate overlaps.
    /// </summary>
    /// <param name = "_tsTimesheetTrans">The cursor for the query.</param>
    /// <returns>The query to validate overlaps.</returns>
    protected SysDaQueryObject buildOverlapValidationQuery(TSTimesheetTrans _tsTimesheetTrans)
    {
        SysDaQueryObject query = new SysDaQueryObject(_tsTimesheetTrans);

        query.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(_tsTimesheetTrans, fieldStr(TSTimesheetTrans, TimesheetNbr)), new SysDaValueExpression(this.TimesheetNbr))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_tsTimesheetTrans, fieldStr(TSTimesheetTrans, tsTimesheetLineWeek)), new SysDaValueExpression(this.tsTimesheetLineWeek))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_tsTimesheetTrans, fieldStr(TSTimesheetTrans, ProjTransDate)), new SysDaValueExpression(this.ProjTransDate))
            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_tsTimesheetTrans, fieldStr(TSTimesheetTrans, RecId)), new SysDaValueExpression(this.RecId))))));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlap</Name>
				<Source><![CDATA[
    public boolean checkOverlap(boolean _isError = false)
    {                     
        WorkTimeCheck workTimeCheck = this.createWorkTimeCheck();
        TSTimesheetTrans tsTimesheetTrans;
        SysDaSearchObject searchObject = new SysDaSearchObject(this.buildOverlapValidationQuery(tsTimesheetTrans));
        SysDaSearchStatement statement = new SysDaSearchStatement();

        while (statement.nextRecord(searchObject))
        {
            if (tsTimesheetTrans.isOverlapping(workTimeCheck))
            {
                if (_isError)
                {
                    error("@SYS342756");
                    return false;
                }
                else
                {
                    warning("@SYS342757");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverlapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record is overlapping with the time checker.
    /// </summary>
    /// <param name = "_workTimeCheck">The time checker.</param>
    /// <returns>true if overlapping; otherwise, false.</returns>
    protected boolean isOverlapping(WorkTimeCheck _workTimeCheck)
    {
        return _workTimeCheck.hasOverlap(this.TimeFrom, this.TimeTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTime</Name>
				<Source><![CDATA[
    public boolean checkTime()
    {
        return this.createWorkTimeCheck().checkRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommitmentCostRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates commitment records for timesheet transaction
    /// </summary>
    public void createCommitmentCostRecords()
    {
        TSTimesheetTrans    tsTimesheetTrans = this.costCommitmentTSTimesheetTrans();

        if (tsTimesheetTrans.RecId)
        {
            if (!CostControlTransCommittedCost::existOpenBySourceDocumentLine(tsTimesheetTrans.SourceDocumentLine) &&
                AccountingDistribution::existSourceDocumentLine(tsTimesheetTrans.SourceDocumentLine))
            {
                SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(tsTimesheetTrans);
                ProjectCommitmentFacade::updateProjectCommitments(sourceDocumentLineItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCommitmentCostRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes commitment records for timesheet transaction
    /// </summary>
    public void deleteCommitmentCostRecords()
    {
        TSTimesheetTrans    tsTimesheetTrans = this.costCommitmentTSTimesheetTrans();

        if (tsTimesheetTrans.RecId)
        {
            if (CostControlTransCommittedCost::existOpenBySourceDocumentLine(tsTimesheetTrans.SourceDocumentLine) &&
                AccountingDistribution::existSourceDocumentLine(tsTimesheetTrans.SourceDocumentLine))
            {
                ProjectCommitmentFacade::deleteProjectCommitments(tsTimesheetTrans.SourceDocumentLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price for a dataarea / project / resource / category / date combination
    /// </summary>
    /// <param name="_projDataAreaId">
    /// The dataarea to find cost price for
    /// </param>
    /// <param name="_projId">
    /// the project id to find cost price for
    /// </param>
    /// <param name="_resourceRecId">
    /// the resource record ID to find cost price for
    /// </param>
    /// <param name="_categoryId">
    /// the category id to find cost price for
    /// </param>
    /// <param name="_linePropertyId">
    /// the line property id to find cost price for
    /// </param>
    /// <param name="_projTransDate">
    /// the date to find cost price for
    /// </param>
    /// <returns>
    /// the cost price
    /// </returns>
    public CostPrice getCostPrice(
        DataAreaId         _projDataAreaId,
        ProjId             _projId,
        TSResourceRecId    _resourceRecId,
        CategoryId         _categoryId,
        ProjLinePropertyId _linePropertyId,
        ProjTransDate      _projTransDate)
    {
        InterCompanyTradingPartner  tradingPartner;
        AccountNum                  accountNum;
        CostPrice       costPrice;

        if (_projDataAreaId == curext())
        {
            ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
            _projId ,
            _resourceRecId,
            _categoryId,
            _linePropertyId,
            _projTransDate,
            '',
            '');
            costPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, true);
        }
        else
        {
            tradingPartner = InterCompanyTradingPartner::findTradingCustomer(this.dataAreaId, _projDataAreaId);
            accountNum     = CustTable::findByPartyRecId(tradingPartner.CustomerParty).AccountNum;

            ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
				'',
				_resourceRecId,
				_categoryId,
				'',
				_projTransDate,
				'',
				accountNum);
            CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams);
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTimesheetLineWeek</Name>
				<Source><![CDATA[
    public void initFromTimesheetLineWeek(RefRecId _tsTimesheetLine)
    {
        TSTimesheetLineWeek tsLineWeek = TSTimesheetLineWeek::findByTimesheetLine(_tsTimesheetLine);

        if (tsLineWeek.RecId != 0)
        {
            this.tsTimesheetLineWeek = tsLineWeek.RecId;
            this.TimesheetNbr = tsLineWeek.TimesheetNbr;
            this.ProjTransDate = tsLineWeek.DayFrom;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        TSTimesheetLine timesheetLine = this.timesheetLine();

        this.setTransDate();

        this.setCostPrice(timesheetLine);
        this.setSalesPrice(timesheetLine);
        this.setTransId(timesheetLine);

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budget control for the project is enabled for the specified timesheets line.
    /// </summary>
    /// <returns>
    /// true if budget control for project is enabled for the specified timesheets line; otherwise, false.
    /// </returns>
    public boolean isProjectBudgetControlEnabled()
    {
        TSTimesheetLine tsTimesheetLine = this.timesheetLine();
        boolean         useBudgeting    = tsTimesheetLine.isProjectBudgetControlEnabled();

        if (useBudgeting)
        {
            this.setCostPrice(tsTimesheetLine);
            this.setSalesPrice(tsTimesheetLine);
        }

        return useBudgeting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TSTimesheetTrans, ProjTransDate) :
            {
                TSTimesheetLine timesheetLine = this.timesheetLine();
                this.setTransDate();
                this.setCostPrice(timesheetLine);
                this.setSalesPrice(timesheetLine);
            }
                break;

            case fieldNum(TSTimesheetTrans, CostPrice) :
                TSTimesheetLine timesheetLine = this.timesheetLine();
                this.setSalesPrice(timesheetLine);
                break;

            case fieldNum(TSTimesheetTrans, TimeFrom):
            case fieldNum(TSTimesheetTrans, TimeTo):
                this.setHoursFromToTime();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>ProjTransDate</c> field of the <c>TSTimesheetTrans</c> record.
    /// </summary>
    /// <returns>
    /// The <c>ProjTransDate</c> value.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        return this.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the parent source document line.
    /// </summary>
    /// <returns>
    ///     Always returns null.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line enumeration name.
    /// </summary>
    /// <returns>
    /// Always returns the <c>SourceDocumentLine_ProjectTimesheets</c> enumeration name.
    /// </returns>
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_ProjectTimesheets);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line enumeration value.
    /// </summary>
    /// <returns>
    /// Always returns the <c>SourceDocumentLine_ProjectTimesheets::TimesheetTrans</c> enumeration value.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_ProjectTimesheets::TimesheetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a source document header record associated with the parent <c>TSTimesheetTrans</c> record.
    /// </summary>
    /// <returns>
    /// A <c>SourceDocumentHeader</c> buffer.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;
        TSTimesheetTable tsTimesheetTable;
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;

        select firstonly sourceDocumentHeader
            exists join tsTimesheetTable
            where tsTimesheetTable.SourceDocumentHeader == sourceDocumentHeader.RecId
            exists join tsTimesheetLine
            where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
            exists join tsTimesheetLineWeek
                where tsTimesheetLine.RecId     == tsTimesheetLineWeek.tsTimesheetLine
                   && tsTimesheetLineWeek.RecId == this.tsTimesheetLineWeek;

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPrice</Name>
				<Source><![CDATA[
    public void setCostPrice(TSTimesheetLine _timesheetLine)
    {
        TSTimesheetTable tsTimesheetTable = TSTimesheetTable::find(this.TimesheetNbr);

        ProjHourCostPrice projHourCostPrice = ProjHourCostPrice::findResourceRate(tsTimesheetTable.Resource, tsTimesheetTable.PeriodFrom);

        if (projHourCostPrice.CostPrice != 0)
        {
            this.CostPrice = projHourCostPrice.CostPrice;
        }
        else
        {
            this.CostPrice = this.getCostPrice(
                                        _timesheetLine.ProjectDataAreaId,
                                        _timesheetLine.ProjId ,
                                        _timesheetLine.Resource,
                                        _timesheetLine.CategoryId,
                                        _timesheetLine.LinePropertyId,
                                                this.ProjTransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHoursFromToTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the hours of the timesheet transaction based on the transaction start and end time.
    /// </summary>
    /// <remarks>
    ///    The quantity calculated is the (<c>TimeTo</c> - <c>TimeFrom</c>)/3600.
    /// </remarks>
    public void setHoursFromToTime()
    {
        #TimeConstants
        // Registration of timesheet according to from & to time
        FromTime    fromTime = this.TimeFrom;
        ToTime      toTime   = this.TimeTo != 0 ? this.TimeTo : #secondsPerDay;

        this.Hours = ((toTime - fromTime) / #secondsPerHour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPrice</Name>
				<Source><![CDATA[
    public void setSalesPrice(TSTimesheetLine _timesheetLine)
    {
        boolean             priceFound;
        ProjInvoiceTable    projInvoiceTable;
        ProjTable           projTable;
        ProjCategory        projCategory;
        CurrencyCode        costCurrency;

        if (_timesheetLine.ProjectDataAreaId == _timesheetLine.DataAreaId)
        {
            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                _timesheetLine.ProjId,
                _timesheetLine.Resource,
                _timesheetLine.CategoryId,
                _timesheetLine.LinePropertyId,
                this.CostPrice,
                _timesheetLine.CurrencyCode,
                this.ProjTransDate,
                '',
                '',
                '',
                ResourceFacade::getResourceCategory(_timesheetLine.Resource, this.ProjTransDate));
            [this.SalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false, true);
        }
        else
        {
            costCurrency = Ledger::accountingCurrency();

            changecompany (_timesheetLine.ProjectDataAreaId)
            {
                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
					_timesheetLine.ProjId,
					_timesheetLine.Resource,
					_timesheetLine.CategoryId,
					_timesheetLine.LinePropertyId,
					ExchangeRateHelper::mstPrice(this.CostPrice, costCurrency),
					_timesheetLine.ProjCompanySalesCurrency,
					this.ProjTransDate);
                [this.ProjCompanySalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
            }

            select crossCompany RecId from projTable
                where projTable.ProjId      == _timesheetLine.ProjId &&
                      projTable.DataAreaId  == _timesheetLine.ProjectDataAreaId;

            select crossCompany RecId from projCategory
                where projCategory.CategoryId == _timesheetLine.CategoryId &&
                      projCategory.DataAreaId == _timesheetLine.ProjectDataAreaId;

            // Intercompany timesheets have a different sales price setup, which may depend on the sales price of the
            // contracting legal entity. This is the reason we check for that price first.
            this.SalesPrice = ProjTransferPrice::findTransferPrice(
                                                            _timesheetLine.Resource,
                                                            _timesheetLine.ProjectDataAreaId,
                                                                   projTable.RecId,
                                                                   projCategory.RecId,
                                                            _timesheetLine.LinePropertyId,
                                                                   this.TransDate,
                                                                   curext(),
                                                            _timesheetLine.CurrencyCode,
                                                                   projInvoiceTable.RecId,
                                                                   this.CostPrice,
                                                            ExchangeRateHelper::curPrice2CurPrice(this.ProjCompanySalesPrice, _timesheetLine.ProjCompanySalesCurrency, _timesheetLine.CurrencyCode),
                                                                   ProjTransferPriceTransType::Timesheet);

            changecompany (_timesheetLine.ProjectDataAreaId)
            {
                // We now update the final sales price again, since it may depend on the cost price, that in this case is the transfer price.
                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                    _timesheetLine.ProjId,
                    _timesheetLine.Resource,
                    _timesheetLine.CategoryId,
                    _timesheetLine.LinePropertyId,
                    ExchangeRateHelper::mstPrice(this.SalesPrice, _timesheetLine.CurrencyCode),
                    _timesheetLine.ProjCompanySalesCurrency,
                    this.ProjTransDate);
                [this.ProjCompanySalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction date of the journal line.
    /// </summary>
    /// <remarks>
    ///    The transaction date is set to the end date of the corresponding period line if the <c>TSVoucherDateChange</c> enumeration value is a <c>ProjPeriodEnd</c> data type. The transaction date is
    ///    set to the end date of the corresponding ledger period if <c>TSVoucherDateChange</c> enumeration value is a <c>LedgerPeriodEnd</c> data type. The transaction date is set to the project date
    ///    of the journal line if <c>TSVoucherDateChange</c> enumeration value is a <c>ProjTransDate</c> data type.
    /// </remarks>
    public void setTransDate()
    {
        // The parameter to set whether to use Period end date or Ledger end date is obsolete
        // The TransDate, which is used for setting both the Project transaction date in Project Actual table
        // and the Ledger Posting Date in Project sub ledger, should now be the same as the timesheet trans date (ProjTransDate)
        this.TransDate  = this.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a transaction id for current <c>TSTimesheetTrans</c> record.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// <c>TSTimesheetLine</c> record to get data area id from.
    /// </param>
    /// <remarks>
    /// This method generates transaction id using number sequence from the data
    /// area specified <c>TSTimesheetLine</c> record belongs to.
    /// </remarks>
    public void setTransId(TSTimesheetLine _tsTimesheetLine)
    {
        changecompany(_tsTimesheetLine.ProjectDataAreaId)
        {
            this.TransId = ProjCostTrans::newTransId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetLine</Name>
				<Source><![CDATA[
    public TSTimesheetLine timesheetLine(boolean _forUpdate = false)
    {
        TSTimesheetLineWeek tsLineWeek = TSTimesheetLineWeek::findRecId(this.tsTimesheetLineWeek);

        return TSTimesheetLine::findRecId(tsLineWeek.tsTimesheetLine, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDay</Name>
				<Source><![CDATA[
    public display DateDayName transactionDay()
    {
        return dayName(dayOfWk(this.ProjTransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overridden to submit the source document line implementation and check budget.
    /// </summary>
    public void update()
    {
        TSTimesheetLine tsTimesheetLine = this.timesheetLine();

        super();


        if (this.orig().ApprovalStatus == this.ApprovalStatus && this.orig().Voucher == this.Voucher)
        {
            this.setCostPrice(tsTimesheetLine);
            this.setSalesPrice(tsTimesheetLine);
        }
        else
        {
            this.isProjectBudgetControlEnabled();
        }


        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TSTimesheetTrans, ProjTransDate):
                ret = ret && this.checkDate();
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        // Since SourceDocumentLine RecId is mandatory and the field is set in table.insert method
        // validateWrite will be called first in the client before the actual insert method is called
        // so if SDLine = 0 (newly created record via client), skip super
        boolean ret = true;

        if (this.SourceDocumentLine != 0)
        {
            ret = super();
        }

        ret = ret && this.checkDate();

        ProjParameters projParameters = ProjParameters::find();

        if (TSResource::timesheetRequiresStartStopTime(TSTimesheetTable::find(this.TimesheetNbr).Resource,projParameters))
        {
            switch (projParameters.TimeOverlap)
            {
                case ErrorTolerance::Accept :
                    break;
                case ErrorTolerance::Warning :
                    this.checkOverlap();
                    break;
                case ErrorTolerance::Error :
                    ret = ret && this.checkOverlap(true);
                    break;
            }

            ret = ret && this.checkTime();

            if (ret)
            {
                TSTimesheetLineWeek tsLineWeek = TSTimesheetLineWeek::findRecId(this.tsTimesheetLineWeek);
            if (tsLineWeek.RecId != 0)
            {
                    ret = tsLineWeek.checkMinTimeIncrement(this.Hours);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TSTimesheetTrans find(TSTimesheetNbr _sTimesheetNbr, RefRecId _tsLineWeek, ProjTransDate _transDate, boolean _forupdate = false)
    {
        TSTimesheetTrans tsTimesheetTrans;

        tsTimesheetTrans.selectForUpdate(_forupdate);

        if (_sTimesheetNbr)
        {
            select firstonly tsTimesheetTrans
                where tsTimesheetTrans.TimesheetNbr == _sTimesheetNbr &&
                      tsTimesheetTrans.tsTimesheetLineWeek == _tsLineWeek &&
                      tsTimesheetTrans.ProjTransDate == _transDate;
        }

        return tsTimesheetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TSTimesheetTrans</c> record with a specified source document line.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The record ID of the source document line.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetTrans</c> record if found; otherwise, and empty record.
    /// </returns>
    public static TSTimesheetTrans findBySourceDocumentLine(RefRecId _sourceDocumentLine, boolean _forUpdate = false)
    {
        TSTimesheetTrans tsTimesheetTrans;

        if (_sourceDocumentLine)
        {
            tsTimesheetTrans.selectForUpdate(_forUpdate);
            select firstonly tsTimesheetTrans where tsTimesheetTrans.SourceDocumentLine == _sourceDocumentLine;
        }

        return tsTimesheetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TSTimesheetTrans</c> record with a specified record ID.
    /// </summary>
    /// <param name="_tsTimesheetTrans">
    /// The record ID of a record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetTrans</c> record if found; otherwise, and empty record.
    /// </returns>
    public static TSTimesheetTrans findRecId(RefRecId _tsTimesheetTrans, boolean _forupdate = false)
    {
        TSTimesheetTrans tsTimesheetTrans;

        tsTimesheetTrans.selectForUpdate(_forupdate);

        if (_tsTimesheetTrans)
        {
            select firstonly tsTimesheetTrans
                where tsTimesheetTrans.RecId == _tsTimesheetTrans;
        }

        return tsTimesheetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommitmentCostCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether commitment costs records exists for timesheet line.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The <c>RecId</c> of the source document line.
    /// </param>
    /// <returns>
    /// True, if commitment costs records exists for the  specified timesheets line, false otherwise.
    /// </returns>
    public static boolean isCommitmentCostCreated(RefRecId _sourceDocumentLine)
    {
        TSTimesheetLine         tsTimesheetLine;
        TSTimesheetLineWeek     tsTimesheetLineWeek;
        TSTimesheetTrans        tsTimesheetTrans;
        boolean                 result;

        select firstonly RecId, SourceDocumentLine, TimesheetNbr from tsTimesheetTrans
            where tsTimesheetTrans.SourceDocumentLine == _sourceDocumentLine
            exists join tsTimesheetLineWeek
                where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
            exists join tsTimesheetLine
                where tsTimesheetLine.RecId        == tsTimesheetLineWeek.tsTimesheetLine
                   && tsTimesheetLine.TimesheetNbr == tsTimesheetTrans.TimesheetNbr;

        result =    tsTimesheetTrans.RecId != 0
                 && TSTimesheetTable::find(tsTimesheetTrans.TimesheetNbr).ApprovalStatus == TSAppStatus::Pending
                 && CostControlTransCommittedCost::existOpenBySourceDocumentLine(tsTimesheetTrans.SourceDocumentLine)
                 && AccountingDistribution::existSourceDocumentLine(tsTimesheetTrans.SourceDocumentLine);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPSAIndirectComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the indirect cost component group in a <c>TSTimesheetTrans</c> record.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record.
    /// </param>
    public static void setPSAIndirectComponentGroup(TSTimesheetTable _tsTimesheetTable)
    {
        PSAComponentGroupAssignment psaComponentGroupAssignment;
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans tsTimesheetTrans;

        while select forupdate ProjTransDate,psaIndirectComponentGroup from tsTimesheetTrans
            join RecId, tsTimesheetLine from tsTimesheetLineWeek
                where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
            join ProjId, CategoryId,ProjectDataAreaId,Resource from tsTimesheetLine
                where tsTimesheetLine.RecId        == tsTimesheetLineWeek.tsTimesheetLine
                   && tsTimesheetLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
        {
            if (tsTimesheetLine.ProjectDataAreaId != curext())
            {
                    continue;
            }
            else
            {
                psaComponentGroupAssignment = PSAComponentGroupAssignment::findAssignment(
                                                                                        tsTimesheetLine.ProjId,
                                                                                        tsTimesheetLine.Resource,
                                                                                            tsTimesheetLine.CategoryId,
                                                                                        tsTimesheetTrans.ProjTransDate,
                                                                                        '',
                                                                                        '');
            }

            if (psaComponentGroupAssignment.RecId != 0)
            {
                tsTimesheetTrans.psaIndirectComponentGroup = psaComponentGroupAssignment.IndirectComponentGroup;
                tsTimesheetTrans.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHoursByDate</Name>
				<Source><![CDATA[
    public static ProjQtyEmpl totalHoursByDate(RefRecId lineWeekId, ProjTransDate _date)
    {
        TSTimesheetTrans    tsTimesheetTrans;

        return (select sum(Hours) from tsTimesheetTrans
                       where    tsTimesheetTrans.tsTimesheetLineWeek == lineWeekId &&
                                tsTimesheetTrans.ProjTransDate == _date).Hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromTimesheetLineWeek</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a new <c>TSTimesheetLineWeek</c> record is created or updated.
    ///    This will create or update a record for each date entered in timesheet entry.
    /// </summary>
    /// <param name="_lineWeek">
    ///    The current record buffer for the <c>TSTimesheetLineWeek</c> record.
    /// </param>
    public static void updateFromTimesheetLineWeek(TSTimesheetLineWeek _lineWeek)
    {
        TSTimesheetTrans    timesheetTrans;
        TSTimesheetLine     tsTimesheetLine;

        tsTimesheetLine = TSTimesheetLine::findRecId(_lineWeek.tsTimesheetLine);

        ttsbegin;

        for (ProjTransDate currDate = _lineWeek.DayFrom; currDate <= _lineWeek.DayTo; currDate++)
        {
            Counter i = _lineWeek.dayOffset(currDate);

            timesheetTrans = TSTimesheetTrans::find(_lineWeek.TimesheetNbr, _lineWeek.RecId, currDate, true);

            if (_lineWeek.Hours[i])
            {
                TSTimesheetTrans::updateFromTimesheetLineWeekUpdateTSTimesheetTrans(timesheetTrans, _lineWeek, i);

                if (timesheetTrans.RecId)
                {
                    timesheetTrans.update();
                }
                else
                {
                    timesheetTrans.LineNum             = _lineWeek.LineNum;
                    timesheetTrans.TimesheetNbr        = _lineWeek.TimesheetNbr;
                    timesheetTrans.PostStatus          = _lineWeek.PostStatus;
                    timesheetTrans.PeriodDate          = _lineWeek.PeriodDate;
                    timesheetTrans.ApprovalStatus      = tsTimesheetLine.ApprovalStatus;
                    timesheetTrans.tsTimesheetLineWeek = _lineWeek.RecId;
                    timesheetTrans.ProjTransDate       = currDate;
                    timesheetTrans.setTransDate();
                    timesheetTrans.setCostPrice(tsTimesheetLine);
                    timesheetTrans.setSalesPrice(tsTimesheetLine);
                    timesheetTrans.insert();
                }
            }
            else
            {
                // if Hour == 0 and there's an existing trans record, delete it
                if (timesheetTrans.RecId)
                {
                    timesheetTrans.delete();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromTimesheetLineWeekUpdateTSTimesheetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TSTimesheetTrans</c> record buffer for the specified day offset with information from the <c>TSTimesheetLineWeek</c> record.
    /// </summary>
    /// <param name = "_trans">
    /// A <c>TSTimesheetTrans</c> record to update.
    /// </param>
    /// <param name = "_lineWeek">
    /// The current record buffer for the <c>TSTimesheetLineWeek</c> record.
    /// </param>
    /// <param name = "_dayOffset">
    /// The day offset.
    /// </param>
    [HookableAttribute(true)]
    protected static void updateFromTimesheetLineWeekUpdateTSTimesheetTrans(TSTimesheetTrans _trans, TSTimesheetLineWeek _lineWeek, int _dayOffset)
    {
        _trans.Hours      = _lineWeek.Hours[_dayOffset];
        _trans.IntComment = _lineWeek.InternalComments[_dayOffset];
        _trans.ExtComment = _lineWeek.ExternalComments[_dayOffset];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetLineWeekHours</Name>
				<Source><![CDATA[
    public static void updateTimesheetLineWeekHours(TSTimesheetLineWeek _lineWeek)
    {
        #TimeConstants

        for (Counter i = 1; i <= #daysPerWeek; i++)
        {
            _lineWeek.Hours[i] = 0;
        }

        ProjTransDate currDate = _lineWeek.DayFrom;

        // dayOffset variable needs to be set to 1 if the lineWeek period spans over a week
        int dayOffset = TSPeriods::getDayOffset(ProjPeriodTable::find(_lineWeek.timesheetTable().ProjPeriodId).WeekStart, currDate);
        dayOffset     = (_lineWeek.DayTo - _lineWeek.DayFrom == #daysPerWeek - 1) ? 1 : dayOffset;

        while (currDate <= _lineWeek.DayTo)
        {
            _lineWeek.Hours[dayOffset] = TSTimesheetTrans::totalHoursByDate(_lineWeek.RecId, currDate);

            TSTimesheetTrans::updateCommentsFromLineWeek(_lineWeek, currDate, dayOffset);

            currDate++;
            dayOffset++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommentsFromLineWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal and the external comments of a TsTimesheetTrans based on the comments of a TsTimesheetLineWeek.
    /// </summary>
    /// <param name = "_lineWeek">TsTimesheetLineWeek that contains the comments which will be used to update the TsTimesheetTrans.</param>
    /// <param name = "_periodDate">Date of the TsTimesheetTrans to be updated.</param>
    /// <param name = "_dayOffset">Offset that indicates which day to get the comment from.</param>
    protected static void updateCommentsFromLineWeek(
                                            TSTimesheetLineWeek _lineWeek,
                                            ProjPeriodFrom _periodDate,
                                            int _dayOffset)
    {
        TSTimesheetTrans tSTimesheetTrans;

        ttsbegin;
        while select forupdate tSTimesheetTrans
            where tSTimesheetTrans.TimesheetNbr == _lineWeek.TimesheetNbr &&
                  tSTimesheetTrans.tsTimesheetLineWeek == _lineWeek.RecId &&
                  tSTimesheetTrans.ProjTransDate == _periodDate
        {
            TSTimesheetTrans::updateCommentsFromLineWeekUpdateTSTimesheetTrans(tSTimesheetTrans, _lineWeek, _dayOffset);
            
            tSTimesheetTrans.update();            
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommentsFromLineWeekUpdateTSTimesheetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TSTimesheetTrans</c> record buffer for the specified day offset with information from the <c>TSTimesheetLineWeek</c> record.
    /// </summary>
    /// <param name = "_trans">The <c>TSTimesheetTrans</c> record to update.</param>
    /// <param name = "_lineWeek">The <c>TsTimesheetLineWeek</c> record that contains the comments which will be used to update the <c>TSTimesheetTrans</c> record.</param>
    /// <param name = "_dayOffset">Offset that indicates which day to get the comment from.</param>
    [HookableAttribute(true)]
    protected static void updateCommentsFromLineWeekUpdateTSTimesheetTrans(TSTimesheetTrans _trans, TSTimesheetLineWeek _lineWeek, int _dayOffset)
    {
        _trans.IntComment = _lineWeek.InternalComments[_dayOffset];
        _trans.ExtComment = _lineWeek.ExternalComments[_dayOffset];
    }

]]></Source>
			</Method>
			<Method>
				<Name>costCommitmentTSTimesheetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the current timesheet transaction for cost commitment.
    /// </summary>
    /// <returns>
    ///    A <c>TSTimesheetTrans</c> record; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    ///    The returned record has only a few fields selected.
    /// </remarks>
    private TSTimesheetTrans costCommitmentTSTimesheetTrans()
    {
        TSTimesheetLine         tsTimesheetLine;
        TSTimesheetLineWeek     tsTimesheetLineWeek;
        TSTimesheetTrans        tsTimesheetTrans;

        select firstonly RecId, SourceDocumentLine from tsTimesheetTrans
            where tsTimesheetTrans.RecId == this.RecId
            exists join tsTimesheetLineWeek
                where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
            exists join tsTimesheetLine
                where tsTimesheetLine.RecId        == tsTimesheetLineWeek.tsTimesheetLine
                   && tsTimesheetLine.TimesheetNbr == this.TimesheetNbr;

        return tsTimesheetTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS324251</DeveloperDocumentation>
	<Label>@SYS190481</Label>
	<SingularLabel>@PSA10706</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TimesheetNbr</TitleField1>
	<TitleField2>ProjTransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TSTimesheetLineWeekIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IntercompanyRevenue</Name>
			<Label>@SYS96035</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjCompanySalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prices</Name>
			<Label>@SYS12983</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS101291</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalStatus</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TSAppStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjCostPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtComment</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSComment</ExtendedDataType>
			<Label>@SYS183989</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Hours</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjQtyEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntComment</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSComment</ExtendedDataType>
			<Label>@SYS184012</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntercompanyBilled</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<Visible>No</Visible>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostStatus</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TSPostStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCompanySalesPrice</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAIndirectComponentGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PSAIndirectComponentGroupId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TimeFrom</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSTime</ExtendedDataType>
			<Label>@SYS39127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TimesheetNbr</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSTimesheetNbr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TimeTo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSTime</ExtendedDataType>
			<Label>@SYS184102</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Label>@SYS16658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TSTimesheetLineWeek</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TSTimesheetLineWeekIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TSTimesheetLineWeek</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TSTimesheetLineWeekDate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TSTimesheetLineWeek</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjTransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PSAIndirectComponentGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PSAIndirectComponentGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IntercompanyBilledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IntercompanyBilled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProjJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAIndirectComponentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PSAIndirectComponentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PSAIndirectComponentGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAIndirectComponentGroup_Timesheet</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAIndirectComponentGroup</Name>
					<Field>PSAIndirectComponentGroup</Field>
					<RelatedField>ComponentGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CompGrpIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SourceDocumentHeader_TSTimesheetTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TSTimesheetLineWeek</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TSTimesheetLineWeek</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TSTimesheetLineWeek</Name>
					<Field>TSTimesheetLineWeek</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>