<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimFieldBinding</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimFieldBinding extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the binding record for an <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_className">The name of the class.</param>
    /// <param name = "_forUpdate">Select the record for update.</param>
    /// <returns>The found record.</returns>
    public static InventDimFieldBinding find(ClassName _className, boolean _forUpdate = false)
    {
        InventDimFieldBinding inventDimFieldBinding;

        inventDimFieldBinding.selectForUpdate(_forUpdate);

        select firstOnly inventDimFieldBinding 
            where inventDimFieldBinding.ClassName == _className;

        return inventDimFieldBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the binding record for an <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_fieldName">The name of the field.</param>
    /// <param name = "_forUpdate">Select the record for update.</param>
    /// <returns>The found record.</returns>
    protected static InventDimFieldBinding findByFieldName(FieldName _fieldName, boolean _forUpdate = false)
    {
        InventDimFieldBinding inventDimFieldBinding;

        inventDimFieldBinding.selectForUpdate(_forUpdate);

        select firstOnly inventDimFieldBinding
            where inventDimFieldBinding.FieldName == _fieldName;

        return inventDimFieldBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the binding record for an <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_fieldName">The name of the field.</param>
    public static InventDimFieldBinding findOrCreateByFieldName(FieldName _fieldName)
    {
        #OCCRetryCount
        int infologLines = infologLine();

        InventDimFieldBinding inventDimFieldBinding;

        try
        {
            inventDimFieldBinding = InventDimFieldBinding::findByFieldName(_fieldName);

            if (!inventDimFieldBinding && _fieldName)
            {
                ClassName className = InventDimFieldBinding::fieldName2ClassName(_fieldName);
                if (className)
                {
                    inventDimFieldBinding = InventDimFieldBinding::create(className, _fieldName);
                }
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }

            infolog.clear(infologLines);
            flush inventDimFieldBinding;
            retry;
        }

        return inventDimFieldBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the binding record for an <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_className">The name of the class.</param>
    public static InventDimFieldBinding findOrCreate(ClassName _className)
    {
        #OCCRetryCount
        int infologLines = infologLine();

        InventDimFieldBinding inventDimFieldBinding;

        try
        {
            inventDimFieldBinding = InventDimFieldBinding::find(_className);

            if (!inventDimFieldBinding && _className)
            {
                FieldName fieldName = InventDimFieldBinding::className2FieldName(_className);
                if (fieldName)
                {
                    inventDimFieldBinding = InventDimFieldBinding::create(_className, fieldName);
                }
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }

            infolog.clear(infologLines);                    
            flush inventDimFieldBinding;
            retry;
        }

        return inventDimFieldBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    private static InventDimFieldBinding create(ClassName _className, FieldName _fieldName)
    {
        if (!_className || !_fieldName)
        {
            throw error(Error::wrongUseOfFunction(funcName()));       
        }
    
        InventDimFieldBinding inventDimFieldBinding;

        ttsbegin;
        inventDimFieldBinding.ClassName = _className;
        inventDimFieldBinding.FieldName = _fieldName;
        inventDimFieldBinding.insert();
        ttscommit;

        return inventDimFieldBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimensionClasses</Name>
				<Source><![CDATA[
    private static Enumerator inventDimensionClasses()
    {
        DictClass dictClass = new DictClass(classNum(InventDimension));
        return dictClass.extendedBy(true).getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName2ClassName</Name>
				<Source><![CDATA[
    private static ClassName fieldName2ClassName(FieldName _fieldName)
    {
        var enum = InventDimFieldBinding::inventDimensionClasses();

        while (enum.moveNext())
        {
            ClassName dimensionClassName = classId2Name(enum.current());
            if (InventDimFieldBinding::className2FieldName(dimensionClassName) == _fieldName)
            {
                return dimensionClassName;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>className2FieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the field binding for a given <c>InventDimension</c> class. 
    /// </summary>
    /// <param name = "_className">The name of the class to bind.</param>
    /// <remarks>This method is the extension point for providing the installation specific binding.</remarks>
    protected static FieldName className2FieldName(ClassName _className)
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventDimFieldBindingDevDocumentation</DeveloperDocumentation>
	<TableGroup>Framework</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>FieldNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SaveDataPerPartition>No</SaveDataPerPartition>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClassName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassName</ExtendedDataType>
			<GeneralDataProtectionRegulation>SystemMetadata</GeneralDataProtectionRegulation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<GeneralDataProtectionRegulation>SystemMetadata</GeneralDataProtectionRegulation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FieldNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClassNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ClassName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>