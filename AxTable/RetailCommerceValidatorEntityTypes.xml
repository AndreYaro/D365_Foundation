<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorEntityTypes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorEntityTypes extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// To load all the Entity types into RetailCommerceValidatorEntityTypes
    /// </summary>
    /// <returns>The number of entity types created.</returns>
    public static int64 load()
    {
        int64 numberOfEntityTypes = 0;
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesSetup::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesProduct::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesAttribute::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesAttributeGroup::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesCatalog::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesCategory::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesCategoryHierarchy::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesProductKits::getEntityType());
        numberOfEntityTypes += RetailCommerceValidatorEntityTypes::createEntityTypes(RetailCommerceValidatorRulesChannel::getEntityType());

        return numberOfEntityTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntitiesPerRuleCombinationCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of Entities multiplied by the rules of their entity types.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The number of entity / rules combinations for a given validation.</returns>
    public static int64 getEntitiesPerRuleCombinationCount(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorRules rules;
        int64 entityRuleCombinationCount = 0;
        select count(RecId) from rules where rules.EntityTypeId == "@Retail:RetailCommerceValidatorProductEntityId";
        entityRuleCombinationCount+= RetailCommerceValidatorRulesProduct::getEntityCount(_validationId) * rules.recId;
        select count(RecId) from rules where rules.EntityTypeId == "@Retail:RetailCommerceValidatorAttributeEntityTypeId";
        entityRuleCombinationCount+= RetailCommerceValidatorRulesAttribute::getEntityCount(_validationId) * rules.recId;
        select count(RecId) from rules where rules.EntityTypeId == "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel";
        entityRuleCombinationCount+= RetailCommerceValidatorRulesCatalog::getEntityCount(_validationId) * rules.recId;
        select count(RecId) from rules where rules.EntityTypeId == "@Retail:RetailCommerceValidatorCategoryEntityTypeId";
        entityRuleCombinationCount+= RetailCommerceValidatorRulesCategory::getEntityCount(_validationId) * rules.recId;
        select count(RecId) from rules where rules.EntityTypeId == "@Retail:RetailCommerceValidatorHierarachyTypeId";
        entityRuleCombinationCount+= RetailCommerceValidatorRulesCategoryHierarchy::getEntityCount(_validationId) * rules.recId;
        select count(RecId) from rules where rules.EntityTypeId == "@Retail:RetailCommerceValidatorKitValidationEntityId";
        entityRuleCombinationCount+= RetailCommerceValidatorRulesProductKits::getEntityCount(_validationId) * rules.recId;

        return entityRuleCombinationCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntityTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create Entity type.
    /// </summary>
    /// <param name = "_entityTypes">The Entity type map.</param>
    /// <returns>the number of entity types created.</returns>
    private static int64 createEntityTypes(Map _entityTypes)
    {
        System.Exception exception;
        MapEnumerator  mapEnumerator = _entityTypes.getEnumerator();
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        int counter = 0;

        try
        {
            ttsbegin;
            while (mapEnumerator.moveNext())
            {
                RetailCommerceValidatorEntityTypeId searchKey = mapEnumerator.currentKey();
                RetailCommerceValidatorEntityTypes  retailCommerceValidatorEntityTypes = RetailCommerceValidatorEntityTypes::find(searchKey, true);
            
                retailCommerceValidatorEntityTypes.EntityTypeId = searchKey;
                retailCommerceValidatorEntityTypes.EntityFunction = conPeek(mapEnumerator.currentValue(), 1);
                retailCommerceValidatorEntityTypes.EntityTableId = conPeek(mapEnumerator.currentValue(), 2);
                retailCommerceValidatorEntityTypes.EntityExecutionTestClass = conPeek(mapEnumerator.currentValue(), 3);

                if (retailCommerceValidatorEntityTypes)
                {
                    retailCommerceValidatorEntityTypes.update();
                }
                else
                {
                    retailCommerceValidatorEntityTypes.insert();
                    counter++;
                }
            }
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry('', strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorEntityTypes), 'createEntityTypes'), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry('', strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorEntityTypes), 'createEntityTypes'), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record on the <c>RetailCommerceValidatorEntityTypes</c> table.
    /// </summary>
    /// <param name = "_entityTypeId">The EntityTypeId to be found.</param>
    /// <param name = "_forUpdate">Select for update? (Y/N). Default false.</param>
    /// <returns>A table buffer from <c>RetailCommerceValidatorEntityTypes</c> table.</returns>
    public static RetailCommerceValidatorEntityTypes find(RetailCommerceValidatorEntityTypeId _entityTypeId, boolean _forUpdate = false)
    {
        RetailCommerceValidatorEntityTypes retailCommerceValidatorEntityTypes;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            if (_forUpdate && !parameters.UsePessimisticLocks)
            {
                select forupdate retailCommerceValidatorEntityTypes where retailCommerceValidatorEntityTypes.EntityTypeId == _entityTypeId;
            }
            else if (_forUpdate && parameters.UsePessimisticLocks)
            {
                select pessimisticlock retailCommerceValidatorEntityTypes where retailCommerceValidatorEntityTypes.EntityTypeId == _entityTypeId;
            }
            else
            {
                select retailCommerceValidatorEntityTypes where retailCommerceValidatorEntityTypes.EntityTypeId == _entityTypeId;
            }
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry('', tableStr(RetailCommerceValidatorEntityTypes), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry('', tableStr(RetailCommerceValidatorEntityTypes), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }

        return retailCommerceValidatorEntityTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEntityPartitionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///  partition the records from a given entityType based on the parameter "Number of records per test".
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_entityTypeId">The entity Type Id.</param>
    /// <returns>A map of start/end records from the entity table.</returns>
    internal static Map GetEntityPartitionMap(RetailCommerceValidatorId _validationId, RetailCommerceValidatorEntityTypeId _entityTypeId)
    {
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidatorEntityTypes retailCommerceValidatorEntityTypes = RetailCommerceValidatorEntityTypes::find(_entityTypeId);
        
        // Map for Entity partitioning:  (<Partition>, [<startRecId>, <endRecId>])
        Map entityPartitionMap = new Map(Types::Int64,Types::Container);
        int64 partitionRecordCount = 0;
        int64 partitionCurrentRecId = 0;
        int64 partitionStartRecId = 0;
        int64 partitionEndRecId = 0;
        int64 totalCount = 0;

        switch (retailCommerceValidatorEntityTypes.EntityTableId)
        {
            case tableNum(EcoResProduct):
                // Get all channel products not excluded from the validation
                RetailCommerceValidatorWorkChannelProducts retailCommerceValidatorWorkChannelProducts;
                while select retailCommerceValidatorWorkChannelProducts 
                    order by retailCommerceValidatorWorkChannelProducts.ProductRefRecId
                    where retailCommerceValidatorWorkChannelProducts.ValidationId == _validationId
                {
                    // store "current recid"
                    partitionCurrentRecId = retailCommerceValidatorWorkChannelProducts.ProductRefRecId;

                    // For each new partition, store the "start recid"
                    if (partitionRecordCount == 0)
                    {
                        partitionStartRecId = retailCommerceValidatorWorkChannelProducts.ProductRefRecId;
                    }

                    // increment partition counter
                    partitionRecordCount++;
                    totalCount++;

                    // when partition gets maximum records per test, record the "end recid" and add to the Map
                    if (partitionRecordCount == retailCommerceValidatorParameters.RecordsPerTest)
                    {
                        partitionEndRecid = retailCommerceValidatorWorkChannelProducts.ProductRefRecId;
                        entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionEndRecId]);
                        partitionRecordCount = 0;
                    }
                }
                // In case last partition is smaller than the others, store the last "current recid" as "end recid" and add to the map
                if (partitionRecordCount > 0)
                {
                    entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionCurrentRecId]);
                }
                break;
            case tableNum(Catalog):
                // Get all channel products not excluded from the validation
                RetailCommerceValidatorWorkChannelCatalogs retailCommerceValidatorWorkChannelCatalogs;
                while select retailCommerceValidatorWorkChannelCatalogs
                    order by retailCommerceValidatorWorkChannelCatalogs.CatalogRefRecId
                    where retailCommerceValidatorWorkChannelCatalogs.ValidationId == _validationId
                {
                    // store "current recid"
                    partitionCurrentRecId = retailCommerceValidatorWorkChannelCatalogs.CatalogRefRecId;

                    // For each new partition, store the "start recid"
                    if (partitionRecordCount == 0)
                    {
                        partitionStartRecId = retailCommerceValidatorWorkChannelCatalogs.CatalogRefRecId;
                    }

                    // increment partition counter
                    partitionRecordCount++;
                    totalCount++;

                    // when partition gets maximum records per test, record the "end recid" and add to the Map
                    if (partitionRecordCount == retailCommerceValidatorParameters.RecordsPerTest)
                    {
                        partitionEndRecid = retailCommerceValidatorWorkChannelCatalogs.CatalogRefRecId;
                        entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionEndRecId]);
                        partitionRecordCount = 0;
                    }
                }
                // In case last partition is smaller than the others, store the last "current recid" as "end recid" and add to the map
                if (partitionRecordCount > 0)
                {
                    entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionCurrentRecId]);
                }
                break;
            case tableNum(EcoResCategory):
                // Get all channel products not excluded from the validation
                RetailCommerceValidatorWorkChannelCategories retailCommerceValidatorWorkChannelCategories;
                while select retailCommerceValidatorWorkChannelCategories
                    order by retailCommerceValidatorWorkChannelCategories.CategoryRefRecId
                    where retailCommerceValidatorWorkChannelCategories.ValidationId == _validationId
                {
                    // store "current recid"
                    partitionCurrentRecId = retailCommerceValidatorWorkChannelCategories.CategoryRefRecId;

                    // For each new partition, store the "start recid"
                    if (partitionRecordCount == 0)
                    {
                        partitionStartRecId = retailCommerceValidatorWorkChannelCategories.CategoryRefRecId;
                    }

                    // increment partition counter
                    partitionRecordCount++;
                    totalCount++;

                    // when partition gets maximum records per test, record the "end recid" and add to the Map
                    if (partitionRecordCount == retailCommerceValidatorParameters.RecordsPerTest)
                    {
                        partitionEndRecid = retailCommerceValidatorWorkChannelCategories.CategoryRefRecId;
                        entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionEndRecId]);
                        partitionRecordCount = 0;
                    }
                }
                // In case last partition is smaller than the others, store the last "current recid" as "end recid" and add to the map
                if (partitionRecordCount > 0)
                {
                    entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionCurrentRecId]);
                }
                break;
            case tableNum(EcoResCategoryHierarchy):
                // Get all channel products not excluded from the validation
                RetailCommerceValidatorWorkChannelCategoryHierarchies retailCommerceValidatorWorkChannelCategoryHierarchies;
                while select retailCommerceValidatorWorkChannelCategoryHierarchies
                    order by retailCommerceValidatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId
                    where retailCommerceValidatorWorkChannelCategoryHierarchies.ValidationId == _validationId
                {
                    // store "current recid"
                    partitionCurrentRecId = retailCommerceValidatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId;

                    // For each new partition, store the "start recid"
                    if (partitionRecordCount == 0)
                    {
                        partitionStartRecId = retailCommerceValidatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId;
                    }

                    // increment partition counter
                    partitionRecordCount++;
                    totalCount++;

                    // when partition gets maximum records per test, record the "end recid" and add to the Map
                    if (partitionRecordCount == retailCommerceValidatorParameters.RecordsPerTest)
                    {
                        partitionEndRecid = retailCommerceValidatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId;
                        entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionEndRecId]);
                        partitionRecordCount = 0;
                    }
                }
                // In case last partition is smaller than the others, store the last "current recid" as "end recid" and add to the map
                if (partitionRecordCount > 0)
                {
                    entityPartitionMap.insert(totalCount, [partitionStartRecId, partitionCurrentRecId]);
                }
                break;
            case tableNum(RetailKit):
            case tableNum(EcoResAttribute):
            case tableNum(EcoResAttributeGroup):
            case tableNum(RetailInternalOrganization):
                entityPartitionMap.insert(1, [0, int64Max()]);

            default:
                entityPartitionMap.insert(1, [0, int64Max()]);
                break;
        }

        return entityPartitionMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorEntityTypesDevDocs</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorEntityTypesLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>EntityTypeId</TitleField1>
	<TitleField2>EntityFunction</TitleField2>
	<ClusteredIndex>EntityTypeIdIdx</ClusteredIndex>
	<PrimaryIndex>EntityTypeIdIdx</PrimaryIndex>
	<ReplacementKey>EntityTypeIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntityTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntityTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntityTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntityFunction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityTypeId</Name>
			<ExtendedDataType>RetailCommerceValidatorEntityTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EntityTableId</Name>
			<ExtendedDataType>RetailCommerceValidatorEntityTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityFunction</Name>
			<EnumType>RetailCommerceValidatorEntityFunction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityExecutionTestClass</Name>
			<ExtendedDataType>RetailCommerceValidatorEntityExecutionTestClass</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EntityTypeIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EntityTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>