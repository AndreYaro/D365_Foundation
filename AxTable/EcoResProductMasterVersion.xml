<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMasterVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductMasterVersion extends EcoResProductMasterDimensionValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasDimensionValueForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a dimension value record has been created for a specified product master and
    /// dimension attribute.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> value of the product master.
    /// </param>
    /// <returns>
    /// true if a product dimension table value exists for the specified product; otherwise, false.
    /// </returns>
    public boolean hasDimensionValueForProductMaster(EcoResProductRecId _productMaster)
    {
        EcoResProductMasterVersion    ecoResProductMasterVersion;

        select firstonly RecId from ecoResProductMasterVersion
            where ecoResProductMasterVersion.ProductVersionProductMaster == _productMaster;

        if (ecoResProductMasterVersion.RecId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the <c>EcoResProductMasterVersion</c> table and creates related product variants if applicable.
    /// </summary>
    public void insert()
    {
        ttsBegin;

        super();

        if(!EcoResProductMasterSkipVariantCreationScope::shouldSkipVariantCreation())
        {
            this.createVariantsFromDimensionValue(this.ProductVersionProductMaster, this.ProductVersionProductDimensionAttribute, this.ProductVersion);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductMasterDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the dimension value record that was created for a specified product master and
    /// dimension attribute value.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_versionRecId">
    /// The reference to the product dimension value.
    /// </param>
    /// <returns>
    /// The product dimension table value for the specified product and dimension value.
    /// </returns>
    public EcoResProductMasterDimensionValueId lookupProductMasterDimensionValue(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _versionRecId )
    {
        RefRecId ret;

        if (_productMaster && _productDimensionAttribute && _versionRecId)
        {
            ret = (select firstonly ecoResProductMasterVersion
                    where ecoResProductMasterVersion.ProductVersionProductMaster               == _productMaster
                       && ecoResProductMasterVersion.ProductVersionProductDimensionAttribute   == _productDimensionAttribute
                       && ecoResProductMasterVersion.ProductVersion                            == _versionRecId
                    ).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionValueAndRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the product dimension value and relation fields on the buffer.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> value of a product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The record ID of an <c>EcoResProductDimensionAttribute</c> record.
    /// </param>
    /// <param name="_productDimensionValue">
    /// The <c>RefRecId</c> value of the product dimension value record.
    /// </param>
    public void setDimensionValueAndRelations(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue)
    {
        this.ProductVersion                          = _productDimensionValue;
        this.ProductVersionProductMaster             = _productMaster;
        this.ProductVersionProductDimensionAttribute = _productDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        EcoResDistinctProductVariant    ecoResDistinctProductVariant;
        EcoResProductVariantVersion       ecoResProductVariantVersion;
        boolean                         ret;

        ret = super();

        select firstonly ecoResProductVariantVersion
            where   ecoResProductVariantVersion.ProductVersion                       == this.ProductVersion
                &&  ecoResProductVariantVersion.ProductDimensionAttribute   == this.ProductVersionProductDimensionAttribute
            exists join ecoResDistinctProductVariant
                where   ecoResDistinctProductVariant.RecId                == ecoResProductVariantVersion.DistinctProductVariant
                    &&  ecoResDistinctProductVariant.ProductMaster        == this.ProductVersionProductMaster;

        if (ecoResProductVariantVersion.RecId != 0)
        {
            ret = checkFailed(strFmt("@SYS128564", tablePName(EcoResProductMasterVersion),
                                                   tablePName(EcoResProductVariantVersion)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionValueAndRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the product dimension value and relation fields on the buffer.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> value of a product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The record ID of an <c>EcoResProductDimensionAttribute</c> record.
    /// </param>
    /// <param name="_productDimensionValue">
    /// The record ID of the product dimension value record.
    /// </param>
    /// <param name="_throwError">
    /// A Boolean value that indicates whether to throw an exception if the dimension has been assigned to
    /// the product master.
    /// </param>
    /// <returns>
    /// true if the product dimension table value exists for the specified product; otherwise, false.
    /// </returns>
    public boolean validateDimensionValueAndRelations(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue,
        boolean             _throwError = false)
    {
        if (EcoResProductMasterVersion::existByProductVersion(
            _productMaster,
            _productDimensionAttribute,
            _productDimensionValue))
        {
            if (_throwError)
            {
                throw error(EcoResProductMasterDimensionValue::txtNotExist(
                    EcoResVersion::label(),
                    EcoResVersion::find(_productDimensionValue).Name,
                    EcoResProductIdentifier::findByProduct(_productMaster).ProductNumber));
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the product dimension value exists.
    /// </summary>
    /// <param name="_productMaster">
    ///    The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the product dimension value table buffer.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates whether an exception is thrown, in case the dimension does not exists.
    /// </param>
    /// <returns>
    ///    true if the product dimension value exists for a specified product; otherwise false.
    /// </returns>
    public boolean checkExistDimensionValue(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue,
        boolean             _throwError = false)
    {
        return EcoResProductMasterVersion::checkExistByProductVersion(
                        _productMaster,
                        _productDimensionAttribute,
                        _productDimensionValue,
                        _throwError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret;

        ret = super();

        ret = ret && this.validateActiveProductDimension(this.ProductVersionProductMaster, fieldNum(InventDim, InventVersionId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByProductVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record occurs in the <c>EcoResProductMasterVersion</c> table.
    /// </summary>
    /// <param name="_productMaster">
    /// The record ID of an <c>EcoResProductMaster</c> record that is used as a filter.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The record ID of an <c>EcoResProductDimensionAttribute</c> record that is used as a filter.
    /// </param>
    /// <param name="_versionRecId">
    /// The record ID of an <c>EcoResVersion</c> record that is used as a filter.
    /// </param>
    /// <param name="_throwException">
    /// A Boolean value that indicates whether a message is displayed or an exception is thrown.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_throwException" /> parameter is true and the record does not exist.
    /// </exception>
    static boolean checkExistByProductVersion(
        RefRecId            _productMaster,
        RefRecId            _productDimensionAttribute,
        EcoResVersionRecId    _versionRecId,
        boolean             _throwException = false)
    {
        EcoResProduct   ecoResProduct;
        EcoResVersion     ecoResVersion;
        str             message;

        if (_productMaster
            && _productDimensionAttribute
            && _versionRecId
            && !EcoResProductMasterVersion::existByProductVersion(_productMaster, _productDimensionAttribute, _versionRecId))
        {
            ecoResProduct   = EcoResProduct::find(_productMaster);
            ecoResVersion     = EcoResVersion::find(_versionRecId);
            message         = EcoResProductMasterVersion::txtNotExist(ecoResVersion.Name, ecoResProduct.productNumber());
            if (_throwException)
            {
                throw error(message);
            }
            return checkFailed(message);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByProductVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record occurs in the <c>EcoResProductMasterVersion</c> table.
    /// </summary>
    /// <param name="_productMaster">
    /// The record ID of an <c>EcoResProductMaster</c> record to use as a filter.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The record ID of an <c>EcoResProductDimensionAttribute</c> record to use as a filter.
    /// </param>
    /// <param name="_versionRecId">
    /// The record ID of an <c>EcoResVersion</c> record to use as a filter.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean existByProductVersion(
        RefRecId            _productMaster,
        RefRecId            _productDimensionAttribute,
        EcoResVersionRecId    _versionRecId)
    {
        if (_productMaster && _productDimensionAttribute && _versionRecId)
        {
            return (select firstonly ecoResProductMasterVersion
                    where ecoResProductMasterVersion.ProductVersionProductMaster               == _productMaster
                       && ecoResProductMasterVersion.ProductVersionProductDimensionAttribute   == _productDimensionAttribute
                       && ecoResProductMasterVersion.ProductVersion                            == _versionRecId
                    ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a warning message in case the product dimension table value does not exist for the
    /// specified product.
    /// </summary>
    /// <param name="_value">
    /// The <c>Name</c> value that corresponds to the product dimension table value.
    /// </param>
    /// <param name="_productNumber">
    /// The <c>EcoResProductNumber</c> value that corresponds to the product ID value.
    /// </param>
    /// <returns>
    /// A warning message in case the product dimension table value does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist(Name _value, EcoResProductNumber _productNumber)
    {
        return EcoResProductMasterDimensionValue::txtNotExist(EcoResVersion::label(), _value, _productNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>EcoResProductMasterVersion</c> record.
    /// </summary>
    /// <param name="_productMaster">
    /// An integer value that represents the product record ID.
    /// </param>
    /// <param name="_versionRecId">
    /// An integer value that represents the version record ID.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// An integer value that represents the ID of the product dimension field in the
    /// <c>InventDim</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record must be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>EcoResProductMasterVersion</c> record.
    /// </returns>
    public static EcoResProductMasterVersion find(
        RefRecId                    _productMaster,
        EcoResVersionRecId            _versionRecId,
        FieldId                     _inventDimFieldId   = fieldNum(InventDim, InventVersionId),
        boolean                     _forupdate          = false)
    {
        EcoResProductMasterVersion    ecoResProductMasterVersion;
        RefRecId                    ecoResProductDimensionAttributeRecId;

        ecoResProductMasterVersion.selectForUpdate(_forupdate);

        if (   _productMaster
            && _versionRecId)
        {
            ecoResProductDimensionAttributeRecId = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(_inventDimFieldId);

            select firstonly ecoResProductMasterVersion
                where ecoResProductMasterVersion.ProductVersionProductMaster               == _productMaster
                   && ecoResProductMasterVersion.ProductVersionProductDimensionAttribute   == ecoResProductDimensionAttributeRecId
                   && ecoResProductMasterVersion.ProductVersion                            == _versionRecId;
        }

        return ecoResProductMasterVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the version translation, if one exists, for a given product master.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// An integer value that represents the product master record id.
    /// </param>
    /// <param name="_versionName">
    /// The version name. Note that the Name field is the ID of the EcoResVersion table.
    /// </param>
    /// <param name="_languageId">
    /// The SystemLanguageId to find the translation for.
    /// </param>
    /// <returns>
    /// The version translation for the product master.
    /// </returns>
    public static EcoResProductMasterDimValueTranslation findTranslationByProduct(EcoResProductRecId _productMasterRecId, EcoResItemVersionName _versionName, SystemLanguageId _languageId)
    {
        EcoResProductMasterDimValueTranslation valueTranslation;
        EcoResProductMasterVersion masterVersion;
        EcoResVersion version;
        select firstonly valueTranslation
            exists join masterVersion
                where masterVersion.ProductVersionProductMaster == _productMasterRecId
                && masterVersion.RecId == valueTranslation.ProductMasterDimensionValue
                && valueTranslation.LanguageId == _languageId
            exists join version
                where version.RecId == masterVersion.ProductVersion
                && version.Name == _versionName;

        return valueTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        EcoResProductMasterVersion ecoResProductMasterVersion_orig = this.orig();

        super();

        if (ecoResProductMasterVersion_orig.RetailDisplayOrder != this.RetailDisplayOrder)
        {
            ttsbegin;
            EcoResProductVariantVersion ecoResProductVariantVersion;
            EcoResDistinctProductVariant ecoResDistinctProductVariant;

            update_recordset ecoResProductVariantVersion
                        setting RetailDisplayOrder = this.RetailDisplayOrder
                    join ecoResDistinctProductVariant
                        where ecoResDistinctProductVariant.RecId == ecoResProductVariantVersion.DistinctProductVariant
                            && ecoResDistinctProductVariant.ProductMaster == this.ProductVersionProductMaster
                            && ecoResProductVariantVersion.ProductVersion == this.ProductVersion;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>EcoResProductVersion</ConfigurationKey>
	<DeveloperDocumentation>@SCM:ProductMasterVersionTableDevDoc</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductMasterDimensionAction</FormRef>
	<Label>@SCM:VersionsAssignedToProductMaster</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProductVersionProductMaster</TitleField1>
	<TitleField2>ProductVersion</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResProductMasterDimensionValue</Extends>
	<ReplacementKey>ProductVersionIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductVersionProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersionProductDimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductVersionProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersionProductDimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResVersionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductVersionProductDimensionAttribute</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductVersionProductMaster</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductMasterRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResVersionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductVersion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResProductDimensionAttributeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductVersionProductDimensionAttribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductVersionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductVersionProductMaster</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductVersionProductDimensionAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductVersion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResVersion_EcoResProductMasterVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductVersion</Name>
					<Field>ProductVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductVersionEcoResProductDimensionAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResProductDimensionAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductVersionEcoResProductDimensionAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VersionEcoResProductDimensionAttribute_EcoResProductMasterVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductVersionProductDimensionAttribute</Name>
					<Field>ProductVersionProductDimensionAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductVersionEcoResProductMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductVersionEcoResProductMaster</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VersionEcoResProductMaster_EcoResProductMasterVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductVersionProductMaster</Name>
					<Field>ProductVersionProductMaster</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductVersionEcoResProductMasterDimensionValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResProductMasterDimensionValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>