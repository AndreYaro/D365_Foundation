<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCProductConfigurationModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCProductConfigurationModel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCProductConfigurationModelTranslation  translation;
        PCConfigurationControl                  configurationControl;
        PCPriceModel                            priceModel;

        _visitor.visitStart(this);

        this.getRootComponent().accept(_visitor);

        while select translation
            where translation.ProductConfigurationModel == this.RecId
        {
            translation.accept(_visitor);
        }

        // visit custom UI if it has been created
        configurationControl = PCConfigurationControl::findByProductConfigurationModel(this.RecId);

        if (configurationControl)
        {
            configurationControl.accept(_visitor);
        }

        while select priceModel
            where priceModel.ProductConfigurationModel == this.RecId
        {
            priceModel.accept(_visitor);
        }

        if (PCPriceModelSelectionCriteria::isImportExportEnabled())
        {
            PCPriceModelSelectionCriteria priceModelSelectionCriteria;
            while select priceModelSelectionCriteria
                where priceModelSelectionCriteria.ProductConfigurationModel == this.RecId
            {
                priceModelSelectionCriteria.accept(_visitor);
            }
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the product model.
    /// </summary>
    /// <param name="_newName">
    /// The name to assign to the new product model.
    /// </param>
    /// <param name="_newDescription">
    /// The new description to assign to the new product model.
    /// </param>
    public void duplicate(PCName _newName, PCDescription _newDescription)
    {
        PCProductConfigurationModel duplicate;
        PCClass                     root;
        PCConfigurationControl      configurationControl;
        PCTemplateConfiguration     templateConfiguration;
        Map                         duplicatedComponentsMap;
        LanguageId                  systemLanguage = SystemParameters::getSystemLanguageId();
        Map                         duplicatedAttributesMap;
        duplicatedAttributesMap = new Map(Types::Int64, Types::Int64);

        //store the definition of components that were duplicated
        duplicatedComponentsMap = new Map(Types::Int64, Types::Int64);

        ttsbegin;
        duplicate.data(this);
        duplicate.Name          = _newName;

        root = PCClass::find(duplicate.RootComponentClass);

        duplicate.RootComponentClass = root.duplicate(duplicatedComponentsMap
        , duplicatedAttributesMap
        );

        duplicate.insert();

        // duplicate custom UI if it has been created
        configurationControl = PCConfigurationControl::findByProductConfigurationModel(this.RecId);

        if (configurationControl)
        {
            configurationControl.duplicateExtended(duplicate.RecId, duplicatedComponentsMap);
        }

        //duplicate template configurations
        while select templateConfiguration
        where templateConfiguration.ProductConfigurationModel == this.RecId
        {
            templateConfiguration.duplicate(duplicate.RecId);
        }

        // duplicate translations
        this.duplicateTranslations(duplicate.RecId);

        // sync description of translation in the system language
        PCProductConfigurationModelTranslation::createOrUpdateTranslation(duplicate.RecId, duplicate.Name, _newDescription, systemLanguage);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the translations that are related to the product configuration model.
    /// </summary>
    /// <param name="_duplicateModel">
    /// The record ID of the duplicated product configuration model.
    /// </param>
    private void duplicateTranslations(RefRecId _duplicateModel)
    {
        PCProductConfigurationModelTranslation  duplicateTranslation;
        PCProductConfigurationModelTranslation  originalTranslation;

        ttsbegin;

        while select originalTranslation
            where originalTranslation.ProductConfigurationModel == this.RecId
        {
            duplicateTranslation.clear();
            duplicateTranslation.data(originalTranslation);
            duplicateTranslation.ProductConfigurationModel = _duplicateModel;
            duplicateTranslation.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits or displays the description of a product configuration model.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the description is displayed.
    /// </param>
    /// <param name="_pcDescription">
    /// A description of the product configuration model.
    /// </param>
    /// <returns>
    /// A description of the product configuration model.
    /// </returns>
    edit PCDescription editDescription(boolean _set, PCDescription _pcDescription)
    {
        PCDescription               pcDescription = _pcDescription;
        PCProductConfigurationModel productConfigurationModel;

        if (_set)
        {
            if (pcDescription)
            {
                productConfigurationModel = PCProductConfigurationModel::find(this.RecId);

                ttsbegin;
                PCProductConfigurationModelTranslation::createOrUpdateTranslation(this.RecId,
                                                         productConfigurationModel.Name,
                                                         pcDescription,
                                                         SystemParameters::getSystemLanguageId()
                                                         );
                ttscommit;
            }
        }
        else
        {
            pcDescription = PCProductConfigurationModelTranslation::findByModelAndLanguage(this.RecId, SystemParameters::getSystemLanguageId()).Description;
        }

        return pcDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveVersionItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ID of the item linked to the active version of the current product model.
    /// </summary>
    /// <returns>
    ///     The ID of an item.
    /// </returns>
    public ItemId getActiveVersionItem()
    {
        return PCProductConfigurationModel::getActiveVersionItemByDataArea(
            this.RecId,
            CompanyInfo::find().DataArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the root component that is associated with the current product model.
    /// </summary>
    /// <returns>
    /// A record in the <c>PCClass</c> table.
    /// </returns>
    public PCClass getRootComponent()
    {
        return PCClass::find(this.RootComponentClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the XML representation of this product model that is compatible with the product
    /// configuration.
    /// </summary>
    /// <param name="_configuration">
    /// The product configuration session to load in configuration; optional.
    /// </param>
    /// <returns>
    /// A string that contains the XML representation of the product model.
    /// </returns>
    public str getXML(PCProductConfiguration _configuration = null)
    {
        return PCRuntimeLibrary::getModelXML(this, _configuration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PCProductConfigurationModel</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCProductConfigurationModel::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCProductConfigurationModel</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCProductConfigurationModel</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductConfigurationModel find(RefRecId _recId, boolean _forupdate = false)
    {
        PCProductConfigurationModel record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCProductConfigurationModel</c> table.
    /// </summary>
    /// <param name="_name">
    /// The model name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCProductConfigurationModel</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductConfigurationModel findByName(PCName _name, boolean _forupdate = false)
    {
        PCProductConfigurationModel record;

        if (_name == '')
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.Name == _name;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveVersionItemByDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ID of the item linked to the active version of the specified product model and company account.
    /// </summary>
    /// <param name="_productConfigurationModelRecId">
    ///     The ID of the product model.
    /// </param>
    /// <param name="_dataAreaId">
    ///     The ID of the company account.
    /// </param>
    /// <returns>
    ///     The ID of an item.
    /// </returns>
    public static ItemId getActiveVersionItemByDataArea(RefRecId _productConfigurationModelRecId, DataAreaId _dataAreaId)
    {
        ItemId                  itemId;
        PCProductModelVersion   pcProductModelVersion = PCProductModelVersion::findApprovedActiveVersionByProductModel(_productConfigurationModelRecId);

        changecompany(_dataAreaId)
        {
            itemId  = InventTable::findByProduct(pcProductModelVersion.ProductMaster).ItemId;
        }
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupModelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup that shows all the product configuration model names.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// A form string control.
    /// </param>
    static void lookupModelName(FormStringControl   _lookupCtrl)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(PCProductConfigurationModel), _lookupCtrl);
        Query                   query           = new Query();

        query.addDataSource(tableNum(PCProductConfigurationModel));
        sysTableLookup.addLookupfield(fieldNum(PCProductConfigurationModel, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSolverStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the .Net solver strategy.
    /// </summary>
    /// <returns>
    /// The .Net solver strategy.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws for unknown solver strategy.
    /// </exception>
    public int getSolverStrategy()
    {
        switch (this.SolverStrategy)
        {
            case PCSolverStrategy::Default:
                return Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy::Default;
            case PCSolverStrategy::MinimalDomainsFirst:
                return Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy::MinimalDomainsFirst;
            case PCSolverStrategy::DeclarationOrder:
                return Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy::DeclarationOrder;
            case PCSolverStrategy::Z3:
                return Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy::Z3;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the product configuration models's translated name.
    /// </summary>
    /// <returns>
    /// A translated name.
    /// </returns>
    display PCProductModelName displayName()
    {
        LanguageId          clientLanguageId = LanguageTable::defaultLanguage();
        PCProductModelName  productModelNameTranslated;

        productModelNameTranslated = PCProductConfigurationModelTranslation::findByModelAndLanguage(this.RecId, clientLanguageId).Name;

        if (productModelNameTranslated == '')
        {
            productModelNameTranslated = PCProductConfigurationModelTranslation::findByModelAndLanguage(this.RecId, SystemParameters::getSystemLanguageId()).Name;
        }

        return productModelNameTranslated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153041</DeveloperDocumentation>
	<Label>@SYS153040</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SolverStrategy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SolverStrategy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Indentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCProductModelName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RootComponentClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153051</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SolverStrategy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PCSolverStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Columns</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCRuntimeDialogMaxNoOfColumns</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PCClassIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RootComponentClass</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RootComponentClass</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Entity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Entity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RootComponentClass</Name>
					<Field>RootComponentClass</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>