<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSTaskImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSTaskImport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createHierarchyTreeTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in <c>HierarchyTreeTable</c> corresponding to the data being inserted into <c>ProjCDSTaskImport</c>
    /// </summary>
    /// <returns>The ElementNumber created</returns>
    private static ElementNumber createHierarchyTreeTableRecord(HierarchyIdBase _hierarchyId, LineNum _siblingNumber, ElementNumber _parentElementNumber, RefRecId _activitiesRecord, Name _name)
    {
        HierarchyTreeTable hierarchyTreeTable;

        hierarchyTreeTable.initValue();
        hierarchyTreeTable.ElementNumber = NumberSeq::newGetNum(CompanyInfo::numRefElementNumber()).num();
        hierarchyTreeTable.HierarchyId = _hierarchyId;
        hierarchyTreeTable.SiblingNumber = _siblingNumber;
        hierarchyTreeTable.ParentElementNumber = _parentElementNumber;
        hierarchyTreeTable.RefRecId = _activitiesRecord;
        hierarchyTreeTable.Name = _name;
        if (hierarchyTreeTable.validateWrite())
        {
            hierarchyTreeTable.insert();
        }

        if (!hierarchyTreeTable.RecId)
        {
            throw error(Error::missingRecord(tableStr(HierarchyTreeTable)));
        }

        return hierarchyTreeTable.ElementNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSmmActivitiesRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in <c>smmActivities</c> corresponding to the data being inserted into <c>ProjCDSTaskImport</c>
    /// </summary>
    /// <returns>The ActivityNumber created</returns>
    private static smmActivities createSmmActivitiesRecord(smmActivityPurpose _purpose)
    {
        smmActivities activitiesTable;

        activitiesTable.setActivityNum();
        activitiesTable.Category = smmActivityCategory::Task;
        activitiesTable.initValue();
        activitiesTable.Purpose = _purpose;

        if (activitiesTable.validateWrite())
        {
            activitiesTable.insert();
        }

        if (!activitiesTable.RecId)
        {
            throw error(Error::missingRecord(tableStr(smmActivities)));
        }

        return activitiesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSmmActivityParentLinkTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in <c>smmActivityParentLinkTable</c> corresponding to the data being inserted into <c>ProjCDSTaskImport</c>
    /// </summary>
    /// <param name = "_activityNumber">The ActivityNumber generated when creating a record in <c>smmActivities</c></param>
    /// <param name = "_projectTableId">The Table id of ProjTable</param>
    /// <param name = "_projectRecId">The RecId of the project to associate to</param>
    private static void createSmmActivityParentLinkTableRecord(smmActivityNumber _activityNumber, TableId _projectTableId, ProjectRecId _projectRecId)
    {
        smmActivityParentLinkTable parentLinkTable;

        parentLinkTable.ActivityNumber = _activityNumber;
        parentLinkTable.ParentType = smmActivityParentType::Project;
        parentLinkTable.PrimaryLink = NoYes::Yes;
        parentLinkTable.RefTableId = _projectTableId;
        parentLinkTable.RefRecId = _projectRecId;
        if (parentLinkTable.validateWrite())
        {
            parentLinkTable.insert();
        }

        if (!parentLinkTable.RecId)
        {
            throw error(Error::missingRecord(tableStr(smmActivityParentLinkTable)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disperseDataForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the data that is being inserted into this table to 
    /// multiple other AX tables so that AX can utilize it in operations.
    /// </summary>
    private void disperseDataForInsert()
    {
        HierarchyIdBase hierarchyId;
        ElementNumber   parentElementNumber;
        ProjectRecId    projectRecId;
        TableId         projectTableId;

        // Get Project table & recid
        ProjTable projTable = ProjTable::find(this.ProjectId);
        projectTableId = projTable.TableId;
        projectRecId = projTable.RecId;

        if (this.ParentTaskId)
        {
            // Since parent already exists, extract some data from it
            ProjCDSTaskImport taskImportTable = ProjCDSTaskImport::findByTask(this.ParentTaskId);
            parentElementNumber = taskImportTable.ElementNumber;
            hierarchyId = taskImportTable.HierarchyId;
        }
        else
        {
            hierarchyId = HierarchyLinkTable::findRefTableRecId(projectTableId, projectRecId).HierarchyId;
            parentElementNumber = HierarchyTreeTable::findRootElementNumber(hierarchyId);
        }

        LineNum sibling = ProjCDSTaskImport::parsePositionFromWbsId(this.WbsId);

        smmActivities activityTable = ProjCDSTaskImport::createSmmActivitiesRecord(this.Name);
        ElementNumber elementNumber = ProjCDSTaskImport::createHierarchyTreeTableRecord(hierarchyId, sibling, parentElementNumber, activityTable.RecId, this.Name);
        ProjCDSTaskImport::createSmmActivityParentLinkTableRecord(activityTable.ActivityNumber, projectTableId, projectRecId);

        // Write back values
        this.ParentElementNumber = parentElementNumber;
        this.HierarchyId = hierarchyId;
        this.ActivityNumber = activityTable.ActivityNumber;
        this.ElementNumber = elementNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record corresponding to the passed in taskId
    /// </summary>
    /// <param name = "_taskId">The taskId to find</param>
    /// <param name = "_forUpdate">Optional parameter indicating if the table should be open for write</param>
    /// <returns>The record corresponding to the passed in taskId</returns>
    public static ProjCDSTaskImport findByTask(guid _taskId, boolean _forUpdate = false)
    {
        ProjCDSTaskImport taskImport;

        taskImport.selectForUpdate(_forUpdate);

        if (_taskId)
        {
            select taskImport
                where taskImport.TaskId == _taskId;
        }

        return taskImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsePositionFromWbsId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack the WbsId and extract the position value from the last segment
    /// </summary>
    private static LineNum parsePositionFromWbsId(str _wbsId)
    {
        str listValue;
        List splitList = strSplit(_wbsId, '.');
        ListEnumerator listEnum = splitList.getEnumerator();
        
        while (listEnum.moveNext())
        {
            listValue = listEnum.current();
        }
        return(str2int(listValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        this.disperseDataForInsert();
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            if (!this.RecId)
            {
                // Make sure the project exists for insert operation
                if (!ProjTable::find(this.ProjectId).RecId)
                {
                    Error("@SYS102541");
                    ret = false;
                }
            }

            // If Parent record is specified, make sure that it is already in the table
            if (this.ParentTaskId)
            {
                ProjCDSTaskImport parentTaskImport = ProjCDSTaskImport::findByTask(this.ParentTaskId);
                if (parentTaskImport.RecId)
                {
                    // Make sure the Project Id of this record is the same as its parent
                    if (parentTaskImport.ProjectId != this.ProjectId)
                    {
                        Error("@Proj:ParentMustBePartOfTree");
                        ret = false;
                    }
                }
                else
                {
                    Error(strFmt("@Proj:ParentTaskMustExist", guid2Str(this.TaskId)));
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        this.disperseDataForUpdate();
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disperseDataForUpdate</Name>
				<Source><![CDATA[
    private void disperseDataForUpdate()
    {
        if (this.orig().ParentTaskId != this.ParentTaskId)
        {
            if (this.ParentTaskId)
            {
                // Changing of parent but not to the root
                this.ParentElementNumber = ProjCDSTaskImport::findByTask(this.ParentTaskId).ElementNumber;
            }
            else
            {
                // Determine root parent via HierarchyTreeTable
                ProjTable projTable = ProjTable::find(this.ProjectId);
                TableId projectTableId = projTable.TableId;
                ProjectRecId projectRecId = projTable.RecId;

                HierarchyIdBase hierarchyId = HierarchyLinkTable::findRefTableRecId(projectTableId, projectRecId).HierarchyId;
                this.ParentElementNumber = HierarchyTreeTable::findRootElementNumber(hierarchyId);
            }
        }

        // Update related tables
        ProjCDSTaskImport::updateHierarchyTreeTableRecord(this.HierarchyId, this.ElementNumber, ProjCDSTaskImport::parsePositionFromWbsId(this.WbsId), this.Name, this.ParentElementNumber);
        ProjCDSTaskImport::updateSmmActivitiesRecord(this.ActivityNumber, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHierarchyTreeTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates relevant data in the <c>HierarchyTreeTable</c>
    /// </summary>
    private static void updateHierarchyTreeTableRecord(HierarchyIdBase _hierarchyId, ElementNumber _elementNumber, LineNum _siblingNumber, Name _name, ElementNumber _parentElementNumber)
    {
        boolean needUpdate = false; // has data changed so that a table update is needed?
        HierarchyTreeTable treeTable = HierarchyTreeTable::findElementNumber(_hierarchyId, _elementNumber, true);

        if (treeTable)
        {
            if (treeTable.SiblingNumber != _siblingNumber)
            {
                needUpdate = true;
                treeTable.SiblingNumber = _siblingNumber;
            }

            if (treeTable.Name != _name)
            {
                needUpdate = true;
                treeTable.Name = _name;
            }

            if (treeTable.ParentElementNumber != _parentElementNumber)
            {
                needUpdate = true;
                treeTable.ParentElementNumber = _parentElementNumber;
                treeTable.Level = HierarchyTreeTable::findElementNumber(_hierarchyId, _parentElementNumber).Level + 1;
            }

            if (needUpdate)
            {
                if (treeTable.validateWrite())
                {
                    treeTable.update();
                }
            }
        }
        else
        {
            Error(strFmt("@Proj:RelatedDataMustExist", tableId2Name(treeTable.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSmmActivitiesRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates relevant data in the <c>smmActivities</c> table
    /// </summary>
    private static void updateSmmActivitiesRecord(smmActivityNumber _activityNumber, smmActivityPurpose _purpose)
    {
        boolean needUpdate = false; // has data changed so that a table update is needed?
        smmActivities activitiesTable = smmActivities::find(_activityNumber, true);

        if (activitiesTable)
        {
            if (activitiesTable.Purpose != _purpose)
            {
                needUpdate = true;

                activitiesTable.Purpose = _purpose;
            }

            if (needUpdate)
            {
                if (activitiesTable.validateWrite())
                {
                    activitiesTable.update();
                }
            }
        }
        else
        {
            Error(strFmt("@Proj:RelatedDataMustExist", tableId2Name(activitiesTable.TableId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjCDSTaskImportTableDevDoc</DeveloperDocumentation>
	<Label>@Proj:ProjCDSTaskImportTableTitle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
		<Update>Allow</Update>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjectId</TitleField1>
	<TitleField2>TaskId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentTaskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentTaskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TaskId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS121658</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ParentTaskId</Name>
			<Label>@Proj:ParentTaskId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WbsId</Name>
			<Label>@Proj:WorkBreakdownStructureId</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>HierarchyIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ElementNumber</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ElementNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentElementNumber</Name>
			<ExtendedDataType>ElementNumber</ExtendedDataType>
			<Label>@SYS183731</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Task</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaskId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectId</Name>
					<Field>ProjectId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmActivities</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>parentSmmActivities</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>