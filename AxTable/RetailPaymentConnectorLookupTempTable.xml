<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPaymentConnectorLookupTempTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using PaymentSDKManager=Microsoft.Dynamics.Retail.SDKManager.Portable;
using PaymentSDK = Microsoft.Dynamics.Retail.PaymentSDK.Portable;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailPaymentConnectorLookupTempTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializePaymentConnectors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of payment connectors currently supported by AX.
    /// </summary>
    /// <param name = "retailPaymentConnectorLookupTempTable">Instance of the <c>RetailPaymentConnectorLookupTempTable</c> table.</param>
    /// <param name = "callerName">String denoting the form or class calling this funcationality. This is used only for error-handling.</param>
    [HookableAttribute(false)]
    public static void initializePaymentConnectors(RetailPaymentConnectorLookupTempTable retailPaymentConnectorLookupTempTable, str callerName)
    {
        System.String[] connectorNames = RetailPaymentConnectorLookupTempTable::getArrayOfSupportedConnectors(callerName);
        var connectorCount = connectorNames ? connectorNames.get_Count() : 0;
                     
        // Populate all available connector names to the in memomry table. (This is used for creating the connector name lookup when creating a new connector)
        for(int i = 0; i < connectorCount; i++)
        {
            retailPaymentConnectorLookupTempTable.ConnectorName = connectorNames.get_Item(i);
            retailPaymentConnectorLookupTempTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLegacyPaymentConnectors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of payment connectors currently supported by AX.
    /// </summary>
    /// <param name = "retailLegacyPaymentConnectorLookupTempTable">Instance of the <c>RetailPaymentConnectorLookupTempTable</c> table.</param>
    [HookableAttribute(false)]
    public static void initializeLegacyPaymentConnectors(RetailPaymentConnectorLookupTempTable retailLegacyPaymentConnectorLookupTempTable)
    {
        container connectorNames = RetailPaymentConnectors::getSupportedConnectorNames();
        var connectorCount = connectorNames ? conLen(connectorNames) : 0;
                     
        // Populate all available connector names to the in memomry table. (This is used for creating the connector name lookup when creating a new connector)
        for(int i = 1; i <= connectorCount; i++)
        {
            retailLegacyPaymentConnectorLookupTempTable.ConnectorName = conPeek(connectorNames, i);
            retailLegacyPaymentConnectorLookupTempTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performConnectorNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform lookup of available payment connector names.
    /// </summary>
    /// <param name="lookupTableBuffer">Lookup table buffer.</param>
    /// <param name="targetFormControl">The target form control on which the lookup is initiated from.</param>
    [HookableAttribute(false)]
    public static void performConnectorNameLookup(RetailPaymentConnectorLookupTempTable lookupTableBuffer, FormControl targetFormControl)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RetailPaymentConnectorLookupTempTable));

        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(RetailPaymentConnectorLookupTempTable), targetFormControl, true);
        lookup.parmQuery(query);

        // Add the fields to be shown in the lookup form.
        lookup.addLookupfield(fieldNum(RetailPaymentConnectorLookupTempTable, ConnectorName));
            
        // Since the table is inMemory table set the buffer.
        lookup.parmTmpBuffer(lookupTableBuffer);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArrayOfSupportedConnectors</Name>
				<Source><![CDATA[
	public static System.String[] getArrayOfSupportedConnectors(str callerName)
    {
        System.String[] result;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        try
        {
            // Get name of available connectors using the payment SDK.
            PaymentSDKManager.PaymentProcessorManager::LoadAllAssemblies(CreditCardConnectorSetup::getConnectorsDirectories());
            result = RetailPaymentConnectorLookupTempTable::filteredConnectorList();
        }
        catch (Exception::CLRError)
        {
            System.Exception ex = CLRInterop::getLastException();
            ex = ex.get_InnerException();

            if (Debug::debugMode())
            {
                error(ex.ToString());
            }

            RetailTracer::Error(callerName, funcName(), ex.ToString());
            System.Reflection.ReflectionTypeLoadException e = ex as System.Reflection.ReflectionTypeLoadException;

            if (e != null)
            {
                System.Exception[] les = e.LoaderExceptions;
                for (int k = 0; k < les.get_length(); k++)
                {
                    System.Exception le = les.get_item(k);
                    if (Debug::debugMode())
                    {
                        error(le.ToString());
                    }

                    eventSource.EventWritePaymentsGetPaymentConnectorError(le.ToString());
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filteredConnectorList</Name>
				<Source><![CDATA[
    private static System.String[] filteredConnectorList()
    {
        const str restrictedConnectorName = "Dynamics 365 Payment Connector for PayPal";

        System.Collections.Generic.List<System.String> list = new System.Collections.Generic.List<System.String>();
        System.String[] connectors = PaymentSDKManager.PaymentProcessorManager::GetSupportedProcessors();
        System.String connectorName;

        for (int ix = 0; ix < connectors.Length; ix++)
        {
            connectorName = connectors.GetValue(ix);
            if (connectorName == restrictedConnectorName && (RetailDeploymentUtility::getCurrentCloud() == RetailDeploymentUtility::AzureChina))
            {
                continue;
            }

            list.Add(connectorName);
        }

        return list.ToArray();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConnectorName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailConnectorName</ExtendedDataType>
			<Label>@Retail:RetailConnectorNameLabel</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>