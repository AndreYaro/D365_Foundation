<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoSubTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoSubTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a <c>MarkupTrans</c> record that is associated with the current
    ///    <c>VendInvoiceInfoSubTable</c> record for selection or posting.
    /// </summary>
    /// <returns>
    ///    true if no errors were detected; otherwise, false.
    /// </returns>
    public boolean checkMarkupTrans()
    {
        return MarkupTrans::checkMarkupTransOnHeaderWithZeroValueValidation(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the lines that correspond to the invoice subheader include tax in the line
    /// amounts.
    /// </summary>
    /// <param name="_purchTable">
    /// The corresponding purchase order header record; optional.
    /// </param>
    /// <returns>
    /// true if the lines include tax; otherwise, false.
    /// </returns>
    public boolean isInclTax(PurchTable _purchTable = null)
    {
        if (_purchTable)
        {
            return _purchTable.InclTax;
        }

        return this.vendInvoiceInfoTable().isInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an invoice is associated with a purchase order.
    /// </summary>
    /// <returns>
    ///    true if the invoice is not associated with a purchase order; otherwise, false.
    /// </returns>
    public boolean isNonPO()
    {
        return this.VendDocumentSubTableMap::isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the associated <c>MarkupTrans</c> records may be added, changed, or deleted.
    /// </summary>
    /// <returns>
    ///    true if modifications are allowed; otherwise, false.
    /// </returns>
    public boolean markupAllowed()
    {
        if (!this.OrigPurchId)
        {
            return true;
        }

        return !this.purchTable().isInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    PurchTable purchTable(boolean update = false)
    {
        if (!this.OrigPurchId)
        {
            return null;
        }

        return PurchTable::find(this.OrigPurchId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        // If defaulting/validation of VendInvoiceInfoSubTable becomes more complex, we should consider extracting
        // defaulting and validation code into a separate defaulting/validation strategy class(es).
        #VendInvoiceFaults

        boolean isValid = true;
        PurchTable purchTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        container checkIfInvoiceable;
        boolean invoiceable;
        PurchTableCheckIfUpdateContract checkIfUpdateContract;
        PurchTableCanBeUpdatedContract canBeUpdateContract;

        // validate before super to react with AIF fault instead of the throw

        switch (_fieldIdToCheck)
        {
            case fieldNum(VendInvoiceInfoSubTable, OrigPurchId):

                if (!this.OrigPurchId)
                {
                    break;
                }

                purchTable = PurchTable::find(this.OrigPurchId);
                vendInvoiceInfoTable = VendInvoiceInfoTable::find(this.ParmId, this.TableRefId);

                isValid = purchTable.RecId != 0;
                if (!isValid)
                {
                    AifFault::checkFailedLogFault(
                        strFmt("@SYS128608",
                            this.OrigPurchId,
                            vendInvoiceInfoTable.Num),
                        #OrigPurchIdNotFound);

                    isValid = false;
                    break;
                }

                // assert purchTable exists

                if (purchTable.InvoiceAccount != vendInvoiceInfoTable.InvoiceAccount)
                {
                    AifFault::checkFailedLogFault(
                        strFmt("@SYS128577",
                            vendInvoiceInfoTable.InvoiceAccount,
                            vendInvoiceInfoTable.Num,
                            purchTable.InvoiceAccount),
                        #InvoiceAccountDoesNotMatchCorrespondingPo);

                    isValid = false;
                }

                if (purchTable.CurrencyCode != vendInvoiceInfoTable.CurrencyCode)
                {
                    AifFault::checkFailedLogFault(
                        strFmt("@SYS128576",
                            vendInvoiceInfoTable.CurrencyCode,
                            vendInvoiceInfoTable.Num,
                            purchTable.CurrencyCode),
                        #InvoiceCurrencyDifferentFromPoCurrency);

                    isValid = false;
                }
                checkIfUpdateContract = PurchTableCheckIfUpdateContract::construct();
                checkIfUpdateContract.parmCheckInvoice(true);

                checkIfInvoiceable = purchTable.checkIfUpdate(checkIfUpdateContract.pack());
                canBeUpdateContract = PurchTableCanBeUpdatedContract::create(checkIfInvoiceable);

                invoiceable = canBeUpdateContract.parmCanInvoiceBeUpdated();

                if (!invoiceable)
                {
                    AifFault::checkFailedLogFault(
                        strFmt("@SYS128609",
                            purchTable.PurchId,
                            vendInvoiceInfoTable.Num),
                        #PurchaseOrderNotInvoiceable);

                    isValid = false;
                }

                if (purchTable.isInterCompanyOrder())
                {
                    AifFault::checkFailedLogFault(
                        strFmt("@SYS129550",
                            purchTable.PurchId,
                            vendInvoiceInfoTable.Num),
                        #InterCompanyPurchaseOrderNotSupported);

                    isValid = false;
                }

                break;
        }

        if (isValid)
        {
            isValid = super(_fieldIdToCheck);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the parent invoice table record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendInvoiceInfoTable</c> table record if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If the record does not exist, an empty <c>VendInvoiceInfoTable</c> table record is returned.
    /// </remarks>
    VendInvoiceInfoTable vendInvoiceInfoTable(boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        return VendInvoiceInfoTable::find(this.ParmId, this.TableRefId, _forUpdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of sub-table records for the <paramref name="_parmId" /> and <paramref
    /// name="_tableRefId" /> parameters of the specified invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field of the invoice; optional.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> value of the invoice.
    /// </param>
    /// <returns>
    /// A count of the sub-table records for the given invoice.
    /// </returns>
    static int count(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        if (_tableRefId)
        {
            return any2int((select count(RecId) from vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == _parmId &&
                    vendInvoiceInfoSubTable.TableRefId == _tableRefId).RecId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new record in the <c>VendInvoiceInfoSubTable</c> table, based on the existing
    ///    <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    The <c>VendInvoiceInfoLine</c> record to create a <c>VendInvoiceInfoSubTable</c> record.
    /// </param>
    /// <param name="_parmId">
    ///    The <c>ParmId</c> value for the new record.
    /// </param>
    /// <param name="_purchName">
    ///    The <c>PurchName</c> value for the new record.
    /// </param>
    /// <param name="_insert">
    ///    A Boolean value that specifies whether the record should be inserted; optional.
    /// </param>
    /// <returns>
    ///    The newly created <c>VendInvoiceInfoSubTable</c> record.
    /// </returns>
    public static VendInvoiceInfoSubTable createFromVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine, ParmId _parmId, PurchName _purchName, boolean _insert = true)
    {
        VendInvoiceInfoSubTable subTable;

        subTable.clear();
        subTable.initValue();

        subTable.ParmId = _parmId;
        subTable.PurchName = _purchName;
        subTable.OrigPurchId = _vendInvoiceInfoLine.OrigPurchId;
        subTable.TableRefId = _vendInvoiceInfoLine.TableRefId;

        if (_insert)
        {
            subTable.insert();
        }

        return subTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public static VendInvoiceInfoSubTable createFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable, boolean _insert = true)
    {
        return VendDocumentSubTableMap::createFromHeader(_vendInvoiceInfoTable, _insert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteIfNoLines</Name>
				<Source><![CDATA[
    public static void deleteIfNoLines(PurchId _origPurchId, ParmId _parmId, TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine line;

        select firstonly line
            where line.OrigPurchId == _origPurchId &&
                line.ParmId == _parmId &&
                line.TableRefId == _tableRefId;

        if (!line)
        {
            VendInvoiceInfoSubTable subTable;
            VendInvoiceInfoTable invoiceTable;

            ttsbegin;

            delete_from subTable
                where subTable.ParmId == _parmId &&
                    subTable.OrigPurchId == _origPurchId &&
                    subTable.TableRefId == _tableRefId;

            // If we delete the sub table record, we need to make sure that the PurchId is removed or updated on the VendInvoiceInfoTable record to remain accurate
            // with the current state of the invoice.

            invoiceTable = VendInvoiceInfoTable::find(_parmId, _tableRefId, true);

            if (invoiceTable.PurchId == '' || !VendInvoiceInfoSubTable::exist(_parmId, _tableRefId, invoiceTable.PurchId))
            {
                select firstOnly OrigPurchId from subTable
                    order by OrigPurchId
                    where subTable.ParmId == _parmId &&
                        subTable.TableRefId == _tableRefId;

                invoiceTable.PurchId = subTable.OrigPurchId;
                invoiceTable.doUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ParmId _parmId, TradeLineRefId _tableRefId, PurchId _origPurchId)
    {
        if (_tableRefId)
        {
            return (select firstonly RecId from vendInvoiceInfoSubTable
                        where vendInvoiceInfoSubTable.ParmId == _parmId
                            && vendInvoiceInfoSubTable.TableRefId == _tableRefId
                            && vendInvoiceInfoSubTable.OrigPurchId == _origPurchId).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAnyPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>VendInvoiceInfoSubTable</c> table.
    /// </summary>
    /// <param name="_parmId">
    /// The parameter ID that will be used to find the record.
    /// </param>
    /// <param name="_tableRefId">
    /// The table reference ID that will be used to find the record.
    /// </param>
    /// <returns>
    /// true, if a record exists; otherwise, false.
    /// </returns>
    public static boolean existAnyPurchId(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        if (_tableRefId)
        {
            select firstonly RecId from vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == _parmId &&
                    vendInvoiceInfoSubTable.TableRefId == _tableRefId &&
                    vendInvoiceInfoSubTable.OrigPurchId != '';
        }

        return vendInvoiceInfoSubTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the invoice subtable record with the specified <c>TableRefId</c>, <c>ParmId</c>,
    ///    and <c>OrigPurchId</c> fields.
    /// </summary>
    /// <param name="_parmId">
    ///    The parameter ID that will be used to find the record.
    /// </param>
    /// <param name="_tableRefId">
    ///    The table reference ID that will be used to find the record.
    /// </param>
    /// <param name="_origPurchId">
    ///    The original purchase order ID that will be used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendInvoiceInfoSubTable</c> record if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If the record does not exist, an empty <c>VendInvoiceInfoSubTable</c> record is returned.
    /// </remarks>
    public static VendInvoiceInfoSubTable find(
        ParmId _parmId,
        TradeLineRefId _tableRefId,
        PurchIdOrig _origPurchId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        if (_forUpdate)
        {
            vendInvoiceInfoSubTable.selectForUpdate(_forUpdate);
            if (_concurrencyModel != ConcurrencyModel::Auto)
            {
                vendInvoiceInfoSubTable.concurrencyModel(_concurrencyModel);
            }
        }

        select firstonly vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.TableRefId == _tableRefId &&
                vendInvoiceInfoSubTable.ParmId == _parmId &&
                vendInvoiceInfoSubTable.OrigPurchId == _origPurchId;

        return vendInvoiceInfoSubTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the invoice sub-table record for the given record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendInvoiceInfoSubTable</c> table record if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If the record does not exist, an empty <c>VendInvoiceInfoSubTable</c> table record is returned.
    /// </remarks>
    public static VendInvoiceInfoSubTable findRecId(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        if (_recId)
        {
            if (_forUpdate)
            {
                vendInvoiceInfoSubTable.selectForUpdate(_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendInvoiceInfoSubTable.concurrencyModel(_concurrencyModel);
                }
            }
            select firstonly vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.RecId == _recId;
        }
        return vendInvoiceInfoSubTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupParmId</Name>
				<Source><![CDATA[
    static void lookupParmId(FormStringControl _ctrl,ParmId _parmId)
    {
        Args args = new Args();
        VendIInvoiceInfoSubTableLookup formRun;

        args.name(formStr(VendInvoiceInfoSubTableLookup));

        args.caller(_ctrl);
        args.lookupField(fieldNum(VendInvoiceInfoSubTable, OrigPurchId));
        args.lookupValue(_ctrl.text());

        formRun = classfactory.formRunClass(args) as VendIInvoiceInfoSubTableLookup;
        formRun.parmId(_parmId);

        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ParmId</c> of <c>VendInvoiceInfoSubTable</c> records for a given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> used to determine which <c>VendInvoiceInfoSubTable</c> to move.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfoSubTable</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    /// <returns>
    /// true if one or more subtable source accounting events has changed; otherwise, false.
    /// </returns>
    public static boolean updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        boolean isAccountingEventChanged;

        vendInvoiceInfoSubTable.skipDataMethods(true);
        vendInvoiceInfoSubTable.skipEvents(true);
        vendInvoiceInfoSubTable.skipDatabaseLog(true);

        if (_newParmId == '')
        {
            update_recordset vendInvoiceInfoSubTable
            setting ParmId = _newParmId
            where vendInvoiceInfoSubTable.ParmId == _parmId
                && vendInvoiceInfoSubTable.TableRefId == _tableRefId;
        }
        else
        {
            while select forUpdate vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == _parmId
                    && vendInvoiceInfoSubTable.TableRefId == _tableRefId
            {
                vendInvoiceInfoSubTable.ParmId = _newParmId;
                boolean initResult = PurchFormletterParmDataInvoice::initSubTableSourceAccountingEvent(vendInvoiceInfoSubTable, true);
                isAccountingEventChanged = initResult || isAccountingEventChanged;
                vendInvoiceInfoSubTable.update();
            }
        }

        return isAccountingEventChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        super();

        this.deletePurchAgreementFromInvoice();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchAgreementFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the <c>PuchAgreementHeader_PSN</c> reference from the invoice if the associated <c>Purchase Order</c> is deleted.
    /// There will only ever be one <c>PurchAgreementHeader_PSN</c> reference on the invoice because only the first
    /// <c>Purchase order</c> added to the invoice can set the <c>PuchAgreementHeader_PSN</c> value.
    /// </summary>
    private void deletePurchAgreementFromInvoice()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.OrigPurchId)
        {
            VendInvoiceInfoTable vendInvoiceInfoTable = this.vendInvoiceInfoTable(true);

            if (vendInvoiceInfoTable.PurchAgreementHeader_PSN)
            {
                PurchTable purchTable;

                select RecId from purchTable
                    where purchTable.PurchId == this.OrigPurchId
                        && purchTable.MatchingAgreement == vendInvoiceInfoTable.PurchAgreementHeader_PSN;

                if (purchTable)
                {
                    vendInvoiceInfoTable.PurchAgreementHeader_PSN = 0;
                    vendInvoiceInfoTable.update();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126186</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS116189</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>OrigPurchId</TitleField1>
	<TitleField2>TableRefId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>TableRefIdx</PrimaryIndex>
	<ReplacementKey>TableRefIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceInfoSubMarkupMatchingTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceInfoSubMarkupMatchingTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseTable</Name>
			<Label>@SYS1653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@sys127863</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdOrig</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceAccountingEvent</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableRefIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigPurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountingEventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceAccountingEvent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrigPurchIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OrigPurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>VendDocumentSubTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PurchName</MapField>
					<MapFieldTo>PurchName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingEvent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingEvent</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingEvent</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingEvent</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceAccountingEvent</Name>
					<Field>SourceAccountingEvent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoSubTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPurchId</Name>
					<SourceEDT>PurchIdOrig</SourceEDT>
					<Field>OrigPurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123520</EntityRelationshipRole>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendInvoiceInfoSubTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>