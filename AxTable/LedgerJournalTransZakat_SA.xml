<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(LedgerJournalTransZakat_SA, SalesType):
                this.SalesId = '';
                this.ProjId  = '';
                break;

            case fieldnum(LedgerJournalTransZakat_SA, Subcontractor):
                this.ContractNum = '';
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the table of <c>LedgerJournalTransZakat_SA</c> record.
    /// </summary>
    /// <returns>
    /// true if the validate result is true; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;;

        if (this.SalesType == SalesTypeZakat_SA::Sales
            && this.SalesId == '')
        {
            ret = checkFailed(strfmt("@SYS26332", fieldpname(LedgerJournalTransZakat_SA, SalesId)));
        }
        if (this.SalesType == SalesTypeZakat_SA::Projects
            && this.ProjId == '')
        {
            ret = checkFailed(strfmt("@SYS26332", fieldpname(LedgerJournalTransZakat_SA, ProjId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean             ret;
        ProjTable           projTableLoc;
        LedgerJournalTrans  ledgerJournalTrans;
        VendAccount         vendAccount;
        VendAccount         vendAccountOffset;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(LedgerJournalTransZakat_SA, ProjId):
                    if (this.ProjId)
                    {
                        projTableLoc = ProjTable::find(this.ProjId);
                        if (projTableLoc.Status == ProjStatus::Completed)
                        {
                            ret = checkFailed(strfmt("@SYS330350", this.ProjId));
                        }

                        if (projTableLoc.Type != ProjType::TimeMaterial
                            && projTableLoc.Type != ProjType::FixedPrice && !(projTableLoc.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()))
                        {
                            ret = checkFailed(strfmt("@SYS329068" , this.ProjId, enum2str(ProjType::TimeMaterial), enum2str(ProjType::FixedPrice)));
                        }
                    }
                    break;

                case fieldnum(LedgerJournalTransZakat_SA, ContractNum):
                    ret = VendContractZakat_SA::checkExist(VendInfoZakat_SA::find(this.Subcontractor).VendAccount, this.ContractNum);
                    break;

                case fieldnum(LedgerJournalTransZakat_SA, Subcontractor):
                    if (this.Subcontractor != 0)
                    {
                        ledgerJournalTrans = LedgerJournalTrans::findRecId(this.LedgerJournalTrans, false);

                        if (ledgerJournalTrans.AccountType         == LedgerJournalACType::Vend
                           && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                        {
                            vendAccount         = VendTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension).AccountNum;
                            vendAccountOffset   = VendTable::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension).AccountNum;

                            if (VendInfoZakat_SA::findByVendAccount(vendAccount).IsSubcontractor
                                && VendInfoZakat_SA::findByVendAccount(vendAccountOffset).IsSubcontractor)
                            {
                                if (this.Subcontractor    != VendInfoZakat_SA::findByVendAccount(vendAccount).RecId
                                    && this.Subcontractor != VendInfoZakat_SA::findByVendAccount(vendAccountOffset).RecId)
                                {
                                    ret = checkFailed(strfmt("@SYS112224", VendInfoZakat_SA::find(this.Subcontractor).VendAccount, fieldpname(LedgerJournalTransZakat_SA, Subcontractor), tablepname(VendInfoZakat_SA)));
                                }
                            }
                        }
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>LedgerJournalTransZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerJournalTransZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalTransZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTransZakat_SA find(
        RecId               _recId,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        LedgerJournalTransZakat_SA ledgerJournalTransZakat;

        ledgerJournalTransZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTransZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalTransZakat
            where ledgerJournalTransZakat.RecId == _recId;

        return ledgerJournalTransZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>LedgerJournalTransZakat_SA</c> table with specified ledger journal line record id.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalTransZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTransZakat_SA findRefRecId(
        LedgerJournalTransRefRecId  _refRecId,
        boolean                     _forUpdate          = false,
        ConcurrencyModel            _concurrencyModel   = ConcurrencyModel::Auto)
    {
        LedgerJournalTransZakat_SA ledgerJournalTransZakat;

        ledgerJournalTransZakat.selectForUpdate(_forUpdate);
        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTransZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalTransZakat
            where ledgerJournalTransZakat.LedgerJournalTrans == _refRecId;

        return ledgerJournalTransZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubContratorGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the subcontractor group for the Zakat transaction.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    /// The record ID of the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// true if the Subcontractor is valid for the transaction; otherwise, false.
    /// </returns>
    public static boolean validateSubContratorGroup(RefRecId _ledgerJournalTransRecId)
    {
        boolean                     ret = true;
        LedgerJournalTransZakat_SA  ledgerJournalTransZakat;

        ledgerJournalTransZakat = LedgerJournalTransZakat_SA::findRefRecId(_ledgerJournalTransRecId);
        if ( ret
             && ledgerJournalTransZakat.Subcontractor
             && ledgerJournalTransZakat.ContractNum == '')
        {
            ret = checkFailed(strfmt("@SYS26332", fieldpname(LedgerJournalTransZakat_SA, ContractNum)));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322151</DeveloperDocumentation>
	<Label>@SYS322145</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Subcontractor</TitleField1>
	<TitleField2>ContractNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Subcontractor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MaintenanceExpense</Name>
			<Label>@SYS73307</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revenue</Name>
			<Label>@SYS10074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subcontractor</Name>
			<Label>@SYS22167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Subcontractor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS127400</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendContractNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesTypeZakat_SA</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Subcontractor</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS321589</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetGroupZakatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInfoZakatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Subcontractor</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroupZakat</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroupZakat_SA</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroupZakat_SA</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTransZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<Field>AssetGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTransZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInfoZakat</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInfoZakat_SA</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInfoZakat_SA</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTransZakat_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Subcontractor</Name>
					<Field>Subcontractor</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>