<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmForecastScenario</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmForecastScenario extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetCycleByPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Budget Cycle of the Budget Planning Process.
    /// </summary>
    /// <returns>
    /// Returns the budget cycle recprd of the budget planning process.
    /// </returns>

    public BudgetCycle getBudgetCycleByPlanningProcess()
    {
        // this method will be deleted
        //BudgetCycle budgetCycle;

        //BudgetPlanningProcess   budgetPlanningProcess;
        //
        //select budgetCycle
        //join RecId from budgetPlanningProcess
        //where budgetCycle.RecId == budgetPlanningProcess.BudgetCycle
        //&& budgetPlanningProcess.RecId == this.BudgetPlanningProcess;

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityByPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Ledger associated with the Budget Planning Process.
    /// </summary>
    /// <returns>
    /// Returns the Ledger record associated with Budget Planning Process.
    /// </returns>

    public CompanyInfoRecId getLegalEntityByPlanningProcess()
    {
        //This method will be deleted from SYP layer
        //Ledger ledger;
        //BudgetPlanningProcess   budgetPlanningProcess;
        //
        //budgetPlanningProcess = BudgetPlanningProcess::find(this.BudgetPlanningProcess);
        //ledger = Ledger::find(budgetPlanningProcess.Ledger);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.defaultRow();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPositionDurationWithinBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the position activation or retirement date falls within the Budget Cycle duration.
    /// </summary>
    /// <param name="_positionActivationDate">
    /// The Forecast Position Activation Date to be checked.
    /// </param>
    /// <param name="_positionRetirementDate">
    /// The Forecast Position Retirement Date to be checked.
    /// </param>
    /// <returns>
    /// True, if position activation or retirement date falls withing the budget process cycle duration, else, false.
    /// </returns>

    public boolean isPositionDurationWithinBudgetCycle(ValidFromDate _positionActivationDate,
                                                    ValidToDate _positionRetirementDate)
    {
        BudgetCycle     budgetCycle;
        ValidFromDate   budgetCycleStartDate;
        ValidToDate     budgetCycleEndDate;
        boolean         isValid = true;
        BudgetPlanningProcess budgetPlanningProcess;

        budgetPlanningProcess = BudgetPlanningProcess::find(this.BudgetPlanningProcess);
        budgetCycle = BudgetCycle::find(budgetPlanningProcess.BudgetCycle);

        budgetCycleStartDate = budgetCycle.getStartDate();
        budgetCycleEndDate   = budgetCycle.getEndDate();

        if ((_positionActivationDate < budgetCycleStartDate && _positionRetirementDate < budgetCycleStartDate) ||
                (_positionActivationDate > budgetCycleEndDate && _positionRetirementDate > budgetCycleEndDate))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmForecastScenario</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(HcmForecastScenarioRecId _recId)
    {
        boolean ret = true;

        if (!HcmForecastScenario::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmForecastScenario::txtNotExist(), tableId2name(tableNum(HcmForecastScenario))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmForecastScenario</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean exist(HcmForecastScenarioRecId _recId)
    {
        return _recId && (select firstonly RecId from hcmForecastScenario
                    where hcmForecastScenario.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmForecastScenario</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmForecastScenario</c> table.
    /// </returns>

    public static HcmForecastScenario find(
    HcmForecastScenarioRecId         _recId,
    boolean                         _forUpdate = false,
    ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmForecastScenario hcmForecastScenario;

        hcmForecastScenario.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmForecastScenario.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmForecastScenario
             where hcmForecastScenario.RecId == _recId;

        return hcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPlanningProcessAndScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmForecastScenario</c> table based on supplied values of the <c>BudgetPlanningProcess</c> and <c>BudgetPlanScenario</c> fields.
    /// </summary>
    /// <param name="_budgetPlanningProcess">
    /// The value of the <c>BudgetPlanningProcess</c> field to find.
    /// </param>
    /// <param name="_budgetPlanScenario">
    /// The value of the <c>BudgetPlanScenario</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmForecastScenario</c> table.
    /// </returns>

    public static HcmForecastScenario findByPlanningProcessAndScenario(
    BudgetPlanningProcessRecId _budgetPlanningProcess,
    BudgetPlanScenarioRecId _budgetPlanScenario,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmForecastScenario hcmForecastScenario;

        hcmForecastScenario.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmForecastScenario.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmForecastScenario
            where hcmForecastScenario.BudgetPlanningProcess == _budgetPlanningProcess
                && hcmForecastScenario.BudgetPlanScenario == _budgetPlanScenario;

        return hcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPlanningProcessAndScenarioName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmForecastScenario</c> table based on the record ID of a
    /// <c>BudgetPlanningProcess</c> table record and the name of a <c>BudgetPlanScenario</c> table record.
    /// </summary>
    /// <param name="_budgetPlanningProcess">
    /// The record ID of the <c>BudgetPlanningProcess</c> table record to find.
    /// </param>
    /// <param name="_budgetPlanScenarioName">
    /// The Name field of the <c>BudgetPlanScenario</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that specifies whether to read the table record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmForecastScenario</c> table.
    /// </returns>
    public static HcmForecastScenario findByPlanningProcessAndScenarioName(
        BudgetPlanningProcessRecId  _budgetPlanningProcess,
        BudgetPlanScenarioName      _budgetPlanScenarioName,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmForecastScenario hcmForecastScenario;
        BudgetPlanScenario  budgetPlanScenario;

        hcmForecastScenario.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmForecastScenario.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmForecastScenario
            join RecId, Name from budgetPlanScenario
                where hcmForecastScenario.BudgetPlanningProcess == _budgetPlanningProcess
                    && hcmForecastScenario.BudgetPlanScenario == budgetPlanScenario.RecId
                    && budgetPlanScenario.Name == _budgetPlanScenarioName;

        return hcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastScenarioByPosFctScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the forecast scenario by position forecast scenario.
    /// </summary>
    /// <param name="_hcmPositionForecastScenarioRecId">
    /// The value of the <c>HcmPositionForecastScenarioRecId</c> field to get.
    /// </param>
    /// <returns>
    /// Returns <c>HcmForecastScenario</c> table record.
    /// </returns>

    public static HcmForecastScenario getForecastScenarioByPosFctScenario(HcmPositionForecastScenarioRecId  _hcmPositionForecastScenarioRecId)
    {
        HcmPositionForecastScenario hcmPositionForecastScenario;
        HcmForecastScenario hcmForecastScenario;

        select hcmForecastScenario
            join RecId from hcmPositionForecastScenario
                where hcmPositionForecastScenario.ForecastScenario == hcmForecastScenario.RecId
                    && hcmPositionForecastScenario.RecId == _hcmPositionForecastScenarioRecId;

        return hcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in some fields in the <c>HcmForecastScenario</c>table.
    /// </summary>
    /// <remarks>
    /// Sets valid default values in the non-interactive case for some fields:
    /// <c>LegalEntity</c>,
    /// <c>BudgetProcessStartDate</c>,
    /// <c>BudgetProcessEndDate</c>.
    /// </remarks>
    public void defaultRow()
    {
        BudgetPlanningProcess budgetPlanningProcess = BudgetPlanningProcess::find(this.BudgetPlanningProcess);
        BudgetCycle budgetCycle = BudgetCycle::find(budgetPlanningProcess.BudgetCycle);

        this.BudgetProcessStartDate = budgetCycle.getStartDate();
        this.BudgetProcessEndDate   = budgetCycle.getEndDate();

        this.LegalEntity = Ledger::find(budgetPlanningProcess.Ledger).PrimaryForLegalEntity;

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4005762</DeveloperDocumentation>
	<Label>@SYS4005760</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanScenario</TitleField1>
	<TitleField2>BudgetPlanningProcess</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>HcmForecastScenarioIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanScenario</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BudgetProcessEndDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalPeriodEnd</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BudgetProcessStartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalPeriodStart</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@SYS328319</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmForecastScenarioIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetPlanScenario</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanningProcess</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningProcess</Name>
					<Field>BudgetPlanningProcess</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanScenario</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BudgetPlanScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanScenario</Name>
					<Field>BudgetPlanScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_Ledger</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>