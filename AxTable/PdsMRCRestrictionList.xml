<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRestrictionList</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsMRCRestrictionList extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRestrictedListByItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRestrictedListByItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRestrictedListByItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountryListType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a list for the country/region exists with an opposite list type.
    /// </summary>
    /// <returns>
    /// true if a list with an opposite type exists for the country/region; otherwise, false.
    /// </returns>
    public boolean validateCountryListType()
    {
        PdsMRCRestrictionList   list;
        boolean                 ret = true;

        select firstonly ListType, RecId
            from list
            where  list.CountryId   == this.CountryId
                && list.StateId     == ''
                && list.ListType    != this.ListType
                && list.RecId       != this.RecId;

        if (list.RecId)
        {
            ret = checkFailed(strfmt(
                                "@PDS1225",
                                this.CountryId,
                                enum2str(list.ListType)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks as to whether or not a given record can be deleted.
    /// </summary>
    /// <returns>result of check if record can be deleted.</returns>
    public boolean validateDelete()
    {
        PdsMRCRestrictionList   restrictionList;
        boolean                 ret;

        ret = super();

        //Check associated records.
        if (ret
            && ((select firstonly pdsMRCRestrictedListByItem
                    where  pdsMRCRestrictedListByItem.ListId        == this.ListId
                        && pdsMRCRestrictedListByItem.CountryId     == this.CountryId
                        && pdsMRCRestrictedListByItem.ItemId        != "").RecId != 0
                || (select firstonly pdsMRCRestrictedListByItem
                        where  pdsMRCRestrictedListByItem.ListId    == this.ListId
                            && pdsMRCRestrictedListByItem.CountryId == this.CountryId
                            && pdsMRCRestrictedListByItem.StateId   == this.StateId
                            && pdsMRCRestrictedListByItem.ItemId    != "").RecId != 0))
        {
            ret = checkFailed("@PDS859");
        }

        //Check Inclusive Country/Region list for State lists.
        if (ret
            && !this.StateId
            && this.ListType == PdsMRCListType::Inclusive)
        {
            select count(RecId)
                from restrictionList
                where  restrictionList.CountryId    == this.CountryId
                    && restrictionList.StateId      == ""
                    && restrictionList.ListType     == PdsMRCListType::Inclusive;

            if (restrictionList.RecId == 1
                && (select firstonly pdsMRCRestrictionList
                        where  pdsMRCRestrictionList.ListId     != ""
                            && pdsMRCRestrictionList.CountryId  == this.CountryId
                            && pdsMRCRestrictionList.StateId    != "").RecId != 0)
            {
                ret = checkFailed(strfmt("@PDS860", this.CountryId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calls validateStateListType if the field modified is either StatIe or ListType.
    /// </summary>
    /// <param name="_fieldIdToCheck">fieldId of field to validate.</param>
    /// <returns>Return value of call to validateStateListType().</returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(PdsMRCRestrictionList, StateId):
                case fieldnum(PdsMRCRestrictionList, ListType):
                    ret = this.validateStateListType();
                    break;
                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStateListType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false if there is a stateid and ListType is Inclusive.
    /// </summary>
    /// <returns>Result of check for stateId and ListType Inclusive.</returns>
    public boolean validateStateListType()
    {
        boolean     ret = true;

        if (this.StateId && this.ListType == PdsMRCListType::Inclusive)
        {
            ret = checkFailed(strfmt("@PDS861", this.CountryId, this.StateId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to make sure data is valid before writing the record to the database.
    /// </summary>
    /// <returns>result of validation of data on record.</returns>
    public boolean validateWrite()
    {
        boolean                 ret;
        PdsMRCRestrictionList   restrictionList;

        ret = super();

        if (ret && !this.StateId)
        {
            ret = this.validateCountryListType();
        }

        if (ret
            && this.ListType != PdsMRCListType::Inclusive
            && this.ListType != PdsMRCListType::Exclusive)
        {
            ret = checkFailed("@PDS1171");
        }
        if (ret)
        {
            //Check State list type is Exclusive.
            ret = this.validateStateListType();
        }
        // Check for country/region inclusive lists if current is a state list.
        if (ret && this.CountryId && this.StateId)
        {
            if (!(select pdsMRCRestrictionList
                    where  pdsMRCRestrictionList.CountryId == this.CountryId
                        && pdsMRCRestrictionList.StateId   == ""
                        && pdsMRCRestrictionList.ListType  == PdsMRCListType::Inclusive

                 ).RecId)
            {
                ret = checkFailed(strfmt("@PDS862",LogisticsAddressCountryRegion::name(this.CountryId)));
            }
        }

        //Modified record.
        if (ret && this.RecId)
        {
            //Key fields have been modified.
            if (this.orig().ListType  != this.ListType)
            {
                //Check modified record is Country/Region inclusive.
                if (!this.StateId && this.orig().ListType == PdsMRCListType::Inclusive)
                {
                    //Count the number of inclusive country/region lists.
                    select count(RecId)
                        from restrictionList
                        where  restrictionList.CountryId    == this.CountryId
                            && restrictionList.StateId      == ""
                            && restrictionList.ListType     == PdsMRCListType::Inclusive;

                    //Check if there is only 1 inclusive for orig country/region AND
                    //there are state (exclusive) lists.
                    if (restrictionList.RecId == 1
                        && (select pdsMRCRestrictionList
                                where  pdsMRCRestrictionList.ListId    != ""
                                    && pdsMRCRestrictionList.CountryId == this.CountryId
                                    && pdsMRCRestrictionList.StateId   != "")
                            .RecId)
                    {
                        ret =
                            checkFailed(strfmt("@PDS863",LogisticsAddressCountryRegion::name(this.CountryId)));
                    }
                }

                //Check item associations.
                if (ret
                    && ((select pdsMRCRestrictedListByItem
                            where  pdsMRCRestrictedListByItem.ListId    == this.ListId
                                && pdsMRCRestrictedListByItem.CountryId == this.CountryId
                                && pdsMRCRestrictedListByItem.StateId   == this.StateId
                                && pdsMRCRestrictedListByItem.ItemId    != "")
                        .RecId))
                {
                    ret = checkFailed("@PDS864");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select pdsMRCRestrictionList
                    where  pdsMRCRestrictionList.RecId == _recId)
                .RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsMRCRestrictionList find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsMRCRestrictionList restrictionList;

        if (_recId)
        {
            restrictionList.selectForUpdate(_forUpdate);
            select firstonly restrictionList
                where  restrictionList.RecId   == _recId;
        }

        return restrictionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds record with corresponding ListId, countryId and stateId.
    /// </summary>
    /// <param name="_listId">ListId id of list to be found</param>
    /// <param name="_countryId">CountryId used to find list</param>
    /// <param name="_stateId">StateId used to find list</param>
    /// <returns>Record that is found with corresponding listId, countryId and stateId.</returns>
    public static PdsMRCRestrictionList findState(
        PdsMRCListId            _listId,
        AddressCountryRegionId  _countryId,
        AddressStateId          _stateId)
    {
        PdsMRCRestrictionList restrictionList;

        if (_countryId && _listId)
        {
            select firstonly restrictionList
                where  restrictionList.ListId    == _listId
                    && restrictionList.CountryId == _countryId
                    && restrictionList.StateId   == _stateId;
        }

        return restrictionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCountryState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a countries/regions lookup based on existing restriction lists
    /// for a given country/region and state.
    /// </summary>
    /// <param name="_callerControl">
    /// Caller form control
    /// </param>
    /// <param name="_countryId">
    /// Country/region the lists should belong to.
    /// </param>
    /// <param name="_stateId">
    /// State the lists should belong to.
    /// </param>
    public static void lookupCountryState(
        FormControl             _callerControl,
        AddressCountryRegionId  _countryId,
        AddressStateId          _stateId)
    {
        SysTableLookup          lookup;
        Query                   query;
        QueryBuildDataSource    qbds;

        query = new Query();

        qbds = query.addDataSource(tableNum(PdsMRCRestrictionList));

        qbds.addRange(fieldNum(PdsMRCRestrictionList, CountryId)).value(_countryId  ? _countryId    : SysQuery::valueEmptyString());
        qbds.addRange(fieldNum(PdsMRCRestrictionList, StateId  )).value(_stateId    ? _stateId      : SysQuery::valueEmptyString());

        lookup = SysTableLookup::newParameters(tableNum(PdsMRCRestrictionList), _callerControl);

        lookup.parmQuery(query);

        lookup.addLookupfield(fieldNum(PdsMRCRestrictionList, ListId));
        lookup.addLookupfield(fieldNum(PdsMRCRestrictionList, ListName));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default warning used in the checkExist method when record doens't exist.
    /// </summary>
    /// <returns>Static text used to display that a record doens't exist.</returns>
    public static TxtNotExist txtNotExist()
    {
        return "@PDS865";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsMRC</ConfigurationKey>
	<DeveloperDocumentation>@PDS1089</DeveloperDocumentation>
	<FormRef>PdsMRCRestrictionList</FormRef>
	<Label>@PDS854</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CountryId</TitleField1>
	<TitleField2>ListId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CountryStateListIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CountryStateListIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListInfo</Name>
			<Label>@PDS858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ListName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCListId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCListName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ListType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsMRCListType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CountryStateListIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ListId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>