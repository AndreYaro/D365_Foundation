<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsRebateTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the claim is linked to an agreement the currency of the agreement is returned.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display CurrencyCode agreementCurrency()
    {
        PdsRebateAgreement pdsRebateAgreement;
        CurrencyCode       rebateCurrency;

        if (this.PdsRebateAgreementRefRecId)
        {
            pdsRebateAgreement = PdsRebateAgreement::find(this.PdsRebateAgreementRefRecId);

            rebateCurrency = pdsRebateAgreement.RebateCurrency;
        }

        return rebateCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the claim is linked to an agreement the unit of measure on the agreement is returned.
    /// </summary>
    /// <returns>
    /// The unit of measure symbol.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display UnitOfMeasureSymbol agreementUOM()
    {
        PdsRebateAgreement        pdsRebateAgreement;
        UnitOfMeasureSymbol       rebateUOM;

        if (this.PdsRebateAgreementRefRecId)
        {
            pdsRebateAgreement = PdsRebateAgreement::find(this.PdsRebateAgreementRefRecId);

            rebateUOM = pdsRebateAgreement.PdsRebateUnit;
        }

        return rebateUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amounts based on the rebate amount type.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The <c>PdsRebateAgreement</c> record; Optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The rebate amount type other than AmountPerUnit, FixedAmount and Percentage is not valid.
    /// </exception>
    public void calculateRebateAmount(
        PdsRebateAgreement  _pdsRebateAgreement = null)
    {
        PdsRebateAmt rebateAmount;

        PdsRebateAgreementLine  pdsRebateAgreementLine  = this.rebateAgreementLine();
        PdsRebateAgreement      pdsRebateAgreement      = this.pdsRebateAgreement();

        switch (pdsRebateAgreementLine.RebateAmtType)
        {
            case PdsRebateAmtType::AmountPerUnit :
                rebateAmount = this.rebateAmountPerUnit();
                break;

            case PdsRebateAmtType::FixedAmount:
                rebateAmount = this.convertToNegativeRebate(this.rebateAgreementLine().RebateValue);
                break;

            case PdsRebateAmtType::Percentage:
                rebateAmount = this.SalesAmount
                                    * pdsRebateAgreementLine.RebateValue
                                    / 100;
                break;

            default:
                throw error("@PDS1430");
        }

        rebateAmount = CurrencyExchangeHelper::amount(rebateAmount, pdsRebateAgreementLine.Currency);
        this.PdsStartingRebateAmt   = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, pdsRebateAgreementLine.Currency, this.CurrencyCode);
        this.PdsCorrectedRebateAmt  = this.PdsStartingRebateAmt;
        this.PdsRebateBalance       = this.PdsStartingRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the rebate can be deleted.
    /// </summary>
    /// <returns>
    /// true, if the rebate can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeleted()
    {
        return this.status().canBeDeleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConsumedRebateAmount</Name>
				<Source><![CDATA[
    public boolean checkConsumedRebateAmount()
    {
        boolean ret = true;

        if ( this.PdsStartingRebateAmt * this.PdsCorrectedRebateAmt < 0 || abs(this.PdsCorrectedRebateAmt) > abs(this.PdsRebateBalance))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidDate</Name>
				<Source><![CDATA[
    public boolean checkValidDate(date _startDate, date _endDate)
    {
        boolean ret = true;

        if (    (_startDate && (_startDate  >
                                                this.RebateCalcDate
                                                ))
            ||  (_endDate   && (_endDate    <
                                                this.RebateCalcDate
                                                )))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToNegativeRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a negative rebate amount if rebate quantity is negative or if the related sales line is a return item.
    /// </summary>
    /// <param name="_rebateAmount">
    /// The rebate amount.
    /// </param>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    public Amount convertToNegativeRebate(Amount _rebateAmount)
    {
        PdsRebateAmt    rebateAmount = _rebateAmount;
        Qty             quantity = this.custInvoiceTrans().RecId ? this.custInvoiceTrans().Qty
                                 : SalesLine::findRecId(this.SalesLineRefRecId).SalesQty;

        rebateAmount = rebateAmount * sign(quantity);

        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>CustInvoiceTrans</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>CustInvoiceTrans</c> table record.
    /// </returns>
    public CustInvoiceTrans custInvoiceTrans(boolean _forUpdate = false)
    {
        return CustInvoiceTrans::findRecId(this.CustInvoiceTransRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customer_CurrencyCode</Name>
				<Source><![CDATA[
    public display CurrencyCode customer_CurrencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the <c>PdsRebateTable</c> table.
    /// </summary>
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        if (!this.canBeDeleted())
        {
            throw error(strfmt("@PDS1509", this.PdsRebateStatus));
        }

        PdsRebateTableStatusType rebateTableStatusType = this.status();

        rebateTableStatusType.deleting();

        super();

        rebateTableStatusType.deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endOfCumulationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the end date for the period type selected for the rebate agreement.
    /// </summary>
    /// <returns>
    /// The end date of the period type.
    /// </returns>
    public date endOfCumulationPeriod()
    {
        PdsRebateAgreement  pdsRebateAgreement  = this.pdsRebateAgreement();
        date                creationDate        = this.RebateCalcDate;
        date                endDate;
        
        #TimeConstants

        switch (pdsRebateAgreement.PdsCumulateSalesBy)
        {
            case PdsCumulationPeriod::Week:
                WeekDays startingDayOfWeek = PdsRebateParameters::find().PdsStartingDayOfWeekPeriod;

                endDate = dayOfWk(creationDate) >= startingDayOfWeek ? 
                          (creationDate + (#daysPerWeek - dayOfWk(creationDate) + startingDayOfWeek) - 1) : 
                          (creationDate + (startingDayOfWeek - dayOfWk(creationDate)) - 1);
                break;
            case PdsCumulationPeriod::Month:
                endDate = endmth(creationDate);
                break;
            case PdsCumulationPeriod::Year:
                endDate = mkDate(#daysPerMonth + 1, #monthsPerYear, year(creationDate));
                break;
            case PdsCumulationPeriod::CustomizedPeriod:
                endDate = ProjPeriodLine::findFromPeriod(pdsRebateAgreement.RebateCustomizedPeriodType, creationDate).PeriodTo;
                break;
            case PdsCumulationPeriod::Lifetime:
                endDate = pdsRebateAgreement.ValidTo ? pdsRebateAgreement.ValidTo : dateMax();
                break;
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PdsRebateTable</c> table record with the values from an <c>CustInvoicejour</c> and <c>CustInvoiceTrans</c> table records.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoicejour</c> table record.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The  <c>CustInvoiceTrans</c> table record.
    /// </param>
    /// <param name="_sumQty">
    /// Total quantity for the rebate.
    /// </param>
    /// <param name="_sumGrossAmt">
    /// Total gross amount for the rebate.
    /// </param>
    /// <param name="_sumNetAmt">
    /// Total net amount for the rebate.
    /// </param>
    /// <param name="_cwSumQty">
    /// Total catch weight quantity for the rebate.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    public void initFromCustInvoiceJour(
        CustInvoiceJour         _custInvoiceJour,
        CustInvoiceTrans        _custInvoiceTrans,
        SalesQty                _sumQty         = 0,
        Amount                  _sumGrossAmt    = 0,
        Amount                  _sumNetAmt      = 0,
        PdsCWInventQty          _cwSumQty       = 0,
        CurrencyCode            _currencyCode   = _custInvoiceJour.custTable_InvoiceAccount().Currency)
    {
        date                    calcDate;
        PdsRebateAgreement  pdsRebateAgreement = this.pdsRebateAgreement();
        UnitOfMeasureSymbol     salesUnit;
        Qty                     salesQty;
        Qty                     rebateQty;

        if (_custInvoiceJour
            && _custInvoiceTrans)
        {
            if (pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::GroupId)
            {
                this.PdsCustRebateGroupId = pdsRebateAgreement.PdsCustRebateRelation;
            }

            if (pdsRebateAgreement.PdsItemRebateCode ==
                                                        PdsRebateItemCode::GroupId
                                                        )
            {
                this.PdsItemRebateGroupId = pdsRebateAgreement.PdsItemRebateRelation;
            }

            this.SalesId                    = _custInvoiceJour.SalesId;
            this.SalesInvoiceId             = _custInvoiceJour.InvoiceId;
            calcDate = pdsRebateAgreement.setCalcDate(_custInvoiceTrans.salesLine());

            this.RebateCalcDate             = calcDate;
            if (pdsRebateAgreement.PdsPaymtType == PdsPaymtType::CustomerDeduction)
            {
                this.CustAccount                = _custInvoiceJour.OrderAccount;
                this.CurrencyCode               = _custInvoiceJour.custTable_OrderAccount().Currency;
            }
            else if (pdsRebateAgreement.PdsPaymtType == PdsPaymtType::InvoiceCustomerDeduction)
            {
                this.CustAccount                = _custInvoiceJour.InvoiceAccount;
                this.CurrencyCode               = _custInvoiceJour.custTable_InvoiceAccount().Currency;
            }
            else
            {
                this.CustAccount                = _custInvoiceJour.InvoiceAccount;
                this.CurrencyCode               = _currencyCode;
            }
            this.PdsCustInvoiceJourRefRecId = _custInvoiceJour.RecId;

            this.InventTransId              = _custInvoiceTrans.InventTransId;
            this.ItemId                     = _custInvoiceTrans.ItemId;
            this.SalesPriceUnit             = _custInvoiceTrans.SalesPrice;
            this.SalesNetExtendedPrice      = _sumNetAmt
                                                ? _sumNetAmt
                                                : _custInvoiceTrans.LineAmount;

            this.SalesInvoicedQty           = _sumQty
                                                ? _sumQty
                                                : _custInvoiceTrans.Qty;

            this.PdsCWSalesInvoicedQty      = _cwSumQty
                                                ? _cwSumQty
                                                : _custInvoiceTrans.PdsCWQty;

            salesUnit = pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit
                                                ? _custInvoiceTrans.SalesUnit
                                                : _custInvoiceTrans.pdsCWUnitId();
            salesQty = pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit
                                                ? this.SalesInvoicedQty
                                                : this.PdsCWSalesInvoicedQty;
            EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(this.ItemId,
																																	   _custInvoiceTrans.InventDimId,
																																	   salesUnit,
																																	   pdsRebateAgreement.PdsRebateUnit,
                                                                                                                                       NoYes::No,
                                                                                                                                       NoYes::No);
            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                rebateQty = ecoResProductUnitConverter.convertValue(salesQty);
            }
            else
            {
                throw error(strFmt("@PRO1166",
                                this.ItemId,
                                pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit
                                    ? _custInvoiceTrans.SalesUnit
                                    : _custInvoiceTrans.pdsCWUnitId(),
                                    pdsRebateAgreement.PdsRebateUnit));
            }

            if (pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
            {
                this.SalesInvoicedQty =  rebateQty;
            }
            else
            {
                this.PdsCWSalesInvoicedQty = rebateQty;
            }

            if (pdsRebateAgreement.PdsRebateTakenFrom == PdsRebateTakenFrom::Gross)
            {
                this.SalesAmount            = _sumGrossAmt
                                                ? _sumGrossAmt
                                                : PdsRebateHelpers::grossAmountFromCustInvoiceTrans(_custInvoiceTrans);
            }
            else
            {
                this.SalesAmount            = this.SalesNetExtendedPrice;
            }

            if (pdsRebateAgreement.RebateCurrency != _custInvoiceTrans.CurrencyCode)
            {
                // we are storing the value without rounding
                this.SalesAmount = CurrencyExchangeHelper::curAmount2CurAmount(this.SalesAmount, _custInvoiceTrans.CurrencyCode, pdsRebateAgreement.RebateCurrency);
            }
            this.CustInvoiceTransRefRecId   = _custInvoiceTrans.RecId;

            if (pdsRebateAgreement.IsTaxable)
            {
                this.TaxGroup     = _custInvoiceTrans.TaxGroup;
                this.TaxItemGroup = _custInvoiceTrans.TaxItemGroup;
            }

            this.PdsProcessDate = _custInvoiceJour.InvoiceDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPdsRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PdsRebateTable</c> table record with the values from <c>PdsRebateAgreementLine</c> table record.
    /// </summary>
    /// <param name="_pdsRebateAgreementLine">
    /// The <c>PdsRebateAgreementLine</c> record.
    /// </param>
    public void initFromPdsRebateAgreement(
        PdsRebateAgreementLine  _pdsRebateAgreementLine)
    {
        PdsRebateAgreement  pdsRebateAgreement;

        if (_pdsRebateAgreementLine)
        {
            pdsRebateAgreement                  = _pdsRebateAgreementLine.pdsRebateAgreement();

            this.PdsRebateValue                 = _pdsRebateAgreementLine.RebateValue;
            this.PdsRebateAmtType               = _pdsRebateAgreementLine.RebateAmtType;
            this.LedgerDimension                = pdsRebateAgreement.LedgerDimension;
            this.OffsetLedgerDimension          = pdsRebateAgreement.OffsetLedgerDimension;

            this.PdsPaymtType                   = pdsRebateAgreement.PdsPaymtType;
            this.RebateAgreementLineRefRecId    = _pdsRebateAgreementLine.RecId;
            this.PdsRebateAgreementRefRecId     = pdsRebateAgreement.RecId;
            this.PdsRebateType                  = pdsRebateAgreement.PdsRebateType;

            this.tamMerchandisingEventID        = pdsRebateAgreement.tamMerchandisingEventID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPdsRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PdsRebateTable</c> table buffer based on another <c>PdsRebateTable</c> table buffer.
    /// </summary>
    /// <param name="_pdsRebateTable">
    ///    The <c>PdsRebateTable</c> table buffer that is to be copied.
    /// </param>
    /// <remarks>
    ///    Used for generating adjustments for locked claims when cumulating claims.
    /// </remarks>
    public void initFromPdsRebateTable(PdsRebateTable _pdsRebateTable)
    {
        this.PdsRebateId                  = _pdsRebateTable.initPdsRebateId();
        this.CustAccount                  = _pdsRebateTable.CustAccount;
        this.PdsRebateType                = _pdsRebateTable.PdsRebateType;
        this.ItemId                       = _pdsRebateTable.ItemId;
        this.PdsRebateAgreementRefRecId   = _pdsRebateTable.PdsRebateAgreementRefRecId;
        this.CurrencyCode                 = _pdsRebateTable.CurrencyCode;
        this.PdsCustInvoiceJourRefRecId   = _pdsRebateTable.PdsCustInvoiceJourRefRecId;
        this.LedgerDimension              = _pdsRebateTable.LedgerDimension;
        this.DefaultDimension             = _pdsRebateTable.DefaultDimension;
        this.OffsetLedgerDimension        = _pdsRebateTable.OffsetLedgerDimension;
        this.OffsetDefaultDimension       = _pdsRebateTable.OffsetDefaultDimension;
        this.CustInvoiceTransRefRecId     = _pdsRebateTable.CustInvoiceTransRefRecId;
        this.SalesInvoiceId               = _pdsRebateTable.SalesInvoiceId;
        this.SalesId                      = _pdsRebateTable.SalesId;
        this.TaxGroup                     = _pdsRebateTable.TaxGroup;
        this.TaxItemGroup                 = _pdsRebateTable.TaxItemGroup;
        this.PdsItemRebateGroupId         = _pdsRebateTable.PdsItemRebateGroupId;
        this.PdsCustRebateGroupId         = _pdsRebateTable.PdsCustRebateGroupId;
        this.TAMMerchandisingEventID      = _pdsRebateTable.TAMMerchandisingEventID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPdsRebateAgreementTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the rebate table record with the values from rebate agreement table buffer.
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The rebate agreement table record by which rebate is creating.</param>
    public void initFromPdsRebateAgreementTable(PdsRebateAgreement _pdsRebateAgreement)
    {
        if (_pdsRebateAgreement)
        {
            this.LedgerDimension                = _pdsRebateAgreement.LedgerDimension;
            this.OffsetLedgerDimension          = _pdsRebateAgreement.OffsetLedgerDimension;
            this.PdsPaymtType                   = _pdsRebateAgreement.PdsPaymtType;
            this.PdsRebateAgreementRefRecId     = _pdsRebateAgreement.RecId;
            this.PdsRebateType                  = _pdsRebateAgreement.PdsRebateType;
            this.tamMerchandisingEventID        = _pdsRebateAgreement.tamMerchandisingEventID;
            this.PdsRebateAmtType               = PdsRebateAmtType::FixedAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPdsRebateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new unique number from the rebate number sequence for the <c>PdsRebateId</c> field.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// true if the number is committed later; optional.
    /// </param>
    /// <returns>
    /// The unique number for the <c>PdsRebateId</c> field.
    /// </returns>
    public PdsRebateId initPdsRebateId(boolean _makeDecisionLater = true)
    {
        PdsRebateId rebateId;
        NumberSeq   numberSeq;

        numberSeq = PdsRebateTable::numSeqPdsRebate(_makeDecisionLater);

        rebateId = numberSeq.num();

        return rebateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in the <c>PdsRebateTable</c> table.
    /// </summary>
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PdsRebateTableStatusType rebateTableStatusType = this.status();

        rebateTableStatusType.inserting();

        this.PdsRebateId = this.initPdsRebateId();

        super();

        rebateTableStatusType.inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount to post based on the rebate status.
    /// </summary>
    /// <returns>
    /// The ledger posting amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return this.status().ledgerPostingAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMarkForCreditTotalAmt</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display server PdsMarkForCreditTotalAmt pdsMarkForCreditTotalAmt()
    {
        Amount          totalAmount = 0;
        PdsRebateTable  pdsRebateTmpTable;

        if (hasFieldAccess(tableNum(PdsRebateTable),
                           fieldNum(PdsRebateTable,PdsCorrectedRebateAmt),
                           AccessType::View))
        {
            while select PdsRebateType,
                         PdsCorrectedRebateAmt,
                         CurrencyCode
                from pdsRebateTmpTable
                where  pdsRebateTmpTable.CustAccount      == this.CustAccount
                    && pdsRebateTmpTable.PdsMarkForCredit == NoYes::Yes
            {
                totalAmount += CurrencyExchangeHelper::curAmount2CurAmount(pdsRebateTmpTable.PdsCorrectedRebateAmt, pdsRebateTmpTable.CurrencyCode, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), true);
            }
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding PdsRebateAgreement record.
    /// </summary>
    /// <param name="_forUpdate">Record needs to be update.</param>
    /// <returns>The corresponding PdsRebateAgreement.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsRebateAgreement pdsRebateAgreement(boolean _forUpdate = false)
    /// </syntax>
    /// </remarks>
    public PdsRebateAgreement pdsRebateAgreement(boolean _forUpdate = false)
    {
        return PdsRebateAgreement::find(
            this.PdsRebateAgreementRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUnitType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding PdsUnitType from PdsRebateAgreement table.
    /// </summary>
    /// <returns>The corresponding PdsUnitType.</returns>
    /// <remarks>
    /// <syntax>
    /// public pdsUnitType pdsUnitType()
    /// </syntax>
    /// </remarks>
    public display PdsUnitType pdsUnitType()
    {
        return this.pdsRebateAgreement().PdsUnitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAgreementLine</Name>
				<Source><![CDATA[
    ///<summary>
    /// Returns the corresponding <c>PdsRebateAgreementLine</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>PdsRebateAgreementLine</c> table record.
    /// </returns>
    public PdsRebateAgreementLine rebateAgreementLine(boolean _forUpdate = false)
    {
        return PdsRebateAgreementLine::find(this.RebateAgreementLineRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amount when the rebate amount type is calculated per unit.
    /// </summary>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    public Amount rebateAmountPerUnit()
    {
        Qty                     rebateQty;

        PdsRebateAgreementLine  pdsRebateAgreementLine  = this.rebateAgreementLine();
        PdsRebateAgreement      pdsRebateAgreement      = this.pdsRebateAgreement();

        rebateQty = pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit
                                                ? this.SalesInvoicedQty
                                                : this.PdsCWSalesInvoicedQty;

        return rebateQty * pdsRebateAgreementLine.RebateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateProgramType</Name>
				<Source><![CDATA[
    ///<summary>
    /// Gets the type of the associated rebate program.
    /// </summary>
    /// <returns>
    /// The rebate program type for the rebate line.
    /// </returns>
    public display PdsRebateProgramType rebateProgramType()
    {
        return PdsRebate::find(this.PdsRebateType).PdsRebateProgramType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableCorrectedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total corrected rebate amount.
    /// </summary>
    /// <returns>
    /// The corrected rebate amount.
    /// </returns>
    public Amount rebateTableCorrectedAmount()
    {
        date startDate, endDate;

        [startDate, endDate] = this.cumulationPeriod();

        PdsRebateTable      pdsRebateTable;

        select sum(PdsCorrectedRebateAmt)
            from pdsRebateTable
            where   pdsRebateTable.ItemId                       == this.ItemId
                &&  pdsRebateTable.CustAccount                  == this.CustAccount
                &&  pdsRebateTable.PdsRebateAgreementRefRecId   == this.PdsRebateAgreementRefRecId
                &&  pdsRebateTable.RebateCalcDate               >= startDate
                &&  pdsRebateTable.RebateCalcDate               <= endDate
                && (    pdsRebateTable.PdsRebateStatus == PdsRebateStatus::ToCalculate
                    ||  pdsRebateTable.PdsRebateStatus == PdsRebateStatus::Calculated
                    ||  pdsRebateTable.PdsRebateStatus == PdsRebateStatus::Approved
                    ||  pdsRebateTable.PdsRebateStatus == PdsRebateStatus::MarkForCredit);

        return pdsRebateTable.PdsCorrectedRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableCreditedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total credited rebate amount.
    /// </summary>
    /// <returns>
    /// The credited rebate amount.
    /// </returns>
    public Amount rebateTableCreditedAmount()
    {
        date startDate, endDate;

        [startDate, endDate] = this.cumulationPeriod();

        PdsRebateTable      pdsRebateTable;
        PdsRebateTrans      pdsRebateTrans;

        select PdsRebateId from pdsRebateTable
            where   pdsRebateTable.ItemId                       == this.ItemId
                &&  pdsRebateTable.CustAccount                  == this.CustAccount
                &&  pdsRebateTable.PdsRebateAgreementRefRecId   == this.PdsRebateAgreementRefRecId
                &&  (pdsRebateTable.RebateCalcDate              >= startDate
                || !startDate)
                &&  (pdsRebateTable.RebateCalcDate              <= endDate
                || !endDate)
                &&  pdsRebateTable.PdsRebateStatus              == PdsRebateStatus::Processed
            join sum(PdsRebateAmt)
                from pdsRebateTrans
                where   pdsRebateTrans.PdsRebateId          == pdsRebateTable.PdsRebateId
                    &&  (pdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::CreditNote
                    ||   pdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::PassToAP);

        return pdsRebateTrans.PdsRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount and total quantities for all rebates related to the selected rebate in order to apply the correct rebate amount.
    /// </summary>
    /// <returns>
    /// The <c>PdsRebateTable</c> table.
    /// </returns>
    public PdsRebateTable rebateTableSum()
    {
        date startDate, endDate;

        [startDate, endDate] = this.cumulationPeriod();

        PdsRebateTable pdsRebateTable;

        select sum(SalesAmount), sum(SalesInvoicedQty), sum(PdsCWSalesInvoicedQty)
            from pdsRebateTable
            where pdsRebateTable.ItemId                          == this.ItemId
                && pdsRebateTable.CustAccount                    == this.CustAccount
                && pdsRebateTable.PdsRebateAgreementRefRecId     == this.PdsRebateAgreementRefRecId
                && (pdsRebateTable.PdsRebateStatus               == PdsRebateStatus::ToCalculate
                    || pdsRebateTable.PdsRebateStatus            == PdsRebateStatus::Calculated
                    || pdsRebateTable.PdsRebateStatus            == PdsRebateStatus::Approved
                    || pdsRebateTable.PdsRebateStatus            == PdsRebateStatus::Processed
                    || pdsRebateTable.PdsRebateStatus            == PdsRebateStatus::MarkForCredit)
                && (pdsRebateTable.RebateCalcDate                >= startDate
                    && pdsRebateTable.RebateCalcDate             <= endDate
                    );

        return pdsRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrectedRebateAmount</Name>
				<Source><![CDATA[
    public void setCorrectedRebateAmount()
    {
        this.PdsCorrectedRebateAmt = this.PdsRebateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the final status of the rebate based on its current status.
    /// </summary>
    public void setFinalStatus()
    {
        this.status().setFinalStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTransactionTxt</Name>
				<Source><![CDATA[
    public TransactionTxt setJournalTransactionTxt(
        LedgerTransTxt  _ledgerTransTxt)
    {
        CustInvoiceJour custInvoiceJour = this.custInvoiceTrans().custInvoiceJour();
        TransactionTxt  transactionTxt;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (_ledgerTransTxt);
        transactionTxt.setLanguage      (custInvoiceJour.LanguageId);
        transactionTxt.setVoucher       (custInvoiceJour.LedgerVoucher);
        transactionTxt.setFormLetter    (custInvoiceJour.InvoiceId);
        transactionTxt.setKey1          (custInvoiceJour.SalesId);
        if (this.pdsRebateAgreement().PdsPaymtType == PdsPaymtType::CustomerDeduction)
        {
            transactionTxt.setKey2          (custInvoiceJour.OrderAccount);
            transactionTxt.setKey3          (CustTable::groupId(custInvoiceJour.OrderAccount));
        }
        else
        {
            transactionTxt.setKey2          (custInvoiceJour.InvoiceAccount);
            transactionTxt.setKey3          (CustTable::groupId(custInvoiceJour.InvoiceAccount));
        }

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the next status of the rebate based on it's current status.
    /// </summary>
    public void setNextStatus()
    {
        this.status().setNextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRebateBalance</Name>
				<Source><![CDATA[
    public void setRebateBalance()
    {
        this.PdsRebateBalance -= this.PdsCorrectedRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfCumulationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the start date for the period type selected for the rebate agreement.
    /// </summary>
    /// <returns>
    /// The start date of the period type.
    /// </returns>
    public date startOfCumulationPeriod()
    {
        PdsRebateAgreement  pdsRebateAgreement  = this.pdsRebateAgreement();
        date                creationDate        = this.RebateCalcDate;
        date                startDate;
        
        #TimeConstants

        switch (pdsRebateAgreement.PdsCumulateSalesBy)
        {
            case PdsCumulationPeriod::Week:
                WeekDays startingDayOfWeek = PdsRebateParameters::find().PdsStartingDayOfWeekPeriod;

                startDate = dayOfWk(creationDate) >= startingDayOfWeek ?
                            (creationDate - (dayOfWk(creationDate) - startingDayOfWeek)) :
                            (creationDate - (dayOfWk(creationDate) - startingDayOfWeek + #daysPerWeek));
                break;
            case PdsCumulationPeriod::Month:
                startDate = mkDate(1, mthOfYr(creationDate), year(creationDate));
                break;
            case PdsCumulationPeriod::Year:
                startDate = mkDate(1, 1, year(creationDate));
                break;
            case PdsCumulationPeriod::CustomizedPeriod:
                startDate = ProjPeriodLine::findFromPeriod(pdsRebateAgreement.RebateCustomizedPeriodType, creationDate).PeriodFrom;
                break;
            case PdsCumulationPeriod::Lifetime:
                startDate = pdsRebateAgreement.ValidFrom;
                break;
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PdsRebateTableStatusType</c> class instance based on the rebate status.
    /// </summary>
    /// <returns>
    /// The <c>PdsRebateTableStatusType</c> class instance.
    /// </returns>
    public PdsRebateTableStatusType status()
    {
        return PdsRebateTableStatusType::newBuffer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PdsRebateTableType</c> class instance based on the rebate type.
    /// </summary>
    /// <returns>
    /// The <c>PdsRebateTableType</c> class instance.
    /// </returns>
    public PdsRebateTableType type()
    {
        return PdsRebateTableType::newBuffer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClaimDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger and the offset dimensions with appropriate financial dimensions.
    /// </summary>
    public void updateClaimDimensions()
    {
        List             dimensionSources = new List(Types::Class);
        CustTable        custTable;
        CustInvoiceTrans custInvoiceTrans = this.custInvoiceTrans();

        if (! this.DefaultDimension && ! this.OffsetDefaultDimension)
        {
            if (custInvoiceTrans)
            {
                this.DefaultDimension       = custInvoiceTrans.DefaultDimension;
                this.OffsetDefaultDimension = custInvoiceTrans.DefaultDimension;
            }
            else
            {
                custTable = CustTable::find(this.CustAccount);

                this.DefaultDimension       = custTable.DefaultDimension;
                this.OffsetDefaultDimension = custTable.DefaultDimension;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>PdsRebateTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            ret = this.status().validateFieldValue(_fieldName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>PdsRebateTable</c> record can be written.
    /// </summary>
    /// <returns>
    /// true if the record can be written; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.type().validateWrite();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBatchRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates rebates for the customer invoice transactions that falls in particular date range.
    /// </summary>
    /// <param name="_startDate">
    /// The starting date of the date range.
    /// </param>
    /// <param name="_endDate">
    /// The ending date of the date range.
    /// </param>
    public static void applyBatchRebates(
        date _startDate,
        date _endDate)
    {
        CustInvoiceTrans    custInvoiceTrans;
        CustInvoiceJour     custInvoiceJour;

        while select custInvoiceTrans
            where custInvoiceTrans.InvoiceDate          >= _startDate
                && custInvoiceTrans.InvoiceDate         <= _endDate
            join custInvoiceJour
            where custInvoiceJour.SalesId               == custInvoiceTrans.SalesId
                && custInvoiceJour.InvoiceId            == custInvoiceTrans.InvoiceId
                && custInvoiceJour.InvoiceDate          == custInvoiceTrans.InvoiceDate
                && custInvoiceJour.NumberSequenceGroup  == custInvoiceTrans.NumberSequenceGroup
                && custInvoiceJour.Updated              == NoYes::Yes
        {
            PdsRebateFindAndCreate::newFromCustInvoiceTrans(custInvoiceJour, custInvoiceTrans).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfRebateExists</Name>
				<Source><![CDATA[
    public static boolean checkIfRebateExists(
        RecId   _pdsRebateAgreementRecId,
        RecId   _custInvoiceTransRefRecId)
    {
        PdsRebateTable pdsRebateTable;

        return (select firstonly pdsRebateTable
                    where pdsRebateTable.CustInvoiceTransRefRecId
                            == _custInvoiceTransRefRecId
                        && pdsRebateTable.PdsRebateAgreementRefRecId
                            == _pdsRebateAgreementRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulationPeriod</Name>
				<Source><![CDATA[
    private container cumulationPeriod()
    {
        date startDate = this.startOfCumulationPeriod();
        date endDate = this.endOfCumulationPeriod();

        // The end date should never be null, so check this value first
        if (!endDate && !startDate) 
        {
            throw error("@PDS1432");
        }

        return [startDate, endDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulateRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cumulative rebate amount for the customer.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account number for whom the cumulate rebate amount is calculating.
    /// </param>
    /// <param name="_startDate">
    /// The starting date of the period.
    /// </param>
    /// <param name="_endDate">
    /// The ending date of the period.
    /// </param>
    /// <param name="_pdsCustRebateGroupId">
    /// The customer rebate group Id.
    /// </param>
    //AOSRunmode:Server
    public static void cumulateRebates(
        CustAccount          _custAccount,
        date                 _startDate,
        date                 _endDate,
        PdsCustRebateGroupId _pdsCustRebateGroupId = '')
    {
        PdsRebateTable          pdsRebateTable;
        PdsRebateAgreement      pdsRebateAgreement;

        UnitOfMeasureSymbol     salesUnit;
        PdsRebateTable          previousRebateTable;
        date                    startOfCumulationPeriod;
        date                    endOfCumulationPeriod;
        CustInvoiceTrans        custInvoiceTrans;
        date                    dateMin = dateNull();
        date                    dateMax = maxDate();

        SysDaSearchObject	            searchObject            = new SysDaSearchObject(PdsRebateTable::buildCumulateRebatesQuery(
                                                                                                            _custAccount,
                                                                                                            _startDate,
                                                                                                            _endDate,
                                                                                                            _pdsCustRebateGroupId,
                                                                                                            pdsRebateTable,
                                                                                                            pdsRebateAgreement));
        SysDaSearchStatement            searchStatement         = new SysDaSearchStatement();
        SysDaValidTimeStateDateRange    validTimeStateDateRange = new SysDaValidTimeStateDateRange(dateMin, dateMax);

        searchObject.validTimeState(validTimeStateDateRange);

        while (searchStatement.nextRecord(searchObject))
        {
            [startOfCumulationPeriod, endOfCumulationPeriod] = pdsRebateTable.cumulationPeriod();

            custInvoiceTrans        = pdsRebateTable.custInvoiceTrans();

            if (previousRebateTable.RecId
                && previousRebateTable.PdsRebateAgreementRefRecId   == pdsRebateTable.PdsRebateAgreementRefRecId
                && previousRebateTable.ItemId                       == pdsRebateTable.ItemId
                && previousRebateTable.CustAccount                  == pdsRebateTable.CustAccount
                && previousRebateTable.startOfCumulationPeriod()    == startOfCumulationPeriod)
            {
                continue;
            }

            previousRebateTable.data(pdsRebateTable);

            salesUnit = pdsRebateTable.pdsRebateAgreement().PdsUnitType == PdsUnitType::InventoryUnit
                                                                            ? custInvoiceTrans.SalesUnit
                                                                            : custInvoiceTrans.pdsCWUnitId();

            PdsRebateTable pdsRebateTableSum   = pdsRebateTable.rebateTableSum();
            PdsRebateAgreementLine pdsRebateAgreementLine = null;

            real minValueQtyQuery;
            real minValueSumQtyQuery;

            if (pdsRebateAgreement.PdsUnitType == PdsUnitType::CWUnit)
            {
                minValueSumQtyQuery = pdsRebateTableSum.PdsCWSalesInvoicedQty;
            }
            else
            {
                minValueSumQtyQuery = pdsRebateTableSum.SalesInvoicedQty;
            }

            real minValueSumAmountQuery = pdsRebateTableSum.SalesAmount;

            if (minValueSumQtyQuery == 0
                && minValueSumAmountQuery == 0
                && pdsRebateTable.PdsRebateStatus == PdsRebateStatus::ToCalculate)
            {
                if (pdsRebateAgreement.PdsUnitType == PdsUnitType::CWUnit)
                {
                    minValueQtyQuery = abs(pdsRebateTable.PdsCWSalesInvoicedQty);
                }
                else
                {
                    minValueQtyQuery = abs(pdsRebateTable.SalesInvoicedQty);
                }

                if (pdsRebateAgreement.checkRebateAmountRequirements(abs(pdsRebateTable.SalesAmount), pdsRebateAgreement.RebateCurrency))
                {
                    pdsRebateAgreementLine = PdsRebateAgreementLine::findRebateAgreementLine(
                                                                    pdsRebateAgreement,
                                                                    custInvoiceTrans,
                                                                    minValueQtyQuery,
                                                                    abs(pdsRebateTable.SalesAmount));
                }
            }
            else
            {
                if (pdsRebateAgreement.checkRebateAmountRequirements(minValueSumAmountQuery, pdsRebateAgreement.RebateCurrency))
                {
                    pdsRebateAgreementLine = PdsRebateAgreementLine::findRebateAgreementLine(
                                                                    pdsRebateAgreement,
                                                                    custInvoiceTrans,
                                                                    minValueSumQtyQuery,
                                                                    minValueSumAmountQuery);
                }

                RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(minValueSumAmountQuery,
                                                                                                                                 minValueSumQtyQuery,
                                                                                                                                 salesUnit,
                                                                                                                                 pdsRebateAgreement.RebateCurrency,
                                                                                                                                 '',
                                                                                                                                 '');

                // Check whether we have passed the largest line break threshold
                // and therefore the total rebate amount for this agreement should equal the maximum
                if (!pdsRebateAgreementLine.RecId
                    && pdsRebateAgreement.checkRebateAmountRequirements(minValueSumAmountQuery,
                                                                        pdsRebateAgreement.RebateCurrency)
                    && pdsRebateAgreement.checkRebateRequirement(contract))
                {
                    pdsRebateAgreementLine = PdsRebateAgreementLine::selectRebateAgreementLineMax(
                                                                    pdsRebateAgreement,
                                                                    custInvoiceTrans.inventDim(),
                                                                    custInvoiceTrans.ItemId,
                                                                    minValueSumQtyQuery,
                                                                    salesUnit,
                                                                    pdsRebateAgreement.RebateCurrency,
                                                                    minValueSumAmountQuery);
                    if (pdsRebateAgreementLine)
                    {
                        if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount)
                        {
                            if (minValueSumAmountQuery < 0)
                            {
                                minValueSumAmountQuery = pdsRebateAgreementLine.RebateToAmount * -1;
                            }
                            else
                            {
                                minValueSumAmountQuery = pdsRebateAgreementLine.RebateToAmount;
                            }
                        }
                        else if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity)
                        {
                            if (minValueSumQtyQuery < 0)
                            {
                                minValueSumQtyQuery = pdsRebateAgreementLine.RebateToQty * -1;
                            }
                            else
                            {
                                minValueSumQtyQuery = pdsRebateAgreementLine.RebateToQty;
                            }
                        }
                    }
                }
            }

            RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(minValueSumAmountQuery,
                                                                                                                             minValueSumQtyQuery,
                                                                                                                             salesUnit,
                                                                                                                             pdsRebateAgreement.RebateCurrency,
                                                                                                                             '',
                                                                                                                             '');

            if (!pdsRebateAgreementLine.RecId
                && !pdsRebateAgreement.checkRebateRequirement(contract))
            {
                previousRebateTable = null;
                continue;
            }
            
            PdsRebateTable pdsRebateTableCumulated;

            update_recordset pdsRebateTableCumulated
                setting PdsRebateStatus = PdsRebateStatus::Calculated
                where pdsRebateTableCumulated.CustAccount                 == pdsRebateTable.CustAccount
                    && pdsRebateTableCumulated.ItemId                     == pdsRebateTable.ItemId
                    && pdsRebateTableCumulated.PdsRebateAgreementRefRecId == pdsRebateTable.PdsRebateAgreementRefRecId
                    && pdsRebateTableCumulated.PdsRebateStatus            == PdsRebateStatus::ToCalculate
                    && pdsRebateTableCumulated.RebateCalcDate             >= startOfCumulationPeriod
                    && pdsRebateTableCumulated.RebateCalcDate             <= endOfCumulationPeriod
                    && (pdsRebateTableCumulated.SalesInvoicedQty || pdsRebateTableCumulated.PdsCWSalesInvoicedQty);

            real expectedAmt;

            switch (pdsRebateAgreementLine.RebateAmtType)
            {
                case PdsRebateAmtType::AmountPerUnit :
                    expectedAmt = minValueSumQtyQuery * pdsRebateAgreementLine.RebateValue;
                    break;
                case PdsRebateAmtType::FixedAmount :
                    if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount)
                    {
                        if (minValueSumAmountQuery < 0)
                        {
                            expectedAmt = -pdsRebateAgreementLine.RebateValue;
                        }
                        else if (minValueSumAmountQuery == 0)
                        {
                            expectedAmt = 0;
                        }
                        else
                        {
                            expectedAmt = pdsRebateAgreementLine.RebateValue;
                        }
                    }
                    else if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity)
                    {
                        if (minValueSumQtyQuery < 0)
                        {
                            expectedAmt = -pdsRebateAgreementLine.RebateValue;
                        }
                        else if (minValueSumQtyQuery == 0)
                        {
                            expectedAmt = 0;
                        }
                        else
                        {
                            expectedAmt = pdsRebateAgreementLine.RebateValue;
                        }
                    }
                    break;

                case PdsRebateAmtType::Percentage :
                    expectedAmt = minValueSumAmountQuery * pdsRebateAgreementLine.RebateValue / 100;
                    break;
            }

            if (pdsRebateAgreementLine.Currency != pdsRebateTable.CurrencyCode)
            {
                expectedAmt = CurrencyExchangeHelper::curAmount2CurAmount(expectedAmt, pdsRebateAgreementLine.Currency, pdsRebateTable.CurrencyCode);
            }

            real actualAmt = pdsRebateTable.rebateTableCorrectedAmount() + pdsRebateTable.rebateTableCreditedAmount();

            expectedAmt = CurrencyExchange::roundWithRuleType(expectedAmt,
                                                                    pdsRebateTable.CurrencyCode,
                                                                    CurrencyRoundingRuleType::Price);
            actualAmt = CurrencyExchange::roundWithRuleType(actualAmt,
                                                                  pdsRebateTable.CurrencyCode,
                                                                  CurrencyRoundingRuleType::Price);

            real amountDiff = expectedAmt - actualAmt;

            if (expectedAmt != actualAmt)
            {
                PdsRebateCorrectClaims::constructFromCumulate(
                                pdsRebateTable,
                                pdsRebateAgreement,
                                pdsRebateAgreementLine,
                                startOfCumulationPeriod,
                                endOfCumulationPeriod,
                                amountDiff,
                                pdsRebateTableSum).correctClaims();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for cumulate rebates.
    /// </summary>
    /// <param name = "_custAccount">
    ///     The customer account number for whom the cumulate rebate amount is calculating.
    /// </param>
    /// <param name = "_startDate">
    ///     The starting date of the period for which to cumulate.
    /// </param>
    /// <param name = "_endDate">
    ///     The ending date of the period for which to cumulate.
    /// </param>
    /// <param name="_pdsCustRebateGroupId">
    ///     The customer rebate group Id.
    /// </param>
    /// <param name = "_pdsRebateTable">
    ///     The rebate record.
    /// </param>
    /// <param name = "_pdsRebateAgreement">
    ///     The rebate agreement record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private static SysDaQueryObject buildCumulateRebatesQuery(
        CustAccount			    _custAccount,
        date				    _startDate,
        date				    _endDate,
        PdsCustRebateGroupId    _pdsCustRebateGroupId,
        PdsRebateTable		    _pdsRebateTable,
        PdsRebateAgreement      _pdsRebateAgreement)
    {
        SysDaQueryObject	queryObject = new SysDaQueryObject(_pdsRebateTable);
        
        PdsRebateTable::buildCumulateRebatesOrderByClause(queryObject);

        queryObject.whereClause(PdsRebateTable::buildCumulateRebatesWhereClause(_custAccount, _startDate, _endDate, _pdsCustRebateGroupId, _pdsRebateTable));
        queryObject.joinClause(SysDaJoinKind::InnerJoin, PdsRebateTable::buildCumulateRebatesJoinQuery(_pdsRebateTable, _pdsRebateAgreement));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesOrderbyClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the order by clause to the cumulate rebates query.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    private static void buildCumulateRebatesOrderbyClause(SysDaQueryObject _queryObject)
    {
        _queryObject.orderByClause().add(fieldStr(PdsRebateTable, CustAccount));
        _queryObject.orderByClause().add(fieldStr(PdsRebateTable, ItemId));
        _queryObject.orderByClause().add(fieldStr(PdsRebateTable, PdsRebateAgreementRefRecId));
        _queryObject.orderByClause().add(fieldStr(PdsRebateTable, RebateCalcDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause to be added to the cumulate rebates query.
    /// </summary>
    /// <param name = "_custAccount">
    ///     The customer account number for whom the cumulate rebate amount is calculating.
    /// </param>
    /// <param name = "_startDate">
    ///     The starting date of the period for which to cumulate.
    /// </param>
    /// <param name = "_endDate">
    ///     The ending date of the period for which to cumulate.
    /// </param>
    /// <param name="_pdsCustRebateGroupId">
    ///     The customer rebate group Id.
    /// </param>
    /// <param name = "_pdsRebateTable">
    ///     The rebate record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private static SysDaQueryExpression buildCumulateRebatesWhereClause(
        CustAccount			    _custAccount,
        date				    _startDate,
        date				    _endDate,
        PdsCustRebateGroupId    _pdsCustRebateGroupId,
        PdsRebateTable		    _pdsRebateTable)
    {
        SysDaQueryExpression    whereClause = new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(true));

        if (_custAccount)
        {
            whereClause = whereClause.and(new SysDaEqualsExpression(
                            new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, CustAccount)),
                            new SysDaValueExpression(_custAccount)));
        }

        if (_pdsCustRebateGroupId)
        {
            whereClause = whereClause.and(new SysDaEqualsExpression(
                            new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, PdsCustRebateGroupId)),
                            new SysDaValueExpression(_pdsCustRebateGroupId)));
        }

        whereClause = whereClause.and(new SysDaOrExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, PdsRebateStatus)),
                            new SysDaValueExpression(PdsRebateStatus::ToCalculate)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, PdsRebateStatus)),
                            new SysDaValueExpression(PdsRebateStatus::Calculated))));
        
        if (_startDate)
        {
            whereClause = whereClause.and(new SysDaGreaterThanOrEqualsExpression(
                            new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, RebateCalcDate)), 
                            new SysDaValueExpression(_startDate)));
        }

        if (_endDate)
        {
            whereClause = whereClause.and(new SysDaLessThanOrEqualsExpression(
                            new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, RebateCalcDate)), 
                            new SysDaValueExpression(_endDate)));
        }

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesJoinQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the rebate agreements query to be joined with the cumulate rebates query.
    /// </summary>
    /// <param name = "_pdsRebateTable">
    ///     The rebate record.
    /// </param>
    /// <param name = "_pdsRebateAgreement">
    ///     The rebate agreement record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private static SysDaQueryObject buildCumulateRebatesJoinQuery(
        PdsRebateTable		_pdsRebateTable,
        PdsRebateAgreement	_pdsRebateAgreement)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_pdsRebateAgreement);

        queryObject.whereClause(PdsRebateTable::buildCumulateRebatesJoinClause(_pdsRebateTable, _pdsRebateAgreement));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause to be added to the cumulate rebates join query.
    /// </summary>
    /// <param name = "_pdsRebateTable">
    ///     The rebate record.
    /// </param>
    /// <param name = "_pdsRebateAgreement">
    ///     The rebate agreement record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    protected static SysDaQueryExpression buildCumulateRebatesJoinClause(
        PdsRebateTable		_pdsRebateTable,
        PdsRebateAgreement	_pdsRebateAgreement)
    {
        SysDaQueryExpression    whereClause = 
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_pdsRebateAgreement, fieldStr(PdsRebateAgreement, RecId)),
                new SysDaFieldExpression(_pdsRebateTable, fieldStr(PdsRebateTable, PdsRebateAgreementRefRecId)));

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(PdsRebateId _pdsRebateId)
    {
        return _pdsRebateId
            && (select firstonly pdsRebateTable
                    where pdsRebateTable.PdsRebateId == _pdsRebateId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsRebateTable find(
        PdsRebateId _pdsRebateId,
        boolean     _forUpdate = false)
    {
        PdsRebateTable   pdsRebateTable;

        pdsRebateTable.selectForUpdate(_forUpdate);

        if (_pdsRebateId)
        {
            select firstonly pdsRebateTable
                where pdsRebateTable.PdsRebateId == _pdsRebateId;
        }

        return pdsRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static PdsRebateTable findByRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsRebateTable   pdsRebateTable;

        pdsRebateTable.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly pdsRebateTable
                where pdsRebateTable.RecId == _recId;
        }

        return pdsRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPdsRebateTypeCust</Name>
				<Source><![CDATA[
    public static void lookupPdsRebateTypeCust(
        FormStringControl   _ctrl,
        str                 _pdsRebateProgramType)
    {
        Args        args;
        Object      formRun;

        args = new Args();
        args.name(formStr(PdsRebateType_CustLookup));
        formRun = classfactory.formRunClass(args);
        formRun.pdsRebateProgramType(_pdsRebateProgramType);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numSeqPdsRebate</Name>
				<Source><![CDATA[
    public static NumberSeq numSeqPdsRebate(
        boolean _makeDecisionLater = true)
    {
        return NumberSeq::newGetNum(
                PdsRebateParameters::numRefPdsRebateId(),
                _makeDecisionLater);
    }

]]></Source>
			</Method>
			<Method>
				<Name>passToAP_vendorSelection</Name>
				<Source><![CDATA[
    public static VendAccount passToAP_vendorSelection(CustAccount _custAccount)
    {
        VendAccount                    vendAccount;
        PdsRebateVendorSelectionDialog pdsRebateVendorSelectionDialog =
            PdsRebateVendorSelectionDialog::construct();

        pdsRebateVendorSelectionDialog.parmVendAccount(
                                        CustTable::find(_custAccount).VendAccount);

        if (pdsRebateVendorSelectionDialog.prompt())
        {
            vendAccount = pdsRebateVendorSelectionDialog.parmVendAccount();
        }

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processManualRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the manual rebates for a customer.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account number for whom the manual rebates are processing.
    /// </param>
    /// <param name="_pdsRebateProgramId">
    /// The rebate type.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Process manual rebates error.
    /// </exception>
    //AOSRunmode:Server
    public static void processManualRebates(
        CustAccount     _custAccount,
        PdsRebateType   _pdsRebateProgramId)
    {
        PdsRebateTable  pdsRebateTable;

        ttsbegin;

        try
        {
            while select forupdate pdsRebateTable
                where pdsRebateTable.CustAccount            == _custAccount
                    && (pdsRebateTable.PdsRebateStatus      == PdsRebateStatus::Free
                        || pdsRebateTable.PdsRebateStatus   == PdsRebateStatus::MarkForCredit)
                    && pdsRebateTable.PdsRebateType         == _pdsRebateProgramId
                    && pdsRebateTable.PdsCorrectedRebateAmt
                    && pdsRebateTable.PdsMarkForCredit      == NoYes::Yes
            {
                pdsRebateTable.status().runProcessed();
            }
        }

        catch (Exception::Error)
        {
            throw error("@PRO1209");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate processing.
    /// </summary>
    /// <param name="_custAccount">
    /// The Customer account number.
    /// </param>
    /// <param name="_pdsCustRebateGroupId">
    /// The customer rebate group Id.
    /// </param>
    /// <param name="_pdsRebateProgramTMAGroup">
    /// The customer TMA group ID.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The customer account number and customer rebate program Id should not be empty.
    /// </exception>
    //AOSRunmode:Server
    public static void processRebates(
        CustAccount          _custAccount,
        PdsCustRebateGroupId _pdsCustRebateGroupId,
        PdsRebateProgramTMAGroup    _pdsRebateProgramTMAGroup = '')
    {
        PdsRebateTable  pdsRebateTable;
        PdsRebateCustInvoiceTrans pdsRebateCustInvoiceTrans;

        pdsRebateTable.selectForUpdate(true);

        if (_pdsRebateProgramTMAGroup)
        {
            while select pdsRebateTable
                    where ((pdsRebateTable.CustAccount              == _custAccount              || !_custAccount)
                        && (pdsRebateTable.PdsCustRebateGroupId     == _pdsCustRebateGroupId     || !_pdsCustRebateGroupId))
                        && pdsRebateTable.PdsMarkForCredit          == NoYes::No
                        && pdsRebateTable.PdsRebateStatus           == PdsRebateStatus::Approved
                    exists join pdsRebateCustInvoiceTrans
                        where pdsRebateCustInvoiceTrans.CustInvoiceTransRecId              == pdsRebateTable.CustInvoiceTransRefRecId
                           && pdsRebateCustInvoiceTrans.SalesTablePdsRebateProgramTMAGroup == _pdsRebateProgramTMAGroup
            {
                pdsRebateTable.status().runProcessed();
            }
        }
        else
        {
            while select pdsRebateTable
                    where ((pdsRebateTable.CustAccount              == _custAccount              || !_custAccount)
                        && (pdsRebateTable.PdsCustRebateGroupId     == _pdsCustRebateGroupId     || !_pdsCustRebateGroupId))
                        && pdsRebateTable.PdsMarkForCredit          == NoYes::No
                        && pdsRebateTable.PdsRebateStatus           == PdsRebateStatus::Approved
            {
                pdsRebateTable.status().runProcessed();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels all rebates with a status of 'MarkForCredit' and within the filter of the queryRun instance.
    /// </summary>
    /// <param name="_queryRun">
    /// The QueryRun instance.
    /// </param>
    public static void runCancel(QueryRun _queryRun)
    {
        PdsRebateTable       pdsRebateTable;
        QueryBuildDataSource pdsRebateTableDataSource;
        QueryBuildRange      pdsRebateStatusRange;

        if (_queryRun != null)
        {
            pdsRebateTableDataSource = _queryRun.query().dataSourceTable(tablenum(PdsRebateTable));

            if (pdsRebateTableDataSource)
            {
                pdsRebateStatusRange =
                SysQuery::findOrCreateRange(pdsRebateTableDataSource, fieldnum(PdsRebateTable, PdsRebateStatus));
                pdsRebateStatusRange.value(queryValue(PdsRebateStatus::MarkForCredit));

                pdsRebateTableDataSource.update(true);
            }

            while (_queryRun.next())
            {
                pdsRebateTable = _queryRun.get(tablenum(PdsRebateTable));

                if (pdsRebateTable)
                {
                    pdsRebateTable.status().runCancel();
                }
            }
        }

        info("@SCM:CancelRebateComplete");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPurge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purges all rebates with a status of 'Processed' and within the filter of the queryRun instance.
    /// </summary>
    /// <param name="_queryRun">
    /// The QueryRun instance.
    /// </param>
    public static void runPurge(QueryRun _queryRun)
    {
        PdsRebateTable       pdsRebateTable;
        QueryBuildDataSource pdsRebateTableDataSource;
        QueryBuildRange      pdsRebateStatusRange;

        if (_queryRun != null)
        {
            pdsRebateTableDataSource = _queryRun.query().dataSourceTable(tablenum(PdsRebateTable));

            if (pdsRebateTableDataSource)
            {
                pdsRebateStatusRange =
                SysQuery::findOrCreateRange(pdsRebateTableDataSource, fieldnum(PdsRebateTable, PdsRebateStatus));
                pdsRebateStatusRange.value(strFmt('%1,%2',queryValue(PdsRebateStatus::Processed), queryValue(PdsRebateStatus::Canceled)));

                pdsRebateTableDataSource.update(true);
            }

            while (_queryRun.next())
            {
                pdsRebateTable = _queryRun.get(tablenum(PdsRebateTable));

                if (pdsRebateTable)
                {
                    pdsRebateTable.status().runPurge();
                }
            }
        }

        info("@PRO1903");
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        PdsRebateTableType rebateTableType;

        super(_fieldId);

        rebateTableType = this.type();

        rebateTableType.modifiedField(_fieldId, this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsRebate</ConfigurationKey>
	<DeveloperDocumentation>@PDS1097</DeveloperDocumentation>
	<FormRef>PdsRebateTable</FormRef>
	<Label>@PRO39</Label>
	<SingularLabel>@PRO39</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PdsRebateId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PdsRebateIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>PdsRebateIdx</PrimaryIndex>
	<ReplacementKey>PdsRebateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsPaymtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsRebateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustTable</Name>
			<Label>@SYS11307</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCustRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsProcessDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateAdjustmentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventTable</Name>
			<Label>@SYS15649</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsItemRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>markForCredit</Name>
			<Label>@PDS303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsMarkForCredit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetDimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCustRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsItemRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsStartingRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCorrectedRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsProcessDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>pdsRebate</Name>
			<Label>@PDS300</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsPaymtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateAmtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsStartingRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCorrectedRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsRebateJournalRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custInvoiceTransRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTable</Name>
			<Label>@PRO1394</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateCalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesNetExtendedPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsUnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoicedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWSalesInvoicedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TAMMerchandisngEvent</Name>
			<Label>@MCR25819</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMMerchandisingEventID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendTable</Name>
			<Label>@SYS14048</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsRebatePayTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>custInvoiceTransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCustInvoiceTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@PDS1900</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetDefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@PDS1902</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCorrectedRebateAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCorrectedRebateAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PdsCustInvoiceJourRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCustInvoiceJourRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCustomerRef</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PdsCustomerRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCustRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCustRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWSalesInvoicedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsItemRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsItemRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsMarkForCredit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS12714</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsPaymtType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsPaymtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsProcessDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsProcessDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsRebateAdjustmentDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateAdjustmentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PdsRebateAgreementRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsRebateAgreementRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsRebateAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateAmt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsRebateAmtType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsRebateAmtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsRebateBalance</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateBalance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsRebateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsRebateJournalRefNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsJournalRefNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsRebatePayTo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PdsRebatePayTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsRebateStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsRebateStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsRebateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsRebateValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateValue</ExtendedDataType>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
			<CurrencyDate>CurrencyDateField</CurrencyDate>
			<CurrencyDateField>SalesInvoiceDate</CurrencyDateField>
			<CurrencyDateTable>PdsRebateTable</CurrencyDateTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsStartingRebateAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsStartingRebateAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RebateAgreementLineRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsRebateAgreementRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RebateCalcDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateCalcDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAmount</ExtendedDataType>
			<CurrencyDate>CurrencyDateField</CurrencyDate>
			<CurrencyDateField>RebateCalcDate</CurrencyDateField>
			<CurrencyDateTable>PdsRebateTable</CurrencyDateTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesInvoicedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInvoicedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLineRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsSalesLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesNetExtendedPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSalesNetExtdPrice</ExtendedDataType>
			<CurrencyDate>CurrencyDateField</CurrencyDate>
			<CurrencyDateField>RebateCalcDate</CurrencyDateField>
			<CurrencyDateTable>PdsRebateTable</CurrencyDateTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTableRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsSalesTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMMerchandisingEventID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
			<ExtendedDataType>MCRMerchandisingEventID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PdsRebateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PdsRebateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PdsRebateAgreementRefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsRebateAgreementRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesInvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceTransRebateAgreementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>custInvoiceTransRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsRebateAgreementRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCustInvoiceJourRefRecId</Name>
					<Field>PdsCustInvoiceJourRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJourInvoiceId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJourInvoiceId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesInvoiceId</Name>
					<SourceEDT>SalesInvoiceId</SourceEDT>
					<Field>SalesInvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJourRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJourRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCustInvoiceJourRefRecId</Name>
					<Field>PdsCustInvoiceJourRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>custInvoiceTransRefRecId</Name>
					<Field>custInvoiceTransRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationDefault</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_RebateInstanceDefault</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetDefaultDimension</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_RebateInstanceOffset</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCustRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsCustRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCustRebateGroupId</Name>
					<Field>PdsCustRebateGroupId</Field>
					<RelatedField>PdsCustRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsItemRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsItemRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsItemRebateGroupId</Name>
					<Field>PdsItemRebateGroupId</Field>
					<RelatedField>PdsItemRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsRebate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsRebate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsRebateType</Name>
					<Field>PdsRebateType</Field>
					<RelatedField>PdsRebateType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsRebateAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsRebateAgreement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsRebateAgreementRefRecId</Name>
					<Field>PdsRebateAgreementRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsRebateAgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsRebateAgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateAgreementLineRefRecId</Name>
					<Field>RebateAgreementLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLineRef</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLineRefRecId</Name>
					<Field>SalesLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTableRefRecId</Name>
					<Field>SalesTableRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMMerchandisingEvent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMMerchandisingEvent</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMMerchandisingEventID</Name>
					<SourceEDT>MCRMerchandisingEventID</SourceEDT>
					<Field>TAMMerchandisingEventID</Field>
					<RelatedField>MerchandisingEventID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Vendtable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsRebatePayTo</Name>
					<SourceEDT>PdsRebatePayTo</SourceEDT>
					<Field>PdsRebatePayTo</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_AccountNum</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>