<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        JournalizingDefinition  journalizingDefinition;
        SysDateEffectiveDataManager sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition);

        if (this.RecId && sysDateEffectiveDataManager.isOnlyVersion(this.JournalizingDefinition))
        {
            ttsbegin;

            journalizingDefinition = JournalizingDefinition::findByRecId(this.JournalizingDefinition, true);

            if (journalizingDefinition.validateDelete())
            {
                journalizingDefinition = JournalizingDefinition::findByRecId(this.JournalizingDefinition, true);
                journalizingDefinition.delete();
            }

            ttscommit;
        }

        super();

        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentJournalizingDefinitionVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parent journalizing definition.
    /// </summary>
    /// <returns>
    /// The record ID of the parent journalizing definition.
    /// </returns>
    public JournalizingDefinitionVersionId getParentJournalizingDefinitionVersionId()
    {
        JournalizingDefinitionVersionId         journalizingDefinitionVersionId;
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;

        select firstonly ParentJournalizingDefinitionVersion
            from  journalizingDefinitionRelatedDefinition
                where
                    journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated == this.JournalizingDefinition;

        if (journalizingDefinitionRelatedDefinition)
        {
            journalizingDefinitionVersionId = journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion;
        }

        return journalizingDefinitionVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedJournalizingDefinitionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related journalizing definition.
    /// </summary>
    /// <returns>
    /// The record ID of the related journalizing definition.
    /// </returns>
    public JournalizingDefinitionId getRelatedJournalizingDefinitionId()
    {
        JournalizingDefinitionId                journalizingDefinitionId;
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;

        select firstonly JournalizingDefinitionRelated
            from  journalizingDefinitionRelatedDefinition
                where
                    journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == this.RecId;

        if (journalizingDefinitionRelatedDefinition)
        {
            journalizingDefinitionId = journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated;
        }

        return journalizingDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting definition is linked to any other posting definition.
    /// </summary>
    /// <returns>
    /// true if the posting definition is linked to another posting definition; otherwise, false.
    /// </returns>
    public boolean isLinkedJournalizingDefinition()
    {
        boolean found;

        found = (select firstonly RecId
                    from journalizingDefinitionRelatedDefinition
                        where
                            journalizingDefinitionRelatedDefinition.JournalizingDefinitionRelated == this.JournalizingDefinition ||
                                journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == this.RecId ).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>JournalizingDefinitionVersion</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>JournalizingDefinitionVersion</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!JournalizingDefinitionVersion::exist(_recId))
        {
            ret = checkFailed(strFmt(JournalizingDefinitionVersion::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>JournalizingDefinitionVersion</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId
                    from journalizingDefinitionVersion
                         where journalizingDefinitionVersion.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>JournalizingDefinitionVersion</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>JournalizingDefinitionVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static JournalizingDefinitionVersion find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionVersion    journalizingDefinitionVersion;
        date                             fromDate;
        date                             endDate;

        fromDate = 01\01\1900;
        endDate = maxDate();

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionVersion.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            journalizingDefinitionVersion.selectForUpdate(_forUpdate);

            select firstonly validTimeState(fromDate, endDate) journalizingDefinitionVersion
                where journalizingDefinitionVersion.RecId == _recId;
        }

        return journalizingDefinitionVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS319335</DeveloperDocumentation>
	<Label>@SYS303572</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ValidFrom</TitleField1>
	<TitleField2>ValidTo</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>JournalizingDefinitionVersionIdx</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<ReplacementKey>JournalizingDefinitionVersionIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionMatch</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>
      </Relation>
			<Table>JournalizingDefinitionMatch</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionRelatedDefinition</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>
      </Relation>
			<Table>JournalizingDefinitionRelatedDefinition</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionLongDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LongDescription</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionLongDesc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidDates</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalizingDefinitionLongDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionLongDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionVersionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysDateEffectiveVersion</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ValidFrom</MapField>
					<MapFieldTo>ValidFrom</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ValidTo</MapField>
					<MapFieldTo>ValidTo</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentId</MapField>
					<MapFieldTo>JournalizingDefinition</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Parent</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Child</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinition</Name>
					<Field>JournalizingDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>