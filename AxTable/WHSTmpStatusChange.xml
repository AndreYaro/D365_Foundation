<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpStatusChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSTmpStatusChange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSumBatchQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops over the <c>WHSTmpStatusChange</c> records currently selected for coversion and sums the total inventory quantity for a specified batch
    /// </summary>
    /// <param name="_tmpStatusChange">
    /// The <c>WHSTmpStatusChange</c> table record
    /// </param>
    /// <param name="_tmpInventDim">
    /// The <c>InventDim</c> record associated with the specified batch
    /// </param>
    /// <returns>
    /// Returns a sum of the inventory quantity selected for the batch
    /// </returns>
    public InventQty calcSumBatchQty(WHSTmpStatusChange _tmpStatusChange, InventDim _tmpInventDim)
    {
        InventQty           sumBatchQty;
        WHSInventReserve    batchInventReserve;
        WHSTmpStatusChange  tmpStatusChange;
        InventDim           batchDim;

        // Warehouse enabled catch weight items are not supported
        if (WHSTmpStatusChange::isItemCWWarehouseEnabled(this.ItemId))
        {
            warning(strfmt("@WAX:WHSCWMassStatusChangeNotSupportedCheckAvailable", this.ItemId));
            return 0;
        }

        tmpStatusChange.linkPhysicalTableInstance(_tmpStatusChange);

        // Must loop over all selections for that item and determine if that loc/lp has the batch we are currently dealing with
        while select tmpStatusChange
            where tmpStatusChange.ItemId            == this.ItemId
                && tmpStatusChange.ConvertStatus    == NoYes::Yes
        {
            batchDim.clear();
            batchDim.data(_tmpInventDim);
            batchDim.wmsLocationId = tmpStatusChange.wmsLocationId;
            batchDim.LicensePlateId  = tmpStatusChange.LicensePlateId;
            batchDim = InventDim::findOrCreate(batchDim);

            select firstonly AvailPhysical, InventDimId, ItemId from batchInventReserve
                where batchInventReserve.ItemId         == this.ItemId
                    && batchInventReserve.InventDimId   == batchDim.InventDimId;

            sumBatchQty += batchInventReserve.AvailPhysical;
        }

        return sumBatchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAvail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total available physical inventory at the specified dimension level.
    /// </summary>
    /// <param name="_tmpStatusChange">
    ///     The <c>WHSTmpStatusChange</c> table variable.
    /// </param>
    /// <param name="_inventDim">
    ///     The specified inventory dimension identifier.
    /// </param>
    /// <returns>
    ///     Returns the total available physical quantity.
    /// </returns>
    public Qty calcTotalAvail(WHSTmpStatusChange _tmpStatusChange, InventDim _inventDim)
    {
        WHSInventReserve    inventReserve;
        InventDim           tmpInventDim;

        // Warehouse enabled catch weight items are not supported
        if (WHSTmpStatusChange::isItemCWWarehouseEnabled(this.ItemId))
        {
            warning(strfmt("@WAX:WHSCWMassStatusChangeNotSupportedCheckAvailable", this.ItemId));
            return 0;
        }

        tmpInventDim.data(_inventDim);
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(_tmpStatusChange.ItemId, InventDim::find(_tmpStatusChange.InventDimId), tmpInventDim);
        tmpInventDim = InventDim::findOrCreate(tmpInventDim);

        select firstonly AvailPhysical from inventReserve
            where inventReserve.ItemId          == this.ItemId
                && inventReserve.InventDimId    == tmpInventDim.InventDimId;

        return inventReserve.AvailPhysical + this.getOrderCommittedReservationQty(this.ItemId, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total quantity selected for the current item.
    /// </summary>
    /// <param name="_tmpStatusChange">
    ///     The <c>WHSTmpStatusChange</c> table variable.
    /// </param>
    /// <returns>
    ///     Returns the total selected quantity.
    /// </returns>
    public Qty calcTotalSelected(WHSTmpStatusChange _tmpStatusChange)
    {
        WHSTmpStatusChange      tmpStatusChange;

        // Warehouse enabled catch weight items are not supported
        if (WHSTmpStatusChange::isItemCWWarehouseEnabled(this.ItemId))
        {
            warning(strfmt("@WAX:WHSCWMassStatusChangeNotSupportedCheckAvailable", this.ItemId));
            return 0;
        }

        tmpStatusChange.linkPhysicalTableInstance(_tmpStatusChange);

        select sum(InventQty) from tmpStatusChange
            where tmpStatusChange.ItemId            == this.ItemId
                && tmpStatusChange.ConvertStatus    == NoYes::Yes;

        return tmpStatusChange.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCWWarehouseEnabled</Name>
				<Source><![CDATA[
    private static boolean isItemCWWarehouseEnabled(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderCommittedReservationQty</Name>
				<Source><![CDATA[
    private InventQty getOrderCommittedReservationQty(ItemId _itemId, InventDim _inventDim)
    {
        InventTrans inventTrans;

        if (WHSReservationHierarchyElementPolicyProvider::singleton().isReservationOnDemandOrderEnabled(InventTable::find(this.ItemId).whsReservationHierarchy(), fieldNum(InventDim, inventBatchId)))
        {
            InventTransOrigin inventTransOrigin;
            InventDim         inventDimLocal, inventDimJoin;
        
            inventDimLocal.data(_inventDim);
            inventDimLocal.wMSLocationId = this.wmsLocationId;
            inventDimLocal.LicensePlateId = this.LicensePlateId;

            InventDimParm inventDimParm = inventDimLocal.toDimParm();

            select sum (Qty) from inventTrans
                where inventTrans.ItemId        == _itemId
                &&    inventTrans.StatusReceipt == StatusReceipt::None // for the sake of performance
                &&    inventTrans.StatusIssue   == StatusIssue::ReservPhysical // for the sake of performance
            exists join inventTransOrigin
                where inventTransOrigin.RecId             == inventTrans.InventTransOrigin
                &&    inventTransOrigin.ReferenceCategory == InventTransType::WHSOrderCommittedReservation
                &&    inventTransOrigin.ItemId            == _itemId // for the sake of performance
            #InventDimExistsJoin(inventTrans.inventDimId, inventDimJoin, inventDimLocal, inventDimParm);
        }

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that enough inventory is available for the specified inventory status change
    /// </summary>
    /// <param name="_tmpStatusChange">
    /// The current <c>WHSTmpStatusChange</c> record
    /// </param>
    /// <param name="_parmInventDim">
    /// The base <c>InventDim</c> record
    /// </param>
    /// <param name="_fromStatusUsable">
    /// The usability of the inventory status
    /// </param>
    /// <param name="_goodToBlocking">
    /// A Boolean value to indicate whether the status is being changed from usable to blocking.
    /// </param>
    /// <returns>
    /// Returns a Boolean value to indicate whether or not there is enough available inventory to complete the status change
    /// </returns>
    public boolean checkAvailable(
        WHSTmpStatusChange      _tmpStatusChange,
        InventDim               _parmInventDim,
        WHSInventStatusBlocking _fromStatusUsable,
        boolean                 _goodToBlocking)
    {
        // Warehouse enabled catch weight items are not supported
        if (WHSTmpStatusChange::isItemCWWarehouseEnabled(this.ItemId))
        {
            return checkFailed(strfmt("@WAX:WHSCWMassStatusChangeNotSupportedCheckAvailable", this.ItemId));
        }

        // Create Base Dim
        InventDim baseDim;
        baseDim.data(_parmInventDim);
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, InventDim::find(this.InventDimId), baseDim);
        baseDim = InventDim::findOrCreate(baseDim);

        InventQty availQty;
        boolean ret = true;

        InventTable inventTable = InventTable::find(this.ItemId);

        // Check availability up heirarchy when changing from good to blocking status.
        // No need to call other checks. Blocking status is not reserved at location level for lp-controlled locations.
        if (_goodToBlocking)
        {
            availQty = WHSInventOnHand::getPhysicalAvailQty(this.ItemId, baseDim, false) - this.calcTotalSelected(_tmpStatusChange);

            availQty += this.getOrderCommittedReservationQty(this.ItemId, baseDim);

            if (availQty < this.InventQty)
            {
                ret = checkFailed(strFmt("@WAX3417", availQty));
            }

            // Check Location level reservation when selecting License Plates
            ret = this.checkLocationLevelReservation(inventTable, baseDim, _tmpStatusChange);
            
        }
        else
        {
            if (!_fromStatusUsable) // Starting with blocking status
            {
                // Check Location level reservation when selecting License Plates
                ret = this.checkLocationLevelReservation(inventTable, baseDim, _tmpStatusChange);
            }
            else
            {
                // Check status level reservation on item
                if (this.calcTotalSelected(_tmpStatusChange) + this.InventQty > this.calcTotalAvail(_tmpStatusChange, _parmInventDim))
                {
                    ret = checkFailed("@WAX3415");
                }

                // Check Location level reservation when selecting License Plates
                ret = this.checkLocationLevelReservation(inventTable, baseDim, _tmpStatusChange);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationLevelReservation</Name>
				<Source><![CDATA[
    private boolean checkLocationLevelReservation(InventTable _inventTable, InventDim _baseDim, WHSTmpStatusChange _tmpStatusChange)
    {
        boolean     ret = true;
        InventQty   availQty;

        // Check Site/Whse/Batch/Status level reservation for batch items
        if (    _inventTable.whsBatchActive()
            &&  WHSReservationHierarchyProvider::construct().isBatchAboveLocation(_inventTable))
        {
            ret = this.checkBatchAboveLocationQty(_baseDim, _tmpStatusChange);
        }
        else
        {
            if (this.LicensePlateId)
            {
                availQty = this.getLocLevelAvailPhys(_tmpStatusChange, _baseDim);

                if (availQty < this.InventQty)
                {
                    ret = checkFailed(strFmt("@WAX3418", availQty, this.wmsLocationId));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBatchAboveLocationQty</Name>
				<Source><![CDATA[
    private boolean checkBatchAboveLocationQty(InventDim _baseDim, WHSTmpStatusChange _tmpStatusChange)
    {
        boolean   ret = true;
        InventDim loopDim;
        loopDim.data(_baseDim);
        loopDim.wmsLocationId = this.wmsLocationId;
        loopDim.LicensePlateId = this.LicensePlateId;
        loopDim = InventDim::findOrCreate(loopDim);

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(loopDim);

        WHSInventReserve loopInventReserve;
        if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
        {
            while select AvailPhysical, InventDimId, ItemId, InventBatchId from loopInventReserve
                    where  loopInventReserve.InventBatchId  != ''
                        && loopInventReserve.ItemId         == this.ItemId
                        && #InventDimFieldsFilter(loopInventReserve, loopDim, inventDimParm)
            {
                if (!this.checkAvailQtyForBatchAboveLocation(_baseDim, loopInventReserve.InventBatchId, loopInventReserve.AvailPhysical, _tmpStatusChange))
                {
                    ret = false;
                }
            }
        }
        else
        {
            InventDim inventReserveDim;
            while #InventDimSelect(inventReserveDim, loopDim, inventDimParm)
                    join AvailPhysical, InventDimId, ItemId from loopInventReserve
                    where loopInventReserve.InventDimId     == inventReserveDim.InventDimId
                        && inventReserveDim.InventBatchId   != ''
                        && loopInventReserve.ItemId         == this.ItemId
            {
                if (!this.checkAvailQtyForBatchAboveLocation(_baseDim, inventReserveDim.InventBatchId, loopInventReserve.AvailPhysical, _tmpStatusChange))
                {
                    ret = false;
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailQtyForBatchAboveLocation</Name>
				<Source><![CDATA[
    private boolean checkAvailQtyForBatchAboveLocation(
            InventDim               _baseDim,
            InventBatchId           _inventBatchId,
            InventQtyAvailPhysical  _availPhysical,
            WHSTmpStatusChange      _tmpStatusChange)
    {
        // Add Batch to Dim
        InventDim tmpInventDim;
        tmpInventDim.data(_baseDim);
        tmpInventDim.InventBatchId = _inventBatchId;
        tmpInventDim = InventDim::findOrCreate(tmpInventDim);

        WHSInventReserve inventReserve;
        // Site/Whse/Batch/Status level record
        select firstonly AvailPhysical, InventDimId, ItemId from inventReserve
                        where inventReserve.ItemId          == this.ItemId
                            && inventReserve.InventDimId    == tmpInventDim.InventDimId;

        // Sum up all selected for that batch
        InventQty sumBatchQty = this.calcSumBatchQty(_tmpStatusChange, tmpInventDim);

        //AvailQty = batch/Status Level AvailPhysical - sum of batch qty already selected.
        InventQty availQty = inventReserve.AvailPhysical - sumBatchQty;

        if (availQty < _availPhysical) //Assume availPhysical is same same as physical or something went wrong during buildTmpTable
        {
            return checkFailed(strFmt("@WAX3419", availQty, _inventBatchId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocLevelAvailPhys</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the available physical quantity at location level.
    /// </summary>
    /// <param name="_tmpStatusChange">
    ///     The <c>WHSTmpStatusChange</c> temporary table variable.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimension identifier.
    /// </param>
    /// <returns>
    ///     Returns the total available physical quantity at location level.
    /// </returns>
    public InventQty getLocLevelAvailPhys(WHSTmpStatusChange _tmpStatusChange, InventDim _inventDim)
    {
        InventDim           localInventDim;
        InventDimParm       inventDimParm;
        WHSTmpStatusChange  localTmpStatusChange;
        WHSInventReserve    inventReserve;
        InventQty           availQty;

        // Warehouse enabled catch weight items are not supported
        if (WHSTmpStatusChange::isItemCWWarehouseEnabled(this.Itemid))
        {
            warning(strfmt("@WAX:WHSCWMassStatusChangeNotSupportedCheckAvailable", this.ItemId));
            return 0;
        }

        localInventDim.data(_inventDim);
        localTmpStatusChange.linkPhysicalTableInstance(_tmpStatusChange);

        // Add location to dim
        localInventDim.wmsLocationId = this.wmsLocationId;
        
        inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmLocationAndAbove(InventTable::find(this.ItemId));                

        localInventDim.clearNotSelectedDim(inventDimParm);
        localInventDim = InventDim::findOrCreate(localInventDim);

        select sum(InventQty) from localTmpStatusChange
            where localTmpStatusChange.wmsLocationId    == this.wmsLocationId
                && localTmpStatusChange.ItemId          == this.ItemId
                && localTmpStatusChange.ConvertStatus   == NoYes::Yes;

        select firstonly AvailPhysical from inventReserve
            where inventReserve.ItemId          == this.ItemId
                && inventReserve.InventDimId    == localInventDim.InventDimId;

        availQty = inventReserve.AvailPhysical - localTmpStatusChange.InventQty;

        availQty += this.getOrderCommittedReservationQty(this.ItemId, _inventDim);

        return availQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private static Query buildQuery(InventDim _inventDim, ItemId _itemId = '')
    {
        InventDimParm           inventDimParm;
        Query                   query;
        QueryBuildDataSource    qbdsInventSum;
        QueryBuildDataSource    qbdsInventDim;
        QueryBuildFieldList     qbfl;
        InventDimParm           groupDimParm;

        inventDimParm.initFromInventDim(_inventDim);
        inventDimParm.WMSLocationIdFlag = NoYes::No;

        query = new Query();

        qbdsInventSum = query.addDataSource(tableNum(inventSum));
        qbdsInventSum.addGroupByField(fieldNum(InventSum, ItemId));
        qbdsInventSum.addOrderByField(fieldNum(InventSum, ItemId));

        qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value(SysQuery::valueNot(0));
        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        if (_itemId)
        {
            qbdsInventSum.addRange(fieldNum(InventSum, ItemId)).value(queryValue(_itemId));
        }

        qbfl = qbdsInventSum.fields();
        qbfl.addField(fieldNum(inventSum, ItemId));
        qbfl.addField(fieldNum(inventSum, PhysicalInvent), SelectionField::Sum);

        qbdsInventDim = qbdsInventSum.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDim.relations(true);

        InventDim::queryAddRangeCriteria(qbdsInventDim, _inventDim, inventDimParm.selectedDimFields());
        qbdsInventDim.addRange(fieldNum(InventDim, WMSLocationId)).value(SysQuery::valueNotEmptyString());

        groupDimParm.initFromInventDimFieldList(InventDimMetaDataCache::dimProductDimEnabledFieldList());
        groupDimParm.WMSLocationIdFlag = NoYes::Yes;
        groupDimParm.LicensePlateFlag  = NoYes::Yes;
        groupDimParm.queryAddGroupByField(qbdsInventDim);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the <c>WHSTmpStatusChange</c> temporary table.
    /// </summary>
    /// <param name="_inventDim">
    ///     The specified inventory dimension identifier.
    /// </param>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <returns>
    ///     Returns a populated <c>WHSTmpStatusChange</c> table variable.
    /// </returns>
    public static WHSTmpStatusChange buildTmpTable(InventDim _inventDim, ItemId _itemId = '')
    {
        #AviFiles

        InventDim               inventSumInventDim;
        InventDim               itemDim;
        WHSTmpStatusChange      tmpStatusChange;
        InventSum               inventSum;
        QueryRun                queryRun;
        Query                   query;

        ttsbegin;

        query = WHSTmpStatusChange::buildQuery( _inventDim, _itemId);

        queryRun = new QueryRun(query);

        // if any warehouse enabled catch weight items are within the dim set they should be ignored
        // also a warning must be displayed
        boolean cwItemInQueryRun;

        while (queryRun.next())
        {
            inventSumInventDim = queryRun.get(tableNum(InventDim));
            inventSum = queryRun.get(tableNum(inventSum));

            // Warehouse enabled catch weight items are not supported
            if (WHSTmpStatusChange::isItemCWWarehouseEnabled(inventSum.ItemId))
            {
                cwItemInQueryRun = true;
            }
            else
            {
                itemDim.clear();
                if (inventSumInventDim.anyProductDimensionSpecified())
                {
                    EcoResProductDimGroupSetup::copyProductDimensionsForItem(inventSum.ItemId, inventSumInventDim, itemDim);
                }
                itemDim = InventDim::findOrCreate(itemDim);
                tmpStatusChange.clear();
                tmpStatusChange.ItemId = inventSum.ItemId;
                tmpStatusChange.wmsLocationId = inventSumInventDim.wmsLocationId;
                tmpStatusChange.LicensePlateId = inventSumInventDim.LicensePlateId;
                tmpStatusChange.InventQty = inventSum.PhysicalInvent;
                tmpStatusChange.InventDimId = itemDim.InventDimId;
                tmpStatusChange.insert();
            }
        }

        if (cwItemInQueryRun)
        {
            warning(strFmt("@WAX:WHSCWMassStatusChangeNotSupportedBuildTmpStatusChange", _inventDim.inventDimId));
        }

        ttscommit;

        return tmpStatusChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts quantity to a specified inventory status.
    /// </summary>
    /// <param name="_tmpStatusChange">
    ///     The <c>WHSTmpStatusChange</c> table.
    /// </param>
    /// <param name="_baseDim">
    ///     The base inventory dimension set.
    /// </param>
    /// <param name="_toStatusId">
    ///     The inventory status being converted to.
    /// </param>
    public static void convertStatus(WHSTmpStatusChange _tmpStatusChange, InventDim _baseDim, WHSInventStatusId _toStatusId)
    {
        WHSWorkQuarantine       quarantineWork;
        InventDim               oldDim;
        InventDim               newDim;
        InventTable             inventTable;
        InventDim               inventReserveDim;
        InventDimParm           inventDimParm;
        InventSum               inventSum;

        ttsbegin;

        while select _tmpStatusChange
            where _tmpStatusChange.ConvertStatus == NoYes::Yes
        {
            // Warehouse enabled catch weight items are not supported
            if (WHSTmpStatusChange::isItemCWWarehouseEnabled(_tmpStatusChange.ItemId))
            {
                warning(strfmt("@WAX:WHSCWMassStatusChangeNotSupportedCheckAvailable", _tmpStatusChange.ItemId));
                continue;
            }

            inventTable = InventTable::find(_tmpStatusChange.ItemId);

            // Create dim based on base dim and selected record.
            oldDim.clear();
            oldDim.data(_baseDim);
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(_tmpStatusChange.ItemId, InventDim::find(_tmpStatusChange.InventDimId), oldDim);
            oldDim.wmsLocationId = _tmpStatusChange.wmsLocationId;
            oldDim.LicensePlateId = _tmpStatusChange.LicensePlateId;
            oldDim = InventDim::findOrCreate(oldDim);

            // If items are batched or serial controlled then we have to loop over inventSum records for more specific inventory.
            if (inventTable.whsBatchActive() || inventTable.isItemSerialNumberActivated())
            {
                inventDimParm.initFromInventDim(oldDim);

                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    while select PhysicalInvent, InventDimId, #InventDimGroupAllFields from inventSum
                        where inventSum.ItemId          == _tmpStatusChange.ItemId
                           && inventSum.ClosedQty       == NoYes::No
                           && inventSum.PhysicalInvent   > 0
                           && #InventDimFieldsFilter(inventSum, oldDim, inventDimParm)
                    {
                        newDim.clear();
                        newDim.initFromInventSum(inventSum);
                        newDim.InventStatusId = _toStatusId;
                        newDim = InventDim::findOrCreate(newDim);

                        // Create Quarantine work to change the status of inventory.
                        quarantineWork.clear();
                        quarantineWork.setWorkId();
                        quarantineWork.ItemId = _tmpStatusChange.ItemId;
                        quarantineWork.Qty = inventSum.PhysicalInvent;
                        quarantineWork.InventQtyRemain = quarantineWork.Qty;
                        quarantineWork.TransDateTime = DateTimeUtil::utcNow();
                        quarantineWork.InventDimIdFrom = inventSum.InventDimId;
                        quarantineWork.InventDimIdTo = newDim.InventDimId;
                        quarantineWork.insert();
                        WHSWorkQuarantineExecutor::newWorkQuarantine(quarantineWork, quarantineWork.InventQtyRemain, false).execute();
                    }
                }
                else
                {
                    while #InventDimSelect(inventReserveDim, oldDim, inventDimParm)
                        join PhysicalInvent, InventDimId from inventSum
                        where inventSum.InventDimId == inventReserveDim.InventDimId
                           && inventSum.ItemId      == _tmpStatusChange.ItemId
                           && inventSum.ClosedQty   == NoYes::No
                           && inventSum.PhysicalInvent > 0
                    {
                        newDim.clear();
                        newDim.data(inventReserveDim);
                        newDim.InventStatusId = _toStatusId;
                        newDim = InventDim::findOrCreate(newDim);

                        // Create Quarantine work to change the status of inventory.
                        quarantineWork.clear();
                        quarantineWork.setWorkId();
                        quarantineWork.ItemId = _tmpStatusChange.ItemId;
                        quarantineWork.Qty = inventSum.PhysicalInvent;
                        quarantineWork.InventQtyRemain = quarantineWork.Qty;
                        quarantineWork.TransDateTime = DateTimeUtil::utcNow();
                        quarantineWork.InventDimIdFrom = inventSum.InventDimId;
                        quarantineWork.InventDimIdTo = newDim.InventDimId;
                        quarantineWork.insert();
                        WHSWorkQuarantineExecutor::newWorkQuarantine(quarantineWork, quarantineWork.InventQtyRemain, false).execute();
                    }
                }
            }
            else
            {
                newDim.clear();
                newDim.data(oldDim);
                newDim.InventStatusId = _toStatusId;
                newDim = InventDim::findOrCreate(newDim);

                // Create Quarantine work to change the status of inventory.
                quarantineWork.clear();
                quarantineWork.setWorkId();
                quarantineWork.ItemId = _tmpStatusChange.ItemId;
                quarantineWork.Qty = _tmpStatusChange.InventQty;
                quarantineWork.InventQtyRemain = quarantineWork.Qty;
                quarantineWork.TransDateTime = DateTimeUtil::utcNow();
                quarantineWork.InventDimIdFrom = oldDim.InventDimId;
                quarantineWork.InventDimIdTo = newDim.InventDimId;
                quarantineWork.insert();
                WHSWorkQuarantineExecutor::newWorkQuarantine(quarantineWork, quarantineWork.InventQtyRemain, false).execute();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@WAX4464</DeveloperDocumentation>
	<Label>@WAX3390</Label>
	<TableGroup>Main</TableGroup>
	<ClusteredIndex>ItemDimLocLPIdx</ClusteredIndex>
	<PrimaryIndex>ItemDimLocLPIdx</PrimaryIndex>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConvertStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConvertStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConvertStatus</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSConvertStatus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemDimLocLPIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<SourceEDT>WHSLicensePlateId</SourceEDT>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>