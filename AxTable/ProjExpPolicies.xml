<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjExpPolicies</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjExpPolicies extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Supports data entry of the <c>EndDate</c> field through a date control.  When called to set the value,
    /// converts the date to datetime, setting the time to the end of day without applying any timezone offset.
    /// </summary>
    /// <param name = "_set">True when setting the value, false to return the field value converted to a date.</param>
    /// <param name = "_dateTo">The date value to convert when _set is true, or the field value expressed as a date when _set is false</param>
    /// <returns>a date value</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit TrvDateStd editEndDate(boolean _set, TrvDateStd _dateTo)
    {
        if (_set)
        {
            if (_dateTo)
            {
                this.EndDate = DateTimeUtil::newDateTime(_dateTo, timeMax());
            }
            else
            {
                this.EndDate = utcDateTimeNull();
            }
            this.validateFieldValue(fieldStr(ProjExpPolicies, EndDate));
        }
        else
        {
            _dateTo = DateTimeUtil::date(this.EndDate);
        }

        return _dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Supports data entry of the <c>StartDate</c> field through a date control.  When called to set the value,
    /// converts the date to datetime, setting the time to the start of day without applying any timezone offset.
    /// </summary>
    /// <param name = "_set">True when setting the value, false to return the field value converted to a date.</param>
    /// <param name = "_dateTo">The date value to convert when _set is true, or the field value expressed as a date when _set is false</param>
    /// <returns>a date value</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit TrvDateStd editStartDate(boolean _set, TrvDateStd _dateFrom)
    {
        if (_set)
        {
            if (_dateFrom)
            {
                this.StartDate = DateTimeUtil::newDateTime(_dateFrom, 0);
            }
            else
            {
                this.StartDate = utcDateTimeNull();
            }
            this.validateFieldValue(fieldStr(ProjExpPolicies, StartDate));
        }
        else
        {
            _dateFrom = DateTimeUtil::date(this.StartDate);
        }

        return _dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ExpPerUnit = ProjExpPolicyPerUnit::Expense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ProjExpPolicies, CustAccount):
                if (this.orig().CustAccount != this.CustAccount ||  strLen(strLRTrim(this.CustAccount)) == 0)
                {
                    this.ProjId = '';
                    this.ProjInvoiceProjId = '';
                }

                break;

            case fieldStr(ProjExpPolicies, ProjInvoiceProjId):
                if (this.orig().ProjInvoiceProjId != this.ProjInvoiceProjId || strLen(strLRTrim(this.ProjInvoiceProjId)) == 0)
                {
                    this.ProjId = '';
                }
                break;

            case fieldStr(ProjExpPolicies, PolicyEmplGroupId):
                if (this.orig().PolicyEmplGroupId != this.PolicyEmplGroupId || strLen(strLRTrim(this.PolicyEmplGroupId)) == 0)
                {
                    this.Worker = 0;
                }
                break;

            case fieldStr(ProjExpPolicies, AllowableAmount):
                if (this.MaximumPercent)
                {
                    this.MaximumAmount = this.AllowableAmount * (1 + (this.MaximumPercent / 100));
                }

                if (this.MaximumAmount && !this.MaximumPercent)
                {
                    if (this.MaximumAmount < this.AllowableAmount)
                    {
                        warning("@SYS121536");
                    }
                }
                break;

            case fieldStr(ProjExpPolicies, ReceiptRequired):
                if (this.ReceiptRequired == NoYes::No && this.ReceiptMin != 0)
                {
                    this.ReceiptMin = 0;
                }
                break;

            case fieldStr(ProjExpPolicies, MaximumPercent):
                this.MaximumAmount = this.AllowableAmount * (1 + (this.MaximumPercent / 100));
                break;

            case fieldStr(ProjExpPolicies, MaximumAmount):

                if (this.AllowableAmount * (1 + this.MaximumPercent) != this.MaximumAmount)
                {
                    if (this.AllowableAmount)
                    {
                        this.MaximumPercent = ((this.MaximumAmount/this.AllowableAmount) -1 )*100;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        CategoryTable categoryTable;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(ProjExpPolicies, CostType):
                    select firstonly RecId,UseInProject,UseInExpense from categoryTable where categoryTable.CategoryId == this.CostType;
                    if (categoryTable.RecId && !(categoryTable.UseInExpense & categoryTable.UseInProject))
                    {
                        ret = checkFailed("@SYS343359");
                    }
                    break;

                case fieldNum(ProjExpPolicies, StartDate):
                    if (this.EndDate != utcDateTimeNull())
                    {
                        if (this.StartDate > this.EndDate)
                        {
                            ret = checkFailed("@SYS343360");
                        }
                    }
                    break;

                case fieldNum(ProjExpPolicies, EndDate):
                    if (this.EndDate != utcDateTimeNull())
                    {
                        if (this.EndDate < this.StartDate)
                        {
                            ret = checkFailed("@SYS343361");
                        }
                    }
                    break;

                case fieldNum(ProjExpPolicies, Worker):

                    ret = ProjWorkerValidation::isWorkerInCurrentCompany(this.Worker);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        CategoryTable categoryTable;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(ProjExpPolicies, CostType):
                    select firstonly RecId,UseInProject,UseInExpense from categoryTable where categoryTable.CategoryId == this.CostType;
                    if (categoryTable.RecId && !(categoryTable.UseInExpense & categoryTable.UseInProject))
                    {
                        ret = checkFailed("@SYS343359");
                    }
                    break;

                case fieldStr(ProjExpPolicies, StartDate):
                    if (this.EndDate != utcDateTimeNull())
                    {
                        if (this.StartDate > this.EndDate)
                        {
                            ret = checkFailed("@SYS343360");
                            this.StartDate = this.orig().StartDate;
                        }
                    }
                    break;

                case fieldStr(ProjExpPolicies, EndDate):
                    if (this.EndDate != utcDateTimeNull())
                    {
                        if (this.EndDate < this.StartDate)
                        {
                            ret = checkFailed("@SYS343361");
                            this.EndDate = this.orig().EndDate;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.Worker);

        if ((this.MaximumAmount != 0) && (this.MaximumAmount < this.AllowableAmount))
        {
            ret = ret && checkFailed("@SYS121535");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRulesByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>ProjectPolicies</c> table and returns a record based on the order of precedence.
    /// </summary>
    /// <param name="_dTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_sCurrency">
    /// The currency code.
    /// </param>
    /// <param name="_sCostType">
    /// The expense category.
    /// </param>
    /// <param name="_workerRecId">
    /// The worker ID
    /// </param>
    /// <param name="_sCity">
    /// The city.
    /// </param>
    /// <param name="_sClient">
    /// The client.
    /// </param>
    /// <param name="_sContract">
    /// The contract number.
    /// </param>
    /// <param name="_sProjId">
    /// The project ID.
    /// </param>
    /// <param name="_ePerUnit">
    /// The per day, per expense report or per expense line.
    /// </param>
    /// <param name="_ePolicyType">
    /// The company or client.
    /// </param>
    /// <returns>
    /// A <c>ProjExpPolicies</c> record.
    /// </returns>
    /// <remarks>
    /// When there are multiple matching rules, we take the best match according to the order of
    /// precedence.For Client policies: Customer, Invoice, Project, Employee, Employee group, City For
    /// Company policies: Employee, Employee group, City.For eg 1. For client policy, we found a rule set
    /// on Customer and Invoice; and another rule set on Customer and Employee The rule set on Customer and
    /// Invoice will be returned.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProjExpPolicies findRulesByType(TrvDateStd  _dTransDate,
                CurrencyCode            _sCurrency,
                TrvCostTypeEDT          _sCostType,
                ProjWorkerRecId         _workerRecId,
                AddressCity             _sCity,
                CustAccount             _sClient,
                ProjInvoiceProjId       _sContract,
                ProjId                  _sProjId,
                ProjExpPolicyPerUnit    _ePerUnit,
                ProjExpPolicyType       _ePolicyType
                )
    {
        ProjExpPolicies          tProjExpPolicies;
        ProjExpPolicyGroupId     sEmplGroupId = '';
        TrvUtcDateTime           utcTransDate = DateTimeUtil::newDateTime(_dTransDate, 0);

        sEmplGroupId = ProjExpPolicyGroupEmpl::find(_workerRecId).GroupId;

        if (_ePolicyType == ProjExpPolicyType::Client)
        {
            select firstOnly tProjExpPolicies
                order by CustAccount desc,
                        ProjInvoiceProjId desc,
                        ProjId desc,
                        Worker desc,
                        PolicyEmplGroupId desc,
                        City desc
                where (tProjExpPolicies.Worker                 ==  _workerRecId || tProjExpPolicies.Worker == 0)
                  &&  (tProjExpPolicies.PolicyEmplGroupId      ==  sEmplGroupId || tProjExpPolicies.PolicyEmplGroupId == '')
                  &&  (tProjExpPolicies.City                   ==  _sCity       || tProjExpPolicies.City == '')
                  &&  (tProjExpPolicies.ProjId                 ==  _sProjId     || tProjExpPolicies.ProjId == '')
                  &&  (tProjExpPolicies.ProjInvoiceProjId      ==  _sContract   || tProjExpPolicies.ProjInvoiceProjId == '')
                  &&  (tProjExpPolicies.CustAccount            ==  _sClient     || tProjExpPolicies.CustAccount == '')
                  &&  tProjExpPolicies.StartDate          <=  utcTransDate
                  &&  ((tProjExpPolicies.EndDate != utcDateTimeNull() && tProjExpPolicies.EndDate >=  utcTransDate)
                     ||   (tProjExpPolicies.EndDate == utcDateTimeNull()))
                  &&  tProjExpPolicies.ExchangeCode           ==  _sCurrency
                  &&  tProjExpPolicies.CostType               == _sCostType
                  &&  tProjExpPolicies.ExpPerUnit             == _ePerUnit
                  &&  tProjExpPolicies.PolicyType             == _ePolicyType;
        }
        else if (_ePolicyType == ProjExpPolicyType::Company)
        {
            // Company policies do not have project, project invoice, customer account on them
            select firstOnly tProjExpPolicies
                order by Worker desc,
                         PolicyEmplGroupId desc,
                         City desc
                where (tProjExpPolicies.Worker                 ==  _workerRecId || tProjExpPolicies.Worker == 0)
                  &&  (tProjExpPolicies.PolicyEmplGroupId      ==  sEmplGroupId || tProjExpPolicies.PolicyEmplGroupId == '')
                  &&  (tProjExpPolicies.City                   ==  _sCity       || tProjExpPolicies.City == '')
                  &&  tProjExpPolicies.StartDate          <=  utcTransDate
                  &&  ((tProjExpPolicies.EndDate != utcDateTimeNull() && tProjExpPolicies.EndDate >=  utcTransDate)
                     ||   (tProjExpPolicies.EndDate == utcDateTimeNull()))
                  &&  tProjExpPolicies.ExchangeCode           ==  _sCurrency
                  &&  tProjExpPolicies.CostType               == _sCostType
                  &&  tProjExpPolicies.ExpPerUnit             == _ePerUnit
                  &&  tProjExpPolicies.PolicyType             == _ePolicyType;
        }

        return tProjExpPolicies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValidPolicyForDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean hasValidPolicyForDate(TrvDateStd _transDate)
    {
        ProjExpPolicies projExpPolicies;
        TrvUtcDateTime  utcTransDate =  DateTimeUtil::newDateTime(_transDate, 0);

        select firstonly RecId from projExpPolicies where projExpPolicies.StartDate <=  utcTransDate
                                           && ((projExpPolicies.EndDate != utcDateTimeNull() && projExpPolicies.EndDate >=  utcTransDate)
                                           ||  (projExpPolicies.EndDate == utcDateTimeNull()));

        return projExpPolicies.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorker</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Common lookupWorker(FormReferenceGroupControl _oLookupCtrl, ProjExpPolicyGroupId _sPolicyGroup)
    {
        SysReferenceTableLookup oSysTableLookup;
        Query                   oQuery = new Query();
        QueryBuildDataSource    oqbdsPolicyGrp;
        QueryBuildDataSource    oqbdsHcmWorker;
        QueryBuildRange         oQueryBuildRange;
        HcmWorker               hcmWorker;

        HcmWorkerLookup     hcmWorkerLookup;

        if (_sPolicyGroup != '')
        {
            oSysTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmWorker), _oLookupCtrl);

            oqbdsHcmWorker = oQuery.addDataSource(tableNum(HcmWorker));

            oqbdsPolicyGrp = oqbdsHcmWorker.addDataSource(tableNum(ProjExpPolicyGroupEmpl));
            oqbdsPolicyGrp.joinMode(JoinMode::InnerJoin);
            oqbdsPolicyGrp.relations(true);

            oQueryBuildRange = oqbdsPolicyGrp.addRange(fieldNum(ProjExpPolicyGroupEmpl, GroupId));

            oQueryBuildRange.value(queryValue(_sPolicyGroup));
            oSysTableLookup.addLookupfield(fieldNum(HcmWorker, PersonnelNumber));
            oSysTableLookup.addLookupMethod('Name');
            oSysTableLookup.parmQuery(oQuery);
            hcmWorker = oSysTableLookup.performFormLookup();

            return hcmWorker;
        }
        else
        {
            hcmWorkerLookup = HcmWorkerLookup::newCustomOptions(true, true, true, false, true, true, false, false, true);
            hcmWorker = hcmWorkerLookup.lookupWorker(_oLookupCtrl);
            return hcmWorker;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS324135</DeveloperDocumentation>
	<Label>@SYS121505</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>PolicyType</TitleField1>
	<TitleField2>CostType</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PolicyIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PolicyEmplGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowableAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpPerUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowableAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PolicyEmplGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowableAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpPerUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllowableAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS121524</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>City</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvUtcDateTime</ExtendedDataType>
			<Label>@SYS110049</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExchangeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExpPerUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjExpPolicyPerUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS101381</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SYS121528</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PolicyEmplGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjExpPolicyGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PolicyType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjExpPolicyType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiptMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS121526</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceiptRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS121500</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvUtcDateTime</ExtendedDataType>
			<Label>@SYS110051</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PolicyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PolicyEmplGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PolicyType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchangeCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ExchangeCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjExpPolicyGroups</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjExpPolicyGroups</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PolicyEmplGroupId</Name>
					<SourceEDT>ProjExpPolicyGroupId</SourceEDT>
					<Field>PolicyEmplGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvCostType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TrvCostType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostType</Name>
					<SourceEDT>TrvCostTypeEDT</SourceEDT>
					<Field>CostType</Field>
					<RelatedField>CostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostType</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_ProjExpPolicies</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>