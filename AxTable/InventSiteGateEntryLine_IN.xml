<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteGateEntryLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSiteGateEntryLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkGateEntryLineMeasurement</Name>
				<Source><![CDATA[
    public display CheckMeasurementGateEntryIcon_IN checkGateEntryLineMeasurement()
    {
        InventSiteGateEntry_IN inventSiteGateEntry;
        #resAppl
        ImageRes image = #ImageBlank2;

        inventSiteGateEntry = InventSiteGateEntry_IN::find(this.InventSiteGateEntry);
        switch (inventSiteGateEntry.Type)
        {
            case InventSiteGateEntryType_IN::Inward :
                if (inventSiteGateEntry.Status == InventSiteGateEntryStatus_IN::VehicleEntered && !inventSiteGateEntry.SkipMeasurement)
                {
                    image = (!this.MeasuredQty || !this.MeasuringInstrumentId || !this.MeasuringRunningNumber || !this.UnitOfMeasurement) ? #ImageMatchingError : #ImageMatchingOK;
                }
                break;

            case InventSiteGateEntryType_IN::Outward :
                if (inventSiteGateEntry.Status == InventSiteGateEntryStatus_IN::TareCheck && !inventSiteGateEntry.SkipMeasurement)
                {
                    image = (!this.MeasuredQty || !this.MeasuringInstrumentId || !this.MeasuringRunningNumber || !this.UnitOfMeasurement) ? #ImageMatchingError : #ImageMatchingOK;
                }
                break;
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGateEntryLineTareWeight</Name>
				<Source><![CDATA[
    public display CheckTareWeightGateEntryIcon_IN checkGateEntryLineTareWeight()
    {
        InventSiteGateEntry_IN inventSiteGateEntry;
        #resAppl
        ImageRes image = #ImageBlank2;

        inventSiteGateEntry = InventSiteGateEntry_IN::find(this.InventSiteGateEntry);
        switch (inventSiteGateEntry.Type)
        {
            case InventSiteGateEntryType_IN::Inward :
                if (inventSiteGateEntry.Status == InventSiteGateEntryStatus_IN::Measured && !inventSiteGateEntry.SkipMeasurement)
                {
                    image = (!this.TareQty || !this.TareWeightUnit) ? #ImageMatchingError : #ImageMatchingOK;
                }
                break;

            case InventSiteGateEntryType_IN::Outward :
                if (inventSiteGateEntry.Status == InventSiteGateEntryStatus_IN::VehicleEntered && !inventSiteGateEntry.SkipMeasurement)
                {
                    image = (!this.TareQty || !this.TareWeightUnit) ? #ImageMatchingError : #ImageMatchingOK;
                }
                break;
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptShipmentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check Receipt/Shipment number for the gate entry line
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Gate entry line is already attached. Please select another gate entry line.
    /// </exception>
    public void checkReceiptShipmentNumber()
    {
        if (this.ReceiptShipmentNumber)
        {
            throw error(strFmt("@SYP4860162"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specific actions when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        InventSiteGateEntryLine_IN  InventSiteGateEntryLine;
        InventSiteGateEntryLine_IN  InventSiteGateEntryLineRGP;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventSiteGateEntryLine_IN, ItemId):
                this.Description = InventTable::find(this.ItemId).productDescription(CompanyInfo::find().LanguageId);
                break;

            case fieldNum(InventSiteGateEntryLine_IN, OutwardGateId):
                if (InventSiteGateEntry_IN::find(this.InventSiteGateEntry).ReferenceDocumentType == InventSiteGateRefDocType_IN::ReturnableGatePassReturn)
                {
                    InventSiteGateEntryLineRGP = InventSiteGateEntryLine_IN::find(this.OutwardGateId);
                    this.ItemId = InventSiteGateEntryLineRGP.ItemId;
                    this.Description = InventSiteGateEntryLineRGP.Description;
                    this.InventoryUnit = InventSiteGateEntryLineRGP.InventoryUnit;
                    this.ChallanQty = this.remainOutwardGateChalanQty();
                }
                break;

            case fieldNum(InventSiteGateEntryLine_IN, ChallanQty):
                if (this.SourceTableId)
                {
                    switch (this.SourceTableId)
                    {
                        case tableNum(PurchLine):
                            PurchLine purchLine = PurchLine::findRecId(this.SourceRecId);
                            if (this.ChallanQty > abs(purchLine.RemainPurchPhysical))
                            {
                                this.ChallanQty = abs(purchLine.RemainPurchPhysical);
                            }
                            break;

                        case tableNum(SalesLine):
                            SalesLine salesLine = SalesLine::findRecId(this.SourceRecId);
                            if (this.ChallanQty > abs(salesLine.RemainSalesPhysical))
                            {
                                this.ChallanQty = abs(salesLine.RemainSalesPhysical);
                            }
                            break;

                        case tableNum(InventTransferLine):
                            InventTransferLine inventTransferLine = InventTransferLine::findRecId(this.SourceRecId);
                            Qty maxAllowedChallangQty = inventTransferLine.QtyRemainShip;

                            if (InventSiteGateEntry_IN::find(this.InventSiteGateEntry).Type == InventSiteGateEntryType_IN::Inward)
                            {
                                maxAllowedChallangQty = abs(inventTransferLine.QtyShipped - inventTransferLine.QtyReceived);
                            }

                            if (this.ChallanQty > maxAllowedChallangQty)
                            {
                                this.ChallanQty = maxAllowedChallangQty;
                            }
                            break;
                    }
                }
                if (this.OutwardGateId)
                {
                    InventQty remainOutwardGateChalanQty = this.remainOutwardGateChalanQty();

                    if (this.ChallanQty > remainOutwardGateChalanQty)
                    {
                        this.ChallanQty = remainOutwardGateChalanQty;
                    }
                }
                this.MeasuredQty = this.ChallanQty;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainOutwardGateChalanQty</Name>
				<Source><![CDATA[
    private InventQty remainOutwardGateChalanQty()
    {
        InventSiteGateEntryLine_IN inventSiteGateEntryLine;
        InventSiteGateEntry_IN inventSiteGateEntry;

        select sum(ChallanQty) from inventSiteGateEntryLine
            where inventSiteGateEntryLine.OutwardGateId == this.OutwardGateId
                && inventSiteGateEntryLine.RecId != this.RecId
            exists join inventSiteGateEntry
                where inventSiteGateEntry.RecId == inventSiteGateEntryLine.InventSiteGateEntry
                    && inventSiteGateEntry.Status != InventSiteGateEntryStatus_IN::Canceled;

        InventSiteGateEntryLine_IN inventSiteGateEntryLineRGP = InventSiteGateEntryLine_IN::find(this.OutwardGateId);

        return InventSiteGateEntryLineRGP.ChallanQty - inventSiteGateEntryLine.ChallanQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validation while user will change the status of gate entry as Canceled.
    /// </summary>
    /// <returns>
    /// A boolean return true if all validations will passed otherwise return false.
    /// </returns>
    public boolean validateCanceled()
    {
        boolean isValid = true;

        if (isValid && this.ReceiptShipmentNumber)
        {
            isValid = checkFailed(strFmt("@SYP4860164", this.ReceiptShipmentNumber));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMeasured</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validation while user will change the status of gate entry as Measured.
    /// </summary>
    /// <returns>
    /// A boolean return true if all validations will passed otherwise return false.
    /// </returns>
    public boolean validateMeasured()
    {
        boolean isValid = true;

        if (isValid && !this.MeasuredQty)
        {
            isValid = checkFailed(strFmt("@SYP4860167"));
        }

        if (isValid && !this.UnitOfMeasurement)
        {
            isValid = checkFailed(strFmt("@SYP4860168"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTareCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validation while user will change the status of gate entry as Tare Check.
    /// </summary>
    /// <returns>
    /// A boolean return true if all validations will passed otherwise return false.
    /// </returns>
    public boolean validateTareCheck()
    {
        boolean isValid = true;

        if (isValid && !this.TareQty)
        {
            isValid = checkFailed(strFmt("@SYP4860169"));
        }

        if (isValid && !this.TareWeightUnit)
        {
            isValid = checkFailed(strFmt("@SYP4860170"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVehicleEntered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validation while user will change the status of gate entry as Vehicle Entered.
    /// </summary>
    /// <returns>
    /// A boolean return true if all validations will passed otherwise return false.
    /// </returns>
    public boolean validateVehicleEntered()
    {
        InventSiteGateEntry_IN inventSiteGateEntry = InventSiteGateEntry_IN::find(this.InventSiteGateEntry);
        boolean isValid = true;

        if (isValid && inventSiteGateEntry.ReferenceDocumentType != InventSiteGateRefDocType_IN::Others && !this.ItemId)
        {
            isValid = checkFailed(strFmt("@SYP4860171"));
        }

        if (isValid && !this.Description)
        {
            isValid = checkFailed(strFmt("@SYP4860435"));
        }

        if (isValid && !this.ChallanQty)
        {
            isValid = checkFailed(strFmt("@SYP4860172"));
        }

        if (isValid && !this.InventoryUnit)
        {
            isValid = checkFailed(strFmt("@SYP4860173"));
        }

        if (isValid &&
            (inventSiteGateEntry.ReferenceDocumentType == InventSiteGateRefDocType_IN::ReturnableGatePassReturn || inventSiteGateEntry.ReferenceDocumentType == InventSiteGateRefDocType_IN::SubContractReturn) &&
            !this.OutwardGateId)
        {
            isValid = checkFailed(strFmt("@SYP4860175"));
        }

        if (isValid &&
            (inventSiteGateEntry.ReferenceDocumentType == InventSiteGateRefDocType_IN::ReturnableGatePassReturn || inventSiteGateEntry.ReferenceDocumentType == InventSiteGateRefDocType_IN::SubContractReturn) &&
            this.OutwardGateId &&
            InventSiteGateEntryLine_IN::find(this.OutwardGateId).ReturnableGatePassStatus == NoYes::Yes)
        {
            isValid = checkFailed(strFmt("@SYP4860176"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>InventSiteGateEntryLine_IN</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>InventSiteGateEntryLine_IN</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean doesExist = true;

        if (!InventSiteGateEntryLine_IN::exist(_recId))
        {
            doesExist = checkFailed(strFmt("@SPS1280", _recId));
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>InventSiteGateEntryLine_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>InventSiteGateEntryLine_IN</c> table to check for existence.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        InventSiteGateEntryLine_IN inventSiteGateEntryLine;

        select firstonly RecId from inventSiteGateEntryLine
            where inventSiteGateEntryLine.RecId == _recId;

        return inventSiteGateEntryLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <C>InventSiteGateEntryLine_IN</C> record based on record ID of <C>InventSiteGateEntryLine_IN</C> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of <C>InventSiteGateEntryLine_IN</C> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <C>InventSiteGateEntryLine_IN</C> record.
    /// </returns>
    static public InventSiteGateEntryLine_IN find(RecId _recId, boolean _forUpdate = false)
    {
        InventSiteGateEntryLine_IN  inventSiteGateEntryLine;
        if (_recId)
        {
            inventSiteGateEntryLine.selectForUpdate(_forUpdate);
            select firstOnly inventSiteGateEntryLine
                where inventSiteGateEntryLine.RecId == _recId;
        }

        return inventSiteGateEntryLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4860438</DeveloperDocumentation>
	<Label>@SYP4860437</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InventSiteGateEntry</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventSiteGateEntryIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteGateEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeasuredQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeasuringInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeasuringRunningNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptShipmentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnableGatePassStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TareQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TareWeightUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasurement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutwardGateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteGateEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GateEntry</Name>
			<Label>@SYP4860381</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Measurement</Name>
			<Label>@SYS34883</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MeasuringRunningNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeasuringInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeasuredQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasurement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RGP</Name>
			<Label>@SYP4860423</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetrunableGatePassNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RGPNumber</Name>
			<Label>@SYP4860155</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OutwardGateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TareCheck</Name>
			<Label>@SYP4860370</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TareQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TareWeightUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ChallanQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYP4860439</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntryId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventSiteGateEntryId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryUnit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventUnitId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventSiteGateEntry</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteGateEntryRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MeasuredQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYP4860441</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MeasuringInstrumentId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MeasuringInstrumentId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MeasuringRunningNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MeasuringRunningNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OrderId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OrderQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYP4860153</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OutwardGateId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteGateEntryLineRecId_IN</ExtendedDataType>
			<Label>@SYP4860155</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptShipmentNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ReceiptShipmentNumber_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetrunableGatePassNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetrunableGatePassNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnableGatePassStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4860156</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TareQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@GateEntryManagement:Invent_TableField_Label_TareWeight</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TareWeightUnit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventUnitId</ExtendedDataType>
			<Label>@SYP4860160</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitOfMeasurement</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventUnitId</ExtendedDataType>
			<Label>@SYP4860160</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ChallanDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ChallanDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChallanNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ChallanNumber_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventSiteGateEntryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventSiteGateEntry</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSiteGateEntry</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventSiteGateEntry_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteGateEntry</Name>
					<Field>InventSiteGateEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSiteGateEntryLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventSiteGateEntryLine_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutwardGateId</Name>
					<Field>OutwardGateId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>