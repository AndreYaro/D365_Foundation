<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAifPaymTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendAifPaymTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendAifPaymTable</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID for which to find the record from the <c>CustVendAifPaymTable</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendAifPaymTable</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendAifPaymTable findByRecId(
        RefRecId _refRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendAifPaymTable custVendAifPaymTable;

        custVendAifPaymTable.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendAifPaymTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendAifPaymTable
            where custVendAifPaymTable.RecId == _refRecId;

        return custVendAifPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendAifPaymTable</c> table.
    /// </summary>
    /// <param name="_paymFormat">
    /// The payment format record for which to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendAifPaymTable</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendAifPaymTable findPaymFormat(
        CustVendPaymFormat _paymFormat,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendAifPaymTable custVendAifPaymTable;

        custVendAifPaymTable.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendAifPaymTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendAifPaymTable
            where custVendAifPaymTable.PaymentFormat == _paymFormat;

        return custVendAifPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymFormatByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendAifPaymTable</c> table based on <c>CustVendPaymFormat</c> and <c>CustVendPaymType</c> values.
    /// </summary>
    /// <param name="_paymFormat">
    /// The payment format for which to find.
    /// </param>
    /// <param name="_custVendPaymType">
    /// The payment type for which to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendAifPaymTable</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendAifPaymTable findPaymFormatByType(
        CustVendPaymFormat _paymFormat,
        CustVendPaymType _custVendPaymType,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendAifPaymTable custVendAifPaymTable;

        custVendAifPaymTable.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendAifPaymTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendAifPaymTable
            where custVendAifPaymTable.PaymentFormat == _paymFormat
                && custVendAifPaymTable.CustVendPaymType == _custVendPaymType;

        return custVendAifPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValues</Name>
				<Source><![CDATA[
/// <summary>
    /// Inserts a record in the <c>CustVendAifPaymTable</c> table.
    /// </summary>
    /// <param name="_paymentFormat">
    /// The record ID of the <c>AccountingEvent</c> record to find.
    /// </param>
    /// <param name="_paymentSchemaName">
    /// The XML schema name for the payment format.
    /// </param>
    public static void insertValues(
        CustVendPaymFormat _paymentFormat,
        PaymentSchemaName  _paymentSchemaName = PaymentSchemaName::None)
    {
        CustVendAifPaymTable    custVendAifPaymTable;

        if (!CustVendAifPaymTable::findPaymFormat(_paymentFormat).RecId)
        {
            custVendAifPaymTable.PaymentFormat = _paymentFormat;
            custVendAifPaymTable.PaymentSchemaName = _paymentSchemaName;
            custVendAifPaymTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPaymFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the lookup for the payment formats.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which the lookup is performed.
    /// </param>
    /// <param name="_paymType">
    /// <c>CustVendPaymType</c> range for the lookup.
    /// </param>
    public static void lookupPaymFormat(
        FormStringControl _formControl,
        CustVendPaymType _paymType = CustVendPaymType::CustVendPayment)
    {
        SysTableLookup sysTableLookup;
        Query query = new Query();

        query.addDataSource(tableNum(CustVendAifPaymTable));
        query.dataSourceTable(tableNum(CustVendAifPaymTable)).addRange(fieldNum(CustVendAifPaymTable, CustVendPaymType)).value(queryValue(_paymType));
        _formControl.lookupButton(FormLookupButton::Always);

        sysTableLookup = SysTableLookup::newParameters(tableNum(CustVendAifPaymTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(CustVendAifPaymTable, PaymentFormat));
        sysTableLookup.addLookupfield(fieldNum(CustVendAifPaymTable, AifOutboundPort));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the payment format record with the port id.
    /// </summary>
    /// <param name="_paymFormat">
    /// The payment format record to be updated.
    /// </param>
    /// <param name="_aifPort">
    /// The port id to update the record..
    /// </param>
    /// <returns>
    /// The updated record in the <c>custVendAifPaymTable</c> table.
    /// </returns>
    public static CustVendAifPaymTable updatePort(
        CustVendPaymFormat _paymFormat,
        RefRecId _aifPort)
    {
        CustVendAifPaymTable custVendAifPaymTable;

        custVendAifPaymTable = CustVendAifPaymTable::findPaymFormat(_paymFormat, true);

        if (custVendAifPaymTable)
        {
            ttsbegin;
            custVendAifPaymTable.AifOutboundPort = _aifPort;
            custVendAifPaymTable.update();
            ttscommit;
        }

        return custVendAifPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAifOutboundPort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendAifPaymTable</c> table.
    /// </summary>
    /// <param name="_aifOutboundPort">
    /// The outbound port name for which to find the record from the <c>CustVendAifPaymTable</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendAifPaymTable</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendAifPaymTable findAifOutboundPort(
        RefRecId            _aifOutboundPort,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendAifPaymTable    custVendAifPaymTable;

        custVendAifPaymTable.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendAifPaymTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendAifPaymTable
            where custVendAifPaymTable.AifOutboundPort == _aifOutboundPort;

        return custVendAifPaymTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS335547</DeveloperDocumentation>
	<Label>@SYS335549</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>PaymentFormat</TitleField1>
	<TitleField2>OutboundFolder</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>PaymentFormatIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportXslt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundFolder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustVendPaymType</Name>
			<Label>@SYS115681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendPaymType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>File</Name>
			<Label>@SYS4047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OutboundFolder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportXslt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AifOutboundPort</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSchemaName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AifOutboundPort</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS315929</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustVendPaymType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendPaymType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImportXslt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FilenameOpen</ExtendedDataType>
			<Label>@SYS97441</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutboundFolder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FilePath</ExtendedDataType>
			<Label>@SYS335534</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendPaymFormat</ExtendedDataType>
			<Label>@SYS79393</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentSchemaName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymentSchemaName</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AifOutboundPortIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AifOutboundPort</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymentFormatIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentFormat</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>