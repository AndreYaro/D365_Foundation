<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLinePostTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankStatementLinePostTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLinePostTableMapForDraftPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates line post tables for the lines and generate a map with line post table to line for draft posting.
    /// </summary>
    /// <param name="_bankStmtISOReportEntryRecIdList">The list of statement line RecId.</param>
    /// <returns>The map with line post table to line.</returns>
    internal static Map createLinePostTableMapForDraftPosting(List _bankStmtISOReportEntryRecIdList)
    {
        ttsbegin;
        Map linePostTableRecIdToLineRecIdMap = new Map(Types::Int64, Types::Int64);

        ListEnumerator statementLineEnumerator = _bankStmtISOReportEntryRecIdList.getEnumerator();
        while (statementLineEnumerator.moveNext())
        {
            BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(statementLineEnumerator.current());
            if (statementLine.RecId)
            {
                BankStatementLinePostTable linePostTable = BankStatementLinePostTable::createLinePostTableForDraftPosting(statementLine);
                linePostTableRecIdToLineRecIdMap.add(linePostTable.RecId, statementLine.RecId);
            }
        }
        ttscommit;

        return linePostTableRecIdToLineRecIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinePostTableForDraftPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates line post table for single statement line for draft posting.
    /// </summary>
    /// <param name="_statementLine">The statement line.</param>
    /// <returns>The line post table.</returns>
    internal static BankStatementLinePostTable createLinePostTableForDraftPosting(BankStmtISOReportEntry _statementLine)
    {
        ttsbegin;
        BankStmtISOAccountStatement statement = _statementLine.getStatement();
        if (!statement.isPassedValidation())
        {
            throw error(strFmt("@Bank:BankStatementHeaderHasNotBeenConfirmedError", statement.Identification));
        }
        else if (!statement.isStatementCanPostLineTable())
        {
            throw error(strFmt("@Bank:StatementHeaderHasBeenPostedError", statement.Identification));
        }

        BankStatementLinePostTable linePostTable;
        linePostTable.PostingStatus = BankStatementLinePostStatus::Draft;
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(linePostTable);
        linePostTable.insert();
        _statementLine.initLineDraftPosting(linePostTable);
        ttscommit;

        return linePostTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>BankStatementLinePostTable</c> record according to RecId.
    /// </summary>
    /// <param name="_recId">Record RecId</param>
    /// <param name="_forUpdate">Indicates whether selected record can be updated.</param>
    /// <returns>Record of <c>BankStatementLinePostTable</c>.</returns>
    internal static BankStatementLinePostTable find(
        RecId _recId,
        boolean _forUpdate = false)
    {
        BankStatementLinePostTable linePostTable;

        linePostTable.selectForUpdate(_forUpdate);

        select firstonly linePostTable
            where linePostTable.RecId == _recId;

        return linePostTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementLine</Name>
				<Source><![CDATA[
    internal BankStmtISOReportEntry getStatementLine()
    {
        BankStmtISOReportEntry statementLine;
        select firstonly statementLine
            where statementLine.BankStatementLinePostTable == this.RecId;
        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source doc header type enum name information.
    /// </summary>
    /// <returns>The enum name of the source doc header type.</returns>
    public enumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_BankStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source doc header type enum value information.
    /// </summary>
    /// <returns>The enum value of he source doc header type.</returns>
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_BankStatement::BankStatementLinePost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds if the line post table has been posted.
    /// </summary>
    /// <returns>true if posted; otherwise, false.</returns>
    internal boolean isPosted()
    {
        return this.PostingStatus == BankStatementLinePostStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyToPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the line post table is ready to be posted.
    /// </summary>
    /// <returns>true if postable; otherwise, false.</returns>
    internal boolean isReadyToPost()
    {
        boolean isLinePostTableReadyToPost = !this.isPosted() && this.SourceDocumentHeader != 0;
        if (isLinePostTableReadyToPost)
        {
            BankStmtISOReportEntry statementLine = this.getStatementLine();
            {
                if (!statementLine.isReadyToPostByLineTable())
                {
                    isLinePostTableReadyToPost = false;
                }
            }
        }
        return isLinePostTableReadyToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLinePostTableAndResetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the line post table and resets the line.
    /// </summary>
    internal void deleteLinePostTableAndResetLine()
    {
        if (this.RecId && !this.isPosted())
        {
            ttsbegin;
            BankStmtISOReportEntry statementLine;
            select firstonly statementLine where
                statementLine.BankStatementLinePostTable == this.RecId;
            if (!statementLine.allowUpdatePostingInfo())
            {
                throw error("@Bank:StatementLineCannotUpdateError");
            }
            else
            {
                statementLine.resetDraftPostingStatementLineAndPostingInfo();
                BankStatementLineBankDocumentInformation::deleteLineBankDocumentInformationByStatementLine(statementLine);
                statementLine.update();
            }

            SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader, true);
            if (sourceDocumentHeader.RecId)
            {
                sourceDocumentHeader.delete();
            }
            this.selectForUpdate(true);
            this.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank statement.
    /// </summary>
    /// <returns>The bank statement.</returns>
    internal BankStmtISOAccountStatement getBankStatement()
    {
        BankStmtISOReportEntry statementLine = this.getStatementLine();
        BankStmtISOAccountStatement statement = statementLine.getStatement();
        return statement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@Bank:StatementLinePostTable</Label>
	<SingularLabel>@Bank:StatementLinePostTable</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<Visibility>Internal</Visibility>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Bank</ConfigurationKey>
			<ExtendedDataType>SourceDocumentHeaderRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Bank</ConfigurationKey>
			<EnumType>BankStatementLinePostStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsAccountingDistributionFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsAccountingDistributedBy</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>