<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetAllocationLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetAllocationLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllocationPeriodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the allocation period name of the current record.
    /// </summary>
    /// <returns>
    /// The name of the allocation period.
    /// </returns>
    display Name getAllocationPeriodName()
    {
        Name name;

        if (this.FiscalCalendarPeriod !=0)
        {
            name = FiscalCalendarPeriod::find(this.FiscalCalendarPeriod).periodName();
        }
        else
        {
            name = FiscalCalendarYear::find(this.FiscalCalendarYear).yearName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the allocation period name of current record.
    /// </summary>
    /// <returns>
    /// The name of the allocation period.
    /// </returns>
    display FiscalPeriodStart getAllocationPeriodStartDate()
    {
        FiscalPeriodStart    startDate;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        if (this.FiscalCalendarPeriod !=0)
        {
            startDate = FiscalCalendarPeriod::find(this.FiscalCalendarPeriod).StartDate;
        }
        else
        {
           select StartDate from fiscalCalendarPeriod order by StartDate asc
           where fiscalCalendarPeriod.FiscalCalendarYear == this.FiscalCalendarYear
           &&    fiscalCalendarPeriod.Quarter == this.Quarter;
           startDate = fiscalCalendarPeriod.StartDate;
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining budget amount of current record.
    /// </summary>
    /// <returns>
    /// The remaining budget amount.
    /// </returns>
    AmountCur remainingBudget()
    {
        return  this.TotalAllocationAmount - this.ReductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>ProjBudgetAllocationLine</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist( recId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetAllocationLine::exist(_recId))
        {
            ret = checkFailed(strfmt(ProjBudgetAllocationLine::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjBudgetAllocationLine</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     projBudgetAllocationLine
                 where
                     projBudgetAllocationLine.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAllocationByLine</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines whether the allocation has completed on the specified project budget line.
    /// </summary>
    /// <param name="_projBudgetLineRecId">
    /// A record ID that specifies the project budget line record ID.
    /// </param>
    /// <param name="_projBudgetState">
    /// A <c>ProjBudgetState</c> value that specifies the project budget state.
    /// </param>
    /// <returns>
    /// true if the allocation exists; otherwise, false.
    /// </returns>
    public static boolean existAllocationByLine(recId _projBudgetLineRecId,ProjBudgetState _projBudgetState)
    {
        ProjBudgetAllocationLine    projBudgetAllocationLine;
        ProjBudgetLine              projBudgetLine;
        boolean found;

        if (_projBudgetLineRecId)
        {
            switch (_projBudgetState)
            {
                case ProjBudgetState::Created:
                        found = (select firstonly RecId from projBudgetAllocationLine
                                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineRecId).RecId !=0;
                        if (found)
                        {
                            projBudgetLine = ProjBudgetLine::find(_projBudgetLineRecId);

                            select sum(OriginalAllocationAmount) from projBudgetAllocationLine
                            group by ProjBudgetLine
                            where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineRecId;

                            if (projBudgetLine.OriginalBudget != projBudgetAllocationLine.OriginalAllocationAmount)
                            {
                                found = false;
                            }
                        }
                        break;

                case ProjBudgetState::Amendment:
                        found = (select firstonly RecId from projBudgetAllocationLine
                                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineRecId
                                        && projBudgetAllocationLine.UncommittedRevisions != 0).RecId !=0;
                        if (found)
                        {
                            projBudgetLine = ProjBudgetLine::find(_projBudgetLineRecId);

                            select sum(UncommittedRevisions) from projBudgetAllocationLine
                            group by ProjBudgetLine
                            where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineRecId;

                            if (projBudgetLine.UncommittedRevisions != projBudgetAllocationLine.UncommittedRevisions)
                            {
                                found = false;
                            }
                        }
                        break;
            }
        }
        return found;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetAllocationLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetAllocationLine</c> table; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetAllocationLine find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetAllocationLine    projBudgetAllocationLine;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetAllocationLine.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            projBudgetAllocationLine.selectForUpdate(_forUpdate);

            select firstonly projBudgetAllocationLine
                where projBudgetAllocationLine.RecId == _recId;
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyFiscalPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetAllocationLine</c> table.
    /// </summary>
    /// <param name="_fiscalPeriodId">
    /// The record ID of the <c>FiscalCalendarPeriod</c> table to find.
    /// </param>
    /// <param name="_projBudgetLineId">
    /// The record ID of the <c>ProjBudgetLine</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetAllocationLine</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetAllocationLine findbyFiscalPeriod(recId _fiscalPeriodId, recId _projBudgetLineId, boolean _forUpdate = false)
    {
        ProjBudgetAllocationLine     projBudgetAllocationLine;

        if (_projBudgetLineId)
        {
            projBudgetAllocationLine.selectForUpdate(_forUpdate);
            select projBudgetAllocationLine
            where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineId
            && projBudgetAllocationLine.FiscalCalendarPeriod == _fiscalPeriodId;
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyFiscalQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetAllocationLine</c> table.
    /// </summary>
    /// <param name="_fiscalCalendarYearID">
    /// The record ID of the <c>FiscalCalendarYear</c> table to find.
    /// </param>
    /// <param name="_quarter">
    /// The <c>FiscalQuarter</c> value of the record to find in the <c>ProjBudgetAllocationLine</c> table.
    /// </param>
    /// <param name="_projBudgetLineId">
    /// The record ID of the <c>ProjBudgetLine</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetAllocationLine</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetAllocationLine findbyFiscalQuarter(recId _fiscalCalendarYearID, FiscalQuarter _quarter, recId _projBudgetLineId, boolean _forUpdate = false)
    {
        ProjBudgetAllocationLine     projBudgetAllocationLine;

        if (_projBudgetLineId)
        {
            projBudgetAllocationLine.selectForUpdate(_forUpdate);
            select projBudgetAllocationLine
            where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineId
            && projBudgetAllocationLine.Quarter == _quarter
            && projBudgetAllocationLine.FiscalCalendarYear == _fiscalCalendarYearID;
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetAllocationLine</c> table.
    /// </summary>
    /// <param name="_fiscalYearId">
    /// The record ID of the <c>FiscalCalendarYear</c> table to find.
    /// </param>
    /// <param name="_projBudgetLineId">
    /// The record ID of the <c>ProjBudgetLine</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetAllocationLine</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetAllocationLine findbyFiscalYear(recId _fiscalYearId, recId _projBudgetLineId, boolean _forUpdate = false)
    {
        ProjBudgetAllocationLine     projBudgetAllocationLine;

        if (_projBudgetLineId)
        {
            projBudgetAllocationLine.selectForUpdate(_forUpdate);
            select projBudgetAllocationLine
            where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLineId
            && projBudgetAllocationLine.FiscalCalendarYear == _fiscalYearId;
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocatedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total allocation amount of specified combination, which includes category, project,
    /// and activity.
    /// </summary>
    /// <param name="_budgetLineRecId">
    /// The record ID of the <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_isOpenFromCommitted">
    /// A Boolean value that indicates budget state ; optional.
    /// </param>
    /// <returns>
    /// The sum of all allocation amount of the category.
    /// </returns>
    public static real getAllocatedTotals(recId _budgetLineRecId, boolean _isOpenFromCommitted = false)
    {
        ProjBudget               projBudget;
        ProjBudgetLine           projBudgetLine;
        ProjBudgetAllocationLine projBudgetAllocationLine;
        AmountCur                allocatedAmount = 0;

        select sum(TotalAllocationAmount),sum(OriginalAllocationAmount),sum(UncommittedRevisions)
        from projBudgetAllocationLine
        where projBudgetAllocationLine.ProjBudgetLine == _budgetLineRecId;

        select firstonly BudgetState from projBudget
            exists join projBudgetLine
            where projBudget.RecId == projBudgetLine.ProjBudget &&
                  projBudgetLine.RecId == _budgetLineRecId;

        switch (projBudget.BudgetState)
        {
            case ProjBudgetState::Created:
                allocatedAmount = projBudgetAllocationLine.OriginalAllocationAmount;
                break;

            case ProjBudgetState::Amendment:
                if (_isOpenFromCommitted)
                {
                    allocatedAmount = projBudgetAllocationLine.TotalAllocationAmount - projBudgetAllocationLine.UncommittedRevisions;
                }
                else
                {
                    allocatedAmount = projBudgetAllocationLine.UncommittedRevisions;
                }
                break;

            case ProjBudgetState::Committed:
                allocatedAmount = projBudgetAllocationLine.TotalAllocationAmount;
                break;
        }

        return allocatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS153505</DeveloperDocumentation>
	<Label>@SYS35002</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>FiscalCalendarYear</TitleField1>
	<TitleField2>TotalAllocationAmount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjBudgetRevLineAllocation</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetRevLineAllocation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TotalAllocationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allocation</Name>
			<Label>@SYS26697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TotalAllocationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalAllocationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommittedRevisions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReductionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UncommittedRevisions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarryForwardAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TotalAllocationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendarYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quarter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CarryForwardAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS319749</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CarryForwardTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommittedRevisions</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS325176</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendarPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalCalendarPeriodRecId</ExtendedDataType>
			<Label>@SYS73434</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendarYear</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalCalendarYearRecId</ExtendedDataType>
			<Label>@SYS54380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalAllocationAmount</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS59621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Quarter</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FiscalQuarter</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReductionAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalAllocationAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS35000</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UncommittedRevisions</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS325187</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjBudgetLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalCalendarQuarter</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalCalendarYear</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Quarter</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalCalendarPeriod</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalCalendarPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalCalendarPeriod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalCalendarPeriods</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AllocatedPeriod</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendarPeriod</Name>
					<SourceEDT>FiscalCalendarPeriodRecId</SourceEDT>
					<Field>FiscalCalendarPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>fiscalcalendaryear</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalCalendarYear</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FiscalCalendarYears</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AllocatedYear</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendarYear</Name>
					<Field>FiscalCalendarYear</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetAllocationLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetAllocationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjBudgetAllocationLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBudgetAllocationLine_ProjBudgetAllocationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarryForwardTo</Name>
					<Field>CarryForwardTo</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetLines</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>AllocationLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetLine</Name>
					<Field>ProjBudgetLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>