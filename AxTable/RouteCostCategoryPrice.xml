<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteCostCategoryPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteCostCategoryPrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowActivation</Name>
				<Source><![CDATA[
    public boolean allowActivation(boolean _showErrorMessage = true)
    {
        boolean ret;

        ret = this.RecId ? true : false;

        if (this.CostingVersionStatus != CostingVersionStatus::Pending)
        {
            ret = false;
            if (_showErrorMessage)
            {
                checkFailed(strfmt("@SYS104981", this.CostCategoryId, this.VersionId));
            }
        }

        if (CostingVersion::find(this.VersionId).BlockActivation)
        {
            ret = false;
            if (_showErrorMessage)
            {
                checkFailed(strfmt("@SYS104980", this.VersionId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateInsert</Name>
				<Source><![CDATA[
    public boolean aosValidateInsert()
    {
        boolean ret;

        ret = super();

        if (this.checkLineTypeCurrent())
        {
            ret = checkFailed("@SYS104994");
        }

        if (this.checkLineTypePending())
        {
            ret = checkFailed("@SYS105578");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateUpdate</Name>
				<Source><![CDATA[
    public boolean aosValidateUpdate()
    {
        boolean ret;

        ret = super();

        if (this.checkLineTypeCurrent())
        {
            ret = checkFailed("@SYS104994");
        }

        if (this.checkLineTypePending())
        {
            ret = checkFailed("@SYS105578");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blocked</Name>
				<Source><![CDATA[
    public display NoYes blocked()
    {
        return CostingVersion::blocked(this.VersionId, this.CostingVersionStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineTypeCurrent</Name>
				<Source><![CDATA[
    private boolean checkLineTypeCurrent()
    {
        boolean ret;

        if (this.CostingVersionStatus == CostingVersionStatus::Current && this.LineId != 1)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineTypePending</Name>
				<Source><![CDATA[
    private boolean checkLineTypePending()
    {
        boolean ret;

        if (this.CostingVersionStatus == CostingVersionStatus::Pending && this.LineId != 0)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        CostingVersion::updateLastUpdated(this.VersionId);
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionBlocked</Name>
				<Source><![CDATA[
    public display NoYes displayVersionBlocked()
    {
        return CostingVersion::find(this.VersionId).Blocked ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionName</Name>
				<Source><![CDATA[
    public display Name displayVersionName()
    {
        return CostingVersion::find(this.VersionId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoActivePrice</Name>
				<Source><![CDATA[
    public boolean hasNoActivePrice(boolean _showErrorMessage)
    {
        FromDate    currentFromDate;

        currentFromDate = RouteCostCategoryPrice::findCurrent(this.CostCategoryId, this.InventSiteId).FromDate;

        if (this.FromDate >= currentFromDate)
        {
            return true;
        }

        if (_showErrorMessage)
        {
            checkFailed(strfmt("@SYS112794",
                               this.CostCategoryId,
                               this.InventSiteId,
                               this.FromDate,
                               currentFromDate));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /* IMPORTANT: whenever this method is modified, \Classes\ReleaseUpdateDB41_Invent\updateInventItemPrice
       should be updated as well, because the RecordInsertList (used for performance improvement) ignores the
       overridden insert() method
    */
    public void insert()
    {
        ttsbegin;

        super();
        CostingVersion::updateLastUpdated(this.VersionId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCurrentToPrevious</Name>
				<Source><![CDATA[
    public void moveCurrentToPrevious()
    {
        if (this.CostingVersionStatus == CostingVersionStatus::Current)
        {
            this.CostingVersionStatus   = CostingVersionStatus::Previous;
            this.LineId                 = 1 + RouteCostCategoryPrice::maxOfLineId(  this.CostCategoryId,
                                                                                    this.VersionId,
                                                                                    this.FromDate,
                                                                                    this.InventSiteId);
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>movePendingToCurrent</Name>
				<Source><![CDATA[
    public void movePendingToCurrent()
    {
        if (this.CostingVersionStatus == CostingVersionStatus::Pending)
        {
            this.CostingVersionStatus   = CostingVersionStatus::Current;
            this.LineId                 = 1;
            this.FromDate               = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        super();
        CostingVersion::updateLastUpdated(this.VersionId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.blocked())
        {
            ret = checkFailed("@SYS104061");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(RouteCostCategoryPrice, VersionId) :
                if (CostingVersion::find(this.VersionId).Blocked)
                {
                    ret = checkFailed("@SYS104062");
                }
                break;

            case fieldnum(RouteCostCategoryPrice, FromDate) :
                if (CostingVersion::find(this.VersionId).DefaultDate)
                {
                    ret = checkFailed("@SYS106899");
                }
                break;

            case fieldnum(RouteCostCategoryPrice, InventSiteId) :
                if (CostingVersion::find(this.VersionId).InventSiteId)
                {
                    ret = checkFailed("@SYS112795");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RouteCostCategoryPrice</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from routeCostCategoryPrice
                    where routeCostCategoryPrice.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RouteCostCategoryPrice find(
        RouteCostCategoryId _costCategoryId,
        CostingVersionId    _versionId,
        FromDate            _fromDate,
        Line                _lineId,
        InventSiteId        _inventSiteId,
        boolean             _forUpdate          = false
        )
    {
        RouteCostCategoryPrice routeCostCategoryPrice;

        if (_costCategoryId && _versionId)
        {
            routeCostCategoryPrice.selectForUpdate(_forUpdate);

            select firstonly routeCostCategoryPrice
                where routeCostCategoryPrice.CostCategoryId == _costCategoryId
                   && routeCostCategoryPrice.VersionId      == _versionId
                   && routeCostCategoryPrice.FromDate       == _fromDate
                   && routeCostCategoryPrice.LineId         == _lineId
                   && routeCostCategoryPrice.InventSiteId   == _inventSiteId;
        }

        return routeCostCategoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostingVersion</Name>
				<Source><![CDATA[
    public static RouteCostCategoryPrice findCostingVersion(
        RouteCostCategoryId _costCategoryId,
        CostingVersionId    _versionId,
        FromDate            _fromDate,
        InventSiteId        _inventSiteId
        )
    {
        RouteCostCategoryPrice routeCostCategoryPrice;

        void findRouteCostCategoryPrice(InventSiteId _siteId)
        {
            select firstonly routeCostCategoryPrice
                order by FromDate desc, CostingVersionStatus
                where routeCostCategoryPrice.CostCategoryId == _costCategoryId
                   && routeCostCategoryPrice.VersionId      == _versionId
                   && routeCostCategoryPrice.InventSiteId   == _siteId
                   && routeCostCategoryPrice.FromDate       <= _fromDate;
        }

        if (_costCategoryId && _versionId)
        {
            findRouteCostCategoryPrice(_inventSiteId);

            if (_inventSiteId && !routeCostCategoryPrice)
            {
                findRouteCostCategoryPrice('');
            }
        }

        return routeCostCategoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrent</Name>
				<Source><![CDATA[
    public static RouteCostCategoryPrice findCurrent(
        RouteCostCategoryId _costCategoryId,
        InventSiteId        _inventSiteId,
        boolean             _forUpdate          = false
        )
    {
        RouteCostCategoryPrice  routeCostCategoryPrice;

        routeCostCategoryPrice.selectForUpdate(_forUpdate);

        if (_costCategoryId)
        {
            select firstonly routeCostCategoryPrice
                where routeCostCategoryPrice.CostCategoryId         == _costCategoryId
                   && routeCostCategoryPrice.InventSiteId           == _inventSiteId
                   && routeCostCategoryPrice.CostingVersionStatus   == CostingVersionStatus::Current;
        }

        return routeCostCategoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentFlex</Name>
				<Source><![CDATA[
    public static RouteCostCategoryPrice findCurrentFlex(
        RouteCostCategoryId _costCategoryId,
        InventSiteId        _inventSiteId
        )
    {
        RouteCostCategoryPrice  routeCostCategoryPrice;

        if (_costCategoryId)
        {
            routeCostCategoryPrice = RouteCostCategoryPrice::findCurrent(_costCategoryId, _inventSiteId);

            if (_inventSiteId && !routeCostCategoryPrice)
            {
                routeCostCategoryPrice = RouteCostCategoryPrice::findCurrent(_costCategoryId, '');
            }
        }

        return routeCostCategoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RouteCostCategoryPrice</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    public static RouteCostCategoryPrice findRecId(
        recId   _recId,
        boolean _forUpdate = false)
    {
        RouteCostCategoryPrice routeCostCategoryPrice;

        if (_recId)
        {
            routeCostCategoryPrice.selectForUpdate(_forUpdate);

            select firstonly routeCostCategoryPrice
                where routeCostCategoryPrice.RecId == _recId;
        }

        return routeCostCategoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteCostCategoryPrice</Name>
				<Source><![CDATA[
    public static RouteCostCategoryPrice initFromRouteCostCategoryPrice(
        RouteCostCategoryPrice  _routeCostCategoryPrice,
        CostingVersionId        _versionId                  = _routeCostCategoryPrice.VersionId,
        CostingVersionStatus    _costingVersionStatus       = _routeCostCategoryPrice.CostingVersionStatus,
        Price                   _price                      = _routeCostCategoryPrice.Price,
        FromDate                _fromDate                   = _routeCostCategoryPrice.FromDate,
        Line                    _lineId                     = _routeCostCategoryPrice.LineId,
        CostPriceSecCur_RU      _priceSecCur_RU             = _routeCostCategoryPrice.PriceSecCur_RU
        )
    {
        RouteCostCategoryPrice  routeCostCategoryPrice;

        routeCostCategoryPrice.CostCategoryId       = _routeCostCategoryPrice.CostCategoryId;
        routeCostCategoryPrice.VersionId            = _versionId;
        routeCostCategoryPrice.CostingVersionStatus = _costingVersionStatus;
        routeCostCategoryPrice.FromDate             = _fromDate;
        routeCostCategoryPrice.LineId               = _lineId;
        routeCostCategoryPrice.Price                = _price;
        // <GEERU>
        routeCostCategoryPrice.PriceSecCur_RU       = _priceSecCur_RU;
        // </GEERU>

        return routeCostCategoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxOfLineId</Name>
				<Source><![CDATA[
    public static Line maxOfLineId(
        RouteCostCategoryId _costCategoryId,
        CostingVersionId    _versionId,
        FromDate            _fromDate,
        InventSiteId        _inventSiteId
        )
    {
        RouteCostCategoryPrice routeCostCategoryPrice;

        select maxof (LineId) from routeCostCategoryPrice
            where routeCostCategoryPrice.CostCategoryId == _costCategoryId
               && routeCostCategoryPrice.VersionId      == _versionId
               && routeCostCategoryPrice.FromDate       == _fromDate
               && routeCostCategoryPrice.InventSiteId   == _inventSiteId;

        return routeCostCategoryPrice.LineId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProdRouting</ConfigurationKey>
	<DeveloperDocumentation>@SYS124262</DeveloperDocumentation>
	<FormRef>RouteCostCategoryPrice</FormRef>
	<Label>@SYS103638</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CostCategoryId</TitleField1>
	<TitleField2>VersionId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CostCategoryIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CostCategoryIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVersionName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SecondaryCost_RU</Name>
			<Label>@GLS102435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostingVersionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostingVersionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Line</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CostCategoryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CostCategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CostCategoryFromDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CostCategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FromDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VersionStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VersionId</Name>
					<Field>VersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostCategoryId</Name>
					<Field>CostCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>