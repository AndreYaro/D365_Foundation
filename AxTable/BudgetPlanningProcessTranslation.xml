<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningProcessTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningProcessTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a <c>BudgetPlanningProcessTranslation</c> record.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to delete the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    public void delete(boolean _allowSystemLanguageChange = false)
    {
        if (_allowSystemLanguageChange ||
            this.Name != BudgetPlanningProcess::find(this.BudgetPlanningProcess).Name)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>BudgetPlanningProcessTranslation</c> record.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to insert the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    public void insert(boolean _allowSystemLanguageChange = false)
    {
        if (this.validateWrite(_allowSystemLanguageChange))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a default <c>LanguageId</c> value.
    /// </summary>
    public void setDefaultLanguage()
    {
        this.LanguageId = SystemParameters::getSystemLanguageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>BudgetPlanningProcessTranslation</c> record.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to update the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    public void update(boolean _allowSystemLanguageChange = false)
    {
        if (this.validateWrite(_allowSystemLanguageChange))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            if (this.LanguageId == SystemParameters::getSystemLanguageId())
            {
                isValid = checkFailed("@GLS150186");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the name of a <c>BudgetPlanningProcess</c> record is not being used.
    /// </summary>
    /// <param name="_allowSystemLanguageChange">
    /// A Boolean value that indicates whether to write the record when the language ID is equal to the
    /// system language ID.
    /// </param>
    /// <returns>
    /// true if validation passes; Otherwise, false .
    /// </returns>
    public boolean validateWrite(boolean _allowSystemLanguageChange = false)
    {
        BudgetPlanningProcess budgetPlanningProcess;
        boolean               isValid;

        isValid = super();

        if (isValid)
        {
            if (!_allowSystemLanguageChange &&
                this.LanguageId == SystemParameters::getSystemLanguageId())
            {
                isValid = checkFailed("@GLS150186");
            }
            else
            {
                // Ensure the budget planning process name isn't already in use
                select firstonly RecId from budgetPlanningProcess
                    where budgetPlanningProcess.Name  == this.Name &&
                        budgetPlanningProcess.RecId != this.BudgetPlanningProcess;

                if (budgetPlanningProcess)
                {
                    return checkFailed("@GLS150059");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>BudgetPlanningProcessTranslation</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_budgetPlanningProcessTranslationRecId">
    /// The value of the <c>BudgetPlanningProcessTranslation</c> record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningProcessTranslationRecId _budgetPlanningProcessTranslationRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningProcessTranslation::exist(_budgetPlanningProcessTranslationRecId))
        {
            isExisting = checkFailed(strfmt(BudgetPlanningProcessTranslation::txtNotExist(), tableId2Name(tablenum(BudgetPlanningProcessTranslation))));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a budget planning process translation record.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_name">
    /// The specified budget planning process name value.
    /// </param>
    /// <param name="_description">
    /// The specified budget planning process description value.
    /// </param>
    /// <param name="_languageId">
    /// The specified <c>LanguageId</c> value.
    /// </param>
    public static void createOrUpdateTranslation(
        BudgetPlanningProcessRecId       _budgetPlanningProcessRecId,
        Name                             _name,
        BudgetPlanningProcessDescription _description = '',
        LanguageId                       _languageId = '')
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;
        LanguageId                       languageId = _languageId;

        if (!_languageId)
        {
            languageId = SystemParameters::systemLanguageId();
        }

        if (languageId)
        {
            ttsbegin;

            budgetPlanningProcessTranslation = BudgetPlanningProcessTranslation::
                findByBudgetPlanningProcessLanguage(_budgetPlanningProcessRecId, languageId, true);

            // If system language found then create or update BudgetPlanningProcessTranslation
            if (budgetPlanningProcessTranslation)
            {
                budgetPlanningProcessTranslation.Name        = _name;
                budgetPlanningProcessTranslation.Description = _description;
                budgetPlanningProcessTranslation.update(true);
            }
            else
            {
                budgetPlanningProcessTranslation.BudgetPlanningProcess = _budgetPlanningProcessRecId;
                budgetPlanningProcessTranslation.Name                  = _name;
                budgetPlanningProcessTranslation.Description           = _description;
                budgetPlanningProcessTranslation.LanguageId            = languageId;
                budgetPlanningProcessTranslation.insert(true);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the <c>BudgetPlanningProcessTranslation</c> records that are associated with a
    /// <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    public static void deleteForBudgetPlanningProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        budgetPlanningProcessTranslation.skipDeleteMethod(true);
        budgetPlanningProcessTranslation.skipDeleteActions(true);

        delete_from budgetPlanningProcessTranslation
            where budgetPlanningProcessTranslation.BudgetPlanningProcess == _budgetPlanningProcessRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>BudgetPlanningProcessTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessTranslationRecId">
    /// The value of the <c>BudgetPlanningProcessTranslation</c> record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanningProcessTranslationRecId _budgetPlanningProcessTranslationRecId)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        return _budgetPlanningProcessTranslationRecId && (select firstonly RecId from budgetPlanningProcessTranslation
                    where budgetPlanningProcessTranslation.RecId == _budgetPlanningProcessTranslationRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanningProcessTranslation</c> table that is based on a record ID
    /// value.
    /// </summary>
    /// <param name="_budgetPlanningProcessTranslationRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningProcessTranslation</c> record.
    /// </returns>
    public static BudgetPlanningProcessTranslation find(
        BudgetPlanningProcessTranslationRecId _budgetPlanningProcessTranslationRecId,
        boolean                               _forUpdate = false,
        ConcurrencyModel                      _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        if (_budgetPlanningProcessTranslationRecId)
        {
            budgetPlanningProcessTranslation.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningProcessTranslation.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningProcessTranslation
                where budgetPlanningProcessTranslation.RecId == _budgetPlanningProcessTranslationRecId;
        }

        return budgetPlanningProcessTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetPlanningProcessLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanningProcessTranslation</c> table that is based on the specified
    /// <c>BudgetPlanningProcess</c> and <c>LanguageId</c> values.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The value of the <c>BudgetPlanningProcess</c> field to find.
    /// </param>
    /// <param name="_languageId">
    /// The value of the <c>LanguageId</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningProcessTranslation</c> record.
    /// </returns>
    public static BudgetPlanningProcessTranslation findByBudgetPlanningProcessLanguage(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        LanguageIdAll              _languageId,
        boolean                    _forUpdate = false,
        ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        if (_budgetPlanningProcessRecId && _languageId)
        {
            budgetPlanningProcessTranslation.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningProcessTranslation.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningProcessTranslation
                where BudgetPlanningProcessTranslation.BudgetPlanningProcess == _budgetPlanningProcessRecId &&
                        BudgetPlanningProcessTranslation.LanguageId          == _languageId;
        }

        return budgetPlanningProcessTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BudgetPlanningProcessTranslation</c> record for the budget planning process name.
    /// </summary>
    /// <param name="_budgetPlanningProcessName">
    /// The value of the <c>Name</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningProcessTranslation</c> record.
    /// </returns>
    public static BudgetPlanningProcessTranslation findByLocalizedName(
        BudgetPlanningProcessName _budgetPlanningProcessName,
        boolean                   _forUpdate = false)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        budgetPlanningProcessTranslation = BudgetPlanningProcessTranslation::findByNameLanguage(_budgetPlanningProcessName, _forUpdate);

        if (!budgetPlanningProcessTranslation)
        {
            budgetPlanningProcessTranslation = BudgetPlanningProcessTranslation::findByNameLanguage(
                                                    _budgetPlanningProcessName,
                                                    _forUpdate,
                                                    SystemParameters::getSystemLanguageId());
        }

        return budgetPlanningProcessTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BudgetPlanningProcessTranslation</c> record for the budget planning process name and
    /// language.
    /// </summary>
    /// <param name="_budgetPlanningProcessName">
    /// The value of the <c>Name</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_languageId">
    /// The language of the <c>BudgetPlanningProcessTranslation</c> record; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningProcessTranslation</c> record.
    /// </returns>
    public static BudgetPlanningProcessTranslation findByNameLanguage(
            BudgetPlanningProcessName _budgetPlanningProcessName,
            boolean                   _forUpdate = false,
            LanguageId                _languageId = currentUserLanguage())
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        if (_budgetPlanningProcessName)
        {
            budgetPlanningProcessTranslation.selectForUpdate(_forUpdate);

            select firstOnly Name, BudgetPlanningProcess from budgetPlanningProcessTranslation
                where budgetPlanningProcessTranslation.Name == _budgetPlanningProcessName
                &&    budgetPlanningProcessTranslation.LanguageId == _languageId;
        }
        return budgetPlanningProcessTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProcessTranslationByLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanningProcessTranslation</c> table based on supplied values of the
    /// <c>BudgetPlanningProcess</c> and <c>LanguageId</c> fields. Use System language if <c>LanguageId</c>
    /// field is not supplied.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a budget planning process for which a name is retrieved.
    /// </param>
    /// <param name="_languageId">
    /// The ID of a language in which a name is retrieved.
    /// </param>
    /// <param name="_translationFieldId">
    /// The field ID of localized field in which retrieved.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanningProcessTranslation</c> record returned.
    /// </returns>
    /// <remarks>
    /// If the field in the language that is specified by the <c>_languageId</c> parameter is found, a
    /// <c>BudgetPlanningProcessTranslation</c> record returned; otherwise <c>BudgetPlanningProcessTranslation</c>
    /// in the system language is returned.
    /// </remarks>
    public static BudgetPlanningProcessTranslation findProcessTranslationByLanguage(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        LanguageId                 _languageId,
        fieldId                    _translationFieldId)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;
        LanguageId                       systemLanguageId;

        if (_budgetPlanningProcessRecId)
        {
            budgetPlanningProcessTranslation = BudgetPlanningProcessTranslation::findByBudgetPlanningProcessLanguage(
                _budgetPlanningProcessRecId,
                _languageId);

            if (!budgetPlanningProcessTranslation.RecId || !budgetPlanningProcessTranslation.(_translationFieldId))
            {
                // no translation record or no value provided - fallback to system language
                systemLanguageId = SystemParameters::getSystemLanguageId();

                if (systemLanguageId != _languageId)
                {
                    budgetPlanningProcessTranslation = BudgetPlanningProcessTranslation::findByBudgetPlanningProcessLanguage(
                        _budgetPlanningProcessRecId,
                        systemLanguageId);
                }
            }
        }

        return budgetPlanningProcessTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized <c>Description</c> field of the <c>BudgetPlanningProcessTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>BudgetPlanningProcess</c> record that the description is retrieved.
    /// </param>
    /// <returns>
    /// The localized description of a budget planning process.
    /// </returns>
    public static BudgetPlanningProcessDescription getLocalizedDescription(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningProcessDescription budgetPlanningProcessDescription;

        budgetPlanningProcessDescription = BudgetPlanningProcessTranslation::findByBudgetPlanningProcessLanguage(
                                                _budgetPlanningProcessRecId,
                                                currentUserLanguage()
                                                ).Description;
        if (!budgetPlanningProcessDescription)
        {
            budgetPlanningProcessDescription = BudgetPlanningProcessTranslation::findByBudgetPlanningProcessLanguage(
                                                    _budgetPlanningProcessRecId,
                                                    SystemParameters::getSystemLanguageId()
                                                    ).Description;
        }

        // Fall back to Description if no localized description found
        if (!budgetPlanningProcessDescription)
        {
            budgetPlanningProcessDescription = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).Description;
        }

        return budgetPlanningProcessDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized <c>Name</c> field of the <c>BudgetPlanningProcessTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a budget planning process that the name is retrieved.
    /// </param>
    /// <returns>
    /// The localized name of a budget planning process.
    /// </returns>
    public static BudgetPlanningProcessName getLocalizedName(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningProcessName budgetPlanningProcessName;

        budgetPlanningProcessName = BudgetPlanningProcessTranslation::findByBudgetPlanningProcessLanguage(
                                                _budgetPlanningProcessRecId,
                                                currentUserLanguage()
                                                ).Name;
        if (!budgetPlanningProcessName)
        {
            budgetPlanningProcessName = BudgetPlanningProcessTranslation::findByBudgetPlanningProcessLanguage(
                                                    _budgetPlanningProcessRecId,
                                                    SystemParameters::getSystemLanguageId()
                                                    ).Name;
        }

        // Fall back to Name if no localized name found
        if (!budgetPlanningProcessName)
        {
            budgetPlanningProcessName = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).Name;
        }

        return budgetPlanningProcessName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Name</c> field of the <c>BudgetPlanningProcessTranslation</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a budget planning process that the name is retrieved.
    /// </param>
    /// <param name="_languageId">
    /// The ID of a language that the name is retrieved.
    /// </param>
    /// <returns>
    /// The name of a budget planning process.
    /// </returns>
    public static Name getName(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        LanguageId                 _languageId)
    {
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        budgetPlanningProcessTranslation = BudgetPlanningProcessTranslation::findProcessTranslationByLanguage(
            _budgetPlanningProcessRecId,
            _languageId,
            fieldNum(BudgetPlanningProcessTranslation, Name)
            );

        return budgetPlanningProcessTranslation.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddDefaultLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a default language ID filter for a specified query.
    /// </summary>
    /// <param name="_query">
    /// The query that is extended to include the default language ID filter.
    /// </param>
    /// <param name="_dataSourceName">
    /// The name of the specified data source for which to add the range.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The query does not contain the specified data source or the <c>BudgetPlanningProcess</c> data
    /// source.
    /// </exception>
    public static void queryAddDefaultLanguage(Query _query, str _dataSourceName = '')
    {
        QueryBuildDataSource qbdsBudgetPlanningProcessTranslation;

        if (_dataSourceName)
        {
            qbdsBudgetPlanningProcessTranslation = _query.dataSourceName(_dataSourceName);
        }
        else
        {
            qbdsBudgetPlanningProcessTranslation = _query.dataSourceTable(tableNum(BudgetPlanningProcessTranslation));
        }

        if (!qbdsBudgetPlanningProcessTranslation)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(BudgetPlanningProcessTranslation, queryAddDefaultLanguage)));
        }

        qbdsBudgetPlanningProcessTranslation.addRange(fieldNum(BudgetPlanningProcessTranslation, LanguageId))
            .value(queryValue(SystemParameters::getSystemLanguageId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddUserLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a user language ID filter for a specified query.
    /// </summary>
    /// <param name="_query">
    /// The query that is extended to include the company language ID filter.
    /// </param>
    /// <param name="_dataSourceName">
    /// The name of the specified data source for which to add the range.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The query does not contain the specified data source or the <c>BudgetPlanningProcess</c> data
    /// source.
    /// </exception>
    public static void queryAddUserLanguage(Query _query, str _dataSourceName = '')
    {
        QueryBuildDataSource qbdsBudgetPlanningProcessTranslation;

        if (_dataSourceName)
        {
            qbdsBudgetPlanningProcessTranslation = _query.dataSourceName(_dataSourceName);
        }
        else
        {
            qbdsBudgetPlanningProcessTranslation = _query.dataSourceTable(tableNum(BudgetPlanningProcessTranslation));
        }

        if (!qbdsBudgetPlanningProcessTranslation)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(BudgetPlanningProcessTranslation, queryAddDefaultLanguage)));
        }

        qbdsBudgetPlanningProcessTranslation.addRange(fieldNum(BudgetPlanningProcessTranslation, LanguageId))
            .value(queryValue(currentUserLanguage()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called after the current buffer is loaded to populate the Budget cycle and Ledger fields.
    /// </summary>
    public void postLoad()
    {
        super();

        this.BudgetCycle = BudgetCycle::find(BudgetPlanningProcess::find(this.BudgetPlanningProcess).BudgetCycle).Name;
        this.Ledger = Ledger::find(BudgetPlanningProcess::find(this.BudgetPlanningProcess).Ledger).Name;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS150125</DeveloperDocumentation>
	<Label>@GLS150123</Label>
	<SingularLabel>@GLS150124</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanningProcess</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>BudgetPlanningProcessTranslationIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetPlanningProcessTranslationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS312922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetCycle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetCycleName</ExtendedDataType>
			<Label>@SYS314460</Label>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Ledger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerName</ExtendedDataType>
			<Label>@GeneralLedger:Ledger</Label>
			<SaveContents>No</SaveContents>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanningProcessTranslationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameLanguageIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningProcess</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningProcess</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningProcess</Name>
					<Field>BudgetPlanningProcess</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>LanguageIdAll</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>