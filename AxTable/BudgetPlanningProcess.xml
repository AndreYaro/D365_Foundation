<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningProcess extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanningProcessTranslation::deleteForBudgetPlanningProcess(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget cycle name to be displayed, associated with the budget planning process.
    /// </summary>
    /// <returns>
    /// The budget cycle name; otherwise a blank string.
    /// </returns>
    public display BudgetPlanBudgetCycleName displayBudgetCycle()
    {
        return BudgetCycle::find(this.BudgetCycle).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Create translation information
        BudgetPlanningProcessTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that is caused when a field is modified for a <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The filed ID of a modified field.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BudgetPlanningProcess, OrganizationHierarchyType):
                BudgetPlanningProcessSetup::deleteAllProcessAdministrationForProcess(this.RecId);
                BudgetPlanningProcessSetup::createProcessAdministration(this.RecId, this.OrganizationHierarchyType);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Create translation information
        BudgetPlanningProcessTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super() && BudgetPlanningProcessSetup::validateBudgetPlanningProcessDelete(this.RecId, this.ApprovalProcessState);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             isValid;
        CompanyInfo         companyInfo;
        Ledger              ledger;
        OMHierarchyPurpose  omHierarchyPurpose;
        DimensionHierarchy  dimensionHierarchy;
        LedgerStructure     ledgerStructure;

        isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(BudgetPlanningProcess, Ledger):

                select firstOnly IsConsolidationCompany from companyInfo
                    join PrimaryForLegalEntity from ledger
                        where companyInfo.RecId == ledger.PrimaryForLegalEntity
                            && ledger.RecId == this.Ledger;

                if (companyInfo.IsConsolidationCompany == NoYes::Yes)
                {
                    isValid = checkFailed("@GLS150013");
                }
                break;

            case fieldNum(BudgetPlanningProcess, OrganizationHierarchyType):

                select firstOnly RecId from omHierarchyPurpose
                    where omHierarchyPurpose.HierarchyType     == this.OrganizationHierarchyType
                        && omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::BudgetPlanning;

                if (!omHierarchyPurpose)
                {
                    isValid = checkFailed("@SYS4020048");
                }
                break;

            case fieldNum(BudgetPlanningProcess, AccountStructure):

                select firstOnly RecId from dimensionHierarchy
                    where dimensionHierarchy.RecId      == this.AccountStructure
                    && dimensionHierarchy.StructureType == DimensionHierarchyType::AccountStructure
                    exists join ledgerStructure
                        where ledgerStructure.DimensionHierarchy == dimensionHierarchy.RecId
                        exists join ledger
                            where ledger.RecId == ledgerStructure.Ledger
                            && ledger.RecId    == this.Ledger;

                if (!dimensionHierarchy)
                {
                    isValid = checkFailed("@Budget:InvalidAccountStructureForLedger");
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                 isValid;
        OMHierarchyRelationship hierarchyRelationship;

        isValid = super();

        if (isValid)
        {
            select firstOnly RecId from hierarchyRelationship
                    where hierarchyRelationship.HierarchyType == this.OrganizationHierarchyType;

            // Validate if there is an OU associated with the selected organization
            // hierarchy type in the budget planning process.
            if (!hierarchyRelationship)
            {
                isValid = checkFailed(strFmt("@GLS150026", OMHierarchyType::find(this.OrganizationHierarchyType).Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanningProcess</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningProcess::exist(_budgetPlanningProcessRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningProcess::txtNotExist(), _budgetPlanningProcessRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        return (BudgetPlanningProcess::find(_budgetPlanningProcessRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcess</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcess find(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        boolean                    _forupdate = false,
        ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningProcess budgetPlanningProcess;

        if (_budgetPlanningProcessRecId)
        {
            budgetPlanningProcess.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningProcess.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanningProcess
                where budgetPlanningProcess.RecId == _budgetPlanningProcessRecId;
        }

        return budgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningProcess</c> table that has the specified localized
    /// name.
    /// </summary>
    /// <param name="_localizedName">
    /// The localized name of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_languageId">
    /// The language of the <c>BudgetPlanningProcess</c> record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcess</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcess findByLocalizedName(
        BudgetPlanningProcessName _localizedName,
        boolean                   _forUpdate = false,
        LanguageId                _languageId = currentUserLanguage())
    {
        BudgetPlanningProcess budgetPlanningProcess;
        LanguageId            languageId = _languageId;

        // Look for the localized value first
        if (languageId)
        {
            budgetPlanningProcess = BudgetPlanningProcess::findByNameLanguage(_localizedName, _forUpdate, languageId);
        }

        // If no user language, fall back to the system language.
        if (!budgetPlanningProcess && (languageId != SystemParameters::getSystemLanguageId()))
        {
            budgetPlanningProcess = BudgetPlanningProcess::findByNameLanguage(_localizedName, _forUpdate, SystemParameters::getSystemLanguageId());
        }

        return budgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningProcess</c> table that has the specified localized
    /// name and language.
    /// </summary>
    /// <param name="_budgetPlanningProcessName">
    /// The localized name of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_languageId">
    /// The language of the <c>BudgetPlanningProcess</c> record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcess</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcess findByNameLanguage(
            BudgetPlanningProcessName _budgetPlanningProcessName,
            boolean                   _forUpdate = false,
            LanguageId                _languageId = currentUserLanguage())
    {
        BudgetPlanningProcess            budgetPlanningProcess;
        BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

        if (_budgetPlanningProcessName)
        {
            budgetPlanningProcess.selectForUpdate(_forUpdate);

            select firstOnly budgetPlanningProcess
                exists join budgetPlanningProcessTranslation
                    where budgetPlanningProcessTranslation.Name == _budgetPlanningProcessName
                    &&    budgetPlanningProcessTranslation.BudgetPlanningProcess == budgetPlanningProcess.RecId
                    &&    budgetPlanningProcessTranslation.LanguageId == _languageId;
        }

        return budgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessNameBudgetCycleLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessName">
    /// The name of the record to find.
    /// </param>
    /// <param name="_budgetCycleRecId">
    /// The record ID of a <c>BudgetCycle</c> record.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of a <c>Ledger</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcess</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcess findByProcessNameBudgetCycleLedger(
        BudgetPlanningProcessName _budgetPlanningProcessName,
        BudgetCycleRecId          _budgetCycleRecId,
        LedgerRecId               _ledgerRecId,
        boolean                   _forupdate = false,
        ConcurrencyModel          _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningProcess budgetPlanningProcess;

        if (_budgetPlanningProcessName && _budgetCycleRecId && _ledgerRecId)
        {
            budgetPlanningProcess.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningProcess.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanningProcess
                where budgetPlanningProcess.Name        == _budgetPlanningProcessName
                &&    budgetPlanningProcess.BudgetCycle == _budgetCycleRecId
                &&    budgetPlanningProcess.Ledger      == _ledgerRecId;
        }

        return budgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByAttachmentDirectory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <param name="_budgetPlanAttachmentDirectoryRecId">
    /// The record ID of the <c>BudgetPlanAttachmentDirectory</c> record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcess</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcess findFirstByAttachmentDirectory(
        BudgetPlanAttachmentDirectoryRecId  _budgetPlanAttachmentDirectoryRecId)
    {
        BudgetPlanningProcess budgetPlanningProcess;

        if (_budgetPlanAttachmentDirectoryRecId)
        {
            select firstOnly budgetPlanningProcess
                where budgetPlanningProcess.BudgetPlanAttachmentDirectory == _budgetPlanAttachmentDirectoryRecId;
        }

        return budgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceAccountStructureByLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>DimensionHierarcy</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control object on which to perform the lookup.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of the <c>Ledger</c> record for which to filter the lookup.
    /// </param>
    /// <returns>
    /// The instance of the <c>DimensionHierarchy</c> table buffer.
    /// </returns>
    public static Common lookupReferenceAccountStructureByLedger(FormReferenceControl _formReferenceControl, LedgerRecId _ledgerRecId)
    {
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(DimensionHierarchy), _formReferenceControl);

        sysReferenceTableLookup.addLookupfield(fieldNum(DimensionHierarchy, Name));
        sysReferenceTableLookup.addLookupfield(fieldNum(DimensionHierarchy, Description));

        sysReferenceTableLookup.parmQuery(DimensionHierarchy::getAccountStructureQueryByLedger(_ledgerRecId));

        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70213</DeveloperDocumentation>
	<FormRef>BudgetPlanningProcess</FormRef>
	<Label>@GLS70214</Label>
	<SingularLabel>@GLS70076</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetPlanningProcessIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteLineDefaultRowTemplate</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Process</Relation>
			<Table>BudgetPlanLineDefaultRowTemplate</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteBIParameter</Name>
			<Relation>BudgetPlanningProcess</Relation>
			<Table>BudgetPlanningBIParameter</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrganizationHierarchyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalProcessState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanJustificationTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanAttachmentDirectory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrganizationHierarchyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanJustificationTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanAttachmentDirectory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalProcessState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStructure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@GLS70050</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalProcessState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetPlanningApprovalProcessState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetCycle</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetCycleRecId</ExtendedDataType>
			<Label>@SYS314460</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanAttachmentDirectory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanAttachmentDirectoryRecId</ExtendedDataType>
			<Label>@GLS70222</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanJustificationTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanTemplateRecId</ExtendedDataType>
			<Label>@GLS70220</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Ledger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerRecId</ExtendedDataType>
			<Label>@SYS13356</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrganizationHierarchyType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrganizationHierarchyTypeRecId</ExtendedDataType>
			<Label>@GLS70157</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountStructure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionHierarchyId</ExtendedDataType>
			<Label>@Budget:DefaultBudgetPlanAccountStructure</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanningProcessIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetCycle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BudgetCycle</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetCycle</Name>
					<Field>BudgetCycle</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanAttachmentDirectory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>BudgetPlanAttachmentDirectory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanAttachmentDirectory</Name>
					<Field>BudgetPlanAttachmentDirectory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanJustificationTemplate</Name>
					<Field>BudgetPlanJustificationTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Ledger</Name>
					<Field>Ledger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrganizationtHierarchyType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMHierarchyType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrganizationHierarchyType</Name>
					<Field>OrganizationHierarchyType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountStructure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountStructureRecId</Name>
					<Field>AccountStructure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>