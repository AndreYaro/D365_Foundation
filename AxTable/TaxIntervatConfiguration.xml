<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntervatConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxIntervatConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxIntervatElement _taxIntervatElement )
    {
        boolean ret = true;

        if (!TaxIntervatConfiguration::exist(_taxIntervatElement))
        {
            ret = checkFailed(strfmt(TaxIntervatConfiguration::txtNotExist(), _taxIntervatElement));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxIntervatElement _taxIntervatElement )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     taxIntervatConfiguration
                 where
                     taxIntervatConfiguration.TaxIntervatConfElem == _taxIntervatElement).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxIntervatConfiguration</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>TaxIntervatConfiguration</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value the indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxIntervatConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxIntervatConfiguration find(
        RecId               _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxIntervatConfiguration taxIntervatConfiguration;

        taxIntervatConfiguration.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxIntervatConfiguration.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxIntervatConfiguration
            where taxIntervatConfiguration.RecId == _recId;

        return taxIntervatConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxIntervatElement</Name>
				<Source><![CDATA[
    public static TaxIntervatConfiguration findByTaxIntervatElement(
        TaxIntervatElement      _taxIntervatElement,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxIntervatConfiguration taxIntervatConfiguration;

        taxIntervatConfiguration.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxIntervatConfiguration.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxIntervatConfiguration
        where
            taxIntervatConfiguration.TaxIntervatConfElem == _taxIntervatElement;

        return taxIntervatConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103299";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates initial value in URL field.
    /// </summary>
    public void initValue()
    {
        const str http = "http://";

        super();
        this.TaxIntervatConfValue = http;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>BE</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123633</DeveloperDocumentation>
	<FormRef>TaxIntervatConfiguration</FormRef>
	<Label>@SYS92380</Label>
	<TableGroup>Main</TableGroup>
	<TitleField2>TaxIntervatConfValue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxIntervatConfDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIntervatConfValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIntervatConfElem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Element</Name>
			<Label>@SYS16577</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxIntervatConfValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIntervatConfDesc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxIntervatConfElem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxIntervatConfDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxIntervatConfValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxIntervatConfElem</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxIntervatElement</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxIntervatConfElement</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>DEL_TaxIntervatElement</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ElementIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxIntervatConfElem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>