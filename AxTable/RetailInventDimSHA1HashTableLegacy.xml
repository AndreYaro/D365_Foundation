<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventDimSHA1HashTableLegacy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInventDimSHA1HashTableLegacy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hashValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the string that is used when the hash value is calculated for the dimension values that
    /// are not included in the <c>DimIdx</c> index.  This method is used for calulcating the hashValue that was used in AX 2012.
    /// This should only be used for supporting backward compatibility scenario.
    /// </summary>
    /// <param name="inventDim">The inventDim object.</param>
    /// <returns>The <c>Sha1HashCode</c> value.</returns>
    public static Sha1HashCode hashValue(InventDim inventDim)
    {
        str     hashKey   = '';
        str     hashKeyCaseInsensitive = '';
 
        /*
         SQL Server has a limitation of 16 fields in one index. For InventDim this is a problem if extra dimensions are added in an installation.
         Instead we have added a new field which can store hashed values of the least used dimensions.
         The class InventDimUniquenessEnabling can be used to validate if the proper indexes are defined and this method includes the right fields.
 
         Create a string this is unique for every combination of the dimensions. This can for example be achieved by using the code pattern below for each field included in the hash.
 
         if (this.<FieldName>)
         {
             hashKey += (hashKey ? '~' : '') + '<FieldName>:' + this.<FieldName>;
         }
        */
 
        // If any new field is added, please update method hasHashValueChanged.
        // Due to index limitations, hash the values.
        if (inventDim.LicensePlateId)
        {
            hashKeyCaseInsensitive += (hashKey ? '~' : '') + 'LicensePlateId:' + inventDim.LicensePlateId;
        }
 
        if (inventDim.InventStatusId)
        {
            hashKeyCaseInsensitive += (hashKeyCaseInsensitive ? '~' : '') + 'InventStatusId:' + inventDim.InventStatusId;
        }
 
        hashKey = hashKey + strLwr(hashKeyCaseInsensitive);
        return RetailUtils::hashValue(hashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateInventDimSHA1Hash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the legacy AX2012 formatted SHA1Hash code for the specified inventDim buffer.
    /// </summary>
    /// <param name = "inventDim">The inventDim buffer.</param>
    /// <returns>The <c>RetailInventDimSHA1HashTableLegacy</c> record.</returns>
    public static RetailInventDimSHA1HashTableLegacy createOrUpdateInventDimSHA1Hash(InventDim inventDim)
    {
        RetailInventDimSHA1HashTableLegacy inventDimSHA1HashLegacyTable;

        select forupdate inventDimSHA1HashLegacyTable
            where inventDimSHA1HashLegacyTable.InventDimId == inventDim.inventDimId;

        if (inventDimSHA1HashLegacyTable.RecId == 0)
        {
            inventDimSHA1HashLegacyTable.InventDimId = inventDim.inventDimId;

            inventDimSHA1HashLegacyTable.LegacySHA1Hash = RetailInventDimSHA1HashTableLegacy::hashValue(inventDim);
            inventDimSHA1HashLegacyTable.insert();
        }
        else if (RetailInventDimSHA1HashTableLegacy::hasHashValueChanged(inventDim))
        {
            inventDimSHA1HashLegacyTable.InventDimId = inventDim.inventDimId;

            inventDimSHA1HashLegacyTable.LegacySHA1Hash = RetailInventDimSHA1HashTableLegacy::hashValue(inventDim);
            inventDimSHA1HashLegacyTable.update();
        } 

        return inventDimSHA1HashLegacyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the inventDimSHA1HashLegacyTable record with the legacy AX2012 formatted SHA1Hash code.
    /// </summary>
    /// <param name = "inventDim">The inventDim buffer.</param>
    /// <param name = "_isforUpdate">Optional parameter used to indicate wheather to read records for update.</param>
    /// <returns>The <c>RetailInventDimSHA1HashTableLegacy</c> record.</returns>
    public static RetailInventDimSHA1HashTableLegacy findOrCreateFromInventDim(InventDim inventDim, boolean _isforUpdate = false)
    {
        RetailInventDimSHA1HashTableLegacy inventDimSHA1HashLegacyTable;

        select firstonly inventDimSHA1HashLegacyTable
            where inventDimSHA1HashLegacyTable.InventDimId == inventDim.inventDimId;

        // Create the record in inventDimSHA1HashLegacyTable if not found.
        if (inventDimSHA1HashLegacyTable.RecId == 0) 
        {
            inventDimSHA1HashLegacyTable.InventDimId = inventDim.inventDimId;

            inventDimSHA1HashLegacyTable.LegacySHA1Hash = RetailInventDimSHA1HashTableLegacy::hashValue(inventDim);
            inventDimSHA1HashLegacyTable.insert();
        }

        inventDimSHA1HashLegacyTable.selectForUpdate(_isforUpdate);

        // Return newly created or found inventDimSHA1HashLegacyTable record.
        return inventDimSHA1HashLegacyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHashValueChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the InventDim fields LicensePlateId and InventStatusId are updated.
    /// </summary>
    /// <param name = "_inventDim">The inventDim object.</param>
    /// <returns>True if either LicensePlateId, InventStatusId are updated, otherwise false.</returns>
    private static boolean hasHashValueChanged(InventDim _inventDim)
    {
        // The field list below should match the list from method hashValue.
        return _inventDim.orig().LicensePlateId != _inventDim.LicensePlateId
        || _inventDim.orig().InventStatusId != _inventDim.InventStatusId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
	<TitleField1>InventDimId</TitleField1>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LegacySHA1Hash</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDimId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>