<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorCounters</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

public class RetailCommerceValidatorCounters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a record based on the given parameters.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_validationId">The Validation ID.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_description">Counter's description.</param>
    /// <param name = "_forUpdate">Boolean value, 'true' if the record needs to be updated, otherwise false.</param>
    /// <param name = "_forceRetry">Boolean value, 'true' if the query should be retried prior to insert, otherwise false.</param>
    /// <param name = "_writeLog">Boolean value, 'true' to write log on retry, otherwise false.</param>
    /// <returns>Created/found buffer of <c>RetailCommerceValidatorCounters</c> table.</returns>
    public static RetailCommerceValidatorCounters findOrCreate(
        RetailCommerceValidatorMetricId _metricId,
        RetailCommerceValidatorId _validationId = '',
        RefRecId _batchJobId = 0,
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        Description255 _description = '',
        boolean _forUpdate = false,
        boolean _forceRetry = true,
        boolean _writeLog = true)
    {
        System.Exception exception;
        RetailCommerceValidatorCounters validatorCounters;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();

        try
        {
            if (_metricId)
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate firstonly validatorCounters
                        where validatorCounters.MetricId == _metricId
                            && validatorCounters.ValidationId == _validationId
                            && validatorCounters.BatchJobId == _batchJobId
                            && validatorCounters.TestId == _testId
                            && validatorCounters.RuleId == _ruleId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock firstonly validatorCounters
                        where validatorCounters.MetricId == _metricId
                            && validatorCounters.ValidationId == _validationId
                            && validatorCounters.BatchJobId == _batchJobId
                            && validatorCounters.TestId == _testId
                            && validatorCounters.RuleId == _ruleId;
                }
                else
                {
                    select firstonly validatorCounters
                        where validatorCounters.MetricId == _metricId
                            && validatorCounters.ValidationId == _validationId
                            && validatorCounters.BatchJobId == _batchJobId
                            && validatorCounters.TestId == _testId
                            && validatorCounters.RuleId == _ruleId;
                }
            }
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                if (_writeLog)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorCounterRecovered", _metricId), xSession::currentRetryCount(), false, exception);
                }
            }
            else
            {
                if (_writeLog)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorCounterUnrecovered", _metricId), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        finally
        {
            if (!validatorCounters)
            {
                validatorCounters.clear();
                validatorCounters.MetricId = _metricId;
                validatorCounters.ValidationId = _validationId;
                validatorCounters.BatchJobId = _batchJobId;
                validatorCounters.TestId = _testId;
                validatorCounters.RuleId = _ruleId;
                validatorCounters.Description = _description != '' ? _description : _metricId;
                validatorCounters.insert();

                validatorCounters.selectForUpdate(_forUpdate);
            }
        }

        return validatorCounters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrements the counter.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_count">The Count.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_logType"> Type of log -'Error/Warning/Info'.</param>
    /// <param name = "_description"> Description of the log.</param>
    /// <param name = "_decrementOnlyReferences"> Decrement only metrics auto updated by current metric.</param>
    private static void decrementCounter(RetailCommerceValidatorMetricId _metricId,
        int64 _count,
        RefRecid _batchJobId = 0,
        RetailCommerceValidatorId _validationId = '',
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        RetailCommerceValidatorLogType _logType = RetailCommerceValidatorLogType::Total,
        Description255 _description = '',
        boolean _decrementOnlyReferences = false)
    {
        RetailCommerceValidatorCounters::incrementCounter(
            _metricId,
            _count * (-1),
            _batchJobId,
            _validationId,
            _testId,
            _ruleId,
            _logType,
            _description,
            _decrementOnlyReferences);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets a counter.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_logType"> Type of log -'Error/Warning/Info'.</param>
    /// <param name = "_description"> Description of the log.</param>
    public static void resetCounter(
        RetailCommerceValidatorMetricId _metricId,
        RefRecid _batchJobId = 0,
        RetailCommerceValidatorId _validationId = '',
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        RetailCommerceValidatorLogType _logType = RetailCommerceValidatorLogType::Total,
        Description255 _description = '')
    {
        RetailCommerceValidatorCounters validatorCounters;

        ttsbegin;
        validatorCounters = RetailCommerceValidatorCounters::findOrCreate(_metricId, _validationId, _batchJobId, _testId, _ruleId, _description, true, true, true);
        validatorCounters.selectForUpdate(true);
        validatorCounters.ErrorCount = 0;
        validatorCounters.WarningCount = 0;
        validatorCounters.MessageCount = 0;
        validatorCounters.TotalCount = 0;
        validatorCounters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets a counter.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_count">The Count.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_logType"> Type of log -'Error/Warning/Info'.</param>
    /// <param name = "_description"> Description of the log.</param>
    public static void setCounter(
        RetailCommerceValidatorMetricId _metricId,
        int64 _count,
        RefRecid _batchJobId = 0,
        RetailCommerceValidatorId _validationId = '',
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        RetailCommerceValidatorLogType _logType = RetailCommerceValidatorLogType::Total,
        Description255 _description = '')
    {
        RetailCommerceValidatorCounters validatorCounters;

        ttsbegin;
        validatorCounters = RetailCommerceValidatorCounters::findOrCreate(_metricId, _validationId, _batchJobId, _testId, _ruleId, _description, true, true, true);
        validatorCounters.selectForUpdate(true);
        switch (_logType)
        {
            case RetailCommerceValidatorLogType::Error:
                validatorCounters.ErrorCount = _count;
                break;
            case RetailCommerceValidatorLogType::Warning:
                validatorCounters.WarningCount = _count;
                break;
            case RetailCommerceValidatorLogType::Info:
                validatorCounters.MessageCount = _count;
                break;
        }
        validatorCounters.TotalCount = _count;
        validatorCounters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the counter.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_count">The Count.</param>   /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_logType">Type of log -'Error/Warning/Info'.</param>
    /// <param name = "_description"> Description of the log.</param>
    /// <param name = "_updateOnlyReferences">Update only metrics auto updated by current metric.</param>
    /// <param name = "_forceRetry">Force retry? (Y/N). Default true.</param>
    /// <param name = "_writeLog">write log? (Y/N). Default true.</param>
    public static void incrementCounter(RetailCommerceValidatorMetricId _metricId,
        int64 _count,
        RefRecid _batchJobId = 0,
        RetailCommerceValidatorId _validationId = '',
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        RetailCommerceValidatorLogType _logType = RetailCommerceValidatorLogType::Total,
        Description255 _description = '',
        boolean _updateOnlyReferences = false,
        boolean _forceRetry = true,
        boolean _writeLog = true)
    {
        RetailCommerceValidatorCounters validatorCounters;
        RetailCommerceValidatorMetrics validatorMetrics;

        if (!_updateOnlyReferences)
        {
            ttsbegin;
            validatorCounters = RetailCommerceValidatorCounters::findOrCreate(_metricId, _validationId, _batchJobId, _testId, _ruleId, _description, true, _forceRetry, _writeLog);

            switch(_logType)
            {
                case RetailCommerceValidatorLogType::Error:
                    validatorCounters.ErrorCount += _count;
                    validatorCounters.TotalCount += _count;
                    break;
                case RetailCommerceValidatorLogType::Warning:
                    validatorCounters.WarningCount += _count;
                    validatorCounters.TotalCount += _count;
                    break;
                case RetailCommerceValidatorLogType::Info:
                    validatorCounters.MessageCount += _count;
                    validatorCounters.TotalCount += _count;
                    break;
                case RetailCommerceValidatorLogType::Total:
                case RetailCommerceValidatorLogType::Setup:
                    validatorCounters.TotalCount += _count;
                    break;
            }

            // Make sure counters are always positive
            // Note: condition added to force negative results from decreaseCounter() method to be set as 0.
            validatorCounters.TotalCount   = validatorCounters.TotalCount >= 0 ? validatorCounters.TotalCount : 0;
            validatorCounters.WarningCount = validatorCounters.WarningCount >= 0 ? validatorCounters.WarningCount : 0;
            validatorCounters.MessageCount = validatorCounters.MessageCount >= 0 ? validatorCounters.MessageCount : 0;
            validatorCounters.ErrorCount   = validatorCounters.ErrorCount >= 0 ? validatorCounters.ErrorCount : 0;

            if (validatorCounters)
            {
                validatorCounters.update();
            }
            ttscommit;
        }

        // Auto-update counters linked to the current one
        while select validatorMetrics where validatorMetrics.AutoUpdateFromMetricId == _metricId
        {
            int64 batchJobStamp = validatorMetrics.saveBatchJobId ? _batchJobId : 0;
            RetailCommerceValidatorId validationIdStamp =  validatorMetrics.saveValidationId ? _validationId : '';
            RetailCommerceValidatorRuleId ruleIdStamp = validatorMetrics.saveRuleId ? _ruleId : '';

            RetailCommerceValidatorCounters::incrementCounter(
                validatorMetrics.MetricId,
                _count,
                batchJobStamp,
                validationIdStamp,
                _testId,
                ruleIdStamp,
                _logType,
                RetailCommerceValidatorCounters::GetDynamicDescription(validatorMetrics.MetricId, validationIdStamp, ruleIdStamp, validatorMetrics.MetricId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDynamicDescription</Name>
				<Source><![CDATA[
    internal static Description255 GetDynamicDescription(RetailCommerceValidatorMetricId _metricId,
        RetailCommerceValidatorId _validationId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        Description255 _description = '')
    {
        str validationIdStamp   = (_validationId == '') ? '' : strFmt("@Retail:RetailCommerceValidatorValidationIdStamp", _validationId);
        str ruleIdStamp         = (_ruleId       == '') ? '' : strFmt("@Retail:RetailCommerceValidatorRuleIdStamp", _ruleId);

        return strFmt("%1 (%2  %3)", _description, validationIdStamp, ruleIdStamp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementTestCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increment test counters after a test execution.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_batchJobId">The Batch Job Id.</param>
    /// <param name = "_ruleId">The Rule Id.</param>
    /// <param name = "_logType">The log type.</param>
    /// <param name = "_quantity">The quantity to increment.</param>
    public static void incrementTestCounters(
        RetailCommerceValidatorId _validationId,
        RefRecId _batchJobId,
        RetailCommerceValidatorRuleId _ruleId,
        RetailCommerceValidatorLogType _logType,
        int64 _quantity
        )
    {
        // Increment Test counter: "Number of tests executed" (*** INTERNAL ***)
        RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorValidationTestExecutionMetricId", 1, 0, '', '', '', _logType,
                                                        strFmt("@Retail:RetailCommerceValidatorValidationTestExecutionMetricId"));

        if (_logType == RetailCommerceValidatorLogType::Setup)
        {
            // Increment Test counter: "Total Number of records detected per validation" for setup tests
            RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation", _quantity, _batchJobId, _validationId, '', '', _logType,
                                                            strFmt('@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation'));
        }
        else
        {
            // Increment Test counter: "Total of issues per validation & rule"
            RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", _quantity, _batchJobId, _validationId, '', _ruleId, _logType,
                                                            strFmt('@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule', _validationId, _ruleId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementGeneralCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrement validation general counters to start a new "Execute failed" validation execution.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    /// <param name = "_decrementChannelCounters">Should decrease channel type counters? (Y/N). Default true.</param>
    /// <param name = "_decrementValidation">Should decrease Validation counter? (Y/N). Default true.</param>
    public static void decrementGeneralCounters(RetailCommerceValidatorId _validationId, boolean _decrementChannelCounters = true, boolean _decrementValidation = true)
    {
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        RetailChannelTable retailChanneltable = RetailChannelTable::findByOperatingUnitId(retailCommerceValidator.OMOperatingUnitId);
        RetailCommerceValidatorCounters counterValidationRuleEWM;

        if (_decrementValidation)
        {
            // Decrement validation creation counter
            RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId");

            // Decrement Channel validation counters
            RetailCommerceValidatorCounters::decrementChannelValidatedCounters(retailChanneltable);
            RetailCommerceValidatorCounters::decrementChannelCreatedCounters(retailChanneltable);
        }

        if (_decrementChannelCounters)
        {
            // Decrement "Channel validated" counters
            RetailCommerceValidatorCounters::decrementChannelValidatedCounters(retailChanneltable);
        }

        if (retailCommerceValidator.CurrentBatchJobId != 0)
        {
            // Decrement the 'Number of entity records detected' counters
            RetailCommerceValidatorCounters counterRecords = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation", retailCommerceValidator.ValidationId, retailCommerceValidator.CurrentBatchJobId);
            RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation", counterRecords.TotalCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', '', RetailCommerceValidatorLogType::Total,
                                                                strFmt("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation"), true);
            counterRecords = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation", retailCommerceValidator.ValidationId, retailCommerceValidator.CurrentBatchJobId);
            RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation", counterRecords.TotalCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', '', RetailCommerceValidatorLogType::Total,
                                                                strFmt("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation"), true);

            // Decrement Error/Warning/Message(EWM) counters
            while select counterValidationRuleEWM
                where counterValidationRuleEWM.ValidationId == retailCommerceValidator.ValidationId
                   && counterValidationRuleEWM.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                   && counterValidationRuleEWM.RuleId != ''
            {
                // Decrement Test counter: "Total of issues per validation & rule"
                if (counterValidationRuleEWM.ErrorCount > 0)
                    RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", counterValidationRuleEWM.ErrorCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', counterValidationRuleEWM.RuleId, RetailCommerceValidatorLogType::Error,
                                                                    strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", retailCommerceValidator.ValidationId, counterValidationRuleEWM.RuleId), true);
                if (counterValidationRuleEWM.MessageCount > 0)
                    RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", counterValidationRuleEWM.MessageCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', counterValidationRuleEWM.RuleId, RetailCommerceValidatorLogType::Info,
                                                                    strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", retailCommerceValidator.ValidationId, counterValidationRuleEWM.RuleId), true);
                if (counterValidationRuleEWM.WarningCount > 0)
                    RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", counterValidationRuleEWM.WarningCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', counterValidationRuleEWM.RuleId, RetailCommerceValidatorLogType::Warning,
                                                                    strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", retailCommerceValidator.ValidationId, counterValidationRuleEWM.RuleId), true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementValidationFailedCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrement validation test failure counters to start a new "Execute failed" validation execution.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    internal static void decrementValidationFailedCounters(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorTests retailCommerceValidatorTests;

        // Decrement the 'Number of entity records detected' counters
        RetailCommerceValidatorCounters counterRecords = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation", retailCommerceValidator.ValidationId, retailCommerceValidator.CurrentBatchJobId);
        RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation", counterRecords.TotalCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', '', RetailCommerceValidatorLogType::Total,
                                                                strFmt("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation"), true);
        counterRecords = RetailCommerceValidatorCounters::getCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation", retailCommerceValidator.ValidationId, retailCommerceValidator.CurrentBatchJobId);
        RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation", counterRecords.TotalCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', '', RetailCommerceValidatorLogType::Total,
                                                                strFmt("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation"), true);


        // Decrement Error/Warning/Message(EWM) counters for failed tests
        while select retailCommerceValidatorTests
            where retailCommerceValidatorTests.ValidationId == retailCommerceValidator.ValidationId
               && retailCommerceValidatorTests.ExecutionStatus == RetailCommerceValidatorExecutionStatus::Finished
               && (retailCommerceValidatorTests.ResultStatus == RetailCommerceValidatorResultStatus::Error
            || retailCommerceValidatorTests.ResultStatus == RetailCommerceValidatorResultStatus::Warning)
        {
            // Decrement Test counter: "Total of issues per validation & rule"
            if (retailCommerceValidatorTests.ErrorCount > 0)
                RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", retailCommerceValidatorTests.ErrorCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', retailCommerceValidatorTests.RuleId, RetailCommerceValidatorLogType::Error,
                                                                strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", retailCommerceValidator.ValidationId, retailCommerceValidatorTests.RuleId), true);
            if (retailCommerceValidatorTests.MessageCount > 0)
                RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", retailCommerceValidatorTests.MessageCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', retailCommerceValidatorTests.RuleId, RetailCommerceValidatorLogType::Info,
                                                                strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", retailCommerceValidator.ValidationId, retailCommerceValidatorTests.RuleId), true);
            if (retailCommerceValidatorTests.WarningCount > 0)
                RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId", retailCommerceValidatorTests.WarningCount, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', retailCommerceValidatorTests.RuleId, RetailCommerceValidatorLogType::Warning,
                                                                strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", retailCommerceValidator.ValidationId, retailCommerceValidatorTests.RuleId), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementChannelValidatedCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrement "Channel validated" counters.
    /// </summary>
    /// <param name = "_retailChannelTable">The <c>RetailChannelTable</c> table buffer.</param>
    private static void decrementChannelValidatedCounters(RetailChannelTable _retailChannelTable)
    {
        RetailCommerceValidatorBatchJobs validatorBatchJobs;
        RetailCommerceValidator validator = RetailCommerceValidator::findByOperatingUnit(_retailChannelTable.OMOperatingUnitId);
        boolean canDecrementCounter = true;

        if(validator.ValidationExecutionStatus == RetailCommerceValidatorExecutionStatus::NotStarted)
        {
            canDecrementCounter = false;
        }
        else if (validator.ValidationExecutionStatus == RetailCommerceValidatorExecutionStatus::InProgress)
        {
            select count(RecId) from validatorBatchJobs
                where validatorBatchJobs.ValidationId == validator.ValidationId;

            // If the validation getting executed for the first time, then don't decrease the counter.
            if (validatorBatchJobs.RecId <= 1)
            {
                canDecrementCounter = false;
            }
        }

        if (canDecrementCounter)
        {
            // Decrement "Channel Validated" counters
            if (_retailChanneltable.ChannelType == RetailChannelType::RetailStore)
            {
                RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated" );
            }
            else if (_retailChanneltable.ChannelType == RetailChannelType::SharePointOnlineStore)
            {
                RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated" );
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementChannelCreatedCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrement "Channel created" counters.
    /// </summary>
    /// <param name = "_retailChannelTable">The <c></c> table buffer.</param>
    private static void decrementChannelCreatedCounters(RetailChannelTable _retailChannelTable)
    {
        // Decrement "Channel validated" counters
        if (_retailChanneltable.ChannelType == RetailChannelType::RetailStore)
        {
            RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated" );
        }
        else if (_retailChanneltable.ChannelType == RetailChannelType::SharePointOnlineStore)
        {
            RetailCommerceValidatorCounters::decrementCounter("@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated" );
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGeneralCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all general counters (cross validation counters)
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_batchJobId">The Batch Job Id.</param>
    public static void loadGeneralCounters(RetailCommerceValidatorId _validationId, RefRecId _batchJobId)
    {
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId"           , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId"            , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorValidationTotalTestsMetricId"                 , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorValidationTotalTestsMetricId"                  , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorValidationTestExecutionMetricId"              , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorValidationTestExecutionMetricId"               , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId"                  , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId"                   , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId"               , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId"                , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId"                      , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId"                       , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfRecordsDetectedAll"                   , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfRecordsDetectedAll"                    , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated"                  , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated"                   , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated"                  , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated"                   , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated"                , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated"                 , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated"                , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated"                 , false, true, false);
        RetailCommerceValidatorCounters::findOrCreate("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombination"               , ''            , 0             , '', '', "@Retail:RetailCommerceValidatorNumberOfEntityRulesCombination"                , false, true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCountersToTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flush all counters to telemetry
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_batchJobId">The batch Job Id identifying the validation execution.</param>
    internal static void flushCountersToTelemetry(RetailCommerceValidatorId _validationId, RefRecId _batchJobId)
    {
        RetailCommerceValidatorCounters retailCommerceValidatorCounters;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        
        // Report general and validation specific statistics via telemetry
        while select retailCommerceValidatorCounters
            where (retailCommerceValidatorCounters.ValidationId == _validationId
               && retailCommerceValidatorCounters.BatchJobId == _batchJobId)
               || retailCommerceValidatorCounters.ValidationId == ''
        {
            //*************************************************************************************
            //  Telemetry : Validation counter event (Marker)
            //*************************************************************************************
            ApplicationEventSource::EventWriteRetailCommerceValidatorExecutionCounter(
                retailCommerceValidatorCounters.ValidationId,
                retailCommerceValidatorCounters.BatchJobId,
                0,
                retailCommerceValidatorCounters.MetricId,
                retailCommerceValidatorCounters.TestId,
                retailCommerceValidatorCounters.RuleId,
                retailCommerceValidatorCounters.WarningCount,
                retailCommerceValidatorCounters.ErrorCount,
                retailCommerceValidatorCounters.MessageCount,
                retailCommerceValidatorCounters.TotalCount);
            //*************************************************************************************
            //  Telemetry : Validation counter event (Task)
            //*************************************************************************************
            ApplicationEventSource::EventWriteRetailCommerceValidatorExecutionTaskCounterStart(
                retailCommerceValidatorCounters.ValidationId,
                retailCommerceValidatorCounters.BatchJobId,
                retailCommerceValidator.ChannelId,
                0,
                retailCommerceValidatorCounters.MetricId,
                retailCommerceValidatorCounters.TestId,
                retailCommerceValidatorCounters.RuleId,
                retailCommerceValidatorCounters.WarningCount,
                retailCommerceValidatorCounters.ErrorCount,
                retailCommerceValidatorCounters.MessageCount,
                retailCommerceValidatorCounters.TotalCount);
            //*************************************************************************************
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record based on the given parameters.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_validationId">The Validation ID.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_description">Counter's description.</param>
    /// <param name = "_forUpdate">Boolean value, 'true' if the record needs to be updated, otherwise false.</param>
    /// <returns>Created/found buffer of <c>RetailCommerceValidatorCounters</c> table.</returns>
    public static RetailCommerceValidatorCounters getCounter(
        RetailCommerceValidatorMetricId _metricId,
        RetailCommerceValidatorId _validationId = '',
        RefRecId _batchJobId = 0,
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        Description255 _description = '',
        boolean _forUpdate = false)
    {
        RetailCommerceValidatorCounters validatorCounters;

        try
        {
            select firstonly validatorCounters
                where validatorCounters.MetricId == _metricId
                    && validatorCounters.ValidationId == _validationId
                    && validatorCounters.BatchJobId == _batchJobId
                    && validatorCounters.TestId == _testId
                    && validatorCounters.RuleId == _ruleId;
        }
        catch (Exception::Error)
        {
            info::addMessage(Exception::Error, "@Retail:RetailCommerceValidatorGenericErrorMessage");
        }

        return validatorCounters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorCountersDevDoc</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorCountersLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>RuleId</TitleField1>
	<TitleField2>Description</TitleField2>
	<ClusteredIndex>RuleIdIdx</ClusteredIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS103567</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestId</Name>
			<ExtendedDataType>RetailCommerceValidatorTestId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleId</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ErrorCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MessageCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalInfo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WarningCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalWarning</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MetricId</Name>
			<ExtendedDataType>RetailCommerceValidatorMetricId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TotalCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotal</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ValidationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MetricId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TestIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TestId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MetricId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RuleIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MetricId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RuleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailCommerceValidator</Name>
			<RelatedTable>RetailCommerceValidator</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationId</Name>
					<Field>ValidationId</Field>
					<RelatedField>ValidationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailCommerceValidatorTests</Name>
			<RelatedTable>RetailCommerceValidatorTests</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestId</Name>
					<Field>TestId</Field>
					<RelatedField>TestId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailCommerceValidatorRules</Name>
			<RelatedTable>RetailCommerceValidatorRules</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RuleId</Name>
					<Field>RuleId</Field>
					<RelatedField>RuleId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailCommerceValidatorMetrics</Name>
			<RelatedTable>RetailCommerceValidatorMetrics</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MetricId</Name>
					<Field>MetricId</Field>
					<RelatedField>MetricId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>