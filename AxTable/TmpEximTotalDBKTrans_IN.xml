<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpEximTotalDBKTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Temp exim total DBK trans.
/// </summary>
public class TmpEximTotalDBKTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayCalculatedExportValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays calculated export value.
    /// </summary>
    /// <returns>Calculated export value for display.</returns>
    display AmountMST displayCalculatedExportValue()
    {
        return TmpEximTotalDBKTrans_IN::calculatedExportValue(this.ShippingBillTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculatedShippingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays calculated shipping quantity.
    /// </summary>
    /// <returns>Calculated shipping quantity for display.</returns>
    display CustomsQty_IN displayCalculatedShippingQty()
    {
        return TmpEximTotalDBKTrans_IN::calculatedShippingQty(this.ShippingBillTransRecId, this.Unit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays cust account.
    /// </summary>
    /// <returns>Cust account for display.</returns>
    display CustAccount displayCustAccount()
    {
        return TmpEximTotalDBKTrans_IN::custAccount(this.ShippingBillTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDrawbackAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays draw back amount.
    /// </summary>
    /// <returns>Draw back amount for dispaly.</returns>
    display AmountMST displayDrawbackAmount()
    {
        return TmpEximTotalDBKTrans_IN::drawbackAmount(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExportValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays display export value.
    /// </summary>
    /// <returns>Display export value for display</returns>
    display AmountCur displayExportValue()
    {
        return EximShippingBillTrans_IN::findByShippingBillTransRecId(this.ShippingBillTransRecId).AssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays unit id.
    /// </summary>
    /// <returns>Unit id for display.</returns>
    display UnitOfMeasureSymbol displayUnitId()
    {
        return TmpEximTotalDBKTrans_IN::salesUnit(this.ShippingBillTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedExportValue</Name>
				<Source><![CDATA[
    private static AmountMST calculatedExportValue(RefRecId _shippingBillTransRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;

        select firstonly ShippingBillDate from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join AssessableValue from eximShippingBillTrans
            where eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTrans.RecId
        join CurrencyCode from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

        return CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                             custInvoiceTrans.CurrencyCode,
                                             Direction_IN::Export,
                                             customsShippingBillTrans.ShippingBillDate,
                                             false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedShippingQty</Name>
				<Source><![CDATA[
    private static CustomsQty_IN calculatedShippingQty(
        RefRecId            _shippingBillTransRecId,
        UnitOfMeasureSymbol _unitID)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;

        select firstonly ShippingBillQty, ItemId, InventDimId
            from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join SalesUnit from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

        return !custInvoiceTrans.SalesUnit
             ? customsShippingBillTrans.ShippingBillQty
             : EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(customsShippingBillTrans.ItemId,
																					 customsShippingBillTrans.InventDimId,
																					 customsShippingBillTrans.ShippingBillQty,
																					 custInvoiceTrans.SalesUnit,
																					 _unitID,
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    private static CustAccount custAccount(RefRecId _shippingBillTransRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        CustInvoiceJour             custInvoiceJour;

        select firstonly InventTransId from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join RecId from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
        join OrderAccount from custInvoiceJour
            where custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
               && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
               && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup
               && custInvoiceJour.SalesId             == custInvoiceTrans.SalesId;

        return custInvoiceJour.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>drawbackAmount</Name>
				<Source><![CDATA[
    private static AmountMST drawbackAmount(TmpEximTotalDBKTrans_IN _tmpTotalDBKTrans)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        EximDBKValues_IN            dbkValues;
        EximProductGroupTable_IN    productGroupTable;
        EximDBKRates_IN             dbkRates;
        AmountMST                   drawbackAmt;
        AmountMST                   assessableValue;
        Qty                         shippingQty;

        select firstonly ShippingBillDate, ShippingBillQty, ItemId, InventDimId
            from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _tmpTotalDBKTrans.ShippingBillTransRecId
        join CustomsTariffCodeTable, dbkCenvatStatus, dbkRateType, EximProductGroupTable, dbkPercent, AssessableValue
            from eximShippingBillTrans
            where eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTrans.RecId
        join CurrencyCode, SalesUnit
            from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
        join RecId from productGroupTable
            where productGroupTable.RecId == eximShippingBillTrans.EximProductGroupTable
        join RecId from dbkRates
            where dbkRates.ProductGroupTableRecId == productGroupTable.RecId;

        dbkValues = EximDBKValues_IN::findByTariffCodeId(eximShippingBillTrans.CustomsTariffCodeTable,
                                           eximShippingBillTrans.dbkCenvatStatus,
                                           eximShippingBillTrans.dbkRateType,
                                           DateTimeUtil::newDateTime(customsShippingBillTrans.ShippingBillDate, 0, DateTimeUtil::getUserPreferredTimeZone()),
                                           dbkRates.RecId);

        if (_tmpTotalDBKTrans.DrawbackRate
            && eximShippingBillTrans.dbkPercent
            && dbkValues)
        {
            assessableValue = CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                                            custInvoiceTrans.CurrencyCode,
                                                            Direction_IN::Export,
                                                            customsShippingBillTrans.ShippingBillDate,
                                                            false);

            shippingQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(customsShippingBillTrans.ItemId,
																								customsShippingBillTrans.InventDimId,
																								customsShippingBillTrans.ShippingBillQty,
																								custInvoiceTrans.SalesUnit,
																								_tmpTotalDBKTrans.Unit,
																								NoYes::Yes);

            drawbackAmt = ((assessableValue * _tmpTotalDBKTrans.DrawbackRate/100 * eximShippingBillTrans.dbkPercent/100 < shippingQty * _tmpTotalDBKTrans.ValueCap)
                         ? assessableValue * _tmpTotalDBKTrans.DrawbackRate/100 * eximShippingBillTrans.dbkPercent/100
                     : shippingQty * _tmpTotalDBKTrans.ValueCap);

            drawbackAmt = EximDBKValues_IN::roundedOffDrawbackAmount(drawbackAmt,
                                                                     dbkValues.RoundOff,
                                                                     dbkValues.RoundingForm);
        }

        return drawbackAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAccountFinancialDimensionForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the financial dimensions form for the <c>AccountType</c> value of the  <c>
    /// TmpEximTotalDBKTrans_IN </c>  table.
    /// </summary>
    /// <param name="_tmpEximTotalDBKTrans">
    /// A <c>TmpEximTotalDBKTrans_IN</c> record to open the financial dimensions form for the account type.
    /// </param>
    public static void openAccountFinancialDimensionForm(TmpEximTotalDBKTrans_IN _tmpEximTotalDBKTrans)
    {
        FormRun formRun;
        MenuFunction menuFunction;
        Args args;

        // Launch the Dimension form modally, this form will change the default dimension field on the record
        menuFunction = new MenuFunction(menuitemdisplaystr(LedgerJournalTransDimension), MenuItemType::Display);
        args = new Args();
        args.record(_tmpEximTotalDBKTrans);
        formRun = menuFunction.create(args);
        formRun.run();
        formRun.wait(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    private static UnitOfMeasureSymbol salesUnit(RefRecId _shippingBillTransRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;

        select firstonly InventTransId from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join SalesUnit from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

        return custInvoiceTrans.SalesUnit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS61981</Label>
	<TitleField1>MarkSelect</TitleField1>
	<TitleField2>Unit</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS80374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllowedDrawback</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS61940</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DrawbackRate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS61937</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkSelect</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS7444</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShippingBillTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustomsShippingBillTransRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValueCap</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS61816</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustomsShippingBillTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsShippingBillTrans_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShippingBillTransRecId</Name>
					<Field>ShippingBillTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_TmpEximTotalDBKTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Unit</Name>
					<Field>Unit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>