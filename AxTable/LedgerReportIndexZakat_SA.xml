<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerReportIndexZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerReportIndexZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        CompanyImage                companyImage;
        LedgerReportIndexZakat_SA   ledgerReportIndexZakat;

        super();

        companyImage = CompanyImage::find(this.DataAreaId, this.TableId, this.RecId, true);
        if (companyImage.RecId)
        {
            select firstonly RecId
                from ledgerReportIndexZakat;
            ttsbegin;
            if (ledgerReportIndexZakat.RecId == 0)
            {
                companyImage.delete();
            }
            else
            {
                companyImage.RefRecId = ledgerReportIndexZakat.RecId;
                companyImage.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(LedgerReportTypeZakat_SA  _reportType)
    {
        boolean ret = true;

        if (! LedgerReportIndexZakat_SA::exist(_reportType))
        {
            ret = checkFailed(strfmt(LedgerReportIndexZakat_SA::txtNotExist(), _reportType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistActiveReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any record is selected in the <c>LedgerReportIndexZakat_SA</c> table.
    /// </summary>
    /// <returns>
    /// true if any record is selected in the table; otherwise, false.
    /// </returns>
    public static boolean checkExistActiveReport()
    {
        boolean ret = true;

        if (! LedgerReportIndexZakat_SA::existActiveReport())
        {
            ret = checkFailed("@SYS329669");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_reportType">
    /// The report type of the <c>LedgerReportIndexZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean exist(LedgerReportTypeZakat_SA _reportType)
    {
        return (_reportType
            && (select firstonly RecId
                    from ledgerReportIndexZakat_SA
                        where ledgerReportIndexZakat_SA.ReportType == _reportType).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any record is selected in the <c>LedgerReportIndexZakat_SA</c> table.
    /// </summary>
    /// <returns>
    /// true if any record is selected in the table; otherwise, false.
    /// </returns>
    public static boolean existActiveReport()
    {
        LedgerReportIndexZakat_SA   ledgerReportIndexZakat;
        boolean                     ret = true;

        select firstonly RecId
            from  ledgerReportIndexZakat
            where ledgerReportIndexZakat.ReportActive;

        return (ledgerReportIndexZakat.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>LedgerReportIndexZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerReportIndexZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerReportIndexZakat_SA</c> table; otherwise, an empty record.
    /// </returns>

    public static LedgerReportIndexZakat_SA find(
        recId               _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerReportIndexZakat_SA  ledgerReportIndexZakat;

        ledgerReportIndexZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel == ConcurrencyModel::Auto)
        {
            ledgerReportIndexZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerReportIndexZakat
            where ledgerReportIndexZakat.RecId == _recId;

        return ledgerReportIndexZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>AssetGroupTrans_IN</c> table with specified report type.
    /// </summary>
    /// <param name="_reportType">
    /// The report type of the <c>AssetGroupTrans_IN</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetGroupTrans_IN</c> table; otherwise, an empty record.
    /// </returns>

    public static LedgerReportIndexZakat_SA findByReportType(
        LedgerReportTypeZakat_SA    _reportType,
        boolean                     _forUpdate        = false,
         ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerReportIndexZakat_SA  ledgerReportIndexZakat;

        if (_reportType)
        {
            ledgerReportIndexZakat.selectForUpdate(_forUpdate);
            if (_forUpdate
                && _concurrencyModel == ConcurrencyModel::Auto)
            {
                ledgerReportIndexZakat.concurrencyModel(_concurrencyModel);
            }

            select firstonly ledgerReportIndexZakat
                where ledgerReportIndexZakat.ReportType == _reportType;
        }

        return ledgerReportIndexZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReportNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all Zakat report type records.
    /// </summary>
    public static void insertReportNames()
    {
        LedgerReportIndexZakat_SA ledgerReportIndex;

        void insertReportType(LedgerReportTypeZakat_SA _ledgerReportTypeZakat)
        {
            ledgerReportIndex.ReportType = _ledgerReportTypeZakat;
            ledgerReportIndex.insert();
        }

        select firstonly RecId
            from  ledgerReportIndex;

        if (!ledgerReportIndex.RecId)
        {
            insertReportType(LedgerReportTypeZakat_SA::MainZakatReport);
            insertReportType(LedgerReportTypeZakat_SA::RevenueForMainActivity);
            insertReportType(LedgerReportTypeZakat_SA::RevenueFromOtherActivity);
            insertReportType(LedgerReportTypeZakat_SA::DirectExpenses);
            insertReportType(LedgerReportTypeZakat_SA::SubContractor);
            insertReportType(LedgerReportTypeZakat_SA::Depreciation);
            insertReportType(LedgerReportTypeZakat_SA::ConsultationFees);
            insertReportType(LedgerReportTypeZakat_SA::ProvisionsAndReservations);
            insertReportType(LedgerReportTypeZakat_SA::OtherExpenses);
            insertReportType(LedgerReportTypeZakat_SA::OtherAdjustments);
            insertReportType(LedgerReportTypeZakat_SA::OtherAdditions);
            insertReportType(LedgerReportTypeZakat_SA::Investments);
            insertReportType(LedgerReportTypeZakat_SA::PresettingExpensesBalance);
            insertReportType(LedgerReportTypeZakat_SA::OtherDeductions);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS322399";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322154</DeveloperDocumentation>
	<Label>@SYS321609</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ReportType</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Ledger</Modules>
	<ReplacementKey>TypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportType</Name>
			<Label>@SYS74853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS23262</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerReportTypeZakat_SA</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReportType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>