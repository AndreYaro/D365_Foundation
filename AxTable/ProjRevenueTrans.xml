<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjRevenueTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjRevenueTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a revenue transaction can be invoiced.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Revenue entries can only be invoiced if they are registered against a time and material project, and the line property associated with the transaction can be invoiced. Also, they can only be invoiced
    ///    if the transaction status is posted, marked credit note, or invoice proposal (if the line property is chargeable). Line property is not considered if the origin of the transaction is from a
    ///    <c>SMASubscription</c> table.
    /// </remarks>
    public boolean canBeInvoiced()
    {
        ProjTrans projTrans = ProjTrans::newProjRevenueTrans(this);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.psaContractLineNum)
        {
            return true;
        }
        else
        {
            return projTrans.canBeInvoiced();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displaySalesAmount()
    {
        return this.salesAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new transaction into the table.
    /// </summary>
    /// <remarks>
    ///    If the transaction ID has not yet been assigned, a new ID will be retrieved from the appropriate number sequence used for transactions in the project module and assigned to the <c>TransId</c> field.
    /// </remarks>
    public void insert()
    {
        #isoCountryRegionCodes

        if (!(ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled() && (this.Qty != 0)))
        {
            this.Qty = 1;
        }

        super();

        ProjPostedTransTable::initFromRevenueTrans(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction is invoiced.
    /// </summary>
    /// <returns>
    ///    true if the transaction has been invoiced; otherwise, false.
    /// </returns>
    display ProjInvoiced invoiced()
    {
        return ProjTrans::newProjRevenueTrans(this).invoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the invoice associated with the transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the invoice associated with the transaction.
    /// </returns>
    /// <remarks>
    ///    If the transaction status is credit note proposal, an empty string is returned.
    /// </remarks>
    display ProjInvoiceId invoiceId()
    {
        ProjInvoiceId invoiceId;

        if (this.TransactionOrigin == ProjOrigin::FreeTextInvoice)
        {
            invoiceId = this.VoucherJournal;
        }

        else if (this.TransactionOrigin == ProjOrigin::AdvancedLedgerEntry)
        {
            invoiceId = this.VoucherJournal;
        }

        else
        {
            invoiceId = ProjTrans::newProjRevenueTrans(this).invoiceId();
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    display ProjLedgerAccruedAmount ledgerSalesAmount()
    {
        DictTable dictTableProjRevenueTransSale;

        dictTableProjRevenueTransSale = new DictTable(tableNum(ProjRevenueTransSale));

        if (dictTableProjRevenueTransSale.rights() >= AccessType::View)
        {
            return (select sum(LedgerSalesAmount) from projRevenueTransSale
                    where projRevenueTransSale.TransId == this.TransId).LedgerSalesAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjRevenueTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProjRevenueTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_projRevenueTransTaxExtensionIN">
    /// ProjRevenueTransTaxExtensionIN is packed.
    /// </param>
    public void packProjRevenueTrans_IN(ProjRevenueTransTaxExtensionIN _projRevenueTransTaxExtensionIN)
    {
        _projRevenueTransTaxExtensionIN.ProjRevenueTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_projRevenueTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceStatus</Name>
				<Source><![CDATA[
    public display ProjInvoiceStatus projInvoiceStatus()
    {
        ProjInvoiceStatus projInvoiceStatus = ProjInvoiceStatus::None;

        // Adjusted transactions
        ProjRevenueTransSale adjustedTransaction;
        select firstonly RecId from adjustedTransaction
            where adjustedTransaction.TransId == this.TransId &&
                  adjustedTransaction.TransStatus == ProjTransStatus::Adjusted;
        if (adjustedTransaction)
        {
            projInvoiceStatus = ProjInvoiceStatus::Adjusted;
        }
        else
        {
            ProjRevenueTransSale onHoldFunding;
            ProjRevenueTransSale invoiced;
            ProjRevenueTransSale chargeable;
            ProjFundingSource projFundingSource;

            ProjTable projTable = ProjTable::find(this.ProjId);
            if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTable, ProjTransType::Revenue))
            {        
                if ((this.TransactionOrigin == ProjOrigin::Subscription) ||
                    (this.TransactionOrigin != ProjOrigin::Subscription && ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced == NoYes::Yes))
                {
                    select firstonly RecId from invoiced where
                        invoiced.TransId == this.TransId &&
                        (invoiced.TransStatus == ProjTransStatus::Invoiced         ||
                         invoiced.TransStatus == ProjTransStatus::MarkedCreditnote ||
                         invoiced.TransStatus == ProjTransStatus::CreditnoteProposal);

                    // For performance, Only search for OnHold if some of the transaction has been invoice
                    if (invoiced)
                    {
                        select firstonly RecId from onHoldFunding where
                                onHoldFunding.TransId == this.TransId
                            join RecId from projFundingSource
                                where projFundingSource.RecId == onHoldFunding.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;
                    }

                    select firstonly RecId from chargeable where
                            chargeable.TransId == this.TransId &&
                            (chargeable.TransStatus == ProjTransStatus::Posted ||
                             chargeable.TransStatus == ProjTransStatus::InvoiceProposal)
                        exists join projFundingSource where
                            projFundingSource.RecId == chargeable.FundingSource &&
                            (projFundingSource.FundingType == ProjFundingType::Customer ||
                             projFundingSource.FundingType == ProjFundingType::Grant);
                }
            }
            else if (this.psaContractLineNum && ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue))
            {
                select firstonly RecId from invoiced where
                    invoiced.TransId == this.TransId &&
                    (invoiced.TransStatus == ProjTransStatus::Invoiced           ||
                     invoiced.TransStatus == ProjTransStatus::MarkedCreditnote   ||
                     invoiced.TransStatus == ProjTransStatus::CreditnoteProposal ||
                     invoiced.TransStatus == ProjTransStatus::Estimated          ||
                     invoiced.TransStatus == ProjTransStatus::Eliminated);
                // For performance, Only search for OnHold if some of the transaction has been invoice
                if (invoiced)
                {
                    select firstonly RecId from onHoldFunding where
                            onHoldFunding.TransId == this.TransId
                        join RecId from projFundingSource
                            where projFundingSource.RecId == onHoldFunding.FundingSource &&
                                projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;
                }

                select firstonly RecId from chargeable where
                        chargeable.TransId == this.TransId &&
                        (chargeable.TransStatus == ProjTransStatus::Registered ||
                         chargeable.TransStatus == ProjTransStatus::InvoiceProposal)
                    exists join projFundingSource where
                        projFundingSource.RecId == chargeable.FundingSource &&
                        (projFundingSource.FundingType == ProjFundingType::Customer ||
                         projFundingSource.FundingType == ProjFundingType::Grant);
            }

            if (invoiced)
            {
                projInvoiceStatus = chargeable ? ProjInvoiceStatus::PartiallyInvoiced : ProjInvoiceStatus::FullyInvoiced;
                if (projInvoiceStatus == projInvoiceStatus::FullyInvoiced && onHoldFunding)
                {
                    projInvoiceStatus = ProjInvoiceStatus::FullyInvoicedWithOnhold;
                }

                if (projInvoiceStatus == projInvoiceStatus::PartiallyInvoiced && onHoldFunding)
                {
                    projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoicedWithOnhold;
                }
            }
            else
            {
                projInvoiceStatus = chargeable ? ProjInvoiceStatus::Chargeable        : ProjInvoiceStatus::Nonchargeable;
            }

            if (projInvoiceStatus == ProjInvoiceStatus::Chargeable)
            {
                // The check against billing rules is delayed to this point as it is an expensive operation
                if (!ProjInvoiceTable::isBillingRuleInvoiceable(this.ProjId, this.CategoryId, this.psaContractLineNum, ProjTransType::Revenue))
                {
                    projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                }
            }
        }

        return projInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projRevenueTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProjRevenueTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjRevenueTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjRevenueTransTaxExtensionIN projRevenueTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjRevenueTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projRevenueTransView_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a view associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>ProjRevenueTransView_IN</c>.
    /// </returns>
    public ProjRevenueTransView_IN projRevenueTransView_IN()
    {
        ProjRevenueTransView_IN projRevenueTransView_IN;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projRevenueTransView_IN.initProjRevenueTrans(this);

            // If the view doesn't have a RecId then it will assume
            // this is an insert scenario when it isn't.  So we will
            // let the view borrow the RecId from the projRevenueTrans.  Since
            // no writes are done using this view this will work okay.
            projRevenueTransView_IN.RecId = this.RecId;
            return projRevenueTransView_IN;
        }

        return projRevenueTransView_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the project that the revenue on the transaction was reported against.
    /// </summary>
    /// <returns>
    ///    The project that the revenue on the transaction was reported against.
    /// </returns>
    public ProjTable projTable()
    {
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction is included in an invoice proposal.
    /// </summary>
    /// <returns>
    /// true if the transaction is included in an invoice proposal; otherwise, false.
    /// </returns>
    display ProjProposal proposal()
    {
        return ProjTrans::newProjRevenueTrans(this).proposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the invoice proposal in which the revenue transaction is included.
    /// </summary>
    /// <returns>
    ///    The ID of the invoice proposal in which the revenue transaction is included.
    /// </returns>
    display ProjProposalId proposalId()
    {
        ProjProposalRevenue    tprojProposalrevenue;
        ProjProposalId         propId;

        select tprojProposalrevenue where tprojProposalrevenue.TransId == this.TransId;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && tprojProposalrevenue)
        {
            propId = tprojProposalrevenue.ProposalId;
        }
        else
        {
            propId = ProjTrans::newProjRevenueTrans(this).proposalId();
        }

        return propId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales ledger amount for this revenue transaction.
    /// </summary>
    /// <param name="projRevenueTrans">
    ///    The revenue transaction for which to calculate the sales amount.
    /// </param>
    /// <param name="ledgerFromDate">
    ///    The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    The sales amount for the transaction.
    /// </returns>
    /// <remarks>
    ///    The sales ledger amount is the total revenue for the transaction including both invoiced and
    ///    accrued revenue as calculated by the <c>projstatement.A100_Total_Revenue</c> method.
    ///    The amount
    ///    returned is in the default currency.
    ///    Set <paramref name="ledgerFromDate" /> to the <c>dateNull</c>
    ///    method and <paramref name="ledgerToDate" /> to the <c>dateMax</c> method to include all postings
    ///    for this transaction.
    /// </remarks>
    SalesAmount salesAmount(
        ProjRevenueTrans    projRevenueTrans,
        TransDate           ledgerFromDate,
        TransDate           ledgerToDate
        )
    {
        return projStatement::newProjRevenueTrans(projRevenueTrans,ledgerFromDate,ledgerToDate).a100_Total_Revenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    display SalesPrice salesPrice()
    {
        AmountCur   transTurnover;
        ProjTrans   projTrans;

        transTurnover = this.transTurnover();
        projTrans = ProjTrans::newProjRevenueTrans(this);

        return CurrencyExchangeHelper::price(transTurnover / (projTrans.qty() ? projTrans.qty() : 1), projTrans.currencyIdSales());
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaValidateSubscription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>SMASubscription</c> table related fields in the transaction have valid
    ///    values.
    /// </summary>
    /// <returns>
    ///    true if the transaction is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method can be useful to revenue transactions whose origins are from the <c>SMASubscription</c>
    ///    table. It checks whether the project for this transaction is a time and material project, whether
    ///    the status of the project is in progress, and whether the category type of the transaction is
    ///    revenue. It raises a warning if one or more of these checks fail.
    /// </remarks>
    boolean smaValidateSubscription()
    {
        boolean ret = true;

        if (!this.smaSubscriptionId)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProjRevenueTrans, smaSubscriptionId)));
        }
        if (!this.smaSubscriptionPeriodType)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProjRevenueTrans, smaSubscriptionPeriodType)));
        }
        if (this.smaStartDate == dateNull())
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProjRevenueTrans, smaStartDate)));
        }
        if (this.smaEnddate == dateNull())
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProjRevenueTrans, smaEnddate)));
        }

        ret = SMASubscriptionTable::validateProjId(this.ProjId) && ret;
        ret = SMASubscriptionTable::validateCategoryId(this.CategoryId) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost for the transaction.
    /// </summary>
    /// <returns>
    /// The cost for the transaction.
    /// </returns>
    /// <remarks>
    /// The cost is calculated as quantity times the cost price. The cost returned is always zero because
    /// this is a revenue transaction and no cost is incurred.
    /// </remarks>
    display ProjCost transCost()
    {
        return ProjTrans::newProjRevenueTrans(this).transCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_transID">
    /// Transaction ID for turnover amount.
    /// </param>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    protected ProjTurnover getTurnover(ProjRevenueTransId _transID, boolean _isConsiderCredit = true)
    {
        ProjRevenueTransSale   projRevenueTransSale;
        ProjTrans           projTransSale;
        AmountCur           transTurnover;

        while select projRevenueTransSale
            where projRevenueTransSale.TransId == _transID &&
                (!projRevenueTransSale.wipPeriod || (projRevenueTransSale.wipPeriod && projRevenueTransSale.TransStatus != ProjTransStatus::Adjusted)) &&
                (_isConsiderCredit               || (!_isConsiderCredit && projRevenueTransSale.TransStatus != ProjTransStatus::MarkedCreditnote))
        {
            projTransSale = ProjTrans::newProjRevenueTransSale(this, projRevenueTransSale);
            transTurnover += CurrencyExchangeHelper::amount((projTransSale.qty() ? projTransSale.qty() : 1) * projTransSale.salesPrice(), projTransSale.currencyIdSales());
        }
        
        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display ProjTurnover transTurnover(boolean _isConsiderCredit = true)
    {
        return this.getTurnover(this.TransId, _isConsiderCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #isoCountryRegionCodes

        super();

        ProjPostedTransTable::updateFromRevenueTrans(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <param name="_checkVal">
    ///    Indicator to perform additional validation. Set to false to only perform validation check in the
    ///    parent method and skip the validation in this method; optional.
    /// </param>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method must be called before a record is written to the database. It is automatically called
    ///    from forms when the user tries to save the record. In addition to mandatory field validation
    ///    performed by the parent method, this method calls <c>ProjValCheckTrans.ValidateMandatory</c> to
    ///    perform additional validations based on project parameter settings. It also calls
    ///    <c>ProjRevenueTrans.smaValidateSubscription</c> to validate <c>SMASubscription</c> related fields
    ///    if appropriate.
    /// </remarks>
    public boolean validateWrite(boolean _checkVal  = true)
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean             ret;

        ret = super();

        if (ret & _checkVal)
        {
            ret  = projValCheckTrans.validateMandatory(this);
        }

        if (this.TransactionOrigin == ProjOrigin::Subscription)
        {
            ret = (this.smaValidateSubscription() & ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a transaction exists.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID associated with the transaction.
    /// </param>
    /// <returns>
    ///    true if a transaction associated with the given Project ID exists; otherwise, false.
    /// </returns>
    static boolean exist(ProjId _projId)
    {
        if (_projId)
        {
            return (select projRevenueTrans where projRevenueTrans.ProjId  == _projId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the transaction with the given transaction ID.
    /// </summary>
    /// <param name="_transId">
    ///    The transaction ID of the transaction.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the transaction should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The desired transaction.
    /// </returns>
    /// <remarks>
    ///    Returns null if the transaction does not exist.
    /// </remarks>
    public static ProjRevenueTrans find(InventTransId _transId, boolean _forUpdate = false)
    {
        ProjRevenueTrans projRevenueTrans = null;

        projRevenueTrans.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select projRevenueTrans where projRevenueTrans.TransId == _transId;
        }

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a revenue transaction and initializes it from revenue recorded in an estimate.
    /// </summary>
    /// <param name="_projControlPeriodTrans">
    ///    The estimate from which to initialize the transaction.
    /// </param>
    /// <returns>
    ///    The new transaction.
    /// </returns>
    public static ProjRevenueTrans initTransFromEstimate(ProjControlPeriodTrans  _projControlPeriodTrans)
    {
        ProjRevenueTrans    projRevenueTrans;
        ProjPeriodTo        periodTo    = ProjPeriodLine::find(_projControlPeriodTrans.periodTable().PeriodId, _projControlPeriodTrans.PeriodFrom).PeriodTo;

        projRevenueTrans.TransId            = ProjParameters::newTransId();
        projRevenueTrans.TransIdRef         = projRevenueTrans.TransId;

        projRevenueTrans.ProjId             = ProjWIPTable::getProjIdForRevenuePosting(_projControlPeriodTrans.ProjId);
        projRevenueTrans.TransDate          = periodTo;

        projRevenueTrans.Txt                = strFmt("@SYS53184", _projControlPeriodTrans.PeriodFrom, periodTo);

        projRevenueTrans.CurrencyId         = Ledger::accountingCurrency(CompanyInfo::current());
        projRevenueTrans.DefaultDimension   = _projControlPeriodTrans.projTable().DefaultDimension;

        // PSA Contract line should be null if the revenue trans is being created from estimate.
        projRevenueTrans.PSAContractLineNum = '';

        // The tax group should be assigned from project if the tax group is included in the project ledger posting setup.
        projRevenueTrans.TaxGroupId = ProjTable::find(_projControlPeriodTrans.ProjId).TaxGroupId;

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a revenue transaction and initializes it from revenue recorded in a journal entry.
    /// </summary>
    /// <param name="_projJournalTrans">
    ///    The journal entry from which to initialize the transaction.
    /// </param>
    /// <returns>
    ///    The new transaction.
    /// </returns>
    public static ProjRevenueTrans initTransFromJournal(ProjJournalTrans  _projJournalTrans)
    {
        ProjRevenueTrans                projRevenueTrans;
        ProjRevenueTransTaxExtensionIN  projRevenueTransTaxExtensionIN;
        ProjJournalTransTaxExtensionIN  projJournalTransTaxExtensionIN;

        projRevenueTrans.TransId = _projJournalTrans.TransId;
        projRevenueTrans.TransIdRef = _projJournalTrans.TransId;

        projRevenueTrans.CategoryId = _projJournalTrans.CategoryId;
        projRevenueTrans.CurrencyId = _projJournalTrans.CurrencyId;
        projRevenueTrans.ActivityNumber = _projJournalTrans.ActivityNumber;
        projRevenueTrans.DefaultDimension = _projJournalTrans.DefaultDimension;
        projRevenueTrans.ProjId = _projJournalTrans.ProjId;
        projRevenueTrans.Txt = _projJournalTrans.Txt;
        projRevenueTrans.TransDate = _projJournalTrans.ProjTransDate;
        projRevenueTrans.TaxGroupId = _projJournalTrans.TaxGroupId;
        projRevenueTrans.TaxItemGroupId = _projJournalTrans.TaxItemGroupId;
        projRevenueTrans.LinePropertyId = _projJournalTrans.LinePropertyId;
        projRevenueTrans.Resource = _projJournalTrans.Resource;
        projRevenueTrans.ResourceCategory = _projJournalTrans.ResourceCategory;
        projRevenueTrans.Qty = _projJournalTrans.Qty;
        projRevenueTrans.psaProjOrigTransId = _projJournalTrans.psaProjOrigTransId;
	    
        ProjRevenueTrans::populatePSAContractLineNum(projRevenueTrans);
        
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projJournalTransTaxExtensionIN = ProjJournalTransTaxExtensionIN::findByProjJournalTrans(_projJournalTrans.RecId);

            projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency   = projJournalTransTaxExtensionIN.AssessableValueTransactionCurrency;
            projRevenueTransTaxExtensionIN.MaximumRetailPrice                   = projJournalTransTaxExtensionIN.MaximumRetailPrice;
            projRevenueTransTaxExtensionIN.ServiceEventGroup                    = projJournalTransTaxExtensionIN.ServiceEventGroup;
        }

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            projRevenueTransTaxExtensionIN.tcsGroup = projJournalTransTaxExtensionIN.tcsGroup;
            projRevenueTransTaxExtensionIN.tdsGroup = projJournalTransTaxExtensionIN.tdsGroup;
        }
        // </GIN>
        projRevenueTrans.packProjRevenueTrans_IN(projRevenueTransTaxExtensionIN);

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromSubscription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a revenue transaction and initializes it from a <c>SMASubscription</c> table.
    /// </summary>
    /// <param name="_smaSubscriptionTable">
    ///    The <c>SMASubscription</c> table from which to initialize the transaction.
    /// </param>
    /// <returns>
    ///    The new transaction.
    /// </returns>
    public static ProjRevenueTrans initTransFromSubscription(SMASubscriptionTable _smaSubscriptionTable)
    {
        ProjRevenueTrans        projRevenueTrans;

        if (!_smaSubscriptionTable)
        {
            throw error("@SYS84379");
        }

        projRevenueTrans.TransId                    = ProjParameters::newTransId();
        projRevenueTrans.TransIdRef                 = projRevenueTrans.TransId;

        projRevenueTrans.ProjId                     = _smaSubscriptionTable.ProjId;
        projRevenueTrans.CategoryId                 = _smaSubscriptionTable.ProjCategoryId;
        projRevenueTrans.DefaultDimension           = ProjTable::find(_smaSubscriptionTable.ProjId).DefaultDimension;
        projRevenueTrans.CurrencyId                 = _smaSubscriptionTable.CurrencyCode;
        projRevenueTrans.TaxItemGroupId             = ProjCategory::find(_smaSubscriptionTable.ProjCategoryId).TaxItemGroupId;
        projRevenueTrans.TaxGroupId                 = ProjParameters::taxGroupInvoice(_smaSubscriptionTable.ProjId);
        projRevenueTrans.smaSubscriptionId          = _smaSubscriptionTable.SubscriptionId;
        projRevenueTrans.smaBasePrice               = _smaSubscriptionTable.BasePrice;
        projRevenueTrans.smaIndex                   = _smaSubscriptionTable.SubscriptionIndex;
        projRevenueTrans.LinePropertyId             = ProjLinePropertySetup::findLinePropertyId(_smaSubscriptionTable.ProjId, _smaSubscriptionTable.ProjCategoryId);

        projRevenueTrans.TransactionOrigin          = ProjOrigin::Subscription;

        ProjRevenueTrans::populatePSAContractLineNum(projRevenueTrans);

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAContractLineNum</Name>
				<Source><![CDATA[
    private static void populatePSAContractLineNum(ProjRevenueTrans _projRevenueTrans)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ProjInvoiceProjId contractId = ProjTable::find(_projRevenueTrans.ProjId).ProjInvoiceProjId;
            if (contractId)
            {
                _projRevenueTrans.PSAContractLineNum = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineNumForTransType(_projRevenueTrans.ProjId, contractId, ProjTransType::Revenue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTransId</Name>
				<Source><![CDATA[
    static void jumpRefTransId(
        Common  common,
        Object  object,
        str     parm = '')
    {
        Args args = new Args();
        args.record(common);
        args.caller(object);
        args.parm(parm);

        new MenuFunction(menuitemDisplayStr(ProjTransRevenue), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAmountDisplayCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sales amounts for multiple transactions and returns a map of the transaction IDs to
    ///    sales amounts in a container.
    /// </summary>
    /// <param name="_conProjRevenueTrans">
    ///    A packed set of transaction IDs.
    /// </param>
    /// <param name="_conProjRevenueTransSalesAmount">
    ///    A packed map of String to Real. It can be empty or can already contain elements.
    /// </param>
    /// <param name="_ledgerFromDate">
    ///    The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="_ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    A packed map (container) of transaction IDs to sales amounts.
    /// </returns>
    /// <remarks>
    ///    The <c>ProjRevenueTrans</c> table is used to calculate the amounts.
    ///    If _<paramref
    ///    name="conProjRevenueTrans" /> contains transaction IDs that are already in _<paramref
    ///    name="conProjRevenueTransSalesAmount" />, the sales amount will be recalculated and updated in the
    ///    map.
    ///    Set _<paramref name="ledgerFromDate" /> to the <c>dateNull</c> method and _<paramref
    ///    name="ledgerToDate" /> to the <c>dateMax</c> method to include all postings for the transactions in
    ///    the sales calculation.
    /// </remarks>
    static container sumAmountDisplayCache(
        container   _conProjRevenueTrans,
        container   _conProjRevenueTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjRevenueTrans    projRevenueTrans;
        Set                 setProjRevenueTrans;
        Map                 mapProjRevenueTransSalesAmount;
        SetIterator         si;

        if (_conProjRevenueTrans)
        {
            setProjRevenueTrans = Set::create(_conProjRevenueTrans);
        }

        if (_conProjRevenueTransSalesAmount)
        {
            mapProjRevenueTransSalesAmount = Map::create(_conProjRevenueTransSalesAmount);
        }

        si = new SetIterator(setProjRevenueTrans);
        si.begin();
        while (si.more())
        {
            projRevenueTrans = ProjRevenueTrans::find(si.value());
            mapProjRevenueTransSalesAmount.insert(si.value(), projRevenueTrans.salesAmount(projRevenueTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapProjRevenueTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxEngineProjRevenueTransHeader</c> object.
    /// </summary>
    /// <returns>
    /// The <c>TaxEngineProjRevenueTransHeader</c> object.
    /// </returns>
    public TaxEngineProjRevenueTransHeader salesPurchJournalTable()
    {
        ProjProposalJour    projProposalJour;
        ProjProposalRevenue projProposalRevenue;

        select firstOnly RecId from projProposalJour
            join RecId from projProposalRevenue
                where projProposalRevenue.ProposalId == projProposalJour.ProposalId
                    && projProposalRevenue.TransId == this.TransId;

        return TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjRevenueTransTaxExtForProjOps_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits <c>ProjAdvancedJournalLineTaxExtensionIN</c> record when project operations integration feature enabled for India.
    /// </summary>
    /// <param name = "_SDLRecId">The recId of <c>SourceDocumentLine</c> table.</param>
    /// <param name = "_projRevenueTrans">The buffer of <c>_projRevenueTrans</c> table.</param>
    /// <returns>A record of <c>ProjRevenueTransTaxExtensionIN</c> table.</returns>
    public ProjRevenueTransTaxExtensionIN initProjRevenueTransTaxExtForProjOps_IN(SourceDocumentLineRefRecId _SDLRecId, ProjRevenueTrans _projRevenueTrans)
    {
        ProjRevenueTransTaxExtensionIN projRevenueTransTaxExtensionIN;

        if (_SDLRecId
            && _projRevenueTrans
            && TaxGSTProjAdvancedJournalUtils::isTaxEnabledForProjOps_IN())
        {
            ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(_SDLRecId);

            if (projAdvancedJournalLine)
            {
                ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtIN = projAdvancedJournalLine.projAdvancedJournalLineTaxExtensionIN();

                if (projAdvancedJournalLineTaxExtIN)
                {
                    ProjRevenueTrans projRevenueTrans = _projRevenueTrans;
                    projRevenueTransTaxExtensionIN = projRevenueTrans.projRevenueTransTaxExtensionIN();
                    projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency = projAdvancedJournalLineTaxExtIN.ProjectSalesAssessableValueTransactionCurrency;

                    if (TaxWithholdParameters_IN::checkTaxParameters())
                    {
                        projRevenueTransTaxExtensionIN.TCSGroup = projAdvancedJournalLineTaxExtIN.TCSGroup;
                        projRevenueTransTaxExtensionIN.TDSGroup = projAdvancedJournalLineTaxExtIN.TDSGroup;
                    }

                    projRevenueTrans.packProjRevenueTrans_IN(projRevenueTransTaxExtensionIN);
                    projRevenueTransTaxExtensionIN.write();

                    if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                    {
                        TransTaxInformationHelper::copyTransTaxInformation(projAdvancedJournalLineTaxExtIN, projRevenueTrans);
                    }
                }
            }
        }

        return projRevenueTransTaxExtensionIN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124963</DeveloperDocumentation>
	<FormRef>ProjTransRevenue</FormRef>
	<Label>@SYS9154</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TransIdx</PrimaryIndex>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>proposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS26398</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRetained</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReleased</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ledgerSalesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subscription</Name>
			<Label>@SYS14482</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SMASubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMASubscriptionPeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMAStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMAEnddate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMABasePrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMAIndex</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRevenueTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRevenueTransId</ExtendedDataType>
			<Label>@SYS115827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCorrection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerCorrection</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReleased</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA2816</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRetained</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA2816</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjOrigTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjOrigTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQtyRevenue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SMABasePrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMABasePrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SMAEnddate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAEnddate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SMAIndex</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAIndex</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SMAStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SMASubscriptionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASubscriptionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SMASubscriptionPeriodType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMASubscriptionPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalSalesAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionOrigin</ExtendedDataType>
			<EnumType>ProjOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransIdRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRevenueTransId</ExtendedDataType>
			<Label>@SYS71999</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherJournal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionVoucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SMASubscriptionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SMASubscriptionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdjRefTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjRefTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdRef</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionOrigin</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VoucherJournal</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjProposalTransMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PSAProjTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsReleased</MapField>
					<MapFieldTo>IsReleased</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsRetained</MapField>
					<MapFieldTo>IsRetained</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePropertyId</MapField>
					<MapFieldTo>LinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroupId</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroupId</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionOrigin</MapField>
					<MapFieldTo>TransactionOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjRevenueTrans_AdjRefTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjRevenueTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjRevenueTrans_AdjRefTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdjRefTransId</Name>
					<SourceEDT>ProjRevenueTransId</SourceEDT>
					<Field>AdjRefTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjRevenueTrans_TransIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjRevenueTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjRevenueTrans_TransIdRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransIdRef</Name>
					<SourceEDT>ProjRevenueTransId</SourceEDT>
					<Field>TransIdRef</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<SourceEDT>PSAContractLineNum</SourceEDT>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMASubscriptionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SMASubscriptionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SMASubscriptionTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SMASubscriptionId</Name>
					<SourceEDT>SMASubscriptionId</SourceEDT>
					<Field>SMASubscriptionId</Field>
					<RelatedField>SubscriptionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SubscriptionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>