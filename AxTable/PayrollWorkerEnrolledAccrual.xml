<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerEnrolledAccrual</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkerEnrolledAccrual extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayTotalAccruedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total hours accrued sum against a specific RecId of <c>PayrolLWorkerEnrolledAccrual</c> table and date range.
    /// </summary>
    /// <returns>
    /// Sum of accrued hours.
    /// </returns>
    display PayrollAccrualTotalAccruedHours displayTotalAccruedHours()
    {
        return PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(this.RecId,
                                                                                    this.AccrualYearStartDate,
                                                                                    this.getAccrualYearEndDate()).Accrued;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalAvailableHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total hours available sum against a specific RecId of <c>PayrolLWorkerEnrolledAccrual</c> table and date range.
    /// </summary>
    /// <returns>
    /// Sum of available hours.
    /// </returns>
    display PayrollAccrualTotalAvailableHours displayTotalAvailableHours()
    {
        return PayrollAccrualTransactionsView::getWorkerEnrolledAccrualAvailableBalance(this.RecId,
                                                                                            this.AccrualYearStartDate,
                                                                                            this.getAccrualYearEndDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalCarriedOverHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total carried over hours sum against a specific RecId of <c>PayrolLWorkerEnrolledAccrual</c> table and date range.
    /// </summary>
    /// <returns>
    /// Sum of carried over hours.
    /// </returns>
    display PayrollAccrualCarriedOverHours displayTotalCarriedOverHours()
    {
        return PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(this.RecId,
                                                                                    this.AccrualYearStartDate,
                                                                                    this.getAccrualYearEndDate()).CarryOver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalPendingUsageHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total pending usage hours sum against a specific RecId of <c>PayrolLWorkerEnrolledAccrual</c> table and date range.
    /// </summary>
    /// <returns>
    /// Sum of pending usage hours.
    /// </returns>
    display PayrollAccrualUsedHours displayTotalPendingUsageHours()
    {
        return PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(this.RecId,
                                                                                    this.AccrualYearStartDate,
                                                                                    this.getAccrualYearEndDate()).PendingUsage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalUsedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total used hours sum against a specific RecId of <c>PayrolLWorkerEnrolledAccrual</c> table and date range.
    /// </summary>
    /// <returns>
    /// Sum of used hours.
    /// </returns>
    display PayrollAccrualTotalUsedHours displayTotalUsedHours()
    {
        return PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(this.RecId,
                                                                                    this.AccrualYearStartDate,
                                                                                    this.getAccrualYearEndDate()).Used;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccrualDateBasisDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date that is used to determine months of employment for rule selection in a benefit accrual plan.
    /// </summary>
    /// <param name="_hcmWorkerRecId">
    /// The <c>HcmWorker</c> table buffer.
    /// </param>
    /// <param name="_transDate">
    /// The specified date.
    /// </param>
    /// <returns>
    /// The date that is used to determine months of employment for rule selection in a benefit accrual plan.
    /// </returns>
    public TransDate getAccrualDateBasisDate(HcmWorkerRecId _hcmWorkerRecId, TransDate _transDate)
    {
        TransDate               accrualDateBasisDate;

        switch (this.AccrualDateBasis)
        {
            case PayrollAccrualDateBasis::SeniorityDate:

                //
                // If the current selection for the <c>AccrualDateBasis</c> field of the <c>PayrollWorkerEnrolledAccrual</c> table is Seniority date,
                // get the worker's seniority date.
                //

                accrualDateBasisDate = this.getWorkerSeniorityDate(_hcmWorkerRecId, _transDate);
                break;

            case PayrollAccrualDateBasis::EmploymentStartDate:

                //
                // If the current selection for the <c>AccrualDateBasis</c> field of the <c>PayrollWorkerEnrolledAccrual</c> table is Employment start date,
                // get the worker's employment start date.
                //

                accrualDateBasisDate = this.getEmploymentStartDate(_hcmWorkerRecId, _transDate);
                break;

            case PayrollAccrualDateBasis::CustomDate:
                accrualDateBasisDate = this.CustomAccuralDate;
                break;
        }

        return accrualDateBasisDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccrualYearEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the end date of the plan year.
    /// </summary>
    /// <returns>
    /// A Date.
    /// </returns>
    public date getAccrualYearEndDate()
    {
        return this.AccrualYearStartDate != dateNull() ? nextYr(this.AccrualYearStartDate) - 1 : dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmploymentStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the worker's employment start date as of the specified date.
    /// </summary>
    /// <param name="_hcmWorkerRecId">
    /// The <c>HcmWorker</c> table buffer.
    /// </param>
    /// <param name="_transDate">
    /// The specified date.
    /// </param>
    /// <returns>
    /// The employment start date of the worker.
    /// </returns>
    public TransDate getEmploymentStartDate(HcmWorkerRecId _hcmWorkerRecId, TransDate _transDate)
    {
        HcmEmployment           hcmEmployment;

        utcdatetime             asOfDateTime;

        asOfDateTime = DateTimeUtil::newDateTime(_transDate, DateTimeUtil::getCompanyTimeZone());

        hcmEmployment = HcmEmployment::findByWorkerLegalEntity(_hcmWorkerRecId, CompanyInfo::current(), asOfDateTime, asOfDateTime);

        return HcmDateTimeUtil::convertToCompanyDate(hcmEmployment.ValidFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerSeniorityDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the worker's seniority date as of the specified date.
    /// </summary>
    /// <param name="_hcmWorkerRecId">
    /// The <c>HcmWorker</c> table buffer.
    /// </param>
    /// <param name="_date">
    /// The specified date.
    /// </param>
    /// <returns>
    /// The seniority date of the worker.
    /// </returns>
    public TransDate getWorkerSeniorityDate(HcmWorkerRecId _hcmWorkerRecId, TransDate _date)
    {
        HcmWorkerTitle          hcmWorkerTitle;
        HcmWorker               hcmWorkerForSeniorityDate;

        utcdatetime             asOfDateTime;

        asOfDateTime = datetoendUtcDateTime(_date, DateTimeUtil::getCompanyTimeZone());

        select firstonly validTimeState(asOfDateTime) SeniorityDate, Worker from hcmWorkerTitle
        join RecId from hcmWorkerForSeniorityDate
            where hcmWorkerForSeniorityDate.RecId == hcmWorkerTitle.Worker
                && hcmWorkerForSeniorityDate.RecId == _hcmWorkerRecId;

        return HcmDateTimeUtil::convertToCompanyDate(hcmWorkerTitle.SeniorityDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.AccrualDateBasis = PayrollParameters::find().AccrualDateBasis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>PayrollWorkerPositionEarningCode</c> field modifications.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the table field which is modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PayrollWorkerEnrolledAccrual, Accrual):

                this.AccrualYearStartDate = PayrollWorkerEnrolledAccrual::setAccrualYearStartDate(this.Accrual);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        PayrollWorkerAccrualAdjustment  payrollWorkerAccrualAdjustment;
        PayrollAccrualYearStartDate     accrualYearStartDate;

        boolean                         checkForCarryForwardBalance = false;

        if (!this.orig().IsUsageStopped && this.IsUsageStopped)
        {
            //
            // IsUsageStopped is checked; inform the user that any pending usage previously released but not pay statement not submitted
            // will not have any impact on the pay statement, so no balance reduction at pay statement submittal time and no usage amount or impact appearing on the pay statement.
            //
            info("@SYS4090099");
        }

        if (this.orig().IsUsageStopped && !this.IsUsageStopped)
        {
            //
            // IsUsageStopped is unchecked; inform the user that any usage in a released but not yet included in a submitted pay statement state
            // will now be included in their pay statement, and the available balance will reflect that usage subtraction.
            //
            info("@SYS4090100");
        }

        if ((this.orig().IsAccrualStopped && this.orig().IsUsageStopped) && (!this.IsAccrualStopped || !this.IsUsageStopped))
        {
            // The plan enrollment is going to be activated as either IsAccrualStopped is unchecked or IsUsageStopped is unchecked; update the AccrualYearStartDate if it is required.
            accrualYearStartDate = PayrollWorkerEnrolledAccrual::setAccrualYearStartDate(this.Accrual);

            if (this.AccrualYearStartDate != accrualYearStartDate)
            {
                this.AccrualYearStartDate = accrualYearStartDate;
            }
            // The enrolled accrual is being activated a carry forward balance record for the accrual period must be verified.
            checkForCarryForwardBalance = true;
        }

        super();

        if (checkForCarryForwardBalance && !PayrollWorkerAccrualAdjustment::doesCarryForwardBalanceTransExist(this.RecId))
        {
            //
            // The plan enrollment is going to be activated as either IsAccrualStopped is unchecked or IsUsageStopped is unchecked;
            // If the plan year's initial carry-forward balance transaction record does not exist of the current year; create it with no carry-forward amount.
            //
            payrollWorkerAccrualAdjustment.TransactionDate = this.AccrualYearStartDate;
            payrollWorkerAccrualAdjustment.AdjustedHours = 0;
            payrollWorkerAccrualAdjustment.AdjustmentType = PayrollAccrualAdjustmentType::CarryForwardBalance;
            payrollWorkerAccrualAdjustment.Description = "@Payroll:InitialCarryForwardBalance";
            payrollWorkerAccrualAdjustment.WorkerEnrolledAccrual = this.RecId;
            payrollWorkerAccrualAdjustment.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccrualDateBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the accrual date basis is selected correctly. If it is not selected correctly, displays a warning message.
    /// </summary>
    public void validateAccrualDateBasis()
    {
        boolean                 isPlanActivated;
        boolean                 isDateBasisNotChanged;
        boolean                 isSeniorityDateSelected;
        boolean                 isEmploymentStartDateSelected;
        boolean                 isCustomDateSelected;
        boolean                 isPlanSettingNotChanged;

        isPlanSettingNotChanged         = this.IsAccrualStopped == this.orig().IsAccrualStopped && this.IsUsageStopped == this.orig().IsUsageStopped;
        isDateBasisNotChanged           = this.AccrualDateBasis == this.orig().AccrualDateBasis;
        isSeniorityDateSelected         = this.AccrualDateBasis == PayrollAccrualDateBasis::SeniorityDate;
        isCustomDateSelected            = this.AccrualDateBasis == PayrollAccrualDateBasis::CustomDate ;
        isEmploymentStartDateSelected   = this.AccrualDateBasis == PayrollAccrualDateBasis::EmploymentStartDate;
        isPlanActivated                 = (this.orig().IsAccrualStopped && this.orig().IsUsageStopped) && (!this.IsAccrualStopped || !this.IsUsageStopped);

        if (((isSeniorityDateSelected || isEmploymentStartDateSelected || isCustomDateSelected) && isPlanSettingNotChanged && this.RecId == 0)
                || (isDateBasisNotChanged && !isPlanSettingNotChanged && !this.IsAccrualStopped)
                || (!isDateBasisNotChanged && isPlanSettingNotChanged)
                || (!isDateBasisNotChanged && !isPlanSettingNotChanged && !this.IsAccrualStopped)
                || (!isDateBasisNotChanged))
        {
            if (this.getAccrualDateBasisDate(this.Worker, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) == dateNull())
            {
                warning("@Payroll:NoDateHasBeenEnteredForTheServiceDateBasisThatYouSelectedFor");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanDeleteWorkerEnrolledAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>PayrollPayStatementAccrualBalance</c> table record exist or not.
    /// </summary>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    private boolean validateCanDeleteWorkerEnrolledAccrual()
    {
        PayrollPayStatementAccrualBalance   payrollPayStatementAccrualBalance;
        PayrollPayStatement                 payrollPayStatement;

        select firstonly RecId, PayStatement from payrollPayStatementAccrualBalance
            where payrollPayStatementAccrualBalance.Accrual == this.Accrual
        join RecId, Worker from payrollPayStatement
            where payrollPayStatement.RecId == payrollPayStatementAccrualBalance.PayStatement &&
                  payrollPayStatement.Worker == this.Worker;

        return payrollPayStatementAccrualBalance.RecId == 0 ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.validateCanDeleteWorkerEnrolledAccrual())
        {
            ret = checkFailed(strFmt("@SYS128564", "@Payroll:WorkerEnrolledBenefitAccrual", "@Payroll:WorkerBenefitAccrualAdjustment"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            this.validateAccrualDateBasis();
        }

        if (ret && this.AccrualDateBasis == PayrollAccrualDateBasis::CustomDate && this.CustomAccuralDate == dateNull())
        {
            ret = checkFailed("@Payroll:ADateIsRequiredInTheWorkerSpecificDateColumnBecauseTheServic");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollWorkerEnrolledAccrual</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollWorkerEnrolledAccrualRecId _recId)
    {
        boolean ret = true;

        if (!PayrollWorkerEnrolledAccrual::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollWorkerEnrolledAccrual::txtNotExist(), tableId2name(tableNum(PayrollWorkerEnrolledAccrual))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesActiveWorkerEnrollmentExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any of the benefit accrual enrollments is active for the specified worker.
    /// </summary>
    /// <param name="_worker">
    /// The value of the <c>Worker</c> field to find.
    /// </param>
    /// <returns>
    /// true if an active worker enrollment is found; otherwise, false.
    /// </returns>
    public static boolean doesActiveWorkerEnrollmentExist(HcmWorkerRecId  _worker)
    {
        PayrollWorkerEnrolledAccrual payrollWorkerEnrolledAccrual;

        select firstonly RecId from payrollWorkerEnrolledAccrual
            where payrollWorkerEnrolledAccrual.Worker == _worker
                && (payrollWorkerEnrolledAccrual.IsAccrualStopped == NoYes::No
                    || payrollWorkerEnrolledAccrual.IsUsageStopped == NoYes::No);

        return payrollWorkerEnrolledAccrual.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesWorkerEnrollmentExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record in the <c>PayrollWorkerEnrolledAccrual</c> table exists for the specified worker.
    /// </summary>
    /// <param name="_worker">
    /// The value of the <c>Worker</c> field to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean doesWorkerEnrollmentExist(HcmWorkerRecId  _worker)
    {
        PayrollWorkerEnrolledAccrual payrollWorkerEnrolledAccrual;

        select firstonly RecId from payrollWorkerEnrolledAccrual
            where payrollWorkerEnrolledAccrual.Worker == _worker;

        return payrollWorkerEnrolledAccrual.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollWorkerEnrolledAccrual</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollWorkerEnrolledAccrualRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollWorkerEnrolledAccrual
                    where payrollWorkerEnrolledAccrual.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollWorkerEnrolledAccrual</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollWorkerEnrolledAccrual</c> table.
    /// </returns>
    public static PayrollWorkerEnrolledAccrual find(
    PayrollWorkerEnrolledAccrualRecId       _recId,
    boolean                                 _forUpdate          = false,
    ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollWorkerEnrolledAccrual payrollWorkerEnrolledAccrual;

        payrollWorkerEnrolledAccrual.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkerEnrolledAccrual.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkerEnrolledAccrual
             where payrollWorkerEnrolledAccrual.RecId == _recId;

        return payrollWorkerEnrolledAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccrualWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollWorkerEnrolledAccrual</c> table based on supplied values of the <c>Accrual</c> and <c>Worker</c> fields.
    /// </summary>
    /// <param name="_accrual">
    /// The value of the <c>_accrual</c> field to find.
    /// </param>
    /// <param name="_worker">
    /// The value of the <c>Worker</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollWorkerEnrolledAccrual</c> table.
    /// </returns>
    public static PayrollWorkerEnrolledAccrual findByAccrualWorker(
    PayrollAccrualRecId     _accrual,
    HcmWorkerRecId          _worker,
    boolean                 _forUpdate          = false,
    ConcurrencyModel        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollWorkerEnrolledAccrual payrollWorkerEnrolledAccrual;

        payrollWorkerEnrolledAccrual.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkerEnrolledAccrual.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkerEnrolledAccrual
            where payrollWorkerEnrolledAccrual.Accrual == _accrual &&
                    payrollWorkerEnrolledAccrual.Worker == _worker;

        return payrollWorkerEnrolledAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccrualYearStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the plan year starting date.
    /// </summary>
    /// <param name="_payrollAccrualRecId">
    /// The RecId of the <c>PayrollAccrual</c> table field to find.
    /// </param>
    /// <returns>
    /// The AccrualYearStartDate value.
    /// </returns>
    public static PayrollAccrualYearStartDate setAccrualYearStartDate(PayrollAccrualRecId _payrollAccrualRecId)
    {
        PayrollAccrual              payrollAccrual;
        PayrollAccrualYearStartDate accrualYearStartDate;
        date                        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime                 startingDateTime;
        int                         startingDateMonth, startingDateDay, startingDateYear;
        int                         currentDateMonth, currentDateDay, currentDateYear;

        payrollAccrual = PayrollAccrual::find(_payrollAccrualRecId);

        if ((payrollAccrual.RecId) && (payrollAccrual.StartingDate))
        {
            if (payrollAccrual.StartingDate <= currentDate)
            {
                startingDateTime =  DateTimeUtil::newDateTime(payrollAccrual.StartingDate, 0);
                startingDateMonth = DateTimeUtil::month(startingDateTime);
                startingDateDay = DateTimeUtil::day(startingDateTime);
                startingDateYear = DateTimeUtil::year(startingDateTime);

                currentDateMonth = DateTimeUtil::month(DateTimeUtil::utcNow());
                currentDateDay = DateTimeUtil::day(DateTimeUtil::utcNow());
                currentDateYear = DateTimeUtil::year(DateTimeUtil::utcNow());

                if (payrollAccrual.StartingDate <= mkDate(currentDateDay, currentDateMonth, startingDateYear))
                {
                    accrualYearStartDate = mkDate(startingDateDay, startingDateMonth, currentDateYear);
                }
                else if (payrollAccrual.StartingDate > mkDate(DateTimeUtil::day(DateTimeUtil::utcNow()), DateTimeUtil::month(DateTimeUtil::utcNow()), DateTimeUtil::year(startingDateTime)))
                {
                    accrualYearStartDate = mkDate(startingDateDay, startingDateMonth, currentDateYear -1);
                }
            }
            else
            {
                // startingDate is greater than current date
                accrualYearStartDate = payrollAccrual.StartingDate;
            }
        }

        return accrualYearStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkerenrolledaccrualTableStoresTheInformationRela</DeveloperDocumentation>
	<Label>@Payroll:WorkerEnrolledBenefitAccrual</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Accrual</TitleField1>
	<TitleField2>Worker</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PayrollWorkerEnrolledAccrualIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualYearStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAccrualStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsUsageStopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualYearStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTotalCarriedOverHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTotalAccruedHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTotalUsedHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTotalPendingUsageHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTotalAvailableHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualDateBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAccrualStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsUsageStopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualYearStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAccrualStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsUsageStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualDateBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomAccuralDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Accrual</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccrualDateBasis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:ServiceDateBasis</Label>
			<EnumType>PayrollAccrualDateBasis</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccrualYearStartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualYearStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAccrualStopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Payroll:StopAccrual</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsUsageStopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4090101</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CustomAccuralDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Payroll:WorkerSpecificDate</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PayrollWorkerEnrolledAccrualIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Accrual</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HCMWorker</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>PayrollWorkerEntitlementPlan</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollAccrual</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Accrual</Name>
					<Field>Accrual</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>