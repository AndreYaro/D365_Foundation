<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPricingPropertyDefinition extends common
{
    /// <summary>
    /// Maximum number of properties. 10 header properties and 10 line properties. Mandatory included.
    /// </summary>
    #define.MaxPricingPropertyNumber(10)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>propertyName</Name>
				<Source><![CDATA[
    public display Name propertyName()
    {
        switch (this.PropertyType)
        {
            case RetailPricingPropertyType::Predefined:
                return enum2Str(this.PredefinedProperty);
            case RetailPricingPropertyType::EcoResAttribute:
                EcoResAttribute attribute = EcoResAttribute::find(this.EcoResAttributeRecId);
                return attribute.Name;
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.validateDuplicate();
        this.validateNumberLimit();
        this.validatePredefined();
        this.validateAttribute();

        this.Sequence = RetailPricingPropertyDefinition::nextSequence(this.PropertyLevel, this.Status);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if we're adding more than 10 pricing properties
    /// </summary>
    private void validateNumberLimit()
    {
        RetailPricingPropertyDefinition existingDefinition;

        select count(RecId) from existingDefinition
            where existingDefinition.PropertyLevel == this.PropertyLevel && existingDefinition.Status == this.Status;

        if (existingDefinition.RecId >= #MaxPricingPropertyNumber)
        {
            throw error(strFmt("@RetailPricing:ValidateExceedPricingPropertyNumberLimit", #MaxPricingPropertyNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicate</Name>
				<Source><![CDATA[
    private void validateDuplicate()
    {
        RetailPricingPropertyDefinition duplicate;

        switch (this.PropertyType)
        {
            case RetailPricingPropertyType::Predefined:
                select firstonly duplicate where duplicate.PredefinedProperty == this.PredefinedProperty
                    && duplicate.Status == this.Status && duplicate.IsPendingDeletion == this.IsPendingDeletion;
                break;
            case RetailPricingPropertyType::EcoResAttribute:
                select firstonly duplicate where duplicate.PropertySource == this.PropertySource
                    && duplicate.EcoResAttributeRecId == this.EcoResAttributeRecId
                    && duplicate.Status == this.Status && duplicate.IsPendingDeletion == this.IsPendingDeletion;
                break;
            default:
                break;
        }

        if (duplicate.RecId)
        {
            throw error(strFmt("@Retail:EntityDuplicateRecord", tableId2PName(tableNum(RetailPricingPropertyDefinition))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePredefined</Name>
				<Source><![CDATA[
    private void validatePredefined()
    {
        if (this.PropertyType == RetailPricingPropertyType::Predefined && this.PredefinedProperty == RetailPricingPredefinedProperty::None)
        {
            throw error(strFmt("@SYS78966", fieldPname(RetailPricingPropertyDefinition, PredefinedProperty)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttribute</Name>
				<Source><![CDATA[
    private void validateAttribute()
    {
        if (this.PropertyType == RetailPricingPropertyType::EcoResAttribute
            && (this.PropertySource == RetailPricingPropertySource::SalesOrderHeader || this.PropertySource == RetailPricingPropertySource::SalesOrderLine))
        {
            EcoResAttribute ecoResAttribute = EcoResAttribute::find(this.EcoResAttributeRecId);
            EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByAttribute(ecoResAttribute.RecId);

            // Allows only simple string type, same restriction as sales order attributes.
            if (!AttributeDataTypeDiscriminator::checkAttributeDataTypeText(ecoResAttributeType.DataType) ||
                ecoResAttributeType.IsEnumeration == NoYes::Yes)
            {
                throw error("@RET490176");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// There're a few seed pricing properties that needs to be initialized when the feature is turned on.
    /// </summary>
    public static void init()
    {
        container seedProperties = RetailPricingPredefinedPropertyHelper::getSeedProperties();

        RetailPricingPropertyDefinition definition;
        select count(RecId) from definition;

        if (definition.RecId > 0)
        {
            // Only init when table is empty.
            return ;
        }
        
        ttsbegin;
        
        for (int i = 1; i <= conLen(seedProperties); i++)
        {
            RetailPricingPredefinedProperty seedProperty = conPeek(seedProperties, i);

            definition.initValue();
            definition.PropertyType = RetailPricingPropertyType::Predefined;
            definition.PropertyLevel = RetailPricingPredefinedPropertyHelper::getPredefinedPropertyLevel(seedProperty);
            definition.PropertySource = RetailPricingPredefinedPropertyHelper::getPredefinedPropertySource(seedProperty);
            definition.Status = RetailPricingPropertyProcessStatus::Published;
            definition.PredefinedProperty = seedProperty;
            definition.insert();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatory</Name>
				<Source><![CDATA[
    public boolean isMandatory()
    {
        if (this.PropertyType != RetailPricingPropertyType::Predefined)
        {
            return false;
        }

        return RetailPricingPredefinedPropertyHelper::isMandatoryProperty(this.PredefinedProperty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        if (this.isMandatory())
        {
            return checkFailed("@RetailPricing:RetailPricingPropertyDisallowDeleteMandatory");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RetailPricingPropertyDefinition find(RecId _recId, boolean _forUpdate = false)
    {
        RetailPricingPropertyDefinition propertyDefinition;

        if (_recId)
        {
            propertyDefinition.selectForUpdate(_forUpdate);
            select firstonly propertyDefinition where propertyDefinition.RecId == _recId;
        }

        return propertyDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPropertyDefinitions</Name>
				<Source><![CDATA[
    internal static void copyPropertyDefinitions(RetailPricingPropertyLevel _propertyLevel, RetailPricingPropertyProcessStatus _sourceStatus, RetailPricingPropertyProcessStatus _targetStatus)
    {
        RetailPricingPropertyDefinition existingDefinition, targetDefinition;
        RecordInsertList targetDefinitions = new RecordInsertList(tableNum(RetailPricingPropertyDefinition));

        delete_from existingDefinition
            where existingDefinition.PropertyLevel == _propertyLevel && existingDefinition.Status != _sourceStatus;

        while select existingDefinition
            order by existingDefinition.RecId asc // The records RecId order MUST be aligned between source and target.
            where existingDefinition.PropertyLevel == _propertyLevel && existingDefinition.Status == _sourceStatus
        {
            targetDefinition.clear();
            targetDefinition.Status = _targetStatus;
            targetDefinition.PropertyType = existingDefinition.PropertyType;
            targetDefinition.PropertyLevel = existingDefinition.PropertyLevel;
            targetDefinition.PropertySource = existingDefinition.PropertySource;
            targetDefinition.PredefinedProperty = existingDefinition.PredefinedProperty;
            targetDefinition.EcoResAttributeRecId = existingDefinition.EcoResAttributeRecId;
            targetDefinition.DisplayOrder = existingDefinition.DisplayOrder;
            targetDefinition.Sequence = existingDefinition.Sequence;

            targetDefinitions.add(targetDefinition);
        }

        targetDefinitions.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPropertyDefinitionCounterpart</Name>
				<Source><![CDATA[
    internal static RetailPricingPropertyDefinition findPropertyDefinitionCounterpart(
        RetailPricingPropertyDefinition _sourceDefinition, RetailPricingPropertyProcessStatus _targetStatus, NoYes _targetIsPendingDeletion, boolean _forUpdate = false)
    {
        RetailPricingPropertyDefinition targetDefinition;
        targetDefinition.selectForUpdate(_forUpdate);

        select firstonly targetDefinition
            where targetDefinition.PropertyLevel == _sourceDefinition.PropertyLevel
                && targetDefinition.Sequence == _sourceDefinition.Sequence
                && targetDefinition.Status == _targetStatus
                && targetDefinition.IsPendingDeletion == _targetIsPendingDeletion;

        return targetDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSequence</Name>
				<Source><![CDATA[
    private static int nextSequence(RetailPricingPropertyLevel _propertyLevel, RetailPricingPropertyProcessStatus _status)
    {
        return (select maxof(Sequence) from RetailPricingPropertyDefinition
                    index hint PropertyLevelSequenceStatusIndex
                    where RetailPricingPropertyDefinition.PropertyLevel == _propertyLevel && RetailPricingPropertyDefinition.Status == _status).Sequence + 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RetailPricing:RetailPricingPropertyLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Retail</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PropertyLevel</Name>
			<EnumType>RetailPricingPropertyLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PropertyType</Name>
			<Label>@RetailPricing:RetailPricingPropertyTypeLabel</Label>
			<EnumType>RetailPricingPropertyType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PropertySource</Name>
			<Label>@RetailPricing:RetailPricingPropertySourceLabel</Label>
			<EnumType>RetailPricingPropertySource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PredefinedProperty</Name>
			<EnumType>RetailPricingPredefinedProperty</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResAttributeRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS300707</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>DisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPendingDeletion</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>RetailPricingPropertyProcessStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PropertyLevelSequenceStatusIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PropertyLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResAttributeRecId</Name>
					<Field>EcoResAttributeRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>