<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgIllegalEventCodeCombination</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgIllegalEventCodeCombination extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a <c>JmgIllegalEventCodeCombination</c> record from the database.
    /// </summary>
    /// <remarks>
    /// All matching event code combinations are also deleted.
    /// </remarks>
    public void delete()
    {
        JmgIllegalEventCodeCombination jmgIllegalEventCodeCombination;
        select firstonly forupdate jmgIllegalEventCodeCombination
            where jmgIllegalEventCodeCombination.EventCode          == this.ExcludesEventCode   &&
                  jmgIllegalEventCodeCombination.ExcludesEventCode  == this.EventCode;

        if (jmgIllegalEventCodeCombination)
        {
            jmgIllegalEventCodeCombination.doDelete();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>JmgIllegalEventCodeCombination</c> record in the database.
    /// </summary>
    /// <remarks>
    /// A reverse event code combination is also inserted.
    /// </remarks>
    public void insert()
    {
        JmgIllegalEventCodeCombination jmgIllegalEventCodeCombination;
        super();

        select firstonly jmgIllegalEventCodeCombination
            where jmgIllegalEventCodeCombination.EventCode          == this.ExcludesEventCode   &&
                  jmgIllegalEventCodeCombination.ExcludesEventCode  == this.EventCode;

        if (!jmgIllegalEventCodeCombination)
        {
            jmgIllegalEventCodeCombination.EventCode            = this.ExcludesEventCode;
            jmgIllegalEventCodeCombination.ExcludesEventCode    = this.EventCode;
            jmgIllegalEventCodeCombination.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>JmgIllegalEventCodeCombination</c> record in the database.
    /// </summary>
    /// <remarks>
    /// The matching reverse switch code combination is also updated.
    /// </remarks>
    public void update()
    {
        JmgIllegalEventCodeCombination jmgIllegalEventCodeCombination;
        select firstonly forupdate jmgIllegalEventCodeCombination
            where jmgIllegalEventCodeCombination.EventCode          == this.orig().ExcludesEventCode   &&
                  jmgIllegalEventCodeCombination.ExcludesEventCode  == this.orig().EventCode;

        jmgIllegalEventCodeCombination.EventCode            = this.ExcludesEventCode;
        jmgIllegalEventCodeCombination.ExcludesEventCode    = this.EventCode;

        if (jmgIllegalEventCodeCombination)
        {
            jmgIllegalEventCodeCombination.doUpdate();
        }
        else
        {
             jmgIllegalEventCodeCombination.doInsert();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.EventCode   == this.ExcludesEventCode)
        {
            ret = checkFailed("@SYS99977");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combinationAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified switch code is an allowed combination.
    /// </summary>
    /// <param name="_eventCode">
    /// The ID of the first switch code.
    /// </param>
    /// <param name="_excludesEventCode">
    /// The ID of the second switch code.
    /// </param>
    /// <returns>
    /// true if the combination of the two switch codes are allowed; otherwise, false.
    /// </returns>
    public static boolean combinationAllowed(JmgEventCode _eventCode, JmgEventCode _excludesEventCode)
    {
        JmgIllegalEventCodeCombination jmgIllegalEventCodeCombination;
        select firstonly jmgIllegalEventCodeCombination
            where jmgIllegalEventCodeCombination.EventCode == _eventCode &&
                  jmgIllegalEventCodeCombination.ExcludesEventCode == _excludesEventCode;
        if (jmgIllegalEventCodeCombination)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317248</DeveloperDocumentation>
	<Label>@SYS39753</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>EventCode</TitleField1>
	<TitleField2>ExcludesEventCode</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>Index1</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>Index1</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludesEventCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EventCodes</Name>
			<Label>@SYS39752</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludesEventCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EventCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgEventCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExcludesEventCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgEventCode</ExtendedDataType>
			<Label>@SYS39751</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Index1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EventCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExcludesEventCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExcludesSwitchJmgIpcActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>JmgIpcActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExcludesSwitchJmgIpcActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgIllegalEventCodeCombination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExcludesEventCode</Name>
					<SourceEDT>JmgEventCode</SourceEDT>
					<Field>ExcludesEventCode</Field>
					<RelatedField>Activity</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>JmgEventCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::EventCode</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SwitchJmgIpcActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>JmgIpcActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SwitchJmgIpcActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgIllegalEventCodeCombination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EventCode</Name>
					<SourceEDT>JmgEventCode</SourceEDT>
					<Field>EventCode</Field>
					<RelatedField>Activity</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>JmgEventCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::EventCode</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>