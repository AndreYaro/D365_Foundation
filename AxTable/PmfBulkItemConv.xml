<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfBulkItemConv</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PmfBulkItemConv extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from packed to bulk or vice-versa. This method is meant to replace the obsolescent method convertQty.
    /// </summary>
    /// <param name="_qty">
    /// The quantity to convert from.
    /// </param>
    /// <param name="_pack2bulk">
    /// A Boolean value indicating whether the conversion is from pack quantity to bulk quantity; optional.
    /// </param>
    /// <returns>
    /// The converted quantity.
    /// </returns>
    public Qty convert(Qty _qty, boolean _pack2bulk = true)
    {
        Qty qty;

        if (!_pack2bulk)
        {
            qty = ((_qty - this.OuterOffset) / this.Factor * this.Denominator / this.Numerator) - this.InnerOffset;
        }
        else
        {
            qty = this.Factor * this.Numerator / this.Denominator * (_qty + this.InnerOffset) + this.OuterOffset;
        }

        // Apply rounding. In the case if conversion was not looked up (form and to units of measure are equal), rounding to nearest will be applied.
        if (this.Rounding != PmfBulkPackConversionRounding::None)
        {
            qty = this.roundValue(qty, InventTableModule::find(_pack2bulk ? this.PackedItem : this.BulkItem, ModuleInventPurchSales::Invent).UnitId, this.Rounding);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity in a from unit to a quantity in another unit.
    /// </summary>
    /// <param name="_qtyFrom">
    /// The quantity to convert from.
    /// </param>
    /// <param name="_fromUnitOfMeasure">
    /// The unit to to convert from.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// The unit to convert to.
    /// </param>
    /// <param name="_applyRounding">
    /// A boolean value indicating whether rounding should be applied to the result.
    /// </param>
    /// <returns>
    /// The converted quantity.
    /// </returns>
    public Qty convertQty(
        Qty                 _qtyFrom,
        UnitOfMeasureSymbol _fromUnitOfMeasure,
        UnitOfMeasureSymbol _toUnitOfMeasure,
        boolean             _applyRounding)
    {
        UnitOfMeasure   invUOM = UnitOfMeasure::findBySymbol(InventTableModule::find(this.BulkItem, ModuleInventPurchSales::Invent).UnitId);
        UnitOfMeasure   toUOM  = UnitOfMeasure::findBySymbol(_toUnitOfMeasure);

        Qty             qty;

        if (!_fromUnitOfMeasure || !_toUnitOfMeasure || !invUOM
            || !UnitOfMeasureConverter::canBeConverted(invUOM.RecId, toUOM.RecId, InventTable::find(this.BulkItem).Product))
        {
            return 0;
        }

        if (_fromUnitOfMeasure == invUOM.Symbol)
        {
            qty = _qtyFrom - this.OuterOffset;
            qty = qty /this.Factor * this.Denominator / this.Numerator;
            qty -= this.InnerOffset;
        }
        else
        {
            // Perform conversion
            qty = this.Factor * this.Numerator / this.Denominator *
                (_qtyFrom + this.InnerOffset) + this.OuterOffset;
        }

        // Apply rounding. In the case if conversion was not looked up (form and to units of measure are equal), rounding to nearest will be applied.
        if (_applyRounding && this.Rounding != PmfBulkPackConversionRounding::None)
        {
            qty = this.roundValue(qty, _toUnitOfMeasure, this.Rounding);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formularStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the example formula for the conversion of the pack item to the bulk item quantity.
    /// </summary>
    /// <returns>
    /// The example formula for the conversion.
    /// </returns>
    public TempStr formularStr()
    {
        UnitOfMeasureConversionQuickFormula quickFormula;
        UnitOfMeasureConversionQuickFormula fraction;
        UnitOfMeasureSymbol bulkUOM = InventTable::find(this.BulkItem).inventUnitId();
        UnitOfMeasureSymbol packUOM = InventTable::find(this.PackedItem).inventUnitId();

        //mimic the UnitOfMeasureConversion.displayQuickFormula logic
        if (bulkUOM == '' || packUOM == '')
        {
            quickFormula    = '';
        }
        else
        {
            // Add to unit of measure symbol to the formula
            quickFormula = bulkUOM;

            // Add inner offset to the formula
            if (this.InnerOffset != 0.0)
            {
                quickFormula = strFmt("@SYS311965",
                    quickFormula,
                    this.InnerOffset >= 0 ? '+' : '-',
                    num2str(abs(this.InnerOffset), -1, numOfDec(this.InnerOffset), -1, -1));

                if (this.Factor != 1.0 || this.Numerator != 1 || this.Denominator != 1)
                {
                    quickFormula = strFmt("@SYS311968", quickFormula);
                }
            }

            // Add fraction to the formula
            if (this.Numerator != 1 || this.Denominator != 1)
            {
                fraction = strFmt("@SYS311964",
                    this.Numerator,
                    this.Denominator);
                if (this.Factor != 1)
                {
                    fraction = strFmt("@SYS311968", fraction);
                }
                quickFormula = strFmt("@SYS311966",
                    fraction,
                    quickFormula);
            }

            // Add factor to the formula
            if (    this.Factor         != 1.0
                || (this.Numerator      == 1
                &&  this.Denominator    == 1))
            {
                quickFormula = strFmt("@SYS311966",
                    num2str(this.Factor, -1, numOfDec(this.Factor), -1, -1),
                    quickFormula);
            }

            // Add outer offset to the formula
            if (this.OuterOffset != 0.0)
            {
                quickFormula = strFmt("@SYS311965",
                    quickFormula,
                    this.OuterOffset >= 0 ? '+' : '-',
                    num2str(abs(this.OuterOffset), -1, numOfDec(this.OuterOffset), -1, -1));
            }

            // Add from unit of measure symbol to the formula
            quickFormula = strFmt("@SYS311967",packUOM,quickFormula);
        }

        return quickFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Factor = 1.0;
        this.Numerator = 1;
        this.Denominator = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies rounding to a real value.
    /// </summary>
    /// <param name="_value">
    /// The value to round.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// The Unit to convert to.
    /// </param>
    /// <param name="_rounding">
    /// A rounding type.
    /// </param>
    /// <returns>
    /// The rounded real value.
    /// </returns>
    public real roundValue(
        real                            _value,
        UnitOfMeasureSymbol             _toUnitOfMeasure,
        PmfBulkPackConversionRounding   _rounding)
    {
        real                            ret = _value;
        UnitOfMeasureDecimalPrecision   decimalPrecision = UnitOfMeasure::findBySymbol(_toUnitOfMeasure).DecimalPrecision;

        switch (_rounding)
        {
            case PmfBulkPackConversionRounding::Nearest   :
                ret = decRound(_value, decimalPrecision);
                break;

            case PmfBulkPackConversionRounding::Up        :
                ret = roundUpDec(_value, decimalPrecision);
                break;

            case PmfBulkPackConversionRounding::Down      :
                ret = roundDownDec(_value, decimalPrecision);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        if (PdsGlobal::pdsIsCWItem(this.BulkItem) || PdsGlobal::pdsIsCWItem(this.PackedItem))
        {
            return checkFailed("@PDS1992");
        }

        if (this.BulkItem && (this.BulkItem == this.PackedItem))
        {
            return checkFailed("@PDS1993");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a conversion from a pack item to a bulk item exists.
    /// </summary>
    /// <param name="_fromItemId">
    /// The <c>ItemId</c> for the packed item.
    /// </param>
    /// <param name="_toItemId">
    /// The <c>ItemId</c> for the bulk item.
    /// </param>
    /// <returns>
    /// true if the conversion exists; otherwise, false.
    /// </returns>
    public static boolean exist(ItemId _fromItemId, ItemId _toItemId)
    {
        return PmfBulkItemConv::find(_fromItemId, _toItemId).RecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a conversion record from a packed item to a bulk item.
    /// </summary>
    /// <param name="_packedItemId">
    /// The <c>ItemId</c> for the packed item.
    /// </param>
    /// <param name="_bulkItemId">
    /// The <c>ItemId</c> for the bulk item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value to indicate whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// The conversion record.
    /// </returns>
    public static PmfBulkItemConv  find(
        PmfPackItemId   _packedItemId,
        PmfBulkItemId   _bulkItemId,
        boolean         _forUpdate = false)
    {
        PmfBulkItemConv     bulkItemConv;

        bulkItemConv.selectForUpdate(_forUpdate);

        if (_packedItemId && _bulkItemId)
        {
            select firstonly bulkItemConv
                where   bulkItemConv.PackedItem == _packedItemId
                    &&  bulkItemConv.BulkItem   == _bulkItemId;
        }

        return bulkItemConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBulk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a record exists where the item is a bulk item.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the item to check.
    /// </param>
    /// <returns>
    /// true if the item is defined a bulk item; otherwise, false.
    /// </returns>
    public static boolean isBulk(ItemId _itemId)
    {
        PmfBulkItemConv bulkConv;

        select firstonly TableId from bulkConv
            where bulkConv.BulkItem == _itemId;
        if (bulkConv)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBulkorPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a record exists where the item is either a bulk item or a packed item.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the item to check.
    /// </param>
    /// <returns>
    /// true if the item is defined a bulk or packed item; otherwise, false.
    /// </returns>
    public static boolean isBulkorPack(ItemId _itemId)
    {
        if (!_itemId)
        {
            return false;
        }

        return (select pmfBulkItemConv
                where  pmfBulkItemConv.BulkItem     == _itemId
                    || pmfBulkItemConv.PackedItem   == _itemId)
            .RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PMF</ConfigurationKey>
	<DeveloperDocumentation>@PRO2599</DeveloperDocumentation>
	<FormRef>pmfBulkItemConv</FormRef>
	<Label>@PRO2445</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PackedItem</TitleField1>
	<TitleField2>BulkItem</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BulkItemConvIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>BulkItemConvIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackedItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BulkItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rounding</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackedItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BulkItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Conversion</Name>
			<Label>@PRO2452</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Numerator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Denominator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InnerOffset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OuterOffset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackedItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BulkItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rounding</Name>
			<Label>@PRO2165</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Rounding</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackedItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPackItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BulkItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfBulkItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Denominator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureConversionDenominator</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Factor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureConversionFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InnerOffset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureConversionInnerOffset</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Numerator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureConversionNumerator</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OuterOffset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureConversionOuterOffset</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Rounding</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfBulkPackConversionRounding</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BulkItemConvIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PackedItem</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BulkItem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BulkItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BulkItem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BulkInventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BulkInventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PmfBulkItemConv</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PmfProductType_Extern</Name>
					<RelatedField>PmfProductType</RelatedField>
					<ValueStr>PmfProductType::Formula</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BulkItem</Name>
					<SourceEDT>PmfBulkItemId</SourceEDT>
					<Field>BulkItem</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PackInventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PackInventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PmfBulkItemConv</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PmfProductType_Extern</Name>
					<RelatedField>PmfProductType</RelatedField>
					<ValueStr>PmfProductType::Formula</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackedItem</Name>
					<SourceEDT>PmfPackItemId</SourceEDT>
					<Field>PackedItem</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>