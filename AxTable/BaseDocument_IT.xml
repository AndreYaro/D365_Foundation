<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BaseDocument_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BaseDocument_IT extends Common
{
    #localmacro.FieldsList
        this.DocumentType,
        this.LineNumber,
        this.DocumentNumber,
        this.DocumentDate,
        this.ItemNumber,
        this.OrderOrAgreementCode,
        this.CIPEcode,
        this.TenderCode,
        this.SalesId,
        this.PurchId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableFieldsDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables fields that are not applicable depending on the type.
    /// </summary>
    public void enableFieldsDocumentType()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            boolean enable = this.DocumentType != DocumentType_IT::None;
            FormDataSource ds;

            if (FormDataUtil::isFormDataSource(this))
            {
                ds = FormDataUtil::getFormDataSource(this);

                ds.object(fieldNum(BaseDocument_IT, CIPEcode)).enabled(enable);
                ds.object(fieldNum(BaseDocument_IT, DocumentDate)).enabled(enable);
                ds.object(fieldNum(BaseDocument_IT, DocumentNumber)).enabled(enable);
                ds.object(fieldNum(BaseDocument_IT, ItemNumber)).enabled(enable);
                ds.object(fieldNum(BaseDocument_IT, LineNumber)).enabled(enable);
                ds.object(fieldNum(BaseDocument_IT, OrderOrAgreementCode)).enabled(enable);
                ds.object(fieldNum(BaseDocument_IT, TenderCode)).enabled(enable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        this.enableFieldsDocumentType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        const int intLimit = 9999;

        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BaseDocument_IT, LineNumber):
                if (ret && this.LineNumber > intLimit)
                    {
                        ret = checkFailed(strFmt("@SYS324794", this.LineNumber, strLen(int2str(intLimit))));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTable</Name>
				<Source><![CDATA[
    public static BaseDocument_IT findByTable(Common _table)
    {
        BaseDocument_IT baseDocument_IT;

        if (_table)
        {
            select firstonly baseDocument_IT
            where baseDocument_IT.RefTableId == _table.TableId
                && baseDocument_IT.RefRecId == _table.RecId;
        }

        return baseDocument_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The record in the <c>CustInvoiceJour</c> table.
    /// </param>
    public static void insertForCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        BaseDocument_IT baseDocument;
        CustInvoiceTable custInvoiceTable;

        if (!_custInvoiceJour.SalesId)
        {
            custInvoiceTable = CustInvoiceTable::findSourceDocumentHeader(_custInvoiceJour.SourceDocumentHeader);
            baseDocument = BaseDocument_IT::findByTable(custInvoiceTable);

            BaseDocument_IT::updateRefRecords(baseDocument, _custInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForCustInvoiceSalesLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_custInvoiceSalesLink">
    /// The record in the <c>CustInvoiceSalesLink</c> table.
    /// </param>
    public static void insertForCustInvoiceSalesLink(CustInvoiceSalesLink _custInvoiceSalesLink)
    {
        BaseDocument_IT baseDocument;
        CustInvoiceJour custInvoiceJour;
        SalesTable salesTable;

        select firstonly custInvoiceJour
            where custInvoiceJour.InvoiceId == _custInvoiceSalesLink.invoiceId
               && custInvoiceJour.InvoiceDate == _custInvoiceSalesLink.invoiceDate
               && custInvoiceJour.SalesId == _custInvoiceSalesLink.salesId;

        salesTable = SalesTable::find(_custInvoiceSalesLink.origSalesId);
        baseDocument = BaseDocument_IT::findByTable(salesTable);
        BaseDocument_IT::updateRefRecords(baseDocument, custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForProjInvoiceCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_projInvoiceCost">
    /// The record in the <c>ProjInvoiceCost</c> table.
    /// </param>
    public static void insertForProjInvoiceCost(ProjInvoiceCost _projInvoiceCost)
    {
        BaseDocument_IT baseDocument;
        ProjInvoiceJour projInvoiceJour;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Project ledgerJournalTrans_Project;
        LedgerJournalTable ledgerJournalTable;

        projInvoiceJour = ProjInvoiceJour::find(_projinvoiceCost.ProjInvoiceId, _projinvoiceCost.InvoiceDate);

        select firstOnly TransId, RefRecId from ledgerJournalTrans_Project
            where ledgerJournalTrans_Project.TransId == _projInvoiceCost.TransId;

        select firstOnly RecId, JournalNum from ledgerJournalTrans
            where ledgerJournalTrans.RecId == ledgerJournalTrans_Project.RefRecId;

        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
        baseDocument = BaseDocument_IT::findByTable(ledgerJournalTable);
        BaseDocument_IT::updateRefRecords(baseDocument, projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForProjInvoiceEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_projInvoiceEmpl">
    /// The record in the <c>ProjInvoiceEmpl</c> table.
    /// </param>
    public static void insertForProjInvoiceEmpl(ProjInvoiceEmpl _projInvoiceEmpl)
    {
        BaseDocument_IT baseDocument;
        ProjInvoiceJour projInvoiceJour;
        ProjJournalTrans projJournalTrans;
        ProjJournalTable projJournalTable;

        projInvoiceJour = ProjInvoiceJour::find(_projinvoiceEmpl.ProjInvoiceId, _projinvoiceEmpl.InvoiceDate);

        select firstOnly TransId, JournalId from projJournalTrans
            where projJournalTrans.TransId == _projInvoiceEmpl.TransId;

        projJournalTable = ProjJournalTable::find(projJournalTrans.JournalId);
        baseDocument = BaseDocument_IT::findByTable(projJournalTable);

        BaseDocument_IT::updateRefRecords(baseDocument, projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForProjInvoiceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_projInvoiceItem">
    /// The record in the <c>ProjInvoiceItem</c> table.
    /// </param>
    public static void insertForProjInvoiceItem(ProjInvoiceItem _projInvoiceItem)
    {
        BaseDocument_IT baseDocument;
        SalesTable salesTable;
        ProjInvoiceJour projInvoiceJour;
        InventJournalTrans inventJournalTrans;
        InventJournalTable inventJournalTable;

        projInvoiceJour = ProjInvoiceJour::find(_projinvoiceItem.ProjInvoiceId, _projinvoiceitem.InvoiceDate);

        if (_projInvoiceItem.SalesId)
        {
            salesTable = SalesTable::find(_projInvoiceItem.SalesId);
            baseDocument = BaseDocument_IT::findByTable(salesTable);
            BaseDocument_IT::updateRefRecords(baseDocument, projInvoiceJour);
        }
        else
        {
            inventJournalTrans = InventJournalTrans::findInventTransId(_projInvoiceItem.InventTransId);
            inventJournalTable = InventJournalTable::find(inventJournalTrans.JournalId);
            baseDocument = BaseDocument_IT::findByTable(inventJournalTable);
            BaseDocument_IT::updateRefRecords(baseDocument, projInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForProjInvoiceRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_projInvoiceRevenue">
    /// The record in the <c>ProjInvoiceRevenue</c> table.
    /// </param>
    public static void insertForProjInvoiceRevenue(ProjInvoiceRevenue _projInvoiceRevenue)
    {
        BaseDocument_IT baseDocument;
        ProjInvoiceJour projInvoiceJour;
        ProjJournalTrans projJournalTrans;
        ProjJournalTable projJournalTable;

        projInvoiceJour = ProjInvoiceJour::find(_projinvoiceRevenue.ProjInvoiceId, _projinvoiceRevenue.InvoiceDate);

        select firstOnly TransId, JournalId from projJournalTrans
            where projJournalTrans.TransId == _projInvoiceRevenue.TransId;

        projJournalTable = ProjJournalTable::find(projJournalTrans.JournalId);
        baseDocument = BaseDocument_IT::findByTable(projJournalTable);
        BaseDocument_IT::updateRefRecords(baseDocument, projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// The record in the <c>ProjInvoiceJour</c> table.
    /// </param>
    public static void insertForProjInvoiceJour(ProjInvoiceJour _projInvoiceJour)
    {
        ProjProposalJour projProposalJour = ProjProposalJour::find(_projInvoiceJour.ProposalId);
        BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(projProposalJour);
        BaseDocument_IT::updateRefRecords(baseDocument, _projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForProjJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_projJournalTable">
    /// The record in the <c>ProjJournalTable</c> table.
    /// </param>
    public static void insertForProjJournalTable(ProjJournalTable _projJournalTable)
    {
        ProjTable projTable = ProjTable::find(_projJournalTable.ProjId);
        BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(projTable);
        BaseDocument_IT::updateRefRecords(baseDocument, _projJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_custTrans">
    /// The record in the <c>CustTrans</c> table.
    /// </param>
    public static void insertForCustTrans(CustTrans _custTrans)
    {
        BaseDocument_IT baseDocument;

        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromCustTrans(_custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);
        if (custInvoiceJour)
        {
            baseDocument = BaseDocument_IT::findByTable(custInvoiceJour);
        }

        if (!baseDocument)
        {
            ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(_custTrans.Invoice, _custTrans.TransDate);
            if (projInvoiceJour)
            {
                baseDocument = BaseDocument_IT::findByTable(ProjInvoiceJour::find(_custTrans.Invoice, _custTrans.TransDate));
            }
        }

        BaseDocument_IT::updateRefRecords(baseDocument, _custTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record that has the specified RecId and TableId in the <c>BaseDocument_IT</c> table.
    /// </summary>
    /// <param name="_vendTrans">
    /// The record in the <c>VendTrans</c> table.
    /// </param>
    public static void insertForVendTrans(VendTrans _vendTrans)
    {
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findFromVendTrans(_vendTrans.Invoice, _vendTrans.TransDate, _vendTrans.AccountNum);
        BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(vendInvoiceJour);
        BaseDocument_IT::updateRefRecords(baseDocument, _vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForVendInvoicePurchLink</Name>
				<Source><![CDATA[
    public static void insertForVendInvoicePurchLink(VendInvoicePurchLink _vendInvoicePurchLink)
    {
        BaseDocument_IT baseDocument;
        VendInvoiceJour vendInvoiceJour;
        PurchTable purchTable;

        select firstonly vendInvoiceJour
            where vendInvoiceJour.InvoiceId == _vendInvoicePurchLink.invoiceId
               && vendInvoiceJour.InvoiceDate == _vendInvoicePurchLink.invoiceDate
               && vendInvoiceJour.PurchId == _vendInvoicePurchLink.purchId;

        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findFromVendInvoiceJour(
            vendInvoiceJour.PurchId,
            vendInvoiceJour.InvoiceId,
            vendInvoiceJour.ParmId);

        baseDocument = BaseDocument_IT::findByTable(vendInvoiceInfoTable);
        BaseDocument_IT::updateRefRecords(baseDocument, vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public static void insertForVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PurchTable purchTable = _vendInvoiceInfoTable.purchTable();
        BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(purchTable);
        BaseDocument_IT::copyBaseDocument(baseDocument, _vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBaseDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates base document record.
    /// </summary>
    /// <param name = "_baseDocument">Base document.</param>
    /// <param name = "_vendInvoiceInfoTable">Invoice journal record.</param>
    private static void copyBaseDocument(BaseDocument_IT _baseDocument, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (BaseDocument_IT::canCopyBaseDocument(_vendInvoiceInfoTable))
        {
            BaseDocument_IT::createOrUpdateBaseDocument(_baseDocument, _vendInvoiceInfoTable);
        }
        else
        {
            warning("@ApplicationSuite_Localization:CannotCopyBaseDocumentDeatailsForDifferentValues");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopyBaseDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the base document can be copied.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">Invoice journal record.</param>
    /// <returns>True if the base document can be copied, otherwise false.</returns>
    private static boolean canCopyBaseDocument(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return BaseDocument_IT::getBaseDocumentCount(_vendInvoiceInfoTable) <= _vendInvoiceInfoTable.getInvoicesCountByPurchIdAndParmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseDocumentCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of base purchase orders associated with vend invoices.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">Invoice journal record.</param>
    /// <returns>Returns number of base documents.</returns>
    private static int getBaseDocumentCount(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        int baseDocumentsLinesCount = 0;
        BaseDocument_IT baseDocument;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchTable purchTable;

        while select count(RecId) from baseDocument
            group by DocumentNumber, CIPEcode, DocumentDate, DocumentType, ItemNumber, LineNumber, OrderOrAgreementCode, TenderCode
            where baseDocument.RefTableId == purchTable.TableId
                && baseDocument.DocumentType != DocumentType_IT::None
            exists join purchTable where purchTable.RecId == baseDocument.RefRecId
            exists join vendInvoiceInfoSubTable where vendInvoiceInfoSubTable.OrigPurchId == purchTable.PurchId
                && vendInvoiceInfoSubTable.ParmId == _vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoSubTable.TableRefId == _vendInvoiceInfoTable.TableRefId
        {
            baseDocumentsLinesCount++;
        }

        return baseDocumentsLinesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBaseDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update referenced record.
    /// </summary>
    /// <param name = "_baseDocument">The base document to be copied.</param>
    /// <param name = "_invoiceJour">Invoice journal record.</param>
    private static void createOrUpdateBaseDocument(BaseDocument_IT _baseDocument, Common _invoiceJour)
    {
        if (_baseDocument.DocumentType != DocumentType_IT::None
            && _invoiceJour.TableId
            && _invoiceJour.RecId)
        {
            BaseDocument_IT baseDocument;

            select firstonly baseDocument
                where baseDocument.RefTableId == _invoiceJour.TableId
                    && baseDocument.RefRecId == _invoiceJour.RecId;

            if (baseDocument.RecId)
            {
                baseDocument.selectForUpdate(true);

                baseDocument.unpack(_baseDocument.pack());

                baseDocument.update();
            }
            else
            {
                if (_baseDocument.RefTableId == tableNum(SalesTable))
                {
                    _baseDocument.SalesId = SalesTable::findRecId(_baseDocument.RefRecId).SalesId;
                }
                else if (_baseDocument.RefTableId == tableNum(PurchTable))
                {
                    _baseDocument.PurchId = PurchTable::findRecId(_baseDocument.RefRecId).PurchId;
                }

                _baseDocument.RefTableId = _invoiceJour.TableId;
                _baseDocument.RefRecId = _invoiceJour.RecId;

                _baseDocument.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRefRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update referenced record.
    /// </summary>
    /// <param name = "_baseDocument">Base document.</param>
    /// <param name = "_invoiceJour">Invoice journal record.</param>
    internal static void updateRefRecords(BaseDocument_IT _baseDocument, Common _invoiceJour)
    {
        if (_baseDocument.DocumentType != DocumentType_IT::None
            && _invoiceJour.TableId
            && _invoiceJour.RecId)
        {
            BaseDocument_IT baseDocument;

            select firstonly RecId from baseDocument
                where baseDocument.DocumentNumber == _baseDocument.DocumentNumber
                    && baseDocument.CIPEcode == _baseDocument.CIPEcode
                    && baseDocument.DocumentDate == _baseDocument.DocumentDate
                    && baseDocument.DocumentType == _baseDocument.DocumentType
                    && baseDocument.ItemNumber == _baseDocument.ItemNumber
                    && baseDocument.LineNumber == _baseDocument.LineNumber
                    && baseDocument.OrderOrAgreementCode == _baseDocument.OrderOrAgreementCode
                    && baseDocument.TenderCode == _baseDocument.TenderCode
                    && baseDocument.RefTableId == _invoiceJour.TableId
                    && baseDocument.RefRecId == _invoiceJour.RecId;

            if (!baseDocument.RecId)
            {
                if (_baseDocument.RefTableId == tableNum(SalesTable))
                {
                    _baseDocument.SalesId = SalesTable::findRecId(_baseDocument.RefRecId).SalesId;
                }

                if (_baseDocument.RefTableId == tableNum(PurchTable))
                {
                    _baseDocument.PurchId = PurchTable::findRecId(_baseDocument.RefRecId).PurchId;
                }

                _baseDocument.RefTableId = _invoiceJour.TableId;
                _baseDocument.RefRecId = _invoiceJour.RecId;

                _baseDocument.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBaseDocument</Name>
				<Source><![CDATA[
    internal void initFromBaseDocument(BaseDocument_IT _baseDocument)
    {
        this.DocumentType = _baseDocument.DocumentType;
        this.LineNumber = _baseDocument.LineNumber;
        this.DocumentNumber = _baseDocument.DocumentNumber;
        this.DocumentDate = _baseDocument.DocumentDate;
        this.ItemNumber = _baseDocument.ItemNumber;
        this.OrderOrAgreementCode = _baseDocument.OrderOrAgreementCode;
        this.CIPEcode = _baseDocument.CIPEcode;
        this.TenderCode = _baseDocument.TenderCode;
        this.SalesId = _baseDocument.SalesId;
        this.PurchId = _baseDocument.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance())
            && !this.RefRecId
            && FormDataUtil::isFormDataSource(this))
        {
            FormDataSource formDataSource = formGetParentDatasource(FormDataUtil::getFormDataSource(this));
            if (formDataSource)
            {
                Common cursor = formDataSource.cursor();
                if (!cursor.RecId)
                {
                    formDataSource.write();
                }
                this.RefRecId = cursor.RecId;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    internal container pack()
    {
        return [#FieldsList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    internal void unpack(container _baseDocumentPacked)
    {
        [#FieldsList] = _baseDocumentPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidateBaseDocumentForLedgerJournalType</Name>
				<Source><![CDATA[
    internal static boolean shouldValidateBaseDocumentForLedgerJournalType(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::Daily
            || _ledgerJournalType == LedgerJournalType::CustPayment
            || _ledgerJournalType == LedgerJournalType::VendInvoiceRegister
            || _ledgerJournalType == LedgerJournalType::Payment
            || _ledgerJournalType == LedgerJournalType::PurchaseLedger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS138052</Label>
	<TitleField1>DocumentType</TitleField1>
	<TitleField2>DocumentNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>APARShared</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BaseDocument</Name>
			<Label>@SYS138052</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderOrAgreementCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CIPEcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CIPEcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Code_IT</ExtendedDataType>
			<Label>@AccountsReceivable:CIPEcode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Number_IT</ExtendedDataType>
			<Label>@SYS8434</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentType_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Number_IT</ExtendedDataType>
			<Label>@SYS12836</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNumber_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderOrAgreementCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrderOrAgreementCode_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TenderCode</Name>
			<ExtendedDataType>Code_IT</ExtendedDataType>
			<Label>@AccountsReceivable:TenderProcedureIdentificationCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournalTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalJour</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjProposalJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>