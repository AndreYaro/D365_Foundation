<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscSmartRoundingRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDiscSmartRoundingRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateDefaultRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates default rounding rules.
    /// </summary>
    /// <param name="_deleteRoundingGroup">
    /// A Boolean value that indicates whether existing non-default rounding rules must be deleted before
    /// the generation of default rounding rules; optional.
    /// </param>
    void generateDefaultRules(boolean _deleteRoundingGroup = false)
    {
        #PriceDisc
        PriceDiscSmartRoundingGroup roundingGroup;
        PriceDiscSmartRoundingRule roundingRule;

        ttsbegin;
        delete_from roundingGroup
            where roundingGroup.GroupId == #RoundingGroupNinetyFive
                || roundingGroup.GroupId == #RoundingGroupNinetyNine;

        if (_deleteRoundingGroup)
        {
            delete_from roundingGroup;
        }

        roundingGroup.GroupId = #RoundingGroupNinetyFive;
        roundingGroup.Name = "@SYS133754";
        roundingGroup.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 0 ;
        roundingRule.UnitPriceTo = 1.95 ;
        roundingRule.Syntax = '#.95';
        roundingRule.UpperLimitPoint = '#.7' ;
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 1.95;
        roundingRule.UnitPriceTo =  29.95;
        roundingRule.Syntax = '#.95' ;
        roundingRule.UpperLimitPoint = '#.951' ;
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 29.95;
        roundingRule.UnitPriceTo = 149.95 ;
        roundingRule.Syntax = '#9.95' ;
        roundingRule.UpperLimitPoint = '#4';
        roundingRule.LowerLimitPoint = '#4';
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 149.95 ;
        roundingRule.UnitPriceTo =  9995;
        roundingRule.Syntax = '#95';
        roundingRule.UpperLimitPoint = '#60';
        roundingRule.LowerLimitPoint = '#10';
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 9995;
        roundingRule.UnitPriceTo =  #maxPrice;
        roundingRule.Syntax = '#95';
        roundingRule.UpperLimitPoint = '#50';
        roundingRule.LowerLimitPoint = '#50';
        roundingRule.insert();

        roundingGroup.clear();
        roundingGroup.GroupId = #RoundingGroupNinetyNine;
        roundingGroup.Name = "@SYS133755";
        roundingGroup.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 0 ;
        roundingRule.UnitPriceTo = 1.99 ;
        roundingRule.Syntax = '#.99';
        roundingRule.UpperLimitPoint = '#.7' ;
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 1.99;
        roundingRule.UnitPriceTo =  29.99;
        roundingRule.Syntax = '#.99' ;
        roundingRule.UpperLimitPoint = '#.991' ;
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 29.99;
        roundingRule.UnitPriceTo = 149.99 ;
        roundingRule.Syntax = '#9.99' ;
        roundingRule.UpperLimitPoint = '#4';
        roundingRule.LowerLimitPoint = '#4';
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 149.99 ;
        roundingRule.UnitPriceTo =  9999;
        roundingRule.Syntax = '#99';
        roundingRule.UpperLimitPoint = '#60';
        roundingRule.LowerLimitPoint = '#10';
        roundingRule.insert();

        roundingRule.clear();
        roundingRule.GroupRecId = roundingGroup.RecId;
        roundingRule.UnitPriceFrom = 9999;
        roundingRule.UnitPriceTo =  #maxPrice;
        roundingRule.Syntax = '#99';
        roundingRule.UpperLimitPoint = '#50';
        roundingRule.LowerLimitPoint = '#50';
        roundingRule.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        #PriceDisc

        super();

        this.UnitPriceFrom = 0;
        this.UnitPriceTo   = #maxPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerLimitPoint</Name>
				<Source><![CDATA[
    public PriceDiscSmartRoundingLimit lowerLimitPoint(boolean _set, PriceDiscSmartRoundingLimit _lowerLimitPoint)
    {
        if (_set)
        {
            // No matter if user types in a dot or a comma, it should be recognized,
            // but converted to internal format which can only contain dots
            this.LowerLimitPoint = strReplace(_lowerLimitPoint,',','.');
        }

        return strReplace(this.LowerLimitPoint,'.', PriceDiscSmartRounding::getClientDecimalSeparator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerLimitPointEdit</Name>
				<Source><![CDATA[
    edit PriceDiscSmartRoundingLimit lowerLimitPointEdit(boolean _set, PriceDiscSmartRoundingLimit _lowerLimitPoint)
    {
        return this.lowerLimitPoint(_set,_lowerLimitPoint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        #PriceDisc

        PriceDiscSmartRoundingRule existingRule;

        Amount nextCandidate = #NotFound;

        super(_fieldId);

        switch (_fieldId)
        {
            case  fieldNum(PriceDiscSmartRoundingRule,UnitPriceFrom):

            while select existingRule order by UnitPriceFrom asc
                    where existingRule.GroupRecId == this.GroupRecId
            {
                if (existingRule.RecId != this.RecId)
                {
                    if ((existingRule.UnitPriceFrom  <= this.UnitPriceFrom) &&
                         (this.UnitPriceFrom < existingRule.UnitPriceTo))
                    {
                        nextCandidate = existingRule.UnitPriceTo;
                    }
                    else
                    {
                        if (nextCandidate != #NotFound)
                        {
                            if ((!this.overlapsWith(existingRule)) && (nextCandidate != this.UnitPriceFrom))
                            {
                                break;
                            }
                            else
                            {
                                nextCandidate = existingRule.UnitPriceTo;
                            }
                        }
                    }
                }
            }

            if (nextCandidate != #NotFound && nextCandidate != #MaxPrice)
            {
                this.UnitPriceFrom = nextCandidate;
            }

            break;

            case fieldNum (PriceDiscSmartRoundingRule,UnitPriceTo):

            //sorted in reverse order
            while select existingRule order by UnitPriceFrom desc
                    where existingRule.GroupRecId == this.GroupRecId
                {
                    if (existingRule.RecId != this.RecId)
                    {
                        if ((existingRule.UnitPriceTo  >= this.UnitPriceTo) &&
                          (this.UnitPriceTo > existingRule.UnitPriceFrom))
                        {
                            nextCandidate = existingRule.UnitPriceFrom;
                        }
                        else
                        {
                            if (nextCandidate != #NotFound)
                            {
                                if ((!this.overlapsWith(existingRule)) && (nextCandidate != this.UnitPriceTo))
                                {
                                    break;
                                }
                                else
                                {
                                    nextCandidate = existingRule.UnitPriceFrom;
                                }
                            }
                        }
                    }
                }

                if (nextCandidate != #NotFound && nextCandidate != 0)
                {
                    this.UnitPriceTo = nextCandidate;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlapsWith</Name>
				<Source><![CDATA[
    boolean overlapsWith(PriceDiscSmartRoundingRule _rule)
    {
        return (_rule.UnitPriceFrom < this.UnitPriceFrom && this.UnitPriceFrom < _rule.UnitPriceTo) ||
               (_rule.UnitPriceFrom < this.UnitPriceTo && this.UnitPriceTo < _rule.UnitPriceTo) ||
               (this.UnitPriceFrom < _rule.UnitPriceFrom && _rule.UnitPriceFrom < this.UnitPriceTo) ||
               (this.UnitPriceFrom < _rule.UnitPriceTo && _rule.UnitPriceTo < this.UnitPriceTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syntax</Name>
				<Source><![CDATA[
    public PriceDiscSmartRoundingSyntax syntax(boolean _set, PriceDiscSmartRoundingSyntax _syntax)
    {
        if (_set)
        {
            // No matter if user types in a dot or a comma, it should be recognized,
            // but it converted to internal format which can only contain dots
            this.Syntax = strReplace(_syntax,',','.');
        }

        return strReplace(this.Syntax,'.', PriceDiscSmartRounding::getClientDecimalSeparator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>syntaxEdit</Name>
				<Source><![CDATA[
    edit PriceDiscSmartRoundingSyntax syntaxEdit(boolean _set, PriceDiscSmartRoundingSyntax _syntax)
    {
        return this.syntax(_set, _syntax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPriceTo</Name>
				<Source><![CDATA[
    public AmountString unitPriceTo(boolean _set, AmountString _amount)
    {
        AmountString localAmount;
        #PriceDisc

        if (_set)
        {
            if (!_amount)
            {
                this.UnitPriceTo = #maxPrice;
                this.modifiedField(fieldNum(PriceDiscSmartRoundingRule,UnitPriceTo));
            }
            else
            {
                localAmount = strReplace(_amount,',','.');
                if (str2NumOk(localAmount))
                {
                    this.UnitPriceTo = str2num(localAmount);
                    this.modifiedField(fieldNum(PriceDiscSmartRoundingRule,UnitPriceTo));
                }
            }
        }

        if (this.UnitPriceTo != #maxPrice)
        {
            return num2str(this.UnitPriceTo,-1,-1,-1,-1);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPriceToEdit</Name>
				<Source><![CDATA[
    edit AmountString unitPriceToEdit(boolean _set, AmountString _amount)
    {
        return this.unitPriceTo(_set, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>upperLimitPoint</Name>
				<Source><![CDATA[
    public PriceDiscSmartRoundingLimit upperLimitPoint(boolean _set, PriceDiscSmartRoundingLimit _upperLimitPoint)
    {
        if (_set)
        {
            // No matter if user types in a dot or a comma, it should be recognized,
            // but it converted to internal format which can only contain dots
            this.UpperLimitPoint = strReplace(_upperLimitPoint,',','.');
        }

        return strReplace(this.UpperLimitPoint,'.', PriceDiscSmartRounding::getClientDecimalSeparator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>upperLimitPointEdit</Name>
				<Source><![CDATA[
    edit PriceDiscSmartRoundingLimit upperLimitPointEdit(boolean _set, PriceDiscSmartRoundingLimit _upperLimitPoint)
    {
        return this.upperLimitPoint(_set, _upperLimitPoint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        PriceDiscSmartRoundingRule existingRule;

        ret = super();

        ret = PriceDiscSmartRounding::roundingRuleCheck(this);

        if (ret)
        {
            while select existingRule
                  where existingRule.GroupRecId == this.GroupRecId
            {
                if (this.RecId != existingRule.RecId && existingRule.overlapsWith(this))
                {
                    error("@SYS133762");
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PriceDiscSmartRoundingRule find(PriceDiscSmartRoundingGroupRefRecId _recId, Amount _amount, boolean _forupdate = false)
    {
        PriceDiscSmartRoundingRule roundingRule;

        roundingRule.selectForUpdate(_forupdate);

        if (_recId)
        {
            select firstonly roundingRule
                where roundingRule.GroupRecId == _recId &&
                      _amount >= roundingRule.UnitPriceFrom &&
                      _amount <  roundingRule.UnitPriceTo;
        }

        return roundingRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PriceDisc</ConfigurationKey>
	<DeveloperDocumentation>@SYS325270</DeveloperDocumentation>
	<FormRef>PriceDiscSmartRounding</FormRef>
	<Label>@SYS133765</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>UnitPriceFrom</TitleField1>
	<TitleField2>UnitPriceTo</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>GroupUnitPriceFrom</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>GroupUnitPriceFrom</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitPriceFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPriceTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Syntax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimitPoint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperLimitPoint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPriceFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GroupRecID</Name>
			<Label>@SYS133747</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundingRule</Name>
			<Label>@SYS133768</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitPriceTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPriceFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Syntax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimitPoint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperLimitPoint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SampleFields</Name>
			<Label>@SYS133747</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GroupRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LowerLimitPoint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscSmartRoundingSyntax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Syntax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscSmartRoundingSyntax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPriceFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPriceTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UpperLimitPoint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscSmartRoundingSyntax</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupUnitPriceFrom</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitPriceFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GroupRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscSmartRoundingGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscSmartRoundingGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PriceDiscSmartRoundingGroup_PriceDiscSmartRoundingRule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupRecId</Name>
					<Field>GroupRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>