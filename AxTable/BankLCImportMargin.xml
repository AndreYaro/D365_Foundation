<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportMargin</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankLCImportMargin extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAllocatedAmount</Name>
				<Source><![CDATA[
        display public BankLCImportTransAllocatedAmountCur displayAllocatedAmount()
    {
        return this.getAllocatedAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBalanceAmount</Name>
				<Source><![CDATA[
        display public BankLCImportMarginAmountCur displayBalanceAmount()
    {
        return this.getBalanceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocatedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allocated margin amount.
    /// </summary>
    /// <returns>
    /// The allocated margin amount.
    /// </returns>
    public BankLCImportTransAllocatedAmountCur getAllocatedAmount()
    {
        BankLCImportMarginAllocation bankLCImportMarginAllocation;
        select sum(AllocatedAmountCur)
            from bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.BankLCImportMargin == this.RecId;
        return bankLCImportMarginAllocation.AllocatedAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balanced margin amount.
    /// </summary>
    /// <returns>
    /// The balanced margin amount.
    /// </returns>
    public BankLCImportTransAllocatedAmountCur getBalanceAmount()
    {
        return this.AmountCur - this.getAllocatedAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the bank letter of credit import line.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record ID of the bank letter of credit import line.
    /// </returns>
    public BankLCImport getBankLCImport(boolean _forUpdate = false)
    {
        return BankLCImport::find(this.BankLCImport, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the margin can be deleted.
    /// </summary>
    /// <returns>
    /// true if the margin can be deleted; otherwise, false.
    /// </returns>
    public boolean isDeleteAllowed()
    {
        return this.TransStatus == BankLCImportTransStatusType::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.isDeleteAllowed())
            {
                // Posted transaction could not be deleted.
                ret = checkFailed("@SYS332276");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPostedMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a posted margin exists.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of bank letter of credit import line.
    /// </param>
    /// <returns>
    /// true if a posted margin exists; otherwise, false.
    /// </returns>
    public static boolean existPostedMargin(BankLCRefRecId _bankLCImportRefRecId)
    {
        BankLCImportMargin  bankLCImportMargin;

        select firstonly RecId from bankLCImportMargin
            where bankLCImportMargin.BankLCImport   == _bankLCImportRefRecId
                && bankLCImportMargin.TransStatus   == BankLCImportTransStatusType::Posted;

        return bankLCImportMargin.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a margin with the specified voucher exists.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of bank letter of credit import line.
    /// </param>
    /// <param name="_ledgerJournalId">
    /// The name of the ledger journal.
    /// </param>
    /// <param name="_voucher">
    /// The number of the posted voucher.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of the posted voucher.
    /// </param>
    /// <returns>
    /// true if a margin with the specified voucher exists; otherwise, false.
    /// </returns>
    public static boolean existVoucher(
        BankLCRefRecId _bankLCImportRefRecId,
        LedgerJournalId _ledgerJournalId,
        Voucher _voucher,
        TransDate _transDate)
    {
        if (_bankLCImportRefRecId
            && _ledgerJournalId
            && _voucher
            && _transDate)
        {
            return (select firstonly RecId from bankLCImportMargin
                    where bankLCImportMargin.BankLCImport   == _bankLCImportRefRecId
                        && bankLCImportMargin.JournalNum    == _ledgerJournalId
                        && bankLCImportMargin.Voucher       == _voucher
                        && bankLCImportMargin.PostedDate    == _transDate
               ).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankLCImportMargin</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankLCImportMargin</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCImportMargin</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImportMargin find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        BankLCImportMargin bankLCImportMargin;

        if (_recId)
        {
            bankLCImportMargin.selectForUpdate(_forUpdate);

            select firstonly bankLCImportMargin
                where bankLCImportMargin.RecId == _recId;
        }

        return bankLCImportMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLCJournalVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankLCImportMargin</c> table by using the ledger journal
    /// voucher.
    /// </summary>
    /// <param name="_bankLCImport">
    /// The record ID of the <c>BankLCImport</c> record to find.
    /// </param>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The posted voucher number.
    /// </param>
    /// <param name="_postedDate">
    /// The posted transaction date.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>BankLCImportMargin</c> table; otherwise, and empty record.
    /// </returns>
    public static BankLCImportMargin findByLCJournalVoucher(
        BankLCRefRecId _bankLCImport,
        LedgerJournalId _journalNum,
        Voucher _voucher,
        TransDate _postedDate,
        boolean _forUpdate = false)
    {
        BankLCImportMargin bankLCImportMargin;

        if (_bankLCImport && _journalNum && _voucher && _postedDate)
        {
            bankLCImportMargin.selectForUpdate(_forUpdate);

            select firstonly bankLCImportMargin
                where bankLCImportMargin.BankLCImport   == _bankLCImport
                    && bankLCImportMargin.JournalNum    == _journalNum
                    && bankLCImportMargin.Voucher       == _voucher
                    && bankLCImportMargin.PostedDate    == _postedDate;
        }

        return bankLCImportMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total margin amount.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// The total margin amount.
    /// </returns>
    public static BankLCImportMarginAmountCur getTotalAmount(BankLCRefRecId _bankLCImportRefRecId)
    {
        BankLCImportMargin bankLCImportMargin;

        select sum(AmountCur) from bankLCImportMargin
            where bankLCImportMargin.BankLCImport == _bankLCImportRefRecId;

        return bankLCImportMargin.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalUnAllocatedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total unallocated margin amount.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// The total unallocated margin amount.
    /// </returns>
    public static BankLCImportMarginAmountCur getTotalUnAllocatedAmount(
        BankLCRefRecId _bankLCImportRefRecId)
    {
        BankLCImportMargin              bankLCImportMargin;
        BankLCImportMarginAllocation    bankLCImportMarginAllocation;
        BankLCImportMarginAmountCur     totalMarginAmount;

        totalMarginAmount = BankLCImportMargin::getTotalAmount(_bankLCImportRefRecId);

        if (totalMarginAmount != 0)
        {
            select sum(AllocatedAmountCur) from bankLCImportMarginAllocation
                exists join bankLCImportMargin
                    where bankLCImportMargin.RecId          == bankLCImportMarginAllocation.BankLCImportMargin
                        && bankLCImportMargin.BankLCImport  == _bankLCImportRefRecId;

            return totalMarginAmount - bankLCImportMarginAllocation.AllocatedAmountCur;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified letter of credit has transactions.
    /// </summary>
    /// <param name="_bankLCImportTabelRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// true if the letter of credit has transactions; otherwise false.
    /// </returns>
    public static boolean hasTransactions(BankLCRefRecId _bankLCImportTabelRefRecId)
    {
        BankLCImportMargin bankLCImportMarginLocal;

        select firstonly RecId from bankLCImportMarginLocal
            where bankLCImportMarginLocal.BankLCImport == _bankLCImportTabelRefRecId;

        return bankLCImportMarginLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnAllocatedMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified letter of credit has unallocated transactions.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// true if the letter of credit has unallocated transactions; otherwise false.
    /// </returns>
    public static boolean hasUnAllocatedMargin(
        BankLCRefRecId _bankLCImportRefRecId)
    {
        return BankLCImportMargin::getTotalUnAllocatedAmount(_bankLCImportRefRecId) != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS332206</DeveloperDocumentation>
	<Label>@SYS332205</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>LCJournalVoucherIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankLCImport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Selected</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportMarginAmountCur</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImport</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GeneralJournalEntryJournalNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Selected</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportTransSelected</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportTransStatus</ExtendedDataType>
			<EnumType>BankLCImportTransStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankLCImportIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLCImport</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LCJournalVoucherIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostedDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankLCImport</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SelectedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Selected</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImport</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankLCImport</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImport</Name>
					<Field>BankLCImport</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Currency_BankLCImportMarginLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>