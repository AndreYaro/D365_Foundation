<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRCustCategory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a category node to the hierarchy that is specified in the <c>CategoryHierarchy</c> field
    /// </summary>
    /// <returns>
    /// true if the specified category was successfully added; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The user must always call this method instead of the insert method to create a new record in this
    /// table. This category can be either new or existing.
    /// </remarks>
    public boolean addToHierarchy()
    {
        MCRCustCategory                  MCRCustCategory;
        MCRCustCategory                  MCRCustParentCategory;
        MCRCustCategory                  rootCategory;
        boolean                          ret = false;

        try
        {
            ttsbegin;

            if (this.RecId && MCRCustCategory::exist(this.RecId))
            {   //if the record already exists, just update it.
                if (this.validateWrite())
                {
                    this.update();
                    ret = true;
                }
            }
            else
            {
                if (this.ParentCategory)
                {
                    //lock the root node to prevent concurrent modifications
                    select pessimisticlock firstonly RecId from rootCategory
                                where rootCategory.CategoryHierarchy == this.CategoryHierarchy &&
                                        rootCategory.NestedSetLeft   == 1;

                    MCRCustParentCategory = MCRCustCategory::find(this.ParentCategory, true);
                    if (!MCRCustParentCategory || !MCRCustParentCategory.RecId)
                    {
                        // parent specified is not valid or someone deleted it
                        throw Global::error("@SYS134257");
                    }
                    else
                    {
                        this.initFromParent(MCRCustParentCategory);
                        this.NestedSetLeft          = MCRCustParentCategory.NestedSetRight;
                        this.NestedSetRight         = MCRCustParentCategory.NestedSetRight + 1;
                        this.Level                  = MCRCustParentCategory.Level + 1;

                        //
                        // First, we'll have to make some space.
                        //  While-select is used instead of update_recordset as NestedSetLeft/Right are AK
                        //      and ordering needs to be specified
                        //
                        while select forupdate MCRCustCategory order by NestedSetLeft desc
                            where MCRCustCategory.NestedSetLeft >= MCRCustParentCategory.NestedSetRight &&
                                  MCRCustCategory.CategoryHierarchy == MCRCustParentCategory.CategoryHierarchy
                        {
                            MCRCustCategory.NestedSetLeft = MCRCustCategory.NestedSetLeft+2;
                            MCRCustCategory.update();
                        }

                        while select forupdate MCRCustCategory order by NestedSetRight desc
                            where MCRCustCategory.NestedSetRight >= MCRCustParentCategory.NestedSetRight &&
                                  MCRCustCategory.CategoryHierarchy == MCRCustParentCategory.CategoryHierarchy
                        {
                            MCRCustCategory.NestedSetRight = MCRCustCategory.NestedSetRight+2;
                            MCRCustCategory.update();
                        }

                        //finally, child is given life
                        if (this.validateWrite())
                        {
                            this.insert();
                            ret = true;
                        }
                    }
                }
                else
                {
                    ret = this.setRoot();
                }
            }
            ttscommit;
        }
        catch
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the currently selected Category subtree.
    /// </summary>
    public void deleteSubTree()
    {
        EcoResCategoryNestedSetLeft  delLeft  = this.NestedSetLeft;
        EcoResCategoryNestedSetRight delRight = this.NestedSetRight;
        EcoResCategoryNestedSetRight delGap   = delRight - delLeft + 1;
        MCRCustCategory               MCRCustCategory;
        MCRCustCategory               MCRCustRootCategory;
        MCRCustCategory               MCRCustCategoryDescendents;
        RecId                        derivedFinHierarchyRecId;

        #EcoResCategoryDefaults

        ttsbegin;

            //lock the tree for further modifications
            select pessimisticlock firstonly RecId from MCRCustCategory
                        where MCRCustRootCategory.CategoryHierarchy    == this.CategoryHierarchy &&
                                MCRCustRootCategory.NestedSetLeft   == #ECORESROOTNESTEDLEFTVALUE;

            //make sure there were no modifications meanwhile
            MCRCustCategory = MCRCustCategory::find(this.RecId, true);
            if (!MCRCustCategory.RecId)
            {
                // node specified is not valid, or already deleted
                throw Global::error("@SYS134263");
            }
            else if (   (MCRCustCategory.NestedSetLeft != this.NestedSetLeft)   ||
                        (MCRCustCategory.NestedSetRight != this.NestedSetRight) ||
                        (MCRCustCategory.CategoryHierarchy != this.CategoryHierarchy) )
            {
                    //the tree has been modified
                    throw Global::error("@SYS134262");
            }

            // delete the descendants
            MCRCustCategoryDescendents = MCRCustCategory.getDescendants(true);
            while (MCRCustCategoryDescendents)
            {
                if (MCRCustCategoryDescendents.validateDelete())
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && derivedFinHierarchyRecId != 0)
                    {
                        LedgerDerivedFinHierarchyFilterResults::deleteResultsForDerivedFinHierarchyNode(derivedFinHierarchyRecId);
                        LedgerDerivedFinHierarchyRuleCriteria::deleteCriteriaForDerivedFinHierarchyNode(derivedFinHierarchyRecId);
                    }
                    MCRCustCategoryDescendents.delete();
                }
                else
                    throw Global::error("@SYS134261");

                next MCRCustCategoryDescendents;
            }

            //delete this node
            if (MCRCustCategory.validateDelete())
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && derivedFinHierarchyRecId != 0)
                {
                    LedgerDerivedFinHierarchyFilterResults::deleteResultsForDerivedFinHierarchyNode(derivedFinHierarchyRecId);
                    LedgerDerivedFinHierarchyRuleCriteria::deleteCriteriaForDerivedFinHierarchyNode(derivedFinHierarchyRecId);
                }
                MCRCustCategory.delete();
            }
            else
                throw Global::error("@SYS134261");

            //
            // remove the gap
            //  While-select is used instead of update_recordset as NestedSetLeft/Right are AK
            //      and ordering needs to be specified
            //
            while select forupdate MCRCustCategory order by NestedSetLeft asc
                where MCRCustCategory.NestedSetLeft >= delLeft &&
                      MCRCustCategory.CategoryHierarchy == this.CategoryHierarchy
            {
                MCRCustCategory.NestedSetLeft = MCRCustCategory.NestedSetLeft - delGap;
                MCRCustCategory.update();
            }

            while select forupdate MCRCustCategory order by NestedSetRight asc
                where MCRCustCategory.NestedSetRight >= delRight &&
                      MCRCustCategory.CategoryHierarchy == this.CategoryHierarchy
            {
                MCRCustCategory.NestedSetRight = MCRCustCategory.NestedSetRight - delGap;
                MCRCustCategory.update();
            }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the customer account number of the related customer.
    /// </summary>
    /// <returns>
    /// The customer account number of the related customer.
    /// </returns>
    public display CustAccount displayCustAccount()
    {
        CustTable   custTable;
        CustAccount ret = '';

        if (this.Customer)
        {
            custTable = custTable::findRecId(this.Customer);
            ret = custTable.AccountNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the related customer.
    /// </summary>
    /// <returns>
    /// The name of the related customer.
    /// </returns>
    public display CustName displayCustName()
    {
        CustTable   custTable;
        CustName    ret = '';

        if (this.Customer)
        {
            custTable = custTable::findRecId(this.Customer);
            ret = custTable.name();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the children count for the specified record in the <c>MCRCustCategory</c> table.
    /// </summary>
    /// <param name="_activeOnly">
    ///    A Boolean value that indicates whether to retrieve only active child categories.
    /// </param>
    /// <returns>
    ///    The number of children for the specified category.
    /// </returns>
    public  int64 getChildCount(boolean _activeOnly = false)
    {
        int64           childCount      = 0;
        MCRCustCategory  MCRCustCategory  =  null;

        if (this.RecId && MCRCustCategory::exist(this.RecId) )
        {
            select count(RecId) from MCRCustCategory
                    where   MCRCustCategory.CategoryHierarchy == this.CategoryHierarchy
                            && MCRCustCategory.ParentCategory  == this.RecId
                            && (MCRCustCategory.IsActive == true || MCRCustCategory.IsActive == _activeOnly);

            childCount = MCRCustCategory.RecId;
        }
        return childCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves all the child Categories of this given Category.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_activeOnly">
    /// A Boolean value that indicates whether to retrieve active categories only.
    /// </param>
    /// <param name="_showCustomers">
    /// A Boolean value that indicates whether or not to retrieve related customers; optional.
    /// </param>
    /// <returns>
    /// A record buffer of the <c>MCRCustCategory</c> table if children found; otherwise, an empty buffer.
    /// </returns>
    public MCRCustCategory getChildren(boolean _forUpdate = false, boolean _activeOnly = false, boolean _showCustomers = true)
    {
        MCRCustCategory  mcrCustCategory;

        if (this.RecId && mcrCustCategory::exist(this.RecId))
        {
            MCRCustCategory.selectForUpdate(_forUpdate);
            select mcrCustCategory
                order by MCRCustCategory.Name
                    where   MCRCustCategory.CategoryHierarchy == this.CategoryHierarchy
                        && mcrCustCategory.ParentCategory  == this.RecId
                        && (_showCustomers || MCRCustCategory.Customer == 0)
                        && (!_activeOnly || mcrCustCategory.IsActive == true);
        }

        return MCRCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves all the descendant Categories of this given Category.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_activeOnly">
    /// A Boolean value that indicates whether to retrieve active categories only.
    /// </param>
    /// <returns>
    /// A record buffer of the <c>MCRCustCategory</c> table if descendants found; otherwise, an empty buffer.
    /// </returns>
    public MCRCustCategory getDescendants(boolean _forUpdate = false, boolean _activeOnly = false)
    {
        MCRCustCategory  MCRCustCategory =  null;

        if (this.RecId && MCRCustCategory::exist(this.RecId) )
        {
            MCRCustCategory.selectForUpdate(_forUpdate);

            select * from MCRCustCategory
                order by MCRCustCategory.NestedSetLeft
                    where   MCRCustCategory.CategoryHierarchy == this.CategoryHierarchy
                            && MCRCustCategory.NestedSetLeft  > this.NestedSetLeft
                            && MCRCustCategory.NestedSetRight < this.NestedSetRight
                            && (MCRCustCategory.IsActive == true || MCRCustCategory.IsActive == _activeOnly);
        }

        return MCRCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a child category record of the <c>MCRCustCategory</c> table, based on the specified
    ///    parent category.
    /// </summary>
    /// <param name="_MCRCustCategory">
    ///    The parent category record from the <c>MCRCustCategory</c> table.
    /// </param>
    /// <remarks>
    ///    This method initializes the <c>Hierarchy</c>, <c>Parent</c>, and <c>Active</c> values, depending on
    ///    the parent specified.
    /// </remarks>
    public void initFromParent(MCRCustCategory _MCRCustCategory)
    {
        this.CategoryHierarchy  = _MCRCustCategory.CategoryHierarchy;
        this.ParentCategory     = _MCRCustCategory.RecId;
        this.IsActive           = _MCRCustCategory.IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.IsActive       = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a new category root node to a hierarchy.
    /// </summary>
    /// <returns>
    ///    true if the specified root category was added; otherwise, false.
    /// </returns>
    public boolean setRoot()
    {
        MCRCustCategory              MCRCustCategory = null;
        MCRCustCategoryHierarchy     MCRCustCategoryHierarchy = null;
        boolean                     ret                         = false;
        #EcoResCategoryDefaults

        try
        {
            ttsBegin;

            MCRCustCategoryHierarchy = MCRCustCategoryHierarchy::find(this.CategoryHierarchy);

            if (!MCRCustCategoryHierarchy || !MCRCustCategoryHierarchy.RecId)
            {
                // hierarchy specified is not valid
                throw Global::error("@SYS301577");
            }

            MCRCustCategory = MCRCustCategory::getRoot(MCRCustCategoryHierarchy.RecId, true);
            if (MCRCustCategory.RecId && MCRCustCategory.RecId != this.RecId)
            {
                // a different root node already exists
                throw Global::error("@SYS301578");
            }

            if (this.ParentCategory)
            {
                // parent cannot be specified for root node
                throw Global::error("@SYS301579");
            }

            this.NestedSetLeft    = #ECORESROOTNESTEDLEFTVALUE;
            this.Level            = 1;

            if (!this.RecId)
            {
                this.NestedSetRight   = #ECORESROOTNESTEDLEFTVALUE + 1;

                if ( this.validateWrite())
                {
                    this.insert();
                    ret = true;
                }
            }
            else
            {
                if ( this.validateWrite())
                {
                    this.update();
                    ret = true;
                }
            }

            ttsCommit;
        }
        catch
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHierarchyRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the root category node for a given category hierarchy.
    /// </summary>
    /// <param name="_ecoResCategoryHierarchyId">
    /// The category hierarchy ID for which to retrieve in the <c>EcoResCategoryHierarchy</c> table.
    /// </param>
    /// <param name="_ecoResCategoryName">
    /// The root category name to be created in the specified category hierarchy.
    /// </param>
    /// <returns>
    /// The root category record of the <c>MCRCustCategory</c> table if successfully created; otherwise, an
    /// empty buffer.
    /// </returns>
    public static MCRCustCategory createHierarchyRoot(EcoResCategoryHierarchyId _ecoResCategoryHierarchyId, EcoResCategoryName _ecoResCategoryName = "@SYS136676")
    {
        MCRCustCategory              MCRCustCategory = null;
        MCRCustCategoryHierarchy     MCRCustCategoryHierarchy = null;

        ttsBegin;

        if (!MCRCustCategory || !MCRCustCategory.RecId)
        {
            MCRCustCategory.initValue();
            MCRCustCategory.CategoryHierarchy = _ecoResCategoryHierarchyId;
        }

        MCRCustCategory.Name = _ecoResCategoryName;

        MCRCustCategory.setRoot();

        ttsCommit;

        return MCRCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified category is located in the <c>EcoResCategory</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryId">
    /// The category ID in the <c>MCRCustCategory</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(EcoResCategoryId _ecoResCategoryId)
    {
        return _ecoResCategoryId &&
            (select RecId from MCRCustCategory
                where MCRCustCategory.RecId == _ecoResCategoryId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified category in the <c>EcoResCategory</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryId">
    ///    The category ID in the <c>EcoResCategory</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>MCRCustCategory</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static MCRCustCategory find(EcoResCategoryId _ecoResCategoryId, boolean _forUpdate = false)
    {
        MCRCustCategory    MCRCustCategory = null;

        if (_ecoResCategoryId)
        {
            MCRCustCategory.selectForUpdate(_forUpdate);
            select * from MCRCustCategory where MCRCustCategory.RecId == _ecoResCategoryId;
        }

        return MCRCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNonExistByString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first String value so that in the table that is specified by the value of the <paramref
    /// name="_tableId" /> table, there is no existing record with the <paramref name="_matchingFieldId" />
    /// field's value matching the specified value of the <paramref name="_matchingFieldValue" />
    /// parameter, and the <paramref name="_strFieldId" /> field's value that matches the String value
    /// found.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of table to search.
    /// </param>
    /// <param name="_matchingFieldId">
    /// The ID of field in the table to match.
    /// </param>
    /// <param name="_matchingFieldValue">
    /// The value with which to match the value of the <paramref name="_matchingFieldId" /> field.
    /// </param>
    /// <param name="_strFieldId">
    /// The ID of the String field in the table to match.
    /// </param>
    /// <param name="_strFieldType">
    /// The ID of the extended data type of a String field.
    /// </param>
    /// <param name="_strValueExactMatch">
    /// The exact value with which to match the <paramref name="_strFieldId" /> String field.
    /// </param>
    /// <param name="_strValueFormatter">
    /// The formatter for the value to match the <paramref name="_strFieldId" /> String field.
    /// </param>
    /// <param name="_excludedRecId">
    /// The record ID to exclude in search for non-exist name.
    /// </param>
    /// <returns>
    /// The first string value that does not match the string field of any existing record in the table.
    /// </returns>
    /// <remarks>
    ///  For example, if
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    the table is <c>EcoResCategory</c> ,
    ///    </description>
    ///   </item>
    ///   <item>
    ///   <description>the <paramref name="_matchingFieldId" /> is CategoryHierarchy, </description>
    ///   </item>
    ///   <item>
    ///   <description>the <paramref name="_matchingFieldValue" /> is 12345678, </description>
    ///   </item>
    ///   <item>
    ///   <description>the <paramref name="_strFieldId" /> is Name, </description>
    ///   </item>
    ///   <item>
    ///   <description>the <paramref name="_strValueExactMatch" /> is "New Node", </description>
    ///   </item>
    ///   <item>
    ///   <description>the <paramref name="_strValueFormatter" /> is "New Node # %1", </description>
    ///   </item>
    ///   <item>
    ///   <description>the <paramref name="_excludedRecId" /> is 87654321, </description>
    ///   </item>
    ///  </list>
    ///   then,
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    If the <c>EcoResCategory</c> table, excluding 87654321, has no record with
    ///    CategoryHierarchy=12345678 and Name="New Node", the return value would be "New Node".
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    If the <c>EcoResCategory</c> table, excluding 87654321, has no record with
    ///    CategoryHierarchy=12345678 and Name="New Node # 1", the return value would be "New Node # 1".
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    If the <c>EcoResCategory</c> table, excluding 87654321, has no record with
    ///    CategoryHierarchy=12345678 and Name="New Node # 2", -- return value would be "New Node # 2".
    ///    </description>
    ///   </item>
    ///  </list>
    ///   An exception is thrown if we cannot find one after exhausting all possibilities.The formatter
    ///  should take one argument, which will be replaced by an integer starting from 1 and incremented by 1
    ///  when searching for non-match.
    /// </remarks>
    public static str findNonExistByString(
        tableId         _tableId,
        fieldId         _matchingFieldId,
        anytype         _matchingFieldValue,
        fieldId         _strFieldId,
        extendedTypeId  _strFieldType,
        str             _strValueExactMatch,
        str             _strValueFormatter,
        recId           _excludedRecId = 0
    )
    {
        DictTable dictTable = new DictTable(_tableId);
        Common  common      = dictTable.makeRecord();
        int idx = 0;
        anytype result, firstStringValue;
        int     edtMaxLen = new DictType(_strFieldType).stringLen();

        result = _strValueExactMatch;

        do
        {
            select crossCompany common
            where  common.(_strFieldId)      == result
                && common.(_matchingFieldId) == _matchingFieldValue
                && common.RecId              != _excludedRecId
            ;
            if (!common.RecId)
            {
                break;
            }

            // we must detect infinite loop:
            if (1 == idx)
            {
                firstStringValue = common.(_strFieldId);
            }
            else if ((idx > 0) && (firstStringValue == common.(_strFieldId)))
            {
                throw error(
                    strFmt("@SYS330468",
                        _tableId, tableId2name(_tableId),
                        _matchingFieldId, fieldId2name(_tableId, _matchingFieldId), _matchingFieldValue,
                        _strFieldId, fieldId2name(_tableId, _strFieldId),
                        idx, firstStringValue
                    )
                );
            }

            idx++;
            result = strFmt(_strValueFormatter, idx);
            // trim as necessary
            if (strLen(result) > edtMaxLen)
            {
                result = subStr(result, 1, edtMaxLen);
            }
        } while (true);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNonExistNameInHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a name that does not match any existing record in the <c>EcoResCategory</c> table of the
    /// given hierarchy.
    /// </summary>
    /// <param name="_hierarchyRecId">
    /// The category hierarchy record ID.
    /// </param>
    /// <returns>
    /// A string that would not conflict with any existing name column of the <c>EcoResCategory</c> table
    /// of the record in the given hierarchy.
    /// </returns>
    /// <remarks>
    /// An exception is thrown if we cannot find one after exhausting all possibilities.
    /// </remarks>
    public static EcoResCategoryName findNonExistNameInHierarchy(EcoResCategoryHierarchyId _hierarchyRecId)
    {
        return MCRCustCategory::findNonExistByString(
            tableNum(MCRCustCategory),
            fieldNum(MCRCustCategory, CategoryHierarchy),
            _hierarchyRecId,
            fieldNum(MCRCustCategory, Name),
            extendedTypeNum(EcoResCategoryName),
            "@SYS134268", "@SYS136676"
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the root or very first category of the hierarchy.
    /// </summary>
    /// <param name="_custCategoryHierarchyId">
    ///    The category hierarchy ID in the <c>EcoResCategoryHierarchy</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>MCRCustCategory</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static MCRCustCategory getRoot(Int64 _custCategoryHierarchyId, boolean _forUpdate = false)
    {
        MCRCustCategory  MCRCustCategory = null;
        #EcoResCategoryDefaults

        MCRCustCategory.selectForUpdate(_forUpdate);
        select firstonly * from MCRCustCategory
                where MCRCustCategory.CategoryHierarchy     == _custCategoryHierarchyId
                    && MCRCustCategory.NestedSetLeft   == #ECORESROOTNESTEDLEFTVALUE;

        return MCRCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMCRCategoryCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates record into table <c>MCRCustomersCategory</c>.
    /// </summary>
    /// <param name="_MCRCustCategory">
    ///  A record buffer of table <c>MCRCustCategory</c> to find existing
    /// record in table <c>MCRCustomersCategory</c> for a selected category hierarchy.
    /// </param>
    /// <param name="_tCustTable">
    /// A record buffer of table <c>CustTable</c> to find existing
    /// record in table <c>MCRCustomersCategory</c> for selected product.
    /// </param>
    /// <returns>
    ///   A record in the <c>MCRCustomersCategory</c> table; otherwise, an empty record.
    /// </returns>
    public static MCRCustCategory insertMCRCategoryCust(MCRCustCategory _MCRCustCategory,
                                                                CustTable _tCustTable)
    {
        MCRCustCategory   newMCRCustCategory;
        MCRCustCategory   selectedMCRCustCategory;

        select firstonly RecId from selectedMCRCustCategory
            where selectedMCRCustCategory.CategoryHierarchy == _MCRCustCategory.CategoryHierarchy
                && selectedMCRCustCategory.Customer == _tCustTable.RecId;

        if (selectedMCRCustCategory.RecId == 0)
        {
            newMCRCustCategory = null;
            newMCRCustCategory.initValue();
            newMCRCustCategory.ParentCategory     = _MCRCustCategory.RecId;
            newMCRCustCategory.CategoryHierarchy  = _MCRCustCategory.CategoryHierarchy;
            newMCRCustCategory.Customer           = _tCustTable.RecId;
            newMCRCustCategory.insert();
        }
        else
        {
            error (strFmt("@MCR39551",
                        CustTable::findRecId(_tCustTable.RecId).name(),
                        MCRCustCategoryHierarchy::find(_MCRCustCategory.CategoryHierarchy).Name));
        }

        return newMCRCustCategory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
	<DeveloperDocumentation>@MCR39226</DeveloperDocumentation>
	<FormRef>MCRCustCategory</FormRef>
	<Label>@MCR39226</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CategoryHierarchy</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Customer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS104259</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Customer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NestedSetLeft</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NestedSetRight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCustCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryCommodityCode</ExtendedDataType>
			<Label>@SYS300623</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Customer</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Label>@SYS133857</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS26201</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Level</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryLevel</ExtendedDataType>
			<Label>@SYS300625</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NestedSetLeft</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryNestedSetLeft</ExtendedDataType>
			<Label>@SYS300627</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NestedSetRight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryNestedSetRight</ExtendedDataType>
			<Label>@SYS300626</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCustCategoryRefRecId</ExtendedDataType>
			<Label>@SYS130838</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Customer</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Customer</Name>
					<SourceEDT>CustTableRefRecId</SourceEDT>
					<Field>Customer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRCustCategory_Parent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRCustCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentCategory</Name>
					<Field>ParentCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRCustCategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>MCRCustCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryHierarchy</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>