<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSettlementTax1099</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendSettlementTax1099 extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clear1099G2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the 1099 detail fields that are for 1099G records.
    /// </summary>
    public void clear1099G2()
    {
        this.Tax1099TaxYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.Tax1099TradeOrBusiness = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099S</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the 1099 detail fields that are for 1099S records.
    /// </summary>
    public void clear1099S()
    {
        this.Tax1099AddressOrLegalDesc = "";
        this.Tax1099BuyersTax = 0;
        this.Tax1099DateOfClosing = dateNull();
        this.Tax1099PropertyOrServices = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        this.updateIRSReportableInternal(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099DIVStateIncomeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state tax witheld amounts for a given vendor and state for form DIV.
    /// </summary>
    /// <param name="vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state tax withheld.
    /// </returns>
    /// <remarks>
    /// Form DIV state tax withheld is reported on <c>Tax1099Box</c> DIV_14.
    /// </remarks>
    public SettleTax1099StateAmount get1099DIVStateIncomeTax(VendAccount vendAccount, Tax1099State tax1099State, TransDate fromDate, TransDate toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!fromDate && !toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                   && localVendSettlementTax1099.Tax1099State == tax1099State
                   && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                   && tax1099Fields.Tax1099Box == Tax1099DIV::stateTaxWithheld().tax1099Box
                   && tax1099Fields.Tax1099Type == Tax1099Type::F1099DIV;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                   && localVendSettlementTax1099.Tax1099State == tax1099State
                   && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                   && tax1099Fields.Tax1099Type == Tax1099Type::F1099DIV
                   && tax1099Fields.Tax1099Box == Tax1099DIV::stateTaxWithheld().tax1099Box
                   && localVendSettlementTax1099.TransDate >= fromDate
                   && localVendSettlementTax1099.TransDate <= toDate;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099INTStateIncomeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state tax witheld amounts for a given vendor and state for form INT.
    /// </summary>
    /// <param name="vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state tax withheld.
    /// </returns>
    /// <remarks>
    /// Form INT state tax withheld is reported on <c>Tax1099Box</c> INT_13.
    /// </remarks>
    public SettleTax1099StateAmount get1099INTStateIncomeTax(VendAccount vendAccount, Tax1099State tax1099State, TransDate fromDate, TransDate toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!fromDate && !toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                   && localVendSettlementTax1099.Tax1099State == tax1099State
                   && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                   && tax1099Fields.Tax1099Box == Tax1099INT::stateTaxWithheld().tax1099Box
                   && tax1099Fields.Tax1099Type == Tax1099Type::F1099INT;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                   && localVendSettlementTax1099.Tax1099State == tax1099State
                   && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                   && tax1099Fields.Tax1099Type == Tax1099Type::F1099INT
                   && tax1099Fields.Tax1099Box == Tax1099INT::stateTaxWithheld().tax1099Box
                   && localVendSettlementTax1099.TransDate >= fromDate
                   && localVendSettlementTax1099.TransDate <= toDate;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099MISCStateIncome</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state income amounts for a given vendor and state for form MISC.
    /// </summary>
    /// <param name="vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state income.
    /// </returns>
    /// <remarks>
    /// Form MISC state income is reported from all <c>Tax1099Box</c> entries except MISC_04 and MISC_16.
    /// </remarks>
    public SettleTax1099StateAmount get1099MISCStateIncome(VendAccount vendAccount, Tax1099State tax1099State, TransDate fromDate, TransDate toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!fromDate && !toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                    && localVendSettlementTax1099.Tax1099State == tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Box != Tax1099MISC::federalIncomeTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Box != Tax1099MISC::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099MISC;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                    && localVendSettlementTax1099.Tax1099State == tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && localVendSettlementTax1099.TransDate >= fromDate
                    && localVendSettlementTax1099.TransDate <= toDate
                    && tax1099Fields.Tax1099Box != Tax1099MISC::federalIncomeTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Box != Tax1099MISC::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099MISC;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099MISCStateIncomeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state tax witheld amounts for a given vendor and state for form MISC.
    /// </summary>
    /// <param name="vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state tax withheld.
    /// </returns>
    /// <remarks>
    /// Form MISC state tax withheld is reported on <c>Tax1099Box</c> MISC_16.
    /// </remarks>
    public SettleTax1099StateAmount get1099MISCStateIncomeTax(VendAccount vendAccount, Tax1099State tax1099State, TransDate fromDate, TransDate toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!fromDate && !toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                    && localVendSettlementTax1099.Tax1099State == tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Box == Tax1099MISC::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099MISC;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                    && localVendSettlementTax1099.Tax1099State == tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099MISC
                    && tax1099Fields.Tax1099Box == Tax1099MISC::stateTaxWithheld().tax1099Box
                    && localVendSettlementTax1099.TransDate >= fromDate
                    && localVendSettlementTax1099.TransDate <= toDate;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099OIDStateIncomeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state tax witheld amounts for a given vendor and state for form OID.
    /// </summary>
    /// <param name="vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state tax withheld.
    /// </returns>
    /// <remarks>
    /// Form OID state tax withheld is reported on <c>Tax1099Box</c> OID_12.
    /// </remarks>
    public SettleTax1099StateAmount get1099OIDStateIncomeTax(VendAccount vendAccount, Tax1099State tax1099State, TransDate fromDate, TransDate toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!fromDate && !toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                    && localVendSettlementTax1099.Tax1099State == tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Box == Tax1099OID::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099OID;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == vendAccount
                    && localVendSettlementTax1099.Tax1099State == tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099OID
                    && tax1099Fields.Tax1099Box == Tax1099OID::stateTaxWithheld().tax1099Box
                    && localVendSettlementTax1099.TransDate >= fromDate
                    && localVendSettlementTax1099.TransDate <= toDate;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099NECStateIncome</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state income amounts for a given vendor and state for form NEC.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="_tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="_fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="_toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state income.
    /// </returns>
    /// <remarks>
    /// Form NEC state income is reported from all <c>Tax1099Box</c> entries except NEC_04 and NEC_07.
    /// </remarks>
    public SettleTax1099StateAmount get1099NECStateIncome(VendAccount _vendAccount, Tax1099State _tax1099State, TransDate _fromDate, TransDate _toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!_fromDate && !_toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == _vendAccount
                    && localVendSettlementTax1099.Tax1099State == _tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Box != Tax1099NEC::federalIncomeTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Box != Tax1099NEC::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099NEC;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == _vendAccount
                    && localVendSettlementTax1099.Tax1099State == _tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && localVendSettlementTax1099.TransDate >= _fromDate
                    && localVendSettlementTax1099.TransDate <= _toDate
                    && tax1099Fields.Tax1099Box != Tax1099NEC::federalIncomeTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Box != Tax1099NEC::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099NEC;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get1099NECStateIncomeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of reportable state tax witheld amounts for a given vendor and state for form NEC.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account to search on.
    /// </param>
    /// <param name="_tax1099State">
    /// The state to search on.
    /// </param>
    /// <param name="_fromDate">
    /// Include results from this date onwards.
    /// </param>
    /// <param name="_toDate">
    /// Include results up to this date.
    /// </param>
    /// <returns>
    /// The amount of reportable state tax withheld.
    /// </returns>
    /// <remarks>
    /// Form NEC state tax withheld is reported on <c>Tax1099Box</c> NEC_05.
    /// </remarks>
    public SettleTax1099StateAmount get1099NECStateIncomeTax(VendAccount _vendAccount, Tax1099State _tax1099State, TransDate _fromDate, TransDate _toDate)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields;

        if (!_fromDate && !_toDate)
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == _vendAccount
                    && localVendSettlementTax1099.Tax1099State == _tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Box == Tax1099NEC::stateTaxWithheld().tax1099Box
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099NEC;
        }
        else
        {
            select sum(SettleTax1099StateAmount) from localVendSettlementTax1099
                join Tax1099Box, Tax1099Type from tax1099Fields
                where localVendSettlementTax1099.VendAccount == _vendAccount
                    && localVendSettlementTax1099.Tax1099State == _tax1099State
                    && localVendSettlementTax1099.Tax1099Fields == tax1099Fields.RecId
                    && tax1099Fields.Tax1099Type == Tax1099Type::F1099NEC
                    && tax1099Fields.Tax1099Box == Tax1099NEC::stateTaxWithheld().tax1099Box
                    && localVendSettlementTax1099.TransDate >= _fromDate
                    && localVendSettlementTax1099.TransDate <= _toDate;
        }

        return localVendSettlementTax1099.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the Tax1099TaxYear field to be the current date.
    /// </summary>
    public void initValue()
    {
        #ISOCountryRegionCodes
        LogisticsAddressCountryRegion countryRegion;

        select firstonly CountryRegionId from countryRegion
            where countryRegion.isOcode == #isoUS;

        super();
        this.Tax1099CountryRegion = countryRegion.CountryRegionId;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.Tax1099TaxYear = year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.updateIRSReportableInternal(true, true);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup1099ReportableVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches a lookup that contains vendors that are set to report 1099s
    /// </summary>
    /// <param name="_ctrl">
    /// FormStringControl, default variable
    /// </param>
    /// <param name="_fromVendAccount">
    /// Vendor account to show from
    /// </param>
    /// <param name="_toVendAccout">
    /// Vendor account to show to
    /// </param>
    public static void lookup1099ReportableVendors(FormStringControl _ctrl, VendAccount _fromVendAccount = '', VendAccount _toVendAccount = '')
    {
        var query = VendSettlementTax1099::lookup1099ReportableVendorsQuery(_fromVendAccount, _toVendAccount);

        var sysTableLookup = SysTableLookup::newParameters(tableNum(VendTable), _ctrl, true,
                VendorDataInteractorFactory::useExistingOrCreateResolver(_ctrl, query));

        sysTableLookup.addLookupfield(fieldNum(VendTable, AccountNum));
        sysTableLookup.addLookupfield(fieldNum(VendTable, Party));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReference1099ReportableVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the vendor account number or by mapping
    /// it to the vendor name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_ctrl">The control on which contextual data entry is being performed.</param>
    /// <param name="_fromVendAccount">Vendor account to show from</param>
    /// <param name="_toVendAccout">Vendor account to show to</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>VendSettlementTax1099::lookup1099ReportableVendors</c> method.
    /// </remarks>
    public static str resolveAmbiguousReference1099ReportableVendors(FormStringControl _ctrl, VendAccount _fromVendAccount = '', VendAccount _toVendAccount = '')
    {
        return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(_ctrl,
                VendSettlementTax1099::lookup1099ReportableVendorsQuery(_fromVendAccount, _toVendAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup1099ReportableVendorsQuery</Name>
				<Source><![CDATA[
    private static Query lookup1099ReportableVendorsQuery(VendAccount _fromVendAccount = '', VendAccount _toVendAccount = '')
    {
        var query = VendorDataInteractorFactory::constructDefaultBaseQuery();
        var qbdsVendTable = query.dataSourceTable(tableNum(VendTable));
        qbdsVendTable.addRange(fieldNum(VendTable, Tax1099Reports)).value(queryValue(NoYes::Yes));

        str range = '';

        if (_fromVendAccount != '')
        {
            range += queryValue(_fromVendAccount) + '..';
        }
        if (_toVendAccount != '')
        {
            if (range == '')
            {
                range += '..';
            }
            range += queryValue(_toVendAccount);
        }

        // we can't specify a range on AccountNum on the root data source as it will cause problems when the resolver attempts to alter it,
        // so we add an exists join of the table to itself and place the range on that
        var qbdsVendTableFilter = qbdsVendTable.addDataSource(tableNum(VendTable));
        qbdsVendTableFilter.addLink(fieldNum(VendTable, RecId), fieldNum(VendTable, RecId));
        qbdsVendTableFilter.joinMode(JoinMode::ExistsJoin);
        qbdsVendTableFilter.addRange(fieldNum(VendTable, AccountNum)).value(range);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called from the form data source when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the table field that was modified.
    /// </param>
    /// <remarks>
    /// Clears the 1099 detail fields when the 1099 Box field changes to a value that does not use them.
    /// </remarks>
    public void modifiedField(FieldId fieldId)
    {
        super(fieldId);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (this.Tax1099Fields != Tax1099Base::findTax1099FieldsRecId(Tax1099S::grossProceeds()))
            {
                this.clear1099S();
            }

            if (this.Tax1099Fields != Tax1099Base::findTax1099FieldsRecId(Tax1099G::incomeTaxRefundsCreditsOffsets()))
            {
                this.clear1099G2();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal static VendSettlementTax1099 find(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendSettlementTax1099 vendSettlementTax1099;

        vendSettlementTax1099.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendSettlementTax1099.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendSettlementTax1099
            where vendSettlementTax1099.RecId == _recId;

        return vendSettlementTax1099;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        VendSettlementTax1099 this_orig = this.orig();
        VendSettlement vendSettlement;
        VendSettlement vendSettlementOffset;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        Tax1099Amount changedTax1099Amount = 0;
        Tax1099StateAmount changedTax1099StateAmount = 0;
        ExchRate paymToInvoiceRate;

        super();

        if (this.SettleTax1099Amount != this_orig.SettleTax1099Amount ||
            this.SettleTax1099StateAmount != this_orig.SettleTax1099StateAmount)
        {
            changedTax1099Amount = this.SettleTax1099Amount - this_orig.SettleTax1099Amount;
            changedTax1099StateAmount = this.SettleTax1099StateAmount - this_orig.SettleTax1099StateAmount;

            ttsbegin;

            // Find settlement records in this company
            while select forupdate vendSettlement
                where vendSettlement.AccountNum == this.VendAccount
                    && vendSettlement.TransRecId == this.ExternalRecId
            {
                changecompany(vendSettlement.OffsetCompany)
                {
                    // Find offset settlement record which may be cross-company
                    select forupdate vendSettlementOffset
                        where vendSettlementOffset.TransRecId == vendSettlement.OffsetRecid;

                    // Find VendTrans invoice which may be cross-company
                    vendTrans = VendTrans::find(vendSettlementOffset.TransRecId, true);

                    // Find VendTransOpen record which may be cross-company
                    select forupdate vendTransOpen
                        where vendTransOpen.RefRecId == vendTrans.RecId;

                    paymToInvoiceRate = vendSettlementOffset.SettleAmountCur - vendSettlementOffset.UtilizedCashDisc == 0 ? 1 : abs(vendSettlement.SettleAmountCur / (vendSettlementOffset.SettleAmountCur - vendSettlementOffset.UtilizedCashDisc));
                }

                // Update records with new amount
                vendSettlement.SettleTax1099Amount = vendSettlement.SettleTax1099Amount > 0 ?
                    vendSettlement.SettleTax1099Amount + changedTax1099Amount :
                    vendSettlement.SettleTax1099Amount - changedTax1099Amount;

                vendSettlementOffset.SettleTax1099Amount = vendSettlementOffset.SettleTax1099Amount > 0 ?
                    vendSettlementOffset.SettleTax1099Amount + (changedTax1099Amount / paymToInvoiceRate) :
                    vendSettlementOffset.SettleTax1099Amount - (changedTax1099Amount / paymToInvoiceRate);

                vendTrans.SettleTax1099Amount = vendTrans.SettleTax1099Amount > 0 ?
                    vendTrans.SettleTax1099Amount + (changedTax1099Amount / paymToInvoiceRate) :
                    vendTrans.SettleTax1099Amount - (changedTax1099Amount / paymToInvoiceRate);

                vendTransOpen.Tax1099Amount = vendTransOpen.Tax1099Amount > 0 ?
                    vendTransOpen.Tax1099Amount - (changedTax1099Amount / paymToInvoiceRate) :
                    vendTransOpen.Tax1099Amount + (changedTax1099Amount / paymToInvoiceRate);

                vendSettlement.SettleTax1099StateAmount = vendSettlement.SettleTax1099StateAmount > 0 ?
                    vendSettlement.SettleTax1099StateAmount + changedTax1099StateAmount :
                    vendSettlement.SettleTax1099StateAmount - changedTax1099StateAmount;

                vendSettlementOffset.SettleTax1099StateAmount = vendSettlementOffset.SettleTax1099StateAmount > 0 ?
                    vendSettlementOffset.SettleTax1099StateAmount + (changedTax1099StateAmount / paymToInvoiceRate) :
                    vendSettlementOffset.SettleTax1099StateAmount - (changedTax1099StateAmount / paymToInvoiceRate);

                vendTrans.SettleTax1099StateAmount = vendTrans.SettleTax1099StateAmount > 0 ?
                    vendTrans.SettleTax1099StateAmount + (changedTax1099StateAmount / paymToInvoiceRate) :
                    vendTrans.SettleTax1099StateAmount - (changedTax1099StateAmount / paymToInvoiceRate);

                vendTransOpen.Tax1099StateAmount = vendTransOpen.Tax1099StateAmount > 0 ?
                    vendTransOpen.Tax1099StateAmount - (changedTax1099StateAmount / paymToInvoiceRate) :
                    vendTransOpen.Tax1099StateAmount + (changedTax1099StateAmount / paymToInvoiceRate);

                vendSettlement.update();
                changecompany(vendSettlementOffset.company())
                {
                    if (vendSettlementOffset)
                    {
                        vendSettlementOffset.update();
                    }
                    if (vendTrans)
                    {
                        vendTrans.update();
                    }
                    if (vendTransOpen)
                    {
                        vendTransOpen.update();
                    }
                }
            }
            ttscommit;
        }
        this.updateIRSReportable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIRSReportable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>IRSReportable</c> value for the current vendor and Tax1099Box.
    /// </summary>
    /// <remarks>
    /// For certain Tax 1099 Boxes a minimum amount is required before transactions must be reported to the
    /// IRS. This minimum amount applies to the sum of all transactions per vendor and Tax1099Box. This
    /// method checks the current sum for the vendor/tax1099Box and updates the <c>IRSReportable</c> value
    /// accordingly. That is, if the sum of transactions is less than the minimum amount, all transactions
    /// are unmarked. If the sum of transactions is equal to or more than the minimum amount, all
    /// transaction are marked.
    /// </remarks>
    public void updateIRSReportable()
    {
        this.updateIRSReportableInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIRSReportableInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates if the <c>IRSReportable</c> property should be set to <c>NoYes::Yes</c> or <c>NoYes::No</c> for the current transaction
    /// and all the existing transactions that match the vendor, 1099 field and the tax year.
    /// </summary>
    /// <param name="_includeCurrentRecord">
    /// Include the current record when calculating if we are reporting to the IRS or not.
    /// </param>
    /// <param name="_isInsert">
    /// Indicates whether we are doing an insertion.
    /// </param>
    /// <remarks>
    /// This is a more performant version of the public updateIRSReportable method. It will
    /// not execute an update_recordset instruction unless it is actually needed.
    /// </remarks>
    private void updateIRSReportableInternal(boolean _includeCurrentRecord = true, boolean _isInsert = false)
    {
        VendSettlementTax1099 localVendSettlementTax1099;
        VendSettlementTax1099 localVendSettlementTax1099IRS;
        int currentYear = Year(this.TransDate);
        TransDate firstDayOfTheTaxYear = mkDate(Tax1099Constants::FirstDay, Tax1099Constants::FirstMonth, currentYear);
        TransDate lastDayOfTheTaxYear = mkDate(Tax1099Constants::LastDay, Tax1099Constants::LastMonth, currentYear);
        Tax1099Type thisTax1099Type = Tax1099Fields::find(this.Tax1099Fields).Tax1099Type;

        // <PubSect>
        switch (thisTax1099Type)
        {
            // 1099-S are summed by Vendor and Invoice
            case Tax1099Type::F1099S :
                select sum(SettleTax1099Amount) from localVendSettlementTax1099
                    where localVendSettlementTax1099.VendAccount == this.VendAccount
                        && localVendSettlementTax1099.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099.VendInvoiceId == this.VendInvoiceId
                        && localVendSettlementTax1099.RecId != this.RecId;

                select firstonly RecId from localVendSettlementTax1099IRS
                    where localVendSettlementTax1099IRS.VendAccount == this.VendAccount
                        && localVendSettlementTax1099IRS.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099IRS.VendInvoiceId == this.VendInvoiceId
                        && localVendSettlementTax1099IRS.IRSReportable == NoYes::Yes
                        && localVendSettlementTax1099IRS.RecId != this.RecId;

                break;

            // 1099-G are summed by Vendor and G-3 tax year
            case Tax1099Type::F1099G :
                select sum(SettleTax1099Amount) from localVendSettlementTax1099
                    where localVendSettlementTax1099.VendAccount == this.VendAccount
                        && localVendSettlementTax1099.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099.Tax1099TaxYear == this.Tax1099TaxYear
                        && localVendSettlementTax1099.RecId != this.RecId;

                select firstonly RecId from localVendSettlementTax1099IRS
                    where localVendSettlementTax1099IRS.VendAccount == this.VendAccount
                        && localVendSettlementTax1099IRS.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099IRS.Tax1099TaxYear == this.Tax1099TaxYear
                        && localVendSettlementTax1099IRS.IRSReportable == NoYes::Yes
                        && localVendSettlementTax1099IRS.RecId != this.RecId;

                break;

            default:
                select firstOnly RecId from localVendSettlementTax1099IRS
                    where localVendSettlementTax1099IRS.VendAccount == this.VendAccount
                        && localVendSettlementTax1099IRS.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099IRS.TransDate >= firstDayOfTheTaxYear
                        && localVendSettlementTax1099IRS.TransDate <= lastDayOfTheTaxYear
                        && localVendSettlementTax1099IRS.IRSReportable == NoYes::Yes
                        && localVendSettlementTax1099IRS.RecId != this.RecId;

                // If the sum of the settled transaction amounts already meets the minimum reportable amount,
                // then IRSReportable for all the new transactions should be 'Yes'.
                if (_isInsert && this.SettleTax1099Amount >= 0 && localVendSettlementTax1099IRS.RecId != 0)
                {
                    this.IRSReportable = NoYes::Yes;

                    return;
                }

                select sum(SettleTax1099Amount) from localVendSettlementTax1099
                    where localVendSettlementTax1099.VendAccount == this.VendAccount
                        && localVendSettlementTax1099.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099.TransDate >= firstDayOfTheTaxYear
                        && localVendSettlementTax1099.TransDate <= lastDayOfTheTaxYear
                        && localVendSettlementTax1099.RecId != this.RecId;

                break;
        }
        // </PubSect>

        Tax1099Amount sumSettleTax1099Amount = localVendSettlementTax1099.SettleTax1099Amount;

        if (_includeCurrentRecord)
        {
            sumSettleTax1099Amount += this.SettleTax1099Amount;
        }

        if (sumSettleTax1099Amount >= Tax1099Fields::find(this.Tax1099Fields).Tax1099Amount)
        {
            this.IRSReportable = NoYes::Yes;
        }
        else
        {
            this.IRSReportable = NoYes::No;
        }

        // Insertion - Set IRSReportable to Yes if the following two conditions are met while inserting a record:
        //  1. The sum of the transaction amounts is greater than or equal to the minimum reportable amount
        //  2. There exists a record whose IRSReportable is set to No
        //
        // Deletion - Set IRSReportable to No if the following two conditions are met while deleting a record:
        //  1. The sum of the transaction amounts, excluding the amount in the record being deleted, is less than the minimum reportable amount
        //  2. There exists a record whose IRSReportable is set to Yes
        //
        // Updation - 
        // Set IRSReportable to Yes if the following two conditions are met while updating a record:
        //  1. The sum of the transaction amounts, after the amount in the record being updated, is greater than or equal to the minimum reportable amount
        //  2. There exists a record whose IRSReportable is set to No
        // Set IRSReportable to No if the following two conditions are met while updating a record:
        //  1. The sum of the transaction amounts, after the amount in the record being updated, is less than the minimum reportable amount
        //  2. There exists a record whose IRSReportable is set to Yes
        VendSettlementTax1099 vendSettlementTax1099SetIRSRReportable;

        select firstOnly RecId from vendSettlementTax1099SetIRSRReportable
            where vendSettlementTax1099SetIRSRReportable.VendAccount == this.VendAccount
                && vendSettlementTax1099SetIRSRReportable.Tax1099Fields == this.Tax1099Fields
                && vendSettlementTax1099SetIRSRReportable.TransDate >= firstDayOfTheTaxYear
                && vendSettlementTax1099SetIRSRReportable.TransDate <= lastDayOfTheTaxYear
                && vendSettlementTax1099SetIRSRReportable.IRSReportable != this.IRSReportable;

        if (vendSettlementTax1099SetIRSRReportable.RecId != 0)
        {
            ttsbegin;

            this.setIRSReportable(this.IRSReportable, thisTax1099Type, firstDayOfTheTaxYear, lastDayOfTheTaxYear);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIRSReportable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>IRSReportable</c> field with the specified value for all the records matching the given parameters.
    /// </summary>
    /// <param name="_isReportable">
    /// The value to be set on the field that indicates if the transaction should be reported to IRS.
    /// </param>
    /// <param name="_tax1099Type">
    /// The type of 1099 transaction.
    /// </param>
    /// <param name="_startOfYear">
    /// The start of the tax year for the given transaction date.
    /// </param>
    /// <param name="_endOfYear">
    /// The end of the tax year for the given transaction date.
    /// </param>
    private void setIRSReportable(Tax1099IRSReportable _isReportable, Tax1099Type _tax1099Type, Tax1099Date _startOfYear, Tax1099Date _endOfYear)
    {
        VendSettlementTax1099 localVendSettlementTax1099;

        localVendSettlementTax1099.skipDatabaseLog(true);
        localVendSettlementTax1099.skipDataMethods(true);
        localVendSettlementTax1099.skipEvents(true);

        boolean isUpdated = this.updateIRSReportableForTax1099Type(localVendSettlementTax1099, _isReportable, _tax1099Type, _startOfYear, _endOfYear);

        if (!isUpdated)
        {
            update_recordset localVendSettlementTax1099
                setting irsReportable = _isReportable
                where localVendSettlementTax1099.VendAccount == this.VendAccount
                    && localVendSettlementTax1099.Tax1099Fields == this.Tax1099Fields
                    && localVendSettlementTax1099.TransDate >= _startOfYear
                    && localVendSettlementTax1099.TransDate <= _endOfYear;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIRSReportableForTax1099Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reportable value based on Tax1099 type.
    /// </summary>
    /// <param name = "_localVendSettlementTax1099">
    /// The <c>VendSettlementTax1099</c> record to update.
    /// </param>
    /// <param name="_isReportable">
    /// The value to be set on the field that indicates if the transaction should be reported to IRS.
    /// </param>
    /// <param name="_tax1099Type">
    /// The type of 1099 transaction.
    /// </param>
    /// <param name="_startOfYear">
    /// The start of the tax year for the given transaction date.
    /// </param>
    /// <param name="_endOfYear">
    /// The end of the tax year for the given transaction date.
    /// </param>
    /// <returns>
    /// true if the record is updated; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean updateIRSReportableForTax1099Type(
        VendSettlementTax1099 _localVendSettlementTax1099,
        Tax1099IRSReportable _isReportable,
        Tax1099Type _tax1099Type,
        Tax1099Date _startOfYear,
        Tax1099Date _endOfYear)
    {
        boolean isUpdated;
        VendSettlementTax1099 localVendSettlementTax1099 = _localVendSettlementTax1099;

        switch (_tax1099Type)
        {
            //1099-S are reported by Vendor and Invoice
            case Tax1099Type::F1099S :
                update_recordset localVendSettlementTax1099
                    setting irsReportable = _isReportable
                    where localVendSettlementTax1099.VendAccount == this.VendAccount
                        && localVendSettlementTax1099.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099.VendInvoiceId == this.VendInvoiceId
                        && localVendSettlementTax1099.TransDate >= _startOfYear
                        && localVendSettlementTax1099.TransDate <= _endOfYear;

                isUpdated = true;
                break;

            //1099-G are reported by Vendor and G-3 tax year
            case Tax1099Type::F1099G :
                update_recordset localVendSettlementTax1099
                    setting irsReportable = _isReportable
                    where localVendSettlementTax1099.VendAccount == this.VendAccount
                        && localVendSettlementTax1099.Tax1099Fields == this.Tax1099Fields
                        && localVendSettlementTax1099.Tax1099TaxYear == this.Tax1099TaxYear
                        && localVendSettlementTax1099.TransDate >= _startOfYear
                        && localVendSettlementTax1099.TransDate <= _endOfYear;

                isUpdated = true;
                break;
        }

        return isUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (this.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099S::grossProceeds()))
            {
                if ((this.Tax1099DateOfClosing == dateNull()) || (this.Tax1099AddressOrLegalDesc == ""))
                {
                    isValid = checkFailed("@SPS3");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTax1099ForeignIndicator</Name>
				<Source><![CDATA[
    public display Tax1099ForeignEntityIndicator displayTax1099ForeignIndicator()
    {
        VendTable vendTable = VendTable::find(this.VendAccount);

        return vendTable.ForeignEntityIndicator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>US</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123590</DeveloperDocumentation>
	<FormRef>Tax1099Summary</FormRef>
	<Label>@SYS84742</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>VendAccount</TitleField1>
	<TitleField2>SettleTax1099Amount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTax1099StateAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BoxAndAmounts</Name>
			<Label>@SYS84743</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099CountryRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTax1099StateAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IRSReportable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualTransaction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInternalInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099G1Fields</Name>
			<Label>@SPS1936</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateTaxID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateTaxWithheld</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099GFields</Name>
			<Label>@SPS1093</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099TaxYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099TradeOrBusiness</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099SFields</Name>
			<Label>@SPS1102</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099DateOfClosing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099AddressOrLegalDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099PropertyOrServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099BuyersTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IRSReportable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099IRSReportable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchInternalInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInternalInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleTax1099Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SettleTax1099Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleTax1099StateAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SettleTax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
			<Label>@SPS1937</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099AddressOrLegalDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099AddressOrLegalDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099BuyersTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099BuyersTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099CountryRegion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Tax1099DateOfClosing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099DateOfClosing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099Fields</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099PropertyOrServices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099PropertyOrServices</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099StateTaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>Tax1099StateTaxID</ExtendedDataType>
			<Label>@SPS1939</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateTaxWithheld</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>Tax1099StateTaxWithheld</ExtendedDataType>
			<Label>@SPS1941</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Tax1099TaxYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099TaxYear</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099TradeOrBusiness</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099TradeOrBusiness</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099ManualTransaction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendTaxBox</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099State</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StateVendorTaxBox</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099State</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FieldsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsAddressCountryRegionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099CountryRegion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UpdateIRSReportableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IRSReportable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettleTax1099Amount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SettleTax1099AmountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettleTax1099Amount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendSettlementTax1099</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099CountryRegion</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>Tax1099CountryRegion</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressState</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099CountryRegion</Name>
					<Field>Tax1099CountryRegion</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099Fields</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099Fields</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Fields</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendSettlementTax1099Fields</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099Fields</Name>
					<Field>Tax1099Fields</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123520</EntityRelationshipRole>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendorInvoice</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExternalVendorInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExternalRecId</Name>
					<Field>ExternalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Vendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendorAccountNumber</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorSettlementTax1099</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendStateTaxID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123591</EntityRelationshipRole>
			<RelatedTable>VendStateTaxID</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendorStateTaxID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorSettlementTax1099</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>