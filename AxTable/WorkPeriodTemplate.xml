<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkPeriodTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkPeriodTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the <c>LegalEntityDefault</c> field of the current <c>WorkPeriodTemplate</c> record.
    /// </summary>
    /// <returns>
    ///    true if the current <c>WorkPeriodTemplate</c> record does not conflict with other records;
    ///    otherwise, false.
    /// </returns>
    public boolean checkDefault()
    {
        WorkPeriodTemplate  defaultPeriodTemplate;

        if (this.LegalEntityDefault)
        {
            defaultPeriodTemplate = WorkPeriodTemplate::findDefault(this.LegalEntity);
            if (   defaultPeriodTemplate
                && defaultPeriodTemplate.RecId != this.RecId)
            {
                return checkFailed(strfmt("@SYS133259",defaultPeriodTemplate.Name,CompanyInfo::find(this.LegalEntity).name()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedDayStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>FixedDayStart</c> field of the current <c>WorkPeriodTemplate</c> record.
    /// </summary>
    /// <returns>
    /// true if the current <c>FixedDayStart</c> is valid; otherwise, false.
    /// </returns>
    public boolean checkFixedDayStart()
    {
        boolean     result = true;

        if (   this.FixedDayStart != WeekDays::None
            && !this.setWorkDays().in(this.FixedDayStart))
        {
            result = checkFailed(strfmt("@SYS329417",this.FixedDayStart));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists a record in the database when super is called.
    /// </summary>
    /// <remarks>
    ///    System defined method provided as an event to apply logic before and after a record is inserted in
    ///    the database.
    /// </remarks>
    public void insert()
    {
        this.setWorkTimeIdDataAreaId();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WorkPeriodTemplate, WorkTimeIdDataAreaId):
                this.setWorkTimeIdDataAreaId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(WorkPeriodTemplate, WorkTimeIdDataAreaId),
                [fieldNum(WorkPeriodTemplate, LegalEntity), fieldNum(WorkPeriodTemplate, WorkTimeId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of working date week day numbers.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> object that contains week day numbers of working days.
    /// </returns>
    public Set setWorkDays()
    {
        #TimeConstants
        WorkTimeLine    workTimeLine;
        Counter         i;
        Set             setWorkDays;

        setWorkDays = new Set(Types::Enum);

        if (   this.WorkTimeIdDataAreaId
            && this.WorkTimeId)
        {
            workTimeLine.company(this.WorkTimeIdDataAreaId);
            while select workTimeLine
                where workTimeLine.WorkTimeId == this.WorkTimeId
            {
                if (workTimeLine.capacity())
                {
                    setWorkDays.add(workTimeLine.WeekDay);
                }
            }
        }
        else
        {
            for (i=1; i <= #daysPerWeek;i++)
            {
                setWorkDays.add(i);
            }
        }

        return setWorkDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkTimeIdDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the field <c>WorkTimeIdDataAreaId</c> value equal to the <c>dataAreaId</c> value for the
    ///    related valid entity.
    /// </summary>
    public void setWorkTimeIdDataAreaId()
    {
        this.WorkTimeIdDataAreaId = this.WorkTimeId ? CompanyInfo::findRecId(this.LegalEntity).DataArea : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists changes to a record in the database when super is called.
    /// </summary>
    /// <remarks>
    ///    System defined method provided as an event to apply logic before and after a record is updated in
    ///    the database.
    /// </remarks>
    public void update()
    {
        this.setWorkTimeIdDataAreaId();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a field value.
    /// </summary>
    /// <param name="_fieldName">
    ///    A string that contains the name of the field.
    /// </param>
    /// <param name="_arrayIndex">
    ///    An integer that contains the array index of the field.
    /// </param>
    /// <returns>
    ///    true if the field contains a valid value; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean             ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(WorkPeriodTemplate, LegalEntityDefault):
                ret = ret && this.checkDefault();
                break;
            case fieldstr(WorkPeriodTemplate,FixedDayStart):
            case fieldstr(WorkPeriodTemplate,WorkTimeId):
                ret = ret && this.checkFixedDayStart();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean         ret;

        ret = super();
        ret = ret && this.checkDefault();
        ret = ret && this.checkFixedDayStart();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists a record in the database when super is called.
    /// </summary>
    /// <remarks>
    ///    System defined method provided as an event to apply logic before and after a record is inserted or
    ///    updated in the database.
    /// </remarks>
    public void write()
    {
        this.setWorkTimeIdDataAreaId();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAnyExistInCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>WorkPeriodTemplate</c> record exists for the specified company.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The ID of the company in which to search for the period template.
    /// </param>
    /// <returns>
    /// true if any <c>WorkPeriodTemplate</c> record exists; otherwise, false.
    /// </returns>
    public static boolean checkAnyExistInCompany(dataAreaId     _dataAreaId)
    {
        WorkPeriodTemplate  workPeriodTemplate;

        select firstonly RecId from workPeriodTemplate
                where workPeriodTemplate.LegalEntity == CompanyInfo::findDataArea(_dataAreaId).RecId;

        return workPeriodTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a <c>WorkPeriodTemplate</c> record exists for the specified period template name; if
    ///    not, a warning message is displayed.
    /// </summary>
    /// <param name="_refRecId">
    ///    An integer that contains a period template record ID.
    /// </param>
    /// <returns>
    ///    true if a <c>WorkPeriodTemplate</c> record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(WorkPeriodTemplateRecId  _refRecId)
    {
        if (!WorkPeriodTemplate::exist(_refRecId))
        {
            return checkFailed(strfmt(WorkPeriodTemplate::txtNotExist(), _refRecId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistInCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a <c>WorkPeriodTemplate</c> record exists for the specified period template
    ///    <c>recId</c> field in the company.
    /// </summary>
    /// <param name="_refRecId">
    ///    A period template <c>recId</c> value.
    /// </param>
    /// <param name="_dataAreaId">
    ///    The ID of the company in which to search for the period template.
    /// </param>
    /// <returns>
    ///    true if a <c>WorkPeriodTemplate</c> record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If a <c>WorkPeriodTemplate</c> record does not exist, a warning message is displayed.
    /// </remarks>
    public static boolean checkExistInCompany(
        WorkPeriodTemplateRecId  _refRecId,
        dataAreaId               _dataAreaId)
    {
        WorkPeriodTemplate workPeriodTemplate = WorkPeriodTemplate::find(_refRecId);
        if (workPeriodTemplate.LegalEntity != CompanyInfo::findDataArea(_dataAreaId).RecId)
        {
            return checkFailed(strfmt(WorkPeriodTemplate::txtNotExist(), workPeriodTemplate.Name));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>WorkPeriodTemplate</c> record exists for the specified period template
    /// record ID.
    /// </summary>
    /// <param name="_refRecId">
    /// An integer that contains a period template record ID.
    /// </param>
    /// <returns>
    /// true if a <c>WorkPeriodTemplate</c> record exists; otherwise, false.
    /// </returns>
    public static boolean exist(WorkPeriodTemplateRecId _refRecId)
    {
        return    _refRecId
               && (select firstonly RecId from workPeriodTemplate
                      where workPeriodTemplate.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>WorkPeriodTemplate</c> record based on a specified period template record ID.
    /// </summary>
    /// <param name="_refRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>WorkPeriodTemplate</c> record; otherwise, an empty record.
    /// </returns>
    public static WorkPeriodTemplate find(
        WorkPeriodTemplateRecId _refRecId,
        boolean                 _forupdate = false)
    {
        WorkPeriodTemplate  workPeriodTemplate;

        workPeriodTemplate.selectForUpdate(_forupdate);

        if (_refRecId)
        {
            select firstonly workPeriodTemplate
                where workPeriodTemplate.RecId == _refRecId;
        }

        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the default period template record for the specified valid entity.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    An integer that contains the valid entity <c>recId</c>.
    /// </param>
    /// <returns>
    ///    A <c>WorkPeriodTemplate</c> record.
    /// </returns>
    public static WorkPeriodTemplate findDefault(RefRecId _legalEntityRecId)
    {
        WorkPeriodTemplate workPeriodTemplate;

        if (_legalEntityRecId)
        {
            select firstonly workPeriodTemplate
                where workPeriodTemplate.LegalEntity == _legalEntityRecId
                   && workPeriodTemplate.LegalEntityDefault;
        }

        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>WorkPeriodTable</c> record based on a specified period template name.
    /// </summary>
    /// <param name="_periodTemplateName">
    /// A string that contains the period template name.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>WorkPeriodTemplate</c> record; otherwise, an empty record.
    /// </returns>
    public static WorkPeriodTemplate findName(
        PeriodTemplateName  _periodTemplateName,
        boolean             _forupdate = false)
    {
        WorkPeriodTemplate  workPeriodTemplate;

        workPeriodTemplate.selectForUpdate(_forupdate);

        if (_periodTemplateName)
        {
            select firstonly workPeriodTemplate
                where workPeriodTemplate.Name == _periodTemplateName;
        }

        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefWorkPeriodTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the <c>WorkPeriodTemplate</c> form for the specified period template.
    /// </summary>
    /// <param name="_workPeriodTemplate">
    ///    The <c>WorkPeriodTemplate</c> record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///    The form object that is calling the <c>WorkPeriodTemplate</c> form.
    /// </param>
    public static void jumpRefWorkPeriodTemplate(
        WorkPeriodTemplate _workPeriodTemplate,
        Object             _caller)
    {
        Args args = new Args();
        args.caller(_caller);

        FormRun  formRun = new MenuFunction(menuitemDisplayStr(WorkPeriodTemplate), MenuItemType::Display).create(args);
        formRun.run();

        formRun.dataSource().findRecord(_workPeriodTemplate);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPeriodTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes a lookup in order to select a period template record ID.
    /// </summary>
    /// <param name="_ctrl">
    ///    A <c>FormControl</c> object.
    /// </param>
    /// <param name="_legalEntityDataAreaId">
    ///    A string that contains the valid entity <c>dataAreaId</c> value.
    /// </param>
    public static void lookupPeriodTemplate(
        FormControl             _ctrl,
        LegalEntityDataAreaId   _legalEntityDataAreaId)
    {
        SysTableLookup          sysTableLookup      = SysTableLookup::newParameters(tablenum(WorkPeriodTemplate),_ctrl);
        Query                   query               = new Query();
        QueryBuildDataSource    qbdsPeriodTemplate  = query.addDataSource(tablenum(WorkPeriodTemplate));
        QueryBuildDataSource    qbdsCompanyInfo;

        qbdsPeriodTemplate.addSelectionField(fieldnum(WorkPeriodTemplate,RecId));

        qbdsCompanyInfo = qbdsPeriodTemplate.addDataSource(tablenum(CompanyInfo));
        qbdsCompanyInfo.joinMode(JoinMode::InnerJoin);
        qbdsCompanyInfo.relations(true);

        SysQuery::findOrCreateRange(qbdsCompanyInfo,fieldnum(CompanyInfo,DataArea)).value(queryValue(_legalEntityDataAreaId));

        sysTableLookup.addLookupfield(fieldnum(WorkPeriodTemplate,Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferencePeriodTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes a lookup in order to select a period template record.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    A <c>FormReferenceControl</c> object.
    /// </param>
    /// <param name="_legalEntityDataAreaId">
    ///    A string that contains the valid entity <c>dataAreaId</c> value.
    /// </param>
    /// <returns>
    ///    A <c>WorkPeriodTemplate</c> record.
    /// </returns>
    public static WorkPeriodTemplate lookupReferencePeriodTemplate(
        FormReferenceControl    _formReferenceControl,
        LegalEntityDataAreaId   _legalEntityDataAreaId)
    {
        SysReferenceTableLookup     sysTableLookup      = SysReferenceTableLookup::newParameters(tablenum(WorkPeriodTemplate),_formReferenceControl);
        Query                       query               = new Query();
        QueryBuildDataSource        qbdsPeriodTemplate  = query.addDataSource(tablenum(WorkPeriodTemplate));
        QueryBuildDataSource        qbdsCompanyInfo;

        qbdsCompanyInfo = qbdsPeriodTemplate.addDataSource(tablenum(CompanyInfo));
        qbdsCompanyInfo.joinMode(JoinMode::InnerJoin);
        qbdsCompanyInfo.relations(true);

        SysQuery::findOrCreateRange(qbdsCompanyInfo,fieldnum(CompanyInfo,DataArea)).value(queryValue(_legalEntityDataAreaId));

        sysTableLookup.addLookupfield(fieldnum(WorkPeriodTemplate,Name));

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup() as WorkPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS131349";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS131674</DeveloperDocumentation>
	<FormRef>workperiodTemplate</FormRef>
	<Label>@SYS131129</Label>
	<SingularLabel>@SYS131673</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>LegalEntity</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WorkPeriodTemplateLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WorkPeriodTemplateLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTimeIdDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDayStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTimeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntityDefault</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FixedDayStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTimeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FixedDayStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PeriodTemplateFixedDayStart</ExtendedDataType>
			<EnumType>WeekDays</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS129100</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LegalEntityDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS26467</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PeriodTemplateName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTimeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkTimeIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTimeIdDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegalEntity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PeriodTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkTimeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WorkTimeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkingTimeTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PeriodTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTimeIdDataAreaId</Name>
					<Field>WorkTimeIdDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTimeId</Name>
					<Field>WorkTimeId</Field>
					<RelatedField>WorkTimeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>