<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCROneTimePromotionFund</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCROneTimePromotionFund extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the description field when the fund ID is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field which was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        TAMFundTable fundTable;

        if (_fieldId == fieldNum(MCROneTimePromotionFund, FundID))
        {
            fundTable = TAMFundTable::find(this.FundID);
            this.Description = fundTable.Description;
        }
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromotionFunds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the promotion fund records over to the one time promotion.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMTradePromotionId</c> of the trade allowance record to which to copy the funds.
    /// </param>
    public static void copyPromotionFunds(TAMPromotionID  _tamPromotionID)
    {
        TAMPromotionFund                tamPromotionFund;
        MCROneTimePromotionFund         tmpOneTimePromotionFunds;

        ttsbegin;
        // insert funds
        while select FundID, Percent from tmpOneTimePromotionFunds
        {
            tamPromotionFund.PromotionID = _tamPromotionID;
            tamPromotionFund.Fund = tmpOneTimePromotionFunds.FundID;
            tamPromotionFund.Percent = tmpOneTimePromotionFunds.Percent;
            tamPromotionFund.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLumpSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the lump sum merchandising event to match the deduction.
    /// </summary>
    /// <param name="_tamTradePromotionTo">
    /// The one time promotion record for which the lump sum event is to be created.
    /// </param>
    /// <param name="_tamDeduction">
    /// The deduction record for which the lump sum event is to be created.
    /// </param>
    /// <returns>
    /// The newly created merchandising event record.
    /// </returns>
    public static TAMMerchandisingEvent createLumpSum(TAMTradePromotion   _tamTradePromotionTo,
                                                             TAMDeduction        _tamDeduction)
    {
        NumberSeq                       numberSeq;
        MCRMerchandisingEventID         merchEventID;
        TAMMerchandisingEvent           tamMerchandisingEvent;
        TAMCopyTradePromotion           tamCopyTradePromotionMerchEvent;
        TAMPromotionParameters          tamPromotionParameters;
        TAMMerchEventPricing            tamMerchEventPricing;

        ttsbegin;
        numberSeq = NumberSeq::newGetNum(TAMPromotionParameters::numRefMerchandisingEventID());
        merchEventID = numberSeq.num();
        tamMerchandisingEvent.MerchandisingEventID = merchEventID;
        tamMerchandisingEvent.PromotionID = _tamTradePromotionTo.PromotionID;

        tamCopyTradePromotionMerchEvent = new TAMCopyTradePromotion(_tamTradePromotionTo);
        tamCopyTradePromotionMerchEvent.copyToMerchEvent(merchEventID);

        tamMerchandisingEvent.MerchandisingEventCategory = MCRMerchandisingEventCategory::LumpSum;
        tamMerchandisingEvent.insert();

        tamPromotionParameters = TAMPromotionParameters::find();

        tamMerchEventPricing.MerchandisingEventID = tamMerchandisingEvent.MerchandisingEventID;
        tamMerchEventPricing.lsOffsetLedgerDimension = tamPromotionParameters.lsClaimOffsetLedgerDimension;
        tamMerchEventPricing.tfClaimPayType = TAMPaymentType::CustomerDeduction;
        tamMerchEventPricing.LumpSumAmount = _tamDeduction.RemainAmountCur;
        tamMerchEventPricing.LumpSumApprovedAmount = _tamDeduction.RemainAmountCur;
        tamMerchEventPricing.tfPayTo = _tamDeduction.AccountNum;
        tamMerchEventPricing.OneTimeLumpSum = true;
        tamMerchEventPricing.LumpSumStatus = MCRLumpSumStatus::Authorize;
        tamMerchEventPricing.insert();
        ttscommit;

        return tamMerchandisingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPromotionCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a promotion customer record for the customer on the deduction if one does not already exist.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionId</c> of the promotion to which to add the customer.
    /// </param>
    /// <param name="_tamDeduction">
    /// The deduction record for which the one time promotion is being created.
    /// </param>
    public static void createPromotionCustomer(TAMPromotionID    _tamPromotionID,
                                                      TAMDeduction      _tamDeduction)
    {
        TAMPromotionCust                tamPromotionCust;

        select firstonly RecId from tamPromotionCust
            where tamPromotionCust.PromotionID  == _tamPromotionID
                && tamPromotionCust.CustAccount == _tamDeduction.AccountNum;

        if (!tamPromotionCust)
        {
            tamPromotionCust.CustAccount = _tamDeduction.AccountNum;
            tamPromotionCust.PromotionID = _tamPromotionID;
            tamPromotionCust.insert();

            PriceDisc_LineDisc::tamPromotionCustClearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the open customer transaction that was created for the one time promotion to the deduction.
    /// </summary>
    /// <param name="_tamMerchandisingEvent">
    /// The merchandising event that generated the open customer transaction that was created for the one time promotion.
    /// </param>
    /// <param name="_tamDeduction">
    /// The deduction to which to match the open customer transaction.
    /// </param>
    public static void matchDeduction(TAMMerchandisingEvent _tamMerchandisingEvent, TAMDeduction _tamDeduction)
    {
        TAMDeduction                tamDeductionLocal;
        CustTrans                   custTrans;
        CustTransOpen               custTransOpen;
        CustInvoiceJour             custInvoiceJour;
        TmpTAMDeductionParmMatch    tmpDeductionParmMatch;
        TAMDeductionUpdate          tamDeductionUpdate;
        SpecTransManager            specTransManager;
        TAMMerchEventTrans          tamMerchEventTransLocal;

        try
        {
            // Find CustTransOpen of approved one time promotion claim
            select custTransOpen
            where custTransOpen.AccountNum == _tamDeduction.AccountNum
            join RecId, CurrencyCode from custTrans
            where custTrans.RecId == custTransOpen.RefRecId
            join RecId from custInvoiceJour
            where custInvoiceJour.InvoiceId == custTrans.Invoice
                && custInvoiceJour.LedgerVoucher == custTrans.Voucher
                && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                && custInvoiceJour.InvoiceDate == custTrans.TransDate
            exists join tamMerchEventTransLocal
            where tamMerchEventTransLocal.AccountNum == custInvoiceJour.InvoiceAccount
                && tamMerchEventTransLocal.CustInvoiceNum == custInvoiceJour.InvoiceId
                && tamMerchEventTransLocal.MerchandisingEventID == _tamMerchandisingEvent.MerchandisingEventID;

            if (! custTransOpen.RecId)
            {
                return;
            }

            // Fill temp table to prepare match
            specTransManager =
                tmpDeductionParmMatch.fillDeductionCustTransOpen(_tamDeduction,
                                                                  custTransOpen);

            // Build object to perform match
            tamDeductionUpdate = TAMDeductionUpdate_Match::construct(tmpDeductionParmMatch,
                                                                    specTransManager);

            // Amounts should match exactly so form should not appear, but just in case signal
            // that match should be done without prompt
            tamDeductionUpdate.parmSkipPrompt(true);

            // If match successful and deduction record is a form datasource then refresh
            if (tamDeductionUpdate.run())
            {
                // Update deduction with promotion information of one time promotion
                tamDeductionLocal = TAMDeduction::find(_tamDeduction.tamDeductionID, true);
                if (tamDeductionLocal)
                {
                    ttsbegin;
                    tamDeductionLocal.tamPromotionID = _tamMerchandisingEvent.PromotionID;
                    tamDeductionLocal.mcrMerchandisingEventID = _tamMerchandisingEvent.MerchandisingEventID;
                    tamDeductionLocal.update();
                    ttscommit;
                }
            }
        }
        catch
        {
            // If anything fails with match still allow form to close (see closeOk)
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLumpSumAndMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the lump sum to be matched against the deduction.
    /// </summary>
    /// <param name="_merchandisingEvent">
    /// The lump sum that is to be posted.
    /// </param>
    /// <param name="_tamTradePromotionTo">
    /// The trade allowance agreement that was created for the one time promotion.
    /// </param>
    /// <param name="_tamDeduction">
    /// The deduction to which to match the lump sum.
    /// </param>
    public static void postLumpSumAndMatch(TAMMerchandisingEvent _merchandisingEvent,
                                                  TAMTradePromotion     _tamTradePromotionTo,
                                                  TAMDeduction          _tamDeduction)
    {
        MCROneTimePromotionFundLumpSum mCROneTimePromotionFundLumpSum = 
            MCROneTimePromotionFundLumpSum::newFromMerchEventPromotionDeduction(_merchandisingEvent, _tamTradePromotionTo, _tamDeduction);

        mCROneTimePromotionFundLumpSum.postAndMatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPromotion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the one time promotion fund.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The trade promotion to update.
    /// </param>
    /// <param name="_promotionDescription">
    /// The promotion description.
    /// </param>
    /// <param name="_copyTemplateFunds">
    /// Indicates whether to copy the template funds.
    /// </param>
    /// <param name="_tamDeduction">
    /// The deduction record to use.
    /// </param>
    public static void processPromotion(TAMPromotionID   _tamPromotionID,
                                               Description      _promotionDescription,
                                               boolean          _copyTemplateFunds,
                                               TAMDeduction     _tamDeduction)
    {
        TAMTradePromotion               tamTradePromotionFrom;
        TAMTradePromotion               tamTradePromotionTo;
        TAMCopyTradePromotion           tamCopyTradePromotion;
        TAMMerchandisingEvent           tamMerchandisingEvent;

        tamTradePromotionFrom = TAMTradePromotion::find(TAMPromotionParameters::find().EndOfPeriodTemplate, '');
        tamTradePromotionFrom.Template = false;

        try
        {
            ttsbegin;
            tamCopyTradePromotion = new TAMCopyTradePromotion(tamTradePromotionFrom);
            tamCopyTradePromotion.copyToNewPromotion(_tamPromotionID,
                                                        _promotionDescription,
                                                        false,
                                                        false,
                                                        _copyTemplateFunds,
                                                        false,
                                                        false,
                                                        true,
                                                        false,
                                                        false);

            MCROneTimePromotionFund::createPromotionCustomer(_tamPromotionID, _tamDeduction);

            if (!_copyTemplateFunds)
            {
                MCROneTimePromotionFund::copyPromotionFunds(_tamPromotionID);
            }

            tamTradePromotionTo = TAMTradePromotion::find(_tamPromotionID, '', true);

            tamMerchandisingEvent = MCROneTimePromotionFund::createLumpSum(tamTradePromotionTo, _tamDeduction);
            ttscommit;
        }
        catch
        {
            info("@MCR4410345");
        }

        MCROneTimePromotionFund::updatePromotionStatus(tamTradePromotionTo);

        MCROneTimePromotionFund::postLumpSumAndMatch(tamMerchandisingEvent, tamTradePromotionTo, _tamDeduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePromotionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the one time promotion.
    /// </summary>
    /// <param name="_tamTradePromotionTo">
    /// The promotion that needs to be updated.
    /// </param>
    public static void updatePromotionStatus(TAMTradePromotion _tamTradePromotionTo)
    {
        TAMCalcMerchandiseCost          tamCalcMerchandiseCost;

        _tamTradePromotionTo.PromotionStatus = TAMStatus::CustomerApproved;
        _tamTradePromotionTo.EndOfPeriod = true;
        _tamTradePromotionTo.statusChanged(true);

        // This transaction was included because the table cannot be updated outside a transaction
        ttsbegin;
        _tamTradePromotionTo.update();
        ttscommit;

        // Calculate merchandise cost
        tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(
            TAMPromoMerchEvent::Promotion,
            '',
            _tamTradePromotionTo.PromotionID,
            _tamTradePromotionTo.CustAccount);

        tamCalcMerchandiseCost.calcPromotionCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFunds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified funds.
    /// </summary>
    /// <returns>
    /// true if the funds are valid; otherwise, false.
    /// </returns>
    public static boolean validateFunds()
    {
        MCROneTimePromotionFund     tmpOneTimePromotionFunds;
        Percent                     totalPercent;
        TAMFundTable                tamFundTable;
        boolean                     ret = true;

        // Validate that funds = 100%
        select sum(Percent) from tmpOneTimePromotionFunds;

        totalPercent = tmpOneTimePromotionFunds.Percent;
        if (totalPercent != 100)
        {
            error("@MCR27712");
            ret = false;
        }

        // When a fund is specified and the fund is not approve issue an error.
        while select FundID from tmpOneTimePromotionFunds
            group by FundID
            notexists join tamFundTable
                where tamFundTable.FundID == tmpOneTimePromotionFunds.FundID
                && tamFundTable.Status == TAMFundStatus::Approved
        {
           error(strFmt("@MCR27714",tmpOneTimePromotionFunds.FundID));
           ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeAgreements</ConfigurationKey>
	<DeveloperDocumentation>@MCR27709</DeveloperDocumentation>
	<Label>@MCR27709</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>FundID</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMFundID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMFundTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TAMFundTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundID</Name>
					<SourceEDT>TAMFundID</SourceEDT>
					<Field>FundID</Field>
					<RelatedField>FundID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Fund</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>