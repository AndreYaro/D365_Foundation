<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it can modify the <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_bomParameters">
    /// A record that holds the BOM parameters; optional.
    /// </param>
    /// <returns>
    /// true if the BOM version record may be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The default value for <paramref name="_bomParameters" /> is <c>BOMParameters::find()</c>.
    /// </remarks>
    public boolean allowEdit(BOMParameters  _bomParameters = BOMParameters::find())
    {
        if (! this.Approved || ! _bomParameters.BlockEditing)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approverPersonnelNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the personnel number of the worker who approved the current record.
    /// </summary>
    /// <returns>
    ///     The personnel number if the record is approved.
    /// </returns>
    public display HcmPersonnelNumberId approverPersonnelNumber()
    {
        HcmWorker   hcmWorker = HcmWorker::find(this.Approver);
        return hcmWorker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomTable</Name>
				<Source><![CDATA[
    public BOMTable bomTable()
    {
        return BOMTable::find(this.bomId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the item inventory dimensions for the record of the current bills of materials version.
    /// </summary>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> record that is related to the current record of the bills of materials
    ///    version; optional.
    /// </param>
    public void clearProductDimensions(InventTable _inventTable = this.inventTable())
    {
        InventDim       inventDimOrig;
        InventDim       inventDim;
        InventDimParm   inventDimParm;
        Common          inventDimJoin;

        inventDimOrig = this.inventDim();
        inventDim.data(inventDimOrig);

        inventDimParm.setAllInventDim();
        inventDimParm.clearProductDimensions();
        inventDim.clearNotSelectedDim(inventDimParm);

        if (! InventDim::isInventDimEqual(inventDim,inventDimOrig))
        {
            inventDim = InventDim::findOrCreate(inventDim);
            this.InventDimId = inventDim.InventDimId;

            if (FormDataUtil::isFormDataSource(this))
            {
                inventDimJoin = this.joinChildTable(tablenum(InventDim));

                // when called from a new (not saved) record the inventDimJoin buffer is false so the check must be on tableId.
                if (inventDimJoin.TableId == tablenum(InventDim) && FormDataUtil::isFormDataSource(inventDimJoin))
                {
                    inventDimJoin.data(inventDim);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the configuration ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    ///    Returns a string that holds the configuration ID.
    /// </returns>
    /// <remarks>
    ///    <c>ConfigId</c> is an extended data type of type str.
    /// </remarks>
    public display EcoResItemConfigurationName configId()
    {
        return this.inventDim().ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (!this.canEdit())
        {
            if (#pmfEnabled)
            {
                throw error("@PDS1490");
            }
            else
            {
                throw error("@SYS96300");
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormulaDefaultQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default quantity for a formula BOM version.
    /// </summary>
    /// <param name="_itemId">
    /// The Id of the item for which to get the default quantity.
    /// </param>
    /// <param name="_inventDimId">
    /// The Id of the inventory dimension record for which to get the default quantity.
    /// </param>
    /// <returns>
    /// The default quantity if the BOM version is formula-based; otherwise, 0.
    /// </returns>
    public Qty getFormulaDefaultQty(
        ItemId      _itemId,
        InventDimId _inventDimId
        )
    {
        Qty defaultQty;

        if (this.PmfTypeId == PmfBOMFormula::Formula)
        {
            defaultQty = max(InventTable::find(_itemId).inventStandardQty(_inventDimId), 1, this.PmfBatchSize);
        }

        return defaultQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMTable</Name>
				<Source><![CDATA[
    public void initFromBOMTable(BOMTable _bomTable)
    {
        this.bomId  = _bomTable.bomId;

        this.defaultName();
        this.defaultPmfTypeId();
        this.defaultItemDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable table)
    {
        this.ItemId = table.ItemId;

        if (#PmfEnabled)
        {
            this.defaultYieldPercentage();
            this.defaultPmfTypeId();
            this.defaultPdsCWFromQuantity();
            this.defaultPdsCWSize();
            this.defaultFromQuantity();
            this.defaultBatchSize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (BOMParameters::find().MandatoryQtyAndDate)
        {
            this.FromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            this.ToDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        super();

        if (#PmfEnabled)
        {
            this.PmfYieldPct = 100;
            this.PmfBatchSize = 1;
            this.FromQty      = 1;
            this.PmfFormulaMultiple = 0;
            this.PmfFormulaVersionCalculation = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>BOMVersion</c> table.
    /// </summary>
    /// <param name="_checkForCircularity">This parameter is set to false when called from Product Builder or Product Configuration.</param>
    public void insert(boolean _checkForCircularity = true)
    {
        if (this.bomId && ! this.Name)
        {
            this.Name = this.bomTable().Name;
        }
        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && !this.PdsCWSize)
        {
            this.PdsCWSize = 1;
            this.PmfBatchSize = PdsCatchWeight::inventQty(this.ItemId, this.PdsCWSize, this.pmfFormulaUnit());
        }
        else if (#PmfEnabled
            && !this.PmfBatchSize)
        {
            this.PmfBatchSize = 1;
        }

        this.SequenceId = (this.SequenceId != 0) ? this.SequenceId : BOMVersion::nextCreationSequenceId(this);

        // check if BOM level recalculation is needed
        BOMLevelCalc::checkLevelRecalcBOMVersion(this);

        super();

        BOMParameters bomParams = BOMParameters::find();
        if (_checkForCircularity && !bomParams.mustCheckCircularityManual() && bomParams.BOMCircularityCheckStrategy == BOMCircularityCheckStrategy::OptimizeForLowComplexity)
        {
            BOMHierarchyCheck::newBOMcheckNotCircularity().scanUpBOM(this,'',this.FromDate, this.ToDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the color ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// Returns a string that holds the color ID.
    /// </returns>
    public display EcoResItemColorName inventColorId()
    {
        return this.inventDim().InventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the style ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// Returns a string that holds the style ID.
    /// </returns>
    public display EcoResItemStyleName inventStyleId()
    {
        return this.inventDim().InventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the version ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// Returns a string that holds the version ID.
    /// </returns>
    public display EcoResItemVersionName inventVersionId()
    {
        return this.inventDim().InventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventDim record that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// An <c>inventDim</c> record.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active <c>InventItemPrice</c> record that is associated to the current record.
    /// </summary>
    /// <returns>
    /// The <c>InventItemPrice</c> record that is associated with the current record.
    /// </returns>
    public InventItemPrice inventItemPrice()
    {
        InventItemPrice inventItemPrice;

        inventItemPrice = InventItemPrice::findCurrent(
                this.ItemId,
                CostingVersionPriceType::Cost,
                this.InventDimId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                this.inventDim().InventSiteId);

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the site ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    ///    Returns a string that holds the site ID.
    /// </returns>
    /// <remarks>
    ///    <c>InventSiteId</c> is an extended data type of type str.
    /// </remarks>
    public display InventSiteId inventSiteId()
    {
        return this.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the size ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    ///    Returns a string that holds the size ID.
    /// </returns>
    /// <remarks>
    ///    <c>InvestSizeId</c> is an extended data type of type str.
    /// </remarks>
    public display EcoResItemSizeName inventSizeId()
    {
        return this.inventDim().InventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    public boolean isApproved()
    {
        return (this.Approved && this.Approver) || ! BOMTable::isBOMApproveEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be edited.
    /// </summary>
    /// <returns>
    /// true if edit is allowed; otherwise, false.
    /// </returns>
    public boolean canEdit()
    {
        return !(this.orig().isApproved() && BOMParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinChildTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a joined table record if the current record is joined to the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    A string that holds the <c>tableID</c>.
    /// </param>
    /// <returns>
    ///    A record of any type or null.
    /// </returns>
    public Common joinChildTable(tableId _tableId)
    {
        Common      joinBuffer;
        Common      emptyBuffer;

        joinBuffer = this.joinChild();

        while (joinBuffer.TableId != emptyBuffer.TableId)
        {
            if (joinBuffer.TableId == _tableId)
            {
                return joinBuffer;
            }
            joinBuffer = joinBuffer.joinChild();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAllowBatchSizeChange</Name>
				<Source><![CDATA[
    public boolean pdsAllowBatchSizeChange()
    {
        str             versionStr;
        BOMVersion      bomVersion;
        boolean         ret = true;
        #define.lnBreak('\r\r\n')

        versionStr = strFmt("@PRO2395",this.bomId);
        versionStr += #lnBreak + "@PRO2397";
        versionStr += #lnBreak + "@PRO2398";

        select firstonly bomVersion
            where bomVersion.bomId == this.bomId
               && bomVersion.RecId != this.RecId;

        if (bomVersion
            && Box::yesNo(versionStr,DialogButton::No,"@PRO2399") == DialogButton::No)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    private void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PmfBatchSize =
                PdsCatchWeight::inventQty(this.ItemId, this.PdsCWSize);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a <c>ProdTable.PdsCWBatchSched</c> value by using a <c>BOMVersion.PmfFormulaMultiple</c>
    /// value.
    /// </summary>
    /// <param name="_cwQty">
    /// The catch weight quantity value that is being calculated.
    /// </param>
    /// <param name="_showUsrDialog">
    /// A Boolean value that indicates whether to prompt the user.
    /// </param>
    /// <returns>
    /// A <c>PdsCWInventoryQry</c> object that is rounded from a <c>ProdTable.QtySched</c> value that is
    /// based on a <c>BOMVersion.PmfFormulaMultiple</c> value.
    /// </returns>
    public PdsCWInventQty pdsCWSetMultipleQty(
        PdsCWInventQty  _cwQty,
        boolean         _showUsrDialog = true)
    {
        PdsCWInventQty  numOfRoundedUp;
        str             txt;

        numOfRoundedUp  = roundUp(_cwQty, this.PmfFormulaMultiple);

        if (this.PmfFormulaMultiple
            && numOfRoundedUp != _cwQty)
        {
            txt = strFmt("@SCM:QuantityMustBeMultipleMessage",this.PmfFormulaMultiple);
            txt += strFmt("@SCM:RoundUpQuantityMessage",numOfRoundedUp);

            if (!_showUsrDialog
                || Box::yesNo(txt, DialogButton::Yes) == DialogButton::Yes)
            {
                return numOfRoundedUp;
            }
        }

        return _cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckProductType</Name>
				<Source><![CDATA[
    public boolean pmfCheckProductType()
    {
        BOMVersion  bomVersion;
        InventTable inventTable;
        boolean     ret = true;

        select firstonly ItemId
            from bomVersion
            where bomVersion.bomId == this.bomId
                && bomVersion.RecId != this.RecId
            exists join inventTable
                where inventTable.ItemId == bomVersion.ItemId
                    && inventTable.PmfProductType
                        != this.inventTable().PmfProductType;

        if (bomVersion)
        {
            ret = checkFailed(strFmt("@PRO2390", bomVersion.ItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCoByQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the total quantity of the co-product for the formula version for the specific coverage
    /// dimensions.
    /// </summary>
    /// <param name="_coProductItemId">
    /// The co-product item ID.
    /// </param>
    /// <param name="_coInventDimCriteria">
    /// An <c>InventDim</c> record that contains the dimension selection criteria.
    /// </param>
    /// <returns>
    /// The total inventory quantity of the co-product on the formula version.
    /// </returns>
    public PmfCoByQty pmfCoByQty(ItemId _coProductItemId, InventDim _coInventDimCriteria)
    {
        PmfFormulaCoBy      pmfFormulaCoBy;
        InventDim           inventDim;
        PmfCoByQty          qty;

        InventDimParm productDims = InventDimParm::allProductDim();

        while select CoByQty, CoByQtySerie
            from pmfFormulaCoBy
            where pmfFormulaCoBy.bomVersionRefRecId == this.RecId
                && pmfFormulaCoBy.ItemId            == _coProductItemId
            #InventDimExistsJoinAllowBlank(pmfFormulaCoBy.InventDimId, inventDim, _coInventDimCriteria, productDims, productDims)
                    && (inventDim.InventSiteId     == _coInventDimCriteria.InventSiteId     || inventDim.InventSiteId     == '')
                    && (inventDim.InventLocationId == _coInventDimCriteria.InventLocationId || inventDim.InventLocationId == '')
        {
            if (pmfFormulaCoBy.CoByQtySerie)
            {
                qty += pmfFormulaCoBy.CoByQty / pmfFormulaCoBy.CoByQtySerie;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfFormulaUnit</Name>
				<Source><![CDATA[
    public display UnitOfMeasureSymbol pmfFormulaUnit()
    {
        return InventTableModule::find(
            this.ItemId,
            ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified quantity is a valid multiple for this formula.
    /// </summary>
    /// <param name="_qty">
    /// The inventory quantity to validate as matching the formula multiple.
    /// </param>
    /// <returns>
    /// true if the given quantity is an even multiple or the formula version does not use multiples;
    /// otherwise, false .
    /// </returns>
    public boolean pmfIsMultipleQty(Qty _qty)
    {
        Qty         numOfRoundedUp;

        #define.RoundDigits (10)

        numOfRoundedUp    = roundUp(_qty, this.PmfFormulaMultiple);

        return !this.PmfFormulaMultiple
            || (numOfRoundedUp == decRound((_qty), #RoundDigits)
                && _qty == UnitOfMeasureConverter::convert(
                    numOfRoundedUp,
                    UnitOfMeasure::unitOfMeasureIdBySymbol( this.inventTable().inventUnitId()),
                    UnitOfMeasure::unitOfMeasureIdBySymbol( this.inventTable().inventUnitId()),
                    NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsSiteSpecific</Name>
				<Source><![CDATA[
    public boolean pmfIsSiteSpecific()
    {
        return this.inventDim().InventSiteId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfRemainCostAlloc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the formula version remaining cost allocation percentage value.
    /// </summary>
    /// <returns>
    /// The cost allocation remaining value in percent
    /// </returns>
    public display PmfCostAllocationPct pmfRemainCostAlloc()
    {
        return 100 - this.pmfTotalCostAlloc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSetMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a <c>ProdTable.QtySched</c> value by using a <c>BOMVersion.PmfFormulaMultiple</c> value.
    /// </summary>
    /// <param name="_qty">
    /// The quantity that is being calculated.
    /// </param>
    /// <param name="_showUsrDialog">
    /// A Boolean value that indicates whether to prompt the user.
    /// </param>
    /// <returns>
    /// A quantity of rounded quantity from a <c>ProdTable.QtySched</c> that is based on a
    /// <c>BOMVersion.PmfFormulaMultiple</c> value.
    /// </returns>
    public Qty pmfSetMultipleQty(
        Qty     _qty,
        boolean _showUsrDialog = true)
    {
        return PmfFormulaMultiplesQtyValidation::validateQtyMultiple(
            _qty,
            this.PmfFormulaMultiple,
            this.inventTable(),
            _showUsrDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchOrderQuantityWithAcceptableMultiplicity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the acceptable batch order quantity given the requested quantity, multiplicity constraint
    /// and the method for resolving constraint conflicts.
    /// </summary>
    /// <param name="_requestedBatchOrderQuantity">The requested batch order quantity.</param>
    /// <param name="_errorCorrectionMethod">The error correction method.</param>
    /// <returns>The acceptable batch order quantity.</returns>
    public Qty batchOrderQuantityWithAcceptableMultiplicity(
        Qty                                         _requestedBatchOrderQuantity,
        InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod = InventMovementQuantityErrorCorrectionMethod::PromptUser)
    {
        return PmfFormulaMultiplesQtyValidation::quantityWithAcceptableMultiplicity(
            _requestedBatchOrderQuantity,
            this.PmfFormulaMultiple,
            this.inventTable(),
            _errorCorrectionMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfTotalCostAlloc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the formula co-product total cost allocation percentage value.
    /// </summary>
    /// <param name="_ignoreRec">
    /// A record ID value to ignore when it calculates the cost allocation.
    /// </param>
    /// <returns>
    /// The cost allocation percentage of this formula co-product value.
    /// </returns>
    public PmfCostAllocationPct pmfTotalCostAlloc(RefRecId _ignoreRec = 0)
    {
        PmfFormulaCoBy coBy;

        select sum(CostAllocationPct)
            from coBy
            where coBy.bomId                == this.bomId
                && coBy.ProductType         == PmfProductType::Co_Product
                && coBy.CostAllocationPct   > 0.0
                && coBy.bomVersionRefRecId  == this.RecId
                && coBy.RecId               != _ignoreRec;

        return coBy.CostAllocationPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateFormulaLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BOMQtySerie</c> field for all <c>BOM</c> records with a matching <c>BOMId</c> .
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BOMId</c> value that will be used when it selects the records to be updated.
    /// </param>
    public void pmfUpdateFormulaLines(BOMId  _bomId)
    {
        BOM bom;

        ttsbegin;

        while select forupdate bom
                     where bom.bomId == _bomId
                     && (bom.PmfPctEnable
                     || bom.PmfScalable
                     || (BOMConsistOfCopyFormulaForCWItemFlightV2::instance().isEnabled() && PdsGlobal::pdsIsCWItem(this.ItemId)))
        {
            bom.pmfCheckUnitConversion();

            if (this.PmfFormulaVersionCalculation)
            {
                bom.bomQtySerie = this.PmfBatchSize;
            }

            if (bom.PmfPctEnable)
            {
                bom.bomQty = bom.pmfBOMPctQty(this);
            }
            bom.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateFormulaVersionCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PmfFormulaVersionCalculation</c> field in all the <c>BOMVersion</c> records so that
    /// only one record can contain a true value.
    /// </summary>
    public void pmfUpdateFormulaVersionCalc()
    {
        BOMVersion bomVersion;

        update_recordset bomVersion
            setting
                PmfFormulaVersionCalculation = false
            where bomVersion.BOMId  == this.BOMId

            &&    bomVersion.RecId  !=  this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateTCA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cost allocation fields based on the usage of the total cost allocation methodology.
    /// </summary>
    /// <param name="_isTCA">
    /// A Boolean value that indicates whether the record uses the total cost allocation methodology or not.
    /// </param>
    /// <returns>
    /// true if record needs to be updated; otherwise, false.
    /// </returns>
    public boolean pmfUpdateTCA(boolean _isTCA = false)
    {
        PmfFormulaCoBy  coby;
        boolean         ret = true;

        if (this.orig().PmfTotalCostAllocation != this.PmfTotalCostAllocation)
        {
            select firstonly RecId
                from coby
                where coby.bomVersionRefRecId == this.RecId;

            if (coby.RecId)
            {
                if (appl.ttsLevel() == 0
                    && hasGUI())
                {
                    if (Box::okCancel("@PRO2838", DialogButton::Cancel, "@PRO2839") == DialogButton::Ok)
                    {
                        ttsbegin;

                        while select forupdate coby
                            where coby.bomVersionRefRecId == this.RecId
                        {
                            coby.PmfCoByMap::updateCostAllocationFromTCA(_isTCA);
                            coby.update();
                        }

                        ttscommit;
                    }
                    else
                    {
                        this.PmfTotalCostAllocation = this.orig().PmfTotalCostAllocation;
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfValidateTCA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PmfFormulaCoBy</c> records for TCA requirements.
    /// </summary>
    /// <returns>
    /// true if the <c>PmfFormulaCoBy</c> record has an active cost price; otherwise, false .
    /// </returns>
    public boolean pmfValidateTCA()
    {
        PmfFormulaCoBy  coby;
        boolean         ret = true;

        ttsbegin;

        while select forupdate coby
            where coby.bomVersionRefRecId   == this.RecId
                && coby.CostAllocation      == PmfCostAllocationMethod::TCA
        {
            ret = coby.validateTCA();

            if (!ret)
            {
                break;
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.canEdit())
        {
            if (#pmfEnabled)
            {
                throw error("@PRO2418");
            }
            else
            {
                throw error("@SYS95147");
            }
        }

        if (#PmfEnabled)
        {
            this.pmfUpdateTCA(this.PmfTotalCostAllocation);
        }

        if (this.BOMId != this.orig().BOMId || this.ItemId != this.orig().ItemId)
        {
            this.SequenceId = BOMVersion::nextCreationSequenceId(this);
        }

        // check if BOM level recalculation is needed
        BOMLevelCalc::checkLevelRecalcBOMVersion(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchSizeMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a relation between the batch size and the formula multiple is correct.
    /// </summary>
    /// <returns>
    /// true if the relation between the batch size and the formula multiple is correct; otherwise, false .
    /// </returns>
    private boolean validateBatchSizeMultiple()
    {
        boolean ret = true;

        if (this.PmfBatchSize != this.pmfSetMultipleQty(this.PmfBatchSize, false))
        {
            ret = checkFailed(strFmt("@PRO2406", this.PmfFormulaMultiple,this.PmfBatchSize));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this) && this.isApproved() && BOMParameters::find().BlockEditing)
        {
            if (#pmfEnabled)
            {
                throw error("@PDS1490");
            }
            else
            {
                ret = checkFailed("@SYS96300");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret = true;

        InventTable     inventTable;
        BOM             bom;

        switch (_fieldName)
        {
            case fieldstr(BOMVersion, Active) :
                if (this.Active && !this.isApproved())
                {
                    ret = checkFailed("@SYS26246") && ret;
                }

                if (ret && this.Active && this.bomId && !BOMTable::find(this.bomId).isApproved())
                {
                    if (this.PmfTypeId == PmfBOMFormula::Formula)
                    {
                        ret = checkFailed(strfmt("@PRO2345",this.bomId));
                    }
                    else
                    {
                        ret = checkFailed(strfmt("@SYS29115",this.bomId));
                    }
                }
                break;
            case fieldstr(BOMVersion, Approver) :
                if (this.isApproved() && !HcmWorkerLookup::newWorkersInCurrentCompany().validateWorker(this.Approver))
                {
                    ret = checkFailed(strfmt("@SYS329631", fieldpname(BOMVersion, Approver)));
                }
                break;

            case fieldstr(BOMVersion,PmfBatchSize):
                if (this.PmfBatchSize <= 0 && this.PmfTypeId == PmfBOMFormula::Formula)
                {
                    ret = checkFailed(strfmt("@PRO166","@PRO165"));
                }
                ret = ret && this.validateBatchSizeMultiple();
                break;

            case fieldstr(BOMVersion, PdsCWSize):
                if (ret)
                {
                    this.pdsCWQtyConversion();

                    if (this.PmfBatchSize != this.pmfSetMultipleQty(this.PmfBatchSize, false))
                    {
                        ret = checkFailed(strfmt("@PRO2406", this.PmfFormulaMultiple, this.PmfBatchSize));
                    }
                }
                break;

            case fieldstr(BOMVersion, PmfYieldPct):
                if (this.PmfYieldPct <= 0 && this.PmfTypeId == PmfBOMFormula::Formula)
                {
                    ret = checkFailed("@PRO214");
                }
                if (this.PmfYieldPct >100 && this.PmfTypeId == PmfBOMFormula::Formula)
                {
                    ret = checkFailed("@PDS1391");
                }
                break;

            case fieldstr(BOMVersion, FromQty):
                if (this.PmfTypeId == PmfBOMFormula::Formula && this.FromQty < 0)
                {
                    ret = checkFailed("@PRO2255");
                }
                break;

            case fieldstr(BOMVersion, PmfFormulaMultiple):
                if (this.PmfTypeId == PmfBOMFormula::Formula && this.PmfFormulaMultiple < 0)
                {
                    ret = checkFailed("@PRO2255");
                }
                ret = ret && this.validateBatchSizeMultiple();
                break;

            case fieldstr(BOMVersion, bomId):
                if (BOMTable::find(this.bomId).PmfBOMFormula != this.PmfTypeId)
                {
                    ret = checkFailed("@PRO2257");
                }
                break;

            case fieldstr(BOMVersion, ItemId):
                inventTable = this.inventTable();

                if (!inventTable.isStocked())
                {
                    ret = checkFailed("@SYS183559");
                }

                if (ret
                    && this.ItemId
                    && ((inventTable.isFormulaAllowed()
                            && this.PmfTypeId == PmfBOMFormula::BOM)
                        || (inventTable.isBOMAllowed()
                            && this.PmfTypeId == PmfBOMFormula::Formula)))
                {
                    ret = checkFailed("@PRO2257");
                }
                break;

            case fieldstr(BOMVersion, PmfBulkParent):
                if (this.PmfBulkParent)
                {
                    inventTable = InventTable::find(this.PmfBulkParent);

                    if (inventTable.PmfProductType != PmfProductType::Formula)
                    {
                        ret = checkFailed(strfmt("@PRO2464", inventTable.PmfProductType));
                        break;
                    }

                    if (!PmfBulkItemConv::exist(this.ItemId, this.PmfBulkParent))
                    {
                        ret = checkFailed("@PRO2466");
                        break;
                    }

                    select firstonly TableId from bom
                        where bom.bomId    == this.bomId
                            && bom.ItemId  == this.PmfBulkParent;

                    if (!bom.TableId)
                    {
                        ret = checkFailed("@PRO2491");
                        break;
                    }
                }
                break;

            case fieldStr(BOMVersion, PmfTotalCostAllocation) :
                ret = this.pmfUpdateTCA(this.PmfTotalCostAllocation);
                break;
        }

        ret = ret && super(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _checkBlockEditing = true)
    {
        BOMVersion          bomVersionActive;
        boolean             ret = true;
        boolean             pmfTypeId = #PmfEnabled && this.PmfTypeId == PmfBOMFormula::Formula;

        InventTable         inventTable;
        BOMTable            bomTable = BOMTable::find(this.bomId);

        if (pmfTypeId && !this.bomId)
        {
            ret = checkFailed(strFmt("@SYS116347", "@PRO1115"));
        }

        if (ret)
        {
        ret = super();
        }

        if (pmfTypeId)
        {
            setPrefix(strFmt("@PRO2886", this.ItemId, date2StrUsr(this.FromDate, DateFlags::FormatAll), date2StrUsr(this.ToDate, DateFlags::FormatAll)));
        }
        else
        {
            setPrefix(strFmt("@SYS25826",this.ItemId, date2StrUsr(this.FromDate, DateFlags::FormatAll), date2StrUsr(this.ToDate, DateFlags::FormatAll)));
        }

        if (this.FromQty < 0)
        {
            ret = checkFailed("@SYS109276");
        }

        inventTable = InventTable::find(this.ItemId);

        if (ret && !inventTable)
        {
            ret = checkFailed("@SYS133447");
        }

        if (ret && ! inventTable.inventItemType().canHaveBOM())
        {
            ret = checkFailed(strFmt("@SYS78175", inventTable.ItemType)) && ret;
        }

        if (#PMFEnabled && ret && !inventTable.isFormulaOrBOMAllowed())
        {
            ret = checkFailed("@PRO2897");
        }
        ret = ret && inventTable.pdsCheckCWItemSetup();

        if (ret && this.Active && !this.isApproved())
        {
            ret = checkFailed("@SYS26246");
        }

        if (ret && _checkBlockEditing && FormDataUtil::isFormDataSource(this) && this.orig().isApproved() && BOMParameters::find().BlockEditing)
        {
            if (#PmfEnabled)
            {
                ret = checkFailed("@PRO2418");
            }
            else
            {
                ret = checkFailed("@SYS95147");
            }
        }

        if ((!this.FromDate || !this.ToDate) && BOMParameters::find().MandatoryQtyAndDate)
        {
            ret = checkFailed("@SYS95151");
        }

        ret = ret && BOMTable::checkExist(this.bomId);

        if (ret && this.ToDate  && (this.ToDate < this.FromDate))
        {
            ret = checkFailed("@SYS22806") && ret;
        }

        if (   ret
            && this.bomId
            && bomTable.SiteId
            && this.inventDim().InventSiteId != bomTable.SiteId )
        {
            if (pmfTypeId)
            {
                ret = checkFailed("@PRO2885");
            }
            else
            {
                ret = checkFailed("@SYS109763");
            }
        }

        if (ret && this.Active)
        {
            while select bomVersionActive
                index hint ItemIdx
                where    bomVersionActive.ItemId       == this.ItemId
                      && bomVersionActive.InventDimId  == this.InventDimId
                      && bomVersionActive.Active       == NoYes::Yes
                      && bomVersionActive.RecId        != this.RecId
            {
                if (#PmfEnabled)
                {
                    if (bomVersionActive.PmfTypeId == PmfBOMFormula::BOM)
                    {
                        ret = BOMVersion::checkDateOverlap(this,bomVersionActive);
                        if (!ret)
                        {
                            break;
                        }
                    }
                    else
                    {
                        ret = BOMVersion::pmfCheckDateOverlap(this,bomVersionActive);
                        if (!ret)
                        {
                            break;
                        }
                    }
                }
                else
                {
                ret = BOMVersion::checkDateOverlap(this,bomVersionActive);
                if (!ret)
                {
                    break;
                }
                }
            }
        }

        //Check for approved BOM if going from de-approved to approved or from de-activated to activated
        if (ret
            && BOMTable::isBOMApproveEnabled()
            && ! bomTable.Approved
            && ((this.Approved && !this.orig().Approved) || (this.Active && !this.orig().Active))
            )
        {
            if (pmfTypeId)
            {
                ret = checkFailed(strFmt("@PRO2345",this.bomId));
            }
            else
            {
                ret = checkFailed(strFmt("@SYS29115",this.bomId));
            }
        }

        if (   ret
            && EcoResProductMaster::find(inventTable.Product).isDimensionBased()
            && this.configId())
        {
            if (pmfTypeId)
            {
                ret = checkFailed("@PRO2884");
            }
            else
            {
                ret = checkFailed("@SYS121360");
            }
        }

        if (ret && pmfTypeId)
        {
            ret = this.pmfCheckProductType();
        }

        if ( ret && this.Approved && !this.Approver )//if it's approved, it needs an approver
        {
            ret = checkFailed(strFmt("@SYS32810", fieldPName(BOMVersion, Approver)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateOverlap</Name>
				<Source><![CDATA[
    public static boolean checkDateOverlap(BOMVersion _curVersion, BOMVersion _checkAgainstVersion)
    {
        if (_curVersion.FromQty == _checkAgainstVersion.FromQty
            && _curVersion.InventDimId == _checkAgainstVersion.InventDimId
            && BOMVersion::mustCheckDateOverlap())
        {
            if ((_curVersion.ToDate   >= _checkAgainstVersion.FromDate || !_curVersion.ToDate) &&
                (_curVersion.FromDate <= _checkAgainstVersion.ToDate   || !_checkAgainstVersion.ToDate))
            {
                return checkFailed(strfmt("@SYS67104",_checkAgainstVersion.Name));
            }

            if (_checkAgainstVersion.ToDate >= _curVersion.FromDate
                && _checkAgainstVersion.FromDate <= _curVersion.ToDate)
            {
                return checkFailed(strfmt("@SYS67104",_checkAgainstVersion.Name));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckDateOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the date overlap must be checked.
    /// </summary>
    /// <returns>true if date overlap must be checked; otherwise, false.</returns>
    protected static boolean mustCheckDateOverlap()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        ItemId      _itemId,
        BOMId       _bomId,
        boolean     _active,
        StartDate   _fromDate,
        EndDate     _toDate,
        FromQty     _fromQty
        )
    {
        if (_itemId && ! BOMVersion::exist(_itemId,_bomId,_active,_fromDate,_toDate, _fromQty))
        {
            return checkFailed(strfmt(BOMVersion::txtNotExist(),_itemId, date2StrUsr(_fromDate, DateFlags::FormatAll), date2StrUsr(_toDate, DateFlags::FormatAll), _fromQty));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistRecId</Name>
				<Source><![CDATA[
    public static boolean checkExistRecId(recId _recId)
    {
        if (_recId && !BOMVersion::existRecId(_recId))
        {
            return checkFailed(strfmt("@SYS26277",_recId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRelation</Name>
				<Source><![CDATA[
    public static boolean checkItemRelation(
        BOMId       _bomId,
        ItemId      _itemId
        )
    {
        BOMVersion bomVersion;

        select firstonly RecId from bomVersion
            where bomVersion.bomId        == _bomId &&
                  bomVersion.ItemId       == _itemId;

        if (!bomVersion.RecId)
        {
            return checkFailed(strfmt("@SYS69982",_itemId,_bomId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVersions</Name>
				<Source><![CDATA[
    public static void deleteVersions(ItemId _itemId)
    {
        BOMVersion bomVersion;

        delete_from bomVersion
            where bomVersion.ItemId == _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dictConfigurationKey</Name>
				<Source><![CDATA[
    public static DictConfigurationKey dictConfigurationKey()
    {
        return new DictConfigurationKey (configurationkeynum(BOMVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
         ItemId      _itemId,
         BOMId       _bomId,
         boolean     _active,
         StartDate   _fromDate,
         EndDate     _toDate,
         FromQty     _fromQty
        )
    {
        BOMVersion      bomVersion;

        bomVersion  = BOMVersion::find(_itemId,_bomId,_active,_fromDate,_toDate,_fromQty);

        return bomVersion.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first <c>BOMVersion</c> record based on the <c>BOMId</c> and <c>ItemId</c> values.
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BOMId</c> value of the record to be found.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value of the record to be found.
    /// </param>
    /// <returns>
    /// true if a record is found; otherwise, false .
    /// </returns>
    public static boolean existBomId(BOMId  _bomId, ItemId  _itemId)
    {
        return (select firstonly bomVersion where bomVersion.bomId == _bomId && bomVersion.ItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBomIdForAnyItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first <c>BOMVersion</c> record for any item based on the <c>BOMId</c> value.
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BOMId</c> value of the record to be found.
    /// </param>
    /// <returns>
    /// true if a record is found; otherwise, false .
    /// </returns>
    public static boolean existBomIdForAnyItem(BOMId  _bomId)
    {
        return (select firstonly RecId from bomVersion where bomVersion.bomId == _bomId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    public static boolean existRecId(recId _recId)
    {
        return (select bomVersion
                    where bomVersion.RecId == _recId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BOMVersion find(
        ItemId      _itemId,
        BOMId       _bomId,
        boolean     _active,
        StartDate   _fromDate,
        EndDate     _toDate     = _fromDate,
        FromQty     _fromQty    = 1,
        boolean     _forUpdate  = false
        )
    {
        BOMVersion      bomVersion;

        if (! _itemId || ! _bomId)
        {
            return bomVersion;
        }

        _fromQty =  abs(_fromQty);

        bomVersion.selectForUpdate(_forUpdate);

        select firstonly bomVersion
            order by ItemId, Active, FromQty desc
            where bomVersion.ItemId         == _itemId      &&
                  bomVersion.bomId          == _bomId       &&
                  bomVersion.Active         == _active      &&
                  bomVersion.FromQty        <= _fromQty     &&
                  bomVersion.FromDate       <= _fromDate    &&
                  (bomVersion.ToDate        >= _toDate      ||
                   ! bomVersion.ToDate
                  );

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an BOM version record using the entity key.
    /// </summary>
    /// <param name = "_itemId">The ID of the item.</param>
    /// <param name = "_bomId">The ID of the BOM.</param>
    /// <param name = "_inventDimId">The ID of the inventory dimensions.</param>
    /// <param name = "_active">A Boolean value that indicates whether to search for an active BOM.</param>
    /// <param name = "_fromDate">The date the BOM version is valid from.</param>
    /// <param name = "_fromQty">The from quantity.</param>
    /// <param name = "_pmfTypeId">The type, bill of materials or formula.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to select the record for update; optional.</param>
    /// <returns>A <c>BOMVersion</c> record.</returns>
    public static BOMVersion findEntityKey(
        ItemId          _itemId,
        BOMId           _bomId,
        InventDimId     _inventDimId,
        boolean         _active,
        StartDate       _fromDate,
        FromQty         _fromQty,
        PmfBOMFormula   _pmfTypeId,
        boolean         _forUpdate  = false
        )
    {
        BOMVersion      bomVersion;

        if (! _itemId || ! _bomId || !_inventDimId)
        {
            return bomVersion;
        }

        _fromQty =  abs(_fromQty);

        bomVersion.selectForUpdate(_forUpdate);

        select firstonly bomVersion
            where bomVersion.ItemId         == _itemId      &&
                  bomVersion.bomId          == _bomId       &&
                  bomVersion.InventDimId    == _inventDimId &&
                  bomVersion.Active         == _active      &&
                  bomVersion.FromQty        == _fromQty     &&
                  bomVersion.FromDate       == _fromDate    &&
                  bomVersion.pmfTypeId      == _pmfTypeId;

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an active BOM version record.
    /// </summary>
    /// <param name="_itemId">
    ///    A string that holds an item id.
    /// </param>
    /// <param name="_date">
    ///    A date criteria for the <c>FromDate</c> and <c>ToDate</c> fields search of active BOM version items.
    /// </param>
    /// <param name="_fromQty">
    ///    A real that specifies the <c>FromQty</c> field criteria for the search of active BOM version items.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    An <c>InventDim</c> that contains an inventory dimension criteria for the search of active BOM
    ///    version items.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that is assigned to the <c>BOMVersion</c><c>.selectForUpdate</c> field; optional.
    ///    The default is false.
    /// </param>
    /// <returns>
    ///    A BOM version record.
    /// </returns>
    /// <remarks>
    ///    For the <paramref name="_inventDimCriteria" /> parameter, the field <c>inventDimId</c> does not
    ///    have to be specified.
    /// </remarks>
    public static BOMVersion findActive(
        ItemId         _itemId,
        StartDate      _date,
        FromQty        _fromQty,
        InventDim      _inventDimCriteria,
        boolean        _forUpdate  = false)
    {
        BOMVersion  bomVersion;

        if (!_itemId)
        {
            return bomVersion;
        }

        _fromQty =  abs(_fromQty);

        bomVersion = BOMVersion::selectBomVersion(_itemId,_date,_fromQty,_inventDimCriteria,true,false,true,false,true,'',_forUpdate);

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an approved BOM version record.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds an item ID.
    /// </param>
    /// <param name="_bomId">
    /// The ID of the BOM to find.
    /// </param>
    /// <param name="_active">
    /// A Boolean value that indicates whether to search for an active BOM.
    /// </param>
    /// <param name="_fromDate">
    /// A date criteria for the <c>FromDate</c> field search of approved BOM version items.
    /// </param>
    /// <param name="_toDate">
    /// A date criteria for the <c>ToDate</c> field search of approved BOM version items; optional.
    /// </param>
    /// <param name="_fromQty">
    /// A value that specifies the <c>FromQty</c> field criteria for the search of approved BOM version
    /// items.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>BOMVersion</c> record.
    /// </returns>
    public static BOMVersion findApproved(
        ItemId      _itemId,
        BOMId       _bomId,
        boolean     _active,
        StartDate   _fromDate,
        EndDate     _toDate     = _fromDate,
        FromQty     _fromQty    = 0,
        boolean     _forUpdate  = false)
    {
        BOMVersion  bomVersion;
        FromQty     fromQty = _fromQty;

        if (! _itemId || ! _bomId)
        {
            return bomVersion;
        }

        fromQty =  abs(fromQty);

        bomVersion.selectForUpdate(_forUpdate);

        select firstonly bomVersion
            order by ItemId, Active, FromQty desc
            where  bomVersion.ItemId    == _itemId
                && bomVersion.bomId     == _bomId
                && bomVersion.Active    <= _active
                && bomVersion.Approved  == true
                && bomVersion.FromQty   <= fromQty
                && bomVersion.FromDate  <= _fromDate
                && (bomVersion.ToDate   >= _toDate
                    || ! bomVersion.ToDate);

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static BOMVersion findRecId(
        recId       _recId,
        boolean     _forUpdate = false)
    {
        BOMVersion      bomVersion;

        if (_recId)
        {
            bomVersion.selectForUpdate(_forUpdate);

            select bomVersion
                index hint RecId
                where bomVersion.RecId      == _recId;
        }

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVersionCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BOMVersion</c> record that has the <c>pmfFormulaVersionCalculation</c> field as true
    /// for the given <c>BOMId</c> value.
    /// </summary>
    /// <param name="_bomId">
    /// The ID of the BOM to search for.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>BOMVersion</c> record.
    /// </returns>
    public static BOMVersion findVersionCalculation(
                                BOMId _bomId,
                                boolean _forUpdate = false)
    {
        BOMVersion  bomVersion;

        if (_bomId)
        {
            bomVersion.selectForUpdate(_forUpdate);

            select firstonly bomVersion
                   where bomVersion.bomId == _bomId
                   &&    bomVersion.PmfFormulaVersionCalculation == true;
        }

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBOMVersionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form for displaying the <c>BOMVersion</c> record in the context of the item associated.
    /// </summary>
    /// <param name="_bomVersionRecId">
    /// The Id of the version to open the form for.
    /// </param>
    /// <param name="_caller">
    /// The calling form.
    /// </param>
    public static void jumpRefBOMVersionRecId(RefRecId _bomVersionRecId, FormRun _caller)
    {
        BOMVersion                      bomVersion = BOMVersion::findRecId(_bomVersionRecId);
        InventTable                     inventTable = bomVersion.inventTable();
        Args                            args = new Args(formStr(BOMConsistOf));
        FormRun                         formRun;
        FormDataSource                  fds;

        args.record(inventTable);
        args.lookupRecord(bomVersion);
        args.caller(_caller);

        args.menuItemType(MenuItemType::Display);
        args.menuItemName(menuitemDisplayStr(BOMConsistOf));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        fds = formRun.dataSource();

        // Calling linkActive on the data source to emulate dynalinking
        fds.linkActive();
        fds.positionToRecord(bomVersion);

        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOMFormula</Name>
				<Source><![CDATA[
    public static void lookupBOMFormula(
        FormStringControl   _ctrl,
        ItemId              _itemId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        sysTableLookup = SysTableLookup::newParameters(tableNum(BOMVersion), _ctrl);
        qbds = query.addDataSource(tableNum(BOMVersion));
        qbds.addRange(fieldNum(BOMVersion, ItemId)).value(_itemId);

        sysTableLookup.addLookupfield(fieldNum(BOMVersion, bomId));
        sysTableLookup.addLookupfield(fieldNum(BOMVersion, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckBatchSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is a <c>BOMVersion</c> record that has a from quantity that is less than
    /// the formula quantity.
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BOMId</c> value to check.
    /// </param>
    /// <returns>
    /// true if no records exist that have a from quantity that is less than the formula quantity;
    /// otherwise, false .
    /// </returns>
    public static boolean pmfCheckBatchSize(BOMId  _bomId)
    {
        BOMVersion  bomVersion;
        boolean     ret = true;

        if (_bomId)
        {
            select RecId from bomVersion
                where bomVersion.bomId == _bomId
                &&    bomVersion.FromQty < bomVersion.PmfBatchSize;

            if (bomVersion.RecId)
            {
                ret = checkFailed("@PDS1515");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckDateOverlap</Name>
				<Source><![CDATA[
    public static boolean pmfCheckDateOverlap(
        BOMVersion _curVersion,
        BOMVersion _checkAgainstVersion)
    {
        boolean ret = true;

        if (_curVersion.ToDate == _checkAgainstVersion.ToDate
            && _curVersion.FromQty == _checkAgainstVersion.FromQty)
        {
            ret = ret && checkFailed(strFmt("@PRO1976",_checkAgainstVersion.Name));
        }

        if (_curVersion.FromDate == _checkAgainstVersion.FromDate
            && _curVersion.FromQty == _checkAgainstVersion.FromQty)
        {
            ret = ret && checkFailed(strFmt("@PRO1976",_checkAgainstVersion.Name));
        }

        if ((_curVersion.ToDate >= _checkAgainstVersion.FromDate
                || !_curVersion.ToDate)
            && (_curVersion.FromDate <= _checkAgainstVersion.ToDate
                || !_checkAgainstVersion.ToDate)
            && (_curVersion.FromQty == _checkAgainstVersion.FromQty))
        {
            ret = ret && checkFailed(strFmt("@PRO1976",_checkAgainstVersion.Name));
        }

        if (_checkAgainstVersion.ToDate >= _curVersion.FromDate
            && _checkAgainstVersion.FromDate <= _curVersion.ToDate
            && _curVersion.FromQty == _checkAgainstVersion.FromQty)
        {
            ret = ret && checkFailed(strFmt("@PRO1976",_checkAgainstVersion.Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfExistApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>BOMVersion</c> record exists based on search criteria provided by the
    /// parameters.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds an item ID.
    /// </param>
    /// <returns>
    /// true if a <c>BOMVersion</c> record exists; otherwise, false .
    /// </returns>
    [SysObsolete('Use existsForItem instead', true, 31\01\2016)]
    public static boolean pmfExistApproved(ItemId _itemId)
    {
        return BOMVersion::existsForItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an item-specific <c>BOMVersion</c> record exists.
    /// </summary>
    /// <param name="_itemId">The ID of the item</param>
    /// <returns>true if a <c>BOMVersion</c> record exists; otherwise, false.</returns>
    public static boolean existsForItem(ItemId _itemId)
    {
        if (_itemId)
        {
            BOMVersion bomVersion;

            select firstonly RecId from bomVersion
                where bomVersion.ItemId == _itemId;

            return bomVersion.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsApprovedForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an approved item-specific <c>BOMVersion</c> record exists.
    /// </summary>
    /// <param name="_itemId">The ID of the item</param>
    /// <returns>true if a <c>BOMVersion</c> record exists; otherwise, false.</returns>
    public static boolean existsApprovedForItem(ItemId _itemId)
    {
        if (_itemId)
        {
            BOMVersion bomVersion;

            select firstonly RecId from bomVersion
                where bomVersion.ItemId == _itemId
                    && bomVersion.Approved;

            return bomVersion.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSelectBOMSiteVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the active formula versions for the site specified in the <paramref
    /// name="_inventDimCriteria" /> value.
    /// </summary>
    /// <param name="_itemId">
    /// The finished good item ID for which to get the versions.
    /// </param>
    /// <param name="_date">
    /// The date as of which to get the versions.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The active inventory dimensions for the item.
    /// </param>
    /// <returns>
    /// A <c>BOMVersion</c> buffer setup to read through all the formula version records that match the
    /// planning item and dimension criteria.
    /// </returns>
    /// <remarks>
    /// The records will be in descending order by the <c>BOMVersion.FromQty</c> field.
    /// </remarks>
    public static BOMVersion pmfSelectBOMSiteVersions(ItemId     _itemId,
                                                      StartDate  _date,
                                                      InventDim  _inventDimCriteria)
    {
        BOMVersion          bomVersion;
        InventDim           inventDim;

        select bomVersion
            order by FromQty desc
            where bomVersion.ItemId         == _itemId
                && bomVersion.Active        == NoYes::Yes
                && bomVersion.Approved      == NoYes::Yes
                && bomVersion.FromDate      <= _date
                && (bomVersion.ToDate       >= _date || !bomVersion.ToDate)
        exists join inventDim
            where inventDim.InventDimId     == bomVersion.InventDimId
                && (inventDim.InventSiteId   == _inventDimCriteria.InventSiteId || inventDim.InventSiteId == '');

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUnapproveByBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unapproves the specified record of the <c>BOMVersion</c> table.
    /// </summary>
    /// <param name="_bomId">
    /// The value of the <c>BOMId</c> field of the record to be unapproved.
    /// </param>
    /// <returns>
    /// true if a record with the specified <c>BOMId</c> exists and record set is updated; otherwise false .
    /// </returns>
    public static boolean pmfUnapproveByBOMId(BOMId _bomId)
    {
        BOMVersion bomVersion;

        if (!(select bomVersion where bomVersion.bomId == _bomId).RecId)
        {
            return false;
        }

        update_recordset bomVersion
            setting
                Active      = false,
                Approved    = false,
                Approver    = 0
            where bomVersion.bomId      == _bomId
            &&    bomVersion.Approved   == NoYes::Yes;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUnapproveVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unapproves items that are related BOM or formula versions.
    /// </summary>
    /// <param name="_itemId">
    /// An item that will have all the BOM or formula versions unapproved.
    /// </param>
    public static void pmfUnapproveVersions(ItemId _itemId)
    {
        BOMVersion version;

        ttsbegin;
        update_recordset version
            setting Active  = NoYes::No,
                Approved    = NoYes::No,
                Approver  = 0
            where  version.ItemId   == _itemId
                && version.Approved == NoYes::Yes;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup with BOMVersions.
    /// </summary>
    /// <param name = "_caller">Calling ReferenceGroup control.</param>
    /// <param name = "_itemId">Filters lookup to versions for this itemId.</param>
    /// <param name = "_inventSiteId">Filters lookup to versions for this site.</param>
    /// <returns>Exact BOMVersion record selected by the user.</returns>
    /// <remarks>Syncronous lookup returning the selected record.</remarks>
    public static BOMVersion pmfLookupReference(FormReferenceControl _caller, ItemId _itemId, InventSiteId _inventSiteId)
    {
        Query                       lookupQuery = new Query();

        SysReferenceTableLookup sysRefTableLookup = SysReferenceTableLookup::newParameters(tableNum(BOMVersion), _caller);

        QueryBuildDataSource qbds = lookupQuery.addDataSource(tableNum(BOMVersion));
        QueryBuildDataSource qbdsDim = qbds.addDataSource(tableNum(InventDim));
        qbdsDim.joinMode(JoinMode::InnerJoin);
        qbdsDim.relations(true);

        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, BOMId));
        sysRefTableLookup.setLabel("@PRO1115");

        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, ItemId));
        sysRefTableLookup.addLookupMethod(tableMethodStr(BOMVersion, configId));
        sysRefTableLookup.addLookupMethod(tableMethodStr(BOMVersion, inventColorId));
        sysRefTableLookup.addLookupMethod(tableMethodStr(BOMVersion, inventSizeId));
        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, Name));

        sysRefTableLookup.addLookupMethod(tableMethodStr(BOMVersion, inventSiteId));

        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, PmfBatchSize));
        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, FromQty));
        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, Approved));
        sysRefTableLookup.addLookupfield(fieldNum(BOMVersion, Active));

        if (_itemId)
        {
            qbds.addRange(fieldNum(BOMVersion, ItemId)).value(queryValue(_itemId));
        }
        if (_inventSiteId)
        {
            qbdsDim.addRange(fieldNum(InventDim, InventSiteId)).value(queryValue(_inventSiteId));
            qbdsDim.addRange(fieldNum(InventDim, InventSiteId)).value(SysQuery::valueEmptyString());
        }
        sysRefTableLookup.parmQuery(lookupQuery);

        BOMVersion result = sysRefTableLookup.performFormLookup() as BOMVersion;
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBomVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a BOM version record based on search criteria provided by the parameters.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds an item id.
    /// </param>
    /// <param name="_date">
    /// A date criteria for the <c>FromDate</c> and <c>ToDate</c> fields search of BOM version items.
    /// </param>
    /// <param name="_fromQty">
    /// A real that specifies the <c>FromQty</c> field criteria for the search of BOM version items.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> that contains an inventory dimension criteria for the search of active BOM
    /// version items.
    /// </param>
    /// <param name="_includeActive">
    /// A Boolean value indicating if active versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeInactive">
    /// A Boolean value indicating if inactive versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeApproved">
    /// A Boolean value indicating if approved versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeUnapproved">
    /// A Boolean value indicating if unapproved versions should be included in the search; optional.
    /// </param>
    /// <param name="_checkDate">
    /// A Boolean value indicating if the date range must be checked.
    /// </param>
    /// <param name="_bomId">
    /// The BOM ID to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that is assigned to the <c>BOMVersion</c><c>.selectForUpdate</c> field; optional.
    /// The default is false.
    /// </param>
    /// <param name="_onlyIncludeSelected">
    /// A Boolean value indicating that only selected versions should be included in the search; optional.
    /// </param>
    /// <returns>
    /// A BOM version record.
    /// </returns>
    public static BOMVersion selectBomVersion(
        ItemId          _itemId,
        StartDate       _date,
        FromQty         _fromQty,
        InventDim       _inventDimCriteria,
        boolean         _includeActive     = true,
        boolean         _includeInactive   = false,
        boolean         _includeApproved   = true,
        boolean         _includeUnapproved = false,
        boolean         _checkDate         = true,
        BOMId           _bomId             = '',
        boolean         _forUpdate         = false,
        boolean         _onlyIncludeSelected = false)
    {
        BOMVersion  bomVersion;
        InventDim   inventDim;
        boolean     includeUnapproved = _includeUnapproved || !BOMTable::isBOMApproveEnabled();

        InventDim inventDimCriteria = _inventDimCriteria.data();
        inventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(_itemId));

        bomVersion.selectForUpdate(_forUpdate);

        select firstonly bomVersion
            order by inventDim.ConfigId          desc,
                     inventDim.InventSizeId      desc,
                     inventDim.InventColorId     desc,
                     inventDim.InventStyleId     desc,
                     inventDim.InventVersionId   desc,
                     inventDim.InventDimension1  desc,
                     inventDim.InventDimension2  desc,
                     inventDim.InventDimension3  desc,
                     inventDim.InventDimension4  desc,
                     inventDim.InventDimension5  desc,
                     inventDim.InventDimension6  desc,
                     inventDim.InventDimension7  desc,
                     inventDim.InventDimension8  desc,
                     inventDim.InventDimension9  desc,
                     inventDim.InventDimension10 desc,
                     inventDim.InventDimension11 desc,
                     inventDim.InventDimension12 desc,
                     inventDim.InventSiteId      desc,
                     bomVersion.FromQty          desc
            where bomVersion.ItemId     == _itemId
               && (bomVersion.bomId     == _bomId      || !_bomId)
               && ((bomVersion.Construction == NoYes::Yes && _onlyIncludeSelected) ||
                   (!_onlyIncludeSelected
                    && (  ((bomVersion.Active   == NoYes::Yes  && _includeActive)   ||
                           (bomVersion.Active   == NoYes::No   && _includeInactive))
                       && ((bomVersion.Approved == NoYes::Yes  && _includeApproved) ||
                           (bomVersion.Approved == NoYes::No   && includeUnapproved))
                       )
                    )
                 )
               && bomVersion.FromQty    <= _fromQty
               && (bomVersion.FromDate  <= _date       || !_checkDate)
               && (bomVersion.ToDate    >= _date       || !_checkDate || !bomVersion.ToDate)
            join TableId from inventDim
                where inventDim.InventDimId        == bomVersion.InventDimId
                   && (inventDim.InventSiteId      == inventDimCriteria.InventSiteId      || inventDim.InventSiteId      == '' || inventDimCriteria.InventSiteId      == '')
                   && (inventDim.ConfigId          == inventDimCriteria.ConfigId          || inventDim.ConfigId          == '' || inventDimCriteria.ConfigId          == '')
                   && (inventDim.InventSizeId      == inventDimCriteria.InventSizeId      || inventDim.InventSizeId      == '' || inventDimCriteria.InventSizeId      == '')
                   && (inventDim.InventColorId     == inventDimCriteria.InventColorId     || inventDim.InventColorId     == '' || inventDimCriteria.InventColorId     == '')
                   && (inventDim.InventStyleId     == inventDimCriteria.InventStyleId     || inventDim.InventStyleId     == '' || inventDimCriteria.InventStyleId     == '')
                   && (inventDim.InventVersionId   == inventDimCriteria.InventVersionId   || inventDim.InventVersionId   == '' || inventDimCriteria.InventVersionId   == '')
                   && (inventDim.InventDimension1  == inventDimCriteria.InventDimension1  || inventDim.InventDimension1  == '' || inventDimCriteria.InventDimension1  == '')
                   && (inventDim.InventDimension2  == inventDimCriteria.InventDimension2  || inventDim.InventDimension2  == '' || inventDimCriteria.InventDimension2  == '')
                   && (inventDim.InventDimension3  == inventDimCriteria.InventDimension3  || inventDim.InventDimension3  == '' || inventDimCriteria.InventDimension3  == '')
                   && (inventDim.InventDimension4  == inventDimCriteria.InventDimension4  || inventDim.InventDimension4  == '' || inventDimCriteria.InventDimension4  == '')
                   && (inventDim.InventDimension5  == inventDimCriteria.InventDimension5  || inventDim.InventDimension5  == '' || inventDimCriteria.InventDimension5  == '')
                   && (inventDim.InventDimension6  == inventDimCriteria.InventDimension6  || inventDim.InventDimension6  == '' || inventDimCriteria.InventDimension6  == '')
                   && (inventDim.InventDimension7  == inventDimCriteria.InventDimension7  || inventDim.InventDimension7  == '' || inventDimCriteria.InventDimension7  == '')
                   && (inventDim.InventDimension8  == inventDimCriteria.InventDimension8  || inventDim.InventDimension8  == '' || inventDimCriteria.InventDimension8  == '')
                   && (inventDim.InventDimension9  == inventDimCriteria.InventDimension9  || inventDim.InventDimension9  == utcDateTimeNull() || inventDimCriteria.InventDimension9  == utcDateTimeNull())
                   && (inventDim.InventDimension10 == inventDimCriteria.InventDimension10 || inventDim.InventDimension10 == 0  || inventDimCriteria.InventDimension10 == 0)
                   && (inventDim.InventDimension11 == inventDimCriteria.InventDimension11 || inventDim.InventDimension11 == '' || inventDimCriteria.InventDimension11 == '')
                   && (inventDim.InventDimension12 == inventDimCriteria.InventDimension12 || inventDim.InventDimension12 == '' || inventDimCriteria.InventDimension12 == '');

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBomVersionWithPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a BOM version record based on search criteria provided by the parameters.
    /// In case multiple BOM versions exist, priority is given to active and approved versions.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds an item id.
    /// </param>
    /// <param name="_date">
    /// A date criteria for the <c>FromDate</c> and <c>ToDate</c> fields search of BOM version items.
    /// </param>
    /// <param name="_fromQty">
    /// A real that specifies the <c>FromQty</c> field criteria for the search of BOM version items.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> that contains an inventory dimension criteria for the search of active BOM
    /// version items.
    /// </param>
    /// <param name="_includeActive">
    /// A Boolean value indicating if active versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeInactive">
    /// A Boolean value indicating if inactive versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeApproved">
    /// A Boolean value indicating if approved versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeUnapproved">
    /// A Boolean value indicating if unapproved versions should be included in the search; optional.
    /// </param>
    /// <param name="_checkDate">
    /// A Boolean value indicating if the date range must be checked.
    /// </param>
    /// <param name="_bomId">
    /// The BOM ID to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that is assigned to the <c>BOMVersion</c><c>.selectForUpdate</c> field; optional.
    /// The default is false.
    /// </param>
    /// <param name="_onlyIncludeSelected">
    /// A Boolean value indicating that only selected versions should be included in the search; optional.
    /// </param>
    /// <returns>
    /// A BOM version record.
    /// </returns>
    /// 
    [Hookable(false)]
    public static BOMVersion selectBomVersionWithPriority(
        ItemId          _itemId,
        StartDate       _date,
        FromQty         _fromQty,
        InventDim       _inventDimCriteria,
        boolean         _includeActive     = true,
        boolean         _includeInactive   = false,
        boolean         _includeApproved   = true,
        boolean         _includeUnapproved = false,
        boolean         _checkDate         = true,
        BOMId           _bomId             = '',
        boolean         _forUpdate         = false,
        boolean         _onlyIncludeSelected = false)
    {
        BOMVersion  bomVersion;
        InventDim   inventDim;
        boolean     includeUnapproved = _includeUnapproved || !BOMTable::isBOMApproveEnabled();

        InventDim inventDimCriteria = _inventDimCriteria.data();
        inventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(_itemId));

        bomVersion.selectForUpdate(_forUpdate);

        select firstonly bomVersion
            order by inventDim.ConfigId          desc,
                     inventDim.InventSizeId      desc,
                     inventDim.InventColorId     desc,
                     inventDim.InventStyleId     desc,
                     inventDim.InventDimension1  desc,
                     inventDim.InventDimension2  desc,
                     inventDim.InventDimension3  desc,
                     inventDim.InventDimension4  desc,
                     inventDim.InventDimension5  desc,
                     inventDim.InventDimension6  desc,
                     inventDim.InventDimension7  desc,
                     inventDim.InventDimension8  desc,
                     inventDim.InventDimension9  desc,
                     inventDim.InventDimension10 desc,
                     inventDim.InventDimension11 desc,
                     inventDim.InventDimension12 desc,
                     inventDim.InventSiteId      desc,
                     bomVersion.FromQty          desc,
                     bomVersion.Active           desc,
                     bomVersion.Approved         desc
            where bomVersion.ItemId     == _itemId
               && (bomVersion.bomId     == _bomId      || !_bomId)
               && ((bomVersion.Construction == NoYes::Yes && _onlyIncludeSelected) ||
                   (!_onlyIncludeSelected
                    && (  ((bomVersion.Active   == NoYes::Yes  && _includeActive)   ||
                           (bomVersion.Active   == NoYes::No   && _includeInactive))
                       && ((bomVersion.Approved == NoYes::Yes  && _includeApproved) ||
                           (bomVersion.Approved == NoYes::No   && includeUnapproved))
                       )
                    )
                 )
               && bomVersion.FromQty    <= _fromQty
               && (bomVersion.FromDate  <= _date       || !_checkDate)
               && (bomVersion.ToDate    >= _date       || !_checkDate || !bomVersion.ToDate)
            join TableId from inventDim
                where inventDim.InventDimId        == bomVersion.InventDimId
                   && (inventDim.InventSiteId      == inventDimCriteria.InventSiteId      || inventDim.InventSiteId      == '' || inventDimCriteria.InventSiteId      == '')
                   && (inventDim.ConfigId          == inventDimCriteria.ConfigId          || inventDim.ConfigId          == '' || inventDimCriteria.ConfigId          == '')
                   && (inventDim.InventSizeId      == inventDimCriteria.InventSizeId      || inventDim.InventSizeId      == '' || inventDimCriteria.InventSizeId      == '')
                   && (inventDim.InventColorId     == inventDimCriteria.InventColorId     || inventDim.InventColorId     == '' || inventDimCriteria.InventColorId     == '')
                   && (inventDim.InventStyleId     == inventDimCriteria.InventStyleId     || inventDim.InventStyleId     == '' || inventDimCriteria.InventStyleId     == '')
                   && (inventDim.InventDimension1  == inventDimCriteria.InventDimension1  || inventDim.InventDimension1  == '' || inventDimCriteria.InventDimension1  == '')
                   && (inventDim.InventDimension2  == inventDimCriteria.InventDimension2  || inventDim.InventDimension2  == '' || inventDimCriteria.InventDimension2  == '')
                   && (inventDim.InventDimension3  == inventDimCriteria.InventDimension3  || inventDim.InventDimension3  == '' || inventDimCriteria.InventDimension3  == '')
                   && (inventDim.InventDimension4  == inventDimCriteria.InventDimension4  || inventDim.InventDimension4  == '' || inventDimCriteria.InventDimension4  == '')
                   && (inventDim.InventDimension5  == inventDimCriteria.InventDimension5  || inventDim.InventDimension5  == '' || inventDimCriteria.InventDimension5  == '')
                   && (inventDim.InventDimension6  == inventDimCriteria.InventDimension6  || inventDim.InventDimension6  == '' || inventDimCriteria.InventDimension6  == '')
                   && (inventDim.InventDimension7  == inventDimCriteria.InventDimension7  || inventDim.InventDimension7  == '' || inventDimCriteria.InventDimension7  == '')
                   && (inventDim.InventDimension8  == inventDimCriteria.InventDimension8  || inventDim.InventDimension8  == '' || inventDimCriteria.InventDimension8  == '')
                   && (inventDim.InventDimension9  == inventDimCriteria.InventDimension9  || inventDim.InventDimension9  == utcDateTimeNull() || inventDimCriteria.InventDimension9  == utcDateTimeNull())
                   && (inventDim.InventDimension10 == inventDimCriteria.InventDimension10 || inventDim.InventDimension10 == 0  || inventDimCriteria.InventDimension10 == 0)
                   && (inventDim.InventDimension11 == inventDimCriteria.InventDimension11 || inventDim.InventDimension11 == '' || inventDimCriteria.InventDimension11 == '')
                   && (inventDim.InventDimension12 == inventDimCriteria.InventDimension12 || inventDim.InventDimension12 == '' || inventDimCriteria.InventDimension12 == '');

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS24471";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the selected flag on this record and un-selects all other versions for the same item.
    /// </summary>
    public void setSelected()
    {
        BOMVersion bomVersionLocal;

        ttsbegin;
        while select forupdate bomVersionLocal
                where bomVersionLocal.ItemId         == this.ItemId    &&
                      (bomVersionLocal.Construction  == NoYes::Yes  ||
                       bomVersionLocal.BOMId         == this.BOMId)
        {
            bomVersionLocal.Construction = (bomVersionLocal.BOMId == this.BOMId) ? NoYes::Yes : NoYes::No;

            // using doUpdate to avoid an error if the BOMParameter Block Editing is set to true,
            // this is ok here, because the Construction field is just used to control which bom version to show in
            // the BOMDesigner form.
            bomVersionLocal.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemDimensions</Name>
				<Source><![CDATA[
    private void defaultItemDimensions()
    {
        InventDim       inventDim;
        Common          inventDimJoin;

        if (this.InventDimId)
        {
            inventDim = this.inventDim();
        }

        if (!inventDim.InventSiteId)
        {
            inventDim.InventSiteId  = this.getExtensionBOMTable().SiteId;
            inventDim = InventDim::findOrCreate(inventDim);

            this.InventDimId    = inventDim.InventDimId;
        }

        this.clearProductDimensions();

        if (FormDataUtil::isFormDataSource(this))
        {
            inventDimJoin = this.joinChildTable(tableNum(InventDim));

            // when called from a new (not saved) record the inventDimJoin buffer is false so the check must be on tableId.
            if (inventDimJoin.TableId == tableNum(InventDim) && FormDataUtil::isFormDataSource(inventDimJoin))
            {
                inventDimJoin.data(inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultName</Name>
				<Source><![CDATA[
    private void defaultName()
    {
        if (this.BOMId)
        {
            this.Name = this.getExtensionBOMTable().Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPmfTypeId</Name>
				<Source><![CDATA[
    private void defaultPmfTypeId()
    {
        if (#PmfEnabled)
        {
            if (this.BOMId)
            {
                this.PmfTypeId = this.getExtensionBOMTable().PmfBOMFormula;
            }
            else if (this.ItemId)
            {
                InventTable inventTable = this.getExtensionInventTable();

                if (inventTable.isBOMAllowed())
                {
                    this.PmfTypeId = PmfBOMFormula::BOM;
                }
                else if (inventTable.isFormulaAllowed())
                {
                    this.PmfTypeId = PmfBOMFormula::Formula;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWFromQuantity</Name>
				<Source><![CDATA[
    private void defaultPdsCWFromQuantity()
    {
        if (#PmfEnabled
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWFromQty = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWSize</Name>
				<Source><![CDATA[
    private void defaultPdsCWSize()
    {
        if (#PmfEnabled
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWSize = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromQuantity</Name>
				<Source><![CDATA[
    private void defaultFromQuantity()
    {
        if (#PmfEnabled
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.FromQty =  PdsCatchWeight::inventQty(this.ItemId, 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBatchSize</Name>
				<Source><![CDATA[
    private void defaultBatchSize()
    {
        if (#PmfEnabled)
        {
            this.PmfBatchSize = this.FromQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultYieldPercentage</Name>
				<Source><![CDATA[
    private void defaultYieldPercentage()
    {
        if (#PmfEnabled)
        {
            this.PmfYieldPct = this.getExtensionInventTable().PmfYieldPct;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BOMVersion, Name):
                this.defaultName();
                break;

            case fieldnum(BOMVersion, PmfTypeId):
                this.defaultPmfTypeId();
                break;

            case fieldnum(BOMVersion, InventDimId):
                this.defaultItemDimensions();
                break;

            case fieldnum(BOMVersion, PdsCWFromQty):
                this.defaultPdsCWFromQuantity();
                break;

            case fieldnum(BOMVersion, PdsCWSize):
                this.defaultPdsCWSize();
                break;

            case fieldnum(BOMVersion, FromQty):
                this.defaultFromQuantity();
                break;

            case fieldnum(BOMVersion, PmfBatchSize):
                this.defaultBatchSize();
                break;

            case fieldnum(BOMVersion, PmfYieldPct):
                this.defaultYieldPercentage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
                [fieldnum(BOMVersion, Name), [fieldnum(BOMVersion, BOMId)]],
                [fieldnum(BOMVersion, InventDimId), [fieldnum(BOMVersion, BOMId), fieldnum(BOMVersion, ItemId)]],
                [fieldnum(BOMVersion, PmfTypeId), [fieldnum(BOMVersion, BOMId), fieldnum(BOMVersion, ItemId)]],
                [fieldnum(BOMVersion, PdsCWFromQty), [fieldnum(BOMVersion, ItemId)]],
                [fieldnum(BOMVersion, PdsCWSize), [fieldnum(BOMVersion, ItemId)]],
                [fieldnum(BOMVersion, FromQty), [fieldnum(BOMVersion, ItemId)]],
                [fieldnum(BOMVersion, PmfBatchSize), [fieldnum(BOMVersion, FromQty)]],
                [fieldnum(BOMVersion, PmfYieldPct), [fieldnum(BOMVersion, ItemId)]]
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionBOMTable</Name>
				<Source><![CDATA[
    private BOMTable getExtensionBOMTable()
    {
        return this.bomTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionInventTable</Name>
				<Source><![CDATA[
    private InventTable getExtensionInventTable()
    {
        return this.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextCreationSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available BOM version creation sequence Id for the bom Id of the given BOM version.
    /// </summary>
    /// <param name="_bomVersion">
    ///    An instance of <c>BOMVersion</c> table buffer.
    /// </param>
    /// <returns>
    /// The next available creation sequence Id.
    /// </returns>
    [Hookable(false)]
    public static BOMVersionCreationSequenceNumber nextCreationSequenceId(BOMVersion _bomVersion)
    {
        BOMVersion bomVersion;
        BOMVersionCreationSequenceNumber currentSequenceId = 0;

        select maxof(SequenceId) from bomVersion
            where bomVersion.BOMId == _bomVersion.BOMId
               && bomVersion.ItemId == _bomVersion.ItemId;

        if (bomVersion.SequenceId)
        {
            currentSequenceId = bomVersion.SequenceId;
        }

        return currentSequenceId + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBomVersionCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the current object as a copy of another
    /// </summary>
    /// <param name = "_copyTempVersion">Object to copy</param>
    public void initBomVersionCopy(BOMVersion _copyTempVersion)
    {
        if (_copyTempVersion.RecId)
        {
            buf2Buf(_copyTempVersion, this);
            this.Approved = NoYes::No;
            this.Approver = 0;
            this.RecId = 0;
            this.PmfFormulaVersionCalculation = NoYes::No;
        }

        this.Active = NoYes::No;

        if (!this.ItemId && _copyTempVersion.ItemId)
        {
            this.ItemId = _copyTempVersion.ItemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    public void setItemId(ItemId _newItemId)
    {
        if (this.ItemId != _newItemId)
        {
            this.ItemId = _newItemId;
            // Clear invalid product dimensions.
            InventDim inventDimCopy = this.inventDim();
            inventDimCopy.clearProductDimensions();
            this.InventDimId = inventDim::findOrCreate(inventDimCopy).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectActiveBOMVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the active BOM versions for the specified in the <paramref
    /// name="_inventDimCriteria" /> value.
    /// </summary>
    /// <param name="_itemId">
    /// The finished good item ID for which to get the versions.
    /// </param>
    /// <param name="_date">
    /// The date as of which to get the versions.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The active inventory dimensions for the item.
    /// </param>
    /// <returns>
    /// A <c>BOMVersion</c> buffer setup to read through all the formula version records that match the
    /// planning item and dimension criteria.
    /// </returns>    
    public static BOMVersion selectActiveBOMVersions(ItemId _itemId, StartDate _date, InventDim _inventDimCriteria)
    {
        BOMVersion  bomVersion;
        InventDim   inventDim;

        if (! _itemId)
        {
            return bomVersion;
        }
        
        InventDim inventDimCriteria = _inventDimCriteria.data();
        inventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(_itemId));

        select bomVersion
            where bomVersion.ItemId == _itemId
                && bomVersion.Active == NoYes::Yes
                && bomVersion.Approved == NoYes::Yes
                && bomVersion.FromDate <= _date
                && (bomVersion.ToDate >= _date || !bomVersion.ToDate)
        join TableId from inventDim
            where inventDim.InventDimId         == bomVersion.InventDimId
                && (inventDim.InventSiteId      == inventDimCriteria.InventSiteId      || inventDim.InventSiteId      == '' || inventDimCriteria.InventSiteId      == '')
                && (inventDim.ConfigId          == inventDimCriteria.ConfigId          || inventDim.ConfigId          == '' || inventDimCriteria.ConfigId          == '')
                && (inventDim.InventSizeId      == inventDimCriteria.InventSizeId      || inventDim.InventSizeId      == '' || inventDimCriteria.InventSizeId      == '')
                && (inventDim.InventColorId     == inventDimCriteria.InventColorId     || inventDim.InventColorId     == '' || inventDimCriteria.InventColorId     == '')
                && (inventDim.InventStyleId     == inventDimCriteria.InventStyleId     || inventDim.InventStyleId     == '' || inventDimCriteria.InventStyleId     == '')
                && (inventDim.InventVersionId   == inventDimCriteria.InventVersionId   || inventDim.InventVersionId   == '' || inventDimCriteria.InventVersionId   == '')
                && (inventDim.InventDimension1  == inventDimCriteria.InventDimension1  || inventDim.InventDimension1  == '' || inventDimCriteria.InventDimension1  == '')
                && (inventDim.InventDimension2  == inventDimCriteria.InventDimension2  || inventDim.InventDimension2  == '' || inventDimCriteria.InventDimension2  == '')
                && (inventDim.InventDimension3  == inventDimCriteria.InventDimension3  || inventDim.InventDimension3  == '' || inventDimCriteria.InventDimension3  == '')
                && (inventDim.InventDimension4  == inventDimCriteria.InventDimension4  || inventDim.InventDimension4  == '' || inventDimCriteria.InventDimension4  == '')
                && (inventDim.InventDimension5  == inventDimCriteria.InventDimension5  || inventDim.InventDimension5  == '' || inventDimCriteria.InventDimension5  == '')
                && (inventDim.InventDimension6  == inventDimCriteria.InventDimension6  || inventDim.InventDimension6  == '' || inventDimCriteria.InventDimension6  == '')
                && (inventDim.InventDimension7  == inventDimCriteria.InventDimension7  || inventDim.InventDimension7  == '' || inventDimCriteria.InventDimension7  == '')
                && (inventDim.InventDimension8  == inventDimCriteria.InventDimension8  || inventDim.InventDimension8  == '' || inventDimCriteria.InventDimension8  == '')
                && (inventDim.InventDimension9  == inventDimCriteria.InventDimension9  || inventDim.InventDimension9  == utcDateTimeNull() || inventDimCriteria.InventDimension9  == utcDateTimeNull())
                && (inventDim.InventDimension10 == inventDimCriteria.InventDimension10 || inventDim.InventDimension10 == 0  || inventDimCriteria.InventDimension10 == 0)
                && (inventDim.InventDimension11 == inventDimCriteria.InventDimension11 || inventDim.InventDimension11 == '' || inventDimCriteria.InventDimension11 == '')
                && (inventDim.InventDimension12 == inventDimCriteria.InventDimension12 || inventDim.InventDimension12 == '' || inventDimCriteria.InventDimension12 == '');

        return bomVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124099</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>BOMConsistOf</FormRef>
	<Label>@SYS22799</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@SYS2453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfFormula</Name>
			<Label>@SYS672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfFormulaChangeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfYieldPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfBatchSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWFromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfCoByVarAllow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfFormulaMultiple</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfBulkParent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfFormulaVersionCalculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfTotalCostAllocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Construction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMVersionActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>BOMApprove</ConfigurationKey>
			<ExtendedDataType>BOMVersionApproved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>BOMApprove</ConfigurationKey>
			<ExtendedDataType>BOMRouteApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Construction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMRouteVersionConstruction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductFromQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdProduction</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWFromQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS264</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS98</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfBatchSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfBatchSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfBulkParent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfBulkParent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfCoByVarAllow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>PmfCoByVarAllow</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PmfFormulaChangeDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@PRO71</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfFormulaMultiple</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfFormulaMultiple</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfFormulaVersionCalculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfFormulaVersionCalculation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfTotalCostAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfTotalCostAllocation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PRO77</Label>
			<EnumType>PmfBOMFormula</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfYieldPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfYieldPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>BOMVersionCreationSequenceNumber</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemFromToIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BOMIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PmfItemActiveIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>PMF</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerApprover</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfBulkParent</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PmfBulkParent_InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PmfBulkParent_BOMVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfBulkParent</Name>
					<SourceEDT>PmfBulkParent</SourceEDT>
					<Field>PmfBulkParent</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>