<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSErrorLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSErrorLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLogEntry</Name>
				<Source><![CDATA[
    private static TMSErrorLogEntry buildLogEntry(System.Exception _ex)
    {
        System.Text.StringBuilder details = new System.Text.StringBuilder();
        str                       message;
        str                       source;
        str                       stack;
        Counter                   level;

        while (_ex != null)
        {
            message = TMSErrorLog::toStr(_ex.get_Message());
            source  = TMSErrorLog::toStr(_ex.get_Source());
            stack   = TMSErrorLog::toStr(_ex.get_StackTrace());

            details.AppendLine(strFmt("@TRX2576", level));
            details.AppendLine(strFmt("@TRX2596", message));
            details.AppendLine(strFmt("@TRX2597", source));
            details.AppendLine(strFmt("@TRX2598", stack));

            _ex = _ex.get_InnerException();
            level++;
        }

        return details.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an error log entry in the <c>TMSErrorLog</c> table.
    /// </summary>
    /// <param name="_exception">
    ///     An object containing a TMS exception details.
    /// </param>
    public static void createLogEntry(System.Exception _exception)
    {
        TMSErrorLog tmsErrorLog;

        if (_exception)
        {
            ttsBegin;

            tmsErrorLog.Timestamp  = DateTimeUtil::utcNow();
            tmsErrorLog.ErrorEntry = TMSErrorLog::buildLogEntry(_exception);
            tmsErrorLog.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>TMSErrorLog</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the TMS error log record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstOnly TMSErrorLog
                   where TMSErrorLog.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>TMSErrorLog</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the TMS error log record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional
    /// </param>
    /// <returns>
    ///     A record in the <c>TMSErrorLog</c> table; otherwise, an empty record.
    /// </returns>
    public static TMSErrorLog find(RecId _recId, boolean _forUpdate = false)
    {
        TMSErrorLog tmsErrorLog;

        if (_recId)
        {
            tmsErrorLog.selectForUpdate(_forUpdate);
            select firstOnly tmsErrorLog
                where tmsErrorLog.RecId == _recId;
        }

        return tmsErrorLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toStr</Name>
				<Source><![CDATA[
    private static str toStr(System.String _str)
    {
        if (_str)
        {
            return _str;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX2562</DeveloperDocumentation>
	<Label>@TRX2562</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ErrorEntry</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>Transportation</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Timestamp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@TRX2586</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Timestamp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorEntry</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSErrorLogEntry</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>Timestamp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSErrorLogEntryTimestamp</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>