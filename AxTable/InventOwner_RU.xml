<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOwner_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventOwner_RU extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    public display Name accountName()
    {
        return DirPartyTable::getName(this.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNameRelated</Name>
				<Source><![CDATA[
    public display Name accountNameRelated()
    {
        switch (this.AccountType)
        {
            case InventOwnerAccountType_RU::Vend:
                return CustTable::find(this.AccountNumRelated).name();
            case InventOwnerAccountType_RU::Cust:
                return VendTable::find(this.AccountNumRelated).name();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeRelated</Name>
				<Source><![CDATA[
    public display InventOwnerAccountType_RU accountTypeRelated()
    {
        switch (this.AccountType)
        {
            case InventOwnerAccountType_RU::Vend:
                return InventOwnerAccountType_RU::Cust;
            case InventOwnerAccountType_RU::Cust:
                return InventOwnerAccountType_RU::Vend;
        }

        return InventOwnerAccountType_RU::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementDocumentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays document title of the current agreement.
    /// </summary>
    /// <returns>
    ///     The agreement document title.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display AgreementDocumentTitle agreementDocumentTitle()
    {
        AgreementHeaderExt_RU agreementHeaderExt = this.agreementHeaderExt();

        if (agreementHeaderExt)
        {
            return AgreementHeader::find(agreementHeaderExt.AgreementHeader).DocumentTitle;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>AgreementHeaderExt_RU</c> record related by the <c>AgreementHeaderExt</c> field of the current owner.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>AgreementHeaderExt_RU</c> record.
    /// </returns>
    public AgreementHeaderExt_RU agreementHeaderExt(boolean _forUpdate = false)
    {
        AgreementHeaderExt_RU agreementHeaderExt;

        if (this.AccountType != InventOwnerAccountType_RU::None)
        {
            agreementHeaderExt = AgreementHeaderExt_RU::find(this.AgreementHeaderExt, _forUpdate);
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventOwnerId</Name>
				<Source><![CDATA[
    public boolean buildInventOwnerId()
    {
        boolean             ok = true;
        str                 inventOwnerId;
        SysDictField        sysDictField;
        if (this.AccountType == InventOwnerAccountType_RU::Vend)
        {
            inventOwnerId += strLRTrim(this.AccountNum);
            if (this.AgreementHeaderExt)
            {
                inventOwnerId += '_';
                inventOwnerId += strLRTrim(this.agreementDocumentTitle());
            }

            sysDictField = new SysDictField(tableNum(InventOwner_RU), fieldNum(InventOwner_RU, InventOwnerId));
            if (sysDictField.stringLen() < strLen(inventOwnerId))
            {
                ok = false;
            }
        }

        if (ok)
        {
            this.InventOwnerId = inventOwnerId;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    public CustTable custTable()
    {
        switch (this.AccountType)
        {
            case InventOwnerAccountType_RU::Vend:
                return CustTable::find(this.AccountNumRelated);
            case InventOwnerAccountType_RU::Cust:
                return CustTable::find(this.AccountNum);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTrans</Name>
				<Source><![CDATA[
    public boolean hasInventTrans()
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventOwnerId_RU    == this.InventOwnerId
        join TableId from inventTrans
            where inventTrans.InventDimId       == inventDim.InventDimId;

        if (inventDim.RecId)
        {
            return true;
        }
        else
        {
            if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
            {
                WHSInventoryTransactionView inventoryTransactionView;
                select firstonly RecId from inventoryTransactionView
                    where inventoryTransactionView.InventOwnerId_RU == this.InventOwnerId;

                return inventoryTransactionView.RecId;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates a <c>InventOwner_RU</c> record with values based on <c>AgreementHeaderExt_RU</c> record.
    /// </summary>
    /// <param name="_agreementHeaderExt">
    ///     The <c>AgreementHeaderExt_RU</c> record.
    /// </param>
    public void initFromAgreementHeaderExt(AgreementHeaderExt_RU _agreementHeaderExt)
    {
        AgreementHeader            agreementHeader;
        SalesAgreementHeader       salesAgreementHeader;
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        PurchAgreementHeader       purchAgreementHeader;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        agreementHeader = AgreementHeader::find(_agreementHeaderExt.AgreementHeader);

        if (agreementHeader is PurchAgreementHeader)
        {
            purchAgreementHeader   = agreementHeader as PurchAgreementHeader;
            this.AccountType       = InventOwnerAccountType_RU::Vend;
            this.AccountNum        = purchAgreementHeader.VendAccount;
            this.AccountNumRelated = CustTable::findByPartyRecId(VendTable::find(purchAgreementHeader.VendAccount).Party).AccountNum;

            purchAgreementHeaderExt        = _agreementHeaderExt as PurchAgreementHeaderExt_RU;
            this.AgreementHeaderExt        = purchAgreementHeaderExt.RecId;
            this.RelatedAgreementHeaderExt = purchAgreementHeaderExt.salesAgreementHeaderIntracompany().RecId;
        }
        else
        if (agreementHeader is SalesAgreementHeader)
        {
            salesAgreementHeader    = agreementHeader as SalesAgreementHeader;
            this.AccountType        = InventOwnerAccountType_RU::Cust;
            this.AccountNum         = salesAgreementHeader.CustAccount;
            this.AccountNumRelated  = VendTable::findByPartyRecId(CustTable::find(salesAgreementHeader.CustAccount).Party).AccountNum;

            salesAgreementHeaderExt        = _agreementHeaderExt as SalesAgreementHeaderExt_RU;
            this.AgreementHeaderExt        = salesAgreementHeaderExt.RecId;
            this.RelatedAgreementHeaderExt = salesAgreementHeaderExt.purchAgreementHeaderIntracompany().RecId;
        }

        this.Party = this.derivePartyFromAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventMovement</Name>
				<Source><![CDATA[
    public void initFromInventMovement(InventMovement inventMovement, InventTrans _inventTrans = null)
    {
        PurchTable  purchTable;

        if (inventMovement.transType() == InventTransType::Purch)
        {
            purchTable              = PurchTable::find(inventMovement.transRefId());
            this.AccountType        = InventOwnerAccountType_RU::Vend;
            this.AccountNum         = purchTable.OrderAccount;
            this.AgreementHeaderExt = purchTable.purchTable_RU().AgreementHeaderExt_RU;
            this.Party              = this.derivePartyFromAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.AccountType == InventOwnerAccountType_RU::None)
        {
            this.setAccountEmptyValues();
        }
        else
        {
            this.setAccountRelated();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOwnerName</Name>
				<Source><![CDATA[
    display Name inventOwnerName()
    {
        Name name;
        name = this.accountName();

        if (this.AccountType)
        {
            name = strFmt("%1: %2", this.AccountType, name);
        }

        if (this.AgreementHeaderExt)
        {
            name += strFmt(", %1", fieldLabelValue(tableNum(InventOwner_RU), fieldNum(InventOwner_RU, AgreementHeaderExt),
                AgreementHeaderExt_RU::find(this.AgreementHeaderExt).AgreementId));
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventOwner_RU, AccountType):
                if (this.AccountType != this.orig().AccountType)
                {
                    this.AccountNum = '';
                    this.AgreementHeaderExt = 0;
                    this.Party = 0;
                }
                break;
            case fieldNum(InventOwner_RU, AccountNum):
                if (this.AccountNum != this.orig().AccountNum)
                {
                    this.AgreementHeaderExt = 0;
                    this.Party = this.derivePartyFromAccount();

                    if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        this.InventOwnerId = this.AccountNum;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>PurchAgreementHeaderExt_RU</c> record related to the current owner.
    /// </summary>
    /// <returns>
    ///     The <c>PurchAgreementHeaderExt_RU</c> record.
    /// </returns>
    public PurchAgreementHeaderExt_RU purchAgreementHeaderExt()
    {
        if (this.AccountType == InventOwnerAccountType_RU::Cust)
        {
            return this.relatedAgreementHeaderExt() as PurchAgreementHeaderExt_RU;
        }

        return this.agreementHeaderExt() as PurchAgreementHeaderExt_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedAgreementDocumentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays document title of the related agreement.
    /// </summary>
    /// <returns>
    ///     The related agreement document title.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display AgreementDocumentTitle relatedAgreementDocumentTitle()
    {
        AgreementHeaderExt_RU agreementHeaderExt = AgreementHeaderExt_RU::find(this.RelatedAgreementHeaderExt);

        if (agreementHeaderExt)
        {
            return AgreementHeader::find(agreementHeaderExt.AgreementHeader).DocumentTitle;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedAgreementHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>AgreementHeaderExt_RU</c> record related by the <c>RelatedAgreementHeaderExt</c> field of the current owner.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>AgreementHeaderExt_RU</c> record.
    /// </returns>
    public AgreementHeaderExt_RU relatedAgreementHeaderExt(boolean _forUpdate = false)
    {
        AgreementHeaderExt_RU agreementHeaderExt;

        if (this.AccountType != InventOwnerAccountType_RU::None)
        {
            agreementHeaderExt = AgreementHeaderExt_RU::find(this.RelatedAgreementHeaderExt, _forUpdate);
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>SalesAgreementHeaderExt_RU</c> record related to the current owner.
    /// </summary>
    /// <returns>
    ///     The <c>SalesAgreementHeaderExt_RU</c> record.
    /// </returns>
    public SalesAgreementHeaderExt_RU salesAgreementHeaderExt()
    {
        if (this.AccountType == InventOwnerAccountType_RU::Vend)
        {
            return this.relatedAgreementHeaderExt() as SalesAgreementHeaderExt_RU;
        }

        return this.agreementHeaderExt() as SalesAgreementHeaderExt_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountEmptyValues</Name>
				<Source><![CDATA[
    public void setAccountEmptyValues()
    {
        this.AccountNum      = '';
        this.AgreementHeaderExt = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountRelated</Name>
				<Source><![CDATA[
    public void setAccountRelated()
    {
        switch (this.AccountType)
        {
            case InventOwnerAccountType_RU::Vend:
                this.AccountNumRelated = CustTable::findByPartyRecId(this.Party).AccountNum;
                break;
            case InventOwnerAccountType_RU::Cust:
                this.AccountNumRelated = CustTable::find(this.AccountNum).VendAccount;
                break;
        }

        if (this.AgreementHeaderExt)
        {
            this.initFromAgreementHeaderExt(this.agreementHeaderExt());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>derivePartyFromAccount</Name>
				<Source><![CDATA[
    private DirPartyRecId derivePartyFromAccount()
    {
        switch (this.AccountType)
        {
            case InventOwnerAccountType_RU::Vend:
                return VendTable::find(this.AccountNum).Party;

            case InventOwnerAccountType_RU::Cust:
                return CustTable::find(this.AccountNum).Party;

            case InventOwnerAccountType_RU::None:
                return 0;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.AccountType == InventOwnerAccountType_RU::None)
        {
            this.setAccountEmptyValues();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (PurchParameters::find().InventOwnerId_RU == this.InventOwnerId)
        {
            ret = checkFailed("@SYS4081472");
        }

        if (ret && this.hasInventTrans())
        {
            ret = checkFailed("@GLS115683");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if ((this.AccountType == InventOwnerAccountType_RU::Cust || this.AccountType == InventOwnerAccountType_RU::Vend)
            && !this.AccountNum)
        {
            ret = checkFailed(strFmt("@GLS107196", fieldId2pname(tableNum(InventOwner_RU), fieldNum(InventOwner_RU, AccountNum))));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.Party
            && this.Party != this.derivePartyFromAccount())
        {
            ret = checkFailed(strFmt("@SYS78966", fieldPName(InventOwner_RU, Party)));
        }

        if (this.AccountType == InventOwnerAccountType_RU::None
            && this.Party
            && InterCompanyTradingPartner::findVendor(this.Party, this.company()).interCompanyTradingRelation().Active)
        {
            ret = checkFailed(strFmt("@Consignment:MessageValidation_InventoryOwner_Vendor", this.vendTable().AccountNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable</Name>
				<Source><![CDATA[
    public VendTable vendTable()
    {
        switch (this.AccountType)
        {
            case InventOwnerAccountType_RU::Vend:
                return VendTable::find(this.AccountNum);
            case InventOwnerAccountType_RU::Cust:
                return VendTable::find(this.AccountNumRelated);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines agreement module depending on account type of inventory owner.
    /// </summary>
    /// <param name="_accountType">
    ///     Account type of inventory owner.
    /// </param>
    /// <returns>
    ///     The agreement module.
    /// </returns>
    public static ModuleSalesPurch agreementModule(InventOwnerAccountType_RU _accountType)
    {
        switch (_accountType)
        {
            case InventOwnerAccountType_RU::Cust:
                return ModuleSalesPurch::Sales;
            case InventOwnerAccountType_RU::Vend:
                return ModuleSalesPurch::Purch;
        }

        return ModuleSalesPurch::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(InventOwnerId _inventOwnerId)
    {
        if (_inventOwnerId && !InventOwner_RU::exist(_inventOwnerId))
        {
            return checkFailed(strFmt(InventOwner_RU::txtNotExist(), _inventOwnerId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchOrder</Name>
				<Source><![CDATA[
    public static boolean checkPurchOrder(InventOwnerId_RU _inventOwnerId, PurchTable _purchTable)
    {
        return InventOwner_RU::findAccountNum(InventOwnerAccountType_RU::Vend,
                                              _purchTable.OrderAccount,
                                              _purchTable.purchTable_RU().AgreementHeaderExt_RU).InventOwnerId == _inventOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesOrder</Name>
				<Source><![CDATA[
    public static boolean checkSalesOrder(InventOwnerId_RU _inventOwnerId, SalesTable _salesTable)
    {
        return InventOwner_RU::findCustAccount(_salesTable.CustAccount,
                                               _salesTable.salesTable_RU().AgreementHeaderExt_RU).InventOwnerId == _inventOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(InventOwnerId _inventOwnerId)
    {
        return _inventOwnerId
            && (select inventOwner_RU
                    where inventOwner_RU.InventOwnerId == _inventOwnerId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventOwner_RU find(InventOwnerId _inventOwnerId, boolean _forUpdate = false)
    {
        InventOwner_RU   inventOwner;
        inventOwner.selectForUpdate(_forUpdate);

        if (_inventOwnerId)
        {
            select firstonly inventOwner
                where inventOwner.InventOwnerId == _inventOwnerId;
        }
        return inventOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNum</Name>
				<Source><![CDATA[
    public static InventOwner_RU findAccountNum(InventOwnerAccountType_RU  _accountType,
                                                InventOwnerAccountNum_RU   _accountNum,
                                                AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
                                                boolean                    _forUpdate = false)
    {
        InventOwner_RU   inventOwner;
        inventOwner.selectForUpdate(_forUpdate);

        if (_accountNum)
        {
            select firstonly inventOwner
                where inventOwner.AccountNum         == _accountNum
                   && inventOwner.AccountType        == _accountType
                   && inventOwner.AgreementHeaderExt == _agreementHeaderExtRecId;
        }
        return inventOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustAccount</Name>
				<Source><![CDATA[
    public static InventOwner_RU findCustAccount(CustAccount                _custAccount,
                                                 AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
                                                 boolean                    _forUpdate = false)
    {
        InventOwner_RU  inventOwner;
        VendTable       vendTable;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        inventOwner.selectForUpdate(_forUpdate);

        if (_custAccount)
        {
            vendTable = VendTable::findByPartyRecId(CustTable::find(_custAccount).Party);
            if (vendTable)
            {
                purchAgreementHeaderExt = SalesAgreementHeaderExt_RU::find(_agreementHeaderExtRecId).purchAgreementHeaderIntracompany();

                select firstonly inventOwner
                    where inventOwner.AccountNum         == vendTable.AccountNum
                       && inventOwner.AccountType        == InventOwnerAccountType_RU::Vend
                       && inventOwner.AgreementHeaderExt == purchAgreementHeaderExt.RecId;
            }
        }
        return inventOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens the agreement form for the <c>AgreementHeaderExt_RU</c> record depending on account type of inventory owner.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the <c>AgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_accountType">
    ///     Account type of inventory owner.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Function <c>jumpRefAgreement</c> has been incorrectly called.
    /// </exception>
    public static void jumpRefAgreement(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId, InventOwnerAccountType_RU _accountType)
    {
        switch (InventOwner_RU::agreementModule(_accountType))
        {
            case ModuleSalesPurch::Sales:
                SalesAgreementHeaderExt_RU::salesAgreementJumpRef(_agreementHeaderExtRecId);
                break;

            case ModuleSalesPurch::Purch:
                PurchAgreementHeaderExt_RU::purchAgreementJumpRef(_agreementHeaderExtRecId);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Lookups the agreement depending on account type and account of the inventory owner
    /// </summary>
    /// <param name="_accountType">
    ///     Account type of the inventory owner.
    /// </param>
    /// <param name="_accountNum">
    ///     Account of the inventory owner.
    /// </param>
    /// <param name="_callingControl">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///     The <c>AgreementHeaderExt_RU</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Function <c>lookupAgreement</c> has been incorrectly called.
    /// </exception>
    public static AgreementHeaderExt_RU lookupAgreement(
        InventOwnerAccountType_RU   _accountType,
        InventOwnerAccountNum_RU    _accountNum,
        FormReferenceControl        _callingControl)
    {
        switch (InventOwner_RU::agreementModule(_accountType))
        {
            case ModuleSalesPurch::Sales:
                return SalesAgreementHeaderExt_RU::salesAgreementReferenceLookup(_callingControl, _accountNum);

            case ModuleSalesPurch::Purch:
                return PurchAgreementHeaderExt_RU::purchAgreementReferenceLookup(_callingControl, _accountNum);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public static Name name(InventOwnerId_RU _inventOwnerId)
    {
        return InventOwner_RU::find(_inventOwnerId).inventOwnerName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@GLS115656";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAssignOwnerId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Inventory owner must be assigned.
    /// </summary>
    /// <param name="_movement">
    /// The movement need owner inventory dimension.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension that will have the ownerId assigned if it is possible.
    /// </param>
    /// <param name="_physicalUpdate">
    /// A Boolean value to identify if the movement is doing physical update.
    /// </param>
    /// <returns>true if the owner must be assigned; otherwise, false.</returns>
    public static boolean mustAssignOwnerId(
        InventMovement  _movement,
        InventDim       _inventDim,
        boolean         _physicalUpdate)
    {
        #ISOCountryRegionCodes

        return _physicalUpdate
        && !_inventDim.InventOwnerId_RU
        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
        && _movement.updateAutoDimOwnerId_RU()
        && _movement.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim, InventOwnerId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndAssignOwner</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create and assign Inventory owner
    /// </summary>
    /// <param name="_movement">
    ///  The movement need owner inventory dimension.
    /// </param>
    /// <param name="_inventDim">
    ///  The inventory dimension that will have the ownerId assigned if it is possible.
    /// </param>
    /// <param name="_physicalUpdate">
    ///  A boolean value to identify if the movement is doing physical update.
    /// </param>
    public static void createAndAssignOwner(
        InventMovement  _movement,
        InventDim       _inventDim,
        boolean         _physicalUpdate)
    {
        if (InventOwner_RU::mustAssignOwnerId(_movement, _inventDim, _physicalUpdate))
        {
            InventOwner_RU  inventOwner;
            ttsBegin;
            if (_inventDim.inventProfile_RU().InventOwnerIdInit)
            {
                inventOwner.initFromInventMovement(_movement);
                _inventDim.InventOwnerId_RU = InventOwner_RU::findAccountNum(inventOwner.AccountType,
                                                                                inventOwner.AccountNum,
                                                                                inventOwner.AgreementHeaderExt).InventOwnerId;
                if (!_inventDim.InventOwnerId_RU)
                {
                    switch (PurchParameters::find().InventOwnerIdInitMode_RU)
                    {
                        case InventOwnerIdInitMode_RU::NumberSeq:
                            inventOwner.InventOwnerId = NumberSeq::newGetNum(InventParameters::numRefInventOwnerId_RU()).num();
                            if (InventOwner_RU::exist(inventOwner.InventOwnerId))
                            {
                                throw error(strFmt("@GLS115679",
                                                       inventOwner.InventOwnerId,
                                                       inventOwner.AccountNum,
                                                       inventOwner.agreementHeaderExt().AgreementId,
                                                       fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                            }
                            break;
                        case InventOwnerIdInitMode_RU::AccountNumAgreement:
                            if (!inventOwner.buildInventOwnerId())
                            {
                                throw error(strFmt("@GLS115680", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                            }
                            if (InventOwner_RU::exist(inventOwner.InventOwnerId))
                            {
                                throw error(strFmt("@GLS115679",
                                                       inventOwner.InventOwnerId,
                                                       inventOwner.AccountNum,
                                                       inventOwner.agreementHeaderExt().AgreementId,
                                                       fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                            }
                            break;
                        case InventOwnerIdInitMode_RU::None:
                            throw error(strFmt("@GLS115681",
                                                   inventOwner.AccountNum,
                                                   inventOwner.agreementHeaderExt().AgreementId,
                                                   fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                        default:
                            break;
                    }
                    if (!inventOwner.InventOwnerId)
                    {
                        throw error(strFmt("@GLS115682",
                                               inventOwner.AccountNum,
                                               inventOwner.agreementHeaderExt().AgreementId,
                                               fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                    }

                    inventOwner.insert();
                    _inventDim.InventOwnerId_RU = inventOwner.InventOwnerId;
                }
            }
            else
            {
                if (!_inventDim.inventProfile_RU().InventOwnerIdCheckPurchOrder)
                {
                    _inventDim.InventOwnerId_RU = PurchParameters::find().InventOwnerId_RU;
                }
                else
                {
                    inventOwner.initFromInventMovement(_movement);
                    _inventDim.InventOwnerId_RU = InventOwner_RU::findAccountNum(inventOwner.AccountType,
                                                                           inventOwner.AccountNum,
                                                                           inventOwner.AgreementHeaderExt).InventOwnerId;
                    if (!_inventDim.InventOwnerId_RU)
                    {
                        warning(strFmt("@GLS115681",
                                           inventOwner.AccountNum,
                                           inventOwner.agreementHeaderExt().AgreementId,
                                           fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));

                        throw error(strFmt("@GLS115682",
                                               inventOwner.AccountNum,
                                               inventOwner.agreementHeaderExt().AgreementId,
                                               fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                    }
                }
            }

            if (!_inventDim.InventOwnerId_RU)
            {
                throw error(strFmt("@SYS53724",fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
            }
            ttsCommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the primary key field of this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        InventDim inventDim;
        InventOwnerId_RU origInventOwnerID_RU = this.orig().InventOwnerId;

        ttsBegin;

        while select forupdate inventDim
            where InventDim.InventOwnerId_RU == origInventOwnerID_RU
        {
            inventDim.InventOwnerId_RU = this.InventOwnerId;
            inventDim.update(true);
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByPartyRecId</Name>
				<Source><![CDATA[
    internal static InventOwner_RU findOrCreateByPartyRecId(DirPartyRecId _partyRecId, InventOwnerId _inventOwnerId)
    {
        InventOwner_RU owner = InventOwner_RU::findByPartyRecId(_partyRecId);

        if (!owner.RecId && (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || CompanyInfo::current() == _partyRecId))
        {
            owner.InventOwnerId = _inventOwnerId;
            owner.Party = _partyRecId;
            owner.insert();
        }

        return owner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCurrentLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the inventory owner for the current legal entity.
    /// </summary>
    /// <returns>The inventory owner for the current legal entity.</returns>
    public static InventOwner_RU findOrCreateCurrentLegalEntity()
    {
        CompanyInfo currentLegalEntity = CompanyInfo::find();
        return InventOwner_RU::findOrCreateByPartyRecId(currentLegalEntity.RecId, currentLegalEntity.DataArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory owner for a vendor.
    /// </summary>
    /// <param name = "_vendorAccountNumber">The vendor account number.</param>
    /// <returns>The inventory owner for a vendor.</returns>
    /// <remarks>This method will throw an error if no vendor owner is found.</remarks>
    public static InventOwner_RU getVendorOwner(VendAccount _vendorAccountNumber)
    {
        InventOwner_RU owner = InventOwner_RU::findByVendor(_vendorAccountNumber);

        if (!owner.RecId)
        {
            throw error(strFmt("@Consignment:MessageValidation_InventOwnerNotDefined", _vendorAccountNumber));
        }

        return owner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the inventory owner for a vendor.
    /// </summary>
    /// <param name = "_vendorAccountNumber">The vendor account number.</param>
    /// <returns>The inventory owner for a vendor.</returns>
    public static InventOwner_RU findByVendor(VendAccount _vendorAccountNumber)
    {
        return InventOwner_RU::findByPartyRecId(VendTable::find(_vendorAccountNumber).Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(InventOwner_RU, Party),
                [fieldNum(InventOwner_RU, AccountType),
                fieldNum(InventOwner_RU, AccountNum)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventOwner_RU, Party):
                if (this.isFieldSet(fieldNum(InventOwner_RU, AccountType)) || this.isFieldSet(fieldNum(InventOwner_RU, AccountNum)))
                {
                    this.Party = this.derivePartyFromAccount();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Party = this.derivePartyFromAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the owner record for the specified party.
    /// </summary>
    /// <param name = "_partyRecId">The <c>RecId</c> of the party.</param>
    /// <param name="_forUpdate">A boolean value that determines whether the owner record must be selected for update.</param>
    /// <returns>The <c>InventOwner_RU</c> record.</returns>
    /// <remarks>Note that in the Russian country context there may exist multiple owner records with the same party.</remarks>
    public static InventOwner_RU findByPartyRecId(DirPartyRecId _partyRecId, boolean _forUpdate = true)
    {
        InventOwner_RU owner;

        if (_partyRecId)
        {
            owner.selectForUpdate(_forUpdate);

            select firstonly owner
                where owner.Party == _partyRecId;
        }

        return owner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVendorAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the vendor account number associated with the current inventory owner dimension.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the value should be stored.
    /// </param>
    /// <param name="_vendAccount">
    /// A vendor account number.
    /// </param>
    /// <returns>
    /// The vendor account number.
    /// </returns>
    /// <remarks>Setting the vendor account number will set in fact the associated party record id.</remarks>
    public edit VendAccount editVendorAccount(boolean _set, VendAccount _vendAccount)
    {
        if (_set)
        {
            if (_vendAccount)
            {
                this.Party = VendTable::find(_vendAccount).Party;
                this.InventOwnerId = _vendAccount;
            }
            else
            {
                // reset values
                this.Party = 0;
                this.InventOwnerId = '';
            }
        }
        else
        {
            if (this.Party)
            {
                _vendAccount = VendTable::findByPartyRecId(this.Party).AccountNum;
            }
        }

        return _vendAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<FormRef>InventOwner</FormRef>
	<Label>@SCM:InventoryOwners</Label>
	<PreviewPartRef>InventOwnerPreviewPart</PreviewPartRef>
	<TableGroup>Group</TableGroup>
	<TitleField1>InventOwnerId</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>InventOwnerIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventOwnerIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS40757</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountRelated</Name>
			<Label>@GLS115572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>accountTypeRelated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumRelated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountNameRelated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement</Name>
			<Label>@GLS105065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventOwnerName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RelatedAgreement</Name>
			<Label>@GLS115500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelatedAgreementHeaderExt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>relatedAgreementDocumentTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Preview</Name>
			<Label>@SYS54744</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventOwnerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventOwnerPartyRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>InventOwnerAccountNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumRelated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>InventOwnerAccountNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<EnumType>InventOwnerAccountType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementHeaderExt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AgreementHeaderExtRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventOwnerId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventOwnerId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RelatedAgreementHeaderExt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AgreementHeaderExtRecId_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventOwnerIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventOwnerId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountNumAgreementPartyIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementHeaderExt</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountRelatedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNumRelated</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RelatedAgreementHeaderExt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderExtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RelatedAgreementHeaderExtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RelatedAgreementHeaderExt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PartyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementHeaderExt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHeaderExt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementHeaderExt</Name>
					<Field>AgreementHeaderExt</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>InventOwnerAccountType_RU::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelatedAgreementHeaderExt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RelatedAgreementHeaderExt</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventOwner_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelatedAgreementHeaderExt</Name>
					<Field>RelatedAgreementHeaderExt</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>InventOwnerAccountType_RU::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Party</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Vendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Vendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventoryOwners</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>