<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatExternalCatalogCategories</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatExternalCatalogCategories extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editCategoryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <c>Name</c> value of the <c>ecoResCategory</c> object.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the <c>Name</c> value.
    /// </param>
    /// <param name="_categoryName">
    ///    An instance of the <c>EcoResCategoryName</c> data type.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResCategoryName</c> data type.
    /// </returns>
    public edit EcoResCategoryName editCategoryName(boolean _set, EcoResCategoryName _categoryName)
    {
        EcoResCategory              ecoResCategory;
        EcoResCategoryName          categoryName;

        if (_set)
        {
            if (_categoryName)
            {
                ecoResCategory = EcoResCategory::find(this.Category);
                             
                if (ecoResCategory)
                {
                    categoryName = ecoResCategory.Name;
                }
            }
            
            if (!categoryName)
            {
                this.Category = 0;
            }
        }
        else
        {
            ecoResCategory = EcoResCategory::find(this.Category);
            categoryName = ecoResCategory.Name;
        }

        return categoryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the specified category is valid, e.g. if it is not expired.
    /// </summary>
    /// <param name = "_ecoResCategory">The <c>EcoResCategory</c> to be checked.</param>
    /// <returns>True if the category is valid; otherwise, false.</returns>
    public static boolean isValidCategory(RefRecId _ecoResCategoryRecId, RefRecId _catExternalCatalogVendorRecId)
    {
        EcoResCategory                  ecoResCategory;
        VendCategory                    vendCategory;
        CatExternalCatalogVendor        catExternalCatalogVendor;
        vendProcurementCategoryStatus   vendProcurementCategoryStatus;


        select RecId from catExternalCatalogVendor
            where catExternalCatalogVendor.RecId == _catExternalCatalogVendorRecId
                exists join vendCategory
                    where vendCategory.VendorDataArea == catExternalCatalogVendor.VendorDataAreaId
                        && vendCategory.VendorAccount == catExternalCatalogVendor.VendorAccountNumber
                        && vendCategory.Category == _ecoResCategoryRecId
                exists join vendProcurementCategoryStatus
                    where vendProcurementCategoryStatus.VendorCategory == vendCategory.RecId;

        return catExternalCatalogVendor.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>CatExternalCatalogCategories</c> record exists with the specific unique key combination.
    /// </summary>
    /// <param  name='_externalCatalogVendorRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_categoryRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExist(RefRecId _externalCatalogVendorRecId, RefRecId _categoryRecId)
    {
        if (!CatExternalCatalogCategories::exist(_externalCatalogVendorRecId, _categoryRecId))
        {
            return checkFailed(strfmt(CatExternalCatalogCategories::txtNotExist(), _categoryRecId,_externalCatalogVendorRecId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>CatExternalCatalogCategories</c> record exists with the specific unique key combination.
    /// </summary>
    /// <param  name='_externalCatalogVendorRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_categoryRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean exist(RefRecId _externalCatalogVendorRecId, RefRecId _categoryRecId)
    {
        return (CatExternalCatalogCategories::find(_externalCatalogVendorRecId, _categoryRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatExternalCatalogCategories</c> record with the specific unique key combination.
    /// </summary>
    /// <param  name='_externalCatalogVendorRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_categoryRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>Boolean</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatExternalCatalogCategories</c> data type.
    /// </returns>
    public static CatExternalCatalogCategories find(RefRecId _externalCatalogVendorRecId, RefRecId _categoryRecId, boolean _forUpdate = false)
    {
        CatExternalCatalogCategories catExternalCatalogCategories;

        if (_categoryRecId && _externalCatalogVendorRecId )
        {
            catExternalCatalogCategories.selectForUpdate(_forUpdate);

            select firstonly * from catExternalCatalogCategories
                where catExternalCatalogCategories.Category == _categoryRecId
                    && catExternalCatalogCategories.ExternalCatalogVendor == _externalCatalogVendorRecId;
        }
        return catExternalCatalogCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatExternalCatalogCategories</c> record with the specific record id.
    /// </summary>
    /// <param name="_recId">
    /// The record id for the external catalog.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A <c>boolean</c> value indicating whether the record should be selected for update or not.
    /// </param>
    /// <returns>
    /// Found <c>CatExternalCatalogTable</c> record or an empty record.
    /// </returns>
    public static CatExternalCatalogCategories findByRecId(RefRecId _catExternalCatalogCategoriesRecId, boolean _forUpdate = false)
    {
        CatExternalCatalogCategories catExternalCatalogCategories;

        catExternalCatalogCategories.selectForUpdate(_forUpdate);

        select firstonly catExternalCatalogCategories
            where catExternalCatalogCategories.RecId == _catExternalCatalogCategoriesRecId;

        return catExternalCatalogCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS84736";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryExistsForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>CatExternalCatalogVendor</c> has a <c>CatExternalCatalogCategory</c>. 
    /// </summary>
    /// <param name = "_externalCatalogVendorRecId">The <c>RefRecId</c> of the <c>CatExternalCatalogVendor</c> whose category will be verified.</param>
    /// <returns>True if category exists for the vendor; otherwise false.</returns>
    public static boolean checkCategoryExistsForVendor(RefRecId _externalCatalogVendorRecId)
    {
        CatExternalCatalogCategories category;
        select firstonly RecId from category
                            where category.ExternalCatalogVendor == _externalCatalogVendorRecId;

        return category.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS317877</DeveloperDocumentation>
	<FormRef>CatExternalCatalogEdit</FormRef>
	<Label>@SYS131265</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>Keywords</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CategoryExternalCatalogVendorIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CategoryExternalCatalogVendorIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalCatalogVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalCatalogVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalCatalogVendor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalCatalogCategories</Name>
			<Label>@SYS131273</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalCatalogVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Keywords</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RetailMediaGalleryLabels:Category</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalCatalogVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Keywords</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatKeywords</ExtendedDataType>
			<Label>@SYS130827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalCatalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatExternalCatalogRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryExternalCatalogVendorIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExternalCatalogVendor</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CategoryModifiedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>modifiedDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatExternalCatalogVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatExternalCatalogVendor</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatExternalCatalogVendor</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatExternalCatalogCategories</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExternalCatalogVendor</Name>
					<Field>ExternalCatalogVendor</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatExternalCatalogCategories</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>