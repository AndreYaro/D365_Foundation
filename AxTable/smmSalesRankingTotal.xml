<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmSalesRankingTotal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmSalesRankingTotal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the sales ranking data in the <c>smmSalesRankingTotal</c> table.
    /// </summary>
    public static void updateTotals()
    {
        ttsbegin;

        smmSalesRankingTmp tempData;
        smmSalesRankingTotal::collectTempDataFromProjInvoiceJour(tempData);
        smmSalesRankingTotal::collectTempDataFromCustInvoiceJour(tempData);

        // Updates
        smmSalesRankingTotal smmSalesRankingTotalUpdate;
        while select forupdate smmSalesRankingTotalUpdate
            join tempData
            where tempData.AccountNum == smmSalesRankingTotalUpdate.AccountNum
        {
            // Set Name field here, since this is only run once per customer
            smmSalesRankingTotalUpdate.Name         = CustTable::find(tempData.AccountNum).name();
            smmSalesRankingTotalUpdate.Revenue      += tempData.Revenue;
            smmSalesRankingTotalUpdate.Quantity     += tempData.Quantity;
            smmSalesRankingTotalUpdate.ContMargin   += tempData.ContMargin;
            smmSalesRankingTotalUpdate.update();
        }
        delete_from tempData
        exists join smmSalesRankingTotalUpdate
        where smmSalesRankingTotalUpdate.AccountNum == tempData.AccountNum;

        // Inserts
        while select tempData
        {
            smmSalesRankingTotal smmSalesRankingTotalInsert;
            smmSalesRankingTotalInsert.AccountNum = tempData.AccountNum;
            // Set Name field here, since this is only run once per customer
            smmSalesRankingTotalInsert.Name = CustTable::find(tempData.AccountNum).name();
            smmSalesRankingTotalInsert.Revenue = tempData.Revenue;
            smmSalesRankingTotalInsert.Quantity = tempData.Quantity;
            smmSalesRankingTotalInsert.ContMargin = tempData.ContMargin;
            smmSalesRankingTotalInsert.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectTempDataFromProjInvoiceJour</Name>
				<Source><![CDATA[
    private static void collectTempDataFromProjInvoiceJour(smmSalesRankingTmp _tempData)
    {
        CustTable custTable;
        smmSalesRankingProcessed salesRankingProcessedCheck;
        ProjInvoiceJour projInvoiceJour;
        CustInvoiceJour custInvoiceJour;

        // Collect data from unprocessed invoice jour records
        while select AccountNum from custTable
            join projInvoiceJour
            where projInvoiceJour.InvoiceAccount == custTable.AccountNum
            outer join custInvoiceJour
            where projInvoiceJour.LedgerVoucher == custInvoiceJour.LedgerVoucher
            notexists join salesRankingProcessedCheck
            where salesRankingProcessedCheck.SourceTableId == projInvoiceJour.TableId
                && salesRankingProcessedCheck.SourceRecId == projInvoiceJour.RecId
        {
            // Check if this is a duplicate invoice generated from a Free text invoice
            if (!custInvoiceJour.RecId)
            {
                smmSalesRankingTotal::updateTemporaryData(_tempData, custTable.AccountNum,
                    projInvoiceJour.amountMST(projInvoiceJour.contributionMargin()), projInvoiceJour.Qty,
                    projInvoiceJour.amountMST(projInvoiceJour.SalesOrderbalance));
            }
        }

        TableId projInvoiceJourTableId = projInvoiceJour.TableId;
        smmSalesRankingProcessed salesRankingProcessedInsert;
        insert_recordset salesRankingProcessedInsert
        (SourceTableId, SourceRecId)
        select projInvoiceJourTableId, RecId from projInvoiceJour
            notexists join salesRankingProcessedCheck
            where salesRankingProcessedCheck.SourceTableId == projInvoiceJour.TableId
                && salesRankingProcessedCheck.SourceRecId == projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectTempDataFromCustInvoiceJour</Name>
				<Source><![CDATA[
    private static void collectTempDataFromCustInvoiceJour(smmSalesRankingTmp _tempData)
    {
        CustInvoiceJour custInvoiceJour;
        CustTable custTable;
        smmSalesRankingProcessed salesRankingProcessedCheck;

        while select AccountNum from custTable
            join custInvoiceJour
            where custInvoiceJour.OrderAccount == custTable.AccountNum
            notexists join salesRankingProcessedCheck
            where salesRankingProcessedCheck.SourceTableId == custInvoiceJour.TableId
                && salesRankingProcessedCheck.SourceRecId == custInvoiceJour.RecId
        {
            smmSalesRankingTotal::updateTemporaryData(_tempData, custTable.AccountNum, custInvoiceJour.contributionMarginMST(),
                custInvoiceJour.Qty, custInvoiceJour.SalesBalanceMST);
        }

        TableId custInvoiceJourTableId = custInvoiceJour.TableId;
        smmSalesRankingProcessed smmSalesRankingProcessedInsert;
        insert_recordset smmSalesRankingProcessedInsert
        (SourceTableId, SourceRecId)
        select custInvoiceJourTableId, RecId from custInvoiceJour
            notexists join salesRankingProcessedCheck
            where salesRankingProcessedCheck.SourceTableId == custInvoiceJour.TableId
                && salesRankingProcessedCheck.SourceRecId == custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemporaryData</Name>
				<Source><![CDATA[
    private static void updateTemporaryData(smmSalesRankingTmp _smmSalesRankingTmp, CustAccount _accountNum,
        SalesContributionMarginMST _contMargin, SalesQty _qty, AmountMST _revenue)
    {
        select firstonly forupdate _smmSalesRankingTmp
            where _smmSalesRankingTmp.AccountNum == _accountNum;

        // Don't set Name field here, this can be called multiple times per customer, and we don't want to make extra DB trips.
        _smmSalesRankingTmp.AccountNum         = _accountNum;
        _smmSalesRankingTmp.Revenue            += _revenue;
        _smmSalesRankingTmp.ContMargin         += _contMargin;
        _smmSalesRankingTmp.Quantity           += _qty;
        _smmSalesRankingTmp.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SalesAndMarketing:SalesRankingTotal</Label>
	<Visible>No</Visible>
	<Modules>SalesAndMarketing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Revenue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS24500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ContMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesContributionMarginMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Revenue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>