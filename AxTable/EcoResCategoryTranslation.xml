<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResCategoryTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.LanguageId = LanguageTable::defaultLanguage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        CatDisplayCategoryTable         displayCategory;
        CatDisplayCategorySharedInfo    sharedInfo;

        ttsBegin;
        super();

        // for all corresponding DisplayCategory nodes whole Translation data should be "in sync"
        //   continue to keep the DisplayCategory Translation data in sync.
        while select recId from displayCategory
            where displayCategory.IsDescriptiveDataSynchronized == NoYes::Yes
            join recId from sharedInfo
                where  sharedInfo.RecId    == displayCategory.SharedData
                    && sharedInfo.Category == this.Category
        {
            this.synchronizeToDisplayCategoryTranslation(displayCategory.RecId);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeToDisplayCategoryTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Synchronizes this record's data to the given display category's translation record.
    /// </summary>
    /// <param  name='_displayCategoryRecId'>
    ///   The record Id of the display category whose translation record will be synchronizes.
    /// </param>
    /// <remarks>
    ///   This method doesn't
    ///     - assume this record already exist
    ///     - check if the display category record should be synchrozied - caller needs to ensure it is
    ///
    ///   This method does
    ///     - assume this record's data/fields (except RecId) have been set properly - they're used.
    ///     - call update or insert as appropriate
    ///     - have its own transaction scope.
    /// </remarks>
    void synchronizeToDisplayCategoryTranslation(recId _displayCategoryRecId)
    {
        CatDisplayCategoryTranslation   displayCategoryTranslation =
            CatDisplayCategoryTranslation::find(_displayCategoryRecId, this.LanguageId, true);

        ttsBegin;
            displayCategoryTranslation.FriendlyName = this.FriendlyName;
            displayCategoryTranslation.Description  = this.Description ;
            if (displayCategoryTranslation)
            {
                displayCategoryTranslation.update();
            }
            else
            {
                displayCategoryTranslation.LanguageId = this.LanguageId;
                displayCategoryTranslation.DisplayCategory = _displayCategoryRecId;
                displayCategoryTranslation.insert();
            }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CatDisplayCategoryTable         displayCategory;
        CatDisplayCategorySharedInfo    sharedInfo;
        CatDisplayCategoryTranslation   displayCategoryTranslation;

        ttsBegin;
        // for all corresponding DisplayCategory nodes whole Translation data should be "in sync"
        //   continue to keep the DisplayCategory Translation data in sync.
        while select recId from displayCategory
            where displayCategory.IsDescriptiveDataSynchronized == NoYes::Yes
            join recId from sharedInfo
                where  sharedInfo.RecId    == displayCategory.SharedData
                    && sharedInfo.Category == this.Category
            join forupdate displayCategoryTranslation
                where  displayCategoryTranslation.DisplayCategory == displayCategory.RecId
                    && displayCategoryTranslation.LanguageId      == this.LanguageId
        {
            displayCategoryTranslation.FriendlyName = this.FriendlyName;
            displayCategoryTranslation.Description  = this.Description ;
            displayCategoryTranslation.update();
        }

        super();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>EcoResCategoryTranslation</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_category">
    ///    The category in the <c>EcoResCategoryTranslation</c> table to check for existence.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID in the <c>EcoResCategoryTranslation</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(EcoResCategoryId _category,LanguageId _languageId )
    {
        if (_category && _languageId && EcoResCategoryTranslation::exist(_category,_languageId))
            return true;

        return checkFailed(strfmt(EcoResCategoryTranslation::txtNotExist(), _category,_languageId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateCategoryTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Accepts all columns to insert or update the record.
    /// </summary>
    /// <param name="_ecoResCategoryId">
    ///    The <c>CategoryID</c> value of the category.
    /// </param>
    /// <param name="_ecoResCategoryFriendlyName">
    ///    The <c>CategoryFriendlyName</c> value of the category; optional.
    /// </param>
    /// <param name="_ecoResCategoryDescription">
    ///    The <c>CategoryDescription</c> value of the category; optional.
    /// </param>
    /// <param name="_ecoResCategorySearchText">
    ///    The <c>CategorySearchText</c> value of the category; optional.
    /// </param>
    /// <param name="_languageId">
    ///    The <c>LangaugeID</c> value of the category; optional.
    /// </param>
    public static void createOrUpdateCategoryTranslation(EcoResCategoryId _ecoResCategoryId,
                                                         EcoResCategoryFriendlyName _ecoResCategoryFriendlyName,
                                                         EcoResCategoryDescription _ecoResCategoryDescription,
                                                         EcoResCategorySearchText _ecoResCategorySearchText,
                                                         LanguageId _languageId = LanguageTable::defaultLanguage()
                                                         )
    {
        EcoResCategoryTranslation ecoResCategoryTranslation;
        ecoResCategoryTranslation = EcoResCategoryTranslation::find(_ecoResCategoryId,_languageId, true);

        if ( EcoResCategory::checkExist(_ecoResCategoryId) )
        {
            ttsbegin;

            ecoResCategoryTranslation.Category      =   _ecoResCategoryId;
            ecoResCategoryTranslation.FriendlyName  =   _ecoResCategoryFriendlyName;
            ecoResCategoryTranslation.Description   =   _ecoResCategoryDescription;
            ecoResCategoryTranslation.SearchText    =   _ecoResCategorySearchText;
            ecoResCategoryTranslation.LanguageId    =   _languageId;

            ecoResCategoryTranslation.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResCategoryTranslation</c> table exists.
    /// </summary>
    /// <param name="_category">
    ///    The category of the <c>EcoResCategoryTranslation</c> record to check for existence.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID of the <c>EcoResCategoryTranslation</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(EcoResCategoryId _category,LanguageId _languageId )
    {
        return (EcoResCategoryTranslation::find(_category,_languageId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResCategoryTranslation</c> table.
    /// </summary>
    /// <param name="_category">
    ///    The category of the <c>EcoResCategoryTranslation</c> record to find.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID of the <c>EcoResCategoryTranslation</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResCategoryTranslation</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryTranslation find(EcoResCategoryId _category, LanguageId _languageId = LanguageTable::defaultLanguage(), boolean _forUpdate = false)
    {
        EcoResCategoryTranslation    ecoResCategoryTranslation = null;

        if (_category && _languageId)
        {
            ecoResCategoryTranslation.selectForUpdate(_forUpdate);
            select ecoResCategoryTranslation where ecoResCategoryTranslation.Category == _category &&
                                                   ecoResCategoryTranslation.LanguageId == _languageId;
        }

        return ecoResCategoryTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllTranslatedLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all of the translated languages for a specified category.
    /// </summary>
    /// <param name="_category">
    /// The record ID of the related <c>EcoResCategory</c> record.
    /// </param>
    /// <returns>
    /// A container that holds the translated languages.
    /// </returns>
    public static container findAllTranslatedLanguages(RefRecId _category)
    {
        EcoResCategoryTranslation   categoryTranslation;
        List                        list = new List(Types::String);

        while select LanguageId from  categoryTranslation
            where categoryTranslation.Category == _category
        {
            list.addEnd(categoryTranslation.LanguageId);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCategoryAndLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResCategoryTanslation</c> table by the related category and
    ///    language ID.
    /// </summary>
    /// <param name="_category">
    ///    The record ID of the related <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the record is selected for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResCategoryTanslation</c> table; otherwise, an empty record buffer.
    /// </returns>
    public static EcoResCategoryTranslation findByCategoryAndLanguage(
        RefRecId    _category,
        LanguageId  _languageId,
        boolean     _forupdate = false)
    {
        EcoResCategoryTranslation record;

        record.selectForUpdate(_forupdate);
        select firstonly record
            where   record.Category    == _category &&
                    record.LanguageId  == _languageId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResCategoryTranslation</c> table by using a record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResCategoryTranslation</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResCategoryTranslation findByRecID(EcoResCategoryId _recId, boolean _forUpdate = false)
    {
        EcoResCategoryTranslation    ecoResCategoryTranslation = null;

        if ( _recId )
        {
            ecoResCategoryTranslation.selectForUpdate(_forUpdate);
            select ecoResCategoryTranslation where ecoResCategoryTranslation.RecId == _recId;
        }

        return ecoResCategoryTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcureCategoryNameProcCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get procurement category name.
    /// </summary>
    /// <param  name='_ecoResCategoryId'>
    /// An instance of the <c>RecId</c> class to denote the EcoResCategory class.
    /// </param>
    /// <returns>
    /// A string denoting the ecorescategory name in translated language.
    /// </returns>
    public static str getProcureCategoryNameProcCategory(recId _ecoResCategoryId)
    {
        Name                                procureCategoryName;
        EcoResCategory                      ecoResCategory;
        EcoResCategoryTranslation           ecoResCategoryTranslationPrimaryLanguage;

        select firstonly Name from ecoResCategory
            where ecoResCategory.RecId == _ecoResCategoryId
            outer join FriendlyName from ecoResCategoryTranslationPrimaryLanguage
                where  ecoResCategoryTranslationPrimaryLanguage.Category == ecoResCategory.RecId
                    && ecoResCategoryTranslationPrimaryLanguage.LanguageId == SysTranslationHelper::getPrimaryLanguage()
        ;

        if (ecoResCategoryTranslationPrimaryLanguage && ecoResCategoryTranslationPrimaryLanguage.FriendlyName != '')
        {
            procureCategoryName = ecoResCategoryTranslationPrimaryLanguage.FriendlyName;
        }
        else
        {
            procureCategoryName = ecoResCategory.Name;
        }
        return procureCategoryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>EcoResCategoryTranslation</c> table does
    ///    not exist.
    /// </summary>
    /// <returns>
    ///    The message that states that a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS300740";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS309799</DeveloperDocumentation>
	<FormRef>EcoResCategoryHierarchyListPage</FormRef>
	<Label>@SYS300453</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CategoryLanguageIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>CategoryLanguageIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FriendlyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS130898</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FriendlyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FriendlyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryFriendlyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SearchText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategorySearchText</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>FullTextIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SearchText</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes>
		<AxTableIndex>
			<Name>CategoryLanguageIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResCategory_EcoResCategoryTranslation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategoryTranslation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>LanguageIdAll</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>