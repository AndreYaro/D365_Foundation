<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesParmLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(
        Qty         _qty       = this.DeliverNow,
        TransDate   _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax         _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(_qty, _transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingUnitQty</Name>
				<Source><![CDATA[
    void calcPackingUnitQty()
    {
        this.PackingUnitQty = InventPackagingUnit::calcPackingUnitQty(this.PackingUnit,
                                                                    this.InventNow,
                                                                    this.ItemId,
                                                                    this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>DeliverNow</c> or <c>InventNow</c> field.
    /// </summary>
    /// <param name="_previousDeliverNow">
    /// The value of <c>DeliverNow</c> or <c>InventNow</c> field for the earlier version.
    /// </param>
    /// <param name="_deliverNow">
    /// The value of the <c>DeliverNow</c> or <c>InventNow</c> field to be validated.
    /// </param>
    /// <param name="_orderedQty">
    /// The ordered quantity in sales or inventory unit of measure.
    /// </param>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    public boolean checkDeliverNow(Qty _previousDeliverNow, Qty _deliverNow, Qty _orderedQty)
    {
        boolean isValid = true;
        
        if (SalesPackingSlipDeliverNowQtySignFlightV2::instance().isEnabled())
        {
            if (_deliverNow != 0
                && sign(_deliverNow) != sign(_orderedQty))
            {
                isValid = checkFailed("@SYS331618");
            }
        }
        else
        {
            if (_deliverNow * _orderedQty < 0)
            {
                isValid = checkFailed("@SYS331618");
            }
        }     

        if (_previousDeliverNow > 0
            && _deliverNow > _previousDeliverNow)
        {
            isValid = checkFailed("@SYS331617");
        }

        if (_previousDeliverNow < 0)
        {
            if (this.salesLine().SalesType == SalesType::ReturnItem)
            {
                if (_deliverNow != 0 && _deliverNow != _previousDeliverNow)
                {
                    isValid = checkFailed("@SYS334604");
                }
            }
            else if (_deliverNow < _previousDeliverNow)
            {
                isValid = checkFailed("@SYS323401");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::addressFromRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    public display SalesShippingDate deliveryDate(SalesParmLine _salesParmLine)
    {
        TransDate               deliveryDate;
        SalesParmSubLine        salesParmSubLine;
        NumberOfRecords         noSubLines = 1;

        if (SalesParmSubLine::subLines(_salesParmLine) == noSubLines)
        {
            select firstonly JournalRefTableId, JournalRefRecId from salesParmSubLine
                where salesParmSubLine.LineRefRecId == _salesParmLine.RecId;

            if (salesParmSubLine.JournalRefTableId == tableNum(CustPackingSlipTrans))
            {
                deliveryDate = CustPackingSlipTrans::findRecId(salesParmSubLine.JournalRefRecId).custPackingslipJour().DeliveryDate;
            }
        }

        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentId</Name>
				<Source><![CDATA[
    public Num documentId(SalesParmLine _salesParmLine)
    {
        Num                 documentId;
        SalesParmSubLine    salesParmSubLine;
        NumberOfRecords     oneSubLines     = 1;
        NumberOfRecords     zeroSubLines    = 0;

        switch (SalesParmSubLine::subLines(_salesParmLine))
        {
            case zeroSubLines:
                documentId = '';
                break;

            case oneSubLines:
                select firstonly DocumentId from salesParmSubLine
                    where salesParmSubLine.LineRefRecId == _salesParmLine.RecId;
                documentId = salesParmSubLine.DocumentId;
                break;

            default:
                documentId = "@SYS342615"; //More than one journal line attached to the parm line
                break;
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectiveLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the effective line amount.
    /// </summary>
    /// <returns>
    ///     The effective line amount.
    /// </returns>
    /// <remarks>
    ///     The effective line amount is the original line amount unless attribute based pricing is in effect. In that case, the effective line amount is the adjusted line amount.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display public AmountCur effectiveLineAmount()
    {
        AmountCur                           effectiveLineAmount = this.LineAmount;
        PDSSalesParmLinePricingCalculation  salesParmLinePricingCalculation;

        if (this.inventTable().PDSBaseAttributeId)
        {
            salesParmLinePricingCalculation = PDSSalesParmLinePricingCalculation::findBySalesParmLine(this.RecId);
            if (salesParmLinePricingCalculation.RecId)
            {
                effectiveLineAmount             = salesParmLinePricingCalculation.displayCalculatedLineAmount();
            }
        }

        return effectiveLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is link between this record and corrected record, e.g. this record is correcting record.
    /// </summary>
    /// <returns>
    /// True if link exists; Otherwise, false.
    /// </returns>
    public boolean existsCorrLink_RU()
    {
        return this.RecId &&
            (select firstonly RecId from salesParmLineCorrLink_RU
                where salesParmLineCorrLink_RU.SalesParmLineRecId == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalItem</Name>
				<Source><![CDATA[
    void  initFromProjProposalItem(ProjProposalItem  projProposalItem)
    {
        SalesLine           salesLineOrig;
        MCRSalesParmLine    mcrSalesParmLine;

        this.OrigSalesId                = projProposalItem.SalesId;
        this.CustAccount                = projProposalItem.CustAccount;
        this.InvoiceAccount             = projProposalItem.salesTable().InvoiceAccount;
        this.ItemId                     = projProposalItem.ItemId;
        this.SalesCategory              = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                                projProposalItem.ItemId,
                                                EcoResCategoryNamedHierarchyRole::Sales).Category;
        this.SalesLineRecId             = projProposalItem.RecId;
        this.LineAmount                 = projProposalItem.lineAmt();
        this.DeliverNow                 = projProposalItem.DeliverNow;
        this.InventNow                  = projProposalItem.InventNow;
        this.SalesLineRecId             = projProposalItem.salesLine().RecId;
        this.InventTransId              = projProposalItem.InventTransId;
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesLineOrig                   = SalesLine::findInventTransId( projProposalItem.InventTransId);
            mcrSalesParmLine                = this.mcrSalesParmLine();

            mcrSalesParmLine.LineDisc       = salesLineOrig.LineDisc;
            mcrSalesParmLine.LinePercent    = salesLineOrig.LinePercent;
            mcrSalesParmLine.MultiLnDisc    = salesLineOrig.MultiLnDisc;
            mcrSalesParmLine.MultiLnPercent = salesLineOrig.MultiLnPercent;
            mcrSalesParmLine.SalesMarkup    = salesLineOrig.SalesMarkup;
            mcrSalesParmLine.SalesPrice     = salesLineOrig.SalesPrice;
            this.mcrPackMCRSalesParmLine(mcrSalesParmLine);
        }

        this.Scrap                      = SalesLine::findInventTransId( projProposalItem.InventTransId).Scrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesParmLine</c> record from a <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record from which to initialize the <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record from which to initialize the <c>SalesParmLine</c> record.
    /// </param>
    void  initFromSalesLine(SalesLine  _salesLine, SalesTable  _salesTable = _salesLine.salesTable())
    {
        MCRSalesParmLine        mcrSalesParmLine;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        this.OrigSalesId                = _salesLine.SalesId;
        this.InventTransId              = _salesLine.InventTransId;
        this.CustAccount                = _salesTable.CustAccount;
        this.InvoiceAccount             = _salesTable.InvoiceAccount;
        this.LineNum                    = _salesLine.LineNum;
        this.ItemId                     = _salesLine.ItemId;
        this.SalesCategory              = _salesLine.SalesCategory;
        this.SalesLineRecId             = _salesLine.RecId;
        this.InventDimId                = _salesLine.InventDimId;
        this.Scrap                      = _salesLine.Scrap;
        this.wmsOrder                   = InventItemLocation::find(_salesLine.ItemId, _salesLine.InventDimId).useWMSOrder(_salesLine.inventDim());
        this.PackingUnit                = _salesLine.PackingUnit;
        this.PackingUnitQty             = _salesLine.PackingUnitQty;
        this.DeliveryName               = _salesLine.DeliveryName;
        this.DeliveryPostalAddress      = _salesLine.DeliveryPostalAddress;
        this.DlvMode                    = _salesLine.DlvMode;
        this.DlvTerm                    = _salesLine.DlvTerm;
        this.ShipCarrierAccount         = _salesLine.ShipCarrierAccount;
        this.ShipCarrierId              = _salesLine.ShipCarrierId;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesParmLine_IN salesParmLineIN = this.salesParmLine_IN();

            salesParmLineIN.MaximumRetailPrice = _salesLine.salesLine_IN().MaximumRetailPrice;
            this.packSalesParmLine_IN(salesParmLineIN);
        }
        // </GIN>
        this.ShipCarrierPostalAddress   = _salesLine.ShipCarrierPostalAddress;
        this.RemainBeforeInventPhysical = _salesLine.RemainInventPhysical;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.PostingProfile_RU          = _salesLine.PostingProfile_RU ? _salesLine.PostingProfile_RU : _salesTable.PostingProfile;
            this.InventProfileType_RU       = _salesLine.inventProfileType_RU();
        }
        // </GEERU>
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrSalesParmLine = this.MCRsalesParmLine();
            mcrSalesParmLine.LineDisc       = _salesLine.LineDisc;
            mcrSalesParmLine.LinePercent    = _salesLine.LinePercent;
            mcrSalesParmLine.MultiLnDisc    = _salesLine.MultiLnDisc;
            mcrSalesParmLine.MultiLnPercent = _salesLine.MultiLnPercent;
            mcrSalesParmLine.SalesMarkup    = _salesLine.SalesMarkup;
            mcrSalesParmLine.SalesPrice     = _salesLine.SalesPrice;
            this.packMCRSalesParmLine(mcrSalesParmLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesParmLine</c> record from <c>CustomsExportOrderLine_IN</c>.
    /// </summary>
    /// <param name="_exportOrderLineOrig">
    /// A instance of <c>CustomsExportOrderLine_IN</c>.
    /// </param>
    public void  initFromSalesLine_IN(CustomsExportOrderLine_IN  _exportOrderLineOrig)
    {
        SalesTable  salesTable = SalesTable::find(_exportOrderLineOrig.SalesId);
        SalesLine   salesLine  = SalesLine::findInventTransId(_exportOrderLineOrig.InventTransId);

        this.OrigSalesId                = salesLine.SalesId;
        this.InventTransId              = salesLine.InventTransId;
        this.CustAccount                = salesTable.CustAccount;
        this.InvoiceAccount             = salesTable.InvoiceAccount;
        this.LineNum                    = salesLine.LineNum;
        this.ItemId                     = salesLine.ItemId;
        this.SalesCategory              = salesLine.SalesCategory;
        this.SalesLineRecId             = salesLine.RecId;
        this.InventDimId                = salesLine.InventDimId;
        this.Scrap                      = salesLine.Scrap;
        this.wmsOrder                   = InventItemLocation::find(salesLine.ItemId, salesLine.InventDimId).useWMSOrder(salesLine.inventDim());
        this.PackingUnit                = salesLine.PackingUnit;
        this.PackingUnitQty             = salesLine.PackingUnitQty;
        this.DeliveryName               = salesLine.DeliveryName;
        this.DeliveryPostalAddress      = salesLine.DeliveryPostalAddress;
        this.DlvMode                    = salesLine.DlvMode;
        this.salesParmLine_IN().AssessableValueTransactionCurrency         = salesLine.salesLine_IN().AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        super();

        this.ChangedManually = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) || BrazilParameters::isEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDerivedActionPolicy</Name>
				<Source><![CDATA[
    InterCompanyEndpointActionPolicy interCompanyDerivedActionPolicy()
    {
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        changecompany(this.company())
        {
            interCompanyEndpointActionPolicy = this.salesTable().interCompanyEndpointActionPolicy();
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDoExternalPosting</Name>
				<Source><![CDATA[
    boolean interCompanyDoExternalPosting()
    {
        return this.salesTable().InterCompanyDirectDeliveryOrig
        &&     this.salesTable().interCompanyEndpointActionPolicy().InvoiceOriginalSales
        &&     this.salesTable().interCompanyPurchTable().interCompanyEndpointActionPolicy().PostSalesInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDoInternalPosting</Name>
				<Source><![CDATA[
    boolean interCompanyDoInternalPosting()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyEndpointActionPolicy</Name>
				<Source><![CDATA[
    InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean _forUpdate = false)
    {
        InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy;

        changecompany(this.company())
        {
            interCompanyEndpointActionPolicy = this.salesTable().interCompanyEndpointActionPolicy(_forUpdate);
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyCorrection</Name>
				<Source><![CDATA[
    display InventQty inventQtyCorrection()
    {
        return this.PreviousInventNow - this.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventTable</c> record that is related to the current item.
    /// </summary>
    /// <param name = "_itemId">The item id; optional.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventTable</c> record; otherwise, an empty buffer.</returns>
    public InventTable inventTable(
        ItemId  _itemId = this.ItemId,
        boolean _forUpdate = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonSO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an invoice is associated with a sales order.
    /// </summary>
    /// <returns>
    /// true if the invoice is not associated with a sales order; otherwise, false.
    /// </returns>
    public boolean isNonSO()
    {
        return !this.OrigSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealizedVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if it is the realized VAT
    /// </summary>
    /// <returns>
    /// True, if it is realized
    /// </returns>
    public display TaxUnrealizedIsRealizedVAT isRealizedVAT()
    {
        TaxTable        taxTable;
        TaxGroupData    taxGroupData;
        TaxOnItem       taxOnItem;
        SalesParmLine   salesParmLineLocal;
        SalesLine       salesLineLocal;

        select firstonly RecId from taxTable
            where (taxTable.TaxType_TH == TaxType_TH::Normal
                && taxTable.PaymentTaxCode == '')
                || taxTable.TaxType_TH == TaxType_TH::AverageRealized
            exists join taxGroupData
                where taxTable.TaxCode == taxGroupData.TaxCode
            exists join taxOnItem
                where taxTable.TaxCode == taxOnItem.TaxCode
            exists join salesLineLocal
                where taxGroupData.TaxGroup == salesLineLocal.TaxGroup
                    && taxOnItem.TaxItemGroup == salesLineLocal.TaxItemGroup
            exists join salesParmLineLocal
                where salesParmLineLocal.SalesLineRecId == salesLineLocal.RecId
                    && salesParmLineLocal.RecId == this.RecId;

        return (taxTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur lineAmountExclTax(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetInventUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the inventory unit for the item on the <c>SalesLine</c>.
    /// </summary>
    /// <returns>
    /// The <c>UnitOfMeasureSymbol</c> of the inventory unit for the item on the <c>SalesLine</c>.
    /// </returns>
    public display UnitOfMeasureSymbol mcrGetInventUnit()
    {
        return InventTable::find(this.ItemId).inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>UnitOfMeasureClass</c> object for the item on the <c>SalesLine</c>.
    /// </summary>
    /// <returns>
    /// The <c>UnitOfMeasureClass</c> object for the item on the <c>SalesLine</c>.
    /// </returns>
    public UnitOfMeasureClass mcrInventUnitOfMeasureClass()
    {
        return UnitOfMeasure::findBySymbol(this.inventTable().inventUnitId()).UnitOfMeasureClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLineAmountTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax for a specific record in the <c>salesParmLine</c> table.
    /// </summary>
    /// <param name="transDate">
    /// Transaction date for the record to find.
    /// </param>
    /// <returns>
    /// Tax amount for a specific record in the <c>salesParmLine</c> table.
    /// </returns>
    private AmountCur mcrLineAmountTax(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        SalesLine   salesLine;

        salesLine = this.salesLine();
        return Tax::calcTaxAmount(salesLine.TaxGroup,
                                      salesLine.TaxItemGroup,
                                      transDate,
                                      salesLine.CurrencyCode,
                                      this.LineAmount,
                                      TaxModuleType::Sales,
                                      this.DeliverNow,
                                      salesLine.SalesUnit,
                                      this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales parm line information.
    /// </summary>
    /// <param name="_mcrSalesParmLine">
    /// The sales parm line reference.
    /// </param>
    public void mcrPackMCRSalesParmLine(MCRSalesParmLine _mcrSalesParmLine)
    {
        _mcrSalesParmLine.SalesParmLine = this.RecId;
        this.SysExtensionSerializerMap::PackExtensionTable(_mcrSalesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers SalesParmLine extension table
    /// </summary>
    /// <returns>
    /// A record of <c>MCRSalesParmLine</c>
    /// </returns>
    public MCRSalesParmLine mcrSalesParmLine()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRsalesParmLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedClosed</Name>
				<Source><![CDATA[
    void  modifiedClosed()
    {
        if (this.Closed)
        {
            this.RemainAfter            = 0;
            this.PdsCWRemainAfterInvent = 0;

            this.setRemainAfterInvent();
        }
        else
        {
            this.setQty(this.salesParmTable().Ordering, this.salesParmUpdate().CreditRemaining, false);

            this.pdsCWSetQty(
                this.salesParmTable().Ordering,
                this.salesParmUpdate().CreditRemaining);

            this.setLineAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDeliverNow</Name>
				<Source><![CDATA[
    void  modifiedDeliverNow()
    {
        this.setQty(this.salesParmTable().Ordering, this.salesParmUpdate().CreditRemaining);
        this.setInventDeliverNow();
        this.setLineAmount();

        if (this.Closed)
        {
            this.RemainAfter = 0;
            this.setRemainAfterInvent();
        }

        this.calcPackingUnitQty();

        // <GIN>
        this.updateAssessableValue_IN();
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesParmLine, DeliverNow):
                this.pdsCWDeliverNowConversion(false);
                this.modifiedDeliverNow();
                this.updateTaxWorkRegulation();
                break;

            case fieldNum(SalesParmLine, PdsCWDeliverNow):
                this.pdsCWDeliverNowConversion(true);
                this.modifiedDeliverNow();
                this.pdsCWModifiedDeliverNow();
                break;

            case fieldNum(SalesParmLine, RemainAfter):
                this.setRemainAfterInvent();
                this.pdsCWRemainAfterInventConversion(false);
                break;

            case fieldNum(SalesParmLine, PdsCWRemainAfterInvent):
                this.pdsCWRemainAfterInventConversion(true);
                this.setRemainAfterInvent();
                break;

            case fieldNum(SalesParmLine, InventNow):
                this.calcPackingUnitQty();
                break;

            case fieldNum(SalesParmLine, Closed):
                this.modifiedClosed();
                break;

            case fieldNum(SalesParmLine, PackingUnit):
                this.calcPackingUnitQty();
                break;

            default: break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name field from the order line because this is relevant for category based lines.
    /// </summary>
    /// <returns>
    /// The name field from the order line.
    /// </returns>
    public display ItemFreeTxt name()
    {
        return this.salesLine().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    public display PackingSlipId packingSlipId(SalesParmLine _salesParmLine)
    {
        return this.documentId(_salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineBlockLevel</Name>
				<Source><![CDATA[
    public display str salesLineBlockLevel()
    {
        return enum2Str(this.salesLine().SoftReserveBlockLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineSoftReserveStatus</Name>
				<Source><![CDATA[
    public display str salesLineSoftReserveStatus()
    {
        if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled())
        {
            return InventInventoryDataServiceSoftReservationHelper::showSoftReserveStatus(this.salesLine());
        }
        
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMCRSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales parm line information.
    /// </summary>
    /// <param name="_mcrSalesParmLine">
    /// The sales parm line reference.
    /// </param>
    public void packMCRSalesParmLine(MCRSalesParmLine _mcrSalesParmLine)
    {
        _mcrSalesParmLine.SalesParmLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeliverNowConversion</Name>
				<Source><![CDATA[
    private void pdsCWDeliverNowConversion(boolean _fromCW = false)
    {
        SalesLine salesLine = this.salesLine();

        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            if (_fromCW)
            {
                this.DeliverNow = PdsCatchWeight::inventQty(
                    salesLine.ItemId,
                    this.PdsCWDeliverNow,
                    salesLine.SalesUnit);
            }
            else if (!this.PdsCWDeliverNow)
            {
                this.PdsCWDeliverNow = PdsCatchWeight::cwQty(
                    salesLine.ItemId,
                    this.InventNow);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWModifiedDeliverNow</Name>
				<Source><![CDATA[
    public void pdsCWModifiedDeliverNow()
    {
        this.pdsCWSetQty(this.salesParmTable().Ordering, this.salesParmUpdate().CreditRemaining);

        if (this.Closed)
        {
            this.PdsCWRemainAfterInvent = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity to correct in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity to be corrected in catch weight unit.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyCorrection()
    {
        return this.PdsCWPreviousDeliverNow - this.PdsCWDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainAfterInventConversion</Name>
				<Source><![CDATA[
    private void pdsCWRemainAfterInventConversion(boolean _fromCW = false)
    {
        SalesLine salesLine = this.salesLine();

        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            if (_fromCW)
            {
                this.RemainAfter = PdsCatchWeight::inventQty(
                                    salesLine.ItemId,
                                    this.PdsCWRemainAfterInvent,
                                    salesLine.SalesUnit);
            }
            else if (!this.PdsCWRemainAfterInvent)
            {
                this.PdsCWRemainAfterInvent = PdsCatchWeight::cwQty(
                                                    salesLine.ItemId,
                                                    this.RemainAfterInvent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRevertPreviousVersionChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts changes to the catch weight remainder fields in the sales line that are caused by the
    /// earlier version of the document being corrected.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line to modify.
    /// </param>
    public void pdsCWRevertPreviousVersionChanges(SalesLine _salesLine)
    {
        _salesLine.PdsCWRemainInventPhysical += this.PdsCWPreviousDeliverNow;
        _salesLine.PdsCWRemainInventFinancial -= this.PdsCWPreviousDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetQty</Name>
				<Source><![CDATA[
    public void pdsCWSetQty(
        DocumentStatus _documentStatus,
        boolean        _creditRemaining)
    {
        SalesQuantity   salesQuantity;
        SalesLine       salesLine;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            salesQuantity = SalesQuantity::construct(_documentStatus);

            salesLine = this.salesLine();
            this.pdsCWRevertPreviousVersionChanges(salesLine);
            salesLine.PdsCWInventDeliverNow = this.PdsCWDeliverNow;
            this.PdsCWRemainBefore = salesLine.PdsCWRemainInventPhysical;

            [this.PdsCWDeliverNow, this.PdsCWRemainBefore, this.PdsCWRemainAfterInvent] =
                salesQuantity.pdsCWQtyInvent(
                    salesLine,
                    SalesUpdate::All,
                    salesLine.PdsCWInventDeliverNow,
                    _creditRemaining);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition code that is associated with the <c>SalesParmLine</c> record.
    /// </summary>
    /// <returns>
    /// The disposition code that is associated with the <c>SalesParmLine</c> record.
    /// </returns>
    public display PdsBatchDispositionCode pdsDispositionCode()
    {
        InventDim               inventDim;
        PdsBatchDispositionCode dispositionCode = '';

        if (hasFieldAccess(tableNum(InventBatch), fieldNum(InventBatch,PdsDispositionCode), AccessType::View))
        {
            inventDim = this.inventDim();

            if (inventDim.InventBatchId)
            {
                dispositionCode = InventBatch::find(
                    inventDim.InventBatchId,
                    this.ItemId).PdsDispositionCode;
            }
        }

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status that is associated with the <c>SalesParmLine</c> record.
    /// </summary>
    /// <returns>
    /// The disposition status that is associated with the <c>SalesParmLine</c> record.
    /// </returns>
    public display PdsBatchDispositionStatus pdsDispositionStatus()
    {
        InventDim                   inventDim = this.inventDim();
        PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;

        if (inventDim.InventBatchId)
        {
            status = InventBatch::find(
                        inventDim.InventBatchId,
                        this.ItemId).pdsDispositionStatus();
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalReduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the level of physical reduction that is allowed.
    /// </summary>
    /// <param name="_reduceOnHand">
    /// A Boolean value that indicates whether the quantity can be reduced by inventory.
    /// </param>
    /// <returns>
    /// The level of physical reduction.
    /// </returns>
    public InventPhysicalReduction physicalReduction(boolean _reduceOnHand)
    {
        InventPhysicalReduction physicalReduction = InventPhysicalReduction::None;

        if (_reduceOnHand)
        {
            if (this.Closed)
            {
                physicalReduction = InventPhysicalReduction::ReduceAndClose;
            }
            else
            {
                physicalReduction = InventPhysicalReduction::Reduce;
            }
        }

        return physicalReduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyToPickInSalesUnit</Name>
				<Source><![CDATA[
    display SalesQty  qtyToPickInSalesUnit()
    {
        SalesLine           salesLine;
        InventOnHandQty     inventOnHandQty;
        InventDim           inventDim;
        InventDimParm       inventDimParm;
        InventDimParm       inventDimParmPhysical;
        SalesQty            qtyToPickInSalesUnit;

        salesLine = this.salesLine();

        if (salesLine.isStocked())
        {
            inventDim = salesLine.inventDim();

            InventDimGroupSetup::newItemId(salesLine.ItemId).inventDimParmActivePhysicalInventory(inventDimParmPhysical);
            inventDimParm.initFromInventDim(inventDim);

            inventOnHandQty = InventOnHandQty::newParameters(salesLine.ItemId, inventDim,
                                         InventDimParm::andParms(inventDimParmPhysical, inventDimParm));

            Qty qtyToConvert = inventOnHandQty.availPhysical() - InventTransIdSumSingleStatus::qtyReservPhysicalChildTypeNone(
                                    InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));

            qtyToPickInSalesUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                salesLine.ItemId,
				salesLine.InventDimId,
                qtyToConvert,
				salesLine.inventTable().inventUnitId(),
				salesLine.SalesUnit,
				NoYes::Yes);
        }
        return qtyToPickInSalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertPreviousVersionChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts changes to the <c>Remain</c> fields on the sales line that are caused by the earlier
    /// version of the document that is corrected.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line to be modified.
    /// </param>
    public void revertPreviousVersionChanges(SalesLine _salesLine)
    {
        _salesLine.RemainSalesPhysical += this.PreviousDeliverNow;
        _salesLine.RemainInventPhysical += this.PreviousInventNow;
        _salesLine.RemainSalesFinancial -= this.PreviousDeliverNow;
        _salesLine.RemainInventFinancial -= this.PreviousInventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    SalesLine  salesLine(boolean  _forUpdate = false)
    {
        return SalesLine::findInventTransId(this.InventTransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmLineCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>SalesParmLineCorrLink_RU</c> record for current <c>SalesParmLine</c> record.
    /// </summary>
    /// <param name="_forupdate">
    /// Specify true, if record should be selected for update.
    /// </param>
    /// <returns>
    /// <c>SalesParmLineCorrLink_RU</c> record for current <c>SalesParmLine</c> record.
    /// </returns>
    public SalesParmLineCorrLink_RU salesParmLineCorrLink_RU(boolean _forupdate = false)
    {
        return SalesParmLineCorrLink_RU::findSalesParmLine(this.RecId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmSubTable</Name>
				<Source><![CDATA[
    SalesParmSubTable  salesParmSubTable(boolean  _forUpdate = false)
    {
        return SalesParmSubTable::find(this.ParmId, this.TableRefId, this.OrigSalesId, this.subId(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmTable</Name>
				<Source><![CDATA[
    SalesParmTable  salesParmTable(boolean  _forUpdate = false)
    {
        return SalesParmTable::find(this.ParmId, this.TableRefId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmUpdate</Name>
				<Source><![CDATA[
    SalesParmUpdate  salesParmUpdate(boolean  _forUpdate = false)
    {
        return this.salesParmTable().salesParmUpdate(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    display SalesPrice salesPrice()
    {
        return this.salesLine().SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQty</Name>
				<Source><![CDATA[
    display SalesQty salesQty()
    {
        return this.salesLine().SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyCorrection</Name>
				<Source><![CDATA[
    display SalesQty salesQtyCorrection()
    {
        return this.PreviousDeliverNow - this.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    SalesTable salesTable(boolean  _forUpdate = false)
    {
        SalesTable  salesTable;
        if (!this.isNonSO())
        {
            salesTable = SalesTable::find(this.OrigSalesId, _forUpdate);
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    display SalesUnit salesUnit()
    {
        return this.salesLine().SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>AlcoholLicenseSeriesNum_RU</c> field of the current line.
    /// </summary>
    /// <param name="_documentDate">
    ///    Date which is used to find the appropriate license.
    /// </param>

    public void setAlcoholLicenseSeriesNum_RU(DocumentDate  _documentDate)
    {
        InventTable inventTable = this.inventTable();

        if (inventTable.AlcoholProductionTypeId_RU)
        {
            this.AlcoholLicenseSeriesNum_RU =  AlcoholLicenseTable_RU::findByTypeDateOwner(
                                                            this.inventDim().inventProfile_RU().AlcoholActivityType,
                                                            inventTable.AlcoholProductionTypeId_RU,
                                                            _documentDate,
                                                            CustTable::find(this.InvoiceAccount).Party,
                                                            CustVend_RU::Cust).LicenseSeriesNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomsAssessableValue_IN</Name>
				<Source><![CDATA[
    //Updates the assessable value when the quantity is updated in the Bill of entry form
    public void setCustomsAssessableValue_IN()
    {
        SalesParmTable                  salesParmTable;
        SalesParmLine                   salesParmLine, salesParmLineLoc;
        CustomsExportAssessableValue_IN customsExportAssessableValue;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        SysQueryRun                     queryRun;

        salesParmTable = this.salesParmTable();
        if (salesParmTable.CustomsExportInvoiceId_IN)
        {
            queryBuildDataSource    = query.addDataSource(tableNum(CustomsExportAssessableValue_IN));
            queryBuildRange         = queryBuildDataSource.addRange(fieldNum(CustomsExportAssessableValue_IN, SalesId));
            queryBuildRange.value(salesParmTable.SalesId);

            while select ParmId, TableRefId, InventTransId from salesParmLine
                where salesParmLine.ParmId      == salesParmTable.ParmId   &&
                      salesParmLine.TableRefId  == salesParmTable.TableRefId
            {
                queryBuildRange         = queryBuildDataSource.addRange(fieldNum(CustomsExportAssessableValue_IN, InventTransId));
                queryBuildRange.value(salesParmLine.InventTransId);
            }
        }
        queryRun = new SysQueryRun(query);
        while (queryRun.next())
        {
            customsExportAssessableValue = queryRun.get(tableNum(CustomsExportAssessableValue_IN));
            // ParmId, TableRefId, InventTransId uniquely identifies a SalesParmLine
            if (customsExportAssessableValue.InventTransId == this.InventTransId)
            {
                select forupdate salesParmLineLoc
                where salesParmLineLoc.ParmId        == salesParmTable.ParmId     &&
                      salesParmLineLoc.TableRefId    == salesParmTable.TableRefId &&
                      salesParmLineLoc.InventTransId == customsExportAssessableValue.InventTransId;
                ttsbegin;
                customsExportAssessableValue.selectForUpdate(true);
                customsExportAssessableValue.Amount = this.effectiveLineAmount();
                customsExportAssessableValue.update();
                ttscommit;
            }
        }
        // This piece of code populates the SalesParmLine field called Assessable value with the updated assessable
        // value from the CustomsExportAssessableValue_IN table
        this.salesParmLine_IN().AssessableValueTransactionCurrency = CustomsExportAssessableValue_IN::findInventTransId(this.InventTransId).invoiceAssessableValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDeliverNow</Name>
				<Source><![CDATA[
    void  setInventDeliverNow()
    {
        SalesLine salesLine;

        salesLine = this.salesLine();

        if (salesLine.isStocked())
        {
            this.InventNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																								   this.InventDimId,
																								   this.DeliverNow,
																								   salesLine.SalesUnit,
																								   salesLine.inventTable().inventUnitId(),
																								   NoYes::Yes);
        }
        else
        {
            this.InventNow = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    void setLineAmount(SalesLine _salesLine = null)
    {
        SalesLine localSalesLine;

        if (_salesLine)
        {
            localSalesLine = _salesLine;
        }
        else
        {
            localSalesLine = this.salesLine();
        }
        if (localSalesLine.RecId)
        {
            this.LineAmount = localSalesLine.calcLineAmount(this.DeliverNow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    void  setQty(DocumentStatus     documentStatus,
                 boolean            creditRemaining,
                 boolean            setInventNow    = true)
    {
        SalesQuantity salesQuantity = this.instantiateSalesQuantity(documentStatus);

        SalesLine salesLine = this.salesLine();
        InventQty inventNow;
        if (salesLine.RecId)
        {
            this.revertPreviousVersionChanges(salesLine);
            salesLine.SalesDeliverNow = this.DeliverNow;
            salesLine.setInventDeliverNow();

            // <GEERU>
            #ISOCountryRegionCodes
            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
            if (countryRegion_RU && SalesFormLetter::useInventOwnerIdRange_RU(this.salesParmUpdate().SplitInventOwnerId_RU,
                                                          documentStatus,
                                                          salesLine))
            {
                InventDim       inventDimCriteria;
                InventDimParm   inventDimParm;
                inventDimCriteria.clear();
                inventDimCriteria.InventOwnerId_RU = this.InventOwnerId_RU;
                inventDimParm.InventOwnerIdFlag_RU = NoYes::Yes;
                salesQuantity.parmInventDimCriteria_RU(inventDimCriteria);
                salesQuantity.parmInventDimParm_RU(inventDimParm);
            }
            // </GEERU>

            this.RemainBeforeInventPhysical = salesLine.RemainInventPhysical;

            // <GIN>
            if (TaxParameters::isCustomsEnable_IN()                                     &&
                SalesTable::find(this.OrigSalesId).CustomsExportOrder_IN == NoYes::Yes  &&
                documentStatus == DocumentStatus::ShippingBill_IN)
            {
                SalesParmTable salesParmTable = SalesParmTable::find(this.ParmId, this.TableRefId);
                CustomsExportOrderLine_IN customsExportOrderLine;
                select customsExportOrderLine
                    where   customsExportOrderLine.InvoiceId        == salesParmTable.CustomsExportInvoiceId_IN &&
                            customsExportOrderLine.SalesId          == salesParmTable.SalesId                   &&
                            customsExportOrderLine.InventTransId    == this.InventTransId;

                [this.DeliverNow,   this.RemainBefore,       this.RemainAfter]          = salesQuantity.qtySales(customsExportOrderLine,
                                                                                                                SalesUpdate::All,
                                                                                                                salesLine.SalesDeliverNow,
                                                                                                                creditRemaining);
            }
            else
            {
            // </GIN>

                [this.DeliverNow,   this.RemainBefore,       this.RemainAfter]          = salesQuantity.qtySales(salesLine,
                                                                                                                 SalesUpdate::All,
                                                                                                                 salesLine.SalesDeliverNow,
                                                                                                                 creditRemaining);

            // <GIN>
            }
            // </GIN>
            [inventNow,         this.RemainBeforeInvent, this.RemainAfterInvent]    = salesQuantity.qtyInvent(salesLine,
                                                                                                              SalesUpdate::All,
                                                                                                              salesLine.InventDeliverNow,
                                                                                                              creditRemaining);
        }//Related to SalesLine

        if (setInventNow)
            this.InventNow = inventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateSalesQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SalesQuantity</c> instance.
    /// </summary>
    /// <param name = "_documentStatus">The <c>DocumentStatus</c> that determines which subclass of <c>SalesQuantity</c> to instantiate.</param>
    /// <returns>A <c>SalesQuantity</c> instance.</returns>
    protected SalesQuantity instantiateSalesQuantity(DocumentStatus _documentStatus)
    {
        return SalesQuantity::construct(_documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainAfterInvent</Name>
				<Source><![CDATA[
    void  setRemainAfterInvent()
    {
        SalesLine  salesLine;

        salesLine = this.salesLine();
        if (salesLine.isStocked())
        {
            this.RemainAfterInvent = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																										   this.InventDimId,
																										   this.RemainAfter,
																										   salesLine.SalesUnit,
																										   salesLine.inventTable().inventUnitId(),
																										   NoYes::Yes);
        }
        else
        {
            this.RemainAfterInvent = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierAddress</Name>
				<Source><![CDATA[
    display ShipCarrierLocationAddress shipCarrierAddress()
    {
        return LogisticsPostalAddress::findRecId(this.ShipCarrierPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId shipCarrierLocation()
    {
        LogisticsPostalAddress address;
        select firstonly Location from address where address.RecId == this.ShipCarrierPostalAddress;
        return address.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subId</Name>
				<Source><![CDATA[
    SalesParmSubId subId()
    {
        return SalesParmSubLine::subId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        SalesLine       salesLine;
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(SalesParmLine, DeliverNow):
                if (MCROrderParameters::isCallCenterEnabledAndInUse())
                {
                    // We now allow the user to invoice a drop ship
                    // sales line before the entire line has a PO packing
                    // slip posted, but we need to prevent the user from
                    // invoicing more than the posted packing slip
                    // quantity posted.
                    salesLine = this.salesLine();

                    if ( salesLine.DeliveryType         == TradeLineDlvType::DropShip
                    &&  !this.salesParmUpdate().Proforma
                    &&  this.salesParmTable().Ordering  == DocumentStatus::Invoice
                    &&  salesLine.RemainSalesFinancial <  this.DeliverNow)
                    {
                        ret = checkFailed("@MCR39729");
                    }
                }

                ret = this.checkDeliverNow(this.PreviousDeliverNow, this.DeliverNow, this.RemainBefore) && ret;
                break;

            case fieldNum(SalesParmLine, InventNow):
                ret = this.checkDeliverNow(this.PreviousInventNow, this.InventNow, this.RemainBeforeInvent) && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.InventNow != this.RemainBeforeInvent)
        {
            if (this.salesParmTable().Ordering == DocumentStatus::Confirmation)
            {
                if (!this.salesTable().type().canBePartlyConfirmed())
                    ret = checkFailed(strFmt("@SYS83692", this.OrigSalesId, this.ItemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the table buffer and delete the record with required condition.
    /// </summary>
    /// <param name="_parmId">
    /// The field is used to find the record.
    /// </param>
    /// <param name="_tableRefId">
    /// The field is used to find the record.
    /// </param>
    static void  deleteFromSalesParmLine_IN(ParmId          _parmId,
                                            TradeLineRefId  _tableRefId)
    {
        SalesParmLine  salesParmLine;

        delete_from salesParmLine
            where   salesParmLine.ParmId     == _parmId &&
                    salesParmLine.TableRefId == _tableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmSubTable</Name>
				<Source><![CDATA[
    static void  deleteFromSalesParmSubTable(SalesParmSubTable _salesParmSubTable)
    {
        SalesParmLine  salesParmLine;

        delete_from salesParmLine
            where salesParmLine.ParmId      == _salesParmSubTable.ParmId        &&
                  salesParmLine.TableRefId  == _salesParmSubTable.TableRefId    &&
                  salesParmLine.OrigSalesId == _salesParmSubTable.OrigSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmTable</Name>
				<Source><![CDATA[
    static void  deleteFromSalesParmTable(SalesParmTable _salesParmTable)
    {
        SalesParmLine  salesParmLine;

        delete_from salesParmLine
            where salesParmLine.ParmId      == _salesParmTable.ParmId   &&
                  salesParmLine.TableRefId  == _salesParmTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmUpdate</Name>
				<Source><![CDATA[
    static void deleteFromSalesParmUpdate(SalesParmUpdate _salesParmUpdate)
    {
        SalesParmLine  salesParmLine;

        delete_from salesParmLine
            where salesParmLine.ParmId == _salesParmUpdate.ParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSales</Name>
				<Source><![CDATA[
    static boolean  existSales(ParmId           parmId,
                               SalesId          origSalesId)
    {
        if (parmId  && origSalesId)
        {
            return (select firstonly RecId from salesParmLine
                        where salesParmLine.ParmId      == parmId       &&
                              salesParmLine.OrigSalesId == origSalesId
                   ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTableRefId</Name>
				<Source><![CDATA[
    static boolean existTableRefId(ParmId           parmId,
                                   TradeLineRefId   tableRefId)
    {
        if (parmId  &&  tableRefId)
        {
            return (select firstonly RecId from salesParmLine
                        where salesParmLine.ParmId      == parmId
                           && salesParmLine.TableRefId  == tableRefId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWaiting</Name>
				<Source><![CDATA[
    static boolean  existWaiting(ParmId             _parmId,
                                 SalesId            _origSalesId,
                                 TradeInventTransId _inventTransId)
    {
        if (_parmId  &&  _origSalesId  &&  _inventTransId)
        {
            return (select firstonly RecId from salesParmLine
                        where   salesParmLine.ParmId        == _parmId       &&
                                salesParmLine.OrigSalesId   == _origSalesId  &&
                                salesParmLine.InventTransId == _inventTransId
                   ).RecId !=0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventTransId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds the specified record in the <c>SalesParmLine</c> table.
    /// </summary>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <param name="_tableRefId">
    /// The table id is used to find record.
    /// </param>
    /// <param name="_inventTransId">
    /// The invent transfer id is used to find record.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmLine</c> table.
    /// </returns>
    public static SalesParmLine findByInventTransId_IN(ParmId _parmId, TradeLineRefId _tableRefId,
                                            InventTransId _inventTransId)
    {
        SalesParmLine salesParmLine;

        if (_parmId && _tableRefId && _inventTransId)
        {
            select salesParmLine
                where salesParmLine.ParmId        == _parmId
                    &&  salesParmLine.TableRefId      == _tableRefId
                    &&  salesParmLine.InventTransId   == _inventTransId;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    static SalesParmLine findInventTransId(ParmId               _parmId,
                                           TradeInventTransId   _inventTransId,
                                           boolean    _forUpdate = false )
    {
        SalesParmLine salesParmLine;

        salesParmLine.selectForUpdate(_forUpdate);

        select salesParmLine
            where salesParmLine.ParmId        == _parmId
               && salesParmLine.InventTransId == _inventTransId;

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdRecordViewCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>RecordViewCache</c> instance for the cache find <c>SalesParmLine</c> record by <c>ParmId</c> and <c>IventTransId</c> fields.
    /// </summary>
    /// <param name = "_parmId">The parm Id of the <c>SalesParmLine</c> record to find.</param>
    /// <param name = "_inventTransId">The inventory transaction Id of the <c>SalesParmLine</c> record to find.</param>
    /// <returns>An <c>RecordViewCache</c> instance.</returns>
    [Hookable(false)]
    public static RecordViewCache inventTransIdRecordViewCache(ParmId _parmId, TradeInventTransId _inventTransId)
    {
        SalesParmLine salesParmLine;
        
        select nofetch salesParmLine
            where salesParmLine.ParmId == _parmId
                && salesParmLine.InventTransId == _inventTransId;

        return new RecordViewCache(salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIdRecordViewCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>RecordViewCache</c> instance for the cache find <c>SalesParmLine</c> record by <c>ParmId</c> field.
    /// </summary>
    /// <param name = "_parmId">The parm Id of the <c>SalesParmLine</c> record to find.</param>
    /// <returns>An <c>RecordViewCache</c> instance.</returns>
    [Hookable(false)]
    public static RecordViewCache parmIdRecordViewCache(ParmId _parmId)
    {
        SalesParmLine salesParmLine;
        
        select nofetch salesParmLine
            where salesParmLine.ParmId == _parmId;

        return new RecordViewCache(salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SalesParmLine findRecId(RecId      _recId,
                                   boolean    _forUpdate = false )
    {
        SalesParmLine salesParmLine;

        if (_recId)
        {
        salesParmLine.selectForUpdate(_forUpdate);

        select salesParmLine
            where salesParmLine.RecId == _recId;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableRefId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesParmLine</c> table.
    /// </summary>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <param name="_tableRefId">
    /// The table id is used to find record.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmLine</c> table.
    /// </returns>
    public static SalesParmLine findTableRefId_IN(ParmId           _parmId,
                                           TradeLineRefId   _tableRefId,
                                           boolean          _update = false )
    {
        SalesParmLine  salesParmLine;

        salesParmLine.selectForUpdate(_update);

        select salesParmLine
            where salesParmLine.ParmId          == _parmId
               && salesParmLine.TableRefId      == _tableRefId;

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount based on the table id and recId passed.
    /// </summary>
    /// <param name="_transTableId">
    /// The unique table id to find.
    /// </param>
    /// <param name="_transRecId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_documentStatus">
    /// The invoice status of current record.
    /// </param>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN(RefTableId _transTableId, RefRecId _transRecId, DocumentStatus _documentStatus)
    {
        Amount                    notionalAmount;
        Amount                    markupTotalValue;
        MarkupTrans               markupTransLoc;
        Amount                    notionalCharges;
        Amount                    miscChargeAmount;
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans          custInvoiceTrans;

        while select Value, NotionalPct_IN, CurrencyCode, MarkupCategory, MarkUpAllocateAfter_IN, DocumentStatus, Keep, ModuleType, MarkupCode, TransTableId, TransRecId
        from markupTransLoc
        where markupTransLoc.TransTableId == _transTableId
            && markupTransLoc.TransRecId   == _transRecId
            && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes || markupTransLoc.NotionalCharges_IN == NoYes::Yes && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()))
        {
            // Filter misc. charge value when post the second Picking list, Packing slip.
            if ((_documentStatus == DocumentStatus::PickingList || _documentStatus == DocumentStatus::PackingSlip)
            && _documentStatus == markupTransLoc.DocumentStatus)
            {
                continue;
            }

            // Filter misc. charge value when post the second Shipping bill.
            if (!markupTransLoc.Keep && _documentStatus == DocumentStatus::ShippingBill_IN
            && _transTableId == tableNum(CustInvoiceTrans))
            {
                if (_transRecId)
                {
                    select firstonly RecId from customsShippingBillTrans
                        join RecId from custInvoiceTrans
                            where custInvoiceTrans.SalesId == customsShippingBillTrans.SalesId
                                && custInvoiceTrans.InvoiceDate == customsShippingBillTrans.InvoiceDate
                                && custInvoiceTrans.InvoiceId == customsShippingBillTrans.InvoiceId
                                && custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                                && custInvoiceTrans.RecId == _transRecId;

                    if (customsShippingBillTrans.RecId)
                    {
                        continue;
                    }
                }
            }

            if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
            {
                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                {
                    markupTransLoc.Value = this.LineAmount * markupTransLoc.Value / 100;
                }
                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                {
                    markupTransLoc.Value = this.DeliverNow * markupTransLoc.Value / 100;
                }
                if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                {
                    markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                }
            }

            if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
            {
                markupTransLoc.Value = this.DeliverNow * markupTransLoc.Value;
            }

            if (Markup::isProratedMarkupTrans(markupTransLoc))
            {
                markupTransLoc.Value = Markup::mcrCalcFixedMiscCharge(markupTransLoc, 0, this.DeliverNow);
            }

            if (_transTableId != tableNum(CustInvoiceTable))
            {
                markupTotalValue = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value,
                    markupTransLoc.CurrencyCode,
                    this.salesParmTable().CurrencyCode);
            }
            else
            {
                markupTotalValue = markupTransLoc.Value;
            }

            notionalCharges     = markupTransLoc.NotionalPct_IN/100;

            notionalAmount      = this.LineAmount * notionalCharges;

            if (notionalAmount == 0)
            {
                miscChargeAmount += markupTotalValue;
            }
            else if (markupTotalValue == 0)
            {
                miscChargeAmount += notionalAmount;
            }
            else if (notionalAmount < markupTotalValue)
            {
                miscChargeAmount += notionalAmount;
            }
            else
            {
                miscChargeAmount += markupTotalValue;
            }
        }

        return miscChargeAmount + this.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectedInvoiceLines_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates links between <c>SalesParmLine</c> records for current <c>SalesParmTable</c> and
    /// corrected <c>CustInvoiceTrans</c> records.
    /// </summary>
    /// <param name="_salesParmTable">
    /// <c>SalesParmTable</c> record for which lines links should be set.
    /// </param>
    static void initCorrectedInvoiceLines_RU(SalesParmTable _salesParmTable)
    {
        Query                       query;
        QueryRun                    queryRun;
        SalesParmLine               parmLine;
        CustInvoiceTrans            invoiceTrans;
        CustInvoiceJour             invoiceJour;
        CustInvoiceTrans            custInvoiceTrans;
        SalesParmLineCorrLink_RU    corrLineLink;
        CustInvoiceJourCorrLink_RU  corrLinkJour;
        CustInvoiceJour             origInvoiceJour = CustInvoiceJour::findFromCustTrans(_salesParmTable.CorrectedInvoiceId_RU,
                                                                                          _salesParmTable.CorrectedInvoiceDate_RU,
                                                                                          _salesParmTable.InvoiceAccount);

        void findSourceInvoiceLine(boolean _controlItemDim)
        {
            query = CustVendInvoiceTrans::queryCorrectedTrans_RU(_salesParmTable.CorrectedInvoiceId_RU,
                                                                 _salesParmTable.CorrectedInvoiceDate_RU,
                                                                 _salesParmTable.InvoiceAccount,
                                                                 _salesParmTable.CurrencyCode,
                                                                 parmLine.salesLine(),
                                                                 _controlItemDim);

            query.dataSourceTable(tableNum(CustInvoiceTrans)).firstOnly(true);

            queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                custInvoiceTrans = queryRun.get(tableNum(CustInvoiceTrans));
                SalesParmLineCorrLink_RU::createLink(parmLine.RecId, custInvoiceTrans.RecId);
            }
        }

        if (! _salesParmTable.CorrectedInvoiceId_RU || ! _salesParmTable.CorrectedInvoiceDate_RU)
        {
            return;
        }

        ttsbegin;

        while select forupdate parmLine
            where parmLine.ParmId     == _salesParmTable.ParmId
               && parmLine.TableRefId == _salesParmTable.TableRefId
        notexists join corrLineLink
            where corrLineLink.SalesParmLineRecId == parmLine.RecId
        exists join invoiceTrans
            where invoiceTrans.RecId == corrLineLink.CorrTransRecId
        exists join invoiceJour
            where invoiceJour.SalesId               == invoiceTrans.SalesId
               && invoiceJour.InvoiceId             == invoiceTrans.InvoiceId
               && invoiceJour.InvoiceDate           == invoiceTrans.InvoiceDate
               && invoiceJour.NumberSequenceGroup   == invoiceTrans.NumberSequenceGroup
               && invoiceJour.CurrencyCode          == _salesParmTable.CurrencyCode
        exists join corrLinkJour
            where corrLinkJour.JourRecId      == invoiceJour.RecId &&
                  corrLinkJour.CorrJourRecId  == origInvoiceJour.refOriginalInvoiceRecId_RU()
        {
            SalesParmLineCorrLink_RU::clearLinks(parmLine.RecId);

            findSourceInvoiceLine(true);
            if (! parmLine.existsCorrLink_RU() && ! CustParameters::find().ItemDimAdjustLineControl_RU)
            {
                findSourceInvoiceLine(false);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesParmLine</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID of the <c>SalesParmLine</c> record to find.
    /// </param>
    /// <param name="_parmId">
    /// ParmId
    /// </param>
    /// <param name="_update">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmLine</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesParmLine mcrFindInventTransId(InventTransId    _inventTransId,
                                             ParmId           _parmId,
                                             boolean          _update = false )
    {
        SalesParmLine  salesParmLine;

        salesParmLine.selectForUpdate(_update);

        select * from salesParmLine
            where salesParmLine.InventTransId   == _inventTransId
               && salesParmLine.ParmId == _parmId;

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindParmRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesParmLine</c> table.
    /// </summary>
    /// <param name="_parmLineRecId">
    /// The record ID of the <c>SalesParmLine</c> record to find.
    /// </param>
    /// <param name="_update">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmLine</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesParmLine mcrFindParmRefRecId(RecId       _parmLineRecId,
                                            boolean     _update = false )
    {
        SalesParmLine  salesParmLine;

        salesParmLine.selectForUpdate(_update);

        select firstonly * from salesParmLine
            where salesParmLine.RecId          == _parmLineRecId;

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindTableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesParmLine</c> table.
    /// </summary>
    /// <param name="_tableRefId">
    /// The table record ID of the <c>SalesParmLine</c> record to find.
    /// </param>
    /// <param name="_update">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmLine</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// Note that TableRefId is not a unique key, meaning that this
    ///  might return more than one record.
    /// </remarks>
    public static SalesParmLine mcrFindTableRefId(TradeLineRefId    _tableRefId,
                                          boolean       _update = false )
    {
        SalesParmLine  salesParmLine;

        salesParmLine.selectForUpdate(_update);

        if (_tableRefId)
        {
            select firstonly * from salesParmLine
                where salesParmLine.TableRefId  == _tableRefId;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSummaryUpdate</Name>
				<Source><![CDATA[
    static void prepareSummaryUpdate(ParmId _parmId, AccountOrder _accountOrder)
    {
        SalesParmLine       salesParmLine, newSalesParmLine;
        SalesParmSubLine    salesParmSubLine, sumSubLine;
        Map                 counterMap = new Map(Types::Int64, Types::Int64);
        Map                 counterMap2 = new Map(Types::Int64, Types::Record);
        RecId   prevrecId;

        if (_accountOrder == AccountOrder::Journal)
        {
            while select count(RecId) from salesParmSubLine
                group by LineRefRecId
                where salesParmSubLine.ParmId == _parmId
            {
                if (salesParmSubLine.RecId > 1)
                {
                    counterMap.insert(salesParmSubLine.LineRefRecId, salesParmSubLine.RecId);
                }
            }

            while select forupdate salesParmSubLine
                order by LineRefRecId
                where salesParmSubLine.ParmId == _parmId
            {
                if (counterMap.exists(salesParmSubLine.LineRefRecId))
                {
                    if (salesParmLine.RecId == salesParmSubLine.LineRefRecId)
                    {
                        newSalesParmLine = salesParmLine.data();
                        newSalesParmLine.DeliverNow = salesParmSubLine.DeliverNow;
                        newSalesParmLine.InventNow  = salesParmSubLine.InventNow;
                        newSalesParmLine.doInsert();
                        salesParmSubLine.LineRefRecId = newSalesParmLine.RecId;
                        salesParmSubLine.update();
                    }
                    else
                    {
                        salesParmLine = SalesParmLine::findRecId(salesParmSubLine.LineRefRecId, true);
                        salesParmLine.InventNow  = salesParmSubLine.InventNow;
                        salesParmLine.DeliverNow = salesParmSubLine.DeliverNow;
                        if (#PdsCatchWeightEnabled)
                        {
                            salesParmLine.PdsCWDeliverNow = salesParmSubLine.PdsCWDeliverNow;
                        }
                        salesParmLine.doUpdate();
                    }
                }
            }
        }
        else
        {
            while select count(RecId), sum(DeliverNow), sum(InventNow) from salesParmSubLine
                group by SalesLineRecId
                where salesParmSubLine.ParmId == _parmId
            {
                if (salesParmSubLine.RecId > 1)
                {
                    counterMap2.insert(salesParmSubLine.SalesLineRecId, salesParmSubLine);
                }
            }

            while select forupdate salesParmSubLine
                order by SalesLineRecId
                where salesParmSubLine.ParmId == _parmId
            {
                if (counterMap2.exists(salesParmSubLine.SalesLineRecId))
                {
                    if (salesParmLine.SalesLineRecId == salesParmSubLine.SalesLineRecId)
                    {
                        prevrecId = salesParmSubLine.LineRefRecId;
                        salesParmSubLine.LineRefRecId = salesParmLine.RecId;
                        salesParmSubLine.doUpdate();

                        newSalesParmLine = SalesParmLine::findRecId(prevrecId,true);
                        newSalesParmLine.doDelete();
                    }
                    else
                    {
                        sumSubLine = counterMap2.lookup(salesParmSubLine.SalesLineRecId);
                        salesParmLine = SalesParmLine::findRecId(salesParmSubLine.LineRefRecId,true);

                        salesParmLine.DeliverNow = sumSubLine.DeliverNow;
                        salesParmLine.InventNow = sumSubLine.InventNow;
                        salesParmLine.doUpdate();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesParmLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>SalesParmLine_BR</c> record associated with the current record.
    /// </summary>
    /// <param name="_salesParmLine_BR">
    /// The <c>SalesParmLine_BR</c> record.
    /// </param>
    public void packSalesParmLine_BR(SalesParmLine_BR _salesParmLine_BR)
    {
        _salesParmLine_BR.SalesParmLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_salesParmLine_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>SalesParmLine_IN</c> record associated with the current record.
    /// </summary>
    /// <param name="_salesParmLine_IN">
    /// The <c>SalesParmLine_IN</c> record.
    /// </param>
    public void packSalesParmLine_IN(SalesParmLine_IN _salesParmLine_IN)
    {
        _salesParmLine_IN.SalesParmLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_salesParmLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesParmLine_BR</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>SalesParmLine_BR</c> record associated with the current record.
    /// </returns>
    public SalesParmLine_BR salesParmLine_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesParmLine_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesParmLine_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>SalesParmLine_IN</c> record associated with the current record.
    /// </returns>
    public SalesParmLine_IN salesParmLine_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesParmLine_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update current <c> SalesParmLine </c>
    /// </summary>
    public void update()
    {
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (this.SalesPurchJournalLine::taxRecalculationNeeded())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }

        super();

        this.SysExtensionSerializerMap::postUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update current assessable value of <c> SalesParmLine </c>
    /// </summary>
    Private void updateAssessableValue_IN()
    {
        CustomsExportOrderLine_IN   custExportOrderLine;
        CustInvoiceTrans            custInvoiceTrans;
        RealBase                    factor;
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesParmLine_IN salesParmLineIN = this.salesParmLine_IN();
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                custExportOrderLine = CustomsExportOrderLine_IN::findBySalesInvoiceIdTrans(this.OrigSalesId, this.salesParmTable().CustomsExportInvoiceId_IN, this.InventTransId);
                custInvoiceTrans    = CustInvoiceTrans::findRecId(custExportOrderLine.CustInvoiceTransRecId);
                if (this.salesTable().CustomsExportOrder_IN && this.salesParmTable().Ordering == DocumentStatus::ShippingBill_IN)
                {
                    salesParmLineIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN(custInvoiceTrans.TableId, custInvoiceTrans.RecId, this.salesParmTable().Ordering);
                }
                else
                {
                    salesParmLineIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN(this.salesLine().TableId, this.SalesLineRecId, this.salesParmTable().Ordering);
                }
            }
            else
            {
                factor = salesParmLineIN.AssessableValueTransactionCurrency / this.orig().DeliverNow;
                salesParmLineIN.AssessableValueTransactionCurrency = factor * this.DeliverNow;
            }
            this.packSalesParmLine_IN(salesParmLineIN);
            this.SysExtensionSerializerMap::PostUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> SalesParmLine </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.salesParmTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesParmLine</c> table buffer on India fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(Common _origTransactionTable = this.orig())
    {
        boolean             indirectTaxChanged = false;
        SalesParmLine_IN    salesParmLine_IN;
        SalesParmLine_IN    salesParmLine_Orig_IN;
        SalesParmLine       salesParmLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        if (TaxParameters::checkTaxParameters_IN())
        {
            salesParmLine_IN        = this.salesParmLine_IN();
            salesParmLine_Orig_IN   = salesParmLine_Orig.salesParmLine_IN();

            indirectTaxChanged =
                salesParmLine_IN.AssessableValueTransactionCurrency != salesParmLine_Orig_IN.AssessableValueTransactionCurrency
                || salesParmLine_IN.MaximumRetailPrice              != salesParmLine_Orig_IN.MaximumRetailPrice;
        }
        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesParmLine</c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        SalesParmLine salesParmLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        boolean updateNeeded =
                    (
                    (this.ItemId                != salesParmLine_Orig.ItemId) ||
                    (this.DeliveryPostalAddress != salesParmLine_Orig.DeliveryPostalAddress) ||
                    (this.DeliverNow            != salesParmLine_Orig.DeliverNow) ||
                    (this.LineAmount            != salesParmLine_Orig.LineAmount) ||
                    (this.SalesCategory         != salesParmLine_Orig.SalesCategory)
                    );

        return updateneeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this sales parm line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineSalesParmLineImpl</c> object </returns>
    public TaxModelDocLineSalesParmLineImpl initTaxModelDocLine()
    {
        TaxModelDocLineSalesParmLineImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineSalesParmLineImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this sales parm line record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLineSalesParmLineImpl_IN</c> object </returns>
    public TaxModelDocLineSalesParmLineImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLineSalesParmLineImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLineSalesParmLineImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The record for SalesParmTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.salesParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExcludingTaxGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Amount excluding tax for GTE.
    /// </summary>
    /// <returns>
    /// The amount excluding tax.
    /// </returns>
    //<GTE>
    public amountCur amountExcludingTaxGTE()
    {
        TaxBaseCur          taxOrigin;
        ITaxDocument        taxDocumentObject;
        ITaxDocumentLine    taxDocumentLineObject;

        taxOrigin = this.LineAmount;
        taxDocumentObject = TaxBusinessService::calculateTax(
        TaxableDocumentObject::construct(
            TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.salesParmTable())));

        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(this.TableId, this.RecId);
            if (taxDocumentLineObject && taxDocumentLineObject.priceInclTax())
            {
                taxOrigin = taxOrigin - taxDocumentLineObject.getInclTax().amountTransactionCurrency();
            }
        }

        return taxOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    //</GTE>

    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWorkRegulation</Name>
				<Source><![CDATA[
    protected void updateTaxWorkRegulation()
    {
        if (CustParameters::find().EnableSingleLineTaxAdjustment
            || TaxIntegrationAdjustment::isEnabledForTransaction(this.TableId, this.RecId))
        {
            TaxWorkRegulation taxWorkRegulation;
            SalesLine salesLine;

            while select forupdate taxWorkRegulation
                where taxWorkRegulation.HeadingTableId == tableNum(SalesLine)
                join SalesQty, CurrencyCode, SalesId, LineNum from salesLine
                    where salesLine.RecId == taxWorkRegulation.HeadingRecId
                        && salesLine.InventTransId == this.InventTransId
            {
                taxWorkRegulation.updateActualTaxRegulationAmountCur(salesLine, this);
            }

            // Pops out warning message when there exists percentage charge with tax adjustment
            // because we don't support partially invoice for charge in this scenario yet

            // Check whether there exists charge under SalesLine
            MarkupTrans markupTrans;
            select firstonly RecId from salesLine
                where salesLine.RecId == this.SalesLineRecId
                join RecId from markupTrans
                    where markupTrans.MarkupCategory == MarkupCategory::Percent
                        && markupTrans.TransTableId == tableNum(SalesLine)
                        && markupTrans.TransRecId == salesLine.RecId
                join RecId from taxWorkRegulation
                    where taxWorkRegulation.HeadingTableId == tableNum(MarkupTrans)
                        && taxWorkRegulation.HeadingRecId == markupTrans.RecId;

            if (taxWorkRegulation.RecId)
            {
                warning("@TaxCoreTax:TaxAdjustmentOnPctChargeForPartiallyInvoiceSOWarningMsg");
            }
            else
            {
                // Check whether there exists charge under SalesTable
                SalesTable salesTable;
                select firstonly RecId from salesLine
                    where salesLine.RecId == this.SalesLineRecId
                    join RecId from salesTable
                        where salesTable.SalesId == salesLine.SalesId
                    join RecId from markupTrans
                        where markupTrans.MarkupCategory == MarkupCategory::Percent
                            && markupTrans.TransTableId == tableNum(SalesTable)
                            && markupTrans.TransRecId == salesTable.RecId
                    join RecId from taxWorkRegulation
                        where taxWorkRegulation.HeadingTableId == tableNum(MarkupTrans)
                            && taxWorkRegulation.HeadingRecId == markupTrans.RecId;

                if (taxWorkRegulation.RecId)
                {
                    warning("@TaxCoreTax:TaxAdjustmentOnPctChargeForPartiallyInvoiceSOWarningMsg");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124483</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS55236</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>OrigSalesId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>ParmTableRefIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SalesParmSubLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesParmSubLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfterInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AlcoholDeclaration_RU</Name>
			<Label>@SYS4002797</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcoholLicenseSeriesNum_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssessableValueTransactionCurrency</Name>
			<Label>@GLS5298</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Block</Name>
			<Label>@SYS28075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipCarrierAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryQuantity</Name>
			<Label>@SYS21676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousInventNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBeforeInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBeforeInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfterInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventOwner_RU</Name>
			<Label>@GLS115561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113772</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderLines</Name>
			<Label>@SYS508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>changedManually</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackagingMaterial</Name>
			<Label>@SYS72995</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingUnitQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlip</Name>
			<Label>@SYS11549</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainAfterInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCW</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWDeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainAfterInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesQuantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousDeliverNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scrap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseManagement</Name>
			<Label>@SYS50169</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AlcoholLicenseSeriesNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholLicenseSeriesNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>changedManually</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS28792</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14403</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Complete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS2934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS2934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventOwnerId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventOwnerId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6901</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigSalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdOrig</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingUnitQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWDeliverNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS84</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWPreviousDeliverNow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainAfterInvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS76</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainBefore</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWRemainQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousDeliverNow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousInventNow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAfter</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAfterInvent</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBefore</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS8459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBeforeInvent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS8459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBeforeInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeRemainBeforeInventPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesLineRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Scrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24894</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipCarrierPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMandatoryOrder</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsShippingBillNumberTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Null>Yes</Null>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmountExcludeTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>parmIdOrigSalesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigSalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmTableRefIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigSalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmTableRefSalesLineRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesLineRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>FormletterJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigOrderId</MapField>
					<MapFieldTo>OrigSalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterParmLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PreviousQty</MapField>
					<MapFieldTo>PreviousDeliverNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>DeliverNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceLineRecId</MapField>
					<MapFieldTo>SalesLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InterCompanyJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCompanyId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditNoteDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsMaxRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAsPerOriginalInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine_W</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile_RU</MapField>
					<MapFieldTo>PostingProfile_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAgreementDate_RU</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>SalesCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>DeliverNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>AlcoholLicenseTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AlcoholLicenseTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AlcoholLicenseSeriesNum_RU</Name>
					<SourceEDT>AlcoholLicenseSeriesNum_RU</SourceEDT>
					<Field>AlcoholLicenseSeriesNum_RU</Field>
					<RelatedField>LicenseSeriesNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile_RU</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile_RU</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SalesParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventOwner_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventOwner_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventOwnerId_RU</Name>
					<SourceEDT>InventOwnerId_RU</SourceEDT>
					<Field>InventOwnerId_RU</Field>
					<RelatedField>InventOwnerId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventOwnerIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrderCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrderCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PackingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackingUnit</Name>
					<Field>PackingUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_SalesParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLineRecId</Name>
					<Field>SalesLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesLineIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>salesParmSubTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesParmSubTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigSalesId</Name>
					<Field>OrigSalesId</Field>
					<RelatedField>OrigSalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesParmTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigSalesId</Name>
					<Field>OrigSalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_1_SalesParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierPostalAddress</Name>
					<Field>ShipCarrierPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ShipCarrierTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierId</Name>
					<Field>ShipCarrierId</Field>
					<RelatedField>CarrierId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>