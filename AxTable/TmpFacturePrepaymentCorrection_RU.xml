<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpFacturePrepaymentCorrection_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpFacturePrepaymentCorrection_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearPaymentsWithFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records with created factures or without tax transactions.
    /// </summary>
    /// <param name="_correctionTax">
    /// <c>TmpFacturePrepaymentCorrection_RU</c> temporary table with tax transactions.
    /// </param>
    public void clearPaymentsWithFacture(TmpFacturePrepaymentCorrection_RU _correctionTax)
    {
        TmpFacturePrepaymentCorrection_RU correctionPaym = this;
        TmpFacturePrepaymentCorrection_RU correctionTax;
        TmpFacturePrepaymentCorrection_RU correctionTaxOther;
        TmpFacturePrepaymentCorrection_RU correctionPaymNotFull;

        correctionTax.linkPhysicalTableInstance(_correctionTax);
        correctionTaxOther.linkPhysicalTableInstance(_correctionTax);

        insert_recordset correctionPaymNotFull(RefRecId)
        select RefRecId from correctionTax
            group by RefRecId
            where !correctionTax.FactureExternalId
            exists join correctionPaym
                where correctionTax.RefRecId == correctionPaym.RecId;

        while select RecId from correctionPaym
        {
            boolean isInsert = false;

            select firstonly AmountCurCredit, AmountCurDebit, RecId, ProcessDateTime from correctionTax
                order by ProcessDateTime
                where correctionTax.RefRecId == correctionPaym.RecId;

            if (correctionTax)
            {
                select sum(AmountCurCredit), sum(AmountCurDebit) from correctionTaxOther
                where correctionTaxOther.RefRecId == correctionPaym.RecId
                    && correctionTaxOther.RecId != correctionTax.RecId;

                AmountCur correctionTaxAmount = abs(correctionTax.AmountCurCredit + correctionTax.AmountCurDebit);
                AmountCur correctionTaxOtherAmount = abs(correctionTaxOther.AmountCurCredit + correctionTaxOther.AmountCurDebit);

                if (correctionTaxAmount != correctionTaxOtherAmount)
                {
                    isInsert = true;
                }
            }
            else
            {
                isInsert = true;
            }

            if (isInsert)
            {
                correctionPaymNotFull.RefRecId = correctionPaym.RecId;
                correctionPaymNotFull.doInsert();
            }
        }

        delete_from correctionPaym
            notexists join correctionPaymNotFull
                where correctionPaymNotFull.RefRecId == correctionPaym.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNonFactureTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates transactions without facture.
    /// </summary>
    /// <param name="_correctionTax">
    /// <c>TmpFacturePrepaymentCorrection_RU</c> temporary table with tax transactions.
    /// </param>
    /// <returns>
    /// True if exist transactions without facture; otherwise false.
    /// </returns>
    public boolean existsNonFactureTrans(TmpFacturePrepaymentCorrection_RU _correctionTax)
    {
        TmpFacturePrepaymentCorrection_RU correctionTax;

        correctionTax.linkPhysicalTableInstance(_correctionTax);

        select firstonly RecId from correctionTax
            where !correctionTax.FactureExternalId
                && correctionTax.RefRecId == this.RecId;

        return correctionTax.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes payment correction transactions.
    /// </summary>
    /// <param name="_module">
    /// The <c>ModuleCustVend</c> enum value.
    /// </param>
    public void initCorrectionPaym(ModuleCustVend _module)
    {
        FactureJour_Ru                      factureJour;
        CustTrans_W                         custTransW;
        VendTrans_W                         vendTransW;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalTrans_W                ledgerJournalTransW;
        LedgerJournalTable                  ledgerJournalTable;
        TmpFacturePrepaymentCorrection_RU   correctionPaym = this;

        if (_module == ModuleCustVend::Cust)
        {
            insert_recordset correctionPaym(TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension,
                OffsetAccountType, OffsetLedgerDimension, LedgerJournalTransPaym, FactureExternalId, FactureDate_External)
            select TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension, OffsetAccountType, OffsetLedgerDimension, RecId
                from ledgerJournalTrans
                where ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                    && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
            join ledgerJournalTransW
                where ledgerJournalTransW.LedgerJournalTrans == ledgerJournalTrans.RecId
            join custTransW
                where custTransW.CustTrans == ledgerJournalTransW.OrigPaymRefRecId_RU
            outer join FactureExternalId, FactureDate_External from factureJour
                where factureJour.FactureId == custTransW.PrepaymentFactureId_W
                    && factureJour.Module == FactureModule_RU::Cust
                    && factureJour.CorrectionType == FactureCorrectionType_RU::Unknown
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes;
        }
        else
        {
            insert_recordset correctionPaym(TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension,
                OffsetAccountType, OffsetLedgerDimension, LedgerJournalTransPaym, FactureExternalId, FactureDate_External)
            select TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension, OffsetAccountType, OffsetLedgerDimension, RecId
                from ledgerJournalTrans
                where ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                    && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
            join ledgerJournalTransW
                where ledgerJournalTransW.LedgerJournalTrans == ledgerJournalTrans.RecId
            join vendTransW
                where vendTransW.VendTrans == ledgerJournalTransW.OrigPaymRefRecId_RU
            outer join FactureExternalId, FactureDate_External from factureJour
                where factureJour.FactureId == vendTransW.PrepaymentFactureId_W
                    && factureJour.Module == FactureModule_RU::Vend
                    && factureJour.CorrectionType == FactureCorrectionType_RU::Unknown
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax correction transactions.
    /// </summary>
    /// <param name="_module">
    /// The <c>ModuleCustVend</c> enum value.
    /// </param>
    /// <param name="_correctionPaym">
    /// <c>TmpFacturePrepaymentCorrection_RU</c> temporary table with payments transactions.
    /// </param>
    public void initCorrectionTax(
        ModuleCustVend _module,
        TmpFacturePrepaymentCorrection_RU _correctionPaym)
    {
        FactureJour_Ru          factureJour;
        FactureTrans_RU         factureTrans;
        CustTrans_W             custTransW;
        VendTrans_W             vendTransW;
        TaxTrans                taxTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTrans_W    ledgerJournalTransW;
        LedgerJournalTrans      ledgerJournalTransPaym;
        LedgerJournalTable      ledgerJournalTable;
        TmpFacturePrepaymentCorrection_RU correctionTax = this;
        TmpFacturePrepaymentCorrection_RU correctionPaym;

        correctionPaym.linkPhysicalTableInstance(_correctionPaym);

        if (_module == ModuleCustVend::Cust)
        {
            insert_recordset correctionTax(TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension,
                OffsetAccountType, OffsetLedgerDimension, LedgerJournalTransTax, LedgerJournalTransPaym, RefRecId, FactureExternalId, FactureDate_External, FactureModule)
            select TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension, OffsetAccountType, OffsetLedgerDimension, RecId
                from ledgerJournalTrans
                where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                    && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
            join ledgerJournalTransW
                where ledgerJournalTransW.LedgerJournalTrans == ledgerJournalTrans.RecId
            join custTransW
                where custTransW.CustTrans == ledgerJournalTransW.OrigPaymRefRecId_RU
            join RecId from ledgerJournalTransPaym
                where ledgerJournalTransPaym.CustTransId == custTransW.CustTrans
            join RecId from correctionPaym
                where correctionPaym.ledgerJournalTransPaym == ledgerJournalTransPaym.RecId
            outer join factureTrans
                where (factureTrans.FactureLineType == FactureLineType_RU::TaxCorrection
                        ||factureTrans.FactureLineType == FactureLineType_RU::Prepayment)
                    && factureTrans.InvoiceId == ledgerJournalTrans.JournalNum
                    && factureTrans.InvoiceLineNum  == ledgerJournalTrans.LineNum
                    && factureTrans.MarkupRefRecId  == ledgerJournalTrans.RecId
            outer join FactureExternalId, FactureDate_External, Module from factureJour
                where factureJour.FactureId == factureTrans.FactureId
                    && factureJour.Module == factureTrans.Module
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes;
        }
        else
        {
            insert_recordset correctionTax(TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension,
                OffsetAccountType, OffsetLedgerDimension, LedgerJournalTransTax, LedgerJournalTransPaym, RefRecId, FactureExternalId, FactureDate_External, FactureModule)
            select TransDate, Voucher, AmountCurCredit, AmountCurDebit, AccountType, LedgerDimension, OffsetAccountType, OffsetLedgerDimension, RecId
                from ledgerJournalTrans
                where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                    && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
            join ledgerJournalTransW
                where ledgerJournalTransW.LedgerJournalTrans == ledgerJournalTrans.RecId
            join vendTransW
                where vendTransW.VendTrans == ledgerJournalTransW.OrigPaymRefRecId_RU
            join RecId from ledgerJournalTransPaym
                where ledgerJournalTransPaym.VendTransId == vendTransW.VendTrans
            join RecId from correctionPaym
                where correctionPaym.ledgerJournalTransPaym == ledgerJournalTransPaym.RecId
            outer join factureTrans
                where (factureTrans.FactureLineType == FactureLineType_RU::TaxCorrection
                        ||factureTrans.FactureLineType == FactureLineType_RU::Prepayment)
                    && factureTrans.InvoiceId == ledgerJournalTrans.JournalNum
                    && factureTrans.InvoiceLineNum  == ledgerJournalTrans.LineNum
                    && factureTrans.MarkupRefRecId  == ledgerJournalTrans.RecId
            outer join FactureExternalId, FactureDate_External, Module from factureJour
                where factureJour.FactureId == factureTrans.FactureId
                    && factureJour.Module == factureTrans.Module
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes;
        }

        update_recordSet correctionTax
            setting ProcessDateTime = taxTrans.CreatedDateTime
            join CreatedDateTime from taxTrans
                where taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                    && taxTrans.SourceRecId == correctionTax.ledgerJournalTransTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxFactureFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates fields without factures.
    /// </summary>
    public void updateTaxFactureFields()
    {
        FactureJour_Ru  factureJour;
        FactureTrans_RU factureTrans;
        LedgerJournalTrans ledgerJournalTrans;
        TmpFacturePrepaymentCorrection_RU correctionTax;
        correctionTax.linkPhysicalTableInstance(this);

        update_recordSet correctionTax
            setting FactureExternalId = factureJour.FactureExternalId,
                    FactureDate_External = factureJour.FactureDate_External,
                    FactureModule = factureJour.Module
            where !correctionTax.FactureExternalId
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == correctionTax.LedgerJournalTransTax
            join factureTrans
            where (factureTrans.FactureLineType == FactureLineType_RU::TaxCorrection
                    ||factureTrans.FactureLineType == FactureLineType_RU::Prepayment)
                && factureTrans.InvoiceId == ledgerJournalTrans.JournalNum
                && factureTrans.InvoiceLineNum  == ledgerJournalTrans.LineNum
                && factureTrans.MarkupRefRecId  == ledgerJournalTrans.RecId
            join FactureExternalId, FactureDate_External, Module from factureJour
            where factureJour.FactureId == factureTrans.FactureId
                && factureJour.Module == factureTrans.Module;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@Facture:TmpFacturePrepaymentCorrection_DevDoc</DeveloperDocumentation>
	<Label>@Facture:TmpFacturePrepaymentCorrection_TableTitle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurCredit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurDebit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureDate_External</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureModule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransPaym</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentTrans</Name>
			<Label>@SYS111464</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurDebit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurCredit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureDate_External</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxTrans</Name>
			<Label>@SYS23184</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurDebit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurCredit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureDate_External</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurCredit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurCredit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurDebit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FactureExternalId</Name>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
			<Label>@GLS114478</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FactureDate_External</Name>
			<ExtendedDataType>FactureDate_External_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FactureModule</Name>
			<EnumType>FactureModule_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23950</Label>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ProcessDateTime</Name>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransPaym</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransTax</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpFacturePrepaymentCorrection_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TmpFacturePrepaymentCorrection_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>