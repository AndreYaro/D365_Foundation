<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditCurrency</Name>
				<Source><![CDATA[
    boolean allowEditCurrency()
    {
        boolean  ok = true;

        if (this.isMarkupOfTypeCustVend())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeDeleteMarkupTable_IN</Name>
				<Source><![CDATA[
    private void cascadeDeleteMarkupTable_IN()
    {
        MarkupTable_IN markupTableIN;
        delete_from markupTableIN
            where markupTableIN.MarkupTable == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustAccount</Name>
				<Source><![CDATA[
    boolean  checkCustAccount()
    {
        boolean  ok = true;

        if (this.CustomerLedgerDimension)
        {
            ok = MainAccount::checkAllowPosting(this.getMainAccount(this.CustomerLedgerDimension));
        }

        if (this.CustType != MarkupType::LedgerAccount && (this.CustType != MarkupType::Item || !VendParameters::find().PostChargeAccount))
        {
            if (this.CustomerLedgerDimension)
            {
                ok = checkFailed("@SYS25165");
            }
        }
        else
        {
            if (this.CustType != MarkupType::Item || !VendParameters::find().PostChargeAccount)
            {
                if (!this.CustomerLedgerDimension)
                {
                    ok = checkFailed("@SYS25989");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustMiscCharge_BR</Name>
				<Source><![CDATA[
    public boolean checkCustMiscCharge_BR()
    {
        return (this.CustType == MarkupType::CustVend
             && this.VendType == MarkupType::LedgerAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomPaymType_RU</Name>
				<Source><![CDATA[
    boolean checkCustomPaymType_RU()
    {
        MarkupTable markupTable;
        boolean     ret = true;

        select firstonly RecId from markupTable
            where markupTable.CustomPaymType_RU == this.CustomPaymType_RU &&
                  markupTable.RecId             != this.RecId;

        if (markupTable.RecId)
        {
            ret = checkFailed(strFmt("@GLS114832", enum2str(this.CustomPaymType_RU)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustPosting</Name>
				<Source><![CDATA[
    boolean  checkCustPosting()
    {
        boolean  ok = true;

        if (!this.CustPosting && this.CustType == MarkupType::LedgerAccount)
        {
            ok = checkFailed(strFmt("@SYS26332", "@SYS22902"));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustType</Name>
				<Source><![CDATA[
    boolean  checkCustType()
    {
        boolean  ok = true;

        if (this.ModuleType == MarkupModuleType::Cust
         && this.CustType   == MarkupType::Item)
        {
            ok = checkFailed("@SYS16770");
        }

        if (this.CustType != MarkupType::LedgerAccount && (this.CustType != MarkupType::Item || !VendParameters::find().PostChargeAccount))
        {
            if (this.CustPosting)
            {
                ok = checkFailed("@SYS28495");
            }
        }

        if (this.CustType == MarkupType::Item && VendParameters::find().PostChargeAccount)
        {
            if ((this.CustPosting && !this.CustomerLedgerDimension) || (!this.CustPosting && this.CustomerLedgerDimension))
            {
                ok = checkFailed("@SYS78192");
            }
        }

        if (! ok)
        {
            this.CustPosting = LedgerPostingType::None;
        }

        // <GEERU>
        if (this.CustType != MarkupType::Item && this.CustomPaymType_RU == CustomPaymType_RU::Duty)
        {
            ok = checkFailed("@GLS114808");
        }

        if ((this.CustomPaymType_RU == CustomPaymType_RU::ChargeAdmin ||
            this.CustomPaymType_RU == CustomPaymType_RU::ChargeEscort ||
            this.CustomPaymType_RU == CustomPaymType_RU::ChargeStorage) && this.CustType != MarkupType::Item)
        {
            ok = checkFailed("@GLS114809");
        }
        // </GEERU>
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustVendPosting</Name>
				<Source><![CDATA[
    boolean checkCustVendPosting()
    {
        boolean  ok = true;

        if (this.CustType == MarkupType::LedgerAccount
         && this.VendType == MarkupType::LedgerAccount)
        {
            if (this.CustPosting == this.VendPosting
             && this.CustomerLedgerDimension == this.VendorLedgerDimension)
            {
                ok = checkFailed("@SYS24194");
            }
        }
        else
        {
            if (this.CustType == this.VendType)
            {
                ok = checkFailed("@SYS24194");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustVendType</Name>
				<Source><![CDATA[
    boolean checkCustVendType()
    {
        boolean  ok = true;

        if (this.CustType == this.VendType)
        {
            ok = this.checkCustVendPosting();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsLetterOfCredit_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>IsLetterOfCredit_SA</c> field is valid for the <c>MarkupTable</c> record.
    /// </summary>
    /// <returns>
    /// true if the <c>IsLetterOfCredit_SA</c> field is valid; otherwise, false.
    /// </returns>
    private boolean checkIsLetterOfCredit_SA()
    {
        // <GSA>
        boolean ret = true;

        if (BankLCImportChargeFeatureChecker_SA::construct().checkFeatureEnabled()
          && this.ModuleType == MarkupModuleType::Vend)
        {
            if (this.IsLetterOfCredit_SA)
            {
                if (this.CustType != MarkupType::Item)
                {
                    // The debit type of the Misc.Charge Code used by Letter of Credit Misc.Charge must be set as Item.
                    ret = checkFailed("@SYS332254");
                }
            }
            else
            {
                if (BankLCImportCharge_SA::existMarkupCode(this.MarkupCode, this.ModuleType))
                {
                    // The Misc.Charge Code is being used by Letter of Credit Misc.Charge Transaction.
                    // It could not be disabled.
                    ret = checkFailed("@SYS332253");
                }
            }
        }

        return ret;
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupClassification_BR</Name>
				<Source><![CDATA[
    boolean checkMarkupClassification_BR()
    {
        boolean ok = true;
        if (BrazilParameters::isEnabled() == false)
        {
            return true;
        }

        if (this.CustType == MarkupType::LedgerAccount
            && this.VendType == MarkupType::LedgerAccount)
        {
            if (this.MarkupClassification_BR)
            {
                ok = checkFailed("@GLS63625");
            }
        }

        if (this.ModuleType == MarkupModuleType::Cust)
        {
            if (this.CustType == MarkupType::CustVend &&
                this.VendType == MarkupType::LedgerAccount)
            {
                if (!this.MarkupClassification_BR)
                {
                    ok = checkFailed("@GLS63622");
                }
                else if (this.MarkupClassification_BR == MarkupClassification_BR::SISCOMEX)
                {
                    ok = checkFailed("@GLS63624");
                }
            }
        }

        else if (this.ModuleType == MarkupModuleType::Vend)
        {
            if ((this.CustType == MarkupType::Item && this.VendType == MarkupType::CustVend)
                || (this.CustType == MarkupType::Item && this.VendType == MarkupType::LedgerAccount))
            {
                if (!this.MarkupClassification_BR)
                {
                    ok = checkFailed("@GLS63622");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxItemGroup</Name>
				<Source><![CDATA[
    boolean  checkTaxItemGroup()
    {
        boolean  ok = true;

        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && ! this.isMarkupOfTypeCustVend()
            && this.TaxItemGroup)
        {
            return checkFailed("@GLS106737");
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled() && this.MarkupClassification_BR == MarkupClassification_BR::SISCOMEX)
        {
            return true;
        }
        // </GBR>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendAccount</Name>
				<Source><![CDATA[
    boolean checkVendAccount()
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        boolean  ok = true;

        if (this.VendorLedgerDimension)
        {
            ok = MainAccount::checkAllowPosting(this.getMainAccount(this.VendorLedgerDimension));
        }

        // <GSA>
        if (!BankLCImportChargeFeatureChecker_SA::construct().checkFeatureEnabled()
            || !this.IsLetterOfCredit_SA)
        {
        // </GSA>
            if (this.VendType != MarkupType::LedgerAccount)
            {
                if (this.VendorLedgerDimension)
                {
                    ok = checkFailed("@SYS25165");
                }
            }
            else
            {
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    if (!this.VendorLedgerDimension && !this.CustomPaymType_RU)
                    {
                        ok = checkFailed("@SYS25989");
                    }
                }
                else
                {
                    // </GEERU>
                    if (!this.VendorLedgerDimension)
                    {
                        ok = checkFailed("@SYS25989");
                    }
                // <GEERU>
                }
                // </GEERU>
            }
        // <GSA>
        }
        // </GSA>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendPosting</Name>
				<Source><![CDATA[
    boolean checkVendPosting()
    {
        boolean  ok = true;

        if (!this.VendPosting && this.VendType == MarkupType::LedgerAccount)
        {
            ok = checkFailed(strFmt("@SYS26332", "@SYS22903"));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendType</Name>
				<Source><![CDATA[
    boolean checkVendType()
    {
        boolean  ok = true;

        if (this.VendType == MarkupType::Item)
        {
            ok = checkFailed("@SYS16770");
        }

        if (this.VendType != MarkupType::LedgerAccount && this.VendPosting)
        {
            ok = checkFailed("@SYS28496");
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (this.ModuleType == MarkupModuleType::Cust
             && this.VendType == MarkupType::CustVend)
            {
                ok = checkFailed("@GLS63626");
            }
        }
        // </GBR>

        if (! ok)
        {
            this.VendPosting = LedgerPostingType::None;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays axapta module converting from charges module.
    /// </summary>
    /// <returns>
    /// The axapta module.
    /// </returns>
    display ModuleAxapta custVendType_IN()
    {
        ModuleAxapta    moduleAxapta;

        switch (this.ModuleType)
        {
            case MarkupModuleType::Cust:
                moduleAxapta = ModuleAxapta::Customer;
                break;
            case MarkupModuleType::Vend:
                moduleAxapta = ModuleAxapta::Vendor;
                break;
        }

        return moduleAxapta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>MarkupTable</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, unprocessed entries are removed from the distribution list.
    /// </remarks>
    public void delete()
    {
        // <GIN>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.cascadeDeleteMarkupTable_IN();
        }
        // </GIN>
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUseInMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the <see cref="M:MarkupTable.useInMatching" /> field.
    /// </summary>
    /// <param name="_set">
    /// A Boolean that returns true if the value is to be modified; otherwise, false.
    /// </param>
    /// <param name="_useInMatching">
    /// The new value of the field.
    /// </param>
    /// <returns>
    /// The value of the use in matching field.
    /// </returns>
    edit public MarkupUseInMatching editUseInMatching(boolean _set, MarkupUseInMatching _useInMatching)
    {
        if (this.isMarkupOfTypeCustVend() && _set)
        {
            this.UseInMatching = _useInMatching;
        }
        return this.useInMatching();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccount</Name>
				<Source><![CDATA[
    public MainAccountNum getMainAccount(DimensionDynamicDefaultAccount _ledgerDimension)
    {
        RecId                               mainAcctDimAttrId;
        DimensionAttributeLevelValueView    dimAttrLevelValueView;

        if (!this.CustomerLedgerDimension
          || this.CustType != MarkupType::LedgerAccount)
        {
            return '';
        }

        mainAcctDimAttrId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        select firstonly DisplayValue from dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == _ledgerDimension
               && dimAttrLevelValueView.DimensionAttribute == mainAcctDimAttrId;

        return dimAttrLevelValueView.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.CustType = MarkupType::LedgerAccount;
        this.VendType = MarkupType::LedgerAccount;

        this.UseInMatching = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupOfTypeCustVend</Name>
				<Source><![CDATA[
    boolean  isMarkupOfTypeCustVend()
    {
        return (this.CustType == MarkupType::CustVend
             || this.VendType == MarkupType::CustVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupOfTypeItemLedger</Name>
				<Source><![CDATA[
    public boolean isMarkupOfTypeItemLedger()
    {
        return ((this.CustType == MarkupType::Item
              && this.VendType == MarkupType::LedgerAccount)
              || (this.CustType == MarkupType::LedgerAccount
                 && this.VendType == MarkupType::Item));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTypeCustVend_W</Name>
				<Source><![CDATA[
    boolean  markupTypeCustVend_W()
    {
        return (this.CustType == MarkupType::CustVend
             && this.VendType == MarkupType::LedgerAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTypeItem</Name>
				<Source><![CDATA[
    boolean  markupTypeItem()
    {
        return (this.CustType == MarkupType::Item
             || this.VendType == MarkupType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes modifications when a field is modified.
    /// </summary>
    /// <param name="_fieldName">
    /// A string that contains the field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// An integer that contains the array index that applies only if the field has array elements.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(MarkupTable, CustType):
                // <GSA>
                if (BankLCImportChargeFeatureChecker_SA::construct().checkFeatureEnabled()
                    && this.CustType != MarkupType::Item)
                {
                    this.IsLetterOfCredit_SA = NoYes::No;
                }
                // </GSA>
                break;
            // <GSA>
            case fieldStr(MarkupTable, IsLetterOfCredit_SA):

                if (this.ModuleType == MarkupModuleType::Vend
                    && this.IsLetterOfCredit_SA == NoYes::Yes)
                {
                    this.VendType = MarkupType::LedgerAccount;
                    this.VendPosting = LedgerPostingType::LedgerJournal;
                    this.VendorLedgerDimension = 0;
                }
                break;
            // </GSA>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needChargeIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sales Issue and Sales Consuption ledger entries creation criteria
    /// </summary>
    /// <returns>
    /// True if Sales Issue and Sales Consuption ledger entries should be created during misc. charge posting, otherwise - False
    /// </returns>
    public boolean needChargeIssue()
    {
        boolean ret;

        ret = this.ModuleType  == MarkupModuleType::Cust  &&
              (( this.VendType == MarkupType::LedgerAccount   &&
                 this.CustType == MarkupType::CustVend   )    ||
               ( this.VendType == MarkupType::CustVend        &&
                 this.CustType == MarkupType::LedgerAccount)) &&
              TaxParameters::find().TaxSpecPosting_RU;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicDefaultAccount parmCustomerLedgerDimension(DimensionDynamicDefaultAccount _ledgerDimension = this.CustomerLedgerDimension)
    {
        this.CustomerLedgerDimension = _ledgerDimension;
        return this.CustomerLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicDefaultAccount parmVendorLedgerDimension(DimensionDynamicDefaultAccount _ledgerDimension = this.VendorLedgerDimension)
    {
        this.VendorLedgerDimension = _ledgerDimension;
        return this.VendorLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <see cref="T:MarkupTable" /> record can participate in transaction matching.
    /// </summary>
    /// <returns>
    /// true if the current record can participate in transaction matching; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The determination is based on the purchasing company <paramref name="useInvoiceMatching" />
    /// parameter method and the value of the <c>UseInMatching</c> field in the <see cref="T:MarkupTable"
    /// />.
    /// </remarks>
    public MarkupUseInMatching useInMatching()
    {
        return this.UseInMatching && this.isMarkupOfTypeCustVend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInMatchingIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the <c>MarkupTable</c> record can participate in transaction matching.
    /// </summary>
    /// <returns>
    /// The OK icon if the current record can participate in transaction matching; otherwise, an empty icon.
    /// </returns>
    public display ImageRes useInMatchingIcon()
    {
        #resAppl
        ImageRes icon;

        if (this.useInMatching())
        {
            icon = #imageOK;
        }

        return icon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        // <GSA>
        if (ret)
        {
            if (BankLCImportChargeFeatureChecker_SA::construct().checkFeatureEnabled())
            {
                if (BankLCImportCharge_SA::existMarkupCode(this.MarkupCode, this.ModuleType))
                {
                    // The Misc.Charge Code is being used by Letter of Credit Misc.Charge Transaction.
                    // It could not be disabled.
                    ret = checkFailed("@SYS332253");
                }
            }
        }
        // </GSA>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean  validateField(FieldId _fieldId)
    {
        boolean  ok;

        ok = super(_fieldId);

        switch (_fieldId)
        {
            case(fieldNum(MarkupTable, CustomerLedgerDimension)):
                ok = ok && this.checkCustAccount();
                break;
            case(fieldNum(MarkupTable, VendorLedgerDimension)):
                ok = ok && this.checkVendAccount();
                break;
            case(fieldNum(MarkupTable, CustType)):
                ok = ok && this.checkCustType();
                break;
            case(fieldNum(MarkupTable, VendType)):
                ok = ok && this.checkVendType();
                break;
            case(fieldNum(MarkupTable, CustPosting)):
                ok = ok && this.checkCustPosting();
                break;
            case(fieldNum(MarkupTable, VendPosting)):
                ok = ok && this.checkVendPosting();
                break;
            case(fieldNum(MarkupTable, TaxItemGroup)):
                ok = ok && this.checkTaxItemGroup();
                break;
            // <GSA>
            case(fieldNum(MarkupTable, IsLetterOfCredit_SA)):
                ok = ok && this.checkIsLetterOfCredit_SA();
                break;
            // </GSA>
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    boolean  validateWrite()
    {
        boolean ok = true;

        // <GEERU>
        #ISOCountryRegionCodes
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        ok = super();

        if (!this.checkCustAccount()        ||
            !this.checkVendAccount()        ||
            !this.checkCustVendType()       ||
            !this.checkCustType()           ||
            !this.checkVendType()           ||
            !this.checkCustVendPosting()    ||
            !this.checkCustPosting()        ||
            !this.checkVendPosting()        ||
            // <GEERU><GBR><GSA>
            !this.checkIsLetterOfCredit_SA()
            // </GEERU></GBR></GSA>
            // <GBR>
            || !this.checkMarkupClassification_BR()
            // </GBR>
            // <GEERU>
            || (countryRegion_RU               &&
                ! this.checkTaxItemGroup()))
            // </GEERU>
        {
            ok = false;
        }

        if (this.MaxAmount < 0)
        {
            ok = checkFailed("@SYS134345");
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (this.ModuleType == MarkupModuleType::Invent)
            {
                if (this.CustType != MarkupType::Item)
                {
                    ok = checkFailed("@GLS113923");
                }
                if (this.VendType != MarkupType::LedgerAccount)
                {
                    ok = checkFailed("@GLS113924");
                }
            }

            if (this.CustomPaymType_RU != CustomPaymType_RU::Empty)
            {
                ok = ok && this.checkCustomPaymType_RU();
            }
        }
        // </GEERU>

        if (this.VendType == MarkupType::LedgerAccount
         && this.CustType == MarkupType::Item
         && this.TaxItemGroup)
        {
            ok = checkFailed("@SYS26238");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    // The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum.
    static boolean checkExist(MarkupModuleType _module, MarkupCode _markupCode)
    {
        if (_markupCode && !MarkupTable::exist(_module, _markupCode))
        {
            return checkFailed(strFmt(MarkupTable::txtNotExist(), _markupCode));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a markup with the specified code and module type exists.
    /// </summary>
    /// <param name="module">
    /// Module type to check.
    /// </param>
    /// <param name="markupCode">
    /// Markup code to check.
    /// </param>
    /// <returns>
    /// true if the markup exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum.
    /// </remarks>
    static boolean exist(MarkupModuleType _module, MarkupCode _markupCode)
    {
        if (_markupCode)
        {
            return (select firstonly RecId from markupTable
                        index hint ModuleCodeIdx
                        where markupTable.ModuleType    == _module  &&
                              markupTable.MarkupCode    == _markupCode
                   ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static MarkupTable find(MarkupModule _markupModule,
                            MarkupCode   _markupCode,
                            boolean      _forUpdate = false)
    {
        MarkupTable  markupTable;

        if (_markupCode)
        {
            markupTable.selectForUpdate(_forUpdate);

            select firstonly markupTable
                index hint ModuleCodeIdx
                where markupTable.ModuleType == _markupModule
                   && markupTable.MarkupCode == _markupCode;
        }

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustomPaymType_RU</Name>
				<Source><![CDATA[
    static MarkupTable findByCustomPaymType_RU(CustomPaymType_RU _customPaymType, boolean _forUpdate = false)
    {
        MarkupTable markupTable;

        if (_customPaymType != CustomPaymType_RU::Empty)
        {
            markupTable.selectForUpdate(_forUpdate);

            select firstonly markupTable
                where markupTable.CustomPaymType_RU == _customPaymType;
        }

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static MarkupTable findRecId(RecId _recId, boolean _update = false)
    {
        MarkupTable  markupTable;

        if (_recId)
        {
            markupTable.selectForUpdate(_update);

            select firstonly markupTable
                where markupTable.RecId == _recId;
        }

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMarkupAllocationCode</Name>
				<Source><![CDATA[
    static void lookupMarkupAllocationCode(FormStringControl   _ctrl,
                                                  MarkupCode            _markupCode,
                                                  MarkupModuleType      _module_RU = MarkupModuleType::Vend)
    {
        Args        args;
        Object      formRun;

        args = new Args();
        args.name(formStr(MarkupAllocationCodeLookup));
        args.caller(_ctrl);
        args.lookupField(fieldNum(MarkupTable, MarkupCode ));
        args.lookupValue(_ctrl.text());
        // <GEERU>        
        args.parmEnumeration(_module_RU);
        // </GEERU>

        formRun = classfactory.formRunClass(args);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupSalesCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup selection for the <c>MarkupTable</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The control for which lookup is performed.
    /// </param>
    /// <remarks>
    /// When coming from sales orders, only show markup
    ///  codes that are not marked as return
    /// </remarks>
    public static void mcrLookupSalesCodes(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        sysTableLookup = SysTableLookup::newParameters(tableNum(MarkupTable),
                                                       _formControl);
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, MarkupCode));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, Txt));

        qbds = query.addDataSource(tableNum(MarkupTable));
        qbds.addRange(fieldNum(MarkupTable, ModuleType))
            .value(SysQuery::value(enum2str(ModuleInventCustVend::Cust)));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceMarkupCodeLookup_RU</Name>
				<Source><![CDATA[
    public static void serviceMarkupCodeLookup_RU(FormStringControl _formStringControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        _formStringControl.hasChanged(false);

        sysTableLookup = SysTableLookup::newParameters(tableNum(MarkupTable), _formStringControl);

        qbds = query.addDataSource(tableNum(MarkupTable));
        qbds.addRange(fieldNum(MarkupTable, MarkupCode));
        qbds.addRange(fieldNum(MarkupTable, CustType)).value(SysQuery::value(MarkupType::LedgerAccount));
        qbds.addRange(fieldNum(MarkupTable, VendType)).value(SysQuery::value(MarkupType::CustVend));
        qbds.addRange(fieldNum(MarkupTable, ModuleType)).value(SysQuery::value(ModuleInventCustVend::Vend));

        sysTableLookup.addLookupfield(fieldNum(MarkupTable, MarkupCode));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, Txt));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist  txtNotExist()
    {
        return "@SYS3641";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupOfTypeLedgerLedger</Name>
				<Source><![CDATA[
    public boolean isMarkupOfTypeLedgerLedger()
    {
        return this.CustType ==  MarkupType::LedgerAccount
            && this.VendType ==  MarkupType::LedgerAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<DeveloperDocumentation>@SYS124471</DeveloperDocumentation>
	<FormRef>MarkupTable</FormRef>
	<Label>@SYS13015</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>MarkupCode</TitleField1>
	<TitleField2>Txt</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ModuleCodeIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>ModuleCodeIdx</PrimaryIndex>
	<ReplacementKey>ModuleCodeIdx</ReplacementKey>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LanguageTxt</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LanguageTxt</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupAutoLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>MarkupAutoLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTolerance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTolerance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseInMatching</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRBrokerContractFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRProRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCImportCharge_SA</Name>
			<Label>@SYS332252</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsLetterOfCredit_SA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Classification_BR</Name>
			<Label>@GLS155</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupClassification_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Credit</Name>
			<Label>@sys7084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Custom_RU</Name>
			<Label>@GLS114776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomPaymType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Debit</Name>
			<Label>@SYS9512</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseCustPostingTypeTransit_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentMatching</Name>
			<Label>@SYS25194</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseInMatching</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeIntoIntrastatInvoiceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeIntoIntrastatStatisticalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarkupCode</Name>
			<Label>@RET261016</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MaximumAmount</Name>
			<Label>@SYS134341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transit_RU</Name>
			<Label>@SYS78233</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseCustPostingTypeTransit_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATProductCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATUnitCode_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxRateTypeGroup</Name>
			<Label>@TaxInfoManagement:TaxRateType</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<GroupPrompt>@SYS24500</GroupPrompt>
			<Label>@SYS15996</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomPaymType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustomPaymType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustPosting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS12919</GroupPrompt>
			<Label>@SYS22902</Label>
			<EnumType>LedgerPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS1201</GroupPrompt>
			<Label>@SYS22901</Label>
			<EnumType>MarkupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DEL_Intrastat_FI</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatMarkup_FI</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsLetterOfCredit_SA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportIsLCChargeCode_SA</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupClassification_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MarkupClassification_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS134341</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRBrokerContractFee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>TradeBroker</ConfigurationKey>
			<Label>@MCR33932</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRProRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR11445</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCustPostingTypeTransit_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@GLS114783</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseInMatching</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupUseInMatching</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<GroupPrompt>@SYS24500</GroupPrompt>
			<Label>@SYS3965</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendPosting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS12919</GroupPrompt>
			<Label>@SYS22903</Label>
			<EnumType>LedgerPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS1201</GroupPrompt>
			<Label>@SYS23988</Label>
			<EnumType>MarkupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeIntoIntrastatInvoiceValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<Label>@Intrastat:IntrastatInvoiceValue</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeIntoIntrastatStatisticalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<Label>@Intrastat:IntrastatStatisticalValue</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATProductCode_MX</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>SATProductCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATUnitCode_MX</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>SATUnitCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsShipping</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAutoChargeIsShippingCharge</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Refundable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAutoChargeRefundable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRateType</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@TaxInfoManagement:TaxRateType</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ModuleCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarkupCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankLCImportIsForLC_SAIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>BankDocument</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IsLetterOfCredit_SA</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomPaymType_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomPaymType_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_MarkupTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerLedgerDimension</Name>
					<Field>CustomerLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendorLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_1_MarkupTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorLedgerDimension</Name>
					<Field>VendorLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATProductCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeProductCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATProductCode_MX</Name>
					<Field>SATProductCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATUnitCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTableUnitCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATUnitCode_MX</Name>
					<Field>SATUnitCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRateType</Name>
					<Field>TaxRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>