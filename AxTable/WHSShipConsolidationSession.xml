<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationSession</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSShipConsolidationSession extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the shipment consolidation session data.
    /// </summary>
    /// <param name="_sessionId">
    /// The record ID of the shipment consolidation session.
    /// </param>
    internal static void cleanUpSession(WHSShipConsolidationSessionRecId _sessionId)
    {
        WHSShipConsolidationSession                 shipConsolidationSession;
        WHSShipConsolidationProposedShipment        shipConsolidationProposedShipment;
        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
        WHSShipConsolidationError                   shipConsolidationError;
        SysClientSessions                           clientSession;

        ttsBegin;

        shipConsolidationError.skipDeleteActions(true);
        shipConsolidationProposedShipmentContent.skipDeleteActions(true);
        shipConsolidationProposedShipment.skipDeleteActions(true);
        shipConsolidationSession.skipDeleteActions(true);

        delete_from shipConsolidationSession where shipConsolidationSession.RecId == _sessionId;

        delete_from shipConsolidationSession
            where shipConsolidationSession.ClientSessionId
            &&    shipConsolidationSession.ClientSessionLoginDateTime
        notexists join clientSession
            where clientSession.SessionId     == shipConsolidationSession.ClientSessionId
            &&    clientSession.LoginDateTime == shipConsolidationSession.ClientSessionLoginDateTime
            &&    clientSession.Status         > SessionStatus::Inactive;

        delete_from shipConsolidationError
        notexists join shipConsolidationSession
            where shipConsolidationSession.RecId == shipConsolidationError.ShipConsolidationSession;

        delete_from shipConsolidationProposedShipmentContent
        notexists join shipConsolidationSession
            where shipConsolidationSession.RecId == shipConsolidationProposedShipmentContent.ShipConsolidationSession;

        delete_from shipConsolidationProposedShipment
        notexists join shipConsolidationSession
            where shipConsolidationSession.RecId == shipConsolidationProposedShipment.ShipConsolidationSession;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>WHSShipConsolidationSession</c> table exists.
    /// </summary>
    /// <param name="_sessionId">
    /// The record ID of the <c>WHSShipConsolidationSession</c> table.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(WHSShipConsolidationSessionRecId _sessionId)
    {
        WHSShipConsolidationSession shipConsolidationSession;

        if (_sessionId)
        {
            select firstonly RecId from shipConsolidationSession
                where shipConsolidationSession.RecId == _sessionId;
        }

        return (shipConsolidationSession.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSShipConsolidationSession</c> table.
    /// </summary>
    /// <param name="_sessionId">
    /// The record ID of the <c>WHSShipConsolidationSession</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSShipConsolidationSession</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSShipConsolidationSession find(
        WHSShipConsolidationSessionRecId _sessionId,
        boolean                          _forUpdate = false)
    {
        WHSShipConsolidationSession shipConsolidationSession;

        if (_sessionId)
        {
            shipConsolidationSession.selectForUpdate(_forUpdate);

            select firstonly shipConsolidationSession
                where shipConsolidationSession.RecId == _sessionId;
        }

        return shipConsolidationSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initClientSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes client session related fields.
    /// </summary>
    /// <param name = "_clientSessionId">Client session id.</param>
    internal void initClientSession(SessionId _clientSessionId)
    {
        Session session = new Session(_clientSessionId);

        this.ClientSessionId            = session.sessionId();
        this.ClientSessionLoginDateTime = session.loginDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Table_WHSShipConsolidationSession_DeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:ShipmentConsolidationSession</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>SessionState</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SessionState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClientSessionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClientSessionLoginDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ClientSessionId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SessionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ClientSessionLoginDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SessionLoginDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SessionState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSShipConsolidationSessionState</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>