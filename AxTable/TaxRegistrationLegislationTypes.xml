<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistrationLegislationTypes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistrationLegislationTypes extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the country region ID of the tax registration types rule.
    /// </summary>
    /// <returns>
    /// The country or region ID.
    /// </returns>
    public display LogisticsAddressCountryRegionId countryRegionId()
    {
        return TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTypeRestriction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the restriction type of the tax registration types rule.
    /// </summary>
    /// <returns>
    /// The restriction type of the tax registration type.
    /// </returns>
    public display PartyTypeRestriction partyTypeRestriction()
    {
        return TaxRegistrationTypeApplicabilityRule::find(this.TaxRegistrationTypeApplicabilityRule).PartyTypeRestriction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
            TaxRegistrationTypeApplicabilityRule rule;
            TaxRegistrationTypeApplicabilityRule ruleCurrent;

            select firstOnly RecId from taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypesList == this.TaxRegistrationTypesList
                    && taxRegistrationLegislationTypes.RecId != this.RecId
                exists join rule
                    where rule.RecId == taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule
                exists join ruleCurrent
                    where ruleCurrent.RecId == this.TaxRegistrationTypeApplicabilityRule
                        && rule.TaxRegistrationType == ruleCurrent.TaxRegistrationType 
                        && rule.CountryRegionId == ruleCurrent.CountryRegionId;

            if (taxRegistrationLegislationTypes.RecId)
            {
                ret = checkFailed("@RegistrationNumbers:SameRegTypeAndCountryRegionCodeForRegCategoryExists");
            }

            if (this.RecId && !Global::bufCmp(this, this.orig()))
            {
                TaxRegistration taxRegistration;

                select firstOnly RecId from taxRegistration
                    where taxRegistration.TaxRegistrationTypeApplicabilityRule == this.orig().TaxRegistrationTypeApplicabilityRule;

                if (taxRegistration.RecId)
                {
                    ret = checkFailed("@RegistrationNumbers:TheRegistrationRuleIsUsedForRegistrationRule");
                }
            }

            if (ret && !this.RecId)
            {
                select firstOnly RecId from taxRegistrationLegislationTypes
                    where taxRegistrationLegislationTypes.TaxRegistrationTypesList == this.TaxRegistrationTypesList
                exists join rule
                    where rule.RecId == taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule
                exists join ruleCurrent
                    where ruleCurrent.RecId == this.TaxRegistrationTypeApplicabilityRule
                        && ruleCurrent.CountryRegionId == rule.CountryRegionId
                        && ruleCurrent.PartyTypeRestriction == rule.PartyTypeRestriction;

                if (taxRegistrationLegislationTypes.RecId)
                {
                    warning("@RegistrationNumbers:SameCountryRegionCodeForRegCategoryExists");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxRegistrationTypeAppRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxRegistrationLegislationTypes</c> table.
    /// </summary>
    /// <param name="_taxRegistrationTypeId">
    ///    The record ID of the <c>TaxRegistrationTypeApplicabilityRule</c> record to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxRegistrationLegislationTypes</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxRegistrationLegislationTypes findByTaxRegistrationTypeAppRule(TaxRegistrationTypeId _taxRegistrationTypeId)
    {
        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;

        select firstOnly taxRegistrationLegislationTypes
            where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == _taxRegistrationTypeId;

        return taxRegistrationLegislationTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationTypeApplicabilityRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>TaxRegistrationLegislationTypes</c> table suitable to given parameters.
    /// </summary>
    /// <param name="_taxRegistrationTypesList">
    ///    The legislative types value.
    /// </param>
    /// <param name="_dirPartyBaseType">
    ///    The type of party.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxRegistrationLegislationTypes</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxRegistrationLegislationTypes getTaxRegistrationTypeApplicabilityRule(
        TaxRegistrationTypesList _taxRegistrationTypesList,
        DirPartyBaseType _dirPartyBaseType,
        LogisticsAddressCountryRegionId _countryRegionId = CompanyInfo::find().postalAddress().CountryRegionId)
    {
        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
        TaxRegistrationTypeApplicabilityRule rule;

        void getFromPartyTypeCountry(
            PartyTypeRestriction _partyTypeRestriction,
            LogisticsAddressCountryRegionId _countryRegionFilter = '')
        {
            select firstOnly taxRegistrationLegislationTypes
                where TaxRegistrationLegislationTypes.TaxRegistrationTypesList == _taxRegistrationTypesList
            exists join rule
                where rule.RecId == taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule
                    && rule.PartyTypeRestriction == _partyTypeRestriction
                    && (!_countryRegionFilter || rule.CountryRegionId == _countryRegionFilter);
        }

        void getFromPartyType(PartyTypeRestriction _partyTypeRestriction)
        {
            getFromPartyTypeCountry(_partyTypeRestriction, _countryRegionId);

            // to preserve original behaviour: for non-TAXID types we can attempt to search without country/region filter
            if (!taxRegistrationLegislationTypes && _taxRegistrationTypesList != TaxRegistrationTypesList::TAXID)
            {
                getFromPartyTypeCountry(_partyTypeRestriction);
            }
        }

        getFromPartyType(_dirPartyBaseType == DirPartyBaseType::Organization ? PartyTypeRestriction::Organization : PartyTypeRestriction::Person);
        if (!taxRegistrationLegislationTypes)
        {
            getFromPartyType(PartyTypeRestriction::None);
        }

        return taxRegistrationLegislationTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicabilityRulesSetMatchingRegistrationTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds set of applicability rules suitable to given parameters.
    /// </summary>
    /// <param name = "_taxRegistrationTypesList"> Registration category.</param>
    /// <param name = "_partyTypeRestriction"> Restriction type.</param>
    /// <param name = "_countryRegionId"></param>
    /// <returns> Returns the set of applicability rule references; otherwise, an empty set.</returns>
    [Hookable(false)]
    internal static Set getApplicabilityRulesSetMatchingRegistrationTypes(
        TaxRegistrationTypesList _taxRegistrationTypesList,
        PartyTypeRestriction _partyTypeRestriction,
        LogisticsAddressCountryRegionId _countryRegionId = CompanyInfo::find().postalAddress().CountryRegionId)
    {
        Set typesSet = new Set(Types::Int64);

        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
        TaxRegistrationTypeApplicabilityRule rule;

        while select TaxRegistrationTypeApplicabilityRule from taxRegistrationLegislationTypes
            where TaxRegistrationLegislationTypes.TaxRegistrationTypesList == _taxRegistrationTypesList
        exists join rule
            where rule.RecId == taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule
                && rule.PartyTypeRestriction == _partyTypeRestriction
                && (!_countryRegionId || rule.CountryRegionId == _countryRegionId)
        {
            typesSet.add(taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule);
        }

        return typesSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@RegistrationNumbers:TaxRegistrationLegislationTypesTableDevDoc</DeveloperDocumentation>
	<Label>@RegistrationNumbers:RegistrationCategories</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>TaxRegistrationTypesList</TitleField1>
	<TitleField2>TaxRegistrationTypeApplicabilityRule</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxRegistrationTypesList</ClusteredIndex>
	<Modules>Tax</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypesList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypesList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Main</Name>
			<Label>@GLS223688</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypesList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRegistrationTypeApplicabilityRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxRegistrationTypesList</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxRegistrationTypesList</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxRegistrationTypesList</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationTypesList</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxRegistrationTypeApplicabilityRuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistrationTypeApplicabilityRule</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxRegistrationTypeApplicabilityRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationTypeApplicabilityRule</Name>
					<Field>TaxRegistrationTypeApplicabilityRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>