<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOperationTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGOperationTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLedgerOperation</Name>
				<Source><![CDATA[
    private boolean checkLedgerOperation()
    {
        boolean bRet = true;

        switch (this.DataType)
        {
            case LedgerRRGDataType_RU::Trans :
            case LedgerRRGDataType_RU::DimFocusBalance :
    
                if (this.LedgerOperation == LedgerRRGOperationType_RU::None)
                {
                    error(strFmt("@LedgerRRG:LedgerRRG_FillInField", fieldPName(LedgerRRGOperationTable_RU, LedgerOperation)));
                    bRet = false;
                }
    
                break;
    
            default :
                bRet = true;
        }
    
        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataOperation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit TempStr dataOperation(boolean _set, TempStr _newValue)
    {
        TempStr         strRet;

        if (_set && this.DataType == LedgerRRGDataType_RU::Constant)
        {
            if (str2NumOk_RU(_newValue))
            {
                this.ConstantValue  = str2num_RU(_newValue);
                this.ConstantText   = this.formatNumInAccordanceWithAmout();
            }
            else
            {
                this.ConstantValue  = 0;
                this.ConstantText   = _newValue;
            }

            strRet = this.ConstantText;
        }
        else
        {
            switch (this.DataType)
            {
                case LedgerRRGDataType_RU::Constant :
                    strRet = this.ConstantText;
                    break;

                default :
                    strRet = "";
            }
        }

        return strRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOperation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGOperationTypeText_RU editOperation(boolean                          _set,
                                                     LedgerRRGOperationTypeText_RU    _operationTypeText)
    {
        SysDictEnum dictEnum = new SysDictEnum(enumNum(LedgerRRGOperationType_RU));
        int         i;

        if (_set)
        {
            for (i = 0; i < dictEnum.values(); i++)
            {
                if (dictEnum.index2Label(i) == _operationTypeText)
                {
                    this.LedgerOperation = dictEnum.index2Value(i);
                    break;
                }
            }
        }

        return dictEnum.value2Label(this.LedgerOperation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientDecimalSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the decimal separator for a client computer from the regional settings.
    /// </summary>
    /// <returns>
    ///    The decimal separator.
    /// </returns>
 
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getClientDecimalSeparator()
    {
        System.Globalization.NumberFormatInfo format = System.Globalization.CultureInfo::CurrentUICulture.NumberFormat;
        return format.NumberDecimalSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientGroupSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the group (thousand) separator for a client computer from the regional settings.
    /// </summary>
    /// <returns>
    /// The group (thousand) separator.
    /// </returns>
    internal static str getClientGroupSeparator()
    {
        System.Globalization.NumberFormatInfo format = System.Globalization.CultureInfo::CurrentUICulture.NumberFormat;
        return format.NumberGroupSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumInAccordanceWithAmout</Name>
				<Source><![CDATA[
    private TempStr formatNumInAccordanceWithAmout()
    {
        const str		 Comma	                = ',';
        const str		Point	                = '.';
        const str		Space	                = ' ';
        const int		CommaValue				= 2;
        const int		PointValue				= 1;
        const int		SpaceValue				= 3;
        const int		NoOfDecimalsDefault		= 2;
        SysDictType     sysDictType;
        int             separator1, separator2;
        int             noOfDecimals;

        sysDictType = new SysDictType(extendedTypeNum(Amount));
        separator1  = (LedgerRRGOperationTable_RU::getClientDecimalSeparator() == Comma) ? CommaValue : PointValue;

        switch (LedgerRRGOperationTable_RU::getClientGroupSeparator())
        {
            case Point:
                separator2 = PointValue;
                break;

            case Comma:
                separator2 = CommaValue;
                break;

            case Space:
                separator2 = SpaceValue;
                break;

            default :
                separator2 = 0;
        }

        noOfDecimals = sysDictType.noOfDecimals();
        return  num2str(this.ConstantValue, 1, (noOfDecimals == 0) ? NoOfDecimalsDefault : noOfDecimals, separator1, separator2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysQueryRun getSysQueryRun(FromDate              _fromDate       = dateNull(),
                                      ToDate                _toDate         = dateNull(),
                                      ReportCalcMethod_RU   _calcMethod     = ReportCalcMethod_RU::AccountingDate,
                                      TransDate             _reportOnDate   = dateNull())
    {
        SysQueryRun             sysQueryRun;
        Query                   query;
        QueryBuildDataSource    ds;
        QueryBuildDataSource    dsTransLink;
        QueryBuildRange         qbr;
        FieldName               fieldName;
        str                     ReportingDateValue	= '(((\%1.' + fieldName + ' >= \%3) && (\%1.' + fieldName + ' <= \%4)) || ((\%2.ReportingDate >= \%3) && (\%2.ReportingDate <= \%4)))';
        str                     AccountingDateValue	= '(((\%1.' + fieldName + ' >= \%3) && (\%1.' + fieldName + ' <= \%4)) || ((\%2.AccountingDate >= \%3) && (\%2.AccountingDate <= \%4)))';
    
        if (this.Query != conNull())
        {
            query        = new Query(this.Query);
    
            if (this.QueryBaseDateField)
            {
                ds  = query.dataSourceName(LedgerRRGQuery::getBaseDateFieldDsName());
    
                if ( ! this.QuerySelectReportDate ||
                    (_calcMethod == ReportCalcMethod_RU::AccountingDate  && ds.table() == tableNum(GeneralJournalEntry)) ||
                    (_calcMethod == ReportCalcMethod_RU::ReportingDate  && (ds.table() == tableNum(AssetTrans) || ds.table() == tableNum(RDeferralsTrans))))
                {
                    qbr = ds.findRange(this.QueryBaseDateField);
                    qbr.status(RangeStatus::Locked);
    
                    if ((_fromDate != dateNull()) || (_toDate != dateNull()))
                    {
                        if (_reportOnDate)
                        {
                            _toDate = min(_reportOnDate, _toDate);
                        }
    
                        qbr.value(queryRange(_fromDate, _toDate));
                    }
                }
                else if (_calcMethod == ReportCalcMethod_RU::AccountingDate && (ds.table() == tableNum(AssetTrans) || ds.table() == tableNum(RDeferralsTrans)))
                {
                    dsTransLink = ds.addDataSource(tableNum(TransLink_RU));
                    dsTransLink.joinMode(JoinMode::OuterJoin);
                    dsTransLink.fetchMode(QueryFetchMode::One2One);
                    dsTransLink.addLink(fieldName2Id(ds.table(), identifierStr(TableId)), fieldNum(TransLink_RU, RefTableId));
                    dsTransLink.addLink(fieldName2Id(ds.table(), identifierStr(RecId)),   fieldNum(TransLink_RU, RefSec));
    
                    qbr = ds.addRange(fieldName2Id(ds.table(), identifierStr(TableId)));
                    qbr.status(RangeStatus::Hidden);
    
                    fieldName = fieldId2Name(ds.table(), fieldExt2Id(this.QueryBaseDateField));
                    qbr.value(strfmt(AccountingDateValue,
                                     ds.name(),
                                     dsTransLink.name(),
                                     date2StrXpp(_fromDate),
                                     date2StrXpp(_toDate ? _toDate : maxdate())));
    
                    dsTransLink = ds.addDataSource(tableNum(TransLink_RU));
                    dsTransLink.joinMode(JoinMode::NoExistsJoin);
                    dsTransLink.fetchMode(QueryFetchMode::One2One);
                    dsTransLink.addLink(fieldName2Id(ds.table(), identifierStr(TableId)), fieldNum(TransLink_RU, RefTableId));
                    dsTransLink.addLink(fieldName2Id(ds.table(), identifierStr(RecId)),   fieldNum(TransLink_RU, RefSec));
    
                    dsTransLink.addRange(fieldNum(TransLink_RU, AccountingDate)).value(strFmt('<%1', _fromDate));
                    dsTransLink.addRange(fieldNum(TransLink_RU, AccountingDate)).value(strFmt('>%1', _toDate ? _toDate : maxdate()));
                }
                else if (_calcMethod == ReportCalcMethod_RU::ReportingDate && ds.table() == tableNum(GeneralJournalEntry))
                {
                    dsTransLink = ds.addDataSource(tableNum(LedgerVoucherReportDate_RU));
                    dsTransLink.joinMode(JoinMode::OuterJoin);
                    dsTransLink.fetchMode(QueryFetchMode::One2One);
                    dsTransLink.addLink(fieldNum(GeneralJournalEntry, SubledgerVoucher),fieldNum(LedgerVoucherReportDate_RU, Voucher));
                    dsTransLink.addLink(fieldNum(GeneralJournalEntry, AccountingDate),  fieldNum(LedgerVoucherReportDate_RU, AccountingDate));
    
                    qbr = ds.addRange(fieldNum(GeneralJournalEntry, TableId));
                    qbr.status(RangeStatus::Hidden);
    
                    fieldName = fieldId2Name(ds.table(), fieldExt2Id(this.QueryBaseDateField));
                    qbr.value(strfmt(ReportingDateValue,
                                     ds.name(),
                                     dsTransLink.name(),
                                     date2StrXpp(_fromDate),
                                     date2StrXpp(_toDate ? _toDate : maxdate())));
    
                    dsTransLink = ds.addDataSource(tableNum(LedgerVoucherReportDate_RU));
                    dsTransLink.joinMode(JoinMode::NoExistsJoin);
                    dsTransLink.fetchMode(QueryFetchMode::One2One);
                    dsTransLink.addLink(fieldNum(GeneralJournalEntry, SubledgerVoucher),fieldNum(LedgerVoucherReportDate_RU, Voucher));
                    dsTransLink.addLink(fieldNum(GeneralJournalEntry, AccountingDate),  fieldNum(LedgerVoucherReportDate_RU, AccountingDate));
    
                    dsTransLink.addRange(fieldNum(LedgerVoucherReportDate_RU, ReportingDate)).value(strFmt('<%1', _fromDate));
                    dsTransLink.addRange(fieldNum(LedgerVoucherReportDate_RU, ReportingDate)).value(strFmt('>%1', _toDate ? _toDate : maxdate()));
    
                    if (_reportOnDate)
                    {
                        qbr = ds.findRange(this.QueryBaseDateField);
                        qbr.status(RangeStatus::Locked);
                        qbr.value(queryRange(dateNull(), _reportOnDate));
                    }
                }
            }
    
            sysQueryRun  = new SysQueryRun(query);
            sysQueryRun.origQueryPack(query.pack());
        }
    
        return sysQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCellTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromCellTable(LedgerRRGCellTable_RU _ledgerRRGCellTable)
    {
        this.CellRecId      = _ledgerRRGCellTable.RecId;
        this.CellTableId    = _ledgerRRGCellTable.TableId;
        this.DataType       = _ledgerRRGCellTable.DataType;
    
        switch (this.DataType)
        {
            case LedgerRRGDataType_RU::Register :
                this.LedgerOperation = LedgerRRGOperationType_RU::Turnover;
                this.BalanceType     = LedgerRRGBalancePeriodType_RU::None;
                break;
    
            case LedgerRRGDataType_RU::Trans    :
            case LedgerRRGDataType_RU::DimFocusBalance :
                this.LedgerOperation = LedgerRRGOperationType_RU::Balance;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerRRGEQueries</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromLedgerRRGEQueries(LedgerRRGEQueries_W _eQuery)
    {
        this.CellTableId        = _eQuery.TableId;
        this.CellRecId          = _eQuery.RecId;
        this.DataType           = _eQuery.DataType;
    
        switch (this.DataType)
        {
            case LedgerRRGDataType_RU::Register :
                this.LedgerOperation = LedgerRRGOperationType_RU::Turnover;
                this.BalanceType     = LedgerRRGBalancePeriodType_RU::None;
                break;
    
            case LedgerRRGDataType_RU::Trans    :
            case LedgerRRGDataType_RU::DimFocusBalance :
                this.LedgerOperation = LedgerRRGOperationType_RU::Balance;
                break;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSectionProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromSectionProperty(LedgerRRGESectionProperties_W _property)
    {
        switch (_property.PropertyType)
        {
            case LedgerRRGESectionPropertyType_W::Const:
                this.DataType               = LedgerRRGDataType_RU::Trans;		//Changed from Requisite
                this.LedgerRRGEProperties_W = _property.property().RecId;
                break;

            case LedgerRRGESectionPropertyType_W::Value:
                this.DataType       = LedgerRRGDataType_RU::Constant;
                this.ConstantText   = _property.Value;
                if (str2NumOk_RU(_property.Value))
                {
                    this.ConstantValue = str2num_RU(this.ConstantText);
                }
                break;
        }

        this.LedgerOperation            = LedgerRRGOperationType_RU::None;
        this.BalanceType                = LedgerRRGBalancePeriodType_RU::None;
        this.AccountIntervalType        = LedgerRRGIntervalType_RU::None;
        this.OffsetAccountIntervalType  = LedgerRRGIntervalType_RU::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initQuery(Object  _queryOrQueryRun)
    {
        Query query;

        if (! _queryOrQueryRun)
        {
            this.Query = conNull();
        }
        else
        {
            switch (classIdGet(_queryOrQueryRun))
            {
                case classNum(Query) :
                case classNum(SysQuery) :
                    query = _queryOrQueryRun;
                    break;

                case classNum(QueryRun) :
                case classNum(SysQueryRun) :
                    query = _queryOrQueryRun.query();
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            this.Query = query.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Operation                 = Operator::Plus;
        this.LedgerOperation           = LedgerRRGOperationType_RU::None;
        this.BalanceType               = LedgerRRGBalancePeriodType_RU::None;
        this.OffsetAccountIntervalType = LedgerRRGIntervalType_RU::None;
        this.AccountIntervalType       = LedgerRRGIntervalType_RU::None;
        this.LineId                    = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerRRGCellTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGCellTable_RU ledgerRRGCellTable()
    {
        return this.CellTableId == tableNum(LedgerRRGCellTable_RU) ?
               LedgerRRGCellTable_RU::findRecId(this.CellRecId)    :
               null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>property</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperties_W property(boolean _forupdate = false)
    {
        return LedgerRRGEProperties_W::find(this.LedgerRRGEProperties_W, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25FieldLabel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit RTax25FieldLabel rTax25FieldLabel(boolean    _set,
                                           FieldLabel _fieldLabel)
    {
        container           fieldLabels = RTax25RegType::construct(RTax25RegisterTable::registerId2Type(this.rTax25RegisterId)).fieldLabel();
        RTax25FieldLabel    ret;
        const str           Zero	= '0';

        if (_set)
        {
            this.rTax25FieldId = conFind(fieldLabels, _fieldLabel);
        }

        ret = conPeek(fieldLabels, this.rTax25FieldId);
        return ret == Zero ? '' : ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlStatementText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display SysSQLStatementText sqlStatementText()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        SysSQLStatementText     text;

        if (this.Query != conNull())
        {
            query = new Query(this.Query);
            if (query && query.dataSourceCount())
            {
                qbds = query.dataSourceNo(1);
                text = qbds.toString();
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(LedgerRRGOperationTable_RU, DataType) :
    
                if (this.DataType == LedgerRRGDataType_RU::Register &&
                    this.ledgerRRGCellTable().reportTable().CurrencyForCalc == LedgerRRGCurrencyForCalc_RU::AmountMSTSecond)
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_AccountCurrencyOnly");
                }
    
                if (this.DataType == LedgerRRGDataType_RU::DimFocusBalance && ! this.getDimensionSet())
                {
                    ret = checkFailed(strFmt("@SYS321809", "@SYS79309"));
                }
    
                break;
    
            case fieldNum(LedgerRRGOperationTable_RU, LedgerOperation):
    
                if (this.DataType         == LedgerRRGDataType_RU::Budget                    &&
                    (this.LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorr       ||
                     this.LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorrCredit ||
                     this.LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorrDebit))
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_BudgetActivityInCorrespondence");
                }
    
                if (this.DataType        == LedgerRRGDataType_RU::Register &&
                   (this.LedgerOperation != LedgerRRGOperationType_RU::Turnover ||
                    this.BalanceType     != LedgerRRGBalancePeriodType_RU::None))
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_PeriodicTurnoverOnredisters");
                }
    
                if (this.DataType         == LedgerRRGDataType_RU::Budget                    &&
                    (this.LedgerOperation == LedgerRRGOperationType_RU::ActiveBalance        ||
                     this.LedgerOperation == LedgerRRGOperationType_RU::PassiveBalance))
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_ActieOrPassiveBalance");
                }
    
                if (this.DataType        == LedgerRRGDataType_RU::Contractor &&
                   (this.LedgerOperation != LedgerRRGOperationType_RU::ActiveBalance &&
                    this.LedgerOperation != LedgerRRGOperationType_RU::PassiveBalance))
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_BalanceForCounteragent");
                }
    
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validOperationTypes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container validOperationTypes()
    {
        const str IsoLT	= 'LT'; // Lithuania
        const str IsoLV	= 'LV'; // Latvia
        const str IsoEE	= 'EE'; // Estonia
        const str IsoCZ	= 'CZ'; // Czech Republic
        const str IsoHU	= 'HU'; // Hungary
        const str IsoPL	= 'PL'; // Poland

        switch (this.DataType)
        {
            case LedgerRRGDataType_RU::Trans:
            case LedgerRRGDataType_RU::DimFocusBalance :
                if (this.DataType == LedgerRRGDataType_RU::DimFocusBalance ||
                    SysCountryRegionCode::isLegalEntityInCountryRegion([IsoLT, IsoLV, IsoEE, IsoCZ, IsoHU, IsoPL]))
                {
                    return [LedgerRRGOperationType_RU::Balance,
                            LedgerRRGOperationType_RU::BalanceCredit,
                            LedgerRRGOperationType_RU::BalanceDebit,
                            LedgerRRGOperationType_RU::Turnover,
                            LedgerRRGOperationType_RU::TurnoverCredit,
                            LedgerRRGOperationType_RU::TurnoverDebit,
                            LedgerRRGOperationType_RU::ActiveBalance,
                            LedgerRRGOperationType_RU::PassiveBalance,
                            LedgerRRGOperationType_RU::None];
                }
    
                return [LedgerRRGOperationType_RU::Balance,
                        LedgerRRGOperationType_RU::BalanceCredit,
                        LedgerRRGOperationType_RU::BalanceDebit,
                        LedgerRRGOperationType_RU::Turnover,
                        LedgerRRGOperationType_RU::TurnoverCredit,
                        LedgerRRGOperationType_RU::TurnoverDebit,
                        LedgerRRGOperationType_RU::TurnoverInCorr,
                        LedgerRRGOperationType_RU::TurnoverInCorrCredit,
                        LedgerRRGOperationType_RU::TurnoverInCorrDebit,
                        LedgerRRGOperationType_RU::ActiveBalance,
                        LedgerRRGOperationType_RU::PassiveBalance,
                        LedgerRRGOperationType_RU::None];
    
            case LedgerRRGDataType_RU::Budget:
                return [LedgerRRGOperationType_RU::Balance,
                        LedgerRRGOperationType_RU::BalanceCredit,
                        LedgerRRGOperationType_RU::BalanceDebit,
                        LedgerRRGOperationType_RU::Turnover,
                        LedgerRRGOperationType_RU::TurnoverCredit,
                        LedgerRRGOperationType_RU::TurnoverDebit,
                        LedgerRRGOperationType_RU::None];
    
            case LedgerRRGDataType_RU::Register:
                return [LedgerRRGOperationType_RU::Turnover,
                        LedgerRRGOperationType_RU::None];
    
            case LedgerRRGDataType_RU::Contractor:
                return [LedgerRRGOperationType_RU::ActiveBalance,
                        LedgerRRGOperationType_RU::PassiveBalance];
        }
    
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecID</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    server static public LedgerRRGOperationTable_RU findByRecID(RecId _recId, boolean _forUpdate = false)
    {
        LedgerRRGOperationTable_RU  ledgerRRGOperationTable;

        if (_recId)
        {
            if (_forUpdate)
            {
                ledgerRRGOperationTable.selectForUpdate(_forUpdate);
            }

            select firstonly ledgerRRGOperationTable
                where ledgerRRGOperationTable.RecId == _recId;
        }

        return ledgerRRGOperationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumFrame</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    server static public container lineNumFrame(RecId _cellRecId)
    {
        LedgerRRGOperationTable_RU      ledgerRRGOperationTable;
        LineNum                         lineNumMin, lineNumMax;

        if (_cellRecId != 0)
        {
            select firstonly minof(LineNum) from ledgerRRGOperationTable
                where ledgerRRGOperationTable.CellTableId == tableNum(LedgerRRGCellTable_RU) &&
                      ledgerRRGOperationTable.CellRecId   == _cellRecId;

            lineNumMin = ledgerRRGOperationTable.LineNum;

            select firstonly maxof(LineNum) from ledgerRRGOperationTable
                where ledgerRRGOperationTable.CellTableId == tableNum(LedgerRRGCellTable_RU) &&
                      ledgerRRGOperationTable.CellRecId   == _cellRecId;

            lineNumMax = ledgerRRGOperationTable.LineNum;
        }

        return [lineNumMin, lineNumMax];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns dimension set hierarchy id set up on the parent entity.
    /// </summary>
    /// <returns>
    /// The dimension set hierarchy id set up on the parent entity.
    /// </returns>
    
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionHierarchyId getDimensionSet()
    {
        DimensionHierarchyId dimensionHierarchy;
    
        switch (this.CellTableId)
        {
            case tableNum(LedgerRRGEQueries_W) :
                dimensionHierarchy = LedgerRRGEQueries_W::find(this.CellRecId).DimensionHierarchy;
                break;
            case tableNum(LedgerRRGCellTable_RU) :
                dimensionHierarchy = this.ledgerRRGCellTable().reportTable().DimensionHierarchy;
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return dimensionHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU,LT,LV,EE,CZ,HU,PL</CountryRegionCodes>
	<DeveloperDocumentation>@SYS54714</DeveloperDocumentation>
	<FormRef>LedgerRRGCellTable_RU</FormRef>
	<Label>@LedgerRRG:LedgerRRG_CellOperationsTable</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LineNum</TitleField1>
	<TitleField2>DataType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>OperationIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerRRGAccountInterval_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGAccountInterval_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGDimensionInterval_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGDimensionInterval_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGOffsetAccountInterval_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGOffsetAccountInterval_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGTax25ProfitInterval_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGTax25ProfitInterval_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGTransOperationsTax_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGTransOperationsTax_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGTransType_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGTransType_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Operation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerOperation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerPeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountIntervalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumMask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountNumMask</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountIntervalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumMask</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Budget</Name>
			<Label>@SYS15436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerPeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerOperation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Operation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountIntervalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountIntervalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeByCorrect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountNumMask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumMask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGEProperties_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdLineNumGroup</Name>
			<Label>@SYS15682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CellTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CellRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetAccount</Name>
			<Label>@SYS11162</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountIntervalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountNumMask</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operation</Name>
			<Label>@SYS4528</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Operation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerOperation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceDetail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS14598</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerPeriodCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProfitTaxRegisters</Name>
			<Label>@LedgerRRG:LedgerRRG_ProfitTaxRegisters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RTax25RegisterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RTax25FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>rTax25FieldLabel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Query</Name>
			<Label>@SYS25531</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryBaseDateField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuerySelectedField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QueryFieldOperation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuerySelectReportDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Value</Name>
			<Label>@SYS40283</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConstantValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountIntervalType</Name>
			<EnumType>LedgerRRGIntervalType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumMask</Name>
			<ExtendedDataType>LedgerRRGAccountNumMap_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BalanceDetail</Name>
			<EnumType>LedgerRRGBalanceDetail_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BalanceType</Name>
			<EnumType>LedgerRRGBalancePeriodType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CellRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CellTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConstantText</Name>
			<ExtendedDataType>LedgerRRGEPropertyValue_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConstantValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS7403</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<EnumType>LedgerRRGDataType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerOperation</Name>
			<EnumType>LedgerRRGOperationType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerPeriodCode</Name>
			<ExtendedDataType>DateCode</ExtendedDataType>
			<Label>@SYS40858</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerRRGEProperties_W</Name>
			<ExtendedDataType>LedgerRRGEPropertyRecId_W</ExtendedDataType>
			<Label>@LedgerRRG:LedgerRRG_FixedRequisite</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelNum</Name>
			<ExtendedDataType>BudgetModelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountIntervalType</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@LedgerRRG:LedgerRRG_CorrAccountInterval</Label>
			<EnumType>LedgerRRGIntervalType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffsetAccountNumMask</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LedgerRRGAccountNumMap_RU</ExtendedDataType>
			<Label>@SYS11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Operation</Name>
			<EnumType>Operator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Query</Name>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>QueryBaseDateField</Name>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<Label>@LedgerRRG:LedgerRRG_BaseDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QueryFieldOperation</Name>
			<EnumType>LedgerRRGFieldOperation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>QuerySelectedField</Name>
			<ExtendedDataType>FieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RTax25FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RTax25FieldId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RTax25RegisterId</Name>
			<ExtendedDataType>RTax25RegisterId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeByCorrect</Name>
			<EnumType>LedgerRRGTypeByCorrect_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuerySelectReportDate</Name>
			<Label>@SYP4860744</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerRRGEProperties_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerRRGEProperties_W</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OperationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CellTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CellRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BudgetModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelNum</Name>
					<SourceEDT>BudgetModelId</SourceEDT>
					<Field>ModelNum</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPeriodCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerPeriodCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerPeriodCode</Name>
					<SourceEDT>DateCode</SourceEDT>
					<Field>LedgerPeriodCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerRRGCellTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGCellTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGCellTable_RU</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerRRGOperationTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CellTableId</Name>
					<Field>CellTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CellRecId</Name>
					<Field>CellRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGEProperties_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGEProperties_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGEProperties_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGOperationTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGEProperties_W</Name>
					<Field>LedgerRRGEProperties_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerRRGEQueries_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGEQueries_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGEQueries_W</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>LedgerRRGOperationTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CellTableId</Name>
					<Field>CellTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CellRecId</Name>
					<Field>CellRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetMainAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetMainAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGOperationTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetAccountNumMask</Name>
					<Field>OffsetAccountNumMask</Field>
					<RelatedField>MainAccountId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25RegisterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RTax25RegisterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RTax25RegisterId</Name>
					<SourceEDT>RTax25RegisterId</SourceEDT>
					<Field>RTax25RegisterId</Field>
					<RelatedField>RegisterId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RegisterIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>