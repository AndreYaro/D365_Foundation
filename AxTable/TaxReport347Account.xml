<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport347Account</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReport347Account extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        MainAccount mainAccount;
        boolean     ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TaxReport347Account, MainAccount):
                mainAccount = MainAccount::find(this.MainAccount);

                if (mainAccount && !conFind(TaxReport347Account::getAllowedAccountTypes(), mainAccount.Type))
                {
                    ret = checkFailed("@SYS334844");
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkExist(MainAccountRecId _mainAccountId)
    {
        boolean ret = true;

        if (!TaxReport347Account::exist(_mainAccountId))
        {
            ret = checkFailed(strFmt(TaxReport347Account::txtNotExist(),
                                        MainAccount::find(_mainAccountId).MainAccountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean exist(MainAccountRecId _mainAccountId)
    {
        TaxReport347Account  taxReport347Account;

        return (select firstonly RecId from taxReport347Account
                    where taxReport347Account.MainAccount == _mainAccountId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static TaxReport347Account find(MainAccountRecId _mainAccountId,
                                           boolean          _forUpdate = false,
                                           ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxReport347Account  taxReport347Account;

        taxReport347Account.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxReport347Account.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxReport347Account
            where taxReport347Account.MainAccount == _mainAccountId;

        return taxReport347Account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedAccountTypes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container getAllowedAccountTypes()
    {
        return [
            DimensionLedgerAccountType::BalanceSheet,
            DimensionLedgerAccountType::Asset,
            DimensionLedgerAccountType::Liability
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static TxtNotExist txtNotExist()
    {
        return "@SYS9779";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>ES</CountryRegionCodes>
	<DeveloperDocumentation>@SYS319366</DeveloperDocumentation>
	<FormRef>taxreport347account</FormRef>
	<Label>@SYS319359</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>MainAccount</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>MainAccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MainAccountRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MainAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MainAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainAccountIdx</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainAccount</Name>
					<Field>MainAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>