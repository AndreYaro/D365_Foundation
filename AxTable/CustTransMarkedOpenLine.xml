<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransMarkedOpenLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustTransMarkedOpenLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustTransMarkedOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransMarkedOpenLineId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _custTransMarkedOpenLineId)
    {
        boolean ret = true;

        if (!CustTransMarkedOpenLine::exist(_custTransMarkedOpenLineId))
        {
            ret = checkFailed(strFmt(CustTransMarkedOpenLine::txtNotExist(), _custTransMarkedOpenLineId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustTransMarkedOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransMarkedOpenLineId">
    /// The record ID of the <c>CustTransMarkedOpenLine</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custTransMarkedOpenLineId)
    {
        boolean found;

        found = (select firstonly RecId from custTransMarkedOpenLine
            where custTransMarkedOpenLine.RecId == _custTransMarkedOpenLineId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified <c>CustTransMarkedOpenLine</c> record.
    /// </summary>
    /// <param name="_custTransMarkedOpenLineId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTransMarkedOpenLine</c> table buffer.
    /// </returns>
    public static CustTransMarkedOpenLine find(
        recId _custTransMarkedOpenLineId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        custTransMarkedOpenLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransMarkedOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransMarkedOpenLine
            where custTransMarkedOpenLine.RecId == _custTransMarkedOpenLineId;

        return custTransMarkedOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOpenTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified <c>CustTransMarkedOpenLine</c> record.
    /// </summary>
    /// <param name="_custTransOpenLineRecId">
    /// The unique ID of the <c>CustTransOpenLine</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTransMarkedOpenLine</c> table buffer.
    /// </returns>
    public static CustTransMarkedOpenLine findByOpenTransRecId(
        RefRecId _custTransOpenLineRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        custTransMarkedOpenLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransMarkedOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransMarkedOpenLine
            where custTransMarkedOpenLine.CustTransOpenLine == _custTransOpenLineRecId;

        return custTransMarkedOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the records of the <c>CustTransMarkedOpenLine</c> table by the <c>SpecTrans</c> and
    /// <c>CustTransOpenLine</c> record ID.
    /// </summary>
    /// <param name="_specTransRecId">
    /// The record ID of the <c>SpecTrans</c> table.
    /// </param>
    /// <param name="_custTransOpenLineRecId">
    /// The record ID of the <c>CustTransOpenLine</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTransMarkedOpenLine</c> table buffer.
    /// </returns>
    public static CustTransMarkedOpenLine findByRefId(
        RefRecId _specTransRecId,
        RefRecId _custTransOpenLineRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        custTransMarkedOpenLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransMarkedOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransMarkedOpenLine
            where custTransMarkedOpenLine.CustTransOpenLine == _custTransOpenLineRecId
                && custTransMarkedOpenLine.SpecTrans == _specTransRecId;

        return custTransMarkedOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySpecRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTransMarkedOpenLine</c> record by using the specified <c>SpecTrans</c> record ID.
    /// </summary>
    /// <param name="_specTransRecId">
    /// The <c>SpecTrans</c> record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// The <c>CustTransMarkedOpenLine</c> record.
    /// </returns>
    public static CustTransMarkedOpenLine findBySpecRefRecId(
        RefRecId _specTransRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        custTransMarkedOpenLine.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransMarkedOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransMarkedOpenLine
        where custTransMarkedOpenLine.SpecTrans == _specTransRecId;

        return custTransMarkedOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountToSettle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the amount to settle for the selected <c>SpecTrans</c> record.
    /// </summary>
    /// <param name="_specTransRecId">
    /// The record ID of the <c>SpecTrans</c> table.
    /// </param>
    /// <returns>
    /// The sum of the amount to be settled for selected <c>SpecTrans</c> record.
    /// </returns>
    public static AmountCur getTotalAmountToSettle(recId _specTransRecId)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select sum(AmountToSettle) from custTransMarkedOpenLine
            where custTransMarkedOpenLine.SpecTrans == _specTransRecId;

        return custTransMarkedOpenLine.AmountToSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedRowCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of rows in the <c>CustTransMarkedOpenLine</c> table.
    /// </summary>
    /// <param name="_specTrans">
    /// The record ID of the <c>SpecTrans</c> record.
    /// </param>
    /// <returns>
    /// The number of rows in the <c>CustTransMarkedOpenLine</c> table.
    /// </returns>
    public static int markedRowCount(recId _specTrans)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select count(RecId) from custTransMarkedOpenLine
            where custTransMarkedOpenLine.SpecTrans == _specTrans
                && custTransMarkedOpenLine.AmountToSettle > 0;

        return any2int(custTransMarkedOpenLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS328543</DeveloperDocumentation>
	<Label>@SYS134071</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>AmountToSettle</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SpecTransIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountToSettle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscLineToTake</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountToSettle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscLineToTake</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountToTake</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscLineToTake</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarkedAmountToSettled</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountToSettle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountToSettle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
			<Label>@SYS114018</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscLineToTake</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscAmount</ExtendedDataType>
			<Label>@SYS134073</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransOpenLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransOpenLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpecTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SpecTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustTransOpenLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTransOpenLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SpecTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SpecTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTransOpenLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTransOpenLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpenLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustTransMarkedOpenLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransOpenLine</Name>
					<Field>CustTransOpenLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SpecTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SpecTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecTrans</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustTransMarkedOpenLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTrans</Name>
					<Field>SpecTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>