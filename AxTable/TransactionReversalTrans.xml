<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransactionReversalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId )
    {
        boolean ret = true;
        ;

        if (!TransactionReversalTrans::exist(_recId))
        {
            ret = checkFailed(strfmt(TransactionReversalTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    static void createTransaction(tableId       _tableId,
                                  recId         _recId,
                                  TraceNum      _traceNum,
                                  Original      _original = false,
                                  LastReversal  _last     = false,
                                  Reversed      _reversed = true)
    {
        TransactionReversalTrans    transactionReversalTransNew;

        if (!TransactionReversalTrans::findTransactionReversalTrans(_tableId, _recId))
        {
            transactionReversalTransNew.RefTableId = _tableId;
            transactionReversalTransNew.RefRecId   = _recId;
            transactionReversalTransNew.TraceNum   = _traceNum;
            transactionReversalTransNew.Original   = _original;
            transactionReversalTransNew.Last       = _last;
            transactionReversalTransNew.Reversed   = _reversed;
            transactionReversalTransNew.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     transactionReversalTrans
                 where
                     transactionReversalTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TransactionReversalTrans find(
        RecId _recId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TransactionReversalTrans transactionReversalTrans;
        ;

        transactionReversalTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            transactionReversalTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            transactionReversalTrans
            where
            transactionReversalTrans.RecId == _recId;

        return transactionReversalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetGroupTransOrig_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the original asset value model transaction that is associated with the specified
    ///    asset value model transaction if it has been reversed.
    /// </summary>
    /// <param name="assetGroupTransLocal">
    ///  The current asset value model transaction.
    /// </param>
    /// <returns>
    ///  The original related asset value model transaction; otherwise the specified asset value model
    ///  transaction.
    /// </returns>
    /// <remarks>
    ///    Use the specified transaction to first find the related transaction reversal record. If one is
    ///    found, use the value in the trace number field to find the transaction with the same trace number
    ///    that is marked as the original transaction. Finally, use the referenced record ID from the
    ///    transaction reversal record to look up the actual related original asset transaction record.
    /// </remarks>
    static container findAssetGroupTransOrig_IN(AssetGroupTrans_IN assetGroupTransLocal)
    {
        AssetGroupTrans_IN          assetGroupTransOrig;
        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransOrig;
        RefTableId                  assetGroupTransTableId = tablenum(AssetGroupTrans_IN);

        if (assetGroupTransLocal)
        {
            select firstonly transactionReversalTrans
                where transactionReversalTrans.RefTableId == assetGroupTransLocal.TableId
                   && transactionReversalTrans.RefRecId   == assetGroupTransLocal.RecId;

            if (transactionReversalTrans)
            {
                select firstonly transactionReversalTransOrig
                    where transactionReversalTransOrig.TraceNum     == transactionReversalTrans.TraceNum
                        && transactionReversalTransOrig.RefTableId  == assetGroupTransTableId
                        && transactionReversalTransOrig.Original    == true;

                if (transactionReversalTransOrig)
                {
                    select firstonly forupdate assetGroupTransOrig
                    where assetGroupTransOrig.RecId == transactionReversalTransOrig.RefRecId;
                }
            }
        }

        return [assetGroupTransOrig, transactionReversalTransOrig.Reversed, transactionReversalTransOrig.TraceNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetTransOrig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the original asset value model transaction that is associated with the specified
    ///    asset value model transaction if it has been reversed.
    /// </summary>
    /// <param name="assetTransLocal">
    ///    The current asset value model transaction.
    /// </param>
    /// <returns>
    ///    The original related asset value model transaction; otherwise the specified asset value model
    ///    transaction.
    /// </returns>
    /// <remarks>
    ///    Use the specified transaction to first find the related transaction reversal record. If one is
    ///    found, use the value in the trace number field to find the transaction with the same trace number
    ///    that is marked as the original transaction. Finally, use the referenced record ID from the
    ///    transaction reversal record to look up the actual related original asset transaction record.
    /// </remarks>
    static container findAssetTransOrig(AssetTrans assetTransLocal)
    {
        AssetTrans                  assetTransOrig;
        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransOrig;
        ;

        if (assetTransLocal)
        {
            select firstonly transactionReversalTrans
                where transactionReversalTrans.RefTableId == assetTransLocal.TableId
                   && transactionReversalTrans.RefRecId   == assetTransLocal.RecId;

            if (transactionReversalTrans)
            {
                select firstonly transactionReversalTransOrig
                    where transactionReversalTransOrig.TraceNum == transactionReversalTrans.TraceNum
                        && transactionReversalTransOrig.Original == true;

                if (transactionReversalTransOrig)
                {
                    select firstonly forupdate assetTransOrig
                    where assetTransOrig.RecId == transactionReversalTransOrig.RefRecId;
                }
            }
        }

        return [assetTransOrig, transactionReversalTransOrig.Reversed, transactionReversalTransOrig.TraceNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransOrig</Name>
				<Source><![CDATA[
    static container findCustTransOrig(CustTrans custTransLocal, boolean _revokeOriginal = false)
    {
        CustTrans                   custTransOrig;
        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransOrig;

        if (custTransLocal)
        {
            select firstonly transactionReversalTrans
                index RefRecIdIdx
                where transactionReversalTrans.RefTableId == custTransLocal.TableId
                     && transactionReversalTrans.RefRecId == custTransLocal.RecId;

            if (_revokeOriginal)
            {
                select firstonly transactionReversalTransOrig
                    index TraceNumLastIdx
                    where transactionReversalTransOrig.TraceNum     == transactionReversalTrans.TraceNum
                       && transactionReversalTransOrig.RefTableId   == custTransLocal.TableId
                       && TransactionReversalTransOrig.RefRecId     == custTransLocal.RecId
                       && transactionReversalTransOrig.Original     == true;
            }
            else
            {
                select firstonly transactionReversalTransOrig
                    index TraceNumLastIdx
                    where transactionReversalTransOrig.TraceNum     == transactionReversalTrans.TraceNum
                       && transactionReversalTransOrig.RefTableId   == custTransLocal.TableId
                       && transactionReversalTransOrig.Original     == true;
            }

            select firstonly forupdate custTransOrig
                index RecId
                where custTransOrig.RecId == transactionReversalTransOrig.RefRecId;
        }

        return [custTransOrig, transactionReversalTransOrig.Reversed, transactionReversalTransOrig.TraceNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the original <c>TransactionReversalTrans</c> for the given table ID and record ID.
    /// </summary>
    /// <param name = "_tableId">The table ID to find.</param>
    /// <param name = "_recId">The record ID to find.</param>
    /// <returns>A <c>TransactionReversalTrans</c> record.</returns>
    [Hookable(false)]
    public static TransactionReversalTrans findOriginal(RefTableId _tableId, RefRecId _recId)
    {
        TransactionReversalTrans transactionReversalTrans;
        TransactionReversalTrans transactionReversalTransOrig;

        select firstonly RecId from transactionReversalTrans
            where transactionReversalTrans.RefTableId == _tableId 
               && transactionReversalTrans.RefRecId == _recId
            join Reversed, TraceNum from transactionReversalTransOrig
            where transactionReversalTransOrig.TraceNum == transactionReversalTrans.TraceNum 
                && transactionReversalTransOrig.Original == true;

        return transactionReversalTransOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGeneralJournalOriginal</Name>
				<Source><![CDATA[
    public static container findGeneralJournalOriginal(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        TransactionReversalTrans transactionReversalTrans;
        TransactionReversalTrans transactionReversalTransOrig;

        if (_generalJournalAccountEntry != null)
        {
            select firstonly RecId from transactionReversalTrans
                where transactionReversalTrans.RefTableId == tablenum(GeneralJournalAccountEntry) &&
                    transactionReversalTrans.RefRecId == _generalJournalAccountEntry.RecId
            join Reversed, TraceNum from transactionReversalTransOrig
                where transactionReversalTransOrig.TraceNum == transactionReversalTrans.TraceNum &&
                    transactionReversalTransOrig.Original == true
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == transactionReversalTransOrig.RefRecId;
        }

        return [generalJournalAccountEntry, transactionReversalTransOrig.Reversed, transactionReversalTransOrig.TraceNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastAssetGroupTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last asset value model transaction that is associated with the passed asset value model
    ///    transaction if it has been reversed.
    /// </summary>
    /// <param name="assetGroupTransLocal">
    /// The current asset value model transaction.
    /// </param>
    /// <returns>
    ///    The last related asset value model transaction if one is found; otherwise the specified asset value
    ///    model transaction.
    /// </returns>
    /// <remarks>
    ///    Use the supplied asset value model transaction to first find the related transaction reversal
    ///    record. If one is found, use the value of the trace number field to find the transaction with the
    ///    same trace number that is marked as the last transaction. Finally, use the referenced record ID
    ///    from the transaction reversal record to look up the actual related last asset value model
    ///    transaction record.
    /// </remarks>
    static AssetGroupTrans_IN findLastAssetGroupTrans_IN(AssetGroupTrans_IN assetGroupTransLocal)
    {
        AssetGroupTrans_IN          assetGroupTransLast;

        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransLast;

        if (assetGroupTransLocal)
        {
            select firstonly transactionReversalTrans
                where transactionReversalTrans.RefTableId == assetGroupTransLocal.TableId
                   && transactionReversalTrans.RefRecId   == assetGroupTransLocal.RecId;

            if (transactionReversalTrans)
            {
                select firstonly transactionReversalTransLast
                    where transactionReversalTransLast.TraceNum == transactionReversalTrans.TraceNum
                        && transactionReversalTransLast.Last     == true;

                if (transactionReversalTransLast)
                {
                    select firstonly assetGroupTransLast
                        where assetGroupTransLast.RecId == transactionReversalTransLast.RefRecId;
                }
            }
        }

        return assetGroupTransLast ? assetGroupTransLast : assetGroupTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last asset value model transaction that is associated with the passed asset value model
    ///    transaction if it has been reversed.
    /// </summary>
    /// <param name="assetTransLocal">
    ///    The current asset value model transaction.
    /// </param>
    /// <returns>
    ///    The last related asset value model transaction if one is found; otherwise the specified asset value
    ///    model transaction.
    /// </returns>
    /// <remarks>
    ///    Use the supplied asset value model transaction to first find the related transaction reversal
    ///    record. If one is found, use the value of the trace number field to find the transaction with the
    ///    same trace number that is marked as the last transaction. Finally, use the referenced record ID
    ///    from the transaction reversal record to look up the actual related last asset value model
    ///    transaction record.
    /// </remarks>
    static AssetTrans findLastAssetTrans(AssetTrans assetTransLocal)
    {
        AssetTrans                  assetTransLast;

        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransLast;

        if (assetTransLocal)
        {
            select firstonly transactionReversalTrans
                where transactionReversalTrans.RefTableId == assetTransLocal.TableId
                   && transactionReversalTrans.RefRecId   == assetTransLocal.RecId;

            if (transactionReversalTrans)
            {
                select firstonly transactionReversalTransLast
                    where transactionReversalTransLast.TraceNum == transactionReversalTrans.TraceNum
                        && transactionReversalTransLast.RefTableId == assetTransLocal.TableId
                        && transactionReversalTransLast.Last == true;

                if (transactionReversalTransLast)
                {
                    select firstonly assetTransLast
                        where assetTransLast.RecId == transactionReversalTransLast.RefRecId;
                }
            }
        }

        return assetTransLast ? assetTransLast : assetTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCustTrans</Name>
				<Source><![CDATA[
    static CustTrans findLastCustTrans(CustTrans _custTransLocal, boolean _forUpdate = false)
    {
        CustTrans                   custTransLast;

        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransLast;

        _custTransLocal.selectForUpdate(_forUpdate);

        if (_custTransLocal)
        {
            custTransLast.selectForUpdate(_forUpdate);

            select firstonly TraceNum from transactionReversalTrans
                index RefRecIdIdx
                where transactionReversalTrans.RefTableId == _custTransLocal.TableId
                   && transactionReversalTrans.RefRecId   == _custTransLocal.RecId;

            select firstonly RefRecId from transactionReversalTransLast
                index TraceNumLastIdx
                where transactionReversalTransLast.TraceNum == transactionReversalTrans.TraceNum
                   && transactionReversalTransLast.Last     == true;

            select firstonly custTransLast
                index RecId
                where custTransLast.RecId == transactionReversalTransLast.RefRecId;
        }

        return custTransLast ? custTransLast : _custTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastTransactionReversalTrans</Name>
				<Source><![CDATA[
    static TransactionReversalTrans findLastTransactionReversalTrans(TraceNum   _traceNum,
                                                                     boolean    _forUpdate = false)
    {
        TransactionReversalTrans    transactionReversalTransLast;

        transactionReversalTransLast.selectForUpdate(_forUpdate);

        select firstonly transactionReversalTransLast
            index TraceNumLastIdx
            where transactionReversalTransLast.TraceNum == _traceNum
               && transactionReversalTransLast.Last     == true;

        return transactionReversalTransLast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastVendTrans</Name>
				<Source><![CDATA[
    static VendTrans findLastVendTrans(VendTrans _vendTransLocal, boolean _forUpdate = false)
    {
        VendTrans                   vendTransLast;

        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransLast;

        _vendTransLocal.selectForUpdate(_forUpdate);

        if (_vendTransLocal)
        {
            vendTransLast.selectForUpdate(_forUpdate);

            select firstonly TraceNum from transactionReversalTrans
                index RefRecIdIdx
                where transactionReversalTrans.RefTableId == _vendTransLocal.TableId
                     && transactionReversalTrans.RefRecId == _vendTransLocal.RecId;

            select firstonly RefRecId from transactionReversalTransLast
                index TraceNumLastIdx
                where transactionReversalTransLast.TraceNum == transactionReversalTrans.TraceNum
                   && transactionReversalTransLast.Last     == true;

            select firstonly vendTransLast
                index RecId
                where vendTransLast.RecId == transactionReversalTransLast.RefRecId;
        }

        return vendTransLast ? vendTransLast : _vendTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactionReversalTrans</Name>
				<Source><![CDATA[
    static TransactionReversalTrans findTransactionReversalTrans(
        tableId    _tableId,
        recId      _recId,
        boolean    _forUpdate = false)
    {
        TransactionReversalTrans    transactionReversalTransLocal;

        transactionReversalTransLocal.selectForUpdate(_forUpdate);

        select firstonly transactionReversalTransLocal
            index RefRecIdIdx
            where transactionReversalTransLocal.RefTableId == _tableId
               && transactionReversalTransLocal.RefRecId   == _recId;

        return transactionReversalTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransOrig</Name>
				<Source><![CDATA[
    static container findVendTransOrig(VendTrans vendTransLocal, boolean _revokeOriginal = false)
    {
        VendTrans                   vendTransOrig;
        TransactionReversalTrans    transactionReversalTrans;
        TransactionReversalTrans    transactionReversalTransOrig;

        if (vendTransLocal)
        {
            select firstonly transactionReversalTrans
                index RefRecIdIdx
                where transactionReversalTrans.RefTableId == vendTransLocal.TableId
                   && transactionReversalTrans.RefRecId   == vendTransLocal.RecId;

            if (_revokeOriginal)
            {
                select firstonly transactionReversalTransOrig
                    index TraceNumLastIdx
                    where transactionReversalTransOrig.TraceNum     == transactionReversalTrans.TraceNum
                       && transactionReversalTransOrig.RefTableId   == vendTransLocal.TableId
                       && transactionReversalTransOrig.RefRecId     == vendTransLocal.RecId
                       && transactionReversalTransOrig.Original     == true;
            }
            else
            {
                select firstonly transactionReversalTransOrig
                    index TraceNumLastIdx
                    where transactionReversalTransOrig.TraceNum     == transactionReversalTrans.TraceNum
                       && transactionReversalTransOrig.RefTableId   == vendTransLocal.TableId
                       && transactionReversalTransOrig.Original     == true;
            }

            select firstonly forupdate vendTransOrig
                index RecId
                where vendTransOrig.RecId == transactionReversalTransOrig.RefRecId;
        }

        return [vendTransOrig, transactionReversalTransOrig.Reversed, transactionReversalTransOrig.TraceNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReversalVoucher</Name>
				<Source><![CDATA[
    internal static Voucher findReversalVoucher(Voucher _voucher)
    {
        TransactionReversalTrans transactionReversalTrans, transactionReversalTransReversed;
        GeneralJournalEntry generalJournalEntry, generalJournalEntryReversed;
        GeneralJournalAccountEntry generalJournalAccountEntry, generalJournalAccountEntryReversed;

        select firstonly generalJournalEntryReversed
            where generalJournalEntryReversed.SubledgerVoucher == _voucher
                && generalJournalEntryReversed.SubledgerVoucherDataAreaId == curExt()
            join RecId from generalJournalAccountEntryReversed
            where generalJournalEntryReversed.RecId == generalJournalAccountEntryReversed.GeneralJournalEntry
            join RecId from transactionReversalTransReversed
            where transactionReversalTransReversed.RefTableId == generalJournalAccountEntryReversed.TableId
                && transactionReversalTransReversed.RefRecId == generalJournalAccountEntryReversed.RecId
            join RecId from transactionReversalTrans
            where transactionReversalTrans.TraceNum == transactionReversalTransReversed.TraceNum
                && transactionReversalTrans.DataAreaId == transactionReversalTransReversed.DataAreaId
            join RecId from generalJournalAccountEntry
            where transactionReversalTrans.RefTableId == generalJournalAccountEntry.TableId
                && transactionReversalTrans.RefRecId == generalJournalAccountEntry.RecId
            join SubledgerVoucher, RecId from generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.SubledgerVoucher != _voucher;

        return generalJournalEntry.SubledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginal</Name>
				<Source><![CDATA[
    static void updateOriginal(
        tableId _tabelId,
        recId   _recId,
        NoYes   _reversed)
    {
        TransactionReversalTrans transactionReversalTransLocal;

        select firstonly forupdate transactionReversalTransLocal
            where transactionReversalTransLocal.RefTableId == _tabelId
                && transactionReversalTransLocal.RefRecId == _recId;

        Debug::assert(transactionReversalTransLocal != null);

        if (transactionReversalTransLocal)
        {
        transactionReversalTransLocal.Reversed = _reversed;
        transactionReversalTransLocal.update();
    }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS127173</DeveloperDocumentation>
	<Label>@SYS78542</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefRecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Original</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reversed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TraceNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Last</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Original</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reversed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TraceNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Last</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Original</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reversed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TraceNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Last</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Last</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LastReversal</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Original</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Original</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reversed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Reversed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TraceNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TraceNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TraceNumLastIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TraceNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Last</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TraceNumOrigIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TraceNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Original</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefTableIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Reversed</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TraceNum</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Common</Name>
			<EntityRelationshipRole>@SYS127174</EntityRelationshipRole>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TransactionReversalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>