<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMPromotionCust</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMPromotionCust extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the selected node and any children to the promotion customer list.
    /// </summary>
    /// <param name="_origTree">
    /// Tree that logic is copying from.
    /// </param>
    /// <param name="_currentIdx">
    /// Current node being processed.
    /// </param>
    /// <param name="_promotionID">
    /// Promotion ID that this promotion customer record relates to.
    /// </param>
    public static void copyChildren(FormTreeControl _origTree, int _currentIdx, TAMPromotionID _promotionID)
    {
        MCRCustCategory mcrCustCategory;
        TAMPromotionCust tamPromotionCust;

        FormTreeItem   node;
        int idx;

        if (_currentIdx)
        {
            _origTree.expand(_currentIdx, FormTreeExpand::Expand);
            node = _origTree.getItem(_currentIdx);

            mcrCustCategory = MCRCustCategory::find(node.data());
            if (mcrCustCategory.Customer)
            {
                tamPromotionCust.PromotionID = _promotionID;
                tamPromotionCust.CustAccount = CustTable::findRecId(mcrCustCategory.Customer).AccountNum;
                if (!TAMPromotionCust::find(_promotionID, tamPromotionCust.CustAccount))
                {
                    if (tamPromotionCust.validateWrite())
                    {
                        tamPromotionCust.insert();
                    }
                    else
                    {
                        throw error("@SYS21628");
                    }
                }
            }
            // Get index of next child
            idx = _origTree.getChild(_currentIdx);
            if (idx)
            {
                TAMPromotionCust::copyChildren(_origTree, idx, _promotionID);
            }
            // If node has no children, check for siblings
            idx = _origTree.getNextSibling(_currentIdx);
            if (idx)
            {
                TAMPromotionCust::copyChildren(_origTree, idx, _promotionID);
            }
            // if no children or siblings, then it's a leaf and just need to create it and return
            _origTree.expand(_currentIdx, FormTreeExpand::Collapse);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>TAMPromotionCust</c> record exists for the specified parameters.
    /// </summary>
    /// <param name="_promotionID">
    /// The <c>TAMPromotionId</c> to search for.
    /// </param>
    /// <param name="_custAccount">
    /// The <c>CustAccount</c> to search for.
    /// </param>
    /// <param name="_tamPromotionCustAccount">
    /// The <c>TAMPromotionFundCustAccount</c> to search for.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TAMPromotionID           _promotionID,
                                CustAccount              _custAccount,
                                TAMPromotionCustAccount  _tamPromotionCustAccount = "")
    {
        TAMPromotionCust  tamPromotionCust;

        if (_promotionID && _custAccount)
        {
            select firstonly RecId from tamPromotionCust
                where tamPromotionCust.PromotionID == _promotionID
                && tamPromotionCust.CustAccount == _custAccount
                && tamPromotionCust.PromotionCust == _tamPromotionCustAccount;
        }

        return tamPromotionCust.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a promotion customer based on the passed parameters.
    /// </summary>
    /// <param name="_promotionID">
    /// The ID of the promotion used to find the <c>TAMPromotionCust</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account for which to search the <c>TAMPromotionCustTable</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TAMPromotionalCust</c> table; otherwise, and empty buffer.
    /// </returns>
    public static TAMPromotionCust find(TAMPromotionID _promotionID,
                                       CustAccount _custAccount,
                                       boolean          _forUpdate = false)
    {
        TAMPromotionCust  tamPromotionCust;

        if (_promotionID
            && _custAccount)
        {
            tamPromotionCust.selectForUpdate(_forUpdate);

            select firstonly tamPromotionCust
                where tamPromotionCust.PromotionID == _promotionID
                && tamPromotionCust.CustAccount == _custAccount;
        }

        return tamPromotionCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        TAMPromotionCust tamPromotionCust;

        select firstOnly RecId from tamPromotionCust;

        // Only flush the cache if this was the delete of the last record
        // in this company, since a cache flush involves a relatively expensive
        // write to the SysCacheFlush table, while this check involves only
        // a cheap read of a single record. Additionally, it will be exceedingly
        // rare that the last record is ever deleted, so this will generally
        // avoid excessive cache flush calls.
        if (!tamPromotionCust)
        {
            PriceDisc_LineDisc::tamPromotionCustClearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        boolean previousRecordsExisted = PriceDisc_LineDisc::doTamPromotionCustomersExist();

        super();

        // Only flush the cache if this is the first ever added record
        // in this company. At worst the cost is just one extra select
        // of a record, while under heavy usage it would be a cached lookup
        // on all subsequent operations.
        if (!previousRecordsExisted)
        {
            PriceDisc_LineDisc::tamPromotionCustClearCache();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
	<DeveloperDocumentation>@MCR25817</DeveloperDocumentation>
	<FormRef>TAMPromotionsManagmentMenu</FormRef>
	<Label>@MCR25817</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PromotionID</TitleField1>
	<TitleField2>CustAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>PromotionCustAccountIdx</PrimaryIndex>
	<ReplacementKey>PromotionCustAccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionCust</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MerchandisingEventID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRMerchandisingEventID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionCust</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionCustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PromotionCustAccountIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PromotionID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MerchandisingEventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MerchandisingEventID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustAccount</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustAccount</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMMerchandisingEvent</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TAMMerchandisingEvent</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MerchandisingEventID</Name>
					<SourceEDT>MCRMerchandisingEventID</SourceEDT>
					<Field>MerchandisingEventID</Field>
					<RelatedField>MerchandisingEventID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MerchID</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMPromotionCustAccount</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TAMPromotionCustAccount</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromotionCust</Name>
					<SourceEDT>TAMPromotionCustAccount</SourceEDT>
					<Field>PromotionCust</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMTradePromotion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TAMTradePromotion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromotionID</Name>
					<SourceEDT>TAMPromotionID</SourceEDT>
					<Field>PromotionID</Field>
					<RelatedField>PromotionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>