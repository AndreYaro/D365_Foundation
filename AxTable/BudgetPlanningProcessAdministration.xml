<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningProcessAdministration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningProcessAdministration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayBudgetingOrganizationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the organization type name for a <c>BudgetPlanningProcessAdministration</c> record.
    /// </summary>
    /// <returns>
    /// The name of the organization type for the <c>BudgetPlanningProcessAdministration</c> record.
    /// </returns>
    public display BudgetPlanningResponsibilityCenterType displayBudgetingOrganizationName()
    {
        OMOperatingUnit operatingUnit;
        BudgetPlanningResponsibilityCenterType name = "";

        if (hasTableAccess(tableNum(OMOperatingUnit)))
        {
            select firstonly RecId from operatingUnit
                where operatingUnit.RecId == this.BudgetingOrganization;

            if (operatingUnit)
            {
                name = enum2str(operatingUnit.omOperatingUnitType);
            }
            else
            {
                name = "@SYS315616";
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record into the <c>BudgetPlanningProcessAdministration</c> table.
    /// </summary>
    public void insert()
    {
        super();

        // Delete then create all budget planning stage rules for process
        BudgetPlanningProcessSetup::deleteAndCreateAllProcessStageRules(this.BudgetPlanningProcess, this.BudgetPlanningWorkflow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current record in the <c>BudgetPlanningProcessAdministration</c> table.
    /// </summary>
    public void update()
    {
        super();

        // Delete then create all budget planning stage rules for process
        BudgetPlanningProcessSetup::deleteAndCreateAllProcessStageRules(this.BudgetPlanningProcess, this.BudgetPlanningWorkflow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>BudgetPlanningWorkflow</c> field when the value is changed.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecIdOrig">
    /// The original value of the <c>BudgetPlanningWorkflow</c> field.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanningWorkflow(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecIdOrig)
    {
        boolean               isValid = true;
        BudgetPlanningProcess budgetPlanningProcess;
        BudgetPlanHeader      budgetPlanHeader;

        // Only validate when changing budget planning workflow field from a non zero to another non-zero.
        if (_budgetPlanningWorkflowRecIdOrig && _budgetPlanningWorkflowRecIdOrig != this.BudgetPlanningWorkflow)
        {
            select firstonly RecId from budgetPlanHeader
                where budgetPlanHeader.BudgetingOrganization     == this.BudgetingOrganization
                   && budgetPlanHeader.WorkflowStatus            != BudgetPlanWorkflowStatus::NotSubmitted
                   && budgetPlanHeader.BudgetPlanningProcess     == this.BudgetPlanningProcess
                join RecId from budgetPlanningProcess
                    where budgetPlanningProcess.ApprovalProcessState != BudgetPlanningApprovalProcessState::Draft;

            if (budgetPlanHeader)
            {
                isValid = checkFailed("@Budget:BudgetPlanning_Validation_CannotChangeWorkflow");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BudgetPlanningProcessAdministration, BudgetPlanningWorkflow):
                    isValid = this.validateBudgetPlanningWorkflow(this.orig().BudgetPlanningWorkflow);
                    break;

                default:
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanningProcessAdministration</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningProcessAdministrationRecId">
    /// The record ID of the <c>BudgetPlanningProcessAdministration</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningProcessAdministrationRecId _budgetPlanningProcessAdministrationRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningProcessAdministration::exist(_budgetPlanningProcessAdministrationRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningProcessAdministration::txtNotExist(), _budgetPlanningProcessAdministrationRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetPlanningProcessAdministration</c> table exists.
    /// </summary>
    /// <param name="_budgetPlanningProcessAdministrationRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanningProcessAdministrationRecId _budgetPlanningProcessAdministrationRecId)
    {
        return (BudgetPlanningProcessAdministration::find(_budgetPlanningProcessAdministrationRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPlanningProcessAdministration</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessAdministrationRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcessAdministration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcessAdministration find(
        BudgetPlanningProcessAdministrationRecId    _budgetPlanningProcessAdministrationRecId,
        boolean                                     _forupdate = false,
        ConcurrencyModel                            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        if (_budgetPlanningProcessAdministrationRecId)
        {
            budgetPlanningProcessAdministration.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningProcessAdministration.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.RecId == _budgetPlanningProcessAdministrationRecId;
        }

        return budgetPlanningProcessAdministration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningProcessAdministration</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of the <c>BudgetingOrganization</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcessAdministration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcessAdministration findByProcessOrganization(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        if (_budgetPlanningProcessRecId && _budgetingOrganizationRecId)
        {
            budgetPlanningProcessAdministration.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanningProcessAdministration.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
                &&    budgetPlanningProcessAdministration.BudgetingOrganization == _budgetingOrganizationRecId;
        }

        return budgetPlanningProcessAdministration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70233</DeveloperDocumentation>
	<Label>@GLS70231</Label>
	<SingularLabel>@GLS70232</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanningProcess</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetPlanningProcessAdminIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningWorkflow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetingOrganization</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetingOrganizationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningWorkflow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanningProcessAdminIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetingOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetingOrganization</Name>
					<Field>BudgetingOrganization</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningProcess</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningProcess</Name>
					<Field>BudgetPlanningProcess</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningWorflow</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanningWorkflow</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningWorkflow</Name>
					<Field>BudgetPlanningWorkflow</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>