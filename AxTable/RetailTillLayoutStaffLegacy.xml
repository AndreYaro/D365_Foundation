<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTillLayoutStaffLegacy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTillLayoutStaffLegacy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByStaffLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTillLayoutStaffLegacy</c> table.
    /// </summary>
    /// <param name = "_retailStaffTable">The mapping <c>RetailStaffTable</c>.</param>
    /// <param name = "_layoutId">The mapping <c>RetailLayoutId</c>.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>RetailTillLayoutStaffLegacy</c> table; otherwise, an empty record.</returns>
    public static RetailTillLayoutStaffLegacy findByStaffLayout(RetailStaffTable _retailStaffTable, RetailLayoutId _layoutId, boolean _forUpdate = false)
    {
        RetailTillLayoutStaffLegacy tillLayoutStaff;

        if (_retailStaffTable)
        {
            if (_layoutId)
            {
                tillLayoutStaff.selectForUpdate(_forUpdate);

                select firstonly tillLayoutStaff
                where
                    ((tillLayoutStaff.Staff == _retailStaffTable.RecId) && (tillLayoutStaff.LayoutId == _layoutId));
            }
        }

        return tillLayoutStaff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeObsoleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purge the records that no longer have valid references
    /// </summary>
    /// <returns>Number of records purged.</returns>
    private static int64 purgeObsoleteRecords()
    {
        RetailTillLayoutStaffLegacy retailTillLayoutStaffLegacy;
        RetailTillLayoutLegacy retailTillLayoutLegacy;
        RetailStaffTable retailStaffTable;

        int64 deleteCount = 0;

        // Purge records that are no longer referenced - considering three options - with various impact on CDX
        // 1. Afer inserting new records, do second full loop to purge unreferenced records [as implemented]
        // 2. Always pure this table before generating new data
        // 3. Max index count +1 set on any insret/update then purge records with older count.
        while select forupdate retailTillLayoutStaffLegacy
                outer join retailStaffTable where (retailTillLayoutStaffLegacy.Staff == retailStaffTable.RecId)
                outer join retailTillLayoutLegacy where (retailTillLayoutStaffLegacy.LayoutId == retailTillLayoutLegacy.layoutId)
        {
            if (
                    (RetailStaffTable.RecId == 0) || // The Staff no longer exists
                    (retailTillLayoutLegacy.RecId == 0) || // The layout no longer exists
                    (retailStaffTable.LayoutId != retailTillLayoutLegacy.ConfiguraitonLayoutId) // The size within the Group no longer exists
                )
            {
                // The record is no longer mapped so it should be deleted...
                retailTillLayoutStaffLegacy.delete(); // Consdier if there are other valid optomization options such as delete_from
                deleteCount += 1;
            }
        }

        return deleteCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateDowngradeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate data for <c>RetailTillLayoutStoreLegacy</c> for AX2012 "downgrade" N-1 compatiblity.  This assumes that data has already been generated in
    /// <c>RetailTillLayoutLegacy</c>.
    /// </summary>
    /// <returns>Number of records updated.</returns>
    public static int64 duplicateDowngradeData()
    {
        RetailTillLayoutStaffLegacy retailTillLayoutStaffLegacy;
        RetailTillLayoutLegacy retailTillLayoutLegacy;
        RetailStaffTable retailStaffTable;
        int64 updateCount = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)))
        {
            // This feature is only enabled for N-1 AX2012 legacy support

            ttsbegin;

            // Insert records that are missing (if is already exist it does not need to be updated)
            while select retailStaffTable
                join retailTillLayoutLegacy
                where (retailStaffTable.layoutId != '') && (retailStaffTable.layoutId == retailTillLayoutLegacy.ConfiguraitonLayoutId)
            {
                // Look for the specific instance with the generated LayoutId
                retailTillLayoutStaffLegacy = RetailTillLayoutStaffLegacy::findByStaffLayout(retailStaffTable, retailTillLayoutLegacy.layoutId);
                if (retailTillLayoutStaffLegacy.RecId == 0)
                {
                    // No record was found - so we need to insert it.  If record was found, no update is required.
                    retailTillLayoutStaffLegacy.Staff = retailStaffTable.RecId;
                    retailTillLayoutStaffLegacy.LayoutId = retailTillLayoutLegacy.layoutId;
                    retailTillLayoutStaffLegacy.insert();
                    updateCount += 1;
                }
            }

            RetailTillLayoutStaffLegacy::purgeObsoleteRecords();
 
            ttscommit;
        }

        return updateCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
	<DeveloperDocumentation>@REX4160649</DeveloperDocumentation>
	<Label>@REX4160650</Label>
	<TitleField1>Staff</TitleField1>
	<TitleField2>LayoutId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>BrickAndMortarStore</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Staff</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Staff</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Staff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StaffLayoutIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LayoutId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Staff</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStaffTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStaffTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Staff</Name>
					<Field>Staff</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTillLayout</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTillLayoutLegacy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutId</Name>
					<SourceEDT>RetailLayoutId</SourceEDT>
					<Field>LayoutId</Field>
					<RelatedField>layoutId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LayoutIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>