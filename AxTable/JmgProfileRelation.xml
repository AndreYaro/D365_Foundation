<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileRelation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgProfileRelation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>endDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the end day value of the <c>JmgProfileRelation</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="_value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The end day value of the <c>JmgProfileRelation</c> record.
    /// </returns>
    public edit JmgToDayInMonth endDay(boolean _set, JmgToDayInMonth _value)
    {
        JmgToDayInMonth ret;
        if (_set)
        {
            if (this.EndDate)
            {
                this.EndDate    = mkDate(_value, mthOfYr(this.EndDate), year(this.EndDate));
            }
            else
            {
                this.EndDate    = mkDate(_value, MonthsOfYear::January, year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
            }
        }

        if (this.EndDate)
        {
            ret = dayOfMth(this.EndDate);
        }
        else
        {
            ret = 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the from month value of the <c>JmgProfileRelation</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="_value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The from month value of the <c>JmgProfileRelation</c> record.
    /// </returns>
    public edit JmgFromMonth fromMonth(boolean _set, JmgToMonth _value)
    {
        JmgFromMonth    ret;
        if (_set)
        {
            if (this.StartDate)
            {
                this.StartDate = mkDate(dayOfMth(this.StartDate), _value, year(this.StartDate));
            }
            else
            {
                this.StartDate = mkDate(1, _value, year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
            }
        }

        if (this.StartDate)
        {
            ret = mthOfYr(this.StartDate);
        }
        else
        {
            ret = MonthsOfYear::None;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the start day value of the <c>JmgProfileRelation</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="_value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The start day value of the <c>JmgProfileRelation</c> record.
    /// </returns>
    public edit JmgFromDayInMonth startDay(boolean _set, JmgFromDayInMonth _value)
    {
        JmgFromDayInMonth ret;
        if (_set)
        {
            if (this.StartDate)
            {
                this.StartDate  = mkDate(_value, mthOfYr(this.StartDate), year(this.StartDate));
            }
            else
            {
                this.StartDate  = mkDate(_value, MonthsOfYear::January, year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
            }
        }

        if (this.StartDate)
        {
            ret = dayOfMth(this.StartDate);
        }
        else
        {
            ret = 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the to month value of the <c>JmgProfileRelation</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="_value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The to month day value of the <c>JmgProfileRelation</c> record.
    /// </returns>
    public edit JmgToMonth toMonth(boolean _set, JmgToMonth _value)
    {
        JmgToMonth  ret;
        if (_set)
        {
            if (this.EndDate)
            {
                this.EndDate = mkDate(dayOfMth(this.EndDate), _value, year(this.EndDate));
            }
            else
            {
                this.EndDate = mkDate(1, _value, year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
            }
        }

        if (this.EndDate)
        {
            ret = mthOfYr(this.EndDate);
        }
        else
        {
            ret = MonthsOfYear::None;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean             ret;
        JmgDate             sd;
        JmgDate             ed;
        JmgDate             overlapStartDate;
        JmgDate             overlapEndDate;
        JmgProfileRelation  overlapRelation;

        ret = super();

        // From time must be before to time.
        if (this.FromTime > this.ToTime)
        {
            ret = checkFailed(strFmt("@SYS24648",time2str(this.ToTime,0,0)));
        }

        // If either from or to date is specified, both of them must be specified.
        if ((this.StartDate && !this.EndDate) ||
            (this.EndDate   && !this.StartDate))
        {
            ret = ret && checkFailed("@SYS39609");
        }

        // If both are specified, then from date must fall before end date.
        if (ret && this.StartDate && this.EndDate)
        {
            sd = mkDate(dayOfMth(this.StartDate), mthOfYr(this.StartDate), year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
            ed = mkDate(dayOfMth(this.EndDate),   mthOfYr(this.EndDate),   year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
            if (sd > ed)
            {
                ret = checkFailed("@SYS16982");
            }
        }

        // Check for overlap:
        if (ret && !this.StartDate && !this.EndDate)   // No date limitation. Check for one with overlapping time interval
        {
            select firstonly RecId
                from  overlapRelation
                where overlapRelation.ProfileGroupId    == this.ProfileGroupId  &&
                      overlapRelation.RecId             != this.RecId           &&
                      ((overlapRelation.FromTime        >= this.FromTime        &&
                        overlapRelation.FromTime        <  this.ToTime)         ||
                       (overlapRelation.ToTime          >  this.FromTime        &&
                        overlapRelation.ToTime          <= this.ToTime)         ||
                       (overlapRelation.FromTime        <  this.FromTime        &&
                        overlapRelation.ToTime          >  this.ToTime));
            if (overlapRelation)
            {
                ret = checkFailed("@SYS99975");
            }
        }
        else if (ret)
        {
            // Date interval specified.
            // Find overlap in records with no date limitation
            select firstonly RecId
                from  overlapRelation
                where overlapRelation.ProfileGroupId    == this.ProfileGroupId  &&
                      overlapRelation.RecId             != this.RecId           &&
                      !overlapRelation.StartDate                                &&
                      !overlapRelation.EndDate                                  &&
                       ((overlapRelation.FromTime        >= this.FromTime       &&
                         overlapRelation.FromTime        <  this.ToTime)        ||
                        (overlapRelation.ToTime          >  this.FromTime       &&
                         overlapRelation.ToTime          <= this.ToTime)        ||
                        (overlapRelation.FromTime        <  this.FromTime       &&
                         overlapRelation.ToTime          >  this.ToTime));

            if (overlapRelation)
            {
                ret = checkFailed("@SYS99975");
            }

            if (ret)
            {
                sd = mkDate(dayOfMth(this.StartDate), mthOfYr(this.StartDate), year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
                ed = mkDate(dayOfMth(this.EndDate),   mthOfYr(this.EndDate),   year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
                // Find overlap in records with date limitation
                while select RecId, StartDate, EndDate
                    from  overlapRelation
                    where overlapRelation.ProfileGroupId    == this.ProfileGroupId  &&
                          overlapRelation.RecId             != this.RecId           &&
                          overlapRelation.StartDate                                 &&
                          overlapRelation.EndDate                                   &&
                          ((overlapRelation.FromTime        >= this.FromTime        &&
                            overlapRelation.FromTime        <  this.ToTime)         ||
                           (overlapRelation.ToTime          >  this.FromTime        &&
                            overlapRelation.ToTime          <= this.ToTime)         ||
                           (overlapRelation.FromTime        <  this.FromTime        &&
                            overlapRelation.ToTime          >  this.ToTime))
                {
                    // Check id date intervals is overlapping
                    overlapStartDate    = mkDate(dayOfMth(overlapRelation.StartDate), mthOfYr(overlapRelation.StartDate), year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
                    overlapEndDate      = mkDate(dayOfMth(overlapRelation.EndDate),   mthOfYr(overlapRelation.EndDate),   year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

                    if ((overlapStartDate   >= sd   &&
                         overlapStartDate   <= ed)  ||
                        (overlapEndDate     >= sd   &&
                         overlapEndDate     <= ed)  ||
                        (overlapStartDate   < sd    &&
                         overlapEndDate     > ed))
                    {
                        ret = checkFailed("@SYS99975");
                        break;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317298</DeveloperDocumentation>
	<Label>@SYS38523</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProfileGroupId</TitleField1>
	<TitleField2>FromTime</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>GroupTimeDateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateInterval</Name>
			<Label>@SYS22526</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>startDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>endDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fromMonth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>toMonth</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS22882</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgFromTime</ExtendedDataType>
			<Label>@SYS38489</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProfileGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS2168</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgToTime</ExtendedDataType>
			<Label>@SYS38490</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupTimeDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProfileGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EndDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProfileGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>JmgProfileGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProfileGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProfileRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileGroupId</Name>
					<Field>ProfileGroupId</Field>
					<RelatedField>ProfileGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProfileTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProfileTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProfileRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileId</Name>
					<Field>ProfileId</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>