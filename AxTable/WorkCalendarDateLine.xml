<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarDateLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkCalendarDateLine extends common
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capacity</Name>
				<Source><![CDATA[
    public CapacityValue capacity(
        Percent _effectivity    = 100,
        boolean _useEffectivity = true)
    {
        if (!_useEffectivity)
        {
            return (this.ToTime - this.FromTime);
        }

        if (this.Effectivity)
        {
            return  (this.ToTime - this.FromTime) *
                     this.Effectivity / 100 *
                     _effectivity     / 100;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.flushWorkCalendarDateCache(this.CalendarId, this.TransDate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the earning code.
    /// </summary>
    /// <param name="set">
    ///    Set to true if the earning code is set; otherwise, set to false.
    /// </param>
    /// <param name="_earningCode">
    ///    The new earning code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    ///    The earning code of the record in the <c>PayrollWorkCalendarLine</c> table.
    /// </returns>
    public edit PayrollEarningCodeId editEarningCode(boolean set, PayrollEarningCodeId _earningCode)
    {
        PayrollEarningCodeId        earningCode = strLRTrim(_earningCode);
        PayrollEarningCodeRecId     providedEarningCodeRecId;
        PayrollWorkCalendarLine     payrollWorkCalendarLine;
        if (isConfigurationkeyEnabled(configurationKeyNum(HRMAdministrationPayrollInfo)))
        {
            if (set)
            {
                payrollWorkCalendarLine = PayrollWorkCalendarLine::findByWorkCalendarDateLine(this.RecId);
                if (payrollWorkCalendarLine.RecId == 0)
                {
                    providedEarningCodeRecId = PayrollEarningCode::findByEarningCode(earningCode).RecId;

                    if (providedEarningCodeRecId)
                    {
                        PayrollWorkCalendarLine::createFromCode(providedEarningCodeRecId, this.RecId);
                    }
                    else
                    {
                        warning(strFmt("@SYS316757", "@GLS92520"));
                    }
                }
                else
                {
                    if (earningCode != '')
                    {
                        providedEarningCodeRecId = PayrollEarningCode::findByEarningCode(earningCode).RecId;

                        if (providedEarningCodeRecId)
                        {
                            PayrollWorkCalendarLine::updateCode(providedEarningCodeRecId, this.RecId);
                        }
                        else
                        {
                            warning(strFmt("@SYS316757", "@GLS92520"));
                        }
                    }
                    else
                    {
                        // The earning code is blank.
                        PayrollWorkCalendarLine::deleteByWorkCalendarLine(this.RecId);
                    }
                }
            }
            else
            {
                earningCode = PayrollEarningCode::find(PayrollWorkCalendarLine::findByWorkCalendarDateLine(this.RecId).EarningCode).EarningCode;
            }
        }
        else
        {
            earningCode = '';
        }

        return earningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectivityFactor</Name>
				<Source><![CDATA[
    public Factor effectivityFactor(Percent _wrkCtrEffectivity)
    {
        return this.effectivityPct(_wrkCtrEffectivity) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectivityPct</Name>
				<Source><![CDATA[
    public Percent effectivityPct(Percent _wrkCtrEffectivity)
    {
        return (this.Effectivity * _wrkCtrEffectivity / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushWorkCalendarDateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove the cached value in WorkCalendarDate table based on CalendarId and TransDate.
    /// </summary>
    /// <param name="_calendarId">
    /// The calendar's ID.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    public void flushWorkCalendarDateCache(CalendarId _calendarId, TransDate _transDate)
    {
        this.flushWorkCalendarDateCacheCurrentCompany(_calendarId, _transDate);
        
        this.flushWorkCalendarDateCacheCrossCompany(_calendarId, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushWorkCalendarDateCacheCurrentCompany</Name>
				<Source><![CDATA[
    private void flushWorkCalendarDateCacheCurrentCompany(CalendarId _calendarId, TransDate _transDate)
    {
        SysGlobalCache cache = appl.globalCache();

        str cacheKey = WorkCalendarDate::getCalcDefinedHoursCacheKey(_calendarId, _transDate, true, curext());
        cache.remove(tableStr(WorkCalendarDate), cacheKey);

        cacheKey = WorkCalendarDate::getCalcDefinedHoursCacheKey(_calendarId, _transDate, false, curext());
        cache.remove(tableStr(WorkCalendarDate), cacheKey);

        WrkCtrWorkingTimes::invalidateGlobalCacheScope();
        WrkCtrWorkingTimesCache::invalidateCalendar(_calendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushWorkCalendarDateCacheCrossCompany</Name>
				<Source><![CDATA[
    private void flushWorkCalendarDateCacheCrossCompany(CalendarId _calendarId, TransDate _transDate)
    {
        if (WorkCalendarDateLineSharingCrossCompanyFlight::instance().isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query    query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
                QueryRun queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    WorkCalendarDateLine companyWorkCalendarDateLine = queryRun.get(this.TableId);
                    DataAreaId company = companyWorkCalendarDateLine.DataAreaId;
                    if (companyWorkCalendarDateLine && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            this.flushWorkCalendarDateCacheCurrentCompany(_calendarId, _transDate);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkCalendarDate</Name>
				<Source><![CDATA[
    public void initFromWorkCalendarDate(WorkCalendarDate  _workCalendarDate)
    {
        this.CalendarId         = _workCalendarDate.CalendarId;
        this.TransDate          = _workCalendarDate.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkTimeLine</Name>
				<Source><![CDATA[
    void initFromWorkTimeLine(WorkTimeLine  _workTimeLine)
    {
        this.FromTime           = _workTimeLine.FromTime;
        this.ToTime             = _workTimeLine.ToTime;
        this.Effectivity        = _workTimeLine.Effectivity;
        this.PropertyId         = _workTimeLine.PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.Effectivity = 100;
        this.ToTime = #secondsPerDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.flushWorkCalendarDateCache(this.CalendarId, this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if ((this.orig().CalendarId != this.CalendarId) || (this.orig().TransDate != this.TransDate))
        {
            this.flushWorkCalendarDateCache(this.orig().CalendarId, this.orig().TransDate);
        }

        super();

        this.flushWorkCalendarDateCache(this.CalendarId, this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTimeCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a work time checker for the current record.
    /// </summary>
    /// <returns>A work time checker.</returns>
    protected WorkTimeCheck createWorkTimeCheck()
    {
        return new WorkTimeCheck(this.FromTime, this.ToTime, this.Effectivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the to and from times.
    /// </summary>
    /// <returns>true if valid; otherwise, false.</returns>
    [Wrappable]
    protected internal boolean checkTime()
    {
        return this.createWorkTimeCheck().checkRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOverlapValidationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to validate overlaps.
    /// </summary>
    /// <param name = "_workCalendarDateLine">The cursor for the query.</param>
    /// <returns>The query to validate overlaps.</returns>
    protected SysDaQueryObject buildOverlapValidationQuery(WorkCalendarDateLine _workCalendarDateLine)
    {
        SysDaQueryObject query = new SysDaQueryObject(_workCalendarDateLine);

        query.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(_workCalendarDateLine, fieldStr(WorkCalendarDateLine, CalendarId)), new SysDaValueExpression(this.CalendarId))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_workCalendarDateLine, fieldStr(WorkCalendarDateLine, TransDate)), new SysDaValueExpression(this.TransDate))
            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_workCalendarDateLine, fieldStr(WorkCalendarDateLine, RecId)), new SysDaValueExpression(this.RecId)))));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for overlap with other existing periods.
    /// </summary>
    /// <returns>true if valid; otherwise, false.</returns>
    internal boolean checkOverlap()
    {
        WorkTimeCheck workTimeCheck = this.createWorkTimeCheck();
        WorkCalendarDateLine workCalendarDateLine;
        SysDaSearchObject searchObject = new SysDaSearchObject(this.buildOverlapValidationQuery(workCalendarDateLine));
        SysDaSearchStatement statement = new SysDaSearchStatement();

        while (statement.nextRecord(searchObject))
        {
            if (workCalendarDateLine.isOverlapping(workTimeCheck))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverlapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record is overlapping with the time checker.
    /// </summary>
    /// <param name = "_workTimeCheck">The time checker.</param>
    /// <returns>true if overlapping; otherwise, false.</returns>
    protected boolean isOverlapping(WorkTimeCheck _workTimeCheck)
    {
        return !_workTimeCheck.checkNotOverlapping(this.FromTime, this.ToTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.checkTime();
        ret = ret && this.checkOverlap();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>WorkCalendarDateLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>WorkCalendarDateLine</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from workCalendarDateLine
                    where workCalendarDateLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WorkCalendarDateLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>WorkCalendarDateLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the <c>WorkCalendarDateLine</c> table; otherwise, an empty record.
    /// </returns>
    public static WorkCalendarDateLine find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        WorkCalendarDateLine  workCalendarDateLine;

        if (_recId)
        {
            workCalendarDateLine.selectForUpdate(_forUpdate);

            select firstonly workCalendarDateLine
                where workCalendarDateLine.RecId == _recId;
        }

        return workCalendarDateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(WorkCalendarDateLine, ToTime),
                [fieldNum(WorkCalendarDateLine, ToTime)]
        ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WorkCalendarDateLine, ToTime):
                if (this.ToTime == 0)
                {
                    // Needed in order to support 12H calendar entry of midnight
                    this.ToTime = #secondsPerDay;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the working duration, in seconds.
    /// </summary>
    /// <returns>The working duration, in seconds.</returns>
    public Seconds duration()
    {
        return this.ToTime - this.FromTime;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS124212</DeveloperDocumentation>
	<FormRef>WorkCalendarDate</FormRef>
	<Label>@SYS11965</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>FromTime</TitleField1>
	<TitleField2>ToTime</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CalendarDateFromIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CalendarDateFromIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Effectivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameters</Name>
			<Label>@SYS7764</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Effectivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Property</Name>
			<Label>@SYS682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkingTime</Name>
			<Label>@SYS11965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Effectivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EffectivityPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromTime</ExtendedDataType>
			<Label>@SCM:WorkCalendarFrom</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToTime</ExtendedDataType>
			<Label>@SCM:WorkCalendarTo</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalendarDateFromIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CalendarId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkCalenderDate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124213</EntityRelationshipRole>
			<RelatedTable>WorkCalendarDate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WorkingTime</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkingTime</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PropertyIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>