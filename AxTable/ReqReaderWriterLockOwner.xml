<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqReaderWriterLockOwner</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The table tracks who is the owner of an update / exclusive lock acquired by using ReqReaderWriterLock class.
/// The information about the owner is only tracked if the functionality is enabled on the used ReqReaderWriterLock instance.
/// </summary>
internal class ReqReaderWriterLockOwner extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIsOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if update / exclusive lock is owned by the owner with a given id. 
    /// </summary>
    /// <param name = "_lockName">Lock name.</param>
    /// <param name = "_ownerId">Owner id.</param>
    /// <returns>true if update / exclusive lock with a given name is owned by the owner with a given id; false otherwise</returns>
    internal static boolean checkIsOwner(ReqReaderWriterLockName _lockName, ReqReaderWriterLockOwnerId _ownerId)
    {
        ReqReaderWriterLockOwner owner;

        select RecId from owner
            where owner.LockName == _lockName
              &&  owner.OwnerId == _ownerId;

        return owner.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>ReqReaderWriterLockOwner</c> for a given lock name.
    /// </summary>
    /// <param name = "_lockName">Lock name.</param>
    /// <param name = "_forUpdate">Boolean indicating if the record should be selected for update; optional.</param>
    /// <returns>Returns <c>ReqReaderWriterLockOwner</c> for a given lock name.</returns>
    internal static ReqReaderWriterLockOwner find(ReqReaderWriterLockName _lockName, boolean _forUpdate = false)
    {
        ReqReaderWriterLockOwner owner;

        if (!_lockName)
        {
            return owner;
        }

        owner.selectForUpdate(_forUpdate);

        select firstonly owner
            where owner.LockName == _lockName;

        return owner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SCMPlanning:ReqReaderWriterLockOwnerDeveloperDocumentation</DeveloperDocumentation>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Visibility>Internal</Visibility>
	<Visible>No</Visible>
	<ClusteredIndex>LockNameIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>LockNameIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LockName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ReqReaderWriterLockName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>OwnerId</Name>
			<ExtendedDataType>ReqReaderWriterLockOwnerId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LockNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LockName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OwnerIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OwnerId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ModifiedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ModifiedDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>