<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionBankTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionBankTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editBankRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the bank relation.
    /// </summary>
    /// <param name="set">
    /// true if the bank relation is set; otherwise, false.
    /// </param>
    /// <param name="_bankRelation">
    /// The bank relation to be set.
    /// </param>
    /// <returns>
    /// The bank relation in the <c>JournalizingDefinitionBankTrans</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit BankRelation editBankRelation(boolean set, BankRelation _bankRelation)
    {
        if (set)
        {
            this.setBankRelation(_bankRelation);
        }
        else
        {
            _bankRelation = this.getBankRelation();
        }

        return _bankRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editJournalizngDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the journalizing definition code.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether to set the value of the journalizing definition code.
    /// </param>
    /// <param name="_journalizingDefinitionCode">
    /// The journalizing definition code to set.
    /// </param>
    /// <returns>
    /// The journalizing definition code of the record in the <c>JournalizingDefinition</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit JournalizingDefinitionCode editJournalizngDefinition(boolean set, JournalizingDefinitionCode _journalizingDefinitionCode)
    {
        if (set)
        {
            if (JournalizingDefinition::exist(_journalizingDefinitionCode))
            {
                if (JournalizingDefinition::checkExistJournalizingDefinitionByModule(_journalizingDefinitionCode, JournalizingDefinitionModuleId::Bank))
                {
                    this.JournalizingDefinition = JournalizingDefinition::find(_journalizingDefinitionCode).RecId;
                }
            }
            else
            {
                checkFailed(strFmt("@SYS316352", _journalizingDefinitionCode, fieldPName(JournalizingDefinition, JournalizingDefinitionCode), tablePName(JournalizingDefinition)));
            }
        }
        else
        {
            _journalizingDefinitionCode = JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionCode;
        }

        return _journalizingDefinitionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVendPaymModeRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the vendor method of the payment relation.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether to set the value of the vendor method of payment relation.
    /// </param>
    /// <param name="_vendPaymModeRelation">
    /// The vendor method of payment relation to set.
    /// </param>
    /// <returns>
    /// The vendor method of payment relation in the <c>JournalizingDefinitionBankTrans</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit VendPaymModeRelation editVendPaymModeRelation(boolean set, VendPaymModeRelation _vendPaymModeRelation)
    {
        if (set)
        {
            this.setVendPaymModeRelation(_vendPaymModeRelation);
        }
        else
        {
            _vendPaymModeRelation = this.getVendPaymModeRelation();
        }

        return _vendPaymModeRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank relation.
    /// </summary>
    /// <returns>
    /// The bank relation of the record in the <c>JournalizingDefinitionBankTrans</c> table.
    /// </returns>
    private BankRelation getBankRelation()
    {
        BankRelation   bankRelation;

        switch ( this.BankCode )
        {
            case TableGroupAll::GroupId:
                bankRelation = this.BankGroupId;
                break;

            case TableGroupAll::Table:
                bankRelation = this.BankId;
                break;

            case TableGroupAll::All:
                bankRelation = '';
                break;
        }

        return bankRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendPaymModeRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor method of payment relation.
    /// </summary>
    /// <returns>
    /// The vendor method of payment relation of the record in the <c>JournalizingDefinitionBankTrans</c> table.
    /// </returns>
    private VendPaymModeRelation getVendPaymModeRelation()
    {
        VendPaymModeRelation   vendPaymModeRelation;

        switch ( this.VendPaymModeCode )
        {
            case TableAll::Table:
                vendPaymModeRelation = this.VendPaymModeId;
                break;

            case TableAll::All:
                vendPaymModeRelation = '';
                break;
        }

        return vendPaymModeRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizingDefinitionDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the posting definition description based on a posting definition code.
    /// </summary>
    /// <returns>
    /// The posting definition description to display to the user.
    /// </returns>
    /// <remarks>
    /// This method returns the posting definition description based on a posting Definition code.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display JournalizingDefinitionDesc journalizingDefinitionDescription()
    {
        return JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bank relation.
    /// </summary>
    /// <param name="_bankRelation">
    /// The bank relation to set in the <c>JournalizingDefinitionBankTrans</c> table.
    /// </param>
    private void setBankRelation(BankRelation _bankRelation)
    {
        if (!_bankRelation)
        {
            this.BankId = '';
            this.BankGroupId = '';
        }
        else
        {
            switch ( this.BankCode )
            {
                case TableGroupAll::GroupId:
                    if (!BankGroup::find(_bankRelation).RecId)
                    {
                        checkFailed(strFmt("@SYS316352", _bankRelation, "@SYS69772", tablePName(BankGroup)));
                    }
                    else
                    {
                        this.BankGroupId = _bankRelation;
                        this.BankId = '';
                    }
                    break;

                case TableGroupAll::Table:
                    if (!BankAccountTable::find(_bankRelation).RecId)
                    {
                        checkFailed(strFmt("@SYS316352", _bankRelation, "@SYS69772", tablePName(BankAccountTable)));
                    }
                    else
                    {
                        this.BankId = _bankRelation;
                        this.BankGroupId = '';
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendPaymModeRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor method of payment relation.
    /// </summary>
    /// <param name="_vendPaymModeRelation">
    /// The vendor method of payment relation to set in the <c>JournalizingDefinitionBankTrans</c> table.
    /// </param>
    private void setVendPaymModeRelation(VendPaymModeRelation _vendPaymModeRelation)
    {
        if (!_vendPaymModeRelation)
        {
            this.VendPaymModeId = '';
        }
        else
        {
            switch ( this.VendPaymModeCode )
            {
                case TableAll::Table:
                    if (this.BankTransactionTypes == BankTransactionTypes::AccountsReceivableSettlement && !CustPaymModeTable::find(_vendPaymModeRelation).RecId)
                    {
                        checkFailed(strFmt("@SYS316352", _vendPaymModeRelation, fieldPName(CustPaymModeTable, PaymMode), tablePName(CustPaymModeTable)));
                    }
                    else if (this.BankTransactionTypes != BankTransactionTypes::AccountsReceivableSettlement && !VendPaymModeTable::find(_vendPaymModeRelation).RecId)
                    {
                        checkFailed(strFmt("@SYS316352", _vendPaymModeRelation, fieldPName(VendPaymModeTable, PaymMode), tablePName(VendPaymModeTable)));
                    }
                    else
                    {
                        this.VendPaymModeId = _vendPaymModeRelation;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(JournalizingDefinitionBankTrans, JournalizingDefinition):
                ret = JournalizingDefinition::checkExistJournalizingDefinitionByModule(JournalizingDefinition::findByRecId(this.JournalizingDefinition).JournalizingDefinitionCode, JournalizingDefinitionModuleId::Bank);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.VendPaymModeCode == TableAll::Table && !this.VendPaymModeId)
        {
            ret = checkFailed("@SYS316353");
        }
        if ((this.BankCode == TableGroupAll::GroupId && !this.BankGroupId) ||
            (this.BankCode == TableGroupAll::Table && !this.BankId) )
        {
            ret = checkFailed("@SYS316354");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified <c>recId</c> value exists in the table and reports an error if it
    ///    does not exist.
    /// </summary>
    /// <param name="_recId">
    ///    The posting definition code to find.
    /// </param>
    /// <returns>
    ///    true if the <c>recId</c> value exists in the table; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!JournalizingDefinitionBankTrans::exist(_recId))
        {
            ret = checkFailed(strFmt(JournalizingDefinitionBankTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified <c>recId</c> value exists in the table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>recId</c> value to find.
    /// </param>
    /// <returns>
    ///    true if the <c>recId</c> value exists in the table; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinitionBankTrans
                    where
                        journalizingDefinitionBankTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches the <c>JournalizingDefinitionBankTrans</c> table for the specified <c>recId</c> value.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>recId</c> value to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model to use.
    /// </param>
    /// <returns>
    ///    A <c>JournalizingDefinitionBankTrans</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static JournalizingDefinitionBankTrans find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionBankTrans journalizingDefinitionBankTrans;

        journalizingDefinitionBankTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionBankTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionBankTrans
            where
            journalizingDefinitionBankTrans.RecId == _recId;

        return journalizingDefinitionBankTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalizingDefinitionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches the <c>JournalizingDefinitionBankTrans</c> table for the specified <c>recId</c> value.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    ///    The <c>recId</c> value to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A <c>JournalizingDefinitionBankTrans</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static JournalizingDefinitionBankTrans findByJournalizingDefinitionId(
        JournalizingDefinitionId _journalizingDefinitionId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionBankTrans journalizingDefinitionBankTrans;

        journalizingDefinitionBankTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionBankTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionBankTrans
            where
            journalizingDefinitionBankTrans.JournalizingDefinition == _journalizingDefinitionId;

        return journalizingDefinitionBankTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>JournalizingDefinitionBankTrans</c> table
    ///    does not exist.
    /// </summary>
    /// <returns>
    ///    A message that states that the record does not exist.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128269";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SYS316343</DeveloperDocumentation>
	<FormRef>JournalizingDefinitionTrans</FormRef>
	<Label>@SYS316344</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BankTransactionTypes</TitleField1>
	<TitleField2>JournalizingDefinition</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>AccountingFoundation</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankTransactionTypes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editBankRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPaymModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editJournalizngDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>journalizingDefinitionDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editVendPaymModeRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankTransactionTypes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankTransactionTypes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPaymModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPaymModeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankTableGroupAll</ExtendedDataType>
			<Label>@SYS66145</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankTransactionTypes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankTransactionTypes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendPaymModeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymModeTableAll</ExtendedDataType>
			<EnumType>TableAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymModeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymMode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BankTransactionTypes</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendPaymModeCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendPaymModeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankGroupId</Name>
					<SourceEDT>BankGroupId</SourceEDT>
					<Field>BankGroupId</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BankGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinition</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>JournalizingDefinitionBankTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinition</Name>
					<Field>JournalizingDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendPaymModeId</Name>
					<SourceEDT>VendPaymMode</SourceEDT>
					<Field>VendPaymModeId</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>