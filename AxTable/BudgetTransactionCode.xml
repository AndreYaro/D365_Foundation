<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetTransactionCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>updateIsDefault</c> method.
    /// </summary>
    public void insert()
    {
        this.updateIsDefault();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>updateIsDefault</c> method.
    /// </summary>
    public void update()
    {
        this.updateIsDefault();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages the behavior of the <c>IsDefault</c> field when the budget transaction codes are saved.
    /// </summary>
    private void updateIsDefault()
    {
        BudgetTransactionCode budgetTransactionCode;

        if (this.IsDefault == NoYes::Yes)
        {
            // If this code is being marked as the default, unmark all others that are default for this type.
            while select forupdate budgetTransactionCode
                where budgetTransactionCode.BudgetTransactionType == this.BudgetTransactionType &&
                      budgetTransactionCode.IsDefault == NoYes::Yes &&
                      budgetTransactionCode.RecId != this.RecId
            {
                budgetTransactionCode.IsDefault = NoYes::No;
                budgetTransactionCode.doUpdate();
            }
        }
        else
        {
            select firstonly count(RecId) from budgetTransactionCode
                where budgetTransactionCode.BudgetTransactionType == this.BudgetTransactionType &&
                      budgetTransactionCode.IsDefault == NoYes::Yes &&
                      budgetTransactionCode.RecId != this.RecId;

            if (budgetTransactionCode.RecId == 0)
            {
                // If no other code for this type is marked as default,
                // set the code that is being saved as default.
                this.IsDefault = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the budget transaction type is valid.
    /// </summary>
    /// <returns>
    ///     true if the budget transaction type is valid; otherwise, false.
    /// </returns>
    public boolean validateBudgetTransactionType()
    {
        boolean isValid = true;

        if (!this.isBudgetTransactionTypeSet())
        {
            isValid = checkFailed("@Budget:BlankBudgetTypeError");
        }
        else if (this.RecId != 0 &&
            this.orig().BudgetTransactionType != this.BudgetTransactionType &&
            BudgetTransactionHeader::existForBudgetTransactionCode(this.RecId))
        {
            isValid = checkFailed(strfmt("@SYS330249", this.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetTransactionTypeSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the budget transaction type is set.
    /// </summary>
    /// <returns>
    ///     true if the budget transaction type is not blank; otherwise, false.
    /// </returns>
    public boolean isBudgetTransactionTypeSet()
    {
        boolean isBudgetTransactionTypeSet = this.BudgetTransactionType != BudgetTransactionType::Blank;

        return isBudgetTransactionTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.IsDefault == NoYes::Yes)
        {
            // Don't allow the deletion of codes that are marked as default.
            ret = checkFailed(strfmt("@SYS127807", this.BudgetTransactionType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldnum(BudgetTransactionCode, Reason)) :
                    if (this.Reason != '' && ReasonTable::find(this.Reason).Ledger == NoYes::No)
                    {
                        ret = checkFailed(strfmt("@SYS34253", ReasonCodeAccountTypeAll::Ledger));
                    }
                    break;

                case (fieldnum(BudgetTransactionCode, WorkflowTableSequenceNumber)) :
                    ret = this.validateWorkflowTableSequenceNumber();
                    break;

                case (fieldnum(BudgetTransactionCode, BudgetTransactionType)) :
                    ret = this.validateBudgetTransactionType();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowTableSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>WorkflowTableSequenceNumber</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>WorkflowTableSequenceNumber</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateWorkflowTableSequenceNumber()
    {
        boolean isValid = true;

        WorkflowVersionTable workflowVersionTable;

        if (this.WorkflowTableSequenceNumber)
        {
            workflowVersionTable = WorkflowVersionTable::findSequenceNumber(this.WorkflowTableSequenceNumber);

            if (workflowVersionTable &&
                workflowVersionTable.workflowTable().TemplateName != workflowtypestr(BudgetRegisterEntryReview))
            {
                // Workflow type is not BudgetRegisterEntryReview.
                isValid = checkFailed(strfmt("@SYS323412", this.WorkflowTableSequenceNumber));
            }

            if (isValid &&
                (!workflowVersionTable ||
                !workflowVersionTable.Enabled))
            {
                // Workflow version is not the active version.
                isValid = checkFailed(strfmt("@SYS323409", this.WorkflowTableSequenceNumber));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.validateBudgetTransactionType() && ret;

        ret = this.validateWorkflowTableSequenceNumber() && ret;

        ret = BudgetTransactionCode::validateDefaultTransactionCode(this) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>BudgetTransactionCode</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetTransactionCode</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetTransactionCode::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetTransactionCode::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record is located in the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetTransactionCode</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetTransactionCode
                     where budgetTransactionCode.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDefaultByTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>BudgetTransactionCode</c> record exists that is the default
    /// for the specified budget transaction type.
    /// </summary>
    /// <param name="_budgetTransactionType">
    /// The budget transaction type of the <c>BudgetTransactionCode</c> record.
    /// </param>
    /// <returns>
    /// true if the default budget transaction code exists; otherwise, false.
    /// </returns>
    public static boolean existDefaultByTransactionType(BudgetTransactionType _budgetTransactionType)
    {
        boolean found = false;
        BudgetTransactionCode budgetTransactionCode;

        select firstonly RecId
            from budgetTransactionCode
            where budgetTransactionCode.BudgetTransactionType == _budgetTransactionType
            && budgetTransactionCode.IsDefault == NoYes::Yes;

        if (budgetTransactionCode.RecId != 0)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetTransactionCode</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetTransactionCode</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionCode find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetTransactionCode budgetTransactionCode;

        budgetTransactionCode.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetTransactionCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetTransactionCode
            where budgetTransactionCode.RecId == _recId;

        return budgetTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_transactionCode">
    ///    The budget transaction code of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetTransactionCode</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionCode findByBudgetTransactionCode(
        BudgetCode _transactionCode,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetTransactionCode budgetTransactionCode;

        budgetTransactionCode.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetTransactionCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetTransactionCode
            where budgetTransactionCode.Name == _transactionCode;

        return budgetTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultByTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BudgetTransactionCode</c> record that is the default
    /// for the specified budget transaction type.
    /// </summary>
    /// <param name="_budgetTransactionType">
    /// The budget transaction type of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetTransactionCode</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionCode findDefaultByTransactionType(BudgetTransactionType _budgetTransactionType)
    {
        BudgetTransactionCode budgetTransactionCode;

        select firstonly budgetTransactionCode
            where budgetTransactionCode.BudgetTransactionType == _budgetTransactionType &&
                  budgetTransactionCode.IsDefault == NoYes::Yes;

        return budgetTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowTableSequenceNumberValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>WorkflowTableSequenceNumber</c> field is valid for the
    /// specified <c>BudgetTransactionCode</c> record.
    /// </summary>
    /// <param name="_budgetTransactionCodeRecId">
    /// The record ID of the <c>BudgetTransactionCode</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>WorkflowTableSequenceNumber</c> field is valid; otherwise, false.
    /// </returns>
    public static boolean isWorkflowTableSequenceNumberValid(RecId _budgetTransactionCodeRecId)
    {
        boolean isValid;

        BudgetTransactionCode budgetTransactionCode;
        WorkflowVersionTable workflowVersionTable;

        budgetTransactionCode = BudgetTransactionCode::find(_budgetTransactionCodeRecId);

        if (budgetTransactionCode && budgetTransactionCode.WorkflowTableSequenceNumber)
        {
            workflowVersionTable = WorkflowVersionTable::findSequenceNumber(budgetTransactionCode.WorkflowTableSequenceNumber);

            if (workflowVersionTable &&
                workflowVersionTable.Enabled &&
                workflowVersionTable.workflowTable().TemplateName == workflowtypestr(BudgetRegisterEntryReview))
            {
                isValid = true;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the <c>BudgetTransactionCode</c> form for the specified budget transaction code.
    /// </summary>
    /// <param name="_budgetTransCode">
    ///    The <c>BudgetTransactionCode</c> record referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///    The form object that calls the <c>BudgetTransactionCode</c> form.
    /// </param>
    public static void jumpRefBudgetTransactionCode(BudgetTransactionCode _budgetTransCode, Object _caller)
    {
        Args            args;
        FormRun         formRun;

        args = new Args(new DictTable(_budgetTransCode.TableId).formRef());
        args.caller(_caller);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.dataSource().findRecord(_budgetTransCode);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetTransactionCodeByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference group control object on which to perform the lookup.
    /// </param>
    /// <param name="_budgetTransactionType">
    /// The <c>BudgetTransactionType</c> on which to filter the lookup.
    /// </param>
    /// <returns>
    /// The <c>BudgetTransactionCode</c> record that was selected by the lookup.
    /// </returns>
    public static Common lookupBudgetTransactionCodeByType(
        FormReferenceControl _ctrl,
        BudgetTransactionType _budgetTransactionType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(BudgetTransactionCode), _ctrl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(BudgetTransactionCode));

        queryBuildDataSource.addRange(fieldnum(BudgetTransactionCode, BudgetTransactionType)).value(int2str(enum2int(_budgetTransactionType)));

        sysTableLookup.addLookupfield(fieldnum(BudgetTransactionCode, Name));
        sysTableLookup.addLookupfield(fieldnum(BudgetTransactionCode, BudgetTransactionType));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorkflowTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>WorkflowTableSequenceNumber</c> field on the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object on which to perform the lookup.
    /// </param>
    public static void lookupWorkflowTable(FormStringControl _ctrl)
    {
        SysTableLookup sysTableLookup;

        Query query;
        QueryBuildDataSource qbdsWorkflowTable;
        QueryBuildDataSource qbdsWorkflowVersionTable;

        sysTableLookup = SysTableLookup::newParameters(tablenum(WorkflowTable), _ctrl, true);

        sysTableLookup.addLookupfield(fieldnum(WorkflowTable, SequenceNumber), true);
        sysTableLookup.addLookupfield(fieldnum(WorkflowTable, Name));

        // Setup the query.
        query = new Query();

        // Restrict the lookup to workflows of type BudgetRegisterEntryReview.
        qbdsWorkflowTable = query.addDataSource(tablenum(WorkflowTable));
        qbdsWorkflowTable.addRange(fieldnum(WorkflowTable, TemplateName)).value(SysQuery::value(workflowtypestr(BudgetRegisterEntryReview)));

        // Restrict the lookup to active workflows versions.
        qbdsWorkflowVersionTable = qbdsWorkflowTable.addDataSource(tablenum(WorkflowVersionTable));
        qbdsWorkflowVersionTable.relations(true);
        qbdsWorkflowVersionTable.joinMode(JoinMode::ExistsJoin);
        qbdsWorkflowVersionTable.addRange(fieldnum(WorkflowVersionTable, Enabled)).value(int2str(enum2int(NoYes::Yes)));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the default transaction code for a project, fixed asset, supply forecast, and
    /// demand forecast is valid.
    /// </summary>
    /// <param name="_budgetTransactionCode">
    /// The <c>BudgetTransactionCode</c> record for which to validate.
    /// </param>
    /// <param name="_budgetParameters">
    /// The <c>BudgetParameters</c> record for which to validate.
    /// </param>
    /// <returns>
    /// true if the default code is valid; otherwise, false.
    /// </returns>
    public static boolean validateDefaultTransactionCode(BudgetTransactionCode _budgetTransactionCode, BudgetParameters _budgetParameters = BudgetParameters::find())
    {
        boolean isValid = true;
        str createProcessedBudgetTransFieldStr;

        if (_budgetTransactionCode.IsDefault && _budgetTransactionCode.WorkflowTableSequenceNumber)
        {
            switch (_budgetTransactionCode.BudgetTransactionType)
            {
                case BudgetTransactionType::Project:
                    isValid = !_budgetParameters.IsProjectBudgetTransCreateAsCompleted;
                    createProcessedBudgetTransFieldStr = "@SYS105983";
                    break;

                case BudgetTransactionType::FixedAsset:
                    isValid = !_budgetParameters.IsAssetBudgetTransCreateAsCompleted;
                    createProcessedBudgetTransFieldStr = "@SYS71980";
                    break;

                case BudgetTransactionType::PurchForecast:
                    isValid = !_budgetParameters.IsSupplyFcstBudgetTransCreateAsCompleted;
                    createProcessedBudgetTransFieldStr = "@SYS9646";
                    break;

                case BudgetTransactionType::SalesForecast:
                    isValid = !_budgetParameters.IsDemandFcstBudgetTransCreateAsCompleted;
                    createProcessedBudgetTransFieldStr = "@SYS15056";
                    break;

                case BudgetTransactionType::FixedAsset_RU:
                    isValid = !_budgetParameters.IsAssetBudgetTransCreateAsCompleted_RU;
                    createProcessedBudgetTransFieldStr = "@GLS106645";
                    break;

                default :
                    break;
            }
        }

        if (!isValid)
        {
            isValid = checkFailed(strFmt("@SYS335519", _budgetTransactionCode.Name, createProcessedBudgetTransFieldStr, "@SYS127632"));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS127769</DeveloperDocumentation>
	<FormRef>BudgetTransactionCode</FormRef>
	<Label>@SYS127776</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>BudgetTransactionType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetTransactionHeader</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BudgetTransactionHeader</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionCodes</Name>
			<Label>@SYS127776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowTableSequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetTransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127780</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkflowTableSequenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkflowSequenceNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS319119</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Reason</Name>
					<SourceEDT>ReasonCode</SourceEDT>
					<Field>Reason</Field>
					<RelatedField>Reason</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkflowTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS319121</EntityRelationshipRole>
			<RelatedTable>WorkflowTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkflowTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionCode</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkflowTableSequenceNumber</Name>
					<Field>WorkflowTableSequenceNumber</Field>
					<RelatedField>SequenceNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>