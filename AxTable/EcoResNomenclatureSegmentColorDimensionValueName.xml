<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclatureSegmentColorDimensionValueName</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResNomenclatureSegmentColorDimensionValueName extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSegmentValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentValue(EcoResNomenclatureInput _input)
    {
        return _input.parmDimensionValueName(InventProductDimensionColor::getInstance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSegmentAllowedForNomenclatureType</Name>
				<Source><![CDATA[
    public static boolean isSegmentAllowedForNomenclatureType(TableId _nomenclatureType)
    {
        return (_nomenclatureType == tableNum(EcoResProductVariantNomenclature));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentSampleValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentSampleValue(EcoResNomenclatureInput _input)
    {
        EcoResNomenclatureOutput ret = "@SYS74614";

        EcoResProductMasterColor color;
        color  = this.getFirstOrNull(color);

        if (color)
        {
            LanguageId sysLanguage  = SystemParameters::getSystemLanguageId();
            Name colorName          = EcoResProductMasterDimValueTranslation::findByProductMasterDimValLanguage(color.RecId, sysLanguage).Name;
        
            if (colorName)
            {
                _input.parmDimensionValueName(InventProductDimensionColor::getInstance(), colorName);
                ret = this.getSegmentValue(_input);
            }            
        }
                       
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>EcoResProductColor</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResNomenclatureSegmentColorDimensionValueDevDoc</DeveloperDocumentation>
	<Label>@SCM:EcoResNomenclatureSegmentColorDimensionValueName</Label>
	<TableGroup>Group</TableGroup>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>EcoResNomenclatureSegment</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields />
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResNomenclatureSegment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResNomenclatureSegment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>