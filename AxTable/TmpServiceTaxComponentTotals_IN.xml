<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpServiceTaxComponentTotals_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpServiceTaxComponentTotals_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBaseCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode getBaseCurrency()
    {
        return  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode getSecondaryCurrency()
    {
        return  Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceTaxComponentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets service tax component totals.
    /// </summary>
    /// <param name="_tmpServiceTaxInquiryTable">
    /// The temporary service tax inquiry table.
    /// </param>
    /// <param name="_common">
    /// An instance of the <c>Common</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>TmpServiceTaxComponentTotals_IN</c> class.
    /// </returns>
    public TmpServiceTaxComponentTotals_IN serviceTaxComponentTotals(
        TmpServiceTaxInquiryTable_IN _tmpServiceTaxInquiryTable,
        Common                       _common)
    {
        TmpServiceTaxInquiryTable_IN    tmpServiceTaxInquiryTableLoc;
        TmpServiceTaxComponentTotals_IN tmpServiceTaxComponentTotals;
        ServiceTaxTotal_IN              serviceTaxTotal;
        CurrencyExchangeHelper          currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                 _tmpServiceTaxInquiryTable.TransDate);

        switch (_common.TableId)
        {
            case tablenum(ServiceTaxTotal_IN):
                serviceTaxTotal = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpServiceTaxInquiryTable
                    group by TaxComponentTable
                {
                    tmpServiceTaxComponentTotals.TaxComponentTable               = _tmpServiceTaxInquiryTable.TaxComponentTable;
                    tmpServiceTaxComponentTotals.AmountMST                  = TmpServiceTaxComponentTotals_IN::getAmountMST(_tmpServiceTaxInquiryTable.TaxComponentTable,
                                                                                                                            serviceTaxTotal);
                    tmpServiceTaxComponentTotals.AccumulatedAmountMST       = _tmpServiceTaxInquiryTable.TaxAmount;
                    tmpServiceTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                      tmpServiceTaxComponentTotals.AmountMST);
                    tmpServiceTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                      tmpServiceTaxComponentTotals.AccumulatedAmountMST);
                    tmpServiceTaxComponentTotals.insert();
                }
                break;
            case tablenum(TmpServiceTaxInquiryTable_IN):
                tmpServiceTaxInquiryTableLoc = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpServiceTaxInquiryTable
                     group by TaxComponentTable
                {
                    tmpServiceTaxComponentTotals.TaxComponentTable          = _tmpServiceTaxInquiryTable.TaxComponentTable;
                    tmpServiceTaxComponentTotals.AmountMST                  = TmpServiceTaxComponentTotals_IN::getAmountMST(_tmpServiceTaxInquiryTable.TaxComponentTable,
                                                                                                                            null,
                                                                                                                            tmpServiceTaxInquiryTableLoc);
                    tmpServiceTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                      tmpServiceTaxComponentTotals.AmountMST);

                    tmpServiceTaxComponentTotals.AccumulatedAmountMST       = _tmpServiceTaxInquiryTable.TaxAmount;
                    tmpServiceTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                      tmpServiceTaxComponentTotals.AccumulatedAmountMST);
                    tmpServiceTaxComponentTotals.insert();
                }
                break;
            default:
                break;
        }

        return tmpServiceTaxComponentTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
    public static AmountMST getAmountMST(RefRecId                   _taxComponentTable,
                                  ServiceTaxTotal_IN                _serviceTaxTotal= null,
                                  TmpServiceTaxInquiryTable_IN      _tmpServiceTaxInquiryTable = null)
    {
        AmountMST amount;

        if (_serviceTaxTotal)
        {
            if (_taxComponentTable == _serviceTaxTotal.TaxComponentTable)
            {
                amount = _serviceTaxTotal.TaxAmount;
            }
            else
            {
                amount = 0;
            }
        }
        else
        {
            if (_taxComponentTable == _tmpServiceTaxInquiryTable.TaxComponentTable)
            {
                amount = _tmpServiceTaxInquiryTable.TaxAmount;
            }
            else
            {
                amount = 0;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpServiceTaxCompTotals</Name>
				<Source><![CDATA[
    static void insertTmpServiceTaxCompTotals(
        RecId _serviceTaxRecId,
        RecId _serviceInquiryRecId)
    {
        TmpServiceTaxInquiryTable_IN    tmpServiceTaxInquiryTable;
        TmpServiceTaxInquiryTable_IN    tmpServiceTaxInquiryTableLoc;
        TmpServiceTaxComponentTotals_IN tmpServiceTaxComponentTotals;
        ServiceTaxTotal_IN              serviceTaxTotal;
        CurrencyExchangeHelper          currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));

        if (_serviceTaxRecId)
        {
            while select sum(TaxAmount), TaxComponentTable from tmpServiceTaxInquiryTable
                group by TaxComponentTable
            {
                tmpServiceTaxComponentTotals.TaxComponentTable          = tmpServiceTaxInquiryTable.TaxComponentTable;
                tmpServiceTaxComponentTotals.AmountMST                  = TmpServiceTaxComponentTotals_IN::getAmountMST(tmpServiceTaxInquiryTable.TaxComponentTable,
                                                                                                                        serviceTaxTotal);
                tmpServiceTaxComponentTotals.AccumulatedAmountMST       = tmpServiceTaxInquiryTable.TaxAmount;

                tmpServiceTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                  tmpServiceTaxComponentTotals.AmountMST);
                tmpServiceTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                  tmpServiceTaxComponentTotals.AccumulatedAmountMST);
                tmpServiceTaxComponentTotals.insert();
            }
        }
        if (_serviceInquiryRecId)
        {
            while select sum(TaxAmount), TaxComponentTable from tmpServiceTaxInquiryTable
                 group by TaxComponentTable
            {
                tmpServiceTaxComponentTotals.TaxComponentTable          = tmpServiceTaxInquiryTable.TaxComponentTable;
                tmpServiceTaxComponentTotals.AmountMST                  = TmpServiceTaxComponentTotals_IN::getAmountMST(tmpServiceTaxInquiryTable.TaxComponentTable,
                                                                                                                        null,
                                                                                                                        tmpServiceTaxInquiryTableLoc);
                tmpServiceTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                  tmpServiceTaxComponentTotals.AmountMST);
                tmpServiceTaxComponentTotals.AccumulatedAmountMST       = tmpServiceTaxInquiryTable.TaxAmount;
                tmpServiceTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                  tmpServiceTaxComponentTotals.AccumulatedAmountMST);
                tmpServiceTaxComponentTotals.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6583</Label>
	<TitleField1>TaxComponentTable</TitleField1>
	<TitleField2>AmountMST</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS25443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS6075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS83899</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TmpServiceTaxComponentTotals_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>