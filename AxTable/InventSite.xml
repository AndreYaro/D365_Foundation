<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSite</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSite extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndSerializeDimensionUpdate</Name>
				<Source><![CDATA[
    public void checkAndSerializeDimensionUpdate()
    {
        InventSite          inventSite;
        InventParameters    inventParameters;
        str                 dimensionValueStr;

        if ((this.dimensionAttributeValue() != 0) && (!this.RecId || this.dimensionAttributeValue() != this.orig().dimensionAttributeValue()))
        {
            // Serialize execution by obtaining lock of inventParameters
            select pessimisticlock SiteDimensionAttribute, RecId
                from inventParameters
                where inventParameters.Key == 0;

            if (!inventParameters.RecId)
            {
                throw error("@SYS6144");
            }

            while select SiteId, DefaultDimension
                from inventSite
                where inventSite.SiteId              != this.SiteId
            {
                if (inventSite.dimensionAttributeValue() == this.dimensionAttributeValue())
                {
                    dimensionValueStr = DimensionAttributeValue::find(this.dimensionAttributeValue()).getName();
                    throw error(strFmt("@SYS113153", inventParameters.siteDimensionAttribute().localizedName(), dimensionValueStr, inventSite.SiteId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRenameSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a site can be renamed.
    /// </summary>
    /// <returns>
    ///    true if the site can be renamed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Renaming a site is not allowed if the old site has a warehouse associated with it and the new site
    ///    value has previously been used with any warehouse.
    /// </remarks>
    public boolean checkRenameSite()
    {
        InventDim       inventDim;
        InventSiteId    origSiteId = this.orig().SiteId;
        boolean         ok         = true;

        container crossCompanyList = SysDataSharingCommonAPI::getCrossCompanySharingList(tableId2name(this.TableId), curExt());
 
        if (conFind(crossCompanyList, curExt()) == 0)
        {
            crossCompanyList += curExt();
        }

        //original site
        select firstonly crosscompany:crossCompanyList RecId from inventDim
        where inventDim.InventSiteId     == origSiteId &&
                inventDim.InventLocationId != '';

        if (inventDim.RecId)
        {
            //new site
            select firstonly crosscompany:crossCompanyList RecId, InventSiteId, InventLocationId from inventDim
            where inventDim.InventSiteId     == this.SiteId &&
                    inventDim.InventLocationId != '';

            if (inventDim.RecId)
            {
                ok = checkFailed(strFmt("@SYS106939", this.SiteId,inventDim.InventLocationId,inventDim.InventSiteId));
            }
        }
        
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the record
    /// </summary>
    /// <remarks>
    ///     The Location related to InventSiteLogisticsLocation is a location related to the legal entity and still valid after a site is deleted.
    ///     Have to set to 0 before super is called to prevent the location to be deleted when site is deleted from the database.
    /// </remarks>
    ///
    public void delete()
    {
        InventSiteLogisticsLocation inventSiteLogisticsLocation;

        ttsbegin;

        if (BrazilParameters::isEnabled())
        {
            inventSiteLogisticsLocation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

            select forUpdate Location from inventSiteLogisticsLocation
                where inventSiteLogisticsLocation.Site == this.RecId;

            if (inventSiteLogisticsLocation)
            {
                inventSiteLogisticsLocation.Location = 0;
                inventSiteLogisticsLocation.update();
            }
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the dimension value for the site linked attribute.
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> value of the <c>DimensionAttributeValue</c> record that corresponds to the
    ///    attribute to which the site is linked.
    /// </returns>
    public RecId dimensionAttributeValue()
    {
        DimensionAttributeValueSetStorage   valueSetStorage;

        valueSetStorage = DimensionAttributeValueSetStorage::find(this.DefaultDimension);

        return valueSetStorage.getValueByDimensionAttribute(InventParameters::find().SiteDimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal establishment related to the site.
    /// </summary>
    /// <returns>
    /// The <c>FiscalEstablishment_BR</c> record.
    /// </returns>
    public FiscalEstablishment_BR fiscalEstablishment()
    {
        FiscalEstablishment_BR              fiscalEstablishment;
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;

        select fiscalEstablishment
            join FiscalEstablishment_BR from fiscalEstablishmentInventSite
                where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                    && fiscalEstablishmentInventSite.InventSite == this.SiteId;

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFiscalEstablishmentLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the current or given location information of the fiscal establishment to the related warehouses.
    /// </summary>
    /// <param name="_location">
    /// The location of the fiscal establishment; optional.
    /// </param>
    public void copyFiscalEstablishmentLocation(RecId _location = this.fiscalEstablishment().postalAddress().Location)
    {
        container roleIds;
        InventSiteLogisticsLocation inventSiteLogisticsLocation;

        if (this.RecId)
        {
            ttsBegin;

            select forUpdate inventSiteLogisticsLocation
            where inventSiteLogisticsLocation.Site == this.RecId;

            if (!inventSiteLogisticsLocation)
            {
                inventSiteLogisticsLocation.Site = this.RecId;
                inventSiteLogisticsLocation.Location = _location;
                inventSiteLogisticsLocation.IsPrimary = NoYes::Yes;

                roleIds = conPeek(DirPartyLocation::findRec(this.fiscalEstablishment().DirPartyLocation).locationRoles(), 1);

                if (!conFind(roleIds, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)))
                {
                    roleIds += LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId;
                }

                inventSiteLogisticsLocation.addEntityLocation(roleIds, false);
            }
            else
            {
                inventSiteLogisticsLocation.ValidTimeStateUpdateMode(ValidTimeStateupdate::Correction);
                inventSiteLogisticsLocation.Location = _location;
                inventSiteLogisticsLocation.IsPrimary = NoYes::Yes;
                inventSiteLogisticsLocation.update();
            }

            FiscalEstablishmentLocationHelper_BR::propagateSiteLocation(this.SiteId);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the site has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the site has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.InventSiteId  == this.SiteId
               && inventSum.ClosedQty     == NoYes::No;

            return inventSum.RecId;
        }
        else
        {
            InventDim   inventDim;

            select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventSiteId == this.SiteId
            join TableId from inventSum
                where inventSum.InventDimId  == inventDim.InventDimId
                   && inventSum.ClosedQty    == NoYes::No;

            return inventDim.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Timezone = DateTimeUtil::getCompanyTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.checkAndSerializeDimensionUpdate();

        super();

        if (BrazilParameters::isEnabled())
        {
            this.copyFiscalEstablishmentLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    ///    field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    ///    optional.
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    ///    this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when they are merged
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames foreign keys in other tables according to the change of the corresponding primary key value in this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        if (!this.checkRenameSite())
        {
            throw error("@SYS18447");
        }

        InventSiteId origSiteId = this.orig().SiteId;

        ttsBegin;

        this.renameInventDimSite(origSiteId);

        this.validateWriteCrossCompany(tableMethodStr(InventSite, renamePrimaryKey), origSiteId);

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameInventDimSite</Name>
				<Source><![CDATA[
    private void renameInventDimSite(InventSiteId _origSiteId)
    {
        InventDim inventDim;
        
        while select forupdate inventDim
            where inventDim.InventSiteId == _origSiteId
        {
            inventDim.InventSiteId = this.SiteId;
            inventDim.update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteDimensionEquals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the dimension that is linked to site is the same as the dimension that is
    /// specified on the site.
    /// </summary>
    /// <param name="_dimension">
    /// The dimension to check.
    /// </param>
    /// <returns>
    /// true if the linked dimension attribute has the same value; otherwise, false.
    /// </returns>
    public boolean siteDimensionEquals(DimensionDefault _dimension)
    {
        DimensionAttributeValueSetStorage   valueSetStorage;
        RecId                               dimAttributeValue;

        valueSetStorage = DimensionAttributeValueSetStorage::find(_dimension);

        dimAttributeValue = valueSetStorage.getValueByDimensionAttribute(InventParameters::find().SiteDimensionAttribute);

        return (dimAttributeValue == this.dimensionAttributeValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.checkAndSerializeDimensionUpdate();

        super();

        if (BrazilParameters::isEnabled())
        {
            this.copyFiscalEstablishmentLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.hasOpenInventSumQuantity() || this.validateWriteCrossCompany(tableMethodStr(InventSite, validateDelete)))
        {
            ret = checkFailed("@SYS78374"+':'+"@SYS67724");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventSite, DefaultInventStatusId):
                    if (this.DefaultInventStatusId && WHSInventStatus::isBlockingStatus(this.DefaultInventStatusId))
                    {
                        ret = checkFailed("@WAX5431");
                    }
                    break;
                case fieldNum(InventSite, DefaultDimension):
                    InventParameters inventParameters = InventParameters::find();
                    if (!inventParameters.isMultiSiteDimensionLinkInactive())
                    {
                        if (this.dimensionAttributeValue() == 0)
                        {
                            ret = checkFailed(strFmt("@SYS26332", fieldId2pname(this.TableId, fieldNum(InventSite, DefaultDimension))));
                        }
                    }
                    else if (inventParameters.siteDimensionAttribute().RecId == 0) // dimension attribute not specified
                    {
                        // If a default dimension value was specified via a non-form interface (e.g. data entity),
                        // and no dimension attribute is specified (in dimension link), then the default dimension
                        // value cannot be validated against a default dimension:
                        if (this.DefaultDimension && !FormDataUtil::isFormDataSource(this))
                        {
                            ret = checkFailed('@SCM:InventSiteDimensionAttributeNotSpecified');
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.validateField(fieldNum(InventSite, DefaultDimension));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// If site link is enabled, replaces the site linked dimension to match the site.
    /// </summary>
    /// <param name="_dimension">
    /// The dimension default value to change.
    /// </param>
    /// <param name="_inventSiteId">
    /// The site from which to default the dimension.
    /// </param>
    /// <returns>
    /// The resulting dimension.
    /// </returns>
    /// <remarks>
    /// If the site link is inactive, this method returns the dimension that was passed without any changes
    /// to it.
    /// </remarks>
    public static DimensionDefault changeDimension(DimensionDefault _dimension, InventSiteId _inventSiteId)
    {
        InventParameters inventParameters = InventParameters::find();

        if (inventParameters.isMultiSiteDimensionLinkInactive())
        {
            return _dimension;
        }

        DimensionDefault siteDimension = InventSite::find(_inventSiteId).DefaultDimension;

        boolean cacheEnabled = appl.ttsLevel() > 0 && InventDimensionDefaultTransScopeCacheFlight::instance().isEnabled();
        str owner, cacheKey;
        SysGlobalCache transactionCache;

        if (cacheEnabled)
        {
            owner    = tableStr(InventSite);
            cacheKey = strFmt("%1#%2#%3#%4", curext(), _dimension, siteDimension, inventParameters.SiteDimensionAttribute);

            transactionCache = appl.transactionScope().parmTransactionScopeCache();

            if (transactionCache && transactionCache.isSet(owner, cacheKey))
            {
                DimensionDefault defaultDimension = transactionCache.get(owner, cacheKey);

                if (defaultDimension)
                {
                    return defaultDimension;
                }
            }
        }

        DimensionDefault defaultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(_dimension, siteDimension, inventParameters.SiteDimensionAttribute);

        if (!DimensionAttributeDerivedDimensions::derivedDimensionsExist())
        {
            if (cacheEnabled && transactionCache)
            {
                transactionCache.set(owner, cacheKey, defaultDimension);
            }

            return defaultDimension;
        }

        // Deriving default dimensions linked to inventory site
        DimensionDefault derivedDimension = LedgerDimensionFacade::serviceApplyDerivedDimensionsForAttribute(defaultDimension,
            inventParameters.SiteDimensionAttribute,
            Ledger::current());

        // Merging derived default dimension linked to inventory site with original default dimension
        boolean precedenceEnabled = DimensionAttributeDerivedDimensions::derivedDimensionPrecedenceEnabled();

        if (precedenceEnabled && DimensionAttributeDerivedDimensions::dimensionAttributeHasDerivedDimensionPrecedence(inventParameters.SiteDimensionAttribute))
        {
            defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(derivedDimension, defaultDimension);
        }
        else
        {
            defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, derivedDimension);
        }

        if (cacheEnabled && transactionCache)
        {
            transactionCache.set(owner, cacheKey, defaultDimension);
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(InventSiteId _inventSiteId)
    {
        if (_inventSiteId  && ! InventSite::exist(_inventSiteId))
        {
            return checkFailed(strFmt(InventSite::txtNotExist(),_inventSiteId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    public static int count()
    {
        //Return the total number of sites
        return any2int((select count(RecId) from inventSite).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(InventSiteId  _inventSiteId)
    {
        return _inventSiteId && (select RecId from inventSite
                                     index SiteIdx
                                     where inventSite.SiteId == _inventSiteId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQueryForInventLocations</Name>
				<Source><![CDATA[
    static public Query generateQueryForInventLocations(InventSiteId _siteId)
    {
        Query inventLocationQuery = new Query();
        QueryBuildDataSource qbdsInventLocation = inventLocationQuery.addDataSource(tableNum(InventLocation));
        qbdsInventLocation.addRange(fieldNum(InventLocation, InventSiteId)).value(_siteId);

        return inventLocationQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHierarchyTree</Name>
				<Source><![CDATA[
    static public container fillHierarchyTree(
        InventSiteId    _siteId,
        FormTreeControl _formTreeControl)
    {
        #resAppl

        InventSite                  inventSiteLocal;
        ProdUnitTable               prodUnitTable;
        InventLocation              inventLocationWarehouse;
        ImageRes                    imageResSite;
        ImageRes                    imageResProdUnit;
        ImageRes                    imageResWarehouse;
        TreeItemIdx                 currentSiteIdx;
        ImageListAppl_InventSite    imageListAppl_InventSite;
        TreeItemIdx                 siteIdx;
        container                   siteIdxContainer;

        _formTreeControl.deleteAll();
        siteIdxContainer = conNull();
        currentSiteIdx   = 0;

        imageListAppl_InventSite = new ImageListAppl_InventSite();
        _formTreeControl.setImagelist(imageListAppl_InventSite.imageList());
        imageResSite      = imageListAppl_InventSite.image(#imageInventSite);
        imageResProdUnit  = imageListAppl_InventSite.image(#ImageProductionUnit);
        imageResWarehouse = imageListAppl_InventSite.image(#ImageWMSStore);

        while select SiteId, Name from inventSiteLocal
        {
            select prodUnitTable
                where prodUnitTable.ParentSiteId == inventSiteLocal.SiteId;

            QueryRun qrInventLocation = new QueryRun(InventSite::generateQueryForInventLocations(inventSiteLocal.SiteId));
            if (qrInventLocation.next())
            {
                inventLocationWarehouse = qrInventLocation.get(tableNum(InventLocation));
            }

            siteIdx = SysFormTreeControl::addTreeItem(_formTreeControl,
                                                      inventSiteLocal.SiteId + ', ' + inventSiteLocal.Name,
                                                      FormTreeAdd::Root,
                                                      inventSiteLocal.Name,
                                                      imageResSite,
                                                      prodUnitTable.RecId || inventLocationWarehouse.RecId ? true : false);

            siteIdxContainer += siteIdx;

            if (inventSiteLocal.SiteId == _siteId)
            {
                currentSiteIdx = siteIdx;
            }

            while (prodUnitTable.RecId)
            {
                SysFormTreeControl::addTreeItem(_formTreeControl,
                                                prodUnitTable.ProdUnitId + ', ' + prodUnitTable.Name,
                                                siteIdx,
                                                prodUnitTable.Name,
                                                imageResProdUnit,
                                                false);
                next prodUnitTable;
            }

            while (inventLocationWarehouse.RecId)
            {
                SysFormTreeControl::addTreeItem(_formTreeControl,
                                                inventLocationWarehouse.InventLocationId + ', ' + inventLocationWarehouse.Name,
                                                siteIdx,
                                                inventLocationWarehouse.Name,
                                                imageResWarehouse,
                                                false);
                if (qrInventLocation.next())
                {
                    inventLocationWarehouse = qrInventLocation.get(tableNum(InventLocation));
                }
                else
                {
                    inventLocationWarehouse = null;
                }
            }
        }

        // Expand and select current site
        if (currentSiteIdx)
        {
            _formTreeControl.expand(currentSiteIdx, FormTreeExpand::Expand);
            _formTreeControl.select(currentSiteIdx);
        }

        return siteIdxContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventSite find(
        InventSiteId  _inventSiteId,
        boolean       _update = false)
    {
        InventSite  inventSite;

        inventSite.selectForUpdate(_update);

        if (_inventSiteId)
        {
            select firstonly inventSite
                index SiteIdx
                where inventSite.SiteId == _inventSiteId;
        }

        return inventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventSite</c> table.
    /// </summary>
    /// <param name="_inventSiteId">
    ///    The inventory location of the record to find.
    /// </param>
    /// <param name="_dataAreaId">
    ///    The legal entity in which to find the record.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventSite</c> table; otherwise, an empty record.
    /// </returns>
    public static InventSite findInLegalEntity(
        InventSiteId    _inventSiteId,
        DataAreaId      _dataAreaId)
    {
        InventSite  inventSite;

        if (_inventSiteId && _dataAreaId)
        {
            select firstonly crosscompany inventSite
                where inventSite.SiteId     == _inventSiteId
                   && inventSite.DataAreaId == _dataAreaId;
        }

        return inventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventSite</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>InventSite</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventSite</c> table; otherwise, an empty record.
    /// </returns>
    public static InventSite findRecId(RecId _recId, boolean _forUpdate = false)
    {
        InventSite  inventSite;

        if (_recId)
        {
            inventSite.selectForUpdate(_forUpdate);

            select firstonly inventSite
                   where inventSite.RecId == _recId;
        }

        return inventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationFromRole</Name>
				<Source><![CDATA[
    public static LogisticsLocationRecId getLocationFromRole(RecId _site,LogisticsLocationRoleType _roleType, TransDateTime _transDateTime = DateTimeUtil::getSystemDateTime())
    {
        InventSiteLogisticsLocation         siteLocation;
        InventSiteLogisticsLocationRole     siteLocationRole;
        LogisticsLocationRole               locationRole;

        select firstonly Location from siteLocation
            order by IsPrimary desc                         // Fist look for the primary address
            where siteLocation.Site         == _site
            exists join siteLocationRole
                where siteLocationRole.SiteLogisticsLocation    == siteLocation.RecId
                exists join locationRole
                    where locationRole.Type  == _roleType
                       && locationRole.RecId == siteLocationRole.LocationRole;
        return siteLocation.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefInventSiteId</Name>
				<Source><![CDATA[
    static public void jumpRefInventSiteId(InventSiteId _inventSiteId, Object _caller, str _parm = '')
    {
        Args    args;
        FormRun fr;
        InventSite  inventSite;

        inventSite = InventSite::find(_inventSiteId);

        args = new Args(formStr(InventSite));
        args.caller(_caller);
        args.parm(_parm);

        fr = new MenuFunction(menuitemDisplayStr(InventSite), MenuItemType::Display).create(args);

        fr.run();
        fr.dataSource().findRecord(inventSite);
        fr.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByInventLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of the <c>InventSite</c> table that is based on the <c>InventLocationType</c>
    /// value .
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormStringControl</c> that calls the lookup method.
    /// </param>
    /// <param name="_inventLocationType">
    /// The <c>InventLocationType</c> value that is used to perform the lookup.
    /// </param>
    public static void lookupByInventLocationType(FormStringControl _ctrl, InventLocationType _inventLocationType)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(InventSite), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource qbdsSite, qbdsLocation;
        ListEnumerator       listEnumerator = List::create(InventSite::standardLookupFields()).getEnumerator();

        while (listEnumerator.moveNext())
        {
            sysTableLookup.addLookupfield(fieldName2id(tableNum(InventSite), listEnumerator.current()));
        }

        qbdsSite        = query.addDataSource(tableNum(InventSite));
        qbdsLocation    = qbdsSite.addDataSource(tableNum(InventLocation));

        qbdsLocation.clearLinks();
        qbdsLocation.addLink(fieldNum(InventSite, SiteId ), fieldNum(InventLocation, InventSiteId));

        qbdsLocation.addRange(fieldNum(InventLocation, InventLocationType)).value(queryValue(_inventLocationType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds ans returns only the warehouses that are  marked as VMI warehouses.
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormStringControl</c> that fired the lookup.
    /// </param>
    public static void mcrLookupSite(FormStringControl _ctrl)
    {
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tableNum(InventSite), _ctrl);
        Query           query =  new Query();
        QueryBuildDataSource    qbds;

        sysTableLookup.addLookupfield(fieldNum(InventSite, SiteId));
        sysTableLookup.addLookupfield(fieldNum(InventSite, Name));

        qbds = query.addDataSource(tableNum(InventSite));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns site Ids for a specified company.
    /// </summary>
    /// <param name = "_ctrl">The <c>FormStringControl</c> that fired the lookup.</param>
    /// <param name = "_company">A company.</param>
    public static void lookupByCompany(FormStringControl _ctrl, CompanyId _company)
    {
        changecompany(_company)
        {
            SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tableNum(InventSite), _ctrl);
            Query           query =  new Query();
            QueryBuildDataSource    qbds;

            sysTableLookup.addLookupfield(fieldNum(InventSite, SiteId));
            sysTableLookup.addLookupfield(fieldNum(InventSite, Name));

            qbds = query.addDataSource(tableNum(InventSite));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a packed list of field names to display in the dataset lookup.
    /// </summary>
    /// <returns>
    /// A container that contains a packed list of field names to display in the dataset lookup.
    /// </returns>
    public static container standardLookupFields()
    {
        List                list                = new List(Types::String);
        SysDictFieldGroup   sysDictFieldGroup   = new SysDictFieldGroup(tableNum(InventSite), tableFieldgroupStr(InventSite, AutoLookup));
        Counter             numberOfFields      = sysDictFieldGroup.numberOfFields();
        Counter             i;

        for (i=1; i<=numberOfFields; i++)
        {
            list.addEnd(fieldId2name(tableNum(InventSite),sysDictFieldGroup.field(i)));
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    public static Timezone timeZoneSite(InventSiteId _siteId)
    {
        InventSite  inventSite;

        inventSite = InventSite::find(_siteId);
        return inventSite.Timezone ? inventSite.Timezone : DateTimeUtil::getCompanyTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>InventSite</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS111931";
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSiteLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to use the site link for the provided buffer.
    /// </summary>
    /// <param name="_common">
    /// A buffer to check.
    /// </param>
    /// <returns>
    /// true if the site link is enabled and can be used for the provided record; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns true if the site link is either locked or active.
    /// </remarks>
    public static boolean useSiteLink(Common _common)
    {
        SMAServiceOrderLine     smaServiceOrderLine;
        SMAAgreementLine        smaAgreementLine;
        TmpProjAdjustmentCreate tmpProjAdjustmentCreate;
        InventTransferLine      inventTransferLine;
        boolean                 useSiteLink;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        // If the link is not inactive, site dimension link is used
        if (!InventParameters::find().isMultiSiteDimensionLinkInactive())
        {
            useSiteLink = true;

            switch (_common.TableId)
            {
                case tableNum(BOMParmReportFinish):
                case tableNum(CustTable):
                case tableNum(ForecastPurch):
                case tableNum(ForecastSales):
                case tableNum(InventJournalTrans):
                case tableNum(InventNonConformanceTable):
                case tableNum(InventQualityOrderTable):
                case tableNum(InventQuarantineOrder):
                case tableNum(InventTable):
                case tableNum(InventTransferLine_IN):
                case tableNum(Kanban):
                case tableNum(KanbanJob):
                case tableNum(KanbanJobPickingList):
                case tableNum(ProdBOM):
                case tableNum(ProdJournalBOM):
                case tableNum(ProdTable):
                case tableNum(PurchLine):
                case tableNum(PurchReqLine):
                case tableNum(PurchRFQCaseLine):
                case tableNum(PurchRFQCaseTable):
                case tableNum(PurchRFQLine):
                case tableNum(PurchRFQTable):
                case tableNum(PurchTable):
                case tableNum(SalesLine):
                case tableNum(SalesQuotationLine):
                case tableNum(SalesQuotationTable):
                case tableNum(SalesTable):
                case tableNum(TmpBOM):
                case tableNum(VendTable):
                case tableNum(InventTransferParmLine):
                case tableNum(VendInvoiceInfoLine):
                    break;
                // some transaction use siteLink depending on type
                case tableNum(SMAServiceOrderLine):
                    smaServiceOrderLine = _common;
                    if (smaServiceOrderLine.TransactionType != SMATransactionType::Item)
                    {
                        useSiteLink = false;
                    }
                    break;

                case tableNum(SMAAgreementLine):
                    smaAgreementLine = _common;
                    if (smaAgreementLine.TransactionType != SMATransactionType::Item)
                    {
                        useSiteLink = false;
                    }
                    break;

                case tableNum(TmpProjAdjustmentCreate):
                    tmpProjAdjustmentCreate = _common;
                    if (!tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::item))
                    {
                        useSiteLink = false;
                    }
                    break;

                default:
                    useSiteLink = false;
                    break;
            }
        }

        return useSiteLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location table.
    /// </summary>
    /// <returns>The location table id related to the current entity which is <c>InventSiteLogisticsLocation</c></returns>
    public TableId getEntityLocationTableId()
    {
        return tableNum(InventSiteLogisticsLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationRoleTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location role table. This method is meant to be implemented by
    /// tables that have a mapping to <c>LogisticsEntityLocationMap</c>.
    /// </summary>
    /// <returns>Returns 0 when no implementation is found by the tables mapping <c>LogisticsEntityLocationMap</c></returns>
    public TableId getEntityLocationRoleTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReceiptAtOtherWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if receiving at the mobile device user warehouse is allowed
    /// </summary>
    /// <param name="_plannedReceiptInventLocationId">
    /// Warehouse on the source document line, where the items were planned to be delivered.
    /// </param>
    /// <param name="_actualReceiptInventLocationId">
    /// Warehouse, at which the mobile device user is currently working, where the actual receipt happens.
    /// </param>
    /// <returns>
    /// true, if the warehouses are the same, or are on the same site and it is allowed to receive at another warehouse on site; otherwise, false.
    /// </returns>
    public static boolean allowReceiptAtOtherWarehouse(
        InventLocationId _plannedReceiptInventLocationId,
        InventLocationId _actualReceiptInventLocationId)
    {
        InventLocation  inventLocationSourceDocLine;
        InventLocation  inventLocationUser;

        if (_plannedReceiptInventLocationId == _actualReceiptInventLocationId)
        {
            return true;
        }

        inventLocationSourceDocLine = InventLocation::find(_plannedReceiptInventLocationId);
        inventLocationUser = InventLocation::find(_actualReceiptInventLocationId);

        if (inventLocationUser.InventSiteId == inventLocationSourceDocLine.InventSiteId
            && inventLocationSourceDocLine.inventSite().IsReceivingWarehouseOverrideAllowed)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceivingWarehouseCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets site as filter criteria.
    /// </summary>
    /// <param name="_inventDimCriteria">
    /// <c>InventDim</c> values that we will filter order lines on.
    /// </param>
    /// <param name="_inventDimParm">
    /// <c>InventDimParm</c> flags, which control the <c>InventDim</c> fields to filter based on.
    /// </param>
    /// <remarks>
    /// If receiving at another warehouse is allowed for the site at which the mobile device user is working
    /// then filter the order lines based on Site instead of warehouse.
    /// </remarks>
    public static void setReceivingWarehouseCriteria(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        InventSite inventSite;

        if (_inventDimCriteria.InventLocationId)
        {
            inventSite = InventLocation::find(_inventDimCriteria.InventLocationId).inventSite();
            if (inventSite.IsReceivingWarehouseOverrideAllowed)
            {
                _inventDimParm.InventSiteIdFlag = NoYes::Yes;
                _inventDimParm.InventLocationIdFlag = NoYes::No;

                _inventDimCriteria.InventSiteId = inventSite.SiteId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the logistics postal address of the inventory site.
    /// </summary>
    /// <returns>
    /// The address field of the logistics postal address record buffer.
    /// </returns>
    public LogisticsPostalAddress logisticsPostalAddress()
    {
        return LogisticsLocationEntity::findPostalAddress(this, LogisticsLocationRoleType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsEntityLocationMapInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LogisticsEntityLocationMapInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsEntityLocationMapInterface</c> object.
    /// </returns>
    public LogisticsEntityLocationMapInterface logisticsEntityLocationMapInterface()
    {
        return LogisticsEntityLocationMapInterface::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSharingTableList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of tables that must be shared when the <c>InventSite</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>List</c> of tables.
    /// </returns>
    [Hookable(false)]
    public static List dataSharingTableList()
    {
        List sharingList = new List(Types::String);

        sharingList.addEnd(tableStr(InventSite));
        sharingList.addEnd(tableStr(InventSite_IN));
        sharingList.addEnd(tableStr(FiscalEstablishmentInventSite_BR));
        sharingList.addEnd(tableStr(ReqSitePolicy));

        return sharingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingCountryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static container unsupportedDataSharingCountryRegions()
    {
        #ISOCountryRegionCodes

        return [#isoBR, #isoIN];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingTableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of fields that cannot be shared when the <c>InventSite</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of fields.
    /// </returns>
    [Hookable(false)]
    internal static Set unsupportedDataSharingTableFieldSet()
    {
        Set sharingSet = new Set(Types::String);

        if (SysDataSharingCommonAPI::isTablePartOfEnabledSRSPolicyForCurrentCompany(tableStr(InventSite)))
        {
            // Country fields
            sharingSet.add(fieldstr(InventSite, TaxBranchRefRecId));
        }

        return sharingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateWriteCrossCompany(str _methodName, InventSiteId _origSiteId = null)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query    query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                InventSite companyInventSite = queryRun.get(this.TableId);
                DataAreaId company = companyInventSite.DataAreaId;
                if (companyInventSite && company && company != curExt())
                {
                    changecompany(company)
                    {
                        InventSite inventSite = InventSite::find(companyInventSite.SiteId);
                        if (inventSite.RecId)
                        {
                            buf2Buf(this, inventSite);

                            switch (_methodName)
                            {
                                case tableMethodStr(InventSite, renamePrimaryKey):
                                    this.renameInventDimSite(_origSiteId);
                                    break;
 
                                case tableMethodStr(InventLocation, validateDelete):
                                    if (inventSite.hasOpenInventSumQuantity())
                                    {
                                        return true;
                                    }
                                        
                                    break;
                                        
                                default:
                                    return false;

                            }
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124082</DeveloperDocumentation>
	<FormRef>InventSite</FormRef>
	<Label>@SYS103211</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>SiteId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SiteIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>SiteIdx</PrimaryIndex>
	<ReplacementKey>SiteIdx</ReplacementKey>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryStatus</Name>
			<Label>@WAX357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultInventStatusId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderEntryDeadline</Name>
			<Label>@SYS109895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderEntryDeadlineGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Timezone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxBranch</Name>
			<Label>@SYS4082514</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBranchRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHS</Name>
			<Label>@WAX13</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultInventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReceivingWarehouseOverrideAllowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLockedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultInventStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultStatusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderEntryDeadlineGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventOrderEntryDeadlineGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SiteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBranchRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxBranchRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Timezone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS102501</Label>
			<EnumType>Timezone</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReceivingWarehouseOverrideAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReceivingWarehouseOverrideAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SiteIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SiteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBranchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBranchRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>LogisticsEntityLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Entity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EntityLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPostalAddress</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrimary</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrimaryTaxRegistration</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrivate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventSite</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventOrderEntryDeadlineGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventOrderEntryDeadlineGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderEntryDeadlineGroupId</Name>
					<Field>OrderEntryDeadlineGroupId</Field>
					<RelatedField>DeadlineGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeadlineGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBranch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBranch</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBranchRefRecId</Name>
					<Field>TaxBranchRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSInventStatus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSInventStatus</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultInventStatusId</Name>
					<SourceEDT>WHSDefaultStatusId</SourceEDT>
					<Field>DefaultInventStatusId</Field>
					<RelatedField>InventStatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>