<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationPolicyField</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSShipConsolidationPolicyField extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validatePolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the line.
    /// </summary>
    /// <param name = "_showInfo">
    /// Boolean indicating that errors are shown in case of failure.
    /// </param>
    /// <returns>true if the line is valid; otherwise false.</returns>
    internal boolean validatePolicyField(boolean _showInfo = true)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationError</Name>
				<Source><![CDATA[
    private boolean validationError(boolean _showInfo, str _error)
    {
        if (_showInfo)
        {
            checkFailed(_error);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.validatePolicyField();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPolicyField</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a new line with a method.
	/// </summary>
    /// <param name="_shipConsolidationPolicyName">
    /// Shipment consolidation policy name. 
	/// </param>
    /// <param name="_policyType">
    /// Shipment consolidation policy type.
    /// </param>
    /// <param name="_shipConsolidationPolicyField">
	/// Policy field record.
	/// </param>
    internal static void createPolicyField(WHSShipConsolidationPolicyName _shipConsolidationPolicyName, WHSShipConsolidationPolicyType _policyType, WHSShipConsolidationPolicyField _shipConsolidationPolicyField)
    {
        WHSShipConsolidationPolicyField shipConsolidationPolicyField;

        ttsbegin;

        if (WHSShipConsolidationPolicy::exist(_shipConsolidationPolicyName, _policyType))
        {
            shipConsolidationPolicyField.data(_shipConsolidationPolicyField);
            shipConsolidationPolicyField.ShipConsolidationPolicyName = _shipConsolidationPolicyName;
            shipConsolidationPolicyField.ShipConsolidationPolicyType = _policyType;
            shipConsolidationPolicyField.insert();

            shipConsolidationPolicyField.validatePolicyField(true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }

        this.validatePolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }

        this.validatePolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePolicy</Name>
				<Source><![CDATA[
    private void validatePolicy()
    {
        ttsbegin;

        WHSShipConsolidationPolicy shipConsolidationPolicy = WHSShipConsolidationPolicy::find(this.ShipConsolidationPolicyName, this.ShipConsolidationPolicyType, true);

        if (shipConsolidationPolicy)
        {
            shipConsolidationPolicy.validatePolicy();
            shipConsolidationPolicy.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if a specific <c>WHSShipConsolidationPolicyField</c> record exists.
	/// </summary>
    /// <param name="_shipConsolidationPolicyName">
    /// Shipment consolidation policy code of the record.
    /// </param>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
    /// <param name="_tableName">
    /// Table name.
    /// </param>
    /// <param name="_fieldName">
    /// Field name.
    /// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    internal static boolean exist(WHSShipConsolidationPolicyName _shipConsolidationPolicyName, WHSShipConsolidationPolicyType _policyType, TableName _tableName, FieldName _fieldName)
    {
        return (_shipConsolidationPolicyName && _tableName && _fieldName) &&
               (select firstonly whsShipConsolidationPolicyField
                    where whsShipConsolidationPolicyField.ShipConsolidationPolicyName == _shipConsolidationPolicyName &&
                          whsShipConsolidationPolicyField.ShipConsolidationPolicyType == _policyType                  &&
                          whsShipConsolidationPolicyField.SourceTableName             == _tableName                   &&
                          whsShipConsolidationPolicyField.SourceFieldName             == _fieldName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Finds a specific <c>WHSShipConsolidationPolicyField</c> record with given parameters.
	/// </summary>
    /// <param name="_shipConsolidationPolicyName">
    /// Shipment consolidation policy code of the record.
    /// </param>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
    /// <param name="_tableName">
    /// Table name.
    /// </param>
    /// <param name="_fieldName">
    /// Field name.
    /// </param>
    /// <param name="_forupdate">
    /// The parameter of type <c>boolean</c>.
    /// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    internal static WHSShipConsolidationPolicyField find(WHSShipConsolidationPolicyName _shipConsolidationPolicyName, WHSShipConsolidationPolicyType _policyType, TableName _tableName, FieldName _fieldName, boolean _forupdate = false)
    {
        WHSShipConsolidationPolicyField shipConsolidationPolicyField;

        if (_shipConsolidationPolicyName && _tableName && _fieldName)
        {
            shipConsolidationPolicyField.selectForUpdate(_forupdate);

            select firstonly shipConsolidationPolicyField
                where shipConsolidationPolicyField.ShipConsolidationPolicyName == _shipConsolidationPolicyName &&
                      shipConsolidationPolicyField.ShipConsolidationPolicyType == _policyType                  &&
                      shipConsolidationPolicyField.SourceTableName             == _tableName                   &&
                      shipConsolidationPolicyField.SourceFieldName             == _fieldName;
        }

        return shipConsolidationPolicyField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSShipConsolidationPolicyField</c> record with a RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the policy field.
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    internal static WHSShipConsolidationPolicyField findByRecId(
        RecId   _recId,
        boolean _forupdate = false)
    {
        WHSShipConsolidationPolicyField shipConsolidationPolicyField;

        if (_recId)
        {
            shipConsolidationPolicyField.selectForUpdate(_forupdate);

            select firstonly shipConsolidationPolicyField
                where shipConsolidationPolicyField.Recid == _recId;
        }

        return shipConsolidationPolicyField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the display name of the table.
    /// </summary>
    /// <returns>
    /// The display name of the table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display TableName sourceTableDisplayName()
    {
        return tableId2PName(tableName2Id(this.SourceTableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceFieldDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the display name of the field.
    /// </summary>
    /// <returns>
    /// The display name of the field.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display FieldName sourceFieldDisplayName()
    {
        FieldName fieldName = fieldId2PName(tableName2Id(this.SourceTableName), fieldName2Id(tableName2Id(this.SourceTableName), this.SourceFieldName));
        return strFmt('%1 (%2)', fieldName, this.SourceFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConsolidationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSShipConsolidationPolicy</c> record for the policy field.
    /// </summary>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    internal WHSShipConsolidationPolicy shipConsolidationPolicy(boolean _forupdate = false)
    {
        return WHSShipConsolidationPolicy::find(this.ShipConsolidationPolicyName, this.ShipConsolidationPolicyType, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryShipConsolidationField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the policy field is mandatory.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A parent consolidation policy.</param>
    /// <returns>
    /// true if the policy field is mandatory; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isMandatoryShipConsolidationField(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return WHSShipConsolidationPolicyTypeProvider::singletonFromType(this.ShipConsolidationPolicyType).mandatoryShipConsolidationPolicyFields(_shipConsolidationPolicy).in([tableName2Id(this.SourceTableName), fieldName2Id(tableName2Id(this.SourceTableName), this.SourceFieldName)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForbiddenShipConsolidationField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the policy field is forbidden.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A parent consolidation policy.</param>
    /// <returns>
    /// true if the policy field is forbidden; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isForbiddenShipConsolidationField(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return WHSShipConsolidationPolicyTypeProvider::singletonFromType(this.ShipConsolidationPolicyType).forbiddenShipConsolidationPolicyFields(_shipConsolidationPolicy).in([tableName2Id(this.SourceTableName), fieldName2Id(tableName2Id(this.SourceTableName), this.SourceFieldName)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultShipConsolidationField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the policy field is default.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A parent consolidation policy.</param>
    /// <returns>
    /// true if the policy field is default; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isDefaultShipConsolidationField(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return WHSShipConsolidationPolicyTypeProvider::singletonFromType(this.ShipConsolidationPolicyType).defaultShipConsolidationPolicyFields(_shipConsolidationPolicy).in([tableName2Id(this.SourceTableName), fieldName2Id(tableName2Id(this.SourceTableName), this.SourceFieldName)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Table_WHSShipConsolidationPolicyField_DeveloperDocumentation</DeveloperDocumentation>
	<FormRef>WHSShipConsolidationPolicy</FormRef>
	<Label>@WAX:ShipmentConsolidationPolicyFields</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SourceTableName</TitleField1>
	<TitleField2>SourceFieldName</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ShipConsolidationPolicyFieldNameIdx</PrimaryIndex>
	<ReplacementKey>ShipConsolidationPolicyFieldNameIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceFieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceFieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceFieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipConsolidationPolicyName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceFieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceTableName</Name>
			<ExtendedDataType>TableName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipConsolidationPolicyType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSShipConsolidationPolicyType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShipConsolidationPolicyFieldNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceFieldName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSShipConsolidationPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSShipConsolidationPolicy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipConsolidationPolicyName</Name>
					<Field>ShipConsolidationPolicyName</Field>
					<RelatedField>ShipConsolidationPolicyName</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipConsolidationPolicyType</Name>
					<Field>ShipConsolidationPolicyType</Field>
					<RelatedField>ShipConsolidationPolicyType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>