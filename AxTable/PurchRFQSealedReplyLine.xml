<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedReplyLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQSealedReplyLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByPurchRFQReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PurchRFQSealedReplyLine</c> that is related to the passed in record ID
    /// </summary>
    /// <param name="_purchRFQReplyLineRecId">
    /// The record ID of the <c>PurchRFQReplyLine</c> that is related to the record to be searched for.
    /// </param>
    /// <param name="_selectForUpdate">
    /// true if the record should be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// The <c>PurchRFQSealedReplyLine</c> record that is related to the passed in <c>PurchRFQReplyLine</c> Record ID.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQSealedReplyLine findByPurchRFQReplyLine(PurchRFQReplyLineRecId _purchRFQReplyLineRecId, boolean _isAlternate = false, boolean _selectForUpdate = false)
    {
        PurchRFQSealedReplyLine purchRFQSealedReplyLine;

        purchRFQSealedReplyLine.selectForUpdate(_selectForUpdate);

        select firstOnly purchRFQSealedReplyLine
            where purchRFQSealedReplyLine.PurchRFQReplyLine == _purchRFQReplyLineRecId
                && purchRFQSealedReplyLine.IsAlternate == _isAlternate;

        return purchRFQSealedReplyLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sealedRecordEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method encrypts or decrypts the value to be stored in the table and makes an entry in the audit log based on the parameters passed to it.
    /// </summary>
    /// <param name = "_set">The boolean value which determines if table value is to be encrypted or decrypted.</param>
    /// <param name = "_value">The value to be encrypted or decrypted.</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    /// <returns>The <c>PurchRFQTmpSealedReplyLine</c> table record.</returns>
    [Hookable(false), Wrappable(false)]
    public PurchRFQTmpSealedReplyLine sealedRecordEdit(boolean _set
                                                      , container _value
                                                      , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                      , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        str retValue = _sealedBidEncryptionManager.editEncryptedField(this, con2base64str(_value), fieldNum(PurchRFQSealedReplyLine, SealedRecord), _set);
        _sealedBidEncryptionManager.logEncryptionActivity(_set, _sealedAuditLogParameters);

        return con2Buf(base64str2con(retValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRFQId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the record exists in the <c>PurchRFQSealedReplyLine</c> for the passed in rfq Id.
    /// </summary>
    /// <param name="_purchRFQId">
    /// The request for quotation Id.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether record exists in the table.
    /// </returns>
    public static boolean existsRFQId(PurchRFQId _purchRFQId)
    {
        PurchRFQSealedReplyLine purchRFQSealedReplyLine;
        PurchRFQReplyLine purchRFQReplyLine;

        select firstOnly RecId from purchRFQSealedReplyLine
            join purchRFQReplyLine
            where purchRFQSealedReplyLine.PurchRFQReplyLine == purchRFQReplyLine.RecId
               && purchRFQReplyLine.RFQId == _purchRFQId;

        return purchRFQSealedReplyLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendorPortal</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PurchRFQSealedReplyLineDeveloperDocumentation</DeveloperDocumentation>
	<Label>@SCM:RFQSealedReplyLine</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PurchRFQReplyLineIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchRFQReplyLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchRFQLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAlternate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQIsAlternate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>SealedRecord</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EncryptedField</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Version</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Version</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchRFQReplyLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchRFQReplyLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsAlternate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RFQReplyLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchRFQReplyLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchRFQReplyLine</Name>
					<Field>PurchRFQReplyLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IsAlternate</Name>
					<Field>IsAlternate</Field>
					<RelatedField>IsAlternate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>