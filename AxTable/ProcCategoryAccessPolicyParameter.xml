<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryAccessPolicyParameter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProcCategoryAccessPolicyParameter extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFilterForCategoryAccessPolicyRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Conditionally adds an inner join filter to the given query build data source <paramref>_parentDataSource</paramref>.
    /// </summary>
    /// <param  name='_le'>
    ///   An instance of the <c>RefRecId</c> class for the <c>CompanyInfo</c> table to denote the legal entity.
    /// </param>
    /// <param  name='_ou'>
    ///   An instance of the <c>RefRecId</c> class to denote the operating unit.
    /// </param>
    /// <param  name='_parentDataSource'>
    ///   The query build data source to conditionally add an inner join filter to.
    /// </param>
    /// <param  name='_procurementCategoryFieldIdOnParent'>
    ///   The field Id of the column on the given <paramref>_parentDataSource</paramref> representing the procurement category record Id.
    /// </param>
    /// <remarks>
    ///   An inner join is added only if category access policy rule is found for the given <paramref>_le</paramref> and <paramref>_ou</paramref>.
    ///   The inner join is between the <paramref>_parentDataSource</paramref> and the <c>ProcCategoryAccessPolicyParameter</c> table
    ///   on the procurement category fields.
    /// </remarks>
    public static void addFilterForCategoryAccessPolicyRule(
        RefRecId _le, RefRecId _ou,
        QueryBuildDataSource _parentDataSource,
        fieldId _procurementCategoryFieldIdOnParent
    )
    {
        QueryBuildDataSource    qbdsProcCategoryAccessPolicyParameter;
        QueryBuildRange         qbr;
        RefRecId                purchasingPolicyRuleRecId = SysPolicyRule::findPurchasingPolicyRule(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule, _le, _ou);

        // if there is any CategoryAccessPolicyRule, then only ProcurementCategory nodes specified in the policy are included.
        if (purchasingPolicyRuleRecId)
        {
            qbdsProcCategoryAccessPolicyParameter = _parentDataSource.addDataSource(tablenum(ProcCategoryAccessPolicyParameter));
            qbdsProcCategoryAccessPolicyParameter.relations(false);
            qbdsProcCategoryAccessPolicyParameter.addLink(
                _procurementCategoryFieldIdOnParent,
                fieldnum(ProcCategoryAccessPolicyParameter, ProcurementCategory)
            );
            qbdsProcCategoryAccessPolicyParameter.joinMode(JoinMode::InnerJoin);

            qbr = CatDisplayHelper::addHiddenRange(
                qbdsProcCategoryAccessPolicyParameter,
                fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategoryAccessPolicyRule)
            );
            qbr.value(queryValue(purchasingPolicyRuleRecId));

            // if One2One isn't used, join may not be added at all unless _parentDataSource is the last datasource of a query object.
            qbdsProcCategoryAccessPolicyParameter.fetchMode(QueryFetchMode::One2One);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static ProcCategoryAccessPolicyParameter find(EcoResCategoryId _ecoResCategoryId, RefRecId _sysPolicyRuleRecId, boolean _forUpdate = false)
    {
        ProcCategoryAccessPolicyParameter procCategoryAccessPolicyParameter;

        procCategoryAccessPolicyParameter.selectForUpdate(_forUpdate);

        select procCategoryAccessPolicyParameter
            where procCategoryAccessPolicyParameter.ProcurementCategory == _ecoResCategoryId
            && procCategoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule == _sysPolicyRuleRecId;

        return procCategoryAccessPolicyParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategoryAllowedByPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if given procurement category is allowed by category access policy.
    /// </summary>
    /// <param  name='_procurementCategoryRecId'>
    ///   An instance of the <c>RefRecId</c> class for the <c>EcoResCategory</c> table to denote a procurement category.
    /// </param>
    /// <param  name='_employerRecId'>
    /// The employer record ID.
    /// </param>
    /// <param  name='_departmentRecId'>
    /// The department record ID.
    /// </param>
    /// <returns>
    ///   false if a <c>CatProcurementCache</c> record with valid data is not found for current user,
    ///   or if there is currently-effective purchasing policy but the given category is not explicitly allowed by the policy.
    /// </returns>
    /// <remarks>
    ///   If the optional _employerRecId and _departmentRecId are not specified the record in the
    ///   <c>CatProcurementCache</c> table for the current logon user is used to get policy.
    ///   If _employerRecId and _departmentRecId are not specified and the record is not found,
    ///   false is always returned.
    /// </remarks>
    public static boolean procurementCategoryAllowedByPolicy(
            RefRecId    _procurementCategoryRecId,
            RecId       _employerRecId = 0,
            RecId       _departmentRecId = 0)
    {
        CatProcurementCache               procurementCache = CatProcurementCache::getCache();
        RefRecId                          purchasingPolicyRuleRecId;
        ProcCategoryAccessPolicyParameter categoryAccessPolicy;
        boolean                           allowed = false; // default in case CatProcurementCache not found
        boolean                           prmsAreDefault = (prmisDefault(_employerRecId) || prmisDefault(_departmentRecId));

        if (procurementCache || !prmsAreDefault)
        {
            if (!prmsAreDefault)
            {
                purchasingPolicyRuleRecId = SysPolicyRule::findPurchasingPolicyRule(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule, _employerRecId, _departmentRecId);
            }
            else
            {
                purchasingPolicyRuleRecId = SysPolicyRule::findPurchasingPolicyRule(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule, procurementCache.EmployerRecId, procurementCache.DepartmentRecId);
            }
            // if there is any CategoryAccessPolicyRule, then only ProcurementCategory nodes specified in the policy are included.
            if (purchasingPolicyRuleRecId)
            {
                categoryAccessPolicy = ProcCategoryAccessPolicyParameter::find(_procurementCategoryRecId, purchasingPolicyRuleRecId);
                allowed = (categoryAccessPolicy.RecId);
            }
            else
            {
                // if there is no purchasingPolicyRuleRecId, all procurementCategory are Allowed
                allowed = true;
            }
        }

        return allowed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCategory</ConfigurationKey>
	<DeveloperDocumentation>@SYS309794</DeveloperDocumentation>
	<Label>@SYS304928</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProcurementCategoryAccessPolicyRule</TitleField1>
	<TitleField2>ProcurementCategory</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CategoryAccessPolicy</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryAccessPolicyRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryAccessPolicyRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS303404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryAccessPolicyRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategoryAccessPolicyRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryAccessPolicy</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcurementCategoryAccessPolicyRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProcurementCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_ProcCategoryAccessPolicyParameter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcurementCategoryAccessPolicyRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SysPolicyRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SysPolicyRule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SysPolicyRule_ProcCategoryAccessPolicyParameter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategoryAccessPolicyRule</Name>
					<Field>ProcurementCategoryAccessPolicyRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>