<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransOpenLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustTransOpenLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.AmountCur != 0)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransOpenLineId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(recId _custTransOpenLineId )
    {
        boolean ret = true;

        if (!CustTransOpenLine::exist(_custTransOpenLineId))
        {
            ret = checkFailed(strFmt(CustTransOpenLine::txtNotExist(), _custTransOpenLineId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransOpenLineId">
    /// The record ID of the <c>CustTransOpenLine</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custTransOpenLineId )
    {
        boolean found;

        found = (select firstonly RecId from custTransOpenLine
            where custTransOpenLine.RecId == _custTransOpenLineId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransOpenRecId">
    /// The record ID of the <c>CustTransOpen</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByRefId(recId _custTransOpenRecId)
    {
        boolean found;

        found = (select firstonly RecId from custTransOpenLine
            where custTransOpenLine.CustTransOpen == _custTransOpenRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransOpenLineId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTransOpenLine</c> table buffer.
    /// </returns>
    public static CustTransOpenLine find(
        recId _custTransOpenLineId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransOpenLine custTransOpenLine;

        custTransOpenLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransOpenLine
            where custTransOpenLine.RecId == _custTransOpenLineId;

        return custTransOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceLineRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_custInvoiceLineIdRef">
    /// The record ID of the <c>CustInvoiceLineIdRef</c> table.
    /// </param>
    /// <param name="_custTransOpenRecId">
    /// The record ID of the <c>CustTransOpen</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTransOpenLine</c> table buffer.
    /// </returns>
    public static CustTransOpenLine findByCustInvoiceLineRefId(
        recId _custInvoiceLineIdRef,
        recId _custTransOpenRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransOpenLine custTransOpenLine;

        custTransOpenLine.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransOpenLine
            where custTransOpenLine.CustInvoiceLineIdRef == _custInvoiceLineIdRef
            && custTransOpenLine.CustTransOpen == _custTransOpenRecId;

        return custTransOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_custTransOpenId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustTransOpenLine</c> table buffer.
    /// </returns>
    public static CustTransOpenLine findByRefId(
        recId _custTransOpenId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustTransOpenLine custTransOpenLine;

        custTransOpenLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custTransOpenLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly custTransOpenLine
            where custTransOpenLine.CustTransOpen == _custTransOpenId;

        return custTransOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of lines that are associated with customer transaction open lines.
    /// </summary>
    /// <param name="_custTransOpenRecId">
    /// The record ID of the open customer transaction.
    /// </param>
    /// <returns>
    /// The number of lines that are associated with customer settlements.
    /// </returns>
    public static Counter numOfLines(recId _custTransOpenRecId)
    {
        return any2int((select count(RecId) from custTransOpenLine
            where custTransOpenLine.CustTransOpen == _custTransOpenRecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRemainingAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the remaining unmarked amount for the open tranaction line.
    /// </summary>
    /// <returns>The remaining unmarked amount for the open tranaction line.</returns>
    public AmountCur findRemainingAmountCur()
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select sum(AmountToSettle), sum(CashDiscLineToTake) from custTransMarkedOpenLine
            where custTransMarkedOpenLine.CustTransOpenLine == this.RecId;

        return this.AmountCur - (custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS328542</DeveloperDocumentation>
	<Label>@SYS134069</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CustTransOpenIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
			<Label>@SYS10500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLineIdRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceLineIdRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransOpen</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransOpenRefRecId</ExtendedDataType>
			<Label>@SYS134070</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInvoiceLineIdRef</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceLineIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustTransOpenIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTransOpen</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLineIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLineIdRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceLineIdRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTransOpenLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLineIdRef</Name>
					<Field>CustInvoiceLineIdRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpen</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustTransOpenLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransOpen</Name>
					<Field>CustTransOpen</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>