<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatCountryRegionParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class IntrastatCountryRegionParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static IntrastatCountryRegionParameters find(
        LogisticsAddressCountryRegionId  _countryRegionId,
        boolean                          _forUpdate = false)
    {
        IntrastatCountryRegionParameters    intrastatCountryRegion;

        if (_countryRegionId)
        {
            LogisticsAddressCountryRegionId legalCountryRegionId = IntrastatParametersHelper::getCompanyPrimaryCountryRegionId();
            intrastatCountryRegion.selectForUpdate(_forUpdate);

            select firstonly intrastatCountryRegion
                where intrastatCountryRegion.CountryRegionId == _countryRegionId
                    && (intrastatCountryRegion.LegalCountryRegionId == legalCountryRegionId
                        || intrastatCountryRegion.LegalCountryRegionId  == "");
        }

        return intrastatCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDomestic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a country or region has the domestic type.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region to check.
    /// </param>
    /// <returns>
    /// true if the country or region is of the domestic type; otherwise false.
    /// </returns>
    public static boolean isDomestic(LogisticsAddressCountryRegionId _countryRegionId)
    {
        return IntrastatCountryRegionParameters::type(_countryRegionId) == CountryRegionType::Domestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionStateDomestic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the postal address is of type domestic.
    /// </summary>
    /// <param name="_deliveryPostalAddress">
    /// Postal address record to check.
    /// </param>
    /// <returns>
    /// true if the postal address is of type domestic; otherwise, false.
    /// </returns>
    public static boolean isCountryRegionStateDomestic(LogisticsPostalAddress _deliveryPostalAddress)
    {
        IntrastatStateParameters intrastatStateParameters;
        boolean isCountryRegionStateDomestic;

        if (_deliveryPostalAddress.State
            && FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
        {
            intrastatStateParameters = IntrastatStateParameters::find(
                _deliveryPostalAddress.CountryRegionId,
                _deliveryPostalAddress.State);
        }

        if (intrastatStateParameters)
        {
            isCountryRegionStateDomestic = intrastatStateParameters.CountryRegionType == CountryRegionType::Domestic;
        }
        else
        {
            isCountryRegionStateDomestic = IntrastatCountryRegionParameters::isDomestic(_deliveryPostalAddress.CountryRegionId);
        }

        return isCountryRegionStateDomestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInEU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the country or region is of type EU.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region to check.
    /// </param>
    /// <returns>
    /// true if country or region is of type EU; otherwise false.
    /// </returns>
    public static boolean isInEU(LogisticsAddressCountryRegionId   _countryRegionId)
    {
        return IntrastatCountryRegionParameters::type(_countryRegionId) == CountryRegionType::EU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionInEU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the country or region is of type EU.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region to check.
    /// </param>
    /// <param name="_legalCountryRegionId">
    /// The legal country or region to check.
    /// <returns>
    /// true if country or region is of type EU; otherwise false.
    /// </returns>
    public static boolean isCountryRegionInEU(LogisticsAddressCountryRegionId _countryRegionId, LogisticsAddressCountryRegionId _legalCountryRegionId)
    {
        return IntrastatCountryRegionParameters::countryRegionType(_countryRegionId, _legalCountryRegionId) == CountryRegionType::EU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionStateInEU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the country or region state is of type EU.
    /// </summary>
    /// <param name = "_deliveryPostalAddress">
    /// The country or region and state to check.
    /// </param>
    /// <param name = "_payerPostalAddress">
    /// The legal country or region and state to check.
    /// </param>
    /// <returns>
    /// true if country or region is of type EU; otherwise, false.
    /// </returns>
    public static boolean isCountryRegionStateInEU(LogisticsPostalAddress _deliveryPostalAddress, LogisticsPostalAddress _payerPostalAddress = null)
    {
        boolean isCountryRegionStateInEU;

        if (FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
        {
            IntrastatStateParameters intrastatStateParameters = IntrastatStateParameters::find(
                _deliveryPostalAddress.CountryRegionId, _deliveryPostalAddress.State);

            if (intrastatStateParameters)
            {
                isCountryRegionStateInEU = intrastatStateParameters.CountryRegionType == CountryRegionType::EU;
            }
            else
            {
                isCountryRegionStateInEU = IntrastatCountryRegionParameters::isCountryRegionInEU(_deliveryPostalAddress.CountryRegionId, _payerPostalAddress.CountryRegionId);
            }
        }
        else
        {
            isCountryRegionStateInEU = IntrastatCountryRegionParameters::isCountryRegionInEU(_deliveryPostalAddress.CountryRegionId, _payerPostalAddress.CountryRegionId);
        }

        return isCountryRegionStateInEU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionStateInEUByCountryAndStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the country and its state is of type EU.
    /// </summary>
    /// <param name = "_countryRegionId">The country or region Id to check.</param>
    /// <param name = "_stateId">The country state Id to check.</param>
    /// <returns>True if the country and its state is of type EU; otherwise, false.</returns>
    public static boolean isCountryRegionStateInEUByCountryAndStateId(LogisticsAddressCountryRegionId _countryRegionId, AddressStateId _stateId)
    {
        boolean isCountryRegionStateInEU;

        if (_countryRegionId)
        {
            if (_stateId)
            {
                LogisticsPostalAddress postalAddress;
                postalAddress.CountryRegionId = _countryRegionId;
                postalAddress.State = _stateId;
                isCountryRegionStateInEU = IntrastatCountryRegionParameters::isCountryRegionStateInEU(postalAddress);
            }
            else
            {
                isCountryRegionStateInEU = IntrastatCountryRegionParameters::isInEU(_countryRegionId);
            }
        }

        return isCountryRegionStateInEU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInEUByIsoCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the country or region is of type EU, Domestic or SpecialDomestic.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region to check.
    /// </param>
    /// <returns>
    /// true if country or region is of type EU, Domestic or SpecialDomestic; otherwise false.
    /// </returns>
    public static boolean isInEUByIsoCode(LogisticsAddressCountryRegionISOCode _countryIsoCode = SysCountryRegionCode::countryInfo())
    {
        LogisticsAddressCountryRegionId countryRegionId = SysCountryRegionCode::getCountryRegionIdByIsoCode(_countryIsoCode);
        CountryRegionType countryRegionType;

        if (FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
        {
            countryRegionType = IntrastatCountryRegionParameters::typeByLogisticsAddress(CompanyInfo::find().postalAddress());
        }
        else
        {
            countryRegionType = IntrastatCountryRegionParameters::type(countryRegionId);
        }

        return countryRegionType == CountryRegionType::EU ||
               countryRegionType == CountryRegionType::Domestic ||
               countryRegionType == CountryRegionType::SpecialDomestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialDomestic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the country or region is of type special domestic.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region to check.
    /// </param>
    /// <returns>
    /// true if country or region is of type special domestic; otherwise false.
    /// </returns>
    public static boolean isSpecialDomestic(LogisticsAddressCountryRegionId _countryRegionId)
    {
        return IntrastatCountryRegionParameters::type(_countryRegionId) == CountryRegionType::SpecialDomestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a country or region.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region for which to get the type.
    /// </param>
    /// <returns>
    /// The type of country or region.
    /// </returns>
    public static CountryRegionType type(LogisticsAddressCountryRegionId  _countryRegionId)
    {
        if (TaxIntrastatCountryRegionTypeCacheFlight::instance().isEnabled())
        {
            container cacheKey = [_countryRegionId, SysCountryRegionCode::countryInfo(), curExt()];
            container cacheResult = TaxIntrastatCountryRegionCache::getValue(TaxIntrastatCountryRegionCacheScope::CountryRegionType, cacheKey);

            CountryRegionType res;
            if (cacheResult != conNull())
            {
                res = conPeek(cacheResult, 1);
            }
            else
            {
                LogisticsAddressCountryRegionId legalcountryRegionId = IntrastatParametersHelper::getCompanyPrimaryCountryRegionId();
                IntrastatCountryRegionParameters intrastatCountryRegionParameters;
                select firstonly CountryRegionType from intrastatCountryRegionParameters
                    where intrastatCountryRegionParameters.CountryRegionId == _countryRegionId
                        && (intrastatCountryRegionParameters.LegalCountryRegionId == legalcountryRegionId
                            || intrastatCountryRegionParameters.LegalCountryRegionId  == "");

                res = intrastatCountryRegionParameters.CountryRegionType;
                TaxIntrastatCountryRegionCache::insertValue(TaxIntrastatCountryRegionCacheScope::CountryRegionType, cacheKey, [res]);
            }

            return res;
        }
        else
        {
            LogisticsAddressCountryRegionId legalcountryRegionId = IntrastatParametersHelper::getCompanyPrimaryCountryRegionId();

            return (select firstonly CountryRegionType from intrastatCountryRegionParameters
                    where intrastatCountryRegionParameters.CountryRegionId == _countryRegionId
                        && (intrastatCountryRegionParameters.LegalCountryRegionId == legalcountryRegionId
                            || intrastatCountryRegionParameters.LegalCountryRegionId  == "")).CountryRegionType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeByLogisticsAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a country or region state.
    /// </summary>
    /// <param name = "_postalAddress">
    /// The logistics postal address.
    /// </param>
    /// <returns>
    /// The type of country or region.
    /// </returns>
    public static CountryRegionType typeByLogisticsAddress(LogisticsPostalAddress _postalAddress)
    {
        if (TaxIntrastatCountryRegionTypeCacheFlight::instance().isEnabled())
        {
            CountryRegionType res;
            container cacheKey = [_postalAddress.CountryRegionId, _postalAddress.State, curExt()];
            container cacheResult = TaxIntrastatCountryRegionCache::getValue(TaxIntrastatCountryRegionCacheScope::CountryRegionTypeByState, cacheKey);
            if (cacheResult != conNull())
            {
                res = conPeek(cacheResult, 1);
            }
            else
            {
                IntrastatStateParameters intrastatStateParameters = IntrastatStateParameters::find(_postalAddress.CountryRegionId, _postalAddress.State);
                if (intrastatStateParameters)
                {
                    res = intrastatStateParameters.CountryRegionType;
                    TaxIntrastatCountryRegionCache::insertValue(TaxIntrastatCountryRegionCacheScope::CountryRegionTypeByState, cacheKey, [res]);
                }
                else
                {
                    return IntrastatCountryRegionParameters::type(_postalAddress.CountryRegionId);
                }
            }

            return res;
        }
        else
        {
            IntrastatStateParameters intrastatStateParameters = IntrastatStateParameters::find(_postalAddress.CountryRegionId, _postalAddress.State);

            return intrastatStateParameters ? intrastatStateParameters.CountryRegionType : IntrastatCountryRegionParameters::type(_postalAddress.CountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a country or region.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The country or region to check.
    /// </param>
    /// <param name="_legalCountryRegionId">
    /// The legal country or region to check.
    /// <returns>
    /// <returns>
    /// The type of country or region.
    /// </returns>
    public static CountryRegionType countryRegionType(LogisticsAddressCountryRegionId _countryRegionId, LogisticsAddressCountryRegionId _legalCountryRegionId)
    {
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
        {
            if (_countryRegionId != _legalCountryRegionId
                && IntrastatCountryRegionParameters::isInEU(_countryRegionId)
                && (_legalCountryRegionId == '' || IntrastatCountryRegionParameters::isInEU(_legalCountryRegionId)))
            {
                return CountryRegionType::EU;
            }
            else
            {
                return CountryRegionType::Domestic;
            }
        }

        if (IntrastatParametersHelper::isExtendedCountryRegionEnabled() && _legalCountryRegionId != "")
        {
            return (select firstonly CountryRegionType from intrastatCountryRegionParameters
                    where intrastatCountryRegionParameters.CountryRegionId == _countryRegionId
                        && intrastatCountryRegionParameters.LegalCountryRegionId == _legalCountryRegionId).CountryRegionType;
        }
        else
        {
            return IntrastatCountryRegionParameters::type(_countryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value when add new records on foreign trade parameter form.
    /// </summary>
    public void initValue()
    {
        super();

        if (IntrastatParametersHelper::isExtendedCountryRegionEnabled())
        {
            DirPartyLocation dirPartyLocation;
            dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(CompanyInfo::current());

            this.LegalCountryRegionId
                = strUpr(LogisticsPostalAddress::findByLocation(dirPartyLocation.Location).CountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether there exist two same lines.
    /// </summary>
    /// <returns>true if the validation passes; Otherwise, false.</returns>
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid && IntrastatParametersHelper::isExtendedCountryRegionEnabled())
        {
            IntrastatCountryRegionParameters intrastatCountryRegionParameters;

            select firstonly RecId from intrastatCountryRegionParameters
                where intrastatCountryRegionParameters.LegalCountryRegionId == this.LegalCountryRegionId
                    && intrastatCountryRegionParameters.CountryRegionId == this.CountryRegionId
                    && intrastatCountryRegionParameters.RecId != this.RecId;

            if (intrastatCountryRegionParameters.RecId)
            {
                isValid = checkFailed(strFmt("@Intrastat:NotAllowTwoSameLines"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a country or region state.
    /// </summary>
    /// <param name = "_postalAddress">The logistics postal address.</param>
    /// <param name = "_legalPostalAddress">The legal logistics postal address.</param>
    /// <returns>The type of country or region.</returns>
    public static CountryRegionType getCountryRegionType(LogisticsPostalAddress _postalAddress, LogisticsPostalAddress _legalPostalAddress = null)
    {
        if (FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
        {
            return IntrastatCountryRegionParameters::typeByLogisticsAddress(_postalAddress);
        }
        else
        {
            return IntrastatCountryRegionParameters::type(_postalAddress.CountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record.
    /// </summary>
    public void update()
    {
        IntrastatCountryRegionParameters origIntrastatCountryRegionParm = this.orig();
        super();

        if (TaxIntrastatCountryRegionTypeCacheFlight::instance().isEnabled()
            && (this.CountryRegionType != origIntrastatCountryRegionParm.CountryRegionType
                || this.LegalCountryRegionId != origIntrastatCountryRegionParm.LegalCountryRegionId
                || this.CountryRegionId != origIntrastatCountryRegionParm.CountryRegionId))
        {
            TaxIntrastatCountryRegionCache::removeValue(
                TaxIntrastatCountryRegionCacheScope::CountryRegionType,
                [origIntrastatCountryRegionParm.CountryRegionId, SysCountryRegionCode::countryInfo(), curExt()]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record.
    /// </summary>
    public void delete()
    {
        super();

        if (TaxIntrastatCountryRegionTypeCacheFlight::instance().isEnabled())
        {
            TaxIntrastatCountryRegionCache::removeValue(
                TaxIntrastatCountryRegionCacheScope::CountryRegionType,
                [this.CountryRegionId, SysCountryRegionCode::countryInfo(), curExt()]);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ForeignTrade</ConfigurationKey>
	<DeveloperDocumentation>@SYS328852</DeveloperDocumentation>
	<FormRef>IntrastatParameters</FormRef>
	<Label>@SYS26871</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>CountryRegionId</TitleField1>
	<TitleField2>IntrastatCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Intrastat</Modules>
	<ReplacementKey>LogisticsAddressCountryRegionIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalCountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Various</Name>
			<Label>@SYS28008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryCode_IT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlackListedCountry_IT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlackListedCountry_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS343636</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryCode_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryCode_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Label>@Intrastat:PartyCountryRegion</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CountryRegionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CountryRegionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatExternalCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalCountryRegionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LogisticsAddressCountryRegionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryRegionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalCountryRegionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>IntrastatCountryRegionParameters</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>