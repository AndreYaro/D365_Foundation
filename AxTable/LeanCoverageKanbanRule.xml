<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCoverageKanbanRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanCoverageKanbanRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a valid, non-empty, <c>utcdatetime</c> object.
    /// </summary>
    /// <param name="_dateTime">
    ///    The input <c>utcdatetime</c> object; optional.
    /// </param>
    /// <returns>
    ///    The specified date time value; otherwise, the maximum date time value supported by the
    ///    <c>utcdatetime</c> object.
    /// </returns>
    /// <remarks>
    ///    This method is used internally by the class.
    /// </remarks>
    private utcdatetime correctDateTime(utcdatetime _dateTime)
    {
        return _dateTime ? _dateTime : DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record from the database.
    /// </summary>
    public void delete()
    {
        super();
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the foreign key to the <c>KanbanRule</c> table.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> table to which the current buffer should be linked.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromKanbanRule(KanbanRule _kanbanRule)
    {
        if (!_kanbanRule.RecId)
        {
            error(Error::wrongUseOfFunction(funcName()));
        }

        this.KanbanRule = _kanbanRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLeanCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the foreign key to the <c>LeanCoverage</c> table.
    /// </summary>
    /// <param name="_leanCoverage">
    ///    The <c>LeanCoverage</c> table to which the current buffer should be linked.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromLeanCoverage(LeanCoverage _leanCoverage)
    {
        if (!_leanCoverage.RecId)
        {
            error(Error::wrongUseOfFunction(funcName()));
        }

        this.Coverage = _leanCoverage.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.ValidFrom = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the current record into the database.
    /// </summary>
    public void insert()
    {
        super();
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current record in the database.
    /// </summary>
    public void update()
    {
        super();
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean validateData(
        LeanRuleData _leanRuleData,
        boolean      _ignoreChains = false)
    {
        Plan            plan;
        Plan            planOrig;
        boolean         result = true;

        // this is a generic check which is context independent. that's why we're doing it here
        result = !this.ValidTo || this.ValidFrom <= this.ValidTo;

        if (!result)
        {
            // You have specified an invalid date range.
            error("@SYS137396");
        }

        // validate the dates with respect the rule being part of a replacement chain
        result = (_ignoreChains || this.validateRuleChainDates(_leanRuleData)) && result;

        // do context-specific validation of the rule's validity period
        if (!this.validateRuleValidityPeriod(_leanRuleData))
        {
            result = false;

            // Rule %1 cannot be saved
            error(strFmt("@SYS133242", _leanRuleData.parmKanbanRule().RuleId));

            // Validity period falls out of the validity periods of the corresponding production flow version(s)
            error("@SYS133817");
        }

        // if the validation failed and the version is changed, inform the user that the replacing rule functionality
        // should be used.
        if (!result)
        {
            plan     = _leanRuleData.kanbanFlow().plan();
            planOrig = _leanRuleData.orig().parmKanbanFlowWrapper().parmKanbanFlow().plan();

            if (   _leanRuleData.parmKanbanRule().RecId != 0
                && planOrig.RecId != 0
                && (plan.PlanReference != planOrig.PlanReference
                ||  plan.VersionNum    != planOrig.VersionNum))
            {
                warning("@SYS343467");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRuleChainDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the periods of the current rule with regard to the replacement chain to which the rule
    ///    belongs.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The <c>LeanRuleData</c> object that contains the data for the current rule.
    /// </param>
    /// <returns>
    ///    true if the dates are valid; otherwise, false.
    /// </returns>
    private boolean validateRuleChainDates(LeanRuleData _leanRuleData)
    {
        LeanRuleData            originalData               = _leanRuleData.orig();
        LeanCoverageKanbanRule  origLeanCoverageKanbanRule = originalData.parmLeanCoverageKanbanRule();
        KanbanRule              kanbanRule                 = _leanRuleData.parmKanbanRule();
        KanbanRule              replacedKanbanRule         = kanbanRule.replacedRule();
        boolean                 result                     = true;

        // if the current rule is a replacing one, change of its ValidFrom isn't allowed
        if (replacedKanbanRule.RecId &&
            origLeanCoverageKanbanRule.ValidFrom != this.ValidFrom)
        {
            result = false;
            // The 'Effective' field cannot be changed for replacing rules.
            error(strFmt("@SYS136798",fieldPName(LeanCoverageKanbanRule,ValidFrom)));
        }

        // if the current rule is a replacing one, change of its ValidFrom isn't allowed
        if (kanbanRule.ReplacingKanbanRule && origLeanCoverageKanbanRule.ValidTo != this.ValidTo)
        {
            result = false;
            // The 'Expires' field cannot be changed for replaced rules.
            error(strFmt("@SYS136799",fieldPName(LeanCoverageKanbanRule,ValidTo)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRuleValidityPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the validity period of a kanban rule.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The rule data object.
    /// </param>
    /// <returns>
    ///    true if the period is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A rule is valid if its validity period falls in the intersection of the validity periods of the
    ///    production flow version to which the source and destination production flow elements belong.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateRuleValidityPeriod(LeanRuleData _leanRuleData)
    {
        Plan                        firstPlan;
        Plan                        lastPlan;
        LeanRuleActiveDateTime      safeValidFrom;
        LeanRuleActiveDateTime      safeValidTo;
        KanbanFlow                  kanbanFlow = _leanRuleData.kanbanFlow();
        boolean                     result     = true;

        // check input parameters for validity
        if (!kanbanFlow.FirstPlanPlanActivity ||
            !kanbanFlow.LastPlanPlanActivity)
        {
            // this case means corrupt data - execution context ProdFlow,
            // but unset source/destination elements

            // Rule %1 cannot be saved
            error(strFmt("@SYS133242", _leanRuleData.parmKanbanRule().RuleId));

            // Source or destination elements are missing.
            error("@SYS136344");

            return false;
        }

        // get the versions corresponding to the source/destination production flow elements
        firstPlan = kanbanFlow.firstPlan();
        lastPlan = kanbanFlow.lastPlan();

        // determine the 'safe' validity period
        safeValidFrom = max(firstPlan.ValidFrom, lastPlan.ValidFrom);
        safeValidTo   = min(this.correctDateTime(firstPlan.ValidTo), this.correctDateTime(lastPlan.ValidTo));

        // determine if the rule's validity period falls within the intersection of the
        // validity periods of the corresponding production flow versions
        result =    safeValidFrom <= this.ValidFrom
                 && this.correctDateTime(this.ValidTo) <= safeValidTo;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite(
        boolean _genericValidation = true,
        LeanRuleData _leanRuleData = null)
    {
        LeanRuleData    leanRuleData;
        boolean         result = super();

        if (   result
            && _genericValidation)
        {
            leanRuleData = _leanRuleData ? _leanRuleData : LeanRuleData::newKanbanRuleRecId(this.KanbanRule);
            result       = this.validateData(leanRuleData);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>belongToTheSameReplacementChain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether two <c>KanbanRules</c> buffers belong to the same replacement chain.
    /// </summary>
    /// <param name="_kanbanRuleRecId1">
    ///    The record ID of the first <c>KanbanRule</c> buffer.
    /// </param>
    /// <param name="_kanbanRuleRecId2">
    ///    The record ID of the second <c>KanbanRule</c> buffer.
    /// </param>
    /// <param name="_checkOrder">
    ///    Determines whether the <paramref name="_kanbanRuleRecId2" /> parameter should be a successor of the
    ///    <paramref name="_kanbanRuleRecId1" /> parameter.
    /// </param>
    /// <returns>
    ///    true if the two rules belong to the same replacement chain; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean belongToTheSameReplacementChain(
        KanbanRuleRefRecId _kanbanRuleRecId1,
        KanbanRuleRefRecId _kanbanRuleRecId2,
        boolean            _checkOrder = false)
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule = LeanCoverageKanbanRule::findKanbanRule(_kanbanRuleRecId1);
        LeanCoverageKanbanRule otherLeanCoverageKanbanRule;
        boolean result = false;

        // check if the LeanCoverage is shared
        select firstonly RecId, Coverage, ValidFrom, ValidTo from otherLeanCoverageKanbanRule
        where otherLeanCoverageKanbanRule.Coverage == leanCoverageKanbanRule.Coverage &&
              otherLeanCoverageKanbanRule.RecId != leanCoverageKanbanRule.RecId;

        result = otherLeanCoverageKanbanRule.RecId != 0;

        // if needed make sure the rules are one after the other
        if (_checkOrder)
        {
            result = result && otherLeanCoverageKanbanRule.ValidFrom > leanCoverageKanbanRule.ValidTo;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>LeanCoverageKanbanRule</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>LeanCoverageKanbanRule</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _refRecId)
    {
        return _refRecId &&
               (select firstonly leanCoverageKanbanRule
                    where leanCoverageKanbanRule.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanCoverageKanbanRule</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>LeanCoverageKanbanRule</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanCoverageKanbanRule</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCoverageKanbanRule find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule;

        if (_refRecId)
        {
            leanCoverageKanbanRule.selectForUpdate(_forUpdate);

            select firstonly leanCoverageKanbanRule
                where leanCoverageKanbanRule.RecId == _refRecId;
        }

        return leanCoverageKanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanCoverageKanbanRule</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The value of the <c>Coverage</c> field of the <c>LeanCoverageKanbanRule</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanCoverageKanbanRule</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCoverageKanbanRule findCoverage(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule;

        if (_refRecId)
        {
            leanCoverageKanbanRule.selectForUpdate(_forUpdate);

            select firstonly leanCoverageKanbanRule
                where leanCoverageKanbanRule.Coverage == _refRecId;
        }

        return leanCoverageKanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanCoverageKanbanRule</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>KanbanRule</c> field of the <c>LeanCoverageKanbanRule</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanCoverageKanbanRule</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCoverageKanbanRule findKanbanRule(
        KanbanRuleRefRecId _refRecId,
        boolean            _forUpdate = false)
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule;

        if (_refRecId)
        {
            leanCoverageKanbanRule.selectForUpdate(_forUpdate);

            select firstonly leanCoverageKanbanRule
                where leanCoverageKanbanRule.KanbanRule == _refRecId;
        }

        return leanCoverageKanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestActiveReplacementRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record ID of the currently active <c>KanbanRule</c> record for a rule that is part of the
    ///    same replacement chain.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The record ID of a rule that belongs to the same replacement chain.
    /// </param>
    /// <param name="_activeDateTime">
    ///    The date at which the required rule should be active.
    /// </param>
    /// <returns>
    ///    The record ID of the currently active <c>KanbanRule</c> in the replacement chain.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RefRecId findLatestActiveReplacementRule(
        KanbanRuleRefRecId     _kanbanRule,
        LeanRuleActiveDateTime _activeDateTime = DateTimeUtil::getSystemDateTime())
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule;
        LeanCoverageKanbanRule activeLeanCoverageKanbanRule;

        if (!_kanbanRule)
        {
            return activeLeanCoverageKanbanRule.KanbanRule;
        }

        // get the buffer for the passed parameter
        leanCoverageKanbanRule = LeanCoverageKanbanRule::findKanbanRule(_kanbanRule);

        select firstonly KanbanRule from activeLeanCoverageKanbanRule
            where activeLeanCoverageKanbanRule.RecId     != leanCoverageKanbanRule.RecId    &&
                  activeLeanCoverageKanbanRule.Coverage  == leanCoverageKanbanRule.Coverage &&
                  activeLeanCoverageKanbanRule.ValidFrom <= _activeDateTime                 &&
                  (!activeLeanCoverageKanbanRule.ValidTo                                  ||
                   activeLeanCoverageKanbanRule.ValidTo >= _activeDateTime);

        return activeLeanCoverageKanbanRule.KanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultipleCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>LeanCoverage</c> buffer is shared by several rules.
    /// </summary>
    /// <param name="_leanCoverageRecId">
    ///    The record ID of the <c>LeanCoverage</c> record to check.
    /// </param>
    /// <returns>
    ///    true if the <c>LeanCoverage</c> record is shared; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isMultipleCoverage(RefRecId _leanCoverageRecId)
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule;

        select count(RecId) from leanCoverageKanbanRule
            where leanCoverageKanbanRule.Coverage == _leanCoverageRecId;

        return leanCoverageKanbanRule.RecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRulePartOfReplacementChain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a rule is part of a replacement chain of rules.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The record ID of the <c>KanbanRule</c> record to check.
    /// </param>
    /// <param name="_countLastElement">
    ///    A Boolean value that indicates whether the last element of a rule replacement chain is counted as
    ///    part of a replacement chain.
    /// </param>
    /// <returns>
    ///    true if the rule belongs to a chain of replacement rules and the element is not last, and true if
    ///    the element is last and the <paramref name="_countLastElement" /> parameter is true; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    If a rule belongs to a chain of replacement rules, they all share the same <c>LeanCoverage</c>
    ///    record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isRulePartOfReplacementChain(
        KanbanRuleRefRecId _kanbanRule,
        boolean            _countLastElement = true)
    {
        LeanCoverageKanbanRule  leanCoverageKanbanRule = LeanCoverageKanbanRule::findKanbanRule(_kanbanRule);
        KanbanRule              kanbanRule = KanbanRule::find(_kanbanRule);
        KanbanRule              referencingKanbanRule;
        boolean                 result = false;

        if (!_kanbanRule)
        {
            return false;
        }

        if (LeanCoverageKanbanRule::isMultipleCoverage(leanCoverageKanbanRule.Coverage))
        {
            // if the coverage is shared, there should be at least one other rule which
            // is either referenced by this rule, or this rule is referenced by it
            select firstonly RecId, ReplacingKanbanRule from referencingKanbanRule
                where referencingKanbanRule.RecId == kanbanRule.ReplacingKanbanRule ||
                      referencingKanbanRule.ReplacingKanbanRule == kanbanRule.RecId;

            result = referencingKanbanRule.RecId != 0 &&    // is part of replacement chain AND
                     (kanbanRule.ReplacingKanbanRule ||     // is not last element OR
                      _countLastElement);                   // is last element AND _countLastElement is True
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS325877</DeveloperDocumentation>
	<FormRef>KanbanRules</FormRef>
	<Label>@SYS132005</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Coverage</TitleField1>
	<TitleField2>KanbanRule</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>DateEffectiveness</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Coverage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanbanRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Coverage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Coverage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanbanRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidityPeriod</Name>
			<Label>@SYS132007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Coverage</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanCoverageRefRecId</ExtendedDataType>
			<Label>@SYS132003</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KanbanRule</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanRuleRefRecId</ExtendedDataType>
			<Label>@SYS131887</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanRuleActiveDateTime</ExtendedDataType>
			<Label>@SYS128216</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanRuleActiveDateTime</ExtendedDataType>
			<Label>@SYS75815</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateEffectiveness</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ValidRuleCoverageIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>KanbanRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanRule</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>KanbanRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>KanbanRule</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>KanbanRuleEffectiveness</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KanbanRule</Name>
					<Field>KanbanRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanCoverage</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>LeanCoverage</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>KanbanRuleCoverage</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanRuleEffectiveness</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Coverage</Name>
					<Field>Coverage</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>