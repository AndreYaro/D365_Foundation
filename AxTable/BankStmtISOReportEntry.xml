<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStmtISOReportEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankStmtISOReportEntry extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a bank document can be created from the table in current status.
    /// </summary>
    /// <returns>
    /// Whether a bank document can be created from the table in current status.
    /// </returns>
    public boolean canCreateBankDocument()
    {
        return (this.parmBankDocumentBookType() != BankDocumentBookType::None
                &&  this.IsNewBankDocument() == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes record of the bank report entry.
    /// </summary>
    public void delete()
    {
        ttsbegin;
        BankStmtISOReportEntry::deleteStatementLine(this.RecId);
        TaxUncommitted::deleteForDocumentLine(tableNum(BankStmtISOReportEntry), this.RecId);
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispBankStatementId</Name>
				<Source><![CDATA[
    internal display BankStatementId dispBankStatementId()
    {
        return this.getStatementId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispLineVoucherOrStatementVoucher</Name>
				<Source><![CDATA[
    internal display Voucher dispLineVoucherOrStatementVoucher()
    {
        return this.Voucher ? this.Voucher : this.getStatement().Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispLineAccountingDateOrStatementAccountingDate</Name>
				<Source><![CDATA[
    internal display TransDate dispLineAccountingDateOrStatementAccountingDate()
    {
        return this.AccountingDate != dateNull() ? this.AccountingDate : this.getStatement().AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank currency amount.
    /// </summary>
    /// <returns>
    ///     The bank currency amount.
    /// </returns>
    public display AmountCur dispBankCurrencyAmount()
    {
        return this.getBankCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispBankCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank currency code.
    /// </summary>
    /// <returns>
    ///     The bank currency code.
    /// </returns>
    public display CurrencyCode dispBankCurrencyCode()
    {
        return this.getStatement().getCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank currency code exchange rate.
    /// </summary>
    /// <returns>
    ///     The bank currency code exchange rate.
    /// </returns>
    public display ExchRate dispExchangeRate()
    {
        CurrencyCode bankCurrency;

        bankCurrency = this.getBankCurrencyCode();

        if (bankCurrency)
        {
            return ExchangeRateHelper::exchRate(bankCurrency, this.parmExchangeRateDate());
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispTradingPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the trading party name of current bank statement line.
    /// </summary>
    /// <returns>
    ///     Trading party name.
    /// </returns>
    public display BankStatementNameText dispTradingPartyName()
    {
        return BankStmtISOPartyIdentification::find(this.TradingParty).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the transaction type.
    /// </summary>
    /// <returns>
    /// The instance of the <c>BankTransactionType</c> class.
    /// </returns>
    public display BankTransactionType dispTransactionType()
    {
        BankTransactionType transactionType;

        transactionType = this.getTransactionType();
        if (transactionType)
        {
            return transactionType;
        }
        else
        {
            return this.ProprietaryBankTransactionCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doMarkNewBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the statement line as new bank document.
    /// </summary>
    /// <param name="_isMarked">
    /// Whether the statement line is marked as new.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throw error when update failed.
    /// </exception>
    private void doMarkNewBankDocument(boolean _isMarked)
    {
        boolean isUpdate;

        if (_isMarked && !this.IsNewBankDocument)
        {
            this.IsNewBankDocument = true;
            isUpdate = true;
        }
        else if (!_isMarked && this.IsNewBankDocument)
        {
            this.IsNewBankDocument = false;
            isUpdate = true;
        }

        if (isUpdate)
        {
            if (this.validateUpdateBankDocument())
            {
                this.doUpdateBankDocument(true);
            }
            else if (FeatureStateProvider::isFeatureEnabled(DecoupleBankReconciliationReversalWithBankStmtReversalFeature::instance()))
            {
                throw error("@CashManagement:WrongUnmatchNewStatementLine");
            }
            else
            {
                throw error("@GLS221678");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs updating of bank doucment if impacted.
    /// </summary>
    /// <param name="_callUpdate">
    /// Whether to update the statement line table buffer.
    /// </param>
    private void doUpdateBankDocument(boolean _callUpdate = true)
    {
        BankStatementLineBankDocumentInformation bankStatementLineBankDocInformation;
        boolean isUpdatedBankDocumentInformation;

        //check the new docuemnt flag
        if (this.IsNewBankDocument && !this.orig().IsNewBankDocument)
        {
            bankStatementLineBankDocInformation.initFromBankStatementLine(this);
            bankStatementLineBankDocInformation.insert();

            BankDocumentProcessor::submitBankDocumentTable(this, BankDocumentStatusChangeType::Reconcile);
            isUpdatedBankDocumentInformation = true;

            if (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()))
            {
                if (BankParameters::find().BookingDateAsDefaultAccountingDate)
                {
                    this.AccountingDate = this.getBookingDate();
                }
                else
                {
                    this.AccountingDate = this.getStatement().AccountingDate;
                }
            }

            if (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
                || FeatureStateProvider::isFeatureEnabled(BankStatementReversePostWithNewTransactionFeature::instance()))
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
            }
        }
        //check the new docuemnt flag
        else if (!this.IsNewBankDocument && this.orig().IsNewBankDocument)
        {
            bankStatementLineBankDocInformation = BankStatementLineBankDocumentInformation::findByReportEntry(this.RecId, true);
            bankStatementLineBankDocInformation.delete();
            isUpdatedBankDocumentInformation = true;

            BankDocumentProcessor::deleteBankDocument(this.TableId, this.RecId);

            if (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()))
            {
                SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine, true);
                sourceDocumentLine.delete();

                this.AccountingDate = dateNull();
                this.SourceDocumentLine = 0;
            }
        }

        //refresh tax uncommitted
        if (isUpdatedBankDocumentInformation
            || this.getBankCurrencyAmount() != this.orig().getBankCurrencyAmount())
        {
            TaxUncommitted::deleteForDocumentLine(tableNum(BankStmtISOReportEntry), this.RecId);
        }

        if (_callUpdate)
        {
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets amount according to given amount.
    /// </summary>
    /// <param name="_set">
    ///     Indicates whether amount is set.
    /// </param>
    /// <param name="_amount">
    ///     Given amount.
    /// </param>
    /// <returns>
    ///     Amount.
    /// </returns>
    /// <remarks>
    ///     This method is only called when <c>BankStatementShowDrCrAmount</c> field of <c>BankParameters</c> is false.
    /// </remarks>
    public edit BankStmtISODecimal editAmount(
        boolean             _set,
        BankStmtISODecimal  _amount)
    {
        return this.setAmount(_set, false, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets credit amount according to given amount.
    /// </summary>
    /// <param name="_set">
    ///     Indicates whether credit amount is set.
    /// </param>
    /// <param name="_creditAmount">
    ///     Given amount.
    /// </param>
    /// <returns>
    ///     Credit amount.
    /// </returns>
    /// <remarks>
    ///     This method is only called when <c>BankStatementShowDrCrAmount</c> field of <c>BankParameters</c> is true.
    /// </remarks>
    public edit BankStmtISODecimal editCreditAmount(
        boolean             _set,
        BankStmtISODecimal  _creditAmount)
    {
        return this.setAmount(_set, true, _creditAmount, DebitCredit::Credit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets debit amount according to given amount.
    /// </summary>
    /// <param name="_set">
    ///     Indicates whether debit amount is set.
    /// </param>
    /// <param name="_debitAmount">
    ///     Given amount.
    /// </param>
    /// <returns>
    ///     Debit amount.
    /// </returns>
    /// <remarks>
    ///     This method is only called when <c>BankStatementShowDrCrAmount</c> field of <c>BankParameters</c> is true.
    /// </remarks>
    public edit BankStmtISODecimal editDebitAmount(
        boolean             _set,
        BankStmtISODecimal  _debitAmount)
    {
        return this.setAmount(_set, true, _debitAmount, DebitCredit::Debit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank account.
    /// </summary>
    /// <returns>
    ///     Bank account.
    /// </returns>
    public CompanyBankAccountId getAccountId()
    {
        return this.getStatement().BankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank currency amount.
    /// </summary>
    /// <returns>
    ///     The bank currency amount.
    /// </returns>
    public AmountCur getBankCurrencyAmount()
    {
        return this.setAmount(false, false, this.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank currency code.
    /// </summary>
    /// <returns>
    ///     The bank currency code.
    /// </returns>
    public CurrencyCode getBankCurrencyCode()
    {
        return this.getStatement().getCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the booking date of statement line.
    /// </summary>
    /// <returns>
    ///     The booking date.
    /// </returns>
    public AccountingDate getBookingDate()
    {
        AccountingDate bookingDate;

        if (FeatureStateProvider::isFeatureEnabled(BankUserPreferredTimeZoneAlignmentFeature::instance()))
        {
            bookingDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.BookingDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            bookingDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.BookingDateTime, DateTimeUtil::getCompanyTimeZone()));
        }

        return bookingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPassedWorksheets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of how many reconciliations has included this statement line, but not reconciled.
    /// </summary>
    /// <param name="_reconciliationRecId">
    /// The reconciliation header.
    /// </param>
    /// <returns>
    /// The number of passed work sheet.
    /// </returns>
    public Counter getPassedWorksheets(RecId _reconciliationRecId)
    {
        BankReconciliationHistoryDetails    openedItem;
        BankReconciliationHeader            bankReconciliationheader;

        select count(RecId) from openedItem
            where this.RecId == openedItem.BankStmtISOReportEntry
        exists join bankReconciliationheader
            where   bankReconciliationheader.RecId == openedItem.BankReconciliationHeader
                &&  bankReconciliationheader.CutOffDate < BankReconciliationHeader::find(_reconciliationRecId).CutOffDate;

        return any2int(openedItem.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the related <c>BankStmtISOAccountStatement</c> buffer.
    /// </summary>
    /// <returns>
    ///     The related <c>BankStmtISOAccountStatement</c> buffer.
    /// </returns>
    public BankStmtISOAccountStatement getStatement()
    {
        return BankStmtISOAccountStatement::find(this.BankStmtISOAccountStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementLinePostTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related <c>BankStatementLinePostTable</c> buffer.
    /// </summary>
    /// <returns>The related <c>BankStatementLinePostTable</c> buffer.</returns>
    internal BankStatementLinePostTable getStatementLinePostTable()
    {
        return BankStatementLinePostTable::find(this.BankStatementLinePostTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank statement Id.
    /// </summary>
    /// <returns>
    ///     Bank statement Id.
    /// </returns>
    public BankStatementId getStatementId()
    {
        return this.getStatement().Identification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the transaction amount for statement line.
    /// </summary>
    /// <returns>
    ///     The transaction amount.
    /// </returns>
    public AmountCur getTransactionCurrencyAmount()
    {
        AmountCur transactionCurrencyAmount;

        if (this.BankStatementCounterCurrency == '')
        {
            transactionCurrencyAmount = this.getBankCurrencyAmount();
        }
        else
        {
            transactionCurrencyAmount = this.BankStatementCounterCurrencyAmount;
        }

        return transactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the transaction currency for statement line.
    /// </summary>
    /// <returns>
    ///     The transaction currency.
    /// </returns>
    public CurrencyCode getTransactionCurrencyCode()
    {
        CurrencyCode currency;

        currency = this.BankStatementCounterCurrency;

        if (currency == '')
        {
            currency = this.getBankCurrencyCode();
        }

        return currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank transaction type.
    /// </summary>
    /// <returns>
    ///     Bank transaction type.
    /// </returns>
    public BankTransactionType getTransactionType()
    {
        BankTransactionType transactionType;

        transactionType = BankStatementTransactionTypeMapping::findByAccountAndTransCode(
            this.getAccountId(),
            this.ProprietaryBankTransactionCode).BankTransType;

        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into bank report entry.
    /// </summary>
    public void insert()
    {
        if (!FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
            && !FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            // Insert and reference a source document line
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpactStatementMatchingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether field changes will impact the statement matching status.
    /// </summary>
    /// <returns>
    ///     True if field changes will impact the statement matching status; Otherwise, returns false.
    /// </returns>
    public boolean isImpactStatementMatchingStatus()
    {
        return ((this.IsNewBankDocument != this.orig().IsNewBankDocument && this.getStatement().Status != BankStatementStatus::Open)
               || this.Reconciled != this.orig().Reconciled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the statement line is a new bank document.
    /// </summary>
    /// <returns>
    /// Whether the statement line is a new bank document.
    /// </returns>
    public boolean isNewBankDocument()
    {
        return this.IsNewBankDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account id.
    /// </summary>
    /// <returns>
    /// The bank accound id.
    /// </returns>
    public CompanyBankAccountId parmBankAccount()
    {
        return this.getAccountId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank currency amount.
    /// </summary>
    /// <returns>
    /// The bank currency amount.
    /// </returns>
    public AmountCur parmBankCurrencyAmount()
    {
        return this.getBankCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentBookType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document type.
    /// </summary>
    /// <returns>
    /// The bank document type.
    /// </returns>
    public BankDocumentBookType parmBankDocumentBookType()
    {
        return BankDocumentBookType::BankStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the exchange rate date for statement line.
    /// </summary>
    /// <returns>
    ///     The exchange rate date.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        AccountingDate accountingDate;

        if (this.AccountingDate)
        {
            accountingDate = this.AccountingDate;
        }
        else if ((FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
            || FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
            && this.IsNewBankDocument
            && !this.getStatement().Posted
            && BankParameters::find().BookingDateAsDefaultAccountingDate)
        {
            accountingDate = this.getBookingDate();
        }
        else
        {
            accountingDate = this.getStatement().AccountingDate;
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent source document line.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SourceDocumentLine</c> class.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source doc line type enum name.
    /// </summary>
    /// <returns>
    /// The enum name of the source doc line.
    /// </returns>
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_BankStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source doc line type enum value.
    /// </summary>
    /// <returns>
    /// The enum value of the source doc line type.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_BankStatement::BankStatementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header information.
    /// </summary>
    /// <returns>
    /// The source document header information.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;
        BankStatementLinePostTable linePostTable = BankStatementLinePostTable::find(this.BankStatementLinePostTable);
        if (linePostTable && linePostTable.SourceDocumentHeader)
        {
            sourceDocumentHeader = SourceDocumentHeader::find(linePostTable.SourceDocumentHeader);
        }
        else
        {
            BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(this.BankStmtISOAccountStatement);
            if (statement.SourceDocumentHeader)
            {
                sourceDocumentHeader = SourceDocumentHeader::find(statement.SourceDocumentHeader);
            }
        }

        if (sourceDocumentHeader.RecId == 0)
        {
            throw error("@Bank:StatementLineNoSourceDocumentError");
        }

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>SourceDocumentLine</c> for statement line.
    /// </summary>
    /// <returns>
    ///     <c>SourceDocumentLine</c> buffer.
    /// </returns>
    public SourceDocumentLine parmSourceDocumentLine()
    {
        SourceDocumentLine  sourceDocumentLine;

        sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the amount according to given amount.
    /// </summary>
    /// <param name="_set">
    ///     Indicates whether amount is set.
    /// </param>
    /// <param name="_isBioColumn">
    ///     Indicates whether amount is shown in debit/credit column.
    /// </param>
    /// <param name="_amount">
    ///     Given amount.
    /// </param>
    /// <param name="_columnDrCr">
    ///     Indicates which column the amount is shown in.
    /// </param>
    /// <returns>
    ///     Amount.
    /// </returns>
    private BankStmtISODecimal setAmount(
        boolean             _set,
        boolean             _isBioColumn,
        BankStmtISODecimal  _amount,
        DebitCredit         _columnDrCr = DebitCredit::Debit)
    {
        container           indicatorAndAmount;
        BankStmtISODecimal  amount;

        if (_set)
        {
            indicatorAndAmount = BankStmtISOAccountStatement::setIndicatorAndAmount(
                _amount,
                _isBioColumn,
                _columnDrCr);
            if (conLen(indicatorAndAmount) > 0)
            {
                this.AmountCreditDebitIndicator = conPeek(indicatorAndAmount, 1);
                this.Amount = conPeek(indicatorAndAmount, 2);
            }
        }

        amount = BankStmtISOAccountStatement::getShowingAmount(
            this.Amount,
            this.AmountCreditDebitIndicator,
            _isBioColumn,
            _columnDrCr);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the bank stmt ISO report entry information.
    /// </summary>
    public void update()
    {
        boolean isStatementMatchingStatusNeedUpdate;

        if (this.isImpactStatementMatchingStatus())
        {
            isStatementMatchingStatusNeedUpdate = true;
        }

        BankStmtISOReportEntry statementLineOrig = this.orig();

        boolean isLineUpdate =  this.IsNewBankDocument && this.hasAmountChanged(statementLineOrig);

        boolean shouldUpdateSourceDocumentLine;

        if (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
            && this.IsNewBankDocument
            && BankParameters::find().BookingDateAsDefaultAccountingDate
            && this.BookingDateTime != statementLineOrig.BookingDateTime
            && (this.AccountingDate == dateNull() || this.AccountingDate == statementLineOrig.getBookingDate()))
        {
            this.AccountingDate = this.getBookingDate();

            isLineUpdate = true;
            shouldUpdateSourceDocumentLine = true;
        }

        if ((FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
                || FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
            && this.AccountingDate != statementLineOrig.AccountingDate)
        {
            isLineUpdate = true;
            shouldUpdateSourceDocumentLine = true;
        }

        super();

        if (shouldUpdateSourceDocumentLine && this.SourceDocumentLine)
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine, true);
            sourceDocumentLine.ExchangeRateDate = this.AccountingDate;
            sourceDocumentLine.update();
        }

        if (this.hasTax() && isLineUpdate)
        {
            TaxUncommitted::deleteForDocumentLine(tableNum(BankStmtISOReportEntry), this.RecId);
        }
        else if (!this.hasTax() && isLineUpdate && this.SourceDocumentLine)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }

        if (isStatementMatchingStatusNeedUpdate)
        {
            this.getStatement().refreshMatchingStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReconciledStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update reconciled status.
    /// </summary>
    /// <param name="_isReconciled">
    ///     Indicates whether current line is reconciled.
    /// </param>
    public void updateReconciledStatus(NoYesId _isReconciled)
    {
        ttsBegin;
        this.selectForUpdate(true);
        this.Reconciled = _isReconciled;
        this.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value of the instance of <c>BankStmtISOReportEntry</c> class.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name information.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index information.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(BankStmtISOReportEntry, IsNewBankDocument):
                    ret = this.validateUpdateBankDocument();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateBankDocument</Name>
				<Source><![CDATA[
    private boolean validateUpdateBankDocument()
    {
        boolean                         result;
        BankStmtISOAccountStatement     statement;

        result = true;

        statement = this.getStatement();
        if (statement.Posted)
        {
            if (!FeatureStateProvider::isFeatureEnabled(DecoupleBankReconciliationReversalWithBankStmtReversalFeature::instance()))
            {
                result = checkFailed(strFmt("@GLS221680", statement.Identification));
            }
            else
            {
                result = false;
            }
            
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the statement line and all of its related records.
    /// </summary>
    /// <param name="_recId">
    ///     The id of statement line.
    /// </param>
    private static void deleteStatementLine(RefRecId _recId)
    {
        BankStmtISOReportEntry                      reportEntry;
        BankStmtISOPartyIdentification              partyIdentification;
        BankStmtISOCashBalanceAvailibility          cashBalanceAvailibility;
        BankStatementLineBankDocumentInformation    bankDocumentInformation;

        ttsbegin;

        reportEntry = BankStmtISOReportEntry::find(_recId);

        delete_from cashBalanceAvailibility
            where cashBalanceAvailibility.BankStmtISOReportEntry == _recId;

        delete_from partyIdentification
            where partyIdentification.RecId == reportEntry.TradingParty;

        delete_from bankDocumentInformation
            where bankDocumentInformation.BankStmtISOReportEntry == _recId;

        BankDocumentProcessor::deleteBankDocument(tableNum(BankStmtISOReportEntry), _recId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNewForStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether bank statement has line marked as new.
    /// </summary>
    /// <param name="_statementRecId">
    /// The statement record id.
    /// </param>
    /// <returns>
    /// True if bank statement has line marked as new; otherwise, false.
    /// </returns>
    public static boolean existsNewForStatement(RefRecId _statementRecId)
    {
        BankStmtISOReportEntry reportEntry;

        select firstOnly RecId from reportEntry
            where reportEntry.IsNewBankDocument == NoYes::Yes
                && reportEntry.BankStmtISOAccountStatement == _statementRecId;

        return reportEntry.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds <c>BankStmtISOReportEntry</c> record according to RecId.
    /// </summary>
    /// <param name="_recId">
    ///     Record Id
    /// </param>
    /// <param name="_forUpdate">
    ///     Indicates whether selected record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     Currency model
    /// </param>
    /// <returns>
    ///     Record of <c>BankStmtISOReportEntry</c>.
    /// </returns>
    public static BankStmtISOReportEntry find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankStmtISOReportEntry reportEntry;

        reportEntry.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            reportEntry.concurrencyModel(_concurrencyModel);
        }

        select firstonly reportEntry
            where reportEntry.RecId == _recId;

        return reportEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds <c>BankStmtISOReportEntry</c> record according to source document line.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    ///     Record Id of source document line.
    /// </param>
    /// <param name="_forUpdate">
    ///     Indicates whether selected record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     Currency model
    /// </param>
    /// <returns>
    ///     Record of <c>BankStmtISOReportEntry</c>.
    /// </returns>
    public static BankStmtISOReportEntry findBySourceDocumentLine(
        RecId               _sourceDocumentLineRefRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankStmtISOReportEntry reportEntry;

        reportEntry.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            reportEntry.concurrencyModel(_concurrencyModel);
        }

        select firstonly reportEntry
            where reportEntry.SourceDocumentLine == _sourceDocumentLineRefRecId;

        return reportEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markNewBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks or unmarks the statement line as a new bank document.
    /// </summary>
    /// <param name="_bankStatementLineRecId">
    /// The record id of bank statement line.
    /// </param>
    /// <param name="_isMarked">
    /// Whether to mark or unmark.
    /// </param>
    public static void markNewBankDocument(
        RefRecId    _bankStatementLineRecId,
        boolean     _isMarked)
    {
        BankStmtISOReportEntry statementLine;

        statementLine = BankStmtISOReportEntry::find(_bankStatementLineRecId, true);

        ttsBegin;

        statementLine.doMarkNewBankDocument(_isMarked);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAmountChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether tax information has changed.
    /// </summary>
    /// <param name="_originalstatementLine">
    /// The original statement line record.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the tax information has changed.
    /// </returns>
    private boolean hasAmountChanged(BankStmtISOReportEntry _originalstatementLine)
    {
        return this.Amount != _originalstatementLine.Amount
            || this.AmountCreditDebitIndicator != _originalstatementLine.AmountCreditDebitIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the statement line has tax.
    /// </summary>
    /// <returns>
    /// A boolean value that indicates whether the statement line has tax.
    /// </returns>
    internal boolean hasTax()
    {
        BankStatementLineBankDocumentInformation statementLineInfo = BankStatementLineBankDocumentInformation::findByReportEntry(this.RecId);

        return statementLineInfo.TaxGroup && statementLineInfo.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existEmptyAccountingDateForStatementLine</Name>
				<Source><![CDATA[
    private static boolean existEmptyAccountingDateForStatementLine(BankStmtISOAccountStatement _statement)
    {
        BankStmtISOReportEntry statementLine;

        if (!_statement.Posted)
        {
            select firstonly RecId from statementLine
                where statementLine.BankStmtISOAccountStatement == _statement.RecId
                    && statementLine.IsNewBankDocument == NoYes::Yes
                    && statementLine.AccountingDate == dateNull();
        }

        return statementLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmptyAccountingDate</Name>
				<Source><![CDATA[
    internal static boolean updateEmptyAccountingDate(BankStmtISOAccountStatement _statement)
    {
        boolean existEmptyAccountingDate = BankStmtISOReportEntry::existEmptyAccountingDateForStatementLine(_statement);

        boolean continueUpdate = true;

        if (existEmptyAccountingDate && BankParameters::find().BookingDateAsDefaultAccountingDate)
        {
            continueUpdate = BankStmtISOReportEntry::isContinueUpdateEmptyAccountingDate(_statement);
        }

        if (existEmptyAccountingDate && continueUpdate)
        {
            ttsbegin;

            BankStmtISOReportEntry statementLine;

            while select forupdate statementLine
                where statementLine.BankStmtISOAccountStatement == _statement.RecId
                    && statementLine.IsNewBankDocument == NoYes::Yes
                    && statementLine.AccountingDate == dateNull()
            {
                if (BankParameters::find().BookingDateAsDefaultAccountingDate)
                {
                    statementLine.AccountingDate = statementLine.getBookingDate();
                }
                else
                {
                    statementLine.AccountingDate = _statement.AccountingDate;
                }

                statementLine.update();
            }

            ttscommit;
        }

        return continueUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContinueUpdateEmptyAccountingDate</Name>
				<Source><![CDATA[
    private static boolean isContinueUpdateEmptyAccountingDate(BankStmtISOAccountStatement _statement)
    {
        BankStmtISOReportEntry statementLine;

        while select statementLine
            where statementLine.BankStmtISOAccountStatement == _statement.RecId
                && statementLine.IsNewBankDocument == NoYes::Yes
                && statementLine.AccountingDate == dateNull()
        {
            if (statementLine.hasTax())
            {
                TaxTable taxTable;
                TaxOnItem taxOnItem;
                TaxGroupData taxGroupData;
                BankStatementLineBankDocumentInformation bankStatementLineBankDocumentInformationLocal;

                while select TaxCode from taxTable
                    exists join taxGroupData
                        where taxGroupData.TaxCode == taxTable.TaxCode
                    exists join taxOnItem
                        where taxOnItem.TaxCode == taxTable.TaxCode
                    exists join bankStatementLineBankDocumentInformationLocal
                        where bankStatementLineBankDocumentInformationLocal.TaxGroup == taxGroupData.TaxGroup
                            && bankStatementLineBankDocumentInformationLocal.TaxItemGroup == taxOnItem.TaxItemGroup
                            && bankStatementLineBankDocumentInformationLocal.BankStmtISOReportEntry == statementLine.RecId
                {
                    TaxData taxDataOrig;
                    TaxData taxDataNew;
                    TransDate bookingDate = statementLine.getBookingDate();

                    select firstonly RecId from taxDataOrig
                         where taxDataOrig.TaxCode == taxTable.TaxCode
                             && (!taxDataOrig.TaxFromDate
                                 || (taxDataOrig.TaxFromDate <= _statement.AccountingDate
                                     && taxDataOrig.TaxToDate >= _statement.AccountingDate));

                    select firstonly RecId from taxDataNew
                         where taxDataNew.TaxCode == taxTable.TaxCode
                             && (!taxDataNew.TaxFromDate
                                 || (taxDataNew.TaxFromDate <= bookingDate
                                     && taxDataNew.TaxToDate >= bookingDate));

                    if (taxDataOrig.RecId != taxDataNew.RecId)
                    {
                        DialogButton dialogButton = Box::yesNo("@CashManagement:BankStatementLineEmptyAccountingDateUpdateContinueOrNot", DialogButton::Yes);

                        if (dialogButton == DialogButton::No)
                        {
                            return false;
                        }

                        return true;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    public boolean isPosted()
    {
        return this.Voucher != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostedHeaderOrLine</Name>
				<Source><![CDATA[
    public boolean isPostedHeaderOrLine()
    {
        BankStmtISOAccountStatement statementHeader = this.getStatement();
        return statementHeader.Posted || this.isPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkNewAndPostedHeaderOrLine</Name>
				<Source><![CDATA[
    internal boolean isMarkNewAndPostedHeaderOrLine()
    {
        return this.isNewBankDocument() && this.isPostedHeaderOrLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    internal boolean isPayment()
    {
        return this.BankPaymentType != BankPaymentType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatched</Name>
				<Source><![CDATA[
    private boolean isMatched()
    {
        BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(this.RecId);
        if (matchingItem)
        {
            BankReconciliationMatching matching = BankReconciliationMatching::find(matchingItem.BankReconciliationMatching);
            return matching.Cancelled == NoYes::No;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyToPost</Name>
				<Source><![CDATA[
    internal boolean isReadyToPost()
    {
        return this.IsNewBankDocument
            && !this.isPosted()
            && this.SourceDocumentLine != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyToPostByLineTable</Name>
				<Source><![CDATA[
    internal boolean isReadyToPostByLineTable()
    {
        return this.IsNewBankDocument
            && this.SourceDocumentLine != 0
            && this.BankStatementLinePostTable != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPostByLineTable</Name>
				<Source><![CDATA[
    internal boolean allowPostByLineTable()
    {
        return !this.IsNewBankDocument
            && this.Amount != 0
            && this.BankStatementLinePostTable == 0
            && this.SourceDocumentLine == 0
            && this.allowUpdatePostingInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReverseVoucher</Name>
				<Source><![CDATA[
    internal boolean allowReverseVoucher()
    {
        return this.IsNewBankDocument && this.isPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowGeneratePaymentJournal</Name>
				<Source><![CDATA[
    internal boolean allowGeneratePaymentJournal()
    {
        return !this.IsNewBankDocument && this.Amount != 0 && !this.isPayment() && !this.isMatched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdatePostingInfo</Name>
				<Source><![CDATA[
    internal boolean allowUpdatePostingInfo()
    {
        BankStmtISOAccountStatement statement = this.getStatement();
        return !this.Reconciled
            && !this.isPosted()
            && !this.isPayment()
            && !this.isMatched()
            && !statement.isStatementHeaderPosted()
            && statement.Status != BankStatementStatus::Reconciled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementLinePayment</Name>
				<Source><![CDATA[
    internal void updateStatementLinePayment(BankPaymentType _paymentType)
    {
        ttsbegin;
        this.BankPaymentType = _paymentType;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();
        if (ret && this.isPayment())
        {
            ret = checkFailed("@CashManagement:BankStatementGenerateExistPaymentDeleteError");
        }

        if (ret && this.RecId && BankReconciliationMatchingItem::findValidByStatementLineRecId(this.RecId).RecId)
        {
            ret = checkFailed(strFmt("@Bank:BankStmtLineDeleteValidationWarning", this.BookingDateTime, this.Amount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountWithSign</Name>
				<Source><![CDATA[
    internal AmountCur getAmountWithSign()
    {
        return this.AmountCreditDebitIndicator == DebitCredit::Debit ? this.Amount : this.Amount * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymentMatched</Name>
				<Source><![CDATA[
    internal static boolean hasPaymentMatched(RecId _statementLineRecId)
    {
        if (BankStmtISOReportEntry::find(_statementLineRecId).isPayment())
        {
            RecId bankDocumentRecId = BankStatementLinePaymentInformation::getPaymentBankDocumentTable(_statementLineRecId);
            if (bankDocumentRecId)
            {
                BankReconciliationMatchingItem statementMatchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(_statementLineRecId);
                BankReconciliationMatchingItem documentMatchingItem = BankReconciliationMatchingItem::findValidByDocumentRecId(bankDocumentRecId);
                return statementMatchingItem && documentMatchingItem && statementMatchingItem.BankReconciliationMatching == documentMatchingItem.BankReconciliationMatching;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineDraftPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the line related information for posting.
    /// </summary>
    /// <param name="_linePostTable">The line group which the line belongs to.</param>
    internal void initLineDraftPosting(BankStatementLinePostTable _linePostTable)
    {
        if (this.allowPostByLineTable())
        {
            ttsbegin;
            this.selectForUpdate(true);
            this.IsNewBankDocument = NoYes::Yes;
            this.BankStatementLinePostTable = _linePostTable.RecId;

            BankDocumentProcessor::submitBankDocumentTable(this, BankDocumentStatusChangeType::Reconcile);
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
            this.update();
            ttscommit;
        }
        else
        {
            if (this.SourceDocumentLine != 0)
            {
                SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);
                BankStmtISOAccountStatement statement = this.getStatement();
                if (sourceDocumentLine.SourceDocumentHeader == statement.SourceDocumentHeader)
                {
                    throw error("@Bank:StatementLineCannotPostByLineDueToInitFromStatement");
                }
            }
            throw error("@Bank:StatementLineCannotSelectedForVoucherPostingError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrCreateLinePostingInfoByTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line related information for posting, if not exists, creates one.
    /// </summary>
    /// <param name="_tmpInforamtion">The tmp table buffer obtaining the posting information.</param>
    internal void updateOrCreateLinePostingInfoByTmp(BankStatementLinePostInformationTmp _tmpInforamtion)
    {
        if (this.allowUpdatePostingInfo() && this.IsNewBankDocument == NoYes::Yes)
        {
            ttsbegin;
            if (this.AccountingDate != _tmpInforamtion.AccountingDate)
            {
                this.selectForUpdate(true);
                this.AccountingDate = _tmpInforamtion.AccountingDate;
                this.update();
            }

            BankStatementLineBankDocumentInformation lineBankDocumentInformation = BankStatementLineBankDocumentInformation::findByReportEntry(this.RecId, true);
            if (!lineBankDocumentInformation.RecId)
            {
                BankStatementLineBankDocumentInformation::createLineBankDocumentInformationByTmp(this.RecId, _tmpInforamtion);
            }
            else if (_tmpInforamtion.AccountingDistributionTemplate != lineBankDocumentInformation.AccountingDistributionTemplate
                || _tmpInforamtion.BankTransType != lineBankDocumentInformation.BankTransType
                || _tmpInforamtion.DefaultDimension != lineBankDocumentInformation.DefaultDimension
                || _tmpInforamtion.OffsetLedgerDimension != lineBankDocumentInformation.OffsetLedgerDimension
                || _tmpInforamtion.TaxGroup != lineBankDocumentInformation.TaxGroup
                || _tmpInforamtion.TaxItemGroup != lineBankDocumentInformation.TaxItemGroup
                || _tmpInforamtion.TransactionTxt != lineBankDocumentInformation.TransactionTxt
                || _tmpInforamtion.FinTag != lineBankDocumentInformation.FinTag)
            {
                lineBankDocumentInformation.updateLineBankDocumentInformationByTmp(_tmpInforamtion);
            }
            ttscommit;
        }
        else
        {
            throw error("@Bank:StatementLineCannotUpdateError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDraftPostingStatementLineAndPostingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the pending posting statmenet line record, deletes all generated records.
    /// </summary>
    internal void resetDraftPostingStatementLineAndPostingInfo()
    {
        if (this.allowUpdatePostingInfo())
        {
            RecId sourceDocumentLineRecId = this.SourceDocumentLine;
            this.resetReportEntryForGenerateVoucher();
            this.deletePostingInfoAndAccessory();
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(sourceDocumentLineRecId, true);
            if (sourceDocumentLine.RecId)
            {
                sourceDocumentLine.delete();
            }
        }
        else
        {
            throw error("@Bank:StatementLineCannotUpdateError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostedStatementLineAndPostingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the posted statmenet line record only for reversing voucher.
    /// </summary>
    internal void reversePostedStatementLineAndPostingInfo()
    {
        if (this.allowReverseVoucher())
        {
            ttsbegin;
            this.selectForUpdate(true);
            this.OriginSourceDocumentLine = this.SourceDocumentLine;
            this.Voucher = '';
            this.doUpdate();
            ttscommit;
            this.resetReportEntryForGenerateVoucher();
            BankReconciliationMatchingMatchProcessor::processUnmatchForReversedVoucher(this.RecId);
            this.deletePostingInfoAndAccessory();
        }
        else
        {
            throw error("@Bank:StatementLineNotSupportReverse");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePostingInfoAndAccessory</Name>
				<Source><![CDATA[
    private void deletePostingInfoAndAccessory()
    {
        ttsbegin;
        TaxUncommitted::deleteForDocumentLine(tableNum(BankStmtISOReportEntry), this.RecId);
        BankDocumentProcessor::deleteBankDocument(this.TableId, this.RecId);
        BankStatementLineBankDocumentInformation linePostingInfo = BankStatementLineBankDocumentInformation::findByReportEntry(this.RecId);
        if (linePostingInfo.RecId)
        {
            linePostingInfo.selectForUpdate(true);
            linePostingInfo.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReportEntryForGenerateVoucher</Name>
				<Source><![CDATA[
    private void resetReportEntryForGenerateVoucher()
    {
        ttsbegin;
        this.selectForUpdate(true);
        this.AccountingDate = dateNull();
        this.SourceDocumentLine = 0;
        this.BankStatementLinePostTable = 0;
        this.IsNewBankDocument = NoYes::No;
        this.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccoutingDateAndSourceDocumentExchangeRateDate</Name>
				<Source><![CDATA[
    internal void updateAccoutingDateAndSourceDocumentExchangeRateDate(AccountingDate _accoutingDate)
    {
        ttsbegin;
        if (_accoutingDate == dateNull())
        {
            _accoutingDate = this.getBookingDate();
        }
        if (this.AccountingDate != _accoutingDate)
        {
            this.selectForUpdate(true);
            this.AccountingDate = _accoutingDate;
            this.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankElectronicBanking</ConfigurationKey>
	<DeveloperDocumentation>@SYS316332</DeveloperDocumentation>
	<Label>@SYS316322</Label>
	<SingularLabel>Bank statement line</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProprietaryBankTransactionCode</TitleField1>
	<TitleField2>BankStmtISOAccountStatement</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProprietaryBankTransactionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Charge</Name>
			<Label>@SYS57840</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChargeRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Counter</Name>
			<Label>@SYS23730</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankStatementCounterCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStatementCounterCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStatementCounterExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS124781</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankDocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookingDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelatedBankAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelatedBankName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReversalIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TradingParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsNewBankDocument</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProprietaryBankTransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalEntryInformation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStmtISOAccountStatement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountServicerReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Indicator</Name>
			<Label>@SYS8757</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCreditDebitIndicator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interest</Name>
			<Label>@SYS10770</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reconciled</Name>
			<Label>@SYS68025</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reconciled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS40441</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>dispTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdditionalEntryInformation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelatedBankAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelatedBankName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditorReferenceInformation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankStatementLineStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InstructedAmount</Name>
			<Label>@CashBankMgt_ISO20022TransactionLevel:CashBankMgt_BankStatement_ReportEntry_InstructedAmount_Label</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankStatementInstructedCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStatementInstructedCurrencyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStatementInstructedExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountServicerReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISOMax500Text</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdditionalEntryInformation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISOMax500Text</ExtendedDataType>
			<Label>@SYS6303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISODecimal</ExtendedDataType>
			<Label>@SYS62867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmountCreditDebitIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementAmountDrCrIndicator</ExtendedDataType>
			<EnumType>DebitCredit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankDocumentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementIdentificationText</ExtendedDataType>
			<Label>@SYS8434</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankStatementCounterCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISOCurrencyCode</ExtendedDataType>
			<Label>@GLS221289</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankStatementCounterCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS221291</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankStatementCounterExchangeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@GLS221294</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankStatementLineStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankStatementLineStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankStmtISOAccountStatement</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>BookingDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementBookingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ChargeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISODecimal</ExtendedDataType>
			<Label>@GLS221681</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntryReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISOMax500Text</ExtendedDataType>
			<Label>@GLS221296</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISODecimal</ExtendedDataType>
			<Label>@GLS221684</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsNewBankDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS221284</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentBankStmtISOReportEntry</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProprietaryBankTransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementIdentificationText</ExtendedDataType>
			<Label>@GLS221273</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reconciled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementReconciled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISOMax500Text</ExtendedDataType>
			<Label>@SYS54020</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RelatedBankAccount</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementIdentificationText</ExtendedDataType>
			<Label>@GLS221300</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RelatedBankName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementNameText</ExtendedDataType>
			<Label>@GLS221302</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReversalIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS8776</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISODecimal</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementIdentificationText</ExtendedDataType>
			<Label>@SYS125973</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISODecimal</ExtendedDataType>
			<Label>@GLS100064</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TradingParty</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS221306</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankStatementInstructedCurrency</Name>
			<ExtendedDataType>BankStmtInstructedCurrency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankStatementInstructedCurrencyAmt</Name>
			<ExtendedDataType>BankStmtInstructedCurrencyAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankStatementInstructedExchangeRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@CashBankMgt_ISO20022TransactionLevel:CashBankMgt_BankStatement_ReportEntry_InstructedExchRate_Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditorReferenceInformation</Name>
			<ExtendedDataType>BankStmtCreditorReferenceInformation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginSourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankPaymentType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>BankPaymentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankStatementLinePostTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankStmtISOAccountStatementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankStmtISOAccountStatement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankStmtISOReportEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentBankStmtISOReportEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsNewBankDocumentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankStmtISOAccountStatement</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsNewBankDocument</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Reconciled</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookingDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankStatementLinePostTable</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankStatementLinePostTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankDocumentTableMap</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankStatementCounterCurrency</Name>
					<Field>BankStatementCounterCurrency</Field>
					<RelatedField>CurrencyCodeISO</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Parent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankStmtISOReportEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentBankStmtISOReportEntry</Name>
					<Field>ParentBankStmtISOReportEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Relation1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankStmtISOAccountStatement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankStmtISOAccountStatement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankStmtISOAccountStatement_BankStmtISOReportEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankStmtISOAccountStatement</Name>
					<Field>BankStmtISOAccountStatement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TradingParty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankStmtISOPartyIdentification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankStmtISOPartyIdentification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankStmtISOReportEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TradingParty</Name>
					<Field>TradingParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankStatementLinePostTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankStatementLinePostTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankStatementLinePostTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankStatementLinePostTable_BankStmtISOReportEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankStatementLinePostTable</Name>
					<Field>BankStatementLinePostTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>