<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysDeviceUserDailyActionFlag</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SysDeviceUserDailyActionFlag extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a record with the given parameters exists.
    /// </summary>
    /// <param name = "_deviceUserId">
    ///     Id of the user. It can originate from different formats and converted to a string.
    /// </param>
    /// <param name = "_actionUtcDate">
    ///     Date when the action was logged.
    /// </param>
    /// <param name = "_deviceUserType">
    ///     Type of device user whose actions are logged.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    private static boolean exist(
        SysDeviceUserId             _deviceUserId, 
        SysDeviceUserActionUtcDate  _actionUtcDate, 
        SysDeviceUserType           _deviceUserType)
    {
        SysDeviceUserDailyActionFlag sysDeviceUserDailyActionFlag;

        return (select firstonly RecId from sysDeviceUserDailyActionFlag
                    where sysDeviceUserDailyActionFlag.DeviceUserType   == _deviceUserType
                       && sysDeviceUserDailyActionFlag.ActionUtcDate    == _actionUtcDate
                       && sysDeviceUserDailyActionFlag.DeviceUserId     == _deviceUserId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIfNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a record in the table if it doesn't exist already.
    /// </summary>
    /// <param name = "_deviceUserId">
    ///     Id of the user. It can originate from different formats and converted to a string.
    /// </param>
    /// <param name = "_actionUtcDate">
    ///     Date when the action was logged.
    /// </param>
    /// <param name = "_deviceUserType">
    ///     Type of device user whose actions are logged.
    /// </param>
    /// </param>
    /// <returns>
    ///     true if the record did not exist and was inserted by the method; otherwise, false.
    /// </returns>
    private static boolean insertIfNotExist(
        SysDeviceUserId             _deviceUserId, 
        SysDeviceUserActionUtcDate  _actionUtcDate, 
        SysDeviceUserType           _deviceUserType)
    {
        boolean inserted = false;

        ttsbegin;

        if (!SysDeviceUserDailyActionFlag::exist(_deviceUserId, _actionUtcDate, _deviceUserType))
        {
            SysDeviceUserDailyActionFlag sysDeviceUserDailyActionFlag;
            sysDeviceUserDailyActionFlag.DeviceUserId   = _deviceUserId;
            sysDeviceUserDailyActionFlag.ActionUtcDate  = _actionUtcDate;
            sysDeviceUserDailyActionFlag.DeviceUserType = _deviceUserType;

            sysDeviceUserDailyActionFlag.insert();
            
            inserted = true;
        }

        ttscommit;

        return inserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeviceUserActiveToday</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set a device user as active for the current day by adding a record in the database
    ///     if one doesn't already exist.
    ///     Note: Make sure that the device user Id used is unique for device users across companies
    ///     that are part of the current tenant.
    /// </summary>
    /// <param name = "_deviceUserId">
    ///     Id of the device user. It can originate from different formats and converted to a string.
    ///     It should be unique for device users across companies that are part of the current tenant.
    /// </param>
    /// <param name = "_deviceUserType">
    ///     Type of device user whose actions are logged.
    /// </param>
    public static void setDeviceUserActiveToday(SysDeviceUserId _deviceUserId, SysDeviceUserType _deviceUserType)
    {
        SysDeviceUserActionUtcDate today = DateTimeUtil::date(DateTimeUtil::utcNow());

        SysDeviceUserDailyActionFlag::insertIfNotExist(_deviceUserId, today, _deviceUserType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SCM:SysDeviceUserDailyActionFlagTableDeveloper</DeveloperDocumentation>
	<Label>@SCM:SysDeviceUserDailyActionFlagTable</Label>
	<OperationalDomain>Shared</OperationalDomain>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>DeviceUserTypeActionUtcDateDeviceUserIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>DeviceUserTypeActionUtcDateDeviceUserIdIdx</PrimaryIndex>
	<ReplacementKey>DeviceUserTypeActionUtcDateDeviceUserIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SystemTable>Yes</SystemTable>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionUtcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeviceUserType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceUserType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionUtcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeviceUserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeviceUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysDeviceUserId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ActionUtcDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysDeviceUserActionUtcDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeviceUserType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<EnumType>SysDeviceUserType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DeviceUserTypeActionUtcDateDeviceUserIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DeviceUserType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActionUtcDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeviceUserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>