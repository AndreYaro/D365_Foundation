<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmContactPersonSynchronizeFieldMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmContactPersonSynchronizeFieldMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(smmContactPersonSynchronizeFieldMapping, Location):

                    if (smmAxaptaOutlookMapping::getContactSyncDirection(this.LocationType) == smmOutlookSyncDirections::OutlookToAxaptaOnly)
                    {
                        ret = checkFailed("@SYS342141");
                    }
                    else if (smmContactPersonSynchronizeFieldMapping::checkLocationExists(this.UserId, this.ContactPersonId, this.Location, this.RecId))
                    {
                        ret = checkFailed("@SYS342135");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the corresponding <c>smmContactPersonSynchronizeFieldMapping</c> record exist based
    /// on the <c>userId</c>, <c>contactPersonId</c>, and <c>location</c>.
    /// </summary>
    /// <param name="_userId">
    /// The <c>UserId</c> value to check.
    /// </param>
    /// <param name="_contactPersonId">
    /// The <c>ContactPersonId</c> value to check.
    /// </param>
    /// <param name="_location">
    /// The <c>LogisticsLocationRecId</c> value to check.
    /// </param>
    /// <param name="_recId">
    /// The <c>RefRecId</c> value to check to make sure that it is not its own record
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkLocationExists(userId _userId, ContactPersonId _contactPersonId, LogisticsLocationRecId _location, RefRecId _recId = 0)
    {
        smmContactPersonSynchronizeFieldMapping syncFieldMapping;
        boolean ret = false;

        if (_location != 0)
        {
            select firstOnly RecId from syncFieldMapping
                where syncFieldMapping.ContactPersonId == _contactPersonId &&
                      syncFieldMapping.UserId == _userId &&
                      syncFieldMapping.Location == _location &&
                      syncFieldMapping.RecId != _recId;

            ret = syncFieldMapping.RecId != 0 ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactField2MethodType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an Outlook contact to the corresponding method type.
    /// </summary>
    /// <param name="_contactField">
    /// An <c>smmOutlookContactFields</c> enumeration type to convert.
    /// </param>
    /// <returns>
    /// A <c>LogisticsElectronicAddressMethodType</c> enumeration value.
    /// </returns>
    public static LogisticsElectronicAddressMethodType contactField2MethodType(smmOutlookContactFields _contactField)
    {
        LogisticsElectronicAddressMethodType methodType;

        switch (_contactField)
        {
            case smmOutlookContactFields::AssistantTelephoneNumber :
            case smmOutlookContactFields::BusinessTelephoneNumber :
            case smmOutlookContactFields::Business2TelephoneNumber :
            case smmOutlookContactFields::CallbackTelephoneNumber :
            case smmOutlookContactFields::CarTelephoneNumber :
            case smmOutlookContactFields::CompanyMainTelephoneNumber :
            case smmOutlookContactFields::HomeTelephoneNumber :
            case smmOutlookContactFields::HomeTelephoneNumber2 :
            case smmOutlookContactFields::MobileTelephoneNumber :
            case smmOutlookContactFields::OtherTelephoneNumber :
            case smmOutlookContactFields::PagerNumber :
            case smmOutlookContactFields::PrimaryTelephoneNumber :
            case smmOutlookContactFields::RadioTelephoneNumber :
            case smmOutlookContactFields::ISDNNumber :
                methodType = LogisticsElectronicAddressMethodType::Phone;
                break;

            case smmOutlookContactFields::BusinessFaxNumber :
            case smmOutlookContactFields::HomeFaxNumber :
            case smmOutlookContactFields::OtherFaxNumber :
                methodType = LogisticsElectronicAddressMethodType::Fax;
                break;

            case smmOutlookContactFields::TelexNumber :
                methodType = LogisticsElectronicAddressMethodType::Telex;
                break;

            case smmOutlookContactFields::Email1Address :
            case smmOutlookContactFields::Email2Address :
            case smmOutlookContactFields::Email3Address :
            case smmOutlookContactFields::IMAddress :
                methodType = LogisticsElectronicAddressMethodType::Email;
                break;

            case smmOutlookContactFields::WebPage :
            case smmOutlookContactFields::InternetFreeBusyAddress :
            case smmOutlookContactFields::BusinessHomePage :
            case smmOutlookContactFields::PersonalHomePage :
                methodType = LogisticsElectronicAddressMethodType::URL;
                break;

            default :
                methodType = LogisticsElectronicAddressMethodType::Phone;
                break;
        }
        return methodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactField2RoleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an Outlook contact to the corresponding location role type.
    /// </summary>
    /// <param name="_contactField">
    /// The <c>smmOutlookContactFields</c> enumeration to convert.
    /// </param>
    /// <returns>
    /// <c>LogisticsLocationRoleType</c> enum.
    /// </returns>
    public static LogisticsLocationRoleType contactField2RoleType(smmOutlookContactFields _contactField)
    {
        switch (_contactField)
        {
            case smmOutlookContactFields::Business2TelephoneNumber,
                 smmOutlookContactFields::BusinessFaxNumber,
                 smmOutlookContactFields::BusinessHomePage,
                 smmOutlookContactFields::BusinessTelephoneNumber,
                 smmOutlookContactFields::BusinessAddress :
                return LogisticsLocationRoleType::Business;

            case smmOutlookContactFields::HomeAddress,
                 smmOutlookContactFields::HomeFaxNumber,
                 smmOutlookContactFields::HomeTelephoneNumber,
                 smmOutlookContactFields::HomeTelephoneNumber2 :
                return LogisticsLocationRoleType::Home;

            case smmOutlookContactFields::OtherAddress,
                 smmOutlookContactFields::OtherFaxNumber,
                 smmOutlookContactFields::OtherTelephoneNumber :
                return LogisticsLocationRoleType::Other;

            default :
                return LogisticsLocationRoleType::Business;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the field mapping table to populate the default values.
    /// </summary>
    /// <param name="_userId">
    /// A <c>UserId</c> value from the <c>smmContactPersonSynchronize</c> table.
    /// </param>
    /// <param name="_contactPersonId">
    /// A <c>ContactPersonId</c> value from the <c>smmContactPersonSynchronize</c> table.
    /// </param>
    /// <param name="_contactFieldRecordMap">
    /// A map that has an Outlook contact fields enumeration value and postal or contact info view record.
    /// </param>
    public static void createFieldMapping(userId _userId, ContactPersonId _contactPersonId, Map _contactFieldRecordMap = null)
    {
        smmContactPersonSynchronizeFieldMapping syncFieldMapping;
        ContactPersonSyncEntity contactPersonEntity;
        LogisticsLocationEntity locationEntity;
        LogisticsLocationRecId primaryLocationRecId;
        RecordInsertList recordInsertList;
        DirPartyLocation partyLocation;
        LogisticsAddressDateEffectiveMap addressView;
        LogisticsElectronicAddress contactInfo;

        // Only create when the sync direction is either FullSynchronization or AxaptaToOutlookOnly
        boolean syncDirectionValid(smmOutlookContactFields _contactField)
        {
            smmOutlookSyncDirections syncDirection;
            syncDirection = smmAxaptaOutlookMapping::getContactSyncDirection(_contactField);

            if (syncDirection == smmOutlookSyncDirections::FullSynchronization  || syncDirection == smmOutlookSyncDirections::AxaptaToOutlookOnly)
            {
                return true;
            }
            return false;
        }

        // Private addToInserList
        void addToInserList()
        {
            if (smmAxaptaOutlookMapping::getContactSyncDirection(syncFieldMapping.LocationType) != smmOutlookSyncDirections::None)
            {
                if (_contactFieldRecordMap.exists(syncFieldMapping.LocationType))
                {
                    addressView = _contactFieldRecordMap.lookup(syncFieldMapping.LocationType);

                    if (addressView.TableId == tableNum(LogisticsElectronicAddress))
                    {
                        syncFieldMapping.Location = addressView.RecId;
                    }
                    else
                    {
                        syncFieldMapping.Location = addressView.Location;
                    }
                }
                else
                {
                    syncFieldMapping.Location = 0;
                }
                recordInsertList.add(syncFieldMapping);
            }
        }

        // Main
        recordInsertList = new RecordInsertList(tablenum(smmContactPersonSynchronizeFieldMapping));

        if (_contactFieldRecordMap == null || _contactFieldRecordMap.elements() == 0)
        {
            // Create default
            contactPersonEntity = ContactPersonSyncEntity::construct(ContactPerson::find(_contactPersonId));

            _contactFieldRecordMap = new Map(Types::Enum, Types::Record);

            // Primary address
            if (syncDirectionValid(smmOutlookContactFields::BusinessAddress))
            {
                locationEntity = contactPersonEntity.getPrimaryPostalAddressLocation();
                if (locationEntity)
                {
                    primaryLocationRecId = locationEntity.parmLocationRecId();
                    _contactFieldRecordMap.insert(smmOutlookContactFields::BusinessAddress, contactPersonEntity.getPostalAddress(locationEntity.parmLocationRecId()));
                }
            }
            // Get first Home Address
            if (syncDirectionValid(smmOutlookContactFields::HomeAddress))
            {
                partyLocation = DirPartyLocation::findByPartyLocationRoleType(contactPersonEntity.getPartyRecId(), LogisticsLocationRoleType::Home);
                if (partyLocation && partyLocation.IsPostalAddress && partyLocation.Location != primaryLocationRecId)
                {
                    _contactFieldRecordMap.insert(smmOutlookContactFields::HomeAddress, contactPersonEntity.getPostalAddress(partyLocation.Location));
                }
            }
            // Get first Other Address
            if (syncDirectionValid(smmOutlookContactFields::OtherAddress))
            {
                partyLocation = DirPartyLocation::findByPartyLocationRoleType(contactPersonEntity.getPartyRecId(), LogisticsLocationRoleType::Other);
                if (partyLocation && partyLocation.IsPostalAddress && partyLocation.Location != primaryLocationRecId)
                {
                    _contactFieldRecordMap.insert(smmOutlookContactFields::OtherAddress, contactPersonEntity.getPostalAddress(partyLocation.Location));
                }
            }
            // Primary phone
            if (syncDirectionValid(smmOutlookContactFields::PrimaryTelephoneNumber))
            {
                contactInfo = DirParty::primaryElectronicAddress(contactPersonEntity.getPartyRecId(), LogisticsElectronicAddressMethodType::Phone);
                if (contactInfo)
                {
                    _contactFieldRecordMap.insert(smmOutlookContactFields::PrimaryTelephoneNumber, contactInfo);
                }
            }
            // Primary telex
            if (syncDirectionValid(smmOutlookContactFields::TelexNumber))
            {
                contactInfo = DirParty::primaryElectronicAddress(contactPersonEntity.getPartyRecId(), LogisticsElectronicAddressMethodType::Telex);
                if (contactInfo)
                {
                    _contactFieldRecordMap.insert(smmOutlookContactFields::TelexNumber, contactInfo);
                }
            }
            // Primary email
            if (syncDirectionValid(smmOutlookContactFields::Email1Address))
            {
                contactInfo = DirParty::primaryElectronicAddress(contactPersonEntity.getPartyRecId(), LogisticsElectronicAddressMethodType::Email);
                if (contactInfo)
                {
                    _contactFieldRecordMap.insert(smmOutlookContactFields::Email1Address, contactInfo);
                }
            }
            // Primary URL
            if (syncDirectionValid(smmOutlookContactFields::WebPage))
            {
                contactInfo = DirParty::primaryElectronicAddress(contactPersonEntity.getPartyRecId(), LogisticsElectronicAddressMethodType::URL);
                if (contactInfo)
                {
                    _contactFieldRecordMap.insert(smmOutlookContactFields::WebPage, contactInfo);
                }
            }
        }

        ttsbegin;

        syncFieldMapping.UserId = _userId;
        syncFieldMapping.ContactPersonId = _contactPersonId;

        // Address fields
        syncFieldMapping.LocationType = smmOutlookContactFields::BusinessAddress;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::HomeAddress;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::OtherAddress;
        addToInserList();

        // Contact Info fields
        syncFieldMapping.LocationType = smmOutlookContactFields::BusinessTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::Business2TelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::BusinessFaxNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::CallbackTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::CarTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::CompanyMainTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::HomeTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::HomeTelephoneNumber2;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::HomeFaxNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::ISDNNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::MobileTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::OtherTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::OtherFaxNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::PagerNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::PrimaryTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::RadioTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::TelexNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::TTYTDDTelephoneNumber;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::Email1Address;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::Email2Address;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::Email3Address;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::WebPage;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::IMAddress;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::InternetFreeBusyAddress;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::BusinessHomePage;
        addToInserList();

        syncFieldMapping.LocationType = smmOutlookContactFields::PersonalHomePage;
        addToInserList();

        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>smmContactPersonSynchronizeFieldMapping</c> table by using the
    /// specified <c>userId</c>, <c>contactPersonId</c>, and <c>outlookContactField</c> values.
    /// </summary>
    /// <param name="_userId">
    /// The <c>UserId</c> value of the record to find.
    /// </param>
    /// <param name="_contactPersonId">
    /// The <c>ContactPersonId</c> to find.
    /// </param>
    /// <param name="_contactField">
    /// The <c>smmOutlookContactFields</c> to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>smmContactPersonSynchronizeFieldMapping</c> table.
    /// </returns>
    public static smmContactPersonSynchronizeFieldMapping find(userId _userId, ContactPersonId _contactPersonId, smmOutlookContactFields _contactField, boolean _forUpdate = false)
    {
        smmContactPersonSynchronizeFieldMapping syncFieldMapping;

        syncFieldMapping.selectForUpdate(_forUpdate);

        select firstonly syncFieldMapping
            where syncFieldMapping.UserId == _userId &&
                  syncFieldMapping.ContactPersonId == _contactPersonId &&
                  syncFieldMapping.LocationType == _contactField;

        return syncFieldMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates contact mapping field with new location recId.
    /// </summary>
    /// <param name="_contactField">
    /// smmOutlookContactFields enum to update
    /// </param>
    /// <param name="_party">
    /// DirPartyRecId of the record to be updated.
    /// </param>
    /// <param name="_newLocation">
    /// LogisticsLocationRecId value to set.
    /// </param>
    /// <param name="_oldLocation">
    /// LogisticsLocationRecId value to change.
    /// </param>
    public static void updateLocation(smmOutlookContactFields _contactField, DirPartyRecId _party, LogisticsLocationRecId _newLocation, LogisticsLocationRecId _oldLocation = 0)
    {
        smmContactPersonSynchronizeFieldMapping syncFieldMapping, syncFieldMappingExist;
        ContactPerson contactPerson;
        smmAxaptaOutlookMapping outlookMapping;

        if (_party != 0 && _newLocation != _oldLocation)
        {
            ttsBegin;
            update_recordset syncFieldMapping setting Location=_newLocation
                where syncFieldMapping.LocationType == _contactField &&
                      syncFieldMapping.Location == _oldLocation

                // Make sure the party matches the contactPerson
                exists join contactPerson where contactPerson.Party == _party &&
                      contactPerson.ContactPersonId == syncFieldMapping.ContactPersonId
                // Make sure the syncDirection is allowed
                exists join outlookMapping where outlookMapping.OutlookContactField == _contactField &&
                      (outlookMapping.OutlookSyncDirections == smmOutlookSyncDirections::FullSynchronization ||
                      outlookMapping.OutlookSyncDirections == smmOutlookSyncDirections::AxaptaToOutlookOnly)

                // New location should not be assigned yet
                notExists join syncFieldMappingExist
                where syncFieldMappingExist.ContactPersonId == syncFieldMapping.ContactPersonId &&
                      syncFieldMappingExist.UserId == syncFieldMapping.UserId &&
                      syncFieldMappingExist.Location == _newLocation &&
                      syncFieldMappingExist.Location != 0;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>EntAssetResourcePlanningWithMaintenanceIntegrationTest</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>smmOutlook</ConfigurationKey>
	<DeveloperDocumentation>@SYS325257</DeveloperDocumentation>
	<FormRef>smmContactsListPage</FormRef>
	<Label>@SYS325258</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UserId</TitleField1>
	<TitleField2>ContactPersonId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>smmContactPersonSynchronizeIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>smmContactPersonSynchronizeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Label>@SYS7576</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS325259</Label>
			<EnumType>smmOutlookContactFields</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>smmContactPersonSynchronizeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContactPersonId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Location</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UserIdContactIdLocation</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContactPersonId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Location</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmContactPersonSynchronizeFieldMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmContactPersonSynchronize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmContactPersonSynchronize</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>smmContactPersonSynchronize</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>smmContactPersonSynchronizeFieldMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<Field>UserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdContactPersonIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>