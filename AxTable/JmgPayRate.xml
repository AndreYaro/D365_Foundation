<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgPayRate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>JmgPayRate</c> table contains records which overlaps with this
    /// <c>JmgPayRate</c> record.
    /// </summary>
    /// <returns>
    /// true if no overlap exists; otherwise, false.
    /// </returns>
    private boolean checkOverlap()
    {
        boolean     ret = true;
        JmgPayRate  jmgPayRate;
        // Check for overlap in date intervals:
        if (this.FromDate       && this.ToDate)
        {
            select firstonly RecId
                from  jmgPayRate
                where jmgPayRate.RecId         != this.RecId       &&
                      jmgPayRate.PayCostType   == this.PayCostType &&
                      ((!jmgPayRate.FromDate                       && // Check for unbound interval
                        !jmgPayRate.ToDate)                        ||
                       (jmgPayRate.FromDate                        && // Check for lower bound interval
                        !jmgPayRate.ToDate                         &&
                        jmgPayRate.FromDate    <= this.ToDate)     ||
                       (!jmgPayRate.FromDate                       && // Check for upper bound interval
                        jmgPayRate.ToDate                          &&
                        jmgPayRate.ToDate      >= this.FromDate)   ||
                       (jmgPayRate.FromDate                        && // Check for bound interval
                        jmgPayRate.ToDate                          &&
                        (jmgPayRate.FromDate   >= this.FromDate    &&
                         jmgPayRate.FromDate   <= this.ToDate)     ||
                        (jmgPayRate.ToDate     >= this.FromDate    &&
                         jmgPayRate.ToDate     <= this.ToDate)     ||
                        (jmgPayRate.FromDate   <= this.FromDate    &&
                         jmgPayRate.ToDate     >= this.ToDate)));
        }
        else if (this.FromDate  && !this.ToDate)
        {
            select firstonly RecId
                from  jmgPayRate
                where jmgPayRate.RecId         != this.RecId       &&
                      jmgPayRate.PayCostType   == this.PayCostType &&
                      ((!jmgPayRate.FromDate                       && // Check for unbound interval
                        !jmgPayRate.ToDate)                        ||
                       (jmgPayRate.FromDate                        && // Check for lower bound interval
                        !jmgPayRate.ToDate)                        ||
                       (!jmgPayRate.FromDate                       && // Check for upper bound interval
                        jmgPayRate.ToDate                          &&
                        jmgPayRate.ToDate      >= this.FromDate)   ||
                       (jmgPayRate.FromDate                        && // Check for bound interval
                        jmgPayRate.ToDate                          &&
                        jmgPayRate.ToDate      >= this.FromDate));
        }
        else if (!this.FromDate && this.ToDate)
        {
            select firstonly RecId
                from  jmgPayRate
                where jmgPayRate.RecId         != this.RecId       &&
                      jmgPayRate.PayCostType   == this.PayCostType &&
                      ((!jmgPayRate.FromDate                       && // Check for unbound interval
                        !jmgPayRate.ToDate)                        ||
                       (jmgPayRate.FromDate                        && // Check for lower bound interval
                        !jmgPayRate.ToDate                         &&
                        jmgPayRate.FromDate    <= this.ToDate)     ||
                       (!jmgPayRate.FromDate                       && // Check for upper bound interval
                        jmgPayRate.ToDate)                         ||
                       (jmgPayRate.FromDate                        && // Check for bound interval
                        jmgPayRate.ToDate                          &&
                        jmgPayRate.FromDate    <= this.ToDate));
        }
        else
        {
            // Neither from nor to date are set.
            select firstonly RecId
                from  jmgPayRate
                where jmgPayRate.RecId         != this.RecId           &&
                      jmgPayRate.PayCostType   == this.PayCostType;
        }

        if (jmgPayRate.RecId)
        {
            ret = ret && checkFailed("@SYS39599");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUserExistingPayItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to confirm changing a pay rate, if there has already been generated pay
    /// transactions based on the original pay rate.
    /// </summary>
    /// <param name="_delete">
    /// A Boolean value that specifies whether the <c>JmgPayRate</c> record is about to be deleted;
    /// otherwise, false.
    /// </param>
    /// <returns>
    /// true if the user confirms update of pay rate; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method also returns true  if no pay transactions exist.
    /// </remarks>
    public boolean promptUserExistingPayItems(boolean _delete = false)
    {
        JmgPayRate  origPayRate;
        boolean     promptUser;
        // Ask user if pay rate should be changed, even though there exists pay events in the period
        promptUser = false;
        origPayRate = this.orig();

        if (origPayRate.Price   != this.Price                       ||
            origPayRate.Percent != this.Percent                     ||
            origPayRate.FromDate!= this.FromDate                    ||
            origPayRate.ToDate  != this.ToDate                      ||
            !origPayRate                                            ||
            _delete)
        {
            if (this.FromDate                                           &&
                this.ToDate                                             &&
                (select firstonly RecId from jmgPayEvents
                    where jmgPayEvents.PayCostType  == this.PayCostType &&
                          jmgPayEvents.ProfileDate  >= this.FromDate    &&
                          jmgPayEvents.ProfileDate  <= this.ToDate).RecId)
            {
                promptUser = true;
            }
            else if (this.FromDate                                              &&
                     !this.ToDate                                               &&
                     (select firstonly RecId from jmgPayEvents
                            where jmgPayEvents.PayCostType  == this.PayCostType &&
                                  jmgPayEvents.ProfileDate  >= this.FromDate).RecId)
            {
                promptUser = true;
            }
            else if (!this.FromDate                                             &&
                     this.ToDate                                                &&
                     (select firstonly RecId from jmgPayEvents
                            where jmgPayEvents.PayCostType  == this.PayCostType &&
                                  jmgPayEvents.ProfileDate  <= this.ToDate).RecId)
            {
                promptUser = true;
            }
            else if (!this.FromDate                                             &&
                     !this.ToDate                                               &&
                     (select firstonly RecId from jmgPayEvents
                        where jmgPayEvents.PayCostType  == this.PayCostType).RecId)

            {
                promptUser = true;
            }

            if (promptUser)
            {
                if (_delete)
                {
                    return Box::okCancel("@SYS98304", DialogButton::Cancel) == DialogButton::Ok;
                }
                return Box::okCancel("@SYS98305", DialogButton::Cancel) == DialogButton::Ok;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencePayCostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reference pay type, which is associated to the <c>JmgPayRate</c> record.
    /// </summary>
    /// <returns>
    /// the reference pay type, which is associated to the <c>JmgPayRate</c> record.
    /// </returns>
    public display JmgRefPayCostType referencePayCostType()
    {
        return JmgPayTable::find(this.PayCostType).RefPayCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgPayRate</c> record in the database.
    /// </summary>
    public void update()
    {
        JmgPayEmployee  jmgPayEmployee;

        // Update all employee specific rates with new date interval
        while select forupdate jmgPayEmployee
            where jmgPayEmployee.PayCostType    == this.PayCostType     &&
                  jmgPayEmployee.FromDate       == this.orig().FromDate &&
                  jmgPayEmployee.ToDate         == this.orig().ToDate
        {
            jmgPayEmployee.FromDate = this.FromDate;
            jmgPayEmployee.ToDate   = this.ToDate;
            jmgPayEmployee.update();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean         ret;
        JmgPayTable     jmgPayTable;

        ret = super();

        jmgPayTable = JmgPayTable::find(this.PayCostType);

        if (jmgPayTable.RefPayCostType      && this.Price)
            ret = checkFailed("@SYS39355");

        if (ret && !jmgPayTable.RefPayCostType     && this.Percent)
            ret = checkFailed("@SYS39356");

        // From date must be smaller than to date
        if (this.FromDate && this.ToDate && this.FromDate > this.ToDate)
        {
            ret = ret && checkFailed("@SYS16982");
        }

        if (ret)
        {
            ret = this.checkOverlap();
        }

        if (ret)
        {
            ret = this.promptUserExistingPayItems();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>JmgPayRate</c> record in the database, based on pay cost type and date.
    /// </summary>
    /// <param name="_payCostType">
    /// The pay cost type to search for
    /// </param>
    /// <param name="_date">
    /// The date to search for.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgPayRate</c> record.
    /// </returns>
    /// <remarks>
    /// The returned <c>JmgPayRate</c>.
    /// </remarks>
    public static JmgPayRate find(JmgPayCostType _payCostType, JmgDate _date, boolean _forUpdate = false)
    {
        JmgPayRate  ret;
        ret.selectForUpdate(_forUpdate);
        ret.selectLocked(_forUpdate);
        if (_payCostType    && _date)
        {
            select firstonly ret
                where ret.PayCostType   == _payCostType &&
                      ((ret.FromDate                    && // From and To date set
                        ret.ToDate                      &&
                        ret.FromDate    <= _date        &&
                        ret.ToDate      >= _date)       ||
                       (ret.FromDate                    && // From date set
                        !ret.ToDate                     &&
                        ret.FromDate    <= _date)       ||
                       (!ret.FromDate                   && // To date set
                        ret.ToDate                      &&
                        ret.ToDate      >= _date)       ||
                       (!ret.FromDate                   && // No date set
                        !ret.ToDate));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SYS317276</DeveloperDocumentation>
	<Label>@SYS125435</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>PayCostType</TitleField1>
	<TitleField2>Price</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PayCostTypeFromToDateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgPayEmployee</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayEmployee</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>referencePayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Percent</Name>
			<Label>@SYS15774</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>referencePayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS35905</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCostType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayCostType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayRatePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayRatePrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS35904</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayCostTypeFromToDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PayCostType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>JmgPayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Rate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCostType</Name>
					<Field>PayCostType</Field>
					<RelatedField>PayCostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>