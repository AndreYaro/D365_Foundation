<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResStorageDimensionGroupFldSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResStorageDimensionGroupFldSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsActive</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditActive()
    {
        // If WHS active group, much more criteria needed
        if (this.whsDimGroupUsesWHS())
        {
            return !WHSInvent::isWHSLockedDimension(this.DimensionFieldId);
        }

        return (!(this.DimensionFieldId == fieldNum(InventDim, InventSiteId))
                && !(this.DimensionFieldId == fieldNum(InventDim, InventLocationId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditAllowBlankIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsAllowBlankIssueEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditAllowBlankIssue()
    {
        // If WHS active group, much more criteria needed
        if (this.whsDimGroupUsesWHS())
        {
            return !WHSInvent::isWHSLockedDimension(this.DimensionFieldId);
        }

        switch (this.DimensionFieldId)
        {
            case fieldNum(InventDim, InventSiteId),
                 fieldNum(InventDim, InventLocationId):
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditAllowBlankReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsAllowBlankReceiptEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditAllowBlankReceipt()
    {
        // If WHS active group, much more criteria needed
        if (this.whsDimGroupUsesWHS())
        {
            return !WHSInvent::isWHSLockedDimension(this.DimensionFieldId);
        }

        switch (this.DimensionFieldId)
        {
            case fieldNum(InventDim, InventSiteId),
                 fieldNum(InventDim, InventLocationId):
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCoveragePlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsCoveragePlanByDimensionEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    rue if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditCoveragePlan()
    {
        EcoResStorageDimensionGroup     ecoResStorageDimensionGroup;
        switch (this.DimensionFieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                return false;
            case fieldNum(InventDim, InventLocationId):
                ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::find(this.StorageDimensionGroup);
                if (ecoResStorageDimensionGroup.IsWarehouseMandatoryEnabled)
                {
                    return false;
                }
                break;
            case fieldNum (InventDim, LicensePlateId):
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditFinancialInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsFinancialInventoryEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditFinancialInvent()
    {
        // If WHS active group, much more criteria needed
        if (this.whsDimGroupUsesWHS())
        {
            return !(this.DimensionFieldId == fieldNum(InventDim, InventSiteId))
                && !(this.DimensionFieldId == fieldNum(InventDim, wmsLocationId))
                && !(this.DimensionFieldId == fieldNum(InventDim, wmsPalletId))
                && !(this.DimensionFieldId == fieldNum(InventDim, LicensePlateId))
                && !(this.DimensionFieldId == fieldNum(InventDim, InventStatusId));
        }

        switch (this.DimensionFieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                    return false;

            case fieldNum(InventDim, wmsLocationId),
                 fieldNum(InventDim, wmsPalletId),
                 fieldNum(InventDim, InventStatusId),
                 fieldNum(InventDim, LicensePlateId):
                    // Only allow users to turn this off - not turn it on, as we want to deprecate this option for these dimensions
                    if (!this.IsFinancialInventoryEnabled)
                    {
                        return false;
                    }
                    break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>PhysicalInvent</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditPhysicalInvent()
    {
        // If WHS active group, much more criteria needed
        if (this.whsDimGroupUsesWHS())
        {
            return !WHSInvent::isWHSLockedDimension(this.DimensionFieldId);
        }

        return (!(this.DimensionFieldId == fieldNum(InventDim, InventSiteId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPurchPriceSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsPurchPriceSearchEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditPurchPriceSearch()
    {
        return !(this.DimensionFieldId == fieldNum(InventDim, wmsLocationId))
            && !(this.DimensionFieldId == fieldNum(InventDim, wmsPalletId))
            && !(this.DimensionFieldId == fieldNum(InventDim, LicensePlateId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSalesPriceSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsSalesPriceSearchEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditSalesPriceSearch()
    {
        return !(this.DimensionFieldId == fieldNum(InventDim, wmsLocationId))
            && !(this.DimensionFieldId == fieldNum(InventDim, wmsPalletId))
            && !(this.DimensionFieldId == fieldNum(InventDim, LicensePlateId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedActiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsActive</c> field is correctly set up for related dimensions.
    /// </summary>
    /// <returns>
    ///    true if the setup complies to the rules; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that the active location has an active warehouse and the active pallet ID
    ///    has an active location.
    /// </remarks>
    public boolean checkRelatedActiveDimensions()
    {
        EcoResStorageDimensionGroupFldSetup     dimSetupRequired;
        EcoResStorageDimensionGroupFldSetup     dimSetupRelated;
        List                                    listDimRules = new List(Types::Container);
        ListEnumerator                          leDimRules;
        int                                     dimField;
        int                                     dimFieldRequired;

        // active location requires active warehouse
        listDimRules.addEnd([fieldNum(InventDim, wmsLocationId), fieldNum(InventDim, InventLocationId)]);

        // active palletId requires active location
        listDimRules.addEnd([fieldNum(InventDim, wmsPalletId), fieldNum(InventDim, wmsLocationId)]);

        leDimRules = listDimRules.getEnumerator();

        while (leDimRules.moveNext())
        {
            [dimField,dimFieldRequired] = leDimRules.current();

            if (this.IsActive && this.DimensionFieldId == dimField)
            {
                dimSetupRequired = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup, dimFieldRequired);
                if (dimSetupRequired.RecId && ! dimSetupRequired.IsActive)
                {
                    return checkFailed(strFmt("@SYS98482", this.fieldName(), dimSetupRequired.fieldName()));
                }
            }

            if (! this.IsActive && this.DimensionFieldId == dimFieldRequired)
            {
                dimSetupRelated = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup, dimField);
                if (dimSetupRelated.RecId && dimSetupRelated.IsActive)
                {
                    return checkFailed(strFmt("@SYS98483", this.fieldName(), dimSetupRelated.fieldName()));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedFinancialDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsFinancialInventoryEnabled</c> field is correctly set up for related
    ///    dimensions.
    /// </summary>
    /// <returns>
    ///    true if the setup complies to the rules; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that if the location is financial inventory the warehouse is also financial
    ///    inventory and if the pallet is financial inventory the location is also financial inventory.
    /// </remarks>
    public boolean checkRelatedFinancialDimensions()
    {
        EcoResStorageDimensionGroupFldSetup     dimSetupRequired;
        EcoResStorageDimensionGroupFldSetup     dimSetupRelated;
        List                                    listDimRules = new List(Types::Container);
        ListEnumerator                          leDimRules;
        int                                     dimField;
        int                                     dimFieldRequired;

        // If Location is Financial inventory then Warehouse should be as well
        listDimRules.addEnd([fieldNum(InventDim, wmsLocationId), fieldNum(InventDim, InventLocationId)]);

        // If Pallet is Financial inventory then Location should be as well
        listDimRules.addEnd([fieldNum(InventDim, wmsPalletId), fieldNum(InventDim, wmsLocationId)]);

        leDimRules = listDimRules.getEnumerator();

        while (this.IsActive && leDimRules.moveNext())
        {
            [dimField,dimFieldRequired] = leDimRules.current();

            if (this.IsFinancialInventoryEnabled && this.DimensionFieldId == dimField)
            {
                dimSetupRequired = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup, dimFieldRequired);
                if (dimSetupRequired.RecId && dimSetupRequired.IsActive && ! dimSetupRequired.IsFinancialInventoryEnabled)
                {
                    return checkFailed(strFmt("@SYS98485", this.fieldName(), dimSetupRequired.fieldName()));
                }
            }

            if (! this.IsFinancialInventoryEnabled && this.DimensionFieldId == dimFieldRequired)
            {
                dimSetupRelated = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup, dimField);
                if (dimSetupRelated.RecId && dimSetupRelated.IsActive && dimSetupRelated.IsFinancialInventoryEnabled)
                {
                    return checkFailed(strFmt("@SYS98486", this.fieldName(), dimSetupRelated.fieldName()));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedPhysicalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsPhysicalInventoryEnabled</c> field is correctly set up for related
    ///    dimensions.
    /// </summary>
    /// <returns>
    ///    true if setup complies to the rules; false otherwise.
    /// </returns>
    /// <remarks>
    ///    The following rules are checked: - if Location is physical inventory then Warehouse should be also
    ///    - if Pallet is physical inventory then Location should be also.
    /// </remarks>
    public boolean checkRelatedPhysicalDimensions()
    {
        EcoResStorageDimensionGroupFldSetup     dimSetupRequired;
        EcoResStorageDimensionGroupFldSetup     dimSetupRelated;
        List                                    listDimRules = new List(Types::Container);
        ListEnumerator                          leDimRules;
        int                                     dimField;
        int                                     dimFieldRequired;

        // If Location is physical inventory then Warehouse should be as well
        listDimRules.addEnd([fieldNum(InventDim, wmsLocationId), fieldNum(InventDim, InventLocationId)]);

        // If Pallet is physical inventory then Location should be as well
        listDimRules.addEnd([fieldNum(InventDim, wmsPalletId), fieldNum(InventDim, wmsLocationId)]);

        leDimRules = listDimRules.getEnumerator();

        while (this.IsActive && leDimRules.moveNext())
        {
            [dimField,dimFieldRequired] = leDimRules.current();

            if (this.IsPhysicalInventoryEnabled && this.DimensionFieldId == dimField)
            {
                dimSetupRequired = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup, dimFieldRequired);
                if (dimSetupRequired.RecId && dimSetupRequired.IsActive && ! dimSetupRequired.IsPhysicalInventoryEnabled)
                {
                    return checkFailed(strFmt("@SYS98487", this.fieldName(), dimSetupRequired.fieldName()));
                }
            }

            if (! this.IsPhysicalInventoryEnabled && this.DimensionFieldId == dimFieldRequired)
            {
                dimSetupRelated = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup, dimField);
                if (dimSetupRelated.RecId && dimSetupRelated.IsActive && dimSetupRelated.IsPhysicalInventoryEnabled)
                {
                    return checkFailed(strFmt("@SYS98491", this.fieldName(), dimSetupRelated.fieldName()));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes a record and then calls a method to flush the cache.
    /// </summary>
    public void delete()
    {
        super();
        EcoResTrackingDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the display name for a dimension.
    /// </summary>
    /// <returns>
    ///    A string that contains the display name.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display EcoResProductDimensionName fieldName()
    {
        DictField                   dictField;

        if (!this.RecId)
        {
            return '';
        }

        dictField               = new DictField(tableNum(InventDim), this.DimensionFieldId);

        if (!dictField.configurationKeyId() || isConfigurationkeyEnabled(dictField.configurationKeyId()))
        {
            return dictField.label();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStorageDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the buffer by using the data from a <c>EcoResStorageDimensionGroup</c> buffer.
    /// </summary>
    /// <param name="_storageDimensionGroup">
    ///    An <c>EcoResStorageDimensionGroup</c> buffer to use to initialize the buffer.
    /// </param>
    public void initFromStorageDimensionGroup(EcoResStorageDimensionGroup _storageDimensionGroup)
    {
        this.StorageDimensionGroup = _storageDimensionGroup.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the buffer with default values.
    /// </summary>
    /// <remarks>
    ///    The <c>DimensionFieldId</c> field should be set before calling this method.
    /// </remarks>
    public void initValue()
    {
        this.IsAllowBlankReceiptEnabled         = NoYes::No;
        this.IsAllowBlankIssueEnabled           = NoYes::No;

        //Set default values for the warehouse dimension
        if (this.DimensionFieldId == fieldNum(InventDim, InventLocationId))
        {
            this.IsActive                           = NoYes::Yes;
            this.IsCoveragePlanByDimensionEnabled   = NoYes::Yes;
        }

        //Set default values for the Site dimension
        else if (this.DimensionFieldId == fieldNum(InventDim, InventSiteId))
        {
            this.IsActive                           = NoYes::Yes;
            this.IsFinancialInventoryEnabled        = NoYes::Yes;
            this.IsPhysicalInventoryEnabled         = NoYes::Yes;
            this.IsCoveragePlanByDimensionEnabled   = NoYes::Yes;
        }

        this.setWHSDefaultFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record and then calls a method to flush the cache.
    /// </summary>
    public void insert()
    {
        super();
        EcoResStorageDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsActive):
                if (! this.checkRelatedActiveDimensions())
                {
                    this.IsActive = this.orig().IsActive;
                }

                if (this.IsActive && ! this.checkRelatedFinancialDimensions())
                {
                    this.IsFinancialInventoryEnabled = this.IsFinancialInventoryEnabled ? NoYes::No : NoYes::Yes;
                }

                if (this.IsActive && ! this.checkRelatedPhysicalDimensions())
                {
                    this.IsPhysicalInventoryEnabled = this.IsPhysicalInventoryEnabled ? NoYes::No : NoYes::Yes;
                }

                // A newly active dimension should directly have an active physical inventory.
                if (this.IsActive && !this.IsPhysicalInventoryEnabled)
                {
                    this.IsPhysicalInventoryEnabled = NoYes::Yes;
                } 
                break;
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsFinancialInventoryEnabled):
                if (this.IsActive && ! this.checkRelatedFinancialDimensions())
                {
                    this.IsFinancialInventoryEnabled = this.orig().IsFinancialInventoryEnabled;
                }
                break;
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsPhysicalInventoryEnabled):
                if (this.IsActive && ! this.checkRelatedPhysicalDimensions())
                {
                    this.IsPhysicalInventoryEnabled = this.orig().IsPhysicalInventoryEnabled;
                }

                if (this.IsActive && this.IsFinancialInventoryEnabled && ! this.IsPhysicalInventoryEnabled)
                {
                    this.IsPhysicalInventoryEnabled = NoYes::Yes;
                }

                if (this.IsActive && !this.IsPhysicalInventoryEnabled)
                {
                    checkFailed(strFmt("@SCM:PhysicalInventoryInactiveNotSupportedWarning", this.fieldName()));
                }
                break;
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankIssueEnabled):
                if (this.IsActive && this.IsAllowBlankIssueEnabled && this.IsFinancialInventoryEnabled)
                {
                    this.IsAllowBlankIssueEnabled = NoYes::No;
                }
                break;
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankReceiptEnabled):
                if (this.IsActive && this.IsAllowBlankReceiptEnabled && this.IsFinancialInventoryEnabled)
                {
                    this.IsAllowBlankReceiptEnabled = NoYes::No;
                }
                break;
        }

        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets storage dimension group fields according to the requirements of WHS warehouse
    /// </summary>
    /// <returns>
    /// true if the record have been updated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Changes to this method should also be reflected in validateWHSDefaultFields.
    /// </remarks>
    public boolean setWHSDefaultFields()
    {
        boolean ret = false;
        #InventDimDevelop

        if (!this.whsDimGroupUsesWHS())
        {
            if (this.DimensionFieldId == fieldNum(InventDim, InventStatusId)
             || this.DimensionFieldId == fieldNum(InventDim, LicensePlateId))
            {
                this.IsActive = NoYes::No;
                ret = true;
            }
        }
        else
        {
            switch (this.DimensionFieldId)
            {
                // Site, Warehouse, Status and Location
                case fieldNum(InventDim, InventSiteId),
                     fieldNum(InventDim, InventLocationId),
                     fieldNum(InventDim, wmsLocationId),
                     fieldNum(InventDim, InventStatusId):
                    this.IsActive                          = NoYes::Yes;
                    this.IsAllowBlankReceiptEnabled        = NoYes::No;
                    this.IsAllowBlankIssueEnabled          = NoYes::No;
                    this.IsPhysicalInventoryEnabled        = NoYes::Yes;
                    break;

                // License Plate
                case fieldNum(InventDim, LicensePlateId):
                    this.IsActive                          = NoYes::Yes;
                    this.IsAllowBlankReceiptEnabled        = NoYes::Yes;
                    this.IsAllowBlankIssueEnabled          = NoYes::Yes;
                    this.IsPhysicalInventoryEnabled        = NoYes::Yes;
                    break;

                default: // Pallet and any added dimensions are defaulted to be not active for WHS enabled dimension groups.
                    this.IsActive                          = NoYes::No;
                    this.IsAllowBlankReceiptEnabled        = NoYes::No;
                    this.IsAllowBlankIssueEnabled          = NoYes::No;
                    this.IsPhysicalInventoryEnabled        = NoYes::No;
                    break;
            }
            // All cases in switch should return true
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a record and then calls a method to flush the cache.
    /// </summary>
    public void update()
    {
        EcoResStorageDimensionGroupFldSetup ecoResStorageDimensionGroupFldSetup;
        boolean                             updatedIsSalesPriceSearchEnabled    = false;
        boolean                             updatedIsPurchPriceSearchEnabled    = false;

        ttsbegin;

        if (this.DimensionFieldId == fieldNum(InventDim,InventSiteId))
        {
            if (!this.IsActive)
            {
                throw error(strFmt("@SYS103633",fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventSiteId))));
            }

            ecoResStorageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup,fieldNum(InventDim,InventLocationId),true);

            //If any of the fields PriceDiscPurch, PriceDiscSales for the Site Dimension are unchecked,
            //and if they are checked on the Warehouse dimension, then the Warehouse dimension should also be unchecked
            updatedIsPurchPriceSearchEnabled = EcoResStorageDimensionGroupFldSetup::changedRelatedStorageDimSetup(this,ecoResStorageDimensionGroupFldSetup,fieldNum(EcoResStorageDimensionGroupFldSetup,IsPurchPriceSearchEnabled),NoYes::No,true);
            updatedIsSalesPriceSearchEnabled = EcoResStorageDimensionGroupFldSetup::changedRelatedStorageDimSetup(this,ecoResStorageDimensionGroupFldSetup,fieldNum(EcoResStorageDimensionGroupFldSetup,IsSalesPriceSearchEnabled),NoYes::No,true);
        }
        else if (this.DimensionFieldId == fieldNum(InventDim,InventLocationId))
        {
            ecoResStorageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup,fieldNum(InventDim,InventSiteId), true);

            //If any of the fields PriceDiscPurch, PriceDiscSales for the Warehouse dimension are checked,
            //and if they are unchecked on the Site dimension, then the Site dimension should also be checked
            updatedIsPurchPriceSearchEnabled = EcoResStorageDimensionGroupFldSetup::changedRelatedStorageDimSetup(this,ecoResStorageDimensionGroupFldSetup,fieldNum(EcoResStorageDimensionGroupFldSetup,IsPurchPriceSearchEnabled),NoYes::Yes,true);
            updatedIsSalesPriceSearchEnabled = EcoResStorageDimensionGroupFldSetup::changedRelatedStorageDimSetup(this,ecoResStorageDimensionGroupFldSetup,fieldNum(EcoResStorageDimensionGroupFldSetup,IsSalesPriceSearchEnabled),NoYes::Yes,true);
        }

        if (updatedIsPurchPriceSearchEnabled || updatedIsSalesPriceSearchEnabled)
        {
            ecoResStorageDimensionGroupFldSetup.update();
        }

        super();

        ttscommit;

        if (updatedIsPurchPriceSearchEnabled || updatedIsSalesPriceSearchEnabled)
        {
            if (FormDataUtil::isFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).research(true);
            }
        }

        EcoResStorageDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        EcoResStorageDimensionGroupFldSetup ecoResStorageDimensionGroupFldSetup;
        boolean                             ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(EcoResStorageDimensionGroupFldSetup,IsPurchPriceSearchEnabled) ||
            _fieldIdToCheck == fieldNum(EcoResStorageDimensionGroupFldSetup,IsSalesPriceSearchEnabled))
        {
            if (this.DimensionFieldId == fieldNum(InventDim,InventSiteId))
            {
                ecoResStorageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup,fieldNum(InventDim, InventLocationId), true);

                // If any of the fields IsSalesPriceSearchEnabled, IsPurchPriceSearchEnabled for the Site Dimension are unchecked,
                // and if they are checked on the Warehouse dimension, then check the related one
                if (this.(_fieldIdToCheck) == NoYes::No
                    && this.(_fieldIdToCheck) != ecoResStorageDimensionGroupFldSetup.(_fieldIdToCheck) )
                {
                    // If Warehouse is active, we will confirm the changes first
                    if (ecoResStorageDimensionGroupFldSetup.IsActive && FormDataUtil::isFormDataSource(this))
                    {
                        ret = ret && (Box::yesNo(strFmt("@SYS103379",fieldId2pname(this.TableId,_fieldIdToCheck)), DialogButton::No) == DialogButton::Yes);
                    }
                }
            }
            else if (this.DimensionFieldId == fieldNum(InventDim,InventLocationId))
            {
                ecoResStorageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.StorageDimensionGroup,fieldNum(InventDim, InventSiteId), true);

                // If any of the fields PriceDiscPurch, PriceDiscSales for the Warehouse dimension are checked,
                // and if they are unchecked on the Site dimension, then check the related one
                if (this.(_fieldIdToCheck) == NoYes::Yes
                    && this.(_fieldIdToCheck) != ecoResStorageDimensionGroupFldSetup.(_fieldIdToCheck) )
                {
                    // If Site is active, we will confirm the changes first
                    if (ecoResStorageDimensionGroupFldSetup.IsActive && FormDataUtil::isFormDataSource(this))
                    {
                        ret = ret && (Box::yesNo(strFmt("@SYS103380",fieldId2pname(this.TableId,_fieldIdToCheck)), DialogButton::No) == DialogButton::Yes);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWHSDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that storage dimension group setup fields are set according to the requirements of WHS warehouse
    /// </summary>
    /// <param name="_isWarehouseWHSEnabled">
    ///    Specifies if warehouse is WHS enabled
    /// </param>
    /// <returns>
    ///    true if the record can be saved: otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Changes to this method should also be reflected in setWHSDefaultFields.
    /// </remarks>
    public boolean validateWHSDefaultFields(WHSDimGroupUsesWHS _isWarehouseWHSEnabled)
    {
        boolean ret = true;
        #InventDimDevelop

        if (!_isWarehouseWHSEnabled)
        {
            if ((this.DimensionFieldId == fieldNum(InventDim, InventStatusId)
             || this.DimensionFieldId == fieldNum(InventDim, LicensePlateId))
             && this.IsActive != NoYes::No)
            {
                ret = checkFailed(strFmt("@WAX4728", this.fieldName())) && ret;
            }
        }
        else
        {
            switch (this.DimensionFieldId)
            {
                // Site, Warehouse, Status and Location
                case fieldNum(InventDim, InventSiteId),
                        fieldNum(InventDim, InventLocationId),
                        fieldNum(InventDim, wmsLocationId),
                        fieldNum(InventDim, InventStatusId):
                    if ((this.IsActive != NoYes::Yes)
                        || (this.IsAllowBlankReceiptEnabled != NoYes::No)
                        || (this.IsAllowBlankIssueEnabled   != NoYes::No)
                        || (this.IsPhysicalInventoryEnabled != NoYes::Yes))
                    {
                        ret = checkFailed(strFmt("@WAX4728", this.fieldName())) && ret;
                    }
                    break;

                // License Plate
                case fieldNum(InventDim, LicensePlateId):
                    if ((this.IsActive                    != NoYes::Yes)
                        || (this.IsAllowBlankReceiptEnabled != NoYes::Yes)
                        || (this.IsAllowBlankIssueEnabled   != NoYes::Yes)
                        || (this.IsPhysicalInventoryEnabled != NoYes::Yes))
                    {
                        ret = checkFailed(strFmt("@WAX4728", this.fieldName())) && ret;
                    }
                    break;

                default:
                    if (this.IsActive                   != NoYes::No
                    ||  this.IsAllowBlankIssueEnabled   != NoYes::No
                    ||  this.IsAllowBlankReceiptEnabled != NoYes::No
                    ||  this.IsPhysicalInventoryEnabled != NoYes::No)
                    {
                        ret = checkFailed(strFmt("@WAX4728", this.fieldName())) && ret;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                                 ret;
        EcoResStorageDimensionGroupFldSetup     origDimFieldSetup = this.orig();
        EcoResStorageDimensionGroup             ecoResStorageDimensionGroup;

        void findStorageDimensionGroup()
        {
            if (!ecoResStorageDimensionGroup)
            {
                ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::find(this.StorageDimensionGroup);
            }
        }

        if (this.RecId
            && (   this.IsAllowBlankReceiptEnabled  != origDimFieldSetup.IsAllowBlankReceiptEnabled
                || this.IsAllowBlankIssueEnabled    != origDimFieldSetup.IsAllowBlankIssueEnabled
                || this.IsActive                    != origDimFieldSetup.IsActive
                || this.IsFinancialInventoryEnabled != origDimFieldSetup.IsFinancialInventoryEnabled
                || this.IsPhysicalInventoryEnabled  != origDimFieldSetup.IsPhysicalInventoryEnabled))
        {
            // record changed -> consistency check is not entering
            findStorageDimensionGroup();
            if (ecoResStorageDimensionGroup.isUsedByItemWithTransactions())
            {
                this.data(origDimFieldSetup);
                return checkFailed("@SYS97796");
            }
        }

        ret = super();

        if (ret)
        {
            switch (this.DimensionFieldId)
            {
                case fieldNum(InventDim, InventSiteId):
                    if (!this.IsCoveragePlanByDimensionEnabled)
                    {
                        ret = checkFailed("@SYS312264"); // Coverage plan by dimension must always be selected for the Site dimension.
                    }
                    break;
                case fieldNum(InventDim, InventLocationId):
                    if (!this.IsCoveragePlanByDimensionEnabled)
                    {
                        findStorageDimensionGroup();
                        if (ecoResStorageDimensionGroup.IsWarehouseMandatoryEnabled)
                        {
                            ret = checkFailed("@SYS128761");
                        }
                    }
                    break;
            }
        }

        if (ret)
        {
            findStorageDimensionGroup();
            ret = this.validateWHSDefaultFields(ecoResStorageDimensionGroup.IsWarehouseWHSEnabled);
        }

        ret = ret && this.checkRelatedActiveDimensions();
        ret = ret && this.checkRelatedFinancialDimensions();
        ret = ret && this.checkRelatedPhysicalDimensions();

        if (ret && this.IsActive == NoYes::Yes && this.IsFinancialInventoryEnabled && !this.IsPhysicalInventoryEnabled)
        {
            ret = checkFailed(strFmt("@SCM:EcoResDimensionGroupConstraintPositiveError", "@SYS23942", "@SYS54438", this.fieldName()));
        }
        if (ret && this.IsActive == NoYes::Yes && this.IsFinancialInventoryEnabled && this.IsAllowBlankIssueEnabled)
        {
            ret = checkFailed(strFmt("@SCM:EcoResDimensionGroupConstraintNegativeError", "@SYS70095", "@SYS54438", this.fieldName()));
        }
        if (ret && this.IsActive == NoYes::Yes && this.IsFinancialInventoryEnabled && this.IsAllowBlankReceiptEnabled)
        {
            ret = checkFailed(strFmt("@SCM:EcoResDimensionGroupConstraintNegativeError", "@SYS70096", "@SYS54438", this.fieldName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDimGroupUsesWHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if related storage dimension group is WHS enabled
    /// </summary>
    /// <returns>
    /// true if related storage dimension group is WHS enabled; otherwise, false.
    /// </returns>
    private WHSDimGroupUsesWHS whsDimGroupUsesWHS()
    {
        return EcoResStorageDimensionGroup::find(this.StorageDimensionGroup).IsWarehouseWHSEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedRelatedStorageDimSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the value of a field in a related field setup record of a dimension group field from a
    /// source dimension group.
    /// </summary>
    /// <param name="_setup">
    /// The source record.
    /// </param>
    /// <param name="_relatedSetup">
    /// The destination record.
    /// </param>
    /// <param name="_fieldNum">
    /// The field ID to update.
    /// </param>
    /// <param name="_changedTo">
    /// The value of the field in the source record must have changed to update the field in the
    /// destination record.
    /// </param>
    /// <param name="_changeRelated">
    /// A Boolean value that indicates whether to update the destination field.
    /// </param>
    /// <returns>
    /// true if the change has to be or has been performed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_changeRelated" /> parameter is false, the destination field is not updated
    /// but the method returns true to indicate that the change is needed.
    /// </remarks>
    public static boolean changedRelatedStorageDimSetup(
        EcoResStorageDimensionGroupFldSetup     _setup,
        EcoResStorageDimensionGroupFldSetup     _relatedSetup,
        int                                     _fieldNum,
        NoYes                                   _changedTo,
        boolean                                 _changeRelated)
    {
        if (_setup.(_fieldNum) == _changedTo && _setup.(_fieldNum) != _setup.orig().(_fieldNum) && _relatedSetup.(_fieldNum) != _setup.(_fieldNum))
        {
            if (_changeRelated)
            {
                _relatedSetup.(_fieldNum) = _setup.(_fieldNum);
            }

            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensionGroupFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>EcoResStorageDimensionGroupFldSetup</c> record by using the specified
    ///    <c>EcoResStorageDimensionGroup</c> record and a dimension field ID.
    /// </summary>
    /// <param name="_storageDimensionGroup">
    ///    The record ID of a <c>EcoResStorageDimensionGroup</c> record to use as a filter.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///    A dimension field ID to use as a filter.
    /// </param>
    /// <param name="_update">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <returns>
    ///    A <c>EcoResStorageDimensionGroupFldSetup</c> table buffer.
    /// </returns>
    public static EcoResStorageDimensionGroupFldSetup findByDimensionGroupFieldId(
        EcoResStorageDimensionGroupRecId    _storageDimensionGroup,
        int                                 _dimensionFieldId,
        boolean                             _update = false)
    {
        EcoResStorageDimensionGroupFldSetup  ecoResStorageDimensionGroupFldSetup;

        ecoResStorageDimensionGroupFldSetup.selectForUpdate(_update);

        if (_storageDimensionGroup && _dimensionFieldId)
        {
            select firstonly ecoResStorageDimensionGroupFldSetup
                where ecoResStorageDimensionGroupFldSetup.StorageDimensionGroup == _storageDimensionGroup
                   && ecoResStorageDimensionGroupFldSetup.DimensionFieldId      == _dimensionFieldId;
        }

        return ecoResStorageDimensionGroupFldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsAllowBlankIssueEnabled</Name>
				<Source><![CDATA[
    private void defaultIsAllowBlankIssueEnabled()
    {
        if (this.IsActive && this.IsFinancialInventoryEnabled)
        {
            this.IsAllowBlankIssueEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsAllowBlankReceiptEnabled</Name>
				<Source><![CDATA[
    private void defaultIsAllowBlankReceiptEnabled()
    {
        if (this.IsActive && this.IsFinancialInventoryEnabled)
        {
            this.IsAllowBlankReceiptEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsPhysicalInventoryEnabled</Name>
				<Source><![CDATA[
    private void defaultIsPhysicalInventoryEnabled()
    {
        if (this.IsActive && this.IsFinancialInventoryEnabled)
        {
            this.IsPhysicalInventoryEnabled = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankIssueEnabled),
                [fieldNum(EcoResStorageDimensionGroupFldSetup, IsActive), fieldNum(EcoResStorageDimensionGroupFldSetup, IsFinancialInventoryEnabled)]],
            [fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankReceiptEnabled),
                [fieldNum(EcoResStorageDimensionGroupFldSetup, IsActive), fieldNum(EcoResStorageDimensionGroupFldSetup, IsFinancialInventoryEnabled)]],
            [fieldNum(EcoResStorageDimensionGroupFldSetup, IsPhysicalInventoryEnabled),
                [fieldNum(EcoResStorageDimensionGroupFldSetup, IsActive), fieldNum(EcoResStorageDimensionGroupFldSetup, IsFinancialInventoryEnabled)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankIssueEnabled): this.defaultIsAllowBlankIssueEnabled(); break;
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankReceiptEnabled): this.defaultIsAllowBlankReceiptEnabled(); break;
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsPhysicalInventoryEnabled): this.defaultIsPhysicalInventoryEnabled(); break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312244</DeveloperDocumentation>
	<FormRef>EcoResStorageDimensionGroup</FormRef>
	<Label>@SYS312253</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>StorageDimensionGroup</TitleField1>
	<TitleField2>DimensionFieldId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>StorageDimensionGroupFieldSetupIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>StorageDimensionGroupFieldSetupIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankReceiptEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankIssueEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankReceiptEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankIssueEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPhysicalInventoryEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsFinancialInventoryEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCoveragePlanByDimensionEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPurchPriceSearchEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSalesPriceSearchEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DimensionFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<RelatedTable>InventDim</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowBlankIssueEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimAllowBlankIssue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowBlankReceiptEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimAllowBlankReceipt</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCoveragePlanByDimensionEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimCovPrDimension</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsFinancialInventoryEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimFinancialInvent</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPhysicalInventoryEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPhysicalInvent</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPurchPriceSearchEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPriceDiscPurch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSalesPriceSearchEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPriceDiscSales</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StorageDimensionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResStorageDimensionGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StorageDimensionGroupFieldSetupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionFieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StorageDimensionGroupFieldSetupSortIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StorageDimensionGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResStorageDimensionGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>EcoResStorageDimensionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResStorageDimensionGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResStorageDimensionGroup_EcoResStorageDimensionGroupFldSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StorageDimensionGroup</Name>
					<Field>StorageDimensionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>